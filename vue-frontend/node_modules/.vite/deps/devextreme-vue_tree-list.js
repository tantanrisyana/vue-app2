import {
  Deferred,
  adaptivityModule,
  array_store_default,
  columnChooserModule,
  columnFixingModule,
  columnHeadersModule,
  columnsControllerModule,
  columnsResizingReorderingModule,
  compileGetter,
  compileSetter,
  component_registrator_default,
  contextMenuModule,
  createObjectWithChanges,
  dataControllerModule,
  deferRender,
  each,
  editingFormBasedModule,
  editingModule,
  editingRowBasedModule,
  editorFactoryModule,
  equalByValue,
  errorHandlingModule,
  extend,
  filterBuilderModule,
  filterPanelModule,
  filterRowModule,
  filterSyncModule,
  focusModule,
  gridViewModule,
  headerFilterModule,
  headerPanelModule,
  init_array_store,
  init_array_utils,
  init_common,
  init_component_registrator,
  init_data,
  init_deferred,
  init_extend,
  init_iterator,
  init_message,
  init_query,
  init_renderer,
  init_store_helper,
  init_themes,
  init_type,
  init_ui_errors,
  init_ui_grid_core_adaptivity,
  init_ui_grid_core_column_chooser,
  init_ui_grid_core_column_fixing,
  init_ui_grid_core_column_headers,
  init_ui_grid_core_columns_controller,
  init_ui_grid_core_columns_resizing_reordering,
  init_ui_grid_core_context_menu,
  init_ui_grid_core_data_controller,
  init_ui_grid_core_data_source_adapter,
  init_ui_grid_core_editing,
  init_ui_grid_core_editing_cell_based,
  init_ui_grid_core_editing_form_based,
  init_ui_grid_core_editing_row_based,
  init_ui_grid_core_editor_factory,
  init_ui_grid_core_error_handling,
  init_ui_grid_core_filter_builder,
  init_ui_grid_core_filter_panel,
  init_ui_grid_core_filter_row,
  init_ui_grid_core_filter_sync,
  init_ui_grid_core_focus,
  init_ui_grid_core_grid_view,
  init_ui_grid_core_header_filter,
  init_ui_grid_core_header_panel,
  init_ui_grid_core_keyboard_navigation,
  init_ui_grid_core_master_detail,
  init_ui_grid_core_modules,
  init_ui_grid_core_pager,
  init_ui_grid_core_row_dragging,
  init_ui_grid_core_rows,
  init_ui_grid_core_search,
  init_ui_grid_core_selection,
  init_ui_grid_core_sorting,
  init_ui_grid_core_state_storing,
  init_ui_grid_core_utils,
  init_ui_grid_core_validating,
  init_ui_grid_core_virtual_columns,
  init_ui_grid_core_virtual_scrolling,
  init_ui_widget,
  isDefined,
  isFunction,
  isMaterial,
  keyboardNavigationModule,
  masterDetailModule,
  message_default,
  noop,
  pagerModule,
  query_default,
  renderer_default,
  require_core,
  rowDraggingModule,
  rowsModule,
  searchModule,
  selectionModule,
  sortingModule,
  stateStoringModule,
  store_helper_default,
  ui_errors_default,
  ui_grid_core_data_source_adapter_default,
  ui_grid_core_editing_cell_based_default,
  ui_grid_core_modules_default,
  ui_grid_core_utils_default,
  ui_widget_default,
  validatingModule,
  virtualColumnsModule,
  virtualScrollingModule,
  when
} from "./chunk-ZMSIPWJ6.js";
import "./chunk-4IG7KIC4.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS
} from "./chunk-GFT2G5UO.js";

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.core.js
var ui_tree_list_core_default;
var init_ui_tree_list_core = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.core.js"() {
    init_extend();
    init_ui_grid_core_modules();
    ui_tree_list_core_default = extend({}, ui_grid_core_modules_default, {
      modules: [],
      foreachNodes: function(nodes, callBack, ignoreHasChildren) {
        for (var i = 0; i < nodes.length; i++) {
          if (false !== callBack(nodes[i]) && (ignoreHasChildren || nodes[i].hasChildren) && nodes[i].children.length) {
            this.foreachNodes(nodes[i].children, callBack, ignoreHasChildren);
          }
        }
      }
    });
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.column_headers.js
var init_ui_tree_list_column_headers = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.column_headers.js"() {
    init_ui_tree_list_core();
    init_ui_grid_core_column_headers();
    ui_tree_list_core_default.registerModule("columnHeaders", columnHeadersModule);
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.columns_controller.js
var ColumnsController;
var init_ui_tree_list_columns_controller = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.columns_controller.js"() {
    init_type();
    init_ui_tree_list_core();
    init_ui_grid_core_columns_controller();
    ColumnsController = columnsControllerModule.controllers.columns.inherit({
      _getFirstItems: function(dataSourceAdapter) {
        return this.callBase(dataSourceAdapter).map(function(node) {
          return node.data;
        });
      },
      getFirstDataColumnIndex: function() {
        var visibleColumns = this.getVisibleColumns();
        var visibleColumnsLength = visibleColumns.length;
        var firstDataColumnIndex = 0;
        for (var i = 0; i <= visibleColumnsLength - 1; i++) {
          if (!isDefined(visibleColumns[i].command)) {
            firstDataColumnIndex = visibleColumns[i].index;
            break;
          }
        }
        return firstDataColumnIndex;
      }
    });
    ui_tree_list_core_default.registerModule("columns", {
      defaultOptions: columnsControllerModule.defaultOptions,
      controllers: {
        columns: ColumnsController
      }
    });
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.data_source_adapter.js
var queryByOptions, DEFAULT_KEY_EXPRESSION, isFullBranchFilterMode, DataSourceAdapterTreeList, ui_tree_list_data_source_adapter_default;
var init_ui_tree_list_data_source_adapter = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.data_source_adapter.js"() {
    init_ui_tree_list_core();
    init_ui_errors();
    init_common();
    init_type();
    init_iterator();
    init_data();
    init_extend();
    init_ui_grid_core_utils();
    init_array_utils();
    init_array_store();
    init_query();
    init_ui_grid_core_data_source_adapter();
    init_deferred();
    init_store_helper();
    ({
      queryByOptions
    } = store_helper_default);
    DEFAULT_KEY_EXPRESSION = "id";
    isFullBranchFilterMode = (that) => "fullBranch" === that.option("filterMode");
    DataSourceAdapterTreeList = ui_grid_core_data_source_adapter_default.inherit({
      _createKeyGetter: function() {
        var keyExpr = this.getKeyExpr();
        return compileGetter(keyExpr);
      },
      _createKeySetter: function() {
        var keyExpr = this.getKeyExpr();
        if (isFunction(keyExpr)) {
          return keyExpr;
        }
        return compileSetter(keyExpr);
      },
      createParentIdGetter: function() {
        return compileGetter(this.option("parentIdExpr"));
      },
      createParentIdSetter: function() {
        var parentIdExpr = this.option("parentIdExpr");
        if (isFunction(parentIdExpr)) {
          return parentIdExpr;
        }
        return compileSetter(parentIdExpr);
      },
      _createItemsGetter: function() {
        return compileGetter(this.option("itemsExpr"));
      },
      _createHasItemsGetter: function() {
        var hasItemsExpr = this.option("hasItemsExpr");
        return hasItemsExpr && compileGetter(hasItemsExpr);
      },
      _createHasItemsSetter: function() {
        var hasItemsExpr = this.option("hasItemsExpr");
        if (isFunction(hasItemsExpr)) {
          return hasItemsExpr;
        }
        return hasItemsExpr && compileSetter(hasItemsExpr);
      },
      _updateIndexByKeyObject: function(items) {
        var that = this;
        that._indexByKey = {};
        each(items, function(index, item) {
          that._indexByKey[item.key] = index;
        });
      },
      _calculateHasItems: function(node, options) {
        var parentIds = options.storeLoadOptions.parentIds;
        var hasItems;
        var isFullBranch = isFullBranchFilterMode(this);
        if (this._hasItemsGetter && (parentIds || !options.storeLoadOptions.filter || isFullBranch)) {
          hasItems = this._hasItemsGetter(node.data);
        }
        if (void 0 === hasItems) {
          if (!this._isChildrenLoaded[node.key] && options.remoteOperations.filtering && (parentIds || isFullBranch)) {
            hasItems = true;
          } else if (options.loadOptions.filter && !options.remoteOperations.filtering && isFullBranch) {
            hasItems = node.children.length;
          } else {
            hasItems = node.hasChildren;
          }
        }
        return !!hasItems;
      },
      _fillVisibleItemsByNodes: function(nodes, options, result) {
        for (var i = 0; i < nodes.length; i++) {
          if (nodes[i].visible) {
            result.push(nodes[i]);
          }
          if ((this.isRowExpanded(nodes[i].key, options) || !nodes[i].visible) && nodes[i].hasChildren && nodes[i].children.length) {
            this._fillVisibleItemsByNodes(nodes[i].children, options, result);
          }
        }
      },
      _convertItemToNode: function(item, rootValue, nodeByKey) {
        var key = this._keyGetter(item);
        var parentId = this._parentIdGetter(item);
        parentId = isDefined(parentId) ? parentId : rootValue;
        var parentNode = nodeByKey[parentId] = nodeByKey[parentId] || {
          key: parentId,
          children: []
        };
        var node = nodeByKey[key] = nodeByKey[key] || {
          key,
          children: []
        };
        node.data = item;
        node.parent = parentNode;
        return node;
      },
      _createNodesByItems: function(items, visibleItems) {
        var rootValue = this.option("rootValue");
        var visibleByKey = {};
        var nodeByKey = this._nodeByKey = {};
        var i;
        if (visibleItems) {
          for (i = 0; i < visibleItems.length; i++) {
            visibleByKey[this._keyGetter(visibleItems[i])] = true;
          }
        }
        for (i = 0; i < items.length; i++) {
          var node = this._convertItemToNode(items[i], rootValue, nodeByKey);
          if (void 0 === node.key) {
            return;
          }
          node.visible = !visibleItems || !!visibleByKey[node.key];
          if (node.parent) {
            node.parent.children.push(node);
          }
        }
        var rootNode = nodeByKey[rootValue] || {
          key: rootValue,
          children: []
        };
        rootNode.level = -1;
        return rootNode;
      },
      _convertDataToPlainStructure: function(data, parentId, result) {
        var key;
        if (this._itemsGetter && !data.isConverted) {
          result = result || [];
          for (var i = 0; i < data.length; i++) {
            var item = createObjectWithChanges(data[i]);
            key = this._keyGetter(item);
            if (void 0 === key) {
              key = result.length + 1;
              this._keySetter(item, key);
            }
            this._parentIdSetter(item, void 0 === parentId ? this.option("rootValue") : parentId);
            result.push(item);
            var childItems = this._itemsGetter(item);
            if (childItems && childItems.length) {
              this._convertDataToPlainStructure(childItems, key, result);
              var itemsExpr = this.option("itemsExpr");
              if (!isFunction(itemsExpr)) {
                delete item[itemsExpr];
              }
            }
          }
          result.isConverted = true;
          return result;
        }
        return data;
      },
      _createIdFilter: function(field, keys) {
        var parentIdFilters = [];
        for (var i = 0; i < keys.length; i++) {
          parentIdFilters.push([field, "=", keys[i]]);
        }
        return ui_grid_core_utils_default.combineFilters(parentIdFilters, "or");
      },
      _customizeRemoteOperations: function(options, operationTypes) {
        this.callBase.apply(this, arguments);
        options.remoteOperations.paging = false;
        var expandVisibleNodes = false;
        if (this.option("autoExpandAll")) {
          options.remoteOperations.sorting = false;
          options.remoteOperations.filtering = false;
          if ((!this._lastLoadOptions || operationTypes.filtering && !options.storeLoadOptions.filter) && !options.isCustomLoading) {
            expandVisibleNodes = true;
          }
        }
        if (!options.isCustomLoading) {
          this._isReload = this._isReload || operationTypes.reload;
          if (!options.cachedStoreData) {
            this._isChildrenLoaded = {};
            if (this._isReload) {
              this._nodeByKey = {};
            }
          }
          if (this.option("expandNodesOnFiltering") && (operationTypes.filtering || this._isReload && options.storeLoadOptions.filter)) {
            if (options.storeLoadOptions.filter) {
              expandVisibleNodes = true;
            } else {
              options.collapseVisibleNodes = true;
            }
          }
        }
        options.expandVisibleNodes = expandVisibleNodes;
      },
      _getParentIdsToLoad: function(parentIds) {
        var parentIdsToLoad = [];
        for (var i = 0; i < parentIds.length; i++) {
          var node = this.getNodeByKey(parentIds[i]);
          if (!node || node.hasChildren && !node.children.length) {
            parentIdsToLoad.push(parentIds[i]);
          }
        }
        return parentIdsToLoad;
      },
      _handleDataLoading: function(options) {
        var rootValue = this.option("rootValue");
        var parentIdExpr = this.option("parentIdExpr");
        var parentIds = options.storeLoadOptions.parentIds;
        if (parentIds) {
          options.isCustomLoading = false;
        }
        this.callBase.apply(this, arguments);
        if (options.remoteOperations.filtering && !options.isCustomLoading) {
          if (isFullBranchFilterMode(this) && options.cachedStoreData || !options.storeLoadOptions.filter) {
            var expandedRowKeys = options.collapseVisibleNodes ? [] : this.option("expandedRowKeys");
            parentIds = [rootValue].concat(expandedRowKeys).concat(parentIds || []);
            var parentIdsToLoad = options.data ? this._getParentIdsToLoad(parentIds) : parentIds;
            if (parentIdsToLoad.length) {
              options.cachedPagingData = void 0;
              options.data = void 0;
              options.mergeStoreLoadData = true;
              options.delay = this.option("loadingTimeout");
            }
            options.storeLoadOptions.parentIds = parentIdsToLoad;
            options.storeLoadOptions.filter = this._createIdFilter(parentIdExpr, parentIdsToLoad);
          }
        }
      },
      _generateInfoToLoad: function(data, needChildren) {
        var key;
        var keyMap = {};
        var resultKeyMap = {};
        var resultKeys = [];
        var rootValue = this.option("rootValue");
        var i;
        for (i = 0; i < data.length; i++) {
          key = needChildren ? this._parentIdGetter(data[i]) : this._keyGetter(data[i]);
          keyMap[key] = true;
        }
        for (i = 0; i < data.length; i++) {
          key = needChildren ? this._keyGetter(data[i]) : this._parentIdGetter(data[i]);
          var needToLoad = needChildren ? this.isRowExpanded(key) : key !== rootValue;
          if (!keyMap[key] && !resultKeyMap[key] && needToLoad) {
            resultKeyMap[key] = true;
            resultKeys.push(key);
          }
        }
        return {
          keyMap: resultKeyMap,
          keys: resultKeys
        };
      },
      _loadParentsOrChildren: function(data, options, needChildren) {
        var that = this;
        var filter;
        var needLocalFiltering;
        var {
          keys,
          keyMap
        } = that._generateInfoToLoad(data, needChildren);
        var d = new Deferred();
        var isRemoteFiltering = options.remoteOperations.filtering;
        var maxFilterLengthInRequest = that.option("maxFilterLengthInRequest");
        var loadOptions = isRemoteFiltering ? options.storeLoadOptions : options.loadOptions;
        function concatLoadedData(loadedData) {
          if (isRemoteFiltering) {
            that._cachedStoreData = that._cachedStoreData.concat(loadedData);
          }
          return data.concat(loadedData);
        }
        if (!keys.length) {
          return d.resolve(data);
        }
        var cachedNodes = keys.map((id) => this.getNodeByKey(id)).filter((node) => node && node.data);
        if (cachedNodes.length === keys.length) {
          if (needChildren) {
            cachedNodes = cachedNodes.reduce((result, node) => result.concat(node.children), []);
          }
          if (cachedNodes.length) {
            return that._loadParentsOrChildren(concatLoadedData(cachedNodes.map((node) => node.data)), options, needChildren);
          }
        }
        var keyExpr = needChildren ? that.option("parentIdExpr") : that.getKeyExpr();
        filter = that._createIdFilter(keyExpr, keys);
        var filterLength = encodeURI(JSON.stringify(filter)).length;
        if (filterLength > maxFilterLengthInRequest) {
          filter = function(itemData) {
            return keyMap[needChildren ? that._parentIdGetter(itemData) : that._keyGetter(itemData)];
          };
          needLocalFiltering = isRemoteFiltering;
        }
        loadOptions = extend({}, loadOptions, {
          filter: !needLocalFiltering ? filter : null
        });
        var store = options.fullData ? new array_store_default(options.fullData) : that._dataSource.store();
        that.loadFromStore(loadOptions, store).done(function(loadedData) {
          if (loadedData.length) {
            if (needLocalFiltering) {
              loadedData = query_default(loadedData).filter(filter).toArray();
            }
            that._loadParentsOrChildren(concatLoadedData(loadedData), options, needChildren).done(d.resolve).fail(d.reject);
          } else {
            d.resolve(data);
          }
        }).fail(d.reject);
        return d;
      },
      _loadParents: function(data, options) {
        return this._loadParentsOrChildren(data, options);
      },
      _loadChildrenIfNeed: function(data, options) {
        if (isFullBranchFilterMode(this)) {
          return this._loadParentsOrChildren(data, options, true);
        }
        return when(data);
      },
      _updateHasItemsMap: function(options) {
        var parentIds = options.storeLoadOptions.parentIds;
        if (parentIds) {
          for (var i = 0; i < parentIds.length; i++) {
            this._isChildrenLoaded[parentIds[i]] = true;
          }
        }
      },
      _getKeyInfo: function() {
        return {
          key: () => "key",
          keyOf: (data) => data.key
        };
      },
      _applyBatch: function(changes) {
        var baseChanges = [];
        changes.forEach((change) => {
          if ("insert" === change.type) {
            baseChanges = baseChanges.concat(this._applyInsert(change));
          } else if ("remove" === change.type) {
            baseChanges = baseChanges.concat(this._applyRemove(change));
          } else if ("update" === change.type) {
            baseChanges.push({
              type: change.type,
              key: change.key,
              data: {
                data: change.data
              }
            });
          }
        });
        this.callBase(baseChanges);
      },
      _setHasItems: function(node, value) {
        var hasItemsSetter = this._hasItemsSetter;
        node.hasChildren = value;
        if (hasItemsSetter && node.data) {
          hasItemsSetter(node.data, value);
        }
      },
      _applyInsert: function(change) {
        var baseChanges = [];
        var parentId = this.parentKeyOf(change.data);
        var parentNode = this.getNodeByKey(parentId);
        if (parentNode) {
          var rootValue = this.option("rootValue");
          var node = this._convertItemToNode(change.data, rootValue, this._nodeByKey);
          node.hasChildren = false;
          node.level = parentNode.level + 1;
          node.visible = true;
          parentNode.children.push(node);
          this._isChildrenLoaded[node.key] = true;
          this._setHasItems(parentNode, true);
          if ((!parentNode.parent || this.isRowExpanded(parentNode.key)) && void 0 !== change.index) {
            var index = this.items().indexOf(parentNode) + 1;
            index += change.index >= 0 ? Math.min(change.index, parentNode.children.length) : parentNode.children.length;
            baseChanges.push({
              type: change.type,
              data: node,
              index
            });
          }
        }
        return baseChanges;
      },
      _applyRemove: function(change) {
        var baseChanges = [];
        var node = this.getNodeByKey(change.key);
        var parentNode = node && node.parent;
        if (parentNode) {
          var index = parentNode.children.indexOf(node);
          if (index >= 0) {
            parentNode.children.splice(index, 1);
            if (!parentNode.children.length) {
              this._setHasItems(parentNode, false);
            }
            baseChanges.push(change);
            baseChanges = baseChanges.concat(this.getChildNodeKeys(change.key).map((key) => ({
              type: change.type,
              key
            })));
          }
        }
        return baseChanges;
      },
      _handleDataLoaded: function(options) {
        var data = options.data = this._convertDataToPlainStructure(options.data);
        if (!options.remoteOperations.filtering && options.loadOptions.filter) {
          options.fullData = queryByOptions(query_default(options.data), {
            sort: options.loadOptions && options.loadOptions.sort
          }).toArray();
        }
        this._updateHasItemsMap(options);
        this.callBase(options);
        if (data.isConverted && this._cachedStoreData) {
          this._cachedStoreData.isConverted = true;
        }
      },
      _fillNodes: function(nodes, options, expandedRowKeys, level) {
        var isFullBranch = isFullBranchFilterMode(this);
        level = level || 0;
        for (var i = 0; i < nodes.length; i++) {
          var node = nodes[i];
          var needToExpand = false;
          this._fillNodes(nodes[i].children, options, expandedRowKeys, level + 1);
          node.level = level;
          node.hasChildren = this._calculateHasItems(node, options);
          if (node.visible && node.hasChildren) {
            if (isFullBranch) {
              if (node.children.filter((node2) => node2.visible).length) {
                needToExpand = true;
              } else if (node.children.length) {
                ui_tree_list_core_default.foreachNodes(node.children, function(node2) {
                  node2.visible = true;
                });
              }
            } else {
              needToExpand = true;
            }
            if (options.expandVisibleNodes && needToExpand) {
              expandedRowKeys.push(node.key);
            }
          }
          if (node.visible || node.hasChildren) {
            node.parent.hasChildren = true;
          }
        }
      },
      _processTreeStructure: function(options, visibleItems) {
        var data = options.data;
        var parentIds = options.storeLoadOptions.parentIds;
        var expandedRowKeys = [];
        if (parentIds && parentIds.length || this._isReload) {
          if (options.fullData && options.fullData.length > options.data.length) {
            data = options.fullData;
            visibleItems = visibleItems || options.data;
          }
          this._rootNode = this._createNodesByItems(data, visibleItems);
          if (!this._rootNode) {
            options.data = new Deferred().reject(ui_errors_default.Error("E1046", this.getKeyExpr()));
            return;
          }
          this._fillNodes(this._rootNode.children, options, expandedRowKeys);
          this._isNodesInitializing = true;
          if (options.collapseVisibleNodes || expandedRowKeys.length) {
            this.option("expandedRowKeys", expandedRowKeys);
          }
          this._isReload = false;
          this.executeAction("onNodesInitialized", {
            root: this._rootNode
          });
          this._isNodesInitializing = false;
        }
        var resultData = [];
        this._fillVisibleItemsByNodes(this._rootNode.children, options, resultData);
        options.data = resultData;
        this._totalItemsCount = resultData.length;
      },
      _handleDataLoadedCore: function(options) {
        var that = this;
        var data = options.data;
        var callBase = that.callBase;
        var filter = options.storeLoadOptions.filter || options.loadOptions.filter;
        var filterMode = that.option("filterMode");
        var visibleItems;
        var parentIds = options.storeLoadOptions.parentIds;
        var needLoadParents = filter && (!parentIds || !parentIds.length) && "standard" !== filterMode;
        if (!options.isCustomLoading) {
          if (needLoadParents) {
            var d = options.data = new Deferred();
            if ("matchOnly" === filterMode) {
              visibleItems = data;
            }
            return that._loadParents(data, options).done(function(data2) {
              that._loadChildrenIfNeed(data2, options).done((data3) => {
                options.data = data3;
                that._processTreeStructure(options, visibleItems);
                callBase.call(that, options);
                d.resolve(options.data);
              });
            }).fail(d.reject);
          } else {
            that._processTreeStructure(options);
          }
        }
        that.callBase(options);
      },
      _handlePush: function(changes) {
        var reshapeOnPush = this._dataSource._reshapeOnPush;
        var isNeedReshape = reshapeOnPush && !!changes.length;
        if (isNeedReshape) {
          this._isReload = true;
        }
        this.callBase.apply(this, arguments);
      },
      init: function(dataSource, remoteOperations) {
        this.callBase.apply(this, arguments);
        var dataStructure = this.option("dataStructure");
        this._keyGetter = this._createKeyGetter();
        this._parentIdGetter = this.createParentIdGetter();
        this._hasItemsGetter = this._createHasItemsGetter();
        this._hasItemsSetter = this._createHasItemsSetter();
        if ("tree" === dataStructure) {
          this._itemsGetter = this._createItemsGetter();
          this._keySetter = this._createKeySetter();
          this._parentIdSetter = this.createParentIdSetter();
        }
        this._nodeByKey = {};
        this._isChildrenLoaded = {};
        this._totalItemsCount = 0;
        this.createAction("onNodesInitialized");
      },
      getKeyExpr: function() {
        var store = this.store();
        var key = store && store.key();
        var keyExpr = this.option("keyExpr");
        if (isDefined(key) && isDefined(keyExpr)) {
          if (!equalByValue(key, keyExpr)) {
            throw ui_errors_default.Error("E1044");
          }
        }
        return key || keyExpr || DEFAULT_KEY_EXPRESSION;
      },
      keyOf: function(data) {
        return this._keyGetter && this._keyGetter(data);
      },
      parentKeyOf: function(data) {
        return this._parentIdGetter && this._parentIdGetter(data);
      },
      getRootNode: function() {
        return this._rootNode;
      },
      totalItemsCount: function() {
        return this._totalItemsCount;
      },
      isRowExpanded: function(key, cache) {
        if (cache) {
          var isExpandedByKey = cache.isExpandedByKey;
          if (!isExpandedByKey) {
            isExpandedByKey = cache.isExpandedByKey = {};
            this.option("expandedRowKeys").forEach(function(key2) {
              isExpandedByKey[key2] = true;
            });
          }
          return !!isExpandedByKey[key];
        }
        var indexExpandedNodeKey = ui_grid_core_utils_default.getIndexByKey(key, this.option("expandedRowKeys"), null);
        return indexExpandedNodeKey >= 0;
      },
      _changeRowExpandCore: function(key) {
        var expandedRowKeys = this.option("expandedRowKeys").slice();
        var indexExpandedNodeKey = ui_grid_core_utils_default.getIndexByKey(key, expandedRowKeys, null);
        if (indexExpandedNodeKey < 0) {
          expandedRowKeys.push(key);
        } else {
          expandedRowKeys.splice(indexExpandedNodeKey, 1);
        }
        this.option("expandedRowKeys", expandedRowKeys);
      },
      changeRowExpand: function(key) {
        this._changeRowExpandCore(key);
        return this._isNodesInitializing ? new Deferred().resolve() : this.load();
      },
      getNodeByKey: function(key) {
        if (this._nodeByKey) {
          return this._nodeByKey[key];
        }
      },
      getNodeLeafKeys: function() {
        var that = this;
        var result = [];
        var keys = that._rootNode ? [that._rootNode.key] : [];
        keys.forEach(function(key) {
          var node = that.getNodeByKey(key);
          node && ui_tree_list_core_default.foreachNodes([node], function(childNode) {
            !childNode.children.length && result.push(childNode.key);
          });
        });
        return result;
      },
      getChildNodeKeys: function(parentKey) {
        var node = this.getNodeByKey(parentKey);
        var childrenKeys = [];
        node && ui_tree_list_core_default.foreachNodes(node.children, function(childNode) {
          childrenKeys.push(childNode.key);
        });
        return childrenKeys;
      },
      loadDescendants: function(keys, childrenOnly) {
        var that = this;
        var d = new Deferred();
        var remoteOperations = that.remoteOperations();
        if (isDefined(keys)) {
          keys = Array.isArray(keys) ? keys : [keys];
        } else {
          keys = that.getNodeLeafKeys();
        }
        if (!remoteOperations.filtering || !keys.length) {
          return d.resolve();
        }
        var loadOptions = that._dataSource._createStoreLoadOptions();
        loadOptions.parentIds = keys;
        that.load(loadOptions).done(function() {
          if (!childrenOnly) {
            var childKeys = function(that2, keys2) {
              var childKeys2 = [];
              keys2.forEach(function(key) {
                var node = that2.getNodeByKey(key);
                node && node.children.forEach(function(child) {
                  childKeys2.push(child.key);
                });
              });
              return childKeys2;
            }(that, keys);
            if (childKeys.length) {
              that.loadDescendants(childKeys, childrenOnly).done(d.resolve).fail(d.reject);
              return;
            }
          }
          d.resolve();
        }).fail(d.reject);
        return d.promise();
      },
      forEachNode: function() {
        var nodes = [];
        var callback;
        if (1 === arguments.length) {
          callback = arguments[0];
          var rootNode = this.getRootNode();
          nodes = rootNode && rootNode.children || [];
        } else if (2 === arguments.length) {
          callback = arguments[1];
          nodes = arguments[0];
          nodes = Array.isArray(nodes) ? nodes : [nodes];
        }
        ui_tree_list_core_default.foreachNodes(nodes, callback);
      }
    });
    ui_tree_list_data_source_adapter_default = {
      extend: function(extender) {
        DataSourceAdapterTreeList = DataSourceAdapterTreeList.inherit(extender);
      },
      create: function(component) {
        return new DataSourceAdapterTreeList(component);
      }
    };
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.data_controller.js
var DataController;
var init_ui_tree_list_data_controller = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.data_controller.js"() {
    init_extend();
    init_deferred();
    init_ui_tree_list_core();
    init_common();
    init_ui_tree_list_data_source_adapter();
    init_ui_grid_core_data_controller();
    DataController = dataControllerModule.controllers.data.inherit({
      _getDataSourceAdapter: function() {
        return ui_tree_list_data_source_adapter_default;
      },
      _getNodeLevel: function(node) {
        var level = -1;
        while (node.parent) {
          if (node.visible) {
            level++;
          }
          node = node.parent;
        }
        return level;
      },
      _generateDataItem: function(node, options) {
        return {
          rowType: "data",
          node,
          key: node.key,
          data: node.data,
          isExpanded: this.isRowExpanded(node.key, options),
          level: this._getNodeLevel(node)
        };
      },
      _loadOnOptionChange: function() {
        this._dataSource.load();
      },
      _isItemEquals: function(item1, item2) {
        if (!this.callBase.apply(this, arguments)) {
          return false;
        }
        if (item1.node && item2.node && item1.node.hasChildren !== item2.node.hasChildren) {
          return false;
        }
        if (item1.level !== item2.level || item1.isExpanded !== item2.isExpanded) {
          return false;
        }
        return true;
      },
      init: function() {
        this.createAction("onRowExpanding");
        this.createAction("onRowExpanded");
        this.createAction("onRowCollapsing");
        this.createAction("onRowCollapsed");
        this.callBase.apply(this, arguments);
      },
      keyOf: function(data) {
        var dataSource = this._dataSource;
        if (dataSource) {
          return dataSource.keyOf(data);
        }
      },
      key: function() {
        var dataSource = this._dataSource;
        if (dataSource) {
          return dataSource.getKeyExpr();
        }
      },
      publicMethods: function() {
        return this.callBase().concat(["expandRow", "collapseRow", "isRowExpanded", "getRootNode", "getNodeByKey", "loadDescendants", "forEachNode"]);
      },
      changeRowExpand: function(key) {
        if (this._dataSource) {
          var args = {
            key
          };
          var isExpanded = this.isRowExpanded(key);
          this.executeAction(isExpanded ? "onRowCollapsing" : "onRowExpanding", args);
          if (!args.cancel) {
            return this._dataSource.changeRowExpand(key).done(() => {
              this.executeAction(isExpanded ? "onRowCollapsed" : "onRowExpanded", args);
            });
          }
        }
        return new Deferred().resolve();
      },
      isRowExpanded: function(key, cache) {
        return this._dataSource && this._dataSource.isRowExpanded(key, cache);
      },
      expandRow: function(key) {
        if (!this.isRowExpanded(key)) {
          return this.changeRowExpand(key);
        }
        return new Deferred().resolve();
      },
      collapseRow: function(key) {
        if (this.isRowExpanded(key)) {
          return this.changeRowExpand(key);
        }
        return new Deferred().resolve();
      },
      getRootNode: function() {
        return this._dataSource && this._dataSource.getRootNode();
      },
      optionChanged: function(args) {
        switch (args.name) {
          case "rootValue":
          case "parentIdExpr":
          case "itemsExpr":
          case "filterMode":
          case "expandNodesOnFiltering":
          case "autoExpandAll":
          case "hasItemsExpr":
          case "dataStructure":
            this._columnsController.reset();
            this._items = [];
            this._refreshDataSource();
            args.handled = true;
            break;
          case "expandedRowKeys":
          case "onNodesInitialized":
            if (this._dataSource && !this._dataSource._isNodesInitializing && !equalByValue(args.value, args.previousValue)) {
              this._loadOnOptionChange();
            }
            args.handled = true;
            break;
          case "maxFilterLengthInRequest":
            args.handled = true;
            break;
          default:
            this.callBase(args);
        }
      },
      getNodeByKey: function(key) {
        if (!this._dataSource) {
          return;
        }
        return this._dataSource.getNodeByKey(key);
      },
      getChildNodeKeys: function(parentKey) {
        if (!this._dataSource) {
          return;
        }
        return this._dataSource.getChildNodeKeys(parentKey);
      },
      loadDescendants: function(keys, childrenOnly) {
        if (!this._dataSource) {
          return;
        }
        return this._dataSource.loadDescendants(keys, childrenOnly);
      },
      forEachNode: function() {
        this._dataSource.forEachNode.apply(this, arguments);
      }
    });
    ui_tree_list_core_default.registerModule("data", {
      defaultOptions: function() {
        return extend({}, dataControllerModule.defaultOptions(), {
          itemsExpr: "items",
          parentIdExpr: "parentId",
          rootValue: 0,
          dataStructure: "plain",
          expandedRowKeys: [],
          filterMode: "withAncestors",
          expandNodesOnFiltering: true,
          autoExpandAll: false,
          onNodesInitialized: null,
          maxFilterLengthInRequest: 1500,
          paging: {
            enabled: false
          }
        });
      },
      controllers: {
        data: DataController
      }
    });
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.sorting.js
var init_ui_tree_list_sorting = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.sorting.js"() {
    init_ui_tree_list_core();
    init_ui_grid_core_sorting();
    ui_tree_list_core_default.registerModule("sorting", sortingModule);
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.rows.js
var TREELIST_TEXT_CONTENT, TREELIST_EXPAND_ICON_CONTAINER_CLASS, TREELIST_CELL_EXPANDABLE_CLASS, TREELIST_EMPTY_SPACE, TREELIST_EXPANDED_CLASS, TREELIST_COLLAPSED_CLASS, RowsView;
var init_ui_tree_list_rows = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.rows.js"() {
    init_renderer();
    init_ui_tree_list_core();
    init_ui_grid_core_rows();
    TREELIST_TEXT_CONTENT = "dx-treelist-text-content";
    TREELIST_EXPAND_ICON_CONTAINER_CLASS = "dx-treelist-icon-container";
    TREELIST_CELL_EXPANDABLE_CLASS = "dx-treelist-cell-expandable";
    TREELIST_EMPTY_SPACE = "dx-treelist-empty-space";
    TREELIST_EXPANDED_CLASS = "dx-treelist-expanded";
    TREELIST_COLLAPSED_CLASS = "dx-treelist-collapsed";
    RowsView = rowsModule.views.rowsView.inherit(/* @__PURE__ */ function() {
      var createIcon = function(hasIcon, isExpanded) {
        var $iconElement = renderer_default("<div>").addClass(TREELIST_EMPTY_SPACE);
        if (hasIcon) {
          $iconElement.toggleClass(TREELIST_EXPANDED_CLASS, isExpanded).toggleClass(TREELIST_COLLAPSED_CLASS, !isExpanded).append(renderer_default("<span>"));
        }
        return $iconElement;
      };
      return {
        _renderIconContainer: function($container, options) {
          var $iconContainer = renderer_default("<div>").addClass(TREELIST_EXPAND_ICON_CONTAINER_CLASS).appendTo($container);
          options.watch && options.watch(function() {
            return [options.row.level, options.row.isExpanded, options.row.node.hasChildren];
          }, () => {
            $iconContainer.empty();
            this._renderIcons($iconContainer, options);
          });
          $container.addClass(TREELIST_CELL_EXPANDABLE_CLASS);
          return this._renderIcons($iconContainer, options);
        },
        _renderIcons: function($iconContainer, options) {
          var row = options.row;
          var level = row.level;
          for (var i = 0; i <= level; i++) {
            $iconContainer.append(createIcon(i === level && row.node.hasChildren, row.isExpanded));
          }
          return $iconContainer;
        },
        _renderCellCommandContent: function(container, model) {
          this._renderIconContainer(container, model);
          return true;
        },
        _processTemplate: function(template, options) {
          var that = this;
          var resultTemplate;
          var renderingTemplate = this.callBase(template);
          var firstDataColumnIndex = that._columnsController.getFirstDataColumnIndex();
          if (renderingTemplate && options.column.index === firstDataColumnIndex) {
            resultTemplate = {
              render: function(options2) {
                var $container = options2.container;
                if (that._renderCellCommandContent($container, options2.model)) {
                  options2.container = function($container2) {
                    return renderer_default("<div>").addClass(TREELIST_TEXT_CONTENT).appendTo($container2);
                  }($container);
                }
                renderingTemplate.render(options2);
              }
            };
          } else {
            resultTemplate = renderingTemplate;
          }
          return resultTemplate;
        },
        _updateCell: function($cell, options) {
          $cell = $cell.hasClass(TREELIST_TEXT_CONTENT) ? $cell.parent() : $cell;
          this.callBase($cell, options);
        },
        _rowClick: function(e) {
          var dataController = this._dataController;
          var $targetElement = renderer_default(e.event.target);
          var isExpandIcon = this.isExpandIcon($targetElement);
          var item = dataController && dataController.items()[e.rowIndex];
          if (isExpandIcon && item) {
            dataController.changeRowExpand(item.key);
          }
          this.callBase(e);
        },
        _createRow: function(row) {
          var node = row && row.node;
          var $rowElement = this.callBase.apply(this, arguments);
          if (node) {
            this.setAria("level", row.level + 1, $rowElement);
            if (node.hasChildren) {
              this.setAria("expanded", row.isExpanded, $rowElement);
            }
          }
          return $rowElement;
        },
        isExpandIcon: function($targetElement) {
          return !!$targetElement.closest("." + TREELIST_EXPANDED_CLASS + ", ." + TREELIST_COLLAPSED_CLASS).length;
        }
      };
    }());
    ui_tree_list_core_default.registerModule("rows", {
      defaultOptions: rowsModule.defaultOptions,
      views: {
        rowsView: RowsView
      }
    });
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.context_menu.js
var init_ui_tree_list_context_menu = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.context_menu.js"() {
    init_ui_tree_list_core();
    init_ui_grid_core_context_menu();
    ui_tree_list_core_default.registerModule("contextMenu", contextMenuModule);
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.error_handling.js
var init_ui_tree_list_error_handling = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.error_handling.js"() {
    init_ui_tree_list_core();
    init_ui_grid_core_error_handling();
    ui_tree_list_core_default.registerModule("errorHandling", errorHandlingModule);
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.grid_view.js
var GridView;
var init_ui_tree_list_grid_view = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.grid_view.js"() {
    init_ui_tree_list_core();
    init_ui_grid_core_grid_view();
    GridView = gridViewModule.views.gridView.inherit({
      _getWidgetAriaLabel: function() {
        return "dxTreeList-ariaTreeList";
      },
      _getTableRoleName: function() {
        return "treegrid";
      }
    });
    ui_tree_list_core_default.registerModule("gridView", {
      defaultOptions: gridViewModule.defaultOptions,
      controllers: gridViewModule.controllers,
      views: {
        gridView: GridView
      },
      extenders: {
        controllers: {
          resizing: {
            _toggleBestFitMode: function(isBestFit) {
              this.callBase(isBestFit);
              var $rowsTable = this._rowsView.getTableElement();
              $rowsTable.find(".dx-treelist-cell-expandable").toggleClass(this.addWidgetPrefix("best-fit"), isBestFit);
            }
          }
        }
      }
    });
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.header_panel.js
var init_ui_tree_list_header_panel = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.header_panel.js"() {
    init_ui_tree_list_core();
    init_ui_grid_core_header_panel();
    ui_tree_list_core_default.registerModule("headerPanel", headerPanelModule);
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.base.js
var callModuleItemsMethod, DATAGRID_ROW_SELECTOR, TREELIST_CLASS, TreeList, ui_tree_list_base_default;
var init_ui_tree_list_base = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.base.js"() {
    init_component_registrator();
    init_common();
    init_type();
    init_iterator();
    init_extend();
    init_ui_widget();
    init_ui_tree_list_core();
    init_themes();
    init_ui_tree_list_column_headers();
    init_ui_tree_list_columns_controller();
    init_ui_tree_list_data_controller();
    init_ui_tree_list_sorting();
    init_ui_tree_list_rows();
    init_ui_tree_list_context_menu();
    init_ui_tree_list_error_handling();
    init_ui_tree_list_grid_view();
    init_ui_tree_list_header_panel();
    callModuleItemsMethod = ui_tree_list_core_default.callModuleItemsMethod;
    DATAGRID_ROW_SELECTOR = ".dx-row";
    TREELIST_CLASS = "dx-treelist";
    ui_tree_list_core_default.registerModulesOrder(["stateStoring", "columns", "selection", "editorFactory", "columnChooser", "editingRowBased", "editingFormBased", "editingCellBased", "editing", "grouping", "masterDetail", "validating", "adaptivity", "data", "virtualScrolling", "columnHeaders", "filterRow", "headerPanel", "headerFilter", "sorting", "search", "rows", "pager", "columnsResizingReordering", "contextMenu", "keyboardNavigation", "errorHandling", "summary", "columnFixing", "export", "gridView"]);
    TreeList = ui_widget_default.inherit({
      _activeStateUnit: DATAGRID_ROW_SELECTOR,
      _getDefaultOptions: function() {
        var result = this.callBase();
        each(ui_tree_list_core_default.modules, function() {
          if (isFunction(this.defaultOptions)) {
            extend(true, result, this.defaultOptions());
          }
        });
        return result;
      },
      _defaultOptionsRules: function() {
        return this.callBase().concat([{
          device: function() {
            return isMaterial();
          },
          options: {
            showRowLines: true,
            showColumnLines: false,
            headerFilter: {
              height: 315
            },
            editing: {
              useIcons: true
            }
          }
        }]);
      },
      _init: function() {
        this.callBase();
        ui_tree_list_core_default.processModules(this, ui_tree_list_core_default);
        callModuleItemsMethod(this, "init");
      },
      _clean: noop,
      _optionChanged: function(args) {
        callModuleItemsMethod(this, "optionChanged", [args]);
        if (!args.handled) {
          this.callBase(args);
        }
      },
      _dimensionChanged: function() {
        this.updateDimensions(true);
      },
      _visibilityChanged: function(visible) {
        if (visible) {
          this.updateDimensions();
        }
      },
      _initMarkup: function() {
        this.callBase.apply(this, arguments);
        this.$element().addClass(TREELIST_CLASS);
        this.getView("gridView").render(this.$element());
      },
      _renderContentImpl: function() {
        this.getView("gridView").update();
      },
      _renderContent: function() {
        var that = this;
        deferRender(function() {
          that._renderContentImpl();
        });
      },
      _dispose: function() {
        this.callBase();
        callModuleItemsMethod(this, "dispose");
      },
      isReady: function() {
        return this.getController("data").isReady();
      },
      beginUpdate: function() {
        this.callBase();
        callModuleItemsMethod(this, "beginUpdate");
      },
      endUpdate: function() {
        callModuleItemsMethod(this, "endUpdate");
        this.callBase();
      },
      getController: function(name) {
        return this._controllers[name];
      },
      getView: function(name) {
        return this._views[name];
      },
      focus: function(element) {
        this.callBase();
        if (isDefined(element)) {
          this.getController("keyboardNavigation").focus(element);
        }
      }
    });
    TreeList.registerModule = ui_tree_list_core_default.registerModule.bind(ui_tree_list_core_default);
    component_registrator_default("dxTreeList", TreeList);
    ui_tree_list_base_default = TreeList;
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.state_storing.js
var origApplyState;
var init_ui_tree_list_state_storing = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.state_storing.js"() {
    init_ui_tree_list_core();
    init_extend();
    init_ui_grid_core_state_storing();
    origApplyState = stateStoringModule.extenders.controllers.stateStoring.applyState;
    ui_tree_list_core_default.registerModule("stateStoring", extend(true, {}, stateStoringModule, {
      extenders: {
        controllers: {
          stateStoring: {
            applyState: function(state) {
              origApplyState.apply(this, arguments);
              this.option("expandedRowKeys", state.expandedRowKeys ? state.expandedRowKeys.slice() : []);
            }
          },
          data: {
            getUserState: function() {
              var state = this.callBase.apply(this, arguments);
              if (!this.option("autoExpandAll")) {
                state.expandedRowKeys = this.option("expandedRowKeys");
              }
              return state;
            }
          }
        }
      }
    }));
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.column_chooser.js
var init_ui_tree_list_column_chooser = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.column_chooser.js"() {
    init_ui_tree_list_core();
    init_ui_grid_core_column_chooser();
    ui_tree_list_core_default.registerModule("columnChooser", columnChooserModule);
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.master_detail.js
var init_ui_tree_list_master_detail = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.master_detail.js"() {
    init_ui_tree_list_core();
    init_ui_grid_core_master_detail();
    init_extend();
    ui_tree_list_core_default.registerModule("masterDetail", extend(true, {}, masterDetailModule, {
      extenders: {
        controllers: {
          data: {
            isRowExpanded: function() {
              return this.callBase.apply(this, arguments);
            },
            _processItems: function() {
              return this.callBase.apply(this, arguments);
            },
            _processDataItem: function() {
              return this.callBase.apply(this, arguments);
            }
          }
        }
      }
    }));
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.editor_factory.js
var init_ui_tree_list_editor_factory = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.editor_factory.js"() {
    init_ui_tree_list_core();
    init_ui_grid_core_editor_factory();
    ui_tree_list_core_default.registerModule("editorFactory", editorFactoryModule);
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.editing.js
function needToCallOriginalClickHandler(e, originalClickHandler) {
  var $targetElement = renderer_default(e.event.target);
  if (!$targetElement.closest("." + TREELIST_EXPAND_ICON_CONTAINER_CLASS2).length) {
    originalClickHandler.call(this, e);
    return true;
  }
  return false;
}
var TREELIST_EXPAND_ICON_CONTAINER_CLASS2, SELECT_CHECKBOX_CLASS, DATA_EDIT_DATA_INSERT_TYPE, EditingController, originalRowClick, originalRowDblClick, validateClick, RowsViewExtender;
var init_ui_tree_list_editing = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.editing.js"() {
    init_ui_tree_list_editor_factory();
    init_renderer();
    init_ui_errors();
    init_type();
    init_extend();
    init_deferred();
    init_message();
    init_ui_tree_list_core();
    init_ui_grid_core_utils();
    init_ui_grid_core_editing();
    TREELIST_EXPAND_ICON_CONTAINER_CLASS2 = "dx-treelist-icon-container";
    SELECT_CHECKBOX_CLASS = "dx-select-checkbox";
    DATA_EDIT_DATA_INSERT_TYPE = "insert";
    EditingController = editingModule.controllers.editing.inherit({
      _generateNewItem: function(key) {
        var item = this.callBase(key);
        item.data = {
          key
        };
        item.children = [];
        item.level = 0;
        item.parentKey = this.option("rootValue");
        return item;
      },
      _needInsertItem: function(change, changeType, items, item) {
        var dataController = this.getController("data");
        var dataSourceAdapter = dataController.dataSource();
        var parentKey = null === dataSourceAdapter || void 0 === dataSourceAdapter ? void 0 : dataSourceAdapter.parentKeyOf(change.data);
        if (void 0 !== parentKey && parentKey !== this.option("rootValue")) {
          var rowIndex = ui_grid_core_utils_default.getIndexByKey(parentKey, items);
          if (rowIndex >= 0 && this._dataController.isRowExpanded(parentKey)) {
            items.splice(rowIndex + 1, 0, item);
          }
          return false;
        }
        return this.callBase.apply(this, arguments);
      },
      _isEditColumnVisible: function() {
        var result = this.callBase.apply(this, arguments);
        var editingOptions = this.option("editing");
        return result || editingOptions.allowAdding;
      },
      _isDefaultButtonVisible: function(button, options) {
        var result = this.callBase.apply(this, arguments);
        var row = options.row;
        if ("add" === button.name) {
          return this.allowAdding(options) && row.rowIndex !== this._getVisibleEditRowIndex() && !(row.removed || row.isNewRow);
        }
        return result;
      },
      _getEditingButtons: function(options) {
        var buttons = this.callBase.apply(this, arguments);
        if (!options.column.buttons) {
          buttons.unshift(this._getButtonConfig("add", options));
        }
        return buttons;
      },
      _beforeSaveEditData: function(change) {
        var dataController = this._dataController;
        var result = this.callBase.apply(this, arguments);
        if (change && change.type !== DATA_EDIT_DATA_INSERT_TYPE) {
          var store = null === dataController || void 0 === dataController ? void 0 : dataController.store();
          var key = null === store || void 0 === store ? void 0 : store.key();
          if (!isDefined(key)) {
            throw ui_errors_default.Error("E1045");
          }
        }
        return result;
      },
      addRowByRowIndex: function(rowIndex) {
        var dataController = this.getController("data");
        var row = dataController.getVisibleRows()[rowIndex];
        return this.addRow(row ? row.key : void 0);
      },
      addRow: function(key) {
        if (void 0 === key) {
          key = this.option("rootValue");
        }
        return this.callBase.call(this, key);
      },
      _addRowCore: function(data, parentKey, oldEditRowIndex) {
        var callBase = this.callBase;
        var rootValue = this.option("rootValue");
        var dataController = this.getController("data");
        var dataSourceAdapter = dataController.dataSource();
        var parentKeyGetter = dataSourceAdapter.createParentIdGetter();
        parentKey = parentKeyGetter(data);
        if (void 0 !== parentKey && parentKey !== rootValue && !dataController.isRowExpanded(parentKey)) {
          var deferred = new Deferred();
          dataController.expandRow(parentKey).done(() => {
            setTimeout(() => {
              callBase.call(this, data, parentKey, oldEditRowIndex).done(deferred.resolve).fail(deferred.reject);
            });
          }).fail(deferred.reject);
          return deferred.promise();
        }
        return callBase.call(this, data, parentKey, oldEditRowIndex);
      },
      _initNewRow: function(options, parentKey) {
        var dataController = this.getController("data");
        var dataSourceAdapter = dataController.dataSource();
        var parentIdSetter = dataSourceAdapter.createParentIdSetter();
        parentIdSetter(options.data, parentKey);
        return this.callBase.apply(this, arguments);
      },
      allowAdding: function(options) {
        return this._allowEditAction("allowAdding", options);
      },
      _needToCloseEditableCell: function($targetElement) {
        return this.callBase.apply(this, arguments) || $targetElement.closest("." + TREELIST_EXPAND_ICON_CONTAINER_CLASS2).length && this.isEditing();
      },
      getButtonLocalizationNames() {
        var names = this.callBase.apply(this);
        names.add = "dxTreeList-editingAddRowToNode";
        return names;
      }
    });
    originalRowClick = editingModule.extenders.views.rowsView._rowClick;
    originalRowDblClick = editingModule.extenders.views.rowsView._rowDblClick;
    validateClick = function(e) {
      var $targetElement = renderer_default(e.event.target);
      var originalClickHandler = "dxdblclick" === e.event.type ? originalRowDblClick : originalRowClick;
      if ($targetElement.closest("." + SELECT_CHECKBOX_CLASS).length) {
        return false;
      }
      return !needToCallOriginalClickHandler.call(this, e, originalClickHandler);
    };
    RowsViewExtender = extend({}, editingModule.extenders.views.rowsView, {
      _renderCellCommandContent: function($container, options) {
        var editingController = this._editingController;
        var isEditRow = options.row && editingController.isEditRow(options.row.rowIndex);
        var isEditing = options.isEditing || isEditRow;
        if (!isEditing) {
          return this.callBase.apply(this, arguments);
        }
        return false;
      },
      _rowClick: function(e) {
        if (validateClick.call(this, e)) {
          this.callBase.apply(this, arguments);
        }
      },
      _rowDblClick: function(e) {
        if (validateClick.call(this, e)) {
          this.callBase.apply(this, arguments);
        }
      }
    });
    ui_tree_list_core_default.registerModule("editing", {
      defaultOptions: function() {
        return extend(true, editingModule.defaultOptions(), {
          editing: {
            texts: {
              addRowToNode: message_default.format("dxTreeList-editingAddRowToNode")
            }
          }
        });
      },
      controllers: {
        editing: EditingController
      },
      extenders: {
        controllers: extend(true, {}, editingModule.extenders.controllers, {
          data: {
            changeRowExpand: function() {
              this._editingController.refresh();
              return this.callBase.apply(this, arguments);
            }
          }
        }),
        views: {
          rowsView: RowsViewExtender,
          headerPanel: editingModule.extenders.views.headerPanel
        }
      }
    });
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.editing_row_based.js
var init_ui_tree_list_editing_row_based = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.editing_row_based.js"() {
    init_ui_tree_list_core();
    init_ui_grid_core_editing_row_based();
    ui_tree_list_core_default.registerModule("editingRowBased", editingRowBasedModule);
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.editing_form_based.js
var init_ui_tree_list_editing_form_based = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.editing_form_based.js"() {
    init_ui_tree_list_core();
    init_ui_grid_core_editing_form_based();
    ui_tree_list_core_default.registerModule("editingFormBased", editingFormBasedModule);
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.editing_cell_based.js
var init_ui_tree_list_editing_cell_based = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.editing_cell_based.js"() {
    init_ui_tree_list_core();
    init_ui_grid_core_editing_cell_based();
    ui_tree_list_core_default.registerModule("editingCellBased", ui_grid_core_editing_cell_based_default);
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.validating.js
var EditingControllerExtender;
var init_ui_tree_list_validating = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.validating.js"() {
    init_extend();
    init_ui_tree_list_core();
    init_ui_grid_core_validating();
    EditingControllerExtender = extend({}, validatingModule.extenders.controllers.editing);
    delete EditingControllerExtender.processItems;
    delete EditingControllerExtender.processDataItem;
    ui_tree_list_core_default.registerModule("validating", {
      defaultOptions: validatingModule.defaultOptions,
      controllers: validatingModule.controllers,
      extenders: {
        controllers: {
          editing: EditingControllerExtender,
          editorFactory: validatingModule.extenders.controllers.editorFactory
        },
        views: validatingModule.extenders.views
      }
    });
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.virtual_scrolling.js
var oldDefaultOptions, originalDataControllerExtender, originalDataSourceAdapterExtender;
var init_ui_tree_list_virtual_scrolling = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.virtual_scrolling.js"() {
    init_ui_tree_list_core();
    init_ui_tree_list_data_source_adapter();
    init_ui_grid_core_virtual_scrolling();
    init_extend();
    oldDefaultOptions = virtualScrollingModule.defaultOptions;
    originalDataControllerExtender = virtualScrollingModule.extenders.controllers.data;
    originalDataSourceAdapterExtender = virtualScrollingModule.extenders.dataSourceAdapter;
    virtualScrollingModule.extenders.controllers.data = extend({}, originalDataControllerExtender, {
      _loadOnOptionChange: function() {
        var virtualScrollController = this._dataSource && this._dataSource._virtualScrollController;
        virtualScrollController && virtualScrollController.reset();
        this.callBase();
      }
    });
    virtualScrollingModule.extenders.dataSourceAdapter = extend({}, originalDataSourceAdapterExtender, {
      changeRowExpand: function() {
        return this.callBase.apply(this, arguments).done(() => {
          var viewportItemIndex = this.getViewportItemIndex();
          viewportItemIndex >= 0 && this.setViewportItemIndex(viewportItemIndex);
        });
      }
    });
    ui_tree_list_core_default.registerModule("virtualScrolling", extend({}, virtualScrollingModule, {
      defaultOptions: function() {
        return extend(true, oldDefaultOptions(), {
          scrolling: {
            mode: "virtual"
          }
        });
      }
    }));
    ui_tree_list_data_source_adapter_default.extend(virtualScrollingModule.extenders.dataSourceAdapter);
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.filter_row.js
var init_ui_tree_list_filter_row = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.filter_row.js"() {
    init_ui_tree_list_core();
    init_ui_grid_core_filter_row();
    ui_tree_list_core_default.registerModule("filterRow", filterRowModule);
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.header_filter.js
var init_ui_tree_list_header_filter = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.header_filter.js"() {
    init_ui_tree_list_core();
    init_ui_grid_core_header_filter();
    ui_tree_list_core_default.registerModule("headerFilter", headerFilterModule);
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.filter_sync.js
var init_ui_tree_list_filter_sync = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.filter_sync.js"() {
    init_ui_tree_list_core();
    init_ui_grid_core_filter_sync();
    ui_tree_list_core_default.registerModule("filterSync", filterSyncModule);
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.filter_builder.js
var init_ui_tree_list_filter_builder = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.filter_builder.js"() {
    init_ui_tree_list_core();
    init_ui_grid_core_filter_builder();
    ui_tree_list_core_default.registerModule("filterBuilder", filterBuilderModule);
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.filter_panel.js
var init_ui_tree_list_filter_panel = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.filter_panel.js"() {
    init_ui_tree_list_core();
    init_ui_grid_core_filter_panel();
    ui_tree_list_core_default.registerModule("filterPanel", filterPanelModule);
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.pager.js
var init_ui_tree_list_pager = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.pager.js"() {
    init_ui_tree_list_core();
    init_ui_grid_core_pager();
    ui_tree_list_core_default.registerModule("pager", pagerModule);
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.columns_resizing_reordering.js
var init_ui_tree_list_columns_resizing_reordering = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.columns_resizing_reordering.js"() {
    init_ui_tree_list_core();
    init_ui_grid_core_columns_resizing_reordering();
    ui_tree_list_core_default.registerModule("columnsResizingReordering", columnsResizingReorderingModule);
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.column_fixing.js
var init_ui_tree_list_column_fixing = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.column_fixing.js"() {
    init_ui_tree_list_core();
    init_ui_grid_core_column_fixing();
    ui_tree_list_core_default.registerModule("columnFixing", columnFixingModule);
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.adaptivity.js
var init_ui_tree_list_adaptivity = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.adaptivity.js"() {
    init_ui_tree_list_core();
    init_ui_grid_core_adaptivity();
    ui_tree_list_core_default.registerModule("adaptivity", adaptivityModule);
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.selection.js
var TREELIST_SELECT_ALL_CLASS, CELL_FOCUS_DISABLED_CLASS, SELECT_CHECKBOX_CLASS2, originalRowClick2, originalHandleDataChanged, nodeExists;
var init_ui_tree_list_selection = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.selection.js"() {
    init_renderer();
    init_ui_tree_list_core();
    init_common();
    init_ui_grid_core_selection();
    init_extend();
    init_type();
    TREELIST_SELECT_ALL_CLASS = "dx-treelist-select-all";
    CELL_FOCUS_DISABLED_CLASS = "dx-cell-focus-disabled";
    SELECT_CHECKBOX_CLASS2 = "dx-select-checkbox";
    originalRowClick2 = selectionModule.extenders.views.rowsView._rowClick;
    originalHandleDataChanged = selectionModule.extenders.controllers.data._handleDataChanged;
    nodeExists = function(array, currentKey) {
      return !!array.filter(function(key) {
        return key === currentKey;
      }).length;
    };
    ui_tree_list_core_default.registerModule("selection", extend(true, {}, selectionModule, {
      defaultOptions: function() {
        return extend(true, selectionModule.defaultOptions(), {
          selection: {
            showCheckBoxesMode: "always",
            recursive: false
          }
        });
      },
      extenders: {
        controllers: {
          data: {
            _handleDataChanged: function(e) {
              var selectionController = this.getController("selection");
              var isRecursiveSelection = selectionController.isRecursiveSelection();
              if (isRecursiveSelection && (!e || "updateSelectionState" !== e.changeType)) {
                selectionController.updateSelectionState({
                  selectedItemKeys: this.option("selectedRowKeys")
                });
              }
              originalHandleDataChanged.apply(this, arguments);
            },
            loadDescendants: function() {
              var that = this;
              var d = that.callBase.apply(that, arguments);
              var selectionController = that.getController("selection");
              var isRecursiveSelection = selectionController.isRecursiveSelection();
              if (isRecursiveSelection) {
                d.done(function() {
                  selectionController.updateSelectionState({
                    selectedItemKeys: that.option("selectedRowKeys")
                  });
                });
              }
              return d;
            }
          },
          selection: {
            init: function() {
              this.callBase.apply(this, arguments);
              this._selectionStateByKey = {};
            },
            _getSelectionConfig: function() {
              var config = this.callBase.apply(this, arguments);
              var plainItems = config.plainItems;
              config.plainItems = (all) => {
                if (all) {
                  return this._dataController.getCachedStoreData() || [];
                }
                return plainItems.apply(this, arguments).map((item) => item.data);
              };
              config.isItemSelected = (item) => {
                var key = this._dataController.keyOf(item);
                return this.isRowSelected(key);
              };
              config.isSelectableItem = () => true;
              config.getItemData = (item) => item;
              return config;
            },
            renderSelectCheckBoxContainer: function($container, model) {
              var rowsView = this.component.getView("rowsView");
              $container.addClass(CELL_FOCUS_DISABLED_CLASS);
              var $checkbox = rowsView._renderSelectCheckBox($container, {
                value: model.row.isSelected,
                row: model.row,
                column: model.column
              });
              rowsView._attachCheckBoxClickEvent($checkbox);
            },
            _updateSelectColumn: noop,
            _getSelectAllNodeKeys: function() {
              var component = this.component;
              var root = component.getRootNode();
              var cache = {};
              var keys = [];
              var isRecursiveSelection = this.isRecursiveSelection();
              root && ui_tree_list_core_default.foreachNodes(root.children, function(node) {
                if (void 0 !== node.key && (node.visible || isRecursiveSelection)) {
                  keys.push(node.key);
                }
                if (!node.visible) {
                  return true;
                }
                return isRecursiveSelection ? false : component.isRowExpanded(node.key, cache);
              });
              return keys;
            },
            isSelectAll: function() {
              var selectedRowKeys = this.option("selectedRowKeys") || [];
              if (0 === selectedRowKeys.length) {
                return false;
              }
              var component = this.component;
              var visibleKeys = this._getSelectAllNodeKeys();
              var isRecursiveSelection = this.isRecursiveSelection();
              var hasIndeterminateState = false;
              var selectedVisibleKeys = visibleKeys.filter(function(key) {
                var isRowSelected = component.isRowSelected(key, isRecursiveSelection);
                if (void 0 === isRowSelected) {
                  hasIndeterminateState = true;
                }
                return isRowSelected;
              });
              if (!selectedVisibleKeys.length) {
                return hasIndeterminateState ? void 0 : false;
              } else if (selectedVisibleKeys.length === visibleKeys.length) {
                return true;
              }
            },
            selectAll: function() {
              var visibleKeys = this._getSelectAllNodeKeys().filter((key) => !this.isRowSelected(key));
              this.focusedItemIndex(-1);
              return this.selectRows(visibleKeys, true);
            },
            deselectAll: function() {
              var visibleKeys = this._getSelectAllNodeKeys();
              this.focusedItemIndex(-1);
              return this.deselectRows(visibleKeys);
            },
            selectedItemKeys: function(value, preserve, isDeselect, isSelectAll) {
              var that = this;
              var selectedRowKeys = that.option("selectedRowKeys");
              var isRecursiveSelection = this.isRecursiveSelection();
              var normalizedArgs = isRecursiveSelection && that._normalizeSelectionArgs({
                keys: isDefined(value) ? value : []
              }, preserve, !isDeselect);
              if (normalizedArgs && !equalByValue(normalizedArgs.selectedRowKeys, selectedRowKeys)) {
                that._isSelectionNormalizing = true;
                return this.callBase(normalizedArgs.selectedRowKeys, false, false, false).always(function() {
                  that._isSelectionNormalizing = false;
                }).done(function(items) {
                  normalizedArgs.selectedRowsData = items;
                  that._fireSelectionChanged(normalizedArgs);
                });
              }
              return this.callBase(value, preserve, isDeselect, isSelectAll);
            },
            changeItemSelection: function(itemIndex, keyboardKeys) {
              var isRecursiveSelection = this.isRecursiveSelection();
              if (isRecursiveSelection && !keyboardKeys.shift) {
                var key = this._dataController.getKeyByRowIndex(itemIndex);
                return this.selectedItemKeys(key, true, this.isRowSelected(key)).done(() => {
                  this.isRowSelected(key) && this.callBase(itemIndex, keyboardKeys, true);
                });
              }
              return this.callBase.apply(this, arguments);
            },
            _updateParentSelectionState: function(node, isSelected) {
              var that = this;
              var state = isSelected;
              var parentNode = node.parent;
              if (parentNode) {
                if (parentNode.children.length > 1) {
                  if (false === isSelected) {
                    var hasSelectedState = parentNode.children.some(function(childNode, index, children) {
                      return that._selectionStateByKey[childNode.key];
                    });
                    state = hasSelectedState ? void 0 : false;
                  } else if (true === isSelected) {
                    var hasNonSelectedState = parentNode.children.some(function(childNode) {
                      return !that._selectionStateByKey[childNode.key];
                    });
                    state = hasNonSelectedState ? void 0 : true;
                  }
                }
                this._selectionStateByKey[parentNode.key] = state;
                if (parentNode.parent && parentNode.parent.level >= 0) {
                  this._updateParentSelectionState(parentNode, state);
                }
              }
            },
            _updateChildrenSelectionState: function(node, isSelected) {
              var that = this;
              var children = node.children;
              children && children.forEach(function(childNode) {
                that._selectionStateByKey[childNode.key] = isSelected;
                if (childNode.children.length > 0) {
                  that._updateChildrenSelectionState(childNode, isSelected);
                }
              });
            },
            _updateSelectionStateCore: function(keys, isSelected) {
              var dataController = this._dataController;
              for (var i = 0; i < keys.length; i++) {
                this._selectionStateByKey[keys[i]] = isSelected;
                var node = dataController.getNodeByKey(keys[i]);
                if (node) {
                  this._updateParentSelectionState(node, isSelected);
                  this._updateChildrenSelectionState(node, isSelected);
                }
              }
            },
            _getSelectedParentKeys: function(key, selectedItemKeys, useCash) {
              var selectedParentNode;
              var node = this._dataController.getNodeByKey(key);
              var parentNode = node && node.parent;
              var result = [];
              while (parentNode && parentNode.level >= 0) {
                result.unshift(parentNode.key);
                var isSelected = useCash ? !nodeExists(selectedItemKeys, parentNode.key) && this.isRowSelected(parentNode.key) : selectedItemKeys.indexOf(parentNode.key) >= 0;
                if (isSelected) {
                  selectedParentNode = parentNode;
                  result = this._getSelectedParentKeys(selectedParentNode.key, selectedItemKeys, useCash).concat(result);
                  break;
                } else if (useCash) {
                  break;
                }
                parentNode = parentNode.parent;
              }
              return selectedParentNode && result || [];
            },
            _getSelectedChildKeys: function(key, keysToIgnore) {
              var childKeys = [];
              var node = this._dataController.getNodeByKey(key);
              node && ui_tree_list_core_default.foreachNodes(node.children, (childNode) => {
                var ignoreKeyIndex = keysToIgnore.indexOf(childNode.key);
                if (ignoreKeyIndex < 0) {
                  childKeys.push(childNode.key);
                }
                return ignoreKeyIndex > 0 || ignoreKeyIndex < 0 && void 0 === this._selectionStateByKey[childNode.key];
              });
              return childKeys;
            },
            _normalizeParentKeys: function(key, args) {
              var keysToIgnore = [key];
              var parentNodeKeys = this._getSelectedParentKeys(key, args.selectedRowKeys);
              if (parentNodeKeys.length) {
                keysToIgnore = keysToIgnore.concat(parentNodeKeys);
                keysToIgnore.forEach(function(key2) {
                  var index = args.selectedRowKeys.indexOf(key2);
                  if (index >= 0) {
                    args.selectedRowKeys.splice(index, 1);
                  }
                });
                var childKeys = this._getSelectedChildKeys(parentNodeKeys[0], keysToIgnore);
                args.selectedRowKeys = args.selectedRowKeys.concat(childKeys);
              }
            },
            _normalizeChildrenKeys: function(key, args) {
              var node = this._dataController.getNodeByKey(key);
              node && node.children.forEach((childNode) => {
                var index = args.selectedRowKeys.indexOf(childNode.key);
                if (index >= 0) {
                  args.selectedRowKeys.splice(index, 1);
                }
                this._normalizeChildrenKeys(childNode.key, args);
              });
            },
            _normalizeSelectedRowKeysCore: function(keys, args, preserve, isSelect) {
              var that = this;
              keys.forEach(function(key) {
                if (preserve && that.isRowSelected(key) === isSelect) {
                  return;
                }
                that._normalizeChildrenKeys(key, args);
                var index = args.selectedRowKeys.indexOf(key);
                if (isSelect) {
                  if (index < 0) {
                    args.selectedRowKeys.push(key);
                  }
                  args.currentSelectedRowKeys.push(key);
                } else {
                  if (index >= 0) {
                    args.selectedRowKeys.splice(index, 1);
                  }
                  args.currentDeselectedRowKeys.push(key);
                  that._normalizeParentKeys(key, args);
                }
              });
            },
            _normalizeSelectionArgs: function(args, preserve, isSelect) {
              var result;
              var keys = Array.isArray(args.keys) ? args.keys : [args.keys];
              var selectedRowKeys = this.option("selectedRowKeys") || [];
              if (keys.length) {
                result = {
                  currentSelectedRowKeys: [],
                  currentDeselectedRowKeys: [],
                  selectedRowKeys: preserve ? selectedRowKeys.slice(0) : []
                };
                this._normalizeSelectedRowKeysCore(keys, result, preserve, isSelect);
              }
              return result;
            },
            _updateSelectedItems: function(args) {
              this.updateSelectionState(args);
              this.callBase(args);
            },
            _fireSelectionChanged: function() {
              if (!this._isSelectionNormalizing) {
                this.callBase.apply(this, arguments);
              }
            },
            _isModeLeavesOnly: function(mode) {
              return "leavesOnly" === mode;
            },
            _removeDuplicatedKeys: function(keys) {
              var result = [];
              var processedKeys = {};
              keys.forEach((key) => {
                if (!processedKeys[key]) {
                  processedKeys[key] = true;
                  result.push(key);
                }
              });
              return result;
            },
            _getAllChildKeys(key) {
              var childKeys = [];
              var node = this._dataController.getNodeByKey(key);
              node && ui_tree_list_core_default.foreachNodes(node.children, function(childNode) {
                childKeys.push(childNode.key);
              }, true);
              return childKeys;
            },
            _getAllSelectedRowKeys: function(keys) {
              var result = [];
              keys.forEach((key) => {
                var parentKeys = this._getSelectedParentKeys(key, [], true);
                var childKeys = this._getAllChildKeys(key);
                result.push.apply(result, parentKeys.concat([key], childKeys));
              });
              result = this._removeDuplicatedKeys(result);
              return result;
            },
            _getParentSelectedRowKeys: function(keys) {
              var that = this;
              var result = [];
              keys.forEach((key) => {
                var parentKeys = that._getSelectedParentKeys(key, keys);
                !parentKeys.length && result.push(key);
              });
              return result;
            },
            _getLeafSelectedRowKeys: function(keys) {
              var result = [];
              var dataController = this._dataController;
              keys.forEach(function(key) {
                var node = dataController.getNodeByKey(key);
                node && !node.hasChildren && result.push(key);
              });
              return result;
            },
            isRecursiveSelection: function() {
              var selectionMode = this.option("selection.mode");
              var isRecursive = this.option("selection.recursive");
              return "multiple" === selectionMode && isRecursive;
            },
            updateSelectionState: function(options) {
              var removedItemKeys = options.removedItemKeys || [];
              var selectedItemKeys = options.selectedItemKeys || [];
              if (this.isRecursiveSelection()) {
                this._updateSelectionStateCore(removedItemKeys, false);
                this._updateSelectionStateCore(selectedItemKeys, true);
              }
            },
            isRowSelected: function(key, isRecursiveSelection) {
              var _isRecursiveSelection;
              var result = this.callBase.apply(this, arguments);
              isRecursiveSelection = null !== (_isRecursiveSelection = isRecursiveSelection) && void 0 !== _isRecursiveSelection ? _isRecursiveSelection : this.isRecursiveSelection();
              if (!result && isRecursiveSelection) {
                if (key in this._selectionStateByKey) {
                  return this._selectionStateByKey[key];
                }
                return false;
              }
              return result;
            },
            getSelectedRowKeys(mode) {
              if (!this._dataController) {
                return [];
              }
              var selectedRowKeys = this.callBase.apply(this, arguments);
              if (mode) {
                if (this.isRecursiveSelection()) {
                  selectedRowKeys = this._getAllSelectedRowKeys(selectedRowKeys);
                }
                if ("all" !== mode) {
                  if ("excludeRecursive" === mode) {
                    selectedRowKeys = this._getParentSelectedRowKeys(selectedRowKeys);
                  } else if (this._isModeLeavesOnly(mode)) {
                    selectedRowKeys = this._getLeafSelectedRowKeys(selectedRowKeys);
                  }
                }
              }
              return selectedRowKeys;
            },
            getSelectedRowsData: function(mode) {
              var dataController = this._dataController;
              var selectedKeys = this.getSelectedRowKeys(mode) || [];
              var selectedRowsData = [];
              selectedKeys.forEach(function(key) {
                var node = dataController.getNodeByKey(key);
                node && selectedRowsData.push(node.data);
              });
              return selectedRowsData;
            },
            refresh: function() {
              this._selectionStateByKey = {};
              return this.callBase.apply(this, arguments);
            }
          }
        },
        views: {
          columnHeadersView: {
            _processTemplate: function(template, options) {
              var that = this;
              var resultTemplate;
              var renderingTemplate = this.callBase(template, options);
              var firstDataColumnIndex = that._columnsController.getFirstDataColumnIndex();
              if (renderingTemplate && "header" === options.rowType && options.column.index === firstDataColumnIndex) {
                resultTemplate = {
                  render: function(options2) {
                    if ("multiple" === that.option("selection.mode")) {
                      that.renderSelectAll(options2.container, options2.model);
                    }
                    renderingTemplate.render(options2);
                  }
                };
              } else {
                resultTemplate = renderingTemplate;
              }
              return resultTemplate;
            },
            renderSelectAll: function($cell, options) {
              $cell.addClass(TREELIST_SELECT_ALL_CLASS);
              this._renderSelectAllCheckBox($cell);
            },
            _isSortableElement: function($target) {
              return this.callBase($target) && !$target.closest("." + SELECT_CHECKBOX_CLASS2).length;
            }
          },
          rowsView: {
            _renderIcons: function($iconContainer, options) {
              this.callBase.apply(this, arguments);
              if (!options.row.isNewRow && "multiple" === this.option("selection.mode")) {
                this.getController("selection").renderSelectCheckBoxContainer($iconContainer, options);
              }
              return $iconContainer;
            },
            _rowClick: function(e) {
              var $targetElement = renderer_default(e.event.target);
              if (this.isExpandIcon($targetElement)) {
                this.callBase.apply(this, arguments);
              } else {
                originalRowClick2.apply(this, arguments);
              }
            }
          }
        }
      }
    }));
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.search.js
var init_ui_tree_list_search = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.search.js"() {
    init_ui_tree_list_core();
    init_ui_grid_core_search();
    ui_tree_list_core_default.registerModule("search", searchModule);
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.keyboard_navigation.js
var init_ui_tree_list_keyboard_navigation = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.keyboard_navigation.js"() {
    init_ui_tree_list_core();
    init_ui_grid_core_keyboard_navigation();
    init_extend();
    ui_tree_list_core_default.registerModule("keyboardNavigation", extend(true, {}, keyboardNavigationModule, {
      extenders: {
        controllers: {
          keyboardNavigation: {
            _leftRightKeysHandler: function(eventArgs, isEditing) {
              var rowIndex = this.getVisibleRowIndex();
              var dataController = this._dataController;
              if (eventArgs.ctrl) {
                var directionCode = this._getDirectionCodeByKey(eventArgs.keyName);
                var key = dataController.getKeyByRowIndex(rowIndex);
                if ("nextInRow" === directionCode) {
                  dataController.expandRow(key);
                } else {
                  dataController.collapseRow(key);
                }
              } else {
                return this.callBase.apply(this, arguments);
              }
            }
          }
        }
      }
    }));
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.virtual_columns.js
var init_ui_tree_list_virtual_columns = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.virtual_columns.js"() {
    init_ui_tree_list_core();
    init_ui_grid_core_virtual_columns();
    ui_tree_list_core_default.registerModule("virtualColumns", virtualColumnsModule);
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.focus.js
function findIndex(items, callback) {
  var result = -1;
  items.forEach(function(node, index) {
    if (callback(node)) {
      result = index;
    }
  });
  return result;
}
var init_ui_tree_list_focus = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.focus.js"() {
    init_ui_tree_list_core();
    init_extend();
    init_deferred();
    init_ui_grid_core_focus();
    ui_tree_list_core_default.registerModule("focus", extend(true, {}, focusModule, {
      extenders: {
        controllers: {
          data: {
            changeRowExpand: function(key) {
              if (this.option("focusedRowEnabled") && this.isRowExpanded(key)) {
                if (this._isFocusedRowInside(key)) {
                  this.option("focusedRowKey", key);
                }
              }
              return this.callBase.apply(this, arguments);
            },
            _isFocusedRowInside: function(parentKey) {
              var focusedRowKey = this.option("focusedRowKey");
              var rowIndex = this.getRowIndexByKey(focusedRowKey);
              var focusedRow = rowIndex >= 0 && this.getVisibleRows()[rowIndex];
              var parent = focusedRow && focusedRow.node.parent;
              while (parent) {
                if (parent.key === parentKey) {
                  return true;
                }
                parent = parent.parent;
              }
              return false;
            },
            getParentKey: function(key) {
              var dataSource = this._dataSource;
              var node = this.getNodeByKey(key);
              var d = new Deferred();
              if (node) {
                d.resolve(node.parent ? node.parent.key : void 0);
              } else {
                dataSource.load({
                  filter: [dataSource.getKeyExpr(), "=", key]
                }).done(function(items) {
                  var parentData = items[0];
                  if (parentData) {
                    d.resolve(dataSource.parentKeyOf(parentData));
                  } else {
                    d.reject();
                  }
                }).fail(d.reject);
              }
              return d.promise();
            },
            expandAscendants: function(key) {
              var that = this;
              var dataSource = that._dataSource;
              var d = new Deferred();
              that.getParentKey(key).done(function(parentKey) {
                if (dataSource && void 0 !== parentKey && parentKey !== that.option("rootValue")) {
                  dataSource._isNodesInitializing = true;
                  that.expandRow(parentKey);
                  dataSource._isNodesInitializing = false;
                  that.expandAscendants(parentKey).done(d.resolve).fail(d.reject);
                } else {
                  d.resolve();
                }
              }).fail(d.reject);
              return d.promise();
            },
            getPageIndexByKey: function(key) {
              var that = this;
              var dataSource = that._dataSource;
              var d = new Deferred();
              that.expandAscendants(key).done(function() {
                dataSource.load({
                  parentIds: []
                }).done(function(nodes) {
                  var offset = findIndex(nodes, function(node) {
                    return that.keyOf(node.data) === key;
                  });
                  var pageIndex = -1;
                  if (offset >= 0) {
                    pageIndex = Math.floor(offset / that.pageSize());
                  }
                  d.resolve(pageIndex);
                }).fail(d.reject);
              }).fail(d.reject);
              return d.promise();
            }
          }
        }
      }
    }));
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.row_dragging.js
var init_ui_tree_list_row_dragging = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.row_dragging.js"() {
    init_ui_tree_list_core();
    init_ui_grid_core_row_dragging();
    ui_tree_list_core_default.registerModule("rowDragging", rowDraggingModule);
  }
});

// node_modules/devextreme/esm/ui/tree_list/ui.tree_list.js
var ui_tree_list_default;
var init_ui_tree_list = __esm({
  "node_modules/devextreme/esm/ui/tree_list/ui.tree_list.js"() {
    init_ui_tree_list_base();
    init_ui_tree_list_state_storing();
    init_ui_tree_list_column_chooser();
    init_ui_tree_list_master_detail();
    init_ui_tree_list_editing();
    init_ui_tree_list_editing_row_based();
    init_ui_tree_list_editing_form_based();
    init_ui_tree_list_editing_cell_based();
    init_ui_tree_list_validating();
    init_ui_tree_list_virtual_scrolling();
    init_ui_tree_list_filter_row();
    init_ui_tree_list_header_filter();
    init_ui_tree_list_filter_sync();
    init_ui_tree_list_filter_builder();
    init_ui_tree_list_filter_panel();
    init_ui_tree_list_pager();
    init_ui_tree_list_columns_resizing_reordering();
    init_ui_tree_list_column_fixing();
    init_ui_tree_list_adaptivity();
    init_ui_tree_list_selection();
    init_ui_tree_list_search();
    init_ui_tree_list_keyboard_navigation();
    init_ui_tree_list_virtual_columns();
    init_ui_tree_list_focus();
    init_ui_tree_list_row_dragging();
    ui_tree_list_default = ui_tree_list_base_default;
  }
});

// node_modules/devextreme/esm/ui/tree_list.js
var tree_list_exports = {};
__export(tree_list_exports, {
  default: () => tree_list_default
});
var tree_list_default;
var init_tree_list = __esm({
  "node_modules/devextreme/esm/ui/tree_list.js"() {
    init_ui_tree_list();
    tree_list_default = ui_tree_list_default;
  }
});

// node_modules/devextreme-vue/tree-list.js
var require_tree_list = __commonJS({
  "node_modules/devextreme-vue/tree-list.js"(exports) {
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DxRangeRule = exports.DxPosition = exports.DxPopup = exports.DxPatternRule = exports.DxPaging = exports.DxPager = exports.DxOperationDescriptions = exports.DxOffset = exports.DxNumericRule = exports.DxMy = exports.DxLookup = exports.DxLoadPanel = exports.DxLabel = exports.DxKeyboardNavigation = exports.DxHide = exports.DxHeaderFilter = exports.DxGroupOperationDescriptions = exports.DxFormItem = exports.DxFormat = exports.DxForm = exports.DxFilterRow = exports.DxFilterPanelTexts = exports.DxFilterPanel = exports.DxFilterOperationDescriptions = exports.DxFilterBuilderPopup = exports.DxFilterBuilder = exports.DxFieldLookup = exports.DxField = exports.DxEmailRule = exports.DxEditingTexts = exports.DxEditing = exports.DxCustomRule = exports.DxCustomOperation = exports.DxCursorOffset = exports.DxCompareRule = exports.DxColumnLookup = exports.DxColumnHeaderFilter = exports.DxColumnFixingTexts = exports.DxColumnFixing = exports.DxColumnChooser = exports.DxColumn = exports.DxCollision = exports.DxColCountByScreen = exports.DxChange = exports.DxButton = exports.DxBoundaryOffset = exports.DxAt = exports.DxAsyncRule = exports.DxAnimation = exports.DxTreeList = void 0;
    exports.DxValidationRule = exports.DxTreeListHeaderFilterTexts = exports.DxTreeListHeaderFilter = exports.DxToolbarItem = exports.DxTexts = exports.DxStringLengthRule = exports.DxStateStoring = exports.DxSorting = exports.DxShow = exports.DxSelection = exports.DxSearchPanel = exports.DxScrolling = exports.DxRowDragging = exports.DxRequiredRule = exports.DxRemoteOperations = void 0;
    var tree_list_1 = __importDefault((init_tree_list(), __toCommonJS(tree_list_exports)));
    var index_1 = require_core();
    var index_2 = require_core();
    var DxTreeList = index_1.createComponent({
      props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        allowColumnReordering: Boolean,
        allowColumnResizing: Boolean,
        autoExpandAll: Boolean,
        autoNavigateToFocusedRow: Boolean,
        cacheEnabled: Boolean,
        cellHintEnabled: Boolean,
        columnAutoWidth: Boolean,
        columnChooser: Object,
        columnFixing: Object,
        columnHidingEnabled: Boolean,
        columnMinWidth: Number,
        columnResizingMode: String,
        columns: Array,
        columnWidth: [Number, String],
        customizeColumns: Function,
        dataSource: [Array, Object, String],
        dataStructure: String,
        dateSerializationFormat: String,
        disabled: Boolean,
        editing: Object,
        elementAttr: {},
        errorRowEnabled: Boolean,
        expandedRowKeys: Array,
        expandNodesOnFiltering: Boolean,
        filterBuilder: Object,
        filterBuilderPopup: Object,
        filterMode: String,
        filterPanel: Object,
        filterRow: Object,
        filterSyncEnabled: [Boolean, String],
        filterValue: [Array, Function, String],
        focusedColumnIndex: Number,
        focusedRowEnabled: Boolean,
        focusedRowIndex: Number,
        focusedRowKey: {},
        focusStateEnabled: Boolean,
        hasItemsExpr: [Function, String],
        headerFilter: Object,
        height: [Function, Number, String],
        highlightChanges: Boolean,
        hint: String,
        hoverStateEnabled: Boolean,
        itemsExpr: [Function, String],
        keyboardNavigation: Object,
        keyExpr: [Function, String],
        loadPanel: Object,
        noDataText: String,
        onAdaptiveDetailRowPreparing: Function,
        onCellClick: Function,
        onCellDblClick: Function,
        onCellHoverChanged: Function,
        onCellPrepared: Function,
        onContentReady: Function,
        onContextMenuPreparing: Function,
        onDataErrorOccurred: Function,
        onDisposing: Function,
        onEditCanceled: Function,
        onEditCanceling: Function,
        onEditingStart: Function,
        onEditorPrepared: Function,
        onEditorPreparing: Function,
        onFocusedCellChanged: Function,
        onFocusedCellChanging: Function,
        onFocusedRowChanged: Function,
        onFocusedRowChanging: Function,
        onInitialized: Function,
        onInitNewRow: Function,
        onKeyDown: Function,
        onNodesInitialized: Function,
        onOptionChanged: Function,
        onRowClick: Function,
        onRowCollapsed: Function,
        onRowCollapsing: Function,
        onRowDblClick: Function,
        onRowExpanded: Function,
        onRowExpanding: Function,
        onRowInserted: Function,
        onRowInserting: Function,
        onRowPrepared: Function,
        onRowRemoved: Function,
        onRowRemoving: Function,
        onRowUpdated: Function,
        onRowUpdating: Function,
        onRowValidating: Function,
        onSaved: Function,
        onSaving: Function,
        onSelectionChanged: Function,
        onToolbarPreparing: Function,
        pager: Object,
        paging: Object,
        parentIdExpr: [Function, String],
        remoteOperations: [Object, String],
        renderAsync: Boolean,
        repaintChangesOnly: Boolean,
        rootValue: {},
        rowAlternationEnabled: Boolean,
        rowDragging: Object,
        rtlEnabled: Boolean,
        scrolling: Object,
        searchPanel: Object,
        selectedRowKeys: Array,
        selection: Object,
        showBorders: Boolean,
        showColumnHeaders: Boolean,
        showColumnLines: Boolean,
        showRowLines: Boolean,
        sorting: Object,
        stateStoring: Object,
        tabIndex: Number,
        twoWayBindingEnabled: Boolean,
        visible: Boolean,
        width: [Function, Number, String],
        wordWrapEnabled: Boolean
      },
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:allowColumnReordering": null,
        "update:allowColumnResizing": null,
        "update:autoExpandAll": null,
        "update:autoNavigateToFocusedRow": null,
        "update:cacheEnabled": null,
        "update:cellHintEnabled": null,
        "update:columnAutoWidth": null,
        "update:columnChooser": null,
        "update:columnFixing": null,
        "update:columnHidingEnabled": null,
        "update:columnMinWidth": null,
        "update:columnResizingMode": null,
        "update:columns": null,
        "update:columnWidth": null,
        "update:customizeColumns": null,
        "update:dataSource": null,
        "update:dataStructure": null,
        "update:dateSerializationFormat": null,
        "update:disabled": null,
        "update:editing": null,
        "update:elementAttr": null,
        "update:errorRowEnabled": null,
        "update:expandedRowKeys": null,
        "update:expandNodesOnFiltering": null,
        "update:filterBuilder": null,
        "update:filterBuilderPopup": null,
        "update:filterMode": null,
        "update:filterPanel": null,
        "update:filterRow": null,
        "update:filterSyncEnabled": null,
        "update:filterValue": null,
        "update:focusedColumnIndex": null,
        "update:focusedRowEnabled": null,
        "update:focusedRowIndex": null,
        "update:focusedRowKey": null,
        "update:focusStateEnabled": null,
        "update:hasItemsExpr": null,
        "update:headerFilter": null,
        "update:height": null,
        "update:highlightChanges": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:itemsExpr": null,
        "update:keyboardNavigation": null,
        "update:keyExpr": null,
        "update:loadPanel": null,
        "update:noDataText": null,
        "update:onAdaptiveDetailRowPreparing": null,
        "update:onCellClick": null,
        "update:onCellDblClick": null,
        "update:onCellHoverChanged": null,
        "update:onCellPrepared": null,
        "update:onContentReady": null,
        "update:onContextMenuPreparing": null,
        "update:onDataErrorOccurred": null,
        "update:onDisposing": null,
        "update:onEditCanceled": null,
        "update:onEditCanceling": null,
        "update:onEditingStart": null,
        "update:onEditorPrepared": null,
        "update:onEditorPreparing": null,
        "update:onFocusedCellChanged": null,
        "update:onFocusedCellChanging": null,
        "update:onFocusedRowChanged": null,
        "update:onFocusedRowChanging": null,
        "update:onInitialized": null,
        "update:onInitNewRow": null,
        "update:onKeyDown": null,
        "update:onNodesInitialized": null,
        "update:onOptionChanged": null,
        "update:onRowClick": null,
        "update:onRowCollapsed": null,
        "update:onRowCollapsing": null,
        "update:onRowDblClick": null,
        "update:onRowExpanded": null,
        "update:onRowExpanding": null,
        "update:onRowInserted": null,
        "update:onRowInserting": null,
        "update:onRowPrepared": null,
        "update:onRowRemoved": null,
        "update:onRowRemoving": null,
        "update:onRowUpdated": null,
        "update:onRowUpdating": null,
        "update:onRowValidating": null,
        "update:onSaved": null,
        "update:onSaving": null,
        "update:onSelectionChanged": null,
        "update:onToolbarPreparing": null,
        "update:pager": null,
        "update:paging": null,
        "update:parentIdExpr": null,
        "update:remoteOperations": null,
        "update:renderAsync": null,
        "update:repaintChangesOnly": null,
        "update:rootValue": null,
        "update:rowAlternationEnabled": null,
        "update:rowDragging": null,
        "update:rtlEnabled": null,
        "update:scrolling": null,
        "update:searchPanel": null,
        "update:selectedRowKeys": null,
        "update:selection": null,
        "update:showBorders": null,
        "update:showColumnHeaders": null,
        "update:showColumnLines": null,
        "update:showRowLines": null,
        "update:sorting": null,
        "update:stateStoring": null,
        "update:tabIndex": null,
        "update:twoWayBindingEnabled": null,
        "update:visible": null,
        "update:width": null,
        "update:wordWrapEnabled": null
      },
      computed: {
        instance: function() {
          return this.$_instance;
        }
      },
      beforeCreate: function() {
        this.$_WidgetClass = tree_list_1.default;
        this.$_hasAsyncTemplate = true;
        this.$_expectedChildren = {
          column: { isCollectionItem: true, optionName: "columns" },
          columnChooser: { isCollectionItem: false, optionName: "columnChooser" },
          columnFixing: { isCollectionItem: false, optionName: "columnFixing" },
          editing: { isCollectionItem: false, optionName: "editing" },
          filterBuilder: { isCollectionItem: false, optionName: "filterBuilder" },
          filterBuilderPopup: { isCollectionItem: false, optionName: "filterBuilderPopup" },
          filterPanel: { isCollectionItem: false, optionName: "filterPanel" },
          filterRow: { isCollectionItem: false, optionName: "filterRow" },
          headerFilter: { isCollectionItem: false, optionName: "headerFilter" },
          keyboardNavigation: { isCollectionItem: false, optionName: "keyboardNavigation" },
          loadPanel: { isCollectionItem: false, optionName: "loadPanel" },
          pager: { isCollectionItem: false, optionName: "pager" },
          paging: { isCollectionItem: false, optionName: "paging" },
          remoteOperations: { isCollectionItem: false, optionName: "remoteOperations" },
          rowDragging: { isCollectionItem: false, optionName: "rowDragging" },
          scrolling: { isCollectionItem: false, optionName: "scrolling" },
          searchPanel: { isCollectionItem: false, optionName: "searchPanel" },
          selection: { isCollectionItem: false, optionName: "selection" },
          sorting: { isCollectionItem: false, optionName: "sorting" },
          stateStoring: { isCollectionItem: false, optionName: "stateStoring" },
          treeListHeaderFilter: { isCollectionItem: false, optionName: "headerFilter" }
        };
      }
    });
    exports.DxTreeList = DxTreeList;
    var DxAnimation = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:hide": null,
        "update:show": null
      },
      props: {
        hide: Object,
        show: Object
      }
    });
    exports.DxAnimation = DxAnimation;
    DxAnimation.$_optionName = "animation";
    DxAnimation.$_expectedChildren = {
      hide: { isCollectionItem: false, optionName: "hide" },
      show: { isCollectionItem: false, optionName: "show" }
    };
    var DxAsyncRule = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:reevaluate": null,
        "update:type": null,
        "update:validationCallback": null
      },
      props: {
        ignoreEmptyValue: Boolean,
        message: String,
        reevaluate: Boolean,
        type: String,
        validationCallback: Function
      }
    });
    exports.DxAsyncRule = DxAsyncRule;
    DxAsyncRule.$_optionName = "validationRules";
    DxAsyncRule.$_isCollectionItem = true;
    DxAsyncRule.$_predefinedProps = {
      type: "async"
    };
    var DxAt = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null
      },
      props: {
        x: String,
        y: String
      }
    });
    exports.DxAt = DxAt;
    DxAt.$_optionName = "at";
    var DxBoundaryOffset = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null
      },
      props: {
        x: Number,
        y: Number
      }
    });
    exports.DxBoundaryOffset = DxBoundaryOffset;
    DxBoundaryOffset.$_optionName = "boundaryOffset";
    var DxButton = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:cssClass": null,
        "update:hint": null,
        "update:icon": null,
        "update:name": null,
        "update:onClick": null,
        "update:template": null,
        "update:text": null,
        "update:visible": null
      },
      props: {
        cssClass: String,
        hint: String,
        icon: String,
        name: String,
        onClick: Function,
        template: {},
        text: String,
        visible: [Boolean, Function]
      }
    });
    exports.DxButton = DxButton;
    DxButton.$_optionName = "buttons";
    DxButton.$_isCollectionItem = true;
    var DxChange = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:data": null,
        "update:index": null,
        "update:pageIndex": null,
        "update:type": null
      },
      props: {
        data: Object,
        index: Number,
        pageIndex: Number,
        type: String
      }
    });
    exports.DxChange = DxChange;
    DxChange.$_optionName = "changes";
    DxChange.$_isCollectionItem = true;
    var DxColCountByScreen = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:lg": null,
        "update:md": null,
        "update:sm": null,
        "update:xs": null
      },
      props: {
        lg: Number,
        md: Number,
        sm: Number,
        xs: Number
      }
    });
    exports.DxColCountByScreen = DxColCountByScreen;
    DxColCountByScreen.$_optionName = "colCountByScreen";
    var DxCollision = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null
      },
      props: {
        x: String,
        y: String
      }
    });
    exports.DxCollision = DxCollision;
    DxCollision.$_optionName = "collision";
    var DxColumn = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignment": null,
        "update:allowEditing": null,
        "update:allowFiltering": null,
        "update:allowFixing": null,
        "update:allowHeaderFiltering": null,
        "update:allowHiding": null,
        "update:allowReordering": null,
        "update:allowResizing": null,
        "update:allowSearch": null,
        "update:allowSorting": null,
        "update:buttons": null,
        "update:calculateCellValue": null,
        "update:calculateDisplayValue": null,
        "update:calculateFilterExpression": null,
        "update:calculateSortValue": null,
        "update:caption": null,
        "update:cellTemplate": null,
        "update:columns": null,
        "update:cssClass": null,
        "update:customizeText": null,
        "update:dataField": null,
        "update:dataType": null,
        "update:editCellTemplate": null,
        "update:editorOptions": null,
        "update:encodeHtml": null,
        "update:falseText": null,
        "update:filterOperations": null,
        "update:filterType": null,
        "update:filterValue": null,
        "update:filterValues": null,
        "update:fixed": null,
        "update:fixedPosition": null,
        "update:format": null,
        "update:formItem": null,
        "update:headerCellTemplate": null,
        "update:headerFilter": null,
        "update:hidingPriority": null,
        "update:isBand": null,
        "update:lookup": null,
        "update:minWidth": null,
        "update:name": null,
        "update:ownerBand": null,
        "update:renderAsync": null,
        "update:selectedFilterOperation": null,
        "update:setCellValue": null,
        "update:showEditorAlways": null,
        "update:showInColumnChooser": null,
        "update:sortIndex": null,
        "update:sortingMethod": null,
        "update:sortOrder": null,
        "update:trueText": null,
        "update:type": null,
        "update:validationRules": null,
        "update:visible": null,
        "update:visibleIndex": null,
        "update:width": null
      },
      props: {
        alignment: String,
        allowEditing: Boolean,
        allowFiltering: Boolean,
        allowFixing: Boolean,
        allowHeaderFiltering: Boolean,
        allowHiding: Boolean,
        allowReordering: Boolean,
        allowResizing: Boolean,
        allowSearch: Boolean,
        allowSorting: Boolean,
        buttons: Array,
        calculateCellValue: Function,
        calculateDisplayValue: [Function, String],
        calculateFilterExpression: Function,
        calculateSortValue: [Function, String],
        caption: String,
        cellTemplate: {},
        columns: Array,
        cssClass: String,
        customizeText: Function,
        dataField: String,
        dataType: String,
        editCellTemplate: {},
        editorOptions: {},
        encodeHtml: Boolean,
        falseText: String,
        filterOperations: Array,
        filterType: String,
        filterValue: {},
        filterValues: Array,
        fixed: Boolean,
        fixedPosition: String,
        format: [Object, Function, String],
        formItem: Object,
        headerCellTemplate: {},
        headerFilter: Object,
        hidingPriority: Number,
        isBand: Boolean,
        lookup: Object,
        minWidth: Number,
        name: String,
        ownerBand: Number,
        renderAsync: Boolean,
        selectedFilterOperation: String,
        setCellValue: Function,
        showEditorAlways: Boolean,
        showInColumnChooser: Boolean,
        sortIndex: Number,
        sortingMethod: Function,
        sortOrder: String,
        trueText: String,
        type: String,
        validationRules: Array,
        visible: Boolean,
        visibleIndex: Number,
        width: [Number, String]
      }
    });
    exports.DxColumn = DxColumn;
    DxColumn.$_optionName = "columns";
    DxColumn.$_isCollectionItem = true;
    DxColumn.$_expectedChildren = {
      AsyncRule: { isCollectionItem: true, optionName: "validationRules" },
      button: { isCollectionItem: true, optionName: "buttons" },
      columnHeaderFilter: { isCollectionItem: false, optionName: "headerFilter" },
      columnLookup: { isCollectionItem: false, optionName: "lookup" },
      CompareRule: { isCollectionItem: true, optionName: "validationRules" },
      CustomRule: { isCollectionItem: true, optionName: "validationRules" },
      EmailRule: { isCollectionItem: true, optionName: "validationRules" },
      format: { isCollectionItem: false, optionName: "format" },
      formItem: { isCollectionItem: false, optionName: "formItem" },
      headerFilter: { isCollectionItem: false, optionName: "headerFilter" },
      lookup: { isCollectionItem: false, optionName: "lookup" },
      NumericRule: { isCollectionItem: true, optionName: "validationRules" },
      PatternRule: { isCollectionItem: true, optionName: "validationRules" },
      RangeRule: { isCollectionItem: true, optionName: "validationRules" },
      RequiredRule: { isCollectionItem: true, optionName: "validationRules" },
      StringLengthRule: { isCollectionItem: true, optionName: "validationRules" },
      validationRule: { isCollectionItem: true, optionName: "validationRules" }
    };
    var DxColumnChooser = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSearch": null,
        "update:emptyPanelText": null,
        "update:enabled": null,
        "update:height": null,
        "update:mode": null,
        "update:searchTimeout": null,
        "update:title": null,
        "update:width": null
      },
      props: {
        allowSearch: Boolean,
        emptyPanelText: String,
        enabled: Boolean,
        height: Number,
        mode: String,
        searchTimeout: Number,
        title: String,
        width: Number
      }
    });
    exports.DxColumnChooser = DxColumnChooser;
    DxColumnChooser.$_optionName = "columnChooser";
    var DxColumnFixing = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:enabled": null,
        "update:texts": null
      },
      props: {
        enabled: Boolean,
        texts: Object
      }
    });
    exports.DxColumnFixing = DxColumnFixing;
    DxColumnFixing.$_optionName = "columnFixing";
    DxColumnFixing.$_expectedChildren = {
      columnFixingTexts: { isCollectionItem: false, optionName: "texts" },
      texts: { isCollectionItem: false, optionName: "texts" }
    };
    var DxColumnFixingTexts = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:fix": null,
        "update:leftPosition": null,
        "update:rightPosition": null,
        "update:unfix": null
      },
      props: {
        fix: String,
        leftPosition: String,
        rightPosition: String,
        unfix: String
      }
    });
    exports.DxColumnFixingTexts = DxColumnFixingTexts;
    DxColumnFixingTexts.$_optionName = "texts";
    var DxColumnHeaderFilter = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSearch": null,
        "update:dataSource": null,
        "update:groupInterval": null,
        "update:height": null,
        "update:searchMode": null,
        "update:width": null
      },
      props: {
        allowSearch: Boolean,
        dataSource: [Array, Object, Function],
        groupInterval: [Number, String],
        height: Number,
        searchMode: String,
        width: Number
      }
    });
    exports.DxColumnHeaderFilter = DxColumnHeaderFilter;
    DxColumnHeaderFilter.$_optionName = "headerFilter";
    var DxColumnLookup = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowClearing": null,
        "update:calculateCellValue": null,
        "update:dataSource": null,
        "update:displayExpr": null,
        "update:valueExpr": null
      },
      props: {
        allowClearing: Boolean,
        calculateCellValue: Function,
        dataSource: [Array, Object, Function],
        displayExpr: [Function, String],
        valueExpr: String
      }
    });
    exports.DxColumnLookup = DxColumnLookup;
    DxColumnLookup.$_optionName = "lookup";
    var DxCompareRule = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:comparisonTarget": null,
        "update:comparisonType": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:type": null
      },
      props: {
        comparisonTarget: Function,
        comparisonType: String,
        ignoreEmptyValue: Boolean,
        message: String,
        type: String
      }
    });
    exports.DxCompareRule = DxCompareRule;
    DxCompareRule.$_optionName = "validationRules";
    DxCompareRule.$_isCollectionItem = true;
    DxCompareRule.$_predefinedProps = {
      type: "compare"
    };
    var DxCursorOffset = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null
      },
      props: {
        x: Number,
        y: Number
      }
    });
    exports.DxCursorOffset = DxCursorOffset;
    DxCursorOffset.$_optionName = "cursorOffset";
    var DxCustomOperation = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:calculateFilterExpression": null,
        "update:caption": null,
        "update:customizeText": null,
        "update:dataTypes": null,
        "update:editorTemplate": null,
        "update:hasValue": null,
        "update:icon": null,
        "update:name": null
      },
      props: {
        calculateFilterExpression: Function,
        caption: String,
        customizeText: Function,
        dataTypes: Array,
        editorTemplate: {},
        hasValue: Boolean,
        icon: String,
        name: String
      }
    });
    exports.DxCustomOperation = DxCustomOperation;
    DxCustomOperation.$_optionName = "customOperations";
    DxCustomOperation.$_isCollectionItem = true;
    var DxCustomRule = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:reevaluate": null,
        "update:type": null,
        "update:validationCallback": null
      },
      props: {
        ignoreEmptyValue: Boolean,
        message: String,
        reevaluate: Boolean,
        type: String,
        validationCallback: Function
      }
    });
    exports.DxCustomRule = DxCustomRule;
    DxCustomRule.$_optionName = "validationRules";
    DxCustomRule.$_isCollectionItem = true;
    DxCustomRule.$_predefinedProps = {
      type: "custom"
    };
    var DxEditing = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowAdding": null,
        "update:allowDeleting": null,
        "update:allowUpdating": null,
        "update:changes": null,
        "update:confirmDelete": null,
        "update:editColumnName": null,
        "update:editRowKey": null,
        "update:form": null,
        "update:mode": null,
        "update:popup": null,
        "update:refreshMode": null,
        "update:selectTextOnEditStart": null,
        "update:startEditAction": null,
        "update:texts": null,
        "update:useIcons": null
      },
      props: {
        allowAdding: [Boolean, Function],
        allowDeleting: [Boolean, Function],
        allowUpdating: [Boolean, Function],
        changes: Array,
        confirmDelete: Boolean,
        editColumnName: String,
        editRowKey: {},
        form: Object,
        mode: String,
        popup: Object,
        refreshMode: String,
        selectTextOnEditStart: Boolean,
        startEditAction: String,
        texts: Object,
        useIcons: Boolean
      }
    });
    exports.DxEditing = DxEditing;
    DxEditing.$_optionName = "editing";
    DxEditing.$_expectedChildren = {
      change: { isCollectionItem: true, optionName: "changes" },
      editingTexts: { isCollectionItem: false, optionName: "texts" },
      form: { isCollectionItem: false, optionName: "form" },
      popup: { isCollectionItem: false, optionName: "popup" },
      texts: { isCollectionItem: false, optionName: "texts" }
    };
    var DxEditingTexts = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:addRow": null,
        "update:addRowToNode": null,
        "update:cancelAllChanges": null,
        "update:cancelRowChanges": null,
        "update:confirmDeleteMessage": null,
        "update:confirmDeleteTitle": null,
        "update:deleteRow": null,
        "update:editRow": null,
        "update:saveAllChanges": null,
        "update:saveRowChanges": null,
        "update:undeleteRow": null,
        "update:validationCancelChanges": null
      },
      props: {
        addRow: String,
        addRowToNode: String,
        cancelAllChanges: String,
        cancelRowChanges: String,
        confirmDeleteMessage: String,
        confirmDeleteTitle: String,
        deleteRow: String,
        editRow: String,
        saveAllChanges: String,
        saveRowChanges: String,
        undeleteRow: String,
        validationCancelChanges: String
      }
    });
    exports.DxEditingTexts = DxEditingTexts;
    DxEditingTexts.$_optionName = "texts";
    var DxEmailRule = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:type": null
      },
      props: {
        ignoreEmptyValue: Boolean,
        message: String,
        type: String
      }
    });
    exports.DxEmailRule = DxEmailRule;
    DxEmailRule.$_optionName = "validationRules";
    DxEmailRule.$_isCollectionItem = true;
    DxEmailRule.$_predefinedProps = {
      type: "email"
    };
    var DxField = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:calculateFilterExpression": null,
        "update:caption": null,
        "update:customizeText": null,
        "update:dataField": null,
        "update:dataType": null,
        "update:defaultFilterOperation": null,
        "update:editorOptions": null,
        "update:editorTemplate": null,
        "update:falseText": null,
        "update:filterOperations": null,
        "update:format": null,
        "update:lookup": null,
        "update:name": null,
        "update:trueText": null
      },
      props: {
        calculateFilterExpression: Function,
        caption: String,
        customizeText: Function,
        dataField: String,
        dataType: String,
        defaultFilterOperation: String,
        editorOptions: {},
        editorTemplate: {},
        falseText: String,
        filterOperations: Array,
        format: [Object, Function, String],
        lookup: Object,
        name: String,
        trueText: String
      }
    });
    exports.DxField = DxField;
    DxField.$_optionName = "fields";
    DxField.$_isCollectionItem = true;
    DxField.$_expectedChildren = {
      fieldLookup: { isCollectionItem: false, optionName: "lookup" },
      format: { isCollectionItem: false, optionName: "format" },
      lookup: { isCollectionItem: false, optionName: "lookup" }
    };
    var DxFieldLookup = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowClearing": null,
        "update:dataSource": null,
        "update:displayExpr": null,
        "update:valueExpr": null
      },
      props: {
        allowClearing: Boolean,
        dataSource: [Array, Object],
        displayExpr: [Function, String],
        valueExpr: [Function, String]
      }
    });
    exports.DxFieldLookup = DxFieldLookup;
    DxFieldLookup.$_optionName = "lookup";
    var DxFilterBuilder = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:allowHierarchicalFields": null,
        "update:bindingOptions": null,
        "update:customOperations": null,
        "update:disabled": null,
        "update:elementAttr": null,
        "update:fields": null,
        "update:filterOperationDescriptions": null,
        "update:focusStateEnabled": null,
        "update:groupOperationDescriptions": null,
        "update:groupOperations": null,
        "update:height": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:maxGroupLevel": null,
        "update:onContentReady": null,
        "update:onDisposing": null,
        "update:onEditorPrepared": null,
        "update:onEditorPreparing": null,
        "update:onFocusIn": null,
        "update:onFocusOut": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:onValueChanged": null,
        "update:rtlEnabled": null,
        "update:tabIndex": null,
        "update:value": null,
        "update:visible": null,
        "update:width": null
      },
      props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        allowHierarchicalFields: Boolean,
        bindingOptions: {},
        customOperations: Array,
        disabled: Boolean,
        elementAttr: {},
        fields: Array,
        filterOperationDescriptions: Object,
        focusStateEnabled: Boolean,
        groupOperationDescriptions: Object,
        groupOperations: Array,
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        maxGroupLevel: Number,
        onContentReady: Function,
        onDisposing: Function,
        onEditorPrepared: Function,
        onEditorPreparing: Function,
        onFocusIn: Function,
        onFocusOut: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        onValueChanged: Function,
        rtlEnabled: Boolean,
        tabIndex: Number,
        value: [Array, Function, String],
        visible: Boolean,
        width: [Function, Number, String]
      }
    });
    exports.DxFilterBuilder = DxFilterBuilder;
    DxFilterBuilder.$_optionName = "filterBuilder";
    DxFilterBuilder.$_expectedChildren = {
      customOperation: { isCollectionItem: true, optionName: "customOperations" },
      field: { isCollectionItem: true, optionName: "fields" },
      filterOperationDescriptions: { isCollectionItem: false, optionName: "filterOperationDescriptions" },
      groupOperationDescriptions: { isCollectionItem: false, optionName: "groupOperationDescriptions" }
    };
    var DxFilterBuilderPopup = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:animation": null,
        "update:bindingOptions": null,
        "update:closeOnOutsideClick": null,
        "update:container": null,
        "update:contentTemplate": null,
        "update:deferRendering": null,
        "update:disabled": null,
        "update:dragEnabled": null,
        "update:elementAttr": null,
        "update:focusStateEnabled": null,
        "update:fullScreen": null,
        "update:height": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:maxHeight": null,
        "update:maxWidth": null,
        "update:minHeight": null,
        "update:minWidth": null,
        "update:onContentReady": null,
        "update:onDisposing": null,
        "update:onFocusIn": null,
        "update:onFocusOut": null,
        "update:onHidden": null,
        "update:onHiding": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:onResize": null,
        "update:onResizeEnd": null,
        "update:onResizeStart": null,
        "update:onShowing": null,
        "update:onShown": null,
        "update:onTitleRendered": null,
        "update:position": null,
        "update:resizeEnabled": null,
        "update:rtlEnabled": null,
        "update:shading": null,
        "update:shadingColor": null,
        "update:showCloseButton": null,
        "update:showTitle": null,
        "update:tabIndex": null,
        "update:title": null,
        "update:titleTemplate": null,
        "update:toolbarItems": null,
        "update:visible": null,
        "update:width": null
      },
      props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        animation: Object,
        bindingOptions: {},
        closeOnOutsideClick: [Boolean, Function],
        container: {},
        contentTemplate: {},
        deferRendering: Boolean,
        disabled: Boolean,
        dragEnabled: Boolean,
        elementAttr: {},
        focusStateEnabled: Boolean,
        fullScreen: Boolean,
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        maxHeight: [Function, Number, String],
        maxWidth: [Function, Number, String],
        minHeight: [Function, Number, String],
        minWidth: [Function, Number, String],
        onContentReady: Function,
        onDisposing: Function,
        onFocusIn: Function,
        onFocusOut: Function,
        onHidden: Function,
        onHiding: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        onResize: Function,
        onResizeEnd: Function,
        onResizeStart: Function,
        onShowing: Function,
        onShown: Function,
        onTitleRendered: Function,
        position: [Function, Object, String],
        resizeEnabled: Boolean,
        rtlEnabled: Boolean,
        shading: Boolean,
        shadingColor: String,
        showCloseButton: Boolean,
        showTitle: Boolean,
        tabIndex: Number,
        title: String,
        titleTemplate: {},
        toolbarItems: Array,
        visible: Boolean,
        width: [Function, Number, String]
      }
    });
    exports.DxFilterBuilderPopup = DxFilterBuilderPopup;
    DxFilterBuilderPopup.$_optionName = "filterBuilderPopup";
    var DxFilterOperationDescriptions = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:between": null,
        "update:contains": null,
        "update:endsWith": null,
        "update:equal": null,
        "update:greaterThan": null,
        "update:greaterThanOrEqual": null,
        "update:isBlank": null,
        "update:isNotBlank": null,
        "update:lessThan": null,
        "update:lessThanOrEqual": null,
        "update:notContains": null,
        "update:notEqual": null,
        "update:startsWith": null
      },
      props: {
        between: String,
        contains: String,
        endsWith: String,
        equal: String,
        greaterThan: String,
        greaterThanOrEqual: String,
        isBlank: String,
        isNotBlank: String,
        lessThan: String,
        lessThanOrEqual: String,
        notContains: String,
        notEqual: String,
        startsWith: String
      }
    });
    exports.DxFilterOperationDescriptions = DxFilterOperationDescriptions;
    DxFilterOperationDescriptions.$_optionName = "filterOperationDescriptions";
    var DxFilterPanel = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:customizeText": null,
        "update:filterEnabled": null,
        "update:texts": null,
        "update:visible": null
      },
      props: {
        customizeText: Function,
        filterEnabled: Boolean,
        texts: Object,
        visible: Boolean
      }
    });
    exports.DxFilterPanel = DxFilterPanel;
    DxFilterPanel.$_optionName = "filterPanel";
    DxFilterPanel.$_expectedChildren = {
      filterPanelTexts: { isCollectionItem: false, optionName: "texts" },
      texts: { isCollectionItem: false, optionName: "texts" }
    };
    var DxFilterPanelTexts = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:clearFilter": null,
        "update:createFilter": null,
        "update:filterEnabledHint": null
      },
      props: {
        clearFilter: String,
        createFilter: String,
        filterEnabledHint: String
      }
    });
    exports.DxFilterPanelTexts = DxFilterPanelTexts;
    DxFilterPanelTexts.$_optionName = "texts";
    var DxFilterRow = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:applyFilter": null,
        "update:applyFilterText": null,
        "update:betweenEndText": null,
        "update:betweenStartText": null,
        "update:operationDescriptions": null,
        "update:resetOperationText": null,
        "update:showAllText": null,
        "update:showOperationChooser": null,
        "update:visible": null
      },
      props: {
        applyFilter: String,
        applyFilterText: String,
        betweenEndText: String,
        betweenStartText: String,
        operationDescriptions: Object,
        resetOperationText: String,
        showAllText: String,
        showOperationChooser: Boolean,
        visible: Boolean
      }
    });
    exports.DxFilterRow = DxFilterRow;
    DxFilterRow.$_optionName = "filterRow";
    DxFilterRow.$_expectedChildren = {
      operationDescriptions: { isCollectionItem: false, optionName: "operationDescriptions" }
    };
    var DxForm = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:alignItemLabels": null,
        "update:alignItemLabelsInAllGroups": null,
        "update:bindingOptions": null,
        "update:colCount": null,
        "update:colCountByScreen": null,
        "update:customizeItem": null,
        "update:disabled": null,
        "update:elementAttr": null,
        "update:focusStateEnabled": null,
        "update:formData": null,
        "update:height": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:items": null,
        "update:labelLocation": null,
        "update:minColWidth": null,
        "update:onContentReady": null,
        "update:onDisposing": null,
        "update:onEditorEnterKey": null,
        "update:onFieldDataChanged": null,
        "update:onFocusIn": null,
        "update:onFocusOut": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:optionalMark": null,
        "update:readOnly": null,
        "update:requiredMark": null,
        "update:requiredMessage": null,
        "update:rtlEnabled": null,
        "update:screenByWidth": null,
        "update:scrollingEnabled": null,
        "update:showColonAfterLabel": null,
        "update:showOptionalMark": null,
        "update:showRequiredMark": null,
        "update:showValidationSummary": null,
        "update:tabIndex": null,
        "update:validationGroup": null,
        "update:visible": null,
        "update:width": null
      },
      props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        alignItemLabels: Boolean,
        alignItemLabelsInAllGroups: Boolean,
        bindingOptions: {},
        colCount: [Number, String],
        colCountByScreen: Object,
        customizeItem: Function,
        disabled: Boolean,
        elementAttr: {},
        focusStateEnabled: Boolean,
        formData: {},
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        items: Array,
        labelLocation: String,
        minColWidth: Number,
        onContentReady: Function,
        onDisposing: Function,
        onEditorEnterKey: Function,
        onFieldDataChanged: Function,
        onFocusIn: Function,
        onFocusOut: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        optionalMark: String,
        readOnly: Boolean,
        requiredMark: String,
        requiredMessage: String,
        rtlEnabled: Boolean,
        screenByWidth: Function,
        scrollingEnabled: Boolean,
        showColonAfterLabel: Boolean,
        showOptionalMark: Boolean,
        showRequiredMark: Boolean,
        showValidationSummary: Boolean,
        tabIndex: Number,
        validationGroup: String,
        visible: Boolean,
        width: [Function, Number, String]
      }
    });
    exports.DxForm = DxForm;
    DxForm.$_optionName = "form";
    DxForm.$_expectedChildren = {
      colCountByScreen: { isCollectionItem: false, optionName: "colCountByScreen" }
    };
    var DxFormat = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:currency": null,
        "update:formatter": null,
        "update:parser": null,
        "update:precision": null,
        "update:type": null
      },
      props: {
        currency: String,
        formatter: Function,
        parser: Function,
        precision: Number,
        type: String
      }
    });
    exports.DxFormat = DxFormat;
    DxFormat.$_optionName = "format";
    var DxFormItem = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:colSpan": null,
        "update:cssClass": null,
        "update:dataField": null,
        "update:editorOptions": null,
        "update:editorType": null,
        "update:helpText": null,
        "update:isRequired": null,
        "update:itemType": null,
        "update:label": null,
        "update:name": null,
        "update:template": null,
        "update:validationRules": null,
        "update:visible": null,
        "update:visibleIndex": null
      },
      props: {
        colSpan: Number,
        cssClass: String,
        dataField: String,
        editorOptions: {},
        editorType: String,
        helpText: String,
        isRequired: Boolean,
        itemType: String,
        label: Object,
        name: String,
        template: {},
        validationRules: Array,
        visible: Boolean,
        visibleIndex: Number
      }
    });
    exports.DxFormItem = DxFormItem;
    DxFormItem.$_optionName = "formItem";
    DxFormItem.$_expectedChildren = {
      AsyncRule: { isCollectionItem: true, optionName: "validationRules" },
      CompareRule: { isCollectionItem: true, optionName: "validationRules" },
      CustomRule: { isCollectionItem: true, optionName: "validationRules" },
      EmailRule: { isCollectionItem: true, optionName: "validationRules" },
      label: { isCollectionItem: false, optionName: "label" },
      NumericRule: { isCollectionItem: true, optionName: "validationRules" },
      PatternRule: { isCollectionItem: true, optionName: "validationRules" },
      RangeRule: { isCollectionItem: true, optionName: "validationRules" },
      RequiredRule: { isCollectionItem: true, optionName: "validationRules" },
      StringLengthRule: { isCollectionItem: true, optionName: "validationRules" },
      validationRule: { isCollectionItem: true, optionName: "validationRules" }
    };
    var DxGroupOperationDescriptions = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:and": null,
        "update:notAnd": null,
        "update:notOr": null,
        "update:or": null
      },
      props: {
        and: String,
        notAnd: String,
        notOr: String,
        or: String
      }
    });
    exports.DxGroupOperationDescriptions = DxGroupOperationDescriptions;
    DxGroupOperationDescriptions.$_optionName = "groupOperationDescriptions";
    var DxHeaderFilter = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSearch": null,
        "update:dataSource": null,
        "update:groupInterval": null,
        "update:height": null,
        "update:searchMode": null,
        "update:searchTimeout": null,
        "update:texts": null,
        "update:visible": null,
        "update:width": null
      },
      props: {
        allowSearch: Boolean,
        dataSource: [Array, Object, Function],
        groupInterval: [Number, String],
        height: Number,
        searchMode: String,
        searchTimeout: Number,
        texts: Object,
        visible: Boolean,
        width: Number
      }
    });
    exports.DxHeaderFilter = DxHeaderFilter;
    DxHeaderFilter.$_optionName = "headerFilter";
    var DxHide = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:complete": null,
        "update:delay": null,
        "update:direction": null,
        "update:duration": null,
        "update:easing": null,
        "update:from": null,
        "update:staggerDelay": null,
        "update:start": null,
        "update:to": null,
        "update:type": null
      },
      props: {
        complete: Function,
        delay: Number,
        direction: String,
        duration: Number,
        easing: String,
        from: {},
        staggerDelay: Number,
        start: Function,
        to: {},
        type: String
      }
    });
    exports.DxHide = DxHide;
    DxHide.$_optionName = "hide";
    var DxKeyboardNavigation = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:editOnKeyPress": null,
        "update:enabled": null,
        "update:enterKeyAction": null,
        "update:enterKeyDirection": null
      },
      props: {
        editOnKeyPress: Boolean,
        enabled: Boolean,
        enterKeyAction: String,
        enterKeyDirection: String
      }
    });
    exports.DxKeyboardNavigation = DxKeyboardNavigation;
    DxKeyboardNavigation.$_optionName = "keyboardNavigation";
    var DxLabel = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignment": null,
        "update:location": null,
        "update:showColon": null,
        "update:text": null,
        "update:visible": null
      },
      props: {
        alignment: String,
        location: String,
        showColon: Boolean,
        text: String,
        visible: Boolean
      }
    });
    exports.DxLabel = DxLabel;
    DxLabel.$_optionName = "label";
    var DxLoadPanel = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:enabled": null,
        "update:height": null,
        "update:indicatorSrc": null,
        "update:shading": null,
        "update:shadingColor": null,
        "update:showIndicator": null,
        "update:showPane": null,
        "update:text": null,
        "update:width": null
      },
      props: {
        enabled: [Boolean, String],
        height: Number,
        indicatorSrc: String,
        shading: Boolean,
        shadingColor: String,
        showIndicator: Boolean,
        showPane: Boolean,
        text: String,
        width: Number
      }
    });
    exports.DxLoadPanel = DxLoadPanel;
    DxLoadPanel.$_optionName = "loadPanel";
    var DxLookup = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowClearing": null,
        "update:calculateCellValue": null,
        "update:dataSource": null,
        "update:displayExpr": null,
        "update:valueExpr": null
      },
      props: {
        allowClearing: Boolean,
        calculateCellValue: Function,
        dataSource: [Array, Object, Function],
        displayExpr: [Function, String],
        valueExpr: String
      }
    });
    exports.DxLookup = DxLookup;
    DxLookup.$_optionName = "lookup";
    var DxMy = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null
      },
      props: {
        x: String,
        y: String
      }
    });
    exports.DxMy = DxMy;
    DxMy.$_optionName = "my";
    var DxNumericRule = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:type": null
      },
      props: {
        ignoreEmptyValue: Boolean,
        message: String,
        type: String
      }
    });
    exports.DxNumericRule = DxNumericRule;
    DxNumericRule.$_optionName = "validationRules";
    DxNumericRule.$_isCollectionItem = true;
    DxNumericRule.$_predefinedProps = {
      type: "numeric"
    };
    var DxOffset = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null
      },
      props: {
        x: Number,
        y: Number
      }
    });
    exports.DxOffset = DxOffset;
    DxOffset.$_optionName = "offset";
    var DxOperationDescriptions = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:between": null,
        "update:contains": null,
        "update:endsWith": null,
        "update:equal": null,
        "update:greaterThan": null,
        "update:greaterThanOrEqual": null,
        "update:lessThan": null,
        "update:lessThanOrEqual": null,
        "update:notContains": null,
        "update:notEqual": null,
        "update:startsWith": null
      },
      props: {
        between: String,
        contains: String,
        endsWith: String,
        equal: String,
        greaterThan: String,
        greaterThanOrEqual: String,
        lessThan: String,
        lessThanOrEqual: String,
        notContains: String,
        notEqual: String,
        startsWith: String
      }
    });
    exports.DxOperationDescriptions = DxOperationDescriptions;
    DxOperationDescriptions.$_optionName = "operationDescriptions";
    var DxPager = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowedPageSizes": null,
        "update:displayMode": null,
        "update:infoText": null,
        "update:showInfo": null,
        "update:showNavigationButtons": null,
        "update:showPageSizeSelector": null,
        "update:visible": null
      },
      props: {
        allowedPageSizes: [Array, String],
        displayMode: String,
        infoText: String,
        showInfo: Boolean,
        showNavigationButtons: Boolean,
        showPageSizeSelector: Boolean,
        visible: [Boolean, String]
      }
    });
    exports.DxPager = DxPager;
    DxPager.$_optionName = "pager";
    var DxPaging = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:enabled": null,
        "update:pageIndex": null,
        "update:pageSize": null
      },
      props: {
        enabled: Boolean,
        pageIndex: Number,
        pageSize: Number
      }
    });
    exports.DxPaging = DxPaging;
    DxPaging.$_optionName = "paging";
    var DxPatternRule = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:pattern": null,
        "update:type": null
      },
      props: {
        ignoreEmptyValue: Boolean,
        message: String,
        pattern: {},
        type: String
      }
    });
    exports.DxPatternRule = DxPatternRule;
    DxPatternRule.$_optionName = "validationRules";
    DxPatternRule.$_isCollectionItem = true;
    DxPatternRule.$_predefinedProps = {
      type: "pattern"
    };
    var DxPopup = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:animation": null,
        "update:bindingOptions": null,
        "update:closeOnOutsideClick": null,
        "update:container": null,
        "update:contentTemplate": null,
        "update:deferRendering": null,
        "update:disabled": null,
        "update:dragEnabled": null,
        "update:elementAttr": null,
        "update:focusStateEnabled": null,
        "update:fullScreen": null,
        "update:height": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:maxHeight": null,
        "update:maxWidth": null,
        "update:minHeight": null,
        "update:minWidth": null,
        "update:onContentReady": null,
        "update:onDisposing": null,
        "update:onFocusIn": null,
        "update:onFocusOut": null,
        "update:onHidden": null,
        "update:onHiding": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:onResize": null,
        "update:onResizeEnd": null,
        "update:onResizeStart": null,
        "update:onShowing": null,
        "update:onShown": null,
        "update:onTitleRendered": null,
        "update:position": null,
        "update:resizeEnabled": null,
        "update:rtlEnabled": null,
        "update:shading": null,
        "update:shadingColor": null,
        "update:showCloseButton": null,
        "update:showTitle": null,
        "update:tabIndex": null,
        "update:title": null,
        "update:titleTemplate": null,
        "update:toolbarItems": null,
        "update:visible": null,
        "update:width": null
      },
      props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        animation: Object,
        bindingOptions: {},
        closeOnOutsideClick: [Boolean, Function],
        container: {},
        contentTemplate: {},
        deferRendering: Boolean,
        disabled: Boolean,
        dragEnabled: Boolean,
        elementAttr: {},
        focusStateEnabled: Boolean,
        fullScreen: Boolean,
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        maxHeight: [Function, Number, String],
        maxWidth: [Function, Number, String],
        minHeight: [Function, Number, String],
        minWidth: [Function, Number, String],
        onContentReady: Function,
        onDisposing: Function,
        onFocusIn: Function,
        onFocusOut: Function,
        onHidden: Function,
        onHiding: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        onResize: Function,
        onResizeEnd: Function,
        onResizeStart: Function,
        onShowing: Function,
        onShown: Function,
        onTitleRendered: Function,
        position: [Function, Object, String],
        resizeEnabled: Boolean,
        rtlEnabled: Boolean,
        shading: Boolean,
        shadingColor: String,
        showCloseButton: Boolean,
        showTitle: Boolean,
        tabIndex: Number,
        title: String,
        titleTemplate: {},
        toolbarItems: Array,
        visible: Boolean,
        width: [Function, Number, String]
      }
    });
    exports.DxPopup = DxPopup;
    DxPopup.$_optionName = "popup";
    DxPopup.$_expectedChildren = {
      animation: { isCollectionItem: false, optionName: "animation" },
      position: { isCollectionItem: false, optionName: "position" },
      toolbarItem: { isCollectionItem: true, optionName: "toolbarItems" }
    };
    var DxPosition = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:at": null,
        "update:boundary": null,
        "update:boundaryOffset": null,
        "update:collision": null,
        "update:my": null,
        "update:of": null,
        "update:offset": null
      },
      props: {
        at: [Object, String],
        boundary: {},
        boundaryOffset: [Object, String],
        collision: [Object, String],
        my: [Object, String],
        of: {},
        offset: [Object, String]
      }
    });
    exports.DxPosition = DxPosition;
    DxPosition.$_optionName = "position";
    DxPosition.$_expectedChildren = {
      at: { isCollectionItem: false, optionName: "at" },
      boundaryOffset: { isCollectionItem: false, optionName: "boundaryOffset" },
      collision: { isCollectionItem: false, optionName: "collision" },
      my: { isCollectionItem: false, optionName: "my" },
      offset: { isCollectionItem: false, optionName: "offset" }
    };
    var DxRangeRule = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:max": null,
        "update:message": null,
        "update:min": null,
        "update:reevaluate": null,
        "update:type": null
      },
      props: {
        ignoreEmptyValue: Boolean,
        max: {},
        message: String,
        min: {},
        reevaluate: Boolean,
        type: String
      }
    });
    exports.DxRangeRule = DxRangeRule;
    DxRangeRule.$_optionName = "validationRules";
    DxRangeRule.$_isCollectionItem = true;
    DxRangeRule.$_predefinedProps = {
      type: "range"
    };
    var DxRemoteOperations = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:filtering": null,
        "update:grouping": null,
        "update:sorting": null
      },
      props: {
        filtering: Boolean,
        grouping: Boolean,
        sorting: Boolean
      }
    });
    exports.DxRemoteOperations = DxRemoteOperations;
    DxRemoteOperations.$_optionName = "remoteOperations";
    var DxRequiredRule = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:message": null,
        "update:trim": null,
        "update:type": null
      },
      props: {
        message: String,
        trim: Boolean,
        type: String
      }
    });
    exports.DxRequiredRule = DxRequiredRule;
    DxRequiredRule.$_optionName = "validationRules";
    DxRequiredRule.$_isCollectionItem = true;
    DxRequiredRule.$_predefinedProps = {
      type: "required"
    };
    var DxRowDragging = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowDropInsideItem": null,
        "update:allowReordering": null,
        "update:autoScroll": null,
        "update:boundary": null,
        "update:container": null,
        "update:cursorOffset": null,
        "update:data": null,
        "update:dragDirection": null,
        "update:dragTemplate": null,
        "update:dropFeedbackMode": null,
        "update:filter": null,
        "update:group": null,
        "update:handle": null,
        "update:onAdd": null,
        "update:onDragChange": null,
        "update:onDragEnd": null,
        "update:onDragMove": null,
        "update:onDragStart": null,
        "update:onRemove": null,
        "update:onReorder": null,
        "update:scrollSensitivity": null,
        "update:scrollSpeed": null,
        "update:showDragIcons": null
      },
      props: {
        allowDropInsideItem: Boolean,
        allowReordering: Boolean,
        autoScroll: Boolean,
        boundary: {},
        container: {},
        cursorOffset: [Object, String],
        data: {},
        dragDirection: String,
        dragTemplate: {},
        dropFeedbackMode: String,
        filter: String,
        group: String,
        handle: String,
        onAdd: Function,
        onDragChange: Function,
        onDragEnd: Function,
        onDragMove: Function,
        onDragStart: Function,
        onRemove: Function,
        onReorder: Function,
        scrollSensitivity: Number,
        scrollSpeed: Number,
        showDragIcons: Boolean
      }
    });
    exports.DxRowDragging = DxRowDragging;
    DxRowDragging.$_optionName = "rowDragging";
    DxRowDragging.$_expectedChildren = {
      cursorOffset: { isCollectionItem: false, optionName: "cursorOffset" }
    };
    var DxScrolling = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:columnRenderingMode": null,
        "update:mode": null,
        "update:preloadEnabled": null,
        "update:rowRenderingMode": null,
        "update:scrollByContent": null,
        "update:scrollByThumb": null,
        "update:showScrollbar": null,
        "update:useNative": null
      },
      props: {
        columnRenderingMode: String,
        mode: String,
        preloadEnabled: Boolean,
        rowRenderingMode: String,
        scrollByContent: Boolean,
        scrollByThumb: Boolean,
        showScrollbar: String,
        useNative: [Boolean, String]
      }
    });
    exports.DxScrolling = DxScrolling;
    DxScrolling.$_optionName = "scrolling";
    var DxSearchPanel = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:highlightCaseSensitive": null,
        "update:highlightSearchText": null,
        "update:placeholder": null,
        "update:searchVisibleColumnsOnly": null,
        "update:text": null,
        "update:visible": null,
        "update:width": null
      },
      props: {
        highlightCaseSensitive: Boolean,
        highlightSearchText: Boolean,
        placeholder: String,
        searchVisibleColumnsOnly: Boolean,
        text: String,
        visible: Boolean,
        width: Number
      }
    });
    exports.DxSearchPanel = DxSearchPanel;
    DxSearchPanel.$_optionName = "searchPanel";
    var DxSelection = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSelectAll": null,
        "update:mode": null,
        "update:recursive": null
      },
      props: {
        allowSelectAll: Boolean,
        mode: String,
        recursive: Boolean
      }
    });
    exports.DxSelection = DxSelection;
    DxSelection.$_optionName = "selection";
    var DxShow = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:complete": null,
        "update:delay": null,
        "update:direction": null,
        "update:duration": null,
        "update:easing": null,
        "update:from": null,
        "update:staggerDelay": null,
        "update:start": null,
        "update:to": null,
        "update:type": null
      },
      props: {
        complete: Function,
        delay: Number,
        direction: String,
        duration: Number,
        easing: String,
        from: {},
        staggerDelay: Number,
        start: Function,
        to: {},
        type: String
      }
    });
    exports.DxShow = DxShow;
    DxShow.$_optionName = "show";
    var DxSorting = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ascendingText": null,
        "update:clearText": null,
        "update:descendingText": null,
        "update:mode": null,
        "update:showSortIndexes": null
      },
      props: {
        ascendingText: String,
        clearText: String,
        descendingText: String,
        mode: String,
        showSortIndexes: Boolean
      }
    });
    exports.DxSorting = DxSorting;
    DxSorting.$_optionName = "sorting";
    var DxStateStoring = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:customLoad": null,
        "update:customSave": null,
        "update:enabled": null,
        "update:savingTimeout": null,
        "update:storageKey": null,
        "update:type": null
      },
      props: {
        customLoad: Function,
        customSave: Function,
        enabled: Boolean,
        savingTimeout: Number,
        storageKey: String,
        type: String
      }
    });
    exports.DxStateStoring = DxStateStoring;
    DxStateStoring.$_optionName = "stateStoring";
    var DxStringLengthRule = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:max": null,
        "update:message": null,
        "update:min": null,
        "update:trim": null,
        "update:type": null
      },
      props: {
        ignoreEmptyValue: Boolean,
        max: Number,
        message: String,
        min: Number,
        trim: Boolean,
        type: String
      }
    });
    exports.DxStringLengthRule = DxStringLengthRule;
    DxStringLengthRule.$_optionName = "validationRules";
    DxStringLengthRule.$_isCollectionItem = true;
    DxStringLengthRule.$_predefinedProps = {
      type: "stringLength"
    };
    var DxTexts = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:addRow": null,
        "update:addRowToNode": null,
        "update:cancel": null,
        "update:cancelAllChanges": null,
        "update:cancelRowChanges": null,
        "update:clearFilter": null,
        "update:confirmDeleteMessage": null,
        "update:confirmDeleteTitle": null,
        "update:createFilter": null,
        "update:deleteRow": null,
        "update:editRow": null,
        "update:emptyValue": null,
        "update:filterEnabledHint": null,
        "update:fix": null,
        "update:leftPosition": null,
        "update:ok": null,
        "update:rightPosition": null,
        "update:saveAllChanges": null,
        "update:saveRowChanges": null,
        "update:undeleteRow": null,
        "update:unfix": null,
        "update:validationCancelChanges": null
      },
      props: {
        addRow: String,
        addRowToNode: String,
        cancel: String,
        cancelAllChanges: String,
        cancelRowChanges: String,
        clearFilter: String,
        confirmDeleteMessage: String,
        confirmDeleteTitle: String,
        createFilter: String,
        deleteRow: String,
        editRow: String,
        emptyValue: String,
        filterEnabledHint: String,
        fix: String,
        leftPosition: String,
        ok: String,
        rightPosition: String,
        saveAllChanges: String,
        saveRowChanges: String,
        undeleteRow: String,
        unfix: String,
        validationCancelChanges: String
      }
    });
    exports.DxTexts = DxTexts;
    DxTexts.$_optionName = "texts";
    var DxToolbarItem = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:disabled": null,
        "update:html": null,
        "update:location": null,
        "update:options": null,
        "update:template": null,
        "update:text": null,
        "update:toolbar": null,
        "update:visible": null,
        "update:widget": null
      },
      props: {
        disabled: Boolean,
        html: String,
        location: String,
        options: {},
        template: {},
        text: String,
        toolbar: String,
        visible: Boolean,
        widget: String
      }
    });
    exports.DxToolbarItem = DxToolbarItem;
    DxToolbarItem.$_optionName = "toolbarItems";
    DxToolbarItem.$_isCollectionItem = true;
    var DxTreeListHeaderFilter = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSearch": null,
        "update:height": null,
        "update:searchTimeout": null,
        "update:texts": null,
        "update:visible": null,
        "update:width": null
      },
      props: {
        allowSearch: Boolean,
        height: Number,
        searchTimeout: Number,
        texts: Object,
        visible: Boolean,
        width: Number
      }
    });
    exports.DxTreeListHeaderFilter = DxTreeListHeaderFilter;
    DxTreeListHeaderFilter.$_optionName = "headerFilter";
    DxTreeListHeaderFilter.$_expectedChildren = {
      texts: { isCollectionItem: false, optionName: "texts" },
      treeListHeaderFilterTexts: { isCollectionItem: false, optionName: "texts" }
    };
    var DxTreeListHeaderFilterTexts = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:cancel": null,
        "update:emptyValue": null,
        "update:ok": null
      },
      props: {
        cancel: String,
        emptyValue: String,
        ok: String
      }
    });
    exports.DxTreeListHeaderFilterTexts = DxTreeListHeaderFilterTexts;
    DxTreeListHeaderFilterTexts.$_optionName = "texts";
    var DxValidationRule = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:comparisonTarget": null,
        "update:comparisonType": null,
        "update:ignoreEmptyValue": null,
        "update:max": null,
        "update:message": null,
        "update:min": null,
        "update:pattern": null,
        "update:reevaluate": null,
        "update:trim": null,
        "update:type": null,
        "update:validationCallback": null
      },
      props: {
        comparisonTarget: Function,
        comparisonType: String,
        ignoreEmptyValue: Boolean,
        max: {},
        message: String,
        min: {},
        pattern: {},
        reevaluate: Boolean,
        trim: Boolean,
        type: String,
        validationCallback: Function
      }
    });
    exports.DxValidationRule = DxValidationRule;
    DxValidationRule.$_optionName = "validationRules";
    DxValidationRule.$_isCollectionItem = true;
    DxValidationRule.$_predefinedProps = {
      type: "required"
    };
    exports.default = DxTreeList;
  }
});
export default require_tree_list();
/*! Bundled license information:

devextreme-vue/tree-list.js:
  (*!
   * devextreme-vue
   * Version: 21.1.12
   * Build date: Fri Apr 07 2023
   *
   * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-vue
   *)
*/
//# sourceMappingURL=devextreme-vue_tree-list.js.map

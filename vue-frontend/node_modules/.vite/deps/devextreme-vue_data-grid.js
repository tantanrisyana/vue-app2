import {
  Comment,
  createApp,
  defineComponent,
  h,
  toRaw,
  vue_runtime_esm_bundler_exports
} from "./chunk-HTSRYBLP.js";
import {
  __export
} from "./chunk-CSAU5B4Q.js";

// node_modules/devextreme/esm/core/utils/type.js
var types = {
  "[object Array]": "array",
  "[object Date]": "date",
  "[object Object]": "object",
  "[object String]": "string"
};
var type = function(object) {
  if (null === object) {
    return "null";
  }
  var typeOfObject = Object.prototype.toString.call(object);
  return "object" === typeof object ? types[typeOfObject] || "object" : typeof object;
};
var isBoolean = function(object) {
  return "boolean" === typeof object;
};
var isExponential = function(value2) {
  return isNumeric(value2) && -1 !== value2.toString().indexOf("e");
};
var isDate = function(object) {
  return "date" === type(object);
};
var isDefined = function(object) {
  return null !== object && void 0 !== object;
};
var isFunction = function(object) {
  return "function" === typeof object;
};
var isString = function(object) {
  return "string" === typeof object;
};
var isNumeric = function(object) {
  return "number" === typeof object && isFinite(object) || !isNaN(object - parseFloat(object));
};
var isObject = function(object) {
  return "object" === type(object);
};
var isEmptyObject = function(object) {
  var property;
  for (property in object) {
    return false;
  }
  return true;
};
var isPlainObject = function(object) {
  if (!object || "object" !== type(object)) {
    return false;
  }
  var proto = Object.getPrototypeOf(object);
  if (!proto) {
    return true;
  }
  var ctor = Object.hasOwnProperty.call(proto, "constructor") && proto.constructor;
  return "function" === typeof ctor && Object.toString.call(ctor) === Object.toString.call(Object);
};
var isPrimitive = function(value2) {
  return -1 === ["object", "array", "function"].indexOf(type(value2));
};
var isWindow = function(object) {
  return null != object && object === object.window;
};
var isRenderer = function(object) {
  return !!object && !!(object.jquery || object.dxRenderer);
};
var isPromise = function(object) {
  return !!object && isFunction(object.then);
};
var isDeferred = function(object) {
  return !!object && isFunction(object.done) && isFunction(object.fail);
};
var isEvent = function(object) {
  return !!(object && object.preventDefault);
};

// node_modules/devextreme/esm/core/utils/extend.js
var extendFromObject = function(target, source, overrideExistingValues) {
  target = target || {};
  for (var prop in source) {
    if (Object.prototype.hasOwnProperty.call(source, prop)) {
      var value2 = source[prop];
      if (!(prop in target) || overrideExistingValues) {
        target[prop] = value2;
      }
    }
  }
  return target;
};
var extend = function extend2(target) {
  target = target || {};
  var i = 1;
  var deep = false;
  if ("boolean" === typeof target) {
    deep = target;
    target = arguments[1] || {};
    i++;
  }
  for (; i < arguments.length; i++) {
    var source = arguments[i];
    if (null == source) {
      continue;
    }
    for (var key in source) {
      var targetValue = target[key];
      var sourceValue = source[key];
      var sourceValueIsArray = false;
      var clone = void 0;
      if ("__proto__" === key || "constructor" === key || target === sourceValue) {
        continue;
      }
      if (deep && sourceValue && (isPlainObject(sourceValue) || (sourceValueIsArray = Array.isArray(sourceValue)))) {
        if (sourceValueIsArray) {
          clone = targetValue && Array.isArray(targetValue) ? targetValue : [];
        } else {
          clone = targetValue && isPlainObject(targetValue) ? targetValue : {};
        }
        target[key] = extend2(deep, clone, sourceValue);
      } else if (void 0 !== sourceValue) {
        target[key] = sourceValue;
      }
    }
  }
  return target;
};

// node_modules/devextreme/esm/core/utils/iterator.js
var map = (values, callback) => {
  if (Array.isArray(values)) {
    return values.map(callback);
  }
  var result2 = [];
  for (var key in values) {
    result2.push(callback(values[key], key));
  }
  return result2;
};
var each = (values, callback) => {
  if (!values) {
    return;
  }
  if ("length" in values) {
    for (var i = 0; i < values.length; i++) {
      if (false === callback.call(values[i], i, values[i])) {
        break;
      }
    }
  } else {
    for (var key in values) {
      if (false === callback.call(values[key], key, values[key])) {
        break;
      }
    }
  }
  return values;
};

// node_modules/devextreme/esm/core/utils/console.js
var noop = function() {
};
var getConsoleMethod = function(method) {
  if ("undefined" === typeof console || !isFunction(console[method])) {
    return noop;
  }
  return console[method].bind(console);
};
var logger = {
  log: getConsoleMethod("log"),
  info: getConsoleMethod("info"),
  warn: getConsoleMethod("warn"),
  error: getConsoleMethod("error")
};

// node_modules/devextreme/esm/core/utils/string.js
var encodeHtml = function() {
  var encodeRegExp = [new RegExp("&", "g"), new RegExp('"', "g"), new RegExp("'", "g"), new RegExp("<", "g"), new RegExp(">", "g")];
  return function(str) {
    return String(str).replace(encodeRegExp[0], "&amp;").replace(encodeRegExp[1], "&quot;").replace(encodeRegExp[2], "&#39;").replace(encodeRegExp[3], "&lt;").replace(encodeRegExp[4], "&gt;");
  };
}();
var splitQuad = function(raw) {
  switch (typeof raw) {
    case "string":
      return raw.split(/\s+/, 4);
    case "object":
      return [raw.x || raw.h || raw.left, raw.y || raw.v || raw.top, raw.x || raw.h || raw.right, raw.y || raw.v || raw.bottom];
    case "number":
      return [raw];
    default:
      return raw;
  }
};
var quadToObject = function(raw) {
  var quad = splitQuad(raw);
  var left = parseInt(quad && quad[0], 10);
  var top = parseInt(quad && quad[1], 10);
  var right = parseInt(quad && quad[2], 10);
  var bottom = parseInt(quad && quad[3], 10);
  if (!isFinite(left)) {
    left = 0;
  }
  if (!isFinite(top)) {
    top = left;
  }
  if (!isFinite(right)) {
    right = left;
  }
  if (!isFinite(bottom)) {
    bottom = top;
  }
  return {
    top,
    right,
    bottom,
    left
  };
};
function format(template) {
  for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    values[_key - 1] = arguments[_key];
  }
  if (isFunction(template)) {
    return template(...values);
  }
  values.forEach((value2, index2) => {
    if (isString(value2)) {
      value2 = value2.replace(/\$/g, "$$$$");
    }
    var placeholderReg = new RegExp("\\{" + index2 + "\\}", "gm");
    template = template.replace(placeholderReg, value2);
  });
  return template;
}
var isEmpty = /* @__PURE__ */ function() {
  var SPACE_REGEXP = /\s/g;
  return function(text) {
    return !text || !text.replace(SPACE_REGEXP, "");
  };
}();

// node_modules/devextreme/esm/core/version.js
var version = "23.2.4";

// node_modules/devextreme/esm/core/utils/error.js
var ERROR_URL = "https://js.devexpress.com/error/" + version.split(".").slice(0, 2).join("_") + "/";
function error_default(baseErrors, errors2) {
  var exports = {
    ERROR_MESSAGES: extend(errors2, baseErrors),
    Error: function() {
      return makeError([].slice.call(arguments));
    },
    log: function(id) {
      var method = "log";
      if (/^E\d+$/.test(id)) {
        method = "error";
      } else if (/^W\d+$/.test(id)) {
        method = "warn";
      }
      logger[method]("log" === method ? id : combineMessage([].slice.call(arguments)));
    }
  };
  function combineMessage(args) {
    var id = args[0];
    args = args.slice(1);
    return formatMessage(id, formatDetails(id, args));
  }
  function formatDetails(id, args) {
    args = [exports.ERROR_MESSAGES[id]].concat(args);
    return format.apply(this, args).replace(/\.*\s*?$/, "");
  }
  function formatMessage(id, details) {
    var kind = null !== id && void 0 !== id && id.startsWith("W") ? "warning" : "error";
    return format.apply(this, ["{0} - {1}.\n\nFor additional information on this {2} message, see: {3}", id, details, kind, getErrorUrl(id)]);
  }
  function makeError(args) {
    var id = args[0];
    args = args.slice(1);
    var details = formatDetails(id, args);
    var url = getErrorUrl(id);
    var message = formatMessage(id, details);
    return extend(new Error(message), {
      __id: id,
      __details: details,
      url
    });
  }
  function getErrorUrl(id) {
    return ERROR_URL + id;
  }
  return exports;
}

// node_modules/devextreme/esm/core/errors.js
var errors_default = error_default({
  E0001: "Method is not implemented",
  E0002: "Member name collision: {0}",
  E0003: "A class must be instantiated using the 'new' keyword",
  E0004: "The NAME property of the component is not specified",
  E0005: "Unknown device",
  E0006: "Unknown endpoint key is requested",
  E0007: "'Invalidate' method is called outside the update transaction",
  E0008: "Type of the option name is not appropriate to create an action",
  E0009: "Component '{0}' has not been initialized for an element",
  E0010: "Animation configuration with the '{0}' type requires '{1}' configuration as {2}",
  E0011: "Unknown animation type '{0}'",
  E0012: "jQuery version is too old. Please upgrade jQuery to 1.10.0 or later",
  E0013: "KnockoutJS version is too old. Please upgrade KnockoutJS to 2.3.0 or later",
  E0014: "The 'release' method shouldn't be called for an unlocked Lock object",
  E0015: "Queued task returned an unexpected result",
  E0017: "Event namespace is not defined",
  E0018: "DevExpress.ui.DevExpressPopup widget is required",
  E0020: "Template engine '{0}' is not supported",
  E0021: "Unknown theme is set: {0}",
  E0022: "LINK[rel=DevExpress-theme] tags must go before DevExpress included scripts",
  E0023: "Template name is not specified",
  E0024: "DevExtreme bundle already included",
  E0025: "Unexpected argument type",
  E0100: "Unknown validation type is detected",
  E0101: "Misconfigured range validation rule is detected",
  E0102: "Misconfigured comparison validation rule is detected",
  E0103: "validationCallback of an asynchronous rule should return a jQuery or a native promise",
  E0110: "Unknown validation group is detected",
  E0120: "Adapter for a DevExpressValidator component cannot be configured",
  E0121: "The 'customItem' parameter of the 'onCustomItemCreating' function is empty or contains invalid data. Assign a custom object or a Promise that is resolved after the item is created.",
  W0000: "'{0}' is deprecated in {1}. {2}",
  W0001: "{0} - '{1}' option is deprecated in {2}. {3}",
  W0002: "{0} - '{1}' method is deprecated in {2}. {3}",
  W0003: "{0} - '{1}' property is deprecated in {2}. {3}",
  W0004: "Timeout for theme loading is over: {0}",
  W0005: "'{0}' event is deprecated in {1}. {2}",
  W0006: "Invalid recurrence rule: '{0}'",
  W0007: "'{0}' Globalize culture is not defined",
  W0008: "Invalid view name: '{0}'",
  W0009: "Invalid time zone name: '{0}'",
  W0010: "{0} is deprecated in {1}. {2}",
  W0011: "Number parsing is invoked while the parser is not defined",
  W0012: "Date parsing is invoked while the parser is not defined",
  W0013: "'{0}' file is deprecated in {1}. {2}",
  W0014: "{0} - '{1}' type is deprecated in {2}. {3}",
  W0015: "Instead of returning a value from the '{0}' function, write it into the '{1}' field of the function's parameter.",
  W0016: 'The "{0}" option does not accept the "{1}" value since v{2}. {3}.',
  W0017: 'Setting the "{0}" property with a function is deprecated since v21.2',
  W0018: 'Setting the "position" property with a function is deprecated since v21.2',
  W0019: "DevExtreme: Unable to Locate a Valid License Key.\n\nIf you are using a 30-day trial version of DevExtreme, you must uninstall all copies of DevExtreme once your 30-day trial period expires. For terms and conditions that govern use of DevExtreme UI components/libraries, please refer to the DevExtreme End User License Agreement: https://js.devexpress.com/EULAs/DevExtremeComplete.\n\nTo use DevExtreme in a commercial project, you must purchase a license. For pricing/licensing options, please visit: https://js.devexpress.com/Buy.\n\nIf you have licensing-related questions or need help with a purchase, please email clientservices@devexpress.com.\n\n",
  W0020: "DevExtreme: License Key Has Expired.\n\nA mismatch exists between the license key used and the DevExtreme version referenced in this project.\n\nTo proceed, you can:\n• use a version of DevExtreme linked to your license key: https://www.devexpress.com/ClientCenter/DownloadManager\n• renew your DevExpress Subscription: https://www.devexpress.com/buy/renew (once you renew your subscription, you will be entitled to product updates and support service as defined in the DevExtreme End User License Agreement)\n\nIf you have licensing-related questions or need help with a renewal, please email clientservices@devexpress.com.\n\n",
  W0021: "DevExtreme: License Key Verification Has Failed.\n\nTo verify your DevExtreme license, make certain to specify a correct key in the GlobalConfig. If you continue to encounter this error, please visit https://www.devexpress.com/ClientCenter/DownloadManager to obtain a valid license key.\n\nIf you have a valid license and this problem persists, please submit a support ticket via the DevExpress Support Center. We will be happy to follow-up: https://supportcenter.devexpress.com/ticket/create.\n\n",
  W0022: "DevExtreme: Pre-release software. Not suitable for commercial use.\n\nPre-release software may contain deficiencies and as such, should not be considered for use or integrated in any mission critical application.\n\n"
});

// node_modules/devextreme/esm/core/class.js
var wrapOverridden = function(baseProto, methodName, method) {
  return function() {
    var prevCallBase = this.callBase;
    this.callBase = baseProto[methodName];
    try {
      return method.apply(this, arguments);
    } finally {
      this.callBase = prevCallBase;
    }
  };
};
var clonePrototype = function(obj) {
  var func = function() {
  };
  func.prototype = obj.prototype;
  return new func();
};
var redefine = function(members) {
  var overridden;
  var memberName;
  var member;
  if (!members) {
    return this;
  }
  for (memberName in members) {
    member = members[memberName];
    overridden = "function" === typeof this.prototype[memberName] && "function" === typeof member;
    this.prototype[memberName] = overridden ? wrapOverridden(this.parent.prototype, memberName, member) : member;
  }
  return this;
};
var include = function() {
  var classObj = this;
  var argument;
  var name2;
  var i;
  var hasClassObjOwnProperty = Object.prototype.hasOwnProperty.bind(classObj);
  var isES6Class = !hasClassObjOwnProperty("_includedCtors") && !hasClassObjOwnProperty("_includedPostCtors");
  if (isES6Class) {
    classObj._includedCtors = classObj._includedCtors.slice(0);
    classObj._includedPostCtors = classObj._includedPostCtors.slice(0);
  }
  for (i = 0; i < arguments.length; i++) {
    argument = arguments[i];
    if (argument.ctor) {
      classObj._includedCtors.push(argument.ctor);
    }
    if (argument.postCtor) {
      classObj._includedPostCtors.push(argument.postCtor);
    }
    for (name2 in argument) {
      if ("ctor" === name2 || "postCtor" === name2 || "default" === name2) {
        continue;
      }
      classObj.prototype[name2] = argument[name2];
    }
  }
  return classObj;
};
var subclassOf = function(parentClass) {
  var hasParentProperty = Object.prototype.hasOwnProperty.bind(this)("parent");
  var isES6Class = !hasParentProperty && this.parent;
  if (isES6Class) {
    var baseClass = Object.getPrototypeOf(this);
    return baseClass === parentClass || baseClass.subclassOf(parentClass);
  } else {
    if (this.parent === parentClass) {
      return true;
    }
    if (!this.parent || !this.parent.subclassOf) {
      return false;
    }
    return this.parent.subclassOf(parentClass);
  }
};
var abstract = function() {
  throw errors_default.Error("E0001");
};
var copyStatic = /* @__PURE__ */ function() {
  var hasOwn = Object.prototype.hasOwnProperty;
  return function(source, destination) {
    for (var key in source) {
      if (!hasOwn.call(source, key)) {
        return;
      }
      destination[key] = source[key];
    }
  };
}();
var classImpl = function() {
};
classImpl.inherit = function(members) {
  var inheritor = function() {
    if (!this || isWindow(this) || "function" !== typeof this.constructor) {
      throw errors_default.Error("E0003");
    }
    var instance = this;
    var ctor = instance.ctor;
    var includedCtors = instance.constructor._includedCtors;
    var includedPostCtors = instance.constructor._includedPostCtors;
    var i;
    for (i = 0; i < includedCtors.length; i++) {
      includedCtors[i].call(instance);
    }
    if (ctor) {
      ctor.apply(instance, arguments);
    }
    for (i = 0; i < includedPostCtors.length; i++) {
      includedPostCtors[i].call(instance);
    }
  };
  inheritor.prototype = clonePrototype(this);
  copyStatic(this, inheritor);
  inheritor.inherit = this.inherit;
  inheritor.abstract = abstract;
  inheritor.redefine = redefine;
  inheritor.include = include;
  inheritor.subclassOf = subclassOf;
  inheritor.parent = this;
  inheritor._includedCtors = this._includedCtors ? this._includedCtors.slice(0) : [];
  inheritor._includedPostCtors = this._includedPostCtors ? this._includedPostCtors.slice(0) : [];
  inheritor.prototype.constructor = inheritor;
  inheritor.redefine(members);
  return inheritor;
};
classImpl.abstract = abstract;
var class_default = classImpl;

// node_modules/devextreme/esm/core/utils/dependency_injector.js
function dependency_injector_default(object) {
  var BaseClass = class_default.inherit(object);
  var InjectedClass = BaseClass;
  var instance = new InjectedClass(object);
  var initialFields = {};
  var injectFields = function(injectionObject, initial) {
    each(injectionObject, function(key) {
      if (isFunction(instance[key])) {
        if (initial || !object[key]) {
          object[key] = function() {
            return instance[key].apply(object, arguments);
          };
        }
      } else {
        if (initial) {
          initialFields[key] = object[key];
        }
        object[key] = instance[key];
      }
    });
  };
  injectFields(object, true);
  object.inject = function(injectionObject) {
    InjectedClass = InjectedClass.inherit(injectionObject);
    instance = new InjectedClass();
    injectFields(injectionObject);
  };
  object.resetInjection = function() {
    extend(object, initialFields);
    InjectedClass = BaseClass;
    instance = new BaseClass();
  };
  return object;
}

// node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

// node_modules/devextreme/esm/core/config.js
var config = {
  rtlEnabled: false,
  defaultCurrency: "USD",
  defaultUseCurrencyAccountingStyle: true,
  oDataFilterToLower: true,
  serverDecimalSeparator: ".",
  decimalSeparator: ".",
  thousandsSeparator: ",",
  forceIsoDateParsing: true,
  wrapActionsBeforeExecute: true,
  useLegacyStoreResult: false,
  useJQuery: void 0,
  editorStylingMode: void 0,
  useLegacyVisibleIndex: false,
  floatingActionButtonConfig: {
    icon: "add",
    closeIcon: "close",
    label: "",
    position: {
      at: "right bottom",
      my: "right bottom",
      offset: {
        x: -16,
        y: -16
      }
    },
    maxSpeedDialActionCount: 5,
    shading: false,
    direction: "auto"
  },
  optionsParser: (optionsString) => {
    if ("{" !== optionsString.trim().charAt(0)) {
      optionsString = "{" + optionsString + "}";
    }
    try {
      return JSON.parse(optionsString);
    } catch (ex) {
      try {
        return JSON.parse(normalizeToJSONString(optionsString));
      } catch (exNormalize) {
        throw errors_default.Error("E3018", ex, optionsString);
      }
    }
  }
};
var normalizeToJSONString = (optionsString) => optionsString.replace(/'/g, '"').replace(/,\s*([\]}])/g, "$1").replace(/([{,])\s*([^":\s]+)\s*:/g, '$1"$2":');
var deprecatedFields = ["decimalSeparator", "thousandsSeparator"];
var configMethod = function() {
  if (!arguments.length) {
    return config;
  }
  var newConfig = arguments.length <= 0 ? void 0 : arguments[0];
  deprecatedFields.forEach((deprecatedField) => {
    if (newConfig[deprecatedField]) {
      var message = "Now, the ".concat(deprecatedField, " is selected based on the specified locale.");
      errors_default.log("W0003", "config", deprecatedField, "19.2", message);
    }
  });
  extend(config, newConfig);
};
if ("undefined" !== typeof DevExpress && DevExpress.config) {
  configMethod(DevExpress.config);
}
var config_default = configMethod;

// node_modules/devextreme/esm/core/guid.js
var Guid = class_default.inherit({
  ctor: function(value2) {
    if (value2) {
      value2 = String(value2);
    }
    this._value = this._normalize(value2 || this._generate());
  },
  _normalize: function(value2) {
    value2 = value2.replace(/[^a-f0-9]/gi, "").toLowerCase();
    while (value2.length < 32) {
      value2 += "0";
    }
    return [value2.substr(0, 8), value2.substr(8, 4), value2.substr(12, 4), value2.substr(16, 4), value2.substr(20, 12)].join("-");
  },
  _generate: function() {
    var value2 = "";
    for (var i = 0; i < 32; i++) {
      value2 += Math.round(15 * Math.random()).toString(16);
    }
    return value2;
  },
  toString: function() {
    return this._value;
  },
  valueOf: function() {
    return this._value;
  },
  toJSON: function() {
    return this._value;
  }
});
var guid_default = Guid;

// node_modules/devextreme/esm/core/utils/callbacks.js
var Callback = function(options2) {
  this._options = options2 || {};
  this._list = [];
  this._queue = [];
  this._firing = false;
  this._fired = false;
  this._firingIndexes = [];
};
Callback.prototype._fireCore = function(context2, args) {
  var firingIndexes = this._firingIndexes;
  var list = this._list;
  var stopOnFalse = this._options.stopOnFalse;
  var step = firingIndexes.length;
  for (firingIndexes[step] = 0; firingIndexes[step] < list.length; firingIndexes[step]++) {
    var result2 = list[firingIndexes[step]].apply(context2, args);
    if (false === result2 && stopOnFalse) {
      break;
    }
  }
  firingIndexes.pop();
};
Callback.prototype.add = function(fn) {
  if ("function" === typeof fn && (!this._options.unique || !this.has(fn))) {
    this._list.push(fn);
  }
  return this;
};
Callback.prototype.remove = function(fn) {
  var list = this._list;
  var firingIndexes = this._firingIndexes;
  var index2 = list.indexOf(fn);
  if (index2 > -1) {
    list.splice(index2, 1);
    if (this._firing && firingIndexes.length) {
      for (var step = 0; step < firingIndexes.length; step++) {
        if (index2 <= firingIndexes[step]) {
          firingIndexes[step]--;
        }
      }
    }
  }
  return this;
};
Callback.prototype.has = function(fn) {
  var list = this._list;
  return fn ? list.indexOf(fn) > -1 : !!list.length;
};
Callback.prototype.empty = function(fn) {
  this._list = [];
  return this;
};
Callback.prototype.fireWith = function(context2, args) {
  var queue = this._queue;
  args = args || [];
  args = args.slice ? args.slice() : args;
  if (this._options.syncStrategy) {
    this._firing = true;
    this._fireCore(context2, args);
  } else {
    queue.push([context2, args]);
    if (this._firing) {
      return;
    }
    this._firing = true;
    while (queue.length) {
      var memory = queue.shift();
      this._fireCore(memory[0], memory[1]);
    }
  }
  this._firing = false;
  this._fired = true;
  return this;
};
Callback.prototype.fire = function() {
  this.fireWith(this, arguments);
};
Callback.prototype.fired = function() {
  return this._fired;
};
var Callbacks = function(options2) {
  return new Callback(options2);
};
var callbacks_default = Callbacks;

// node_modules/devextreme/esm/core/utils/deferred.js
var deferredConfig = [{
  method: "resolve",
  handler: "done",
  state: "resolved"
}, {
  method: "reject",
  handler: "fail",
  state: "rejected"
}, {
  method: "notify",
  handler: "progress"
}];
var _DeferredObj = function() {
  var that = this;
  this._state = "pending";
  this._promise = {};
  deferredConfig.forEach((function(config3) {
    var methodName = config3.method;
    this[methodName + "Callbacks"] = callbacks_default();
    this[methodName] = (function() {
      return this[methodName + "With"](this._promise, arguments);
    }).bind(this);
    this._promise[config3.handler] = function(handler) {
      if (!handler) {
        return this;
      }
      var callbacks2 = that[methodName + "Callbacks"];
      if (callbacks2.fired()) {
        handler.apply(that[methodName + "Context"], that[methodName + "Args"]);
      } else {
        callbacks2.add((function(context2, args) {
          handler.apply(context2, args);
        }).bind(this));
      }
      return this;
    };
  }).bind(this));
  this._promise.always = function(handler) {
    return this.done(handler).fail(handler);
  };
  this._promise.catch = function(handler) {
    return this.then(null, handler);
  };
  this._promise.then = function(resolve, reject) {
    var result2 = new _DeferredObj();
    ["done", "fail"].forEach((function(method) {
      var callback = "done" === method ? resolve : reject;
      this[method](function() {
        if (!callback) {
          result2["done" === method ? "resolve" : "reject"].apply(this, arguments);
          return;
        }
        var callbackResult = callback && callback.apply(this, arguments);
        if (isDeferred(callbackResult)) {
          callbackResult.done(result2.resolve).fail(result2.reject);
        } else if (isPromise(callbackResult)) {
          callbackResult.then(result2.resolve, result2.reject);
        } else {
          result2.resolve.apply(this, isDefined(callbackResult) ? [callbackResult] : arguments);
        }
      });
    }).bind(this));
    return result2.promise();
  };
  this._promise.state = function() {
    return that._state;
  };
  this._promise.promise = function(args) {
    return args ? extend(args, that._promise) : that._promise;
  };
  this._promise.promise(this);
};
deferredConfig.forEach(function(config3) {
  var methodName = config3.method;
  var state = config3.state;
  _DeferredObj.prototype[methodName + "With"] = function(context2, args) {
    var callbacks2 = this[methodName + "Callbacks"];
    if ("pending" === this.state()) {
      this[methodName + "Args"] = args;
      this[methodName + "Context"] = context2;
      if (state) {
        this._state = state;
      }
      callbacks2.fire(context2, args);
    }
    return this;
  };
});
function fromPromise(promise, context2) {
  if (isDeferred(promise)) {
    return promise;
  } else if (isPromise(promise)) {
    var d = new _DeferredObj();
    promise.then(function() {
      d.resolveWith.apply(d, [context2].concat([
        [].slice.call(arguments)
      ]));
    }, function() {
      d.rejectWith.apply(d, [context2].concat([
        [].slice.call(arguments)
      ]));
    });
    return d;
  }
  return new _DeferredObj().resolveWith(context2, [promise]);
}
var whenFunc = function() {
  if (1 === arguments.length) {
    return fromPromise(arguments[0]);
  }
  var values = [].slice.call(arguments);
  var contexts = [];
  var resolvedCount = 0;
  var deferred = new _DeferredObj();
  var updateState = function(i2) {
    return function(value2) {
      contexts[i2] = this;
      values[i2] = arguments.length > 1 ? [].slice.call(arguments) : value2;
      resolvedCount++;
      if (resolvedCount === values.length) {
        deferred.resolveWith(contexts, values);
      }
    };
  };
  for (var i = 0; i < values.length; i++) {
    if (isDeferred(values[i])) {
      values[i].promise().done(updateState(i)).fail(deferred.reject);
    } else {
      resolvedCount++;
    }
  }
  if (resolvedCount === values.length) {
    deferred.resolveWith(contexts, values);
  }
  return deferred.promise();
};
function Deferred() {
  return new _DeferredObj();
}
function when() {
  return whenFunc.apply(this, arguments);
}

// node_modules/devextreme/esm/core/utils/variable_wrapper.js
var variable_wrapper_default = dependency_injector_default({
  isWrapped: function() {
    return false;
  },
  isWritableWrapped: function() {
    return false;
  },
  wrap: function(value2) {
    return value2;
  },
  unwrap: function(value2) {
    return value2;
  },
  assign: function() {
    logger.error("Method 'assign' should not be used for not wrapped variables. Use 'isWrapped' method for ensuring.");
  }
});

// node_modules/devextreme/esm/core/utils/object.js
var orderEach = function(map3, func) {
  var keys = [];
  var key;
  var i;
  for (key in map3) {
    if (Object.prototype.hasOwnProperty.call(map3, key)) {
      keys.push(key);
    }
  }
  keys.sort(function(x, y) {
    var isNumberX = isNumeric(x);
    var isNumberY = isNumeric(y);
    if (isNumberX && isNumberY) {
      return x - y;
    }
    if (isNumberX && !isNumberY) {
      return -1;
    }
    if (!isNumberX && isNumberY) {
      return 1;
    }
    if (x < y) {
      return -1;
    }
    if (x > y) {
      return 1;
    }
    return 0;
  });
  for (i = 0; i < keys.length; i++) {
    key = keys[i];
    func(key, map3[key]);
  }
};
var assignValueToProperty = function(target, property, value2, assignByReference) {
  if (!assignByReference && variable_wrapper_default.isWrapped(target[property])) {
    variable_wrapper_default.assign(target[property], value2);
  } else {
    target[property] = value2;
  }
};
var deepExtendArraySafe = function deepExtendArraySafe2(target, changes, extendComplexObject, assignByReference) {
  var prevValue;
  var newValue;
  for (var name2 in changes) {
    prevValue = target[name2];
    newValue = changes[name2];
    if ("__proto__" === name2 || "constructor" === name2 || target === newValue) {
      continue;
    }
    if (isPlainObject(newValue)) {
      var goDeeper = extendComplexObject ? isObject(prevValue) : isPlainObject(prevValue);
      newValue = deepExtendArraySafe2(goDeeper ? prevValue : {}, newValue, extendComplexObject, assignByReference);
    }
    if (void 0 !== newValue && prevValue !== newValue) {
      assignValueToProperty(target, name2, newValue, assignByReference);
    }
  }
  return target;
};

// node_modules/devextreme/esm/core/utils/data.js
var unwrapVariable = variable_wrapper_default.unwrap;
var isWrapped = variable_wrapper_default.isWrapped;
var assign = variable_wrapper_default.assign;
var bracketsToDots = function(expr) {
  return expr.replace(/\[/g, ".").replace(/\]/g, "");
};
var getPathParts = function(name2) {
  return bracketsToDots(name2).split(".");
};
var readPropValue = function(obj, propName, options2) {
  options2 = options2 || {};
  if ("this" === propName) {
    return unwrap(obj, options2);
  }
  return unwrap(obj[propName], options2);
};
var assignPropValue = function(obj, propName, value2, options2) {
  if ("this" === propName) {
    throw new errors_default.Error("E4016");
  }
  var propValue = obj[propName];
  if (options2.unwrapObservables && isWrapped(propValue)) {
    assign(propValue, value2);
  } else {
    obj[propName] = value2;
  }
};
var prepareOptions = function(options2) {
  options2 = options2 || {};
  options2.unwrapObservables = void 0 !== options2.unwrapObservables ? options2.unwrapObservables : true;
  return options2;
};
function unwrap(value2, options2) {
  return options2.unwrapObservables ? unwrapVariable(value2) : value2;
}
var compileGetter = function(expr) {
  if (arguments.length > 1) {
    expr = [].slice.call(arguments);
  }
  if (!expr || "this" === expr) {
    return function(obj) {
      return obj;
    };
  }
  if ("string" === typeof expr) {
    var path = getPathParts(expr);
    return function(obj, options2) {
      options2 = prepareOptions(options2);
      var functionAsIs = options2.functionsAsIs;
      var hasDefaultValue = "defaultValue" in options2;
      var current2 = unwrap(obj, options2);
      for (var i = 0; i < path.length; i++) {
        if (!current2) {
          if (null == current2 && hasDefaultValue) {
            return options2.defaultValue;
          }
          break;
        }
        var pathPart = path[i];
        if (hasDefaultValue && isObject(current2) && !(pathPart in current2)) {
          return options2.defaultValue;
        }
        var next = unwrap(current2[pathPart], options2);
        if (!functionAsIs && isFunction(next)) {
          next = next.call(current2);
        }
        current2 = next;
      }
      return current2;
    };
  }
  if (Array.isArray(expr)) {
    return combineGetters(expr);
  }
  if (isFunction(expr)) {
    return expr;
  }
};
function combineGetters(getters) {
  var compiledGetters = {};
  for (var i = 0, l = getters.length; i < l; i++) {
    var getter = getters[i];
    compiledGetters[getter] = compileGetter(getter);
  }
  return function(obj, options2) {
    var result2;
    each(compiledGetters, function(name2) {
      var value2 = this(obj, options2);
      if (void 0 === value2) {
        return;
      }
      var current2 = result2 || (result2 = {});
      var path = name2.split(".");
      var last = path.length - 1;
      for (var _i = 0; _i < last; _i++) {
        var pathItem = path[_i];
        if (!(pathItem in current2)) {
          current2[pathItem] = {};
        }
        current2 = current2[pathItem];
      }
      current2[path[last]] = value2;
    });
    return result2;
  };
}
var ensurePropValueDefined = function(obj, propName, value2, options2) {
  if (isDefined(value2)) {
    return value2;
  }
  var newValue = {};
  assignPropValue(obj, propName, newValue, options2);
  return newValue;
};
var compileSetter = function(expr) {
  expr = getPathParts(expr || "this");
  var lastLevelIndex = expr.length - 1;
  return function(obj, value2, options2) {
    options2 = prepareOptions(options2);
    var currentValue = unwrap(obj, options2);
    expr.forEach(function(propertyName, levelIndex) {
      var propertyValue = readPropValue(currentValue, propertyName, options2);
      var isPropertyFunc = !options2.functionsAsIs && isFunction(propertyValue) && !isWrapped(propertyValue);
      if (levelIndex === lastLevelIndex) {
        if (options2.merge && isPlainObject(value2) && (!isDefined(propertyValue) || isPlainObject(propertyValue))) {
          propertyValue = ensurePropValueDefined(currentValue, propertyName, propertyValue, options2);
          deepExtendArraySafe(propertyValue, value2, false, true);
        } else if (isPropertyFunc) {
          currentValue[propertyName](value2);
        } else {
          assignPropValue(currentValue, propertyName, value2, options2);
        }
      } else {
        propertyValue = ensurePropValueDefined(currentValue, propertyName, propertyValue, options2);
        if (isPropertyFunc) {
          propertyValue = propertyValue.call(currentValue);
        }
        currentValue = propertyValue;
      }
    });
  };
};
var toComparable = function(value2, caseSensitive) {
  var options2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
  if (value2 instanceof Date) {
    return value2.getTime();
  }
  if (value2 && value2 instanceof class_default && value2.valueOf) {
    return value2.valueOf();
  }
  if (!caseSensitive && "string" === typeof value2) {
    var _options$collatorOpti;
    if ("base" === (null === options2 || void 0 === options2 ? void 0 : null === (_options$collatorOpti = options2.collatorOptions) || void 0 === _options$collatorOpti ? void 0 : _options$collatorOpti.sensitivity)) {
      var REMOVE_DIACRITICAL_MARKS_REGEXP = /[\u0300-\u036f]/g;
      value2 = value2.normalize("NFD").replace(REMOVE_DIACRITICAL_MARKS_REGEXP, "");
    }
    return null !== options2 && void 0 !== options2 && options2.locale ? value2.toLocaleLowerCase(options2.locale) : value2.toLowerCase();
  }
  return value2;
};

// node_modules/devextreme/esm/core/utils/common.js
var ensureDefined = function(value2, defaultValue) {
  return isDefined(value2) ? value2 : defaultValue;
};
var executeAsync = function(action, context2) {
  var deferred = new Deferred();
  var normalizedContext = context2 || this;
  var task = {
    promise: deferred.promise(),
    abort: function() {
      clearTimeout(timerId);
      deferred.rejectWith(normalizedContext);
    }
  };
  var callback = function() {
    var result2 = action.call(normalizedContext);
    if (result2 && result2.done && isFunction(result2.done)) {
      result2.done(function() {
        deferred.resolveWith(normalizedContext);
      });
    } else {
      deferred.resolveWith(normalizedContext);
    }
  };
  var timerId = (arguments[2] || setTimeout)(callback, "number" === typeof context2 ? context2 : 0);
  return task;
};
var delayedFuncs = [];
var delayedNames = [];
var delayedDeferreds = [];
var executingName;
var deferExecute = function(name2, func, deferred) {
  if (executingName && executingName !== name2) {
    delayedFuncs.push(func);
    delayedNames.push(name2);
    deferred = deferred || new Deferred();
    delayedDeferreds.push(deferred);
    return deferred;
  } else {
    var oldExecutingName = executingName;
    var currentDelayedCount = delayedDeferreds.length;
    executingName = name2;
    var result2 = func();
    if (!result2) {
      if (delayedDeferreds.length > currentDelayedCount) {
        result2 = when.apply(this, delayedDeferreds.slice(currentDelayedCount));
      } else if (deferred) {
        deferred.resolve();
      }
    }
    executingName = oldExecutingName;
    if (deferred && result2 && result2.done) {
      result2.done(deferred.resolve).fail(deferred.reject);
    }
    if (!executingName && delayedFuncs.length) {
      ("render" === delayedNames.shift() ? deferRender : deferUpdate)(delayedFuncs.shift(), delayedDeferreds.shift());
    }
    return result2 || when();
  }
};
var deferRender = function(func, deferred) {
  return deferExecute("render", func, deferred);
};
var deferUpdate = function(func, deferred) {
  return deferExecute("update", func, deferred);
};
var deferRenderer = function(func) {
  return function() {
    var that = this;
    return deferExecute("render", function() {
      return func.call(that);
    });
  };
};
var deferUpdater = function(func) {
  return function() {
    var that = this;
    return deferExecute("update", function() {
      return func.call(that);
    });
  };
};
var findBestMatches = function(targetFilter, items, mapFn) {
  var bestMatches = [];
  var maxMatchCount = 0;
  each(items, (index2, itemSrc) => {
    var matchCount = 0;
    var item = mapFn ? mapFn(itemSrc) : itemSrc;
    each(targetFilter, (paramName, targetValue) => {
      var value2 = item[paramName];
      if (void 0 === value2) {
        return;
      }
      if (match(value2, targetValue)) {
        matchCount++;
        return;
      }
      matchCount = -1;
      return false;
    });
    if (matchCount < maxMatchCount) {
      return;
    }
    if (matchCount > maxMatchCount) {
      bestMatches.length = 0;
      maxMatchCount = matchCount;
    }
    bestMatches.push(itemSrc);
  });
  return bestMatches;
};
var match = function(value2, targetValue) {
  if (Array.isArray(value2) && Array.isArray(targetValue)) {
    var mismatch = false;
    each(value2, (index2, valueItem) => {
      if (valueItem !== targetValue[index2]) {
        mismatch = true;
        return false;
      }
    });
    if (mismatch) {
      return false;
    }
    return true;
  }
  if (value2 === targetValue) {
    return true;
  }
  return false;
};
var splitPair = function(raw) {
  var _raw$x, _raw$y;
  switch (type(raw)) {
    case "string":
      return raw.split(/\s+/, 2);
    case "object":
      return [null !== (_raw$x = raw.x) && void 0 !== _raw$x ? _raw$x : raw.h, null !== (_raw$y = raw.y) && void 0 !== _raw$y ? _raw$y : raw.v];
    case "number":
      return [raw];
    case "array":
      return raw;
    default:
      return null;
  }
};
var pairToObject = function(raw, preventRound) {
  var pair = splitPair(raw);
  var h2 = preventRound ? parseFloat(pair && pair[0]) : parseInt(pair && pair[0], 10);
  var v = preventRound ? parseFloat(pair && pair[1]) : parseInt(pair && pair[1], 10);
  if (!isFinite(h2)) {
    h2 = 0;
  }
  if (!isFinite(v)) {
    v = h2;
  }
  return {
    h: h2,
    v
  };
};
var getKeyHash = function(key) {
  if (key instanceof guid_default) {
    return key.toString();
  } else if (isObject(key) || Array.isArray(key)) {
    try {
      var keyHash = JSON.stringify(key);
      return "{}" === keyHash ? key : keyHash;
    } catch (e) {
      return key;
    }
  }
  return key;
};
var escapeRegExp = function(string) {
  return string.replace(/[[\]{}\-()*+?.\\^$|\s]/g, "\\$&");
};
var applyServerDecimalSeparator = function(value2) {
  var separator = config_default().serverDecimalSeparator;
  if (isDefined(value2)) {
    value2 = value2.toString().replace(".", separator);
  }
  return value2;
};
var noop2 = function() {
};
var asyncNoop = function() {
  return new Deferred().resolve().promise();
};
var grep = function(elements, checkFunction, invert) {
  var result2 = [];
  var check;
  var expectedCheck = !invert;
  for (var i = 0; i < elements.length; i++) {
    check = !!checkFunction(elements[i], i);
    if (check === expectedCheck) {
      result2.push(elements[i]);
    }
  }
  return result2;
};
var compareArrays = (array1, array2, depth, options2) => {
  if (array1.length !== array2.length) {
    return false;
  }
  return !array1.some((item, idx) => !compareByValue(item, array2[idx], depth + 1, _extends({}, options2, {
    strict: true
  })));
};
var compareObjects = (object1, object2, depth, options2) => {
  var keys1 = Object.keys(object1);
  var keys2 = Object.keys(object2);
  if (keys1.length !== keys2.length) {
    return false;
  }
  var keys2Set = new Set(keys2);
  return !keys1.some((key) => !keys2Set.has(key) || !compareByValue(object1[key], object2[key], depth + 1, options2));
};
var DEFAULT_EQUAL_BY_VALUE_OPTS = {
  maxDepth: 3,
  strict: true
};
var compareByValue = (value1, value2, depth, options2) => {
  var {
    strict,
    maxDepth
  } = options2;
  var comparable1 = toComparable(value1, true);
  var comparable2 = toComparable(value2, true);
  var comparisonResult = strict ? comparable1 === comparable2 : comparable1 == comparable2;
  switch (true) {
    case comparisonResult:
    case depth >= maxDepth:
      return true;
    case (isObject(comparable1) && isObject(comparable2)):
      return compareObjects(comparable1, comparable2, depth, options2);
    case (Array.isArray(comparable1) && Array.isArray(comparable2)):
      return compareArrays(comparable1, comparable2, depth, options2);
    default:
      return false;
  }
};
var equalByValue = function(value1, value2) {
  var options2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : DEFAULT_EQUAL_BY_VALUE_OPTS;
  var compareOptions = _extends({}, DEFAULT_EQUAL_BY_VALUE_OPTS, options2);
  return compareByValue(value1, value2, 0, compareOptions);
};

// node_modules/devextreme/esm/core/utils/shadow_dom.js
var DX_RULE_PREFIX = "dx-";
var ownerDocumentStyleSheet = null;
function createConstructedStyleSheet(rootNode) {
  try {
    return new CSSStyleSheet();
  } catch (err) {
    var styleElement = rootNode.ownerDocument.createElement("style");
    rootNode.appendChild(styleElement);
    return styleElement.sheet;
  }
}
function processRules(targetStyleSheet, styleSheets, needApplyAllStyles) {
  for (var i = 0; i < styleSheets.length; i++) {
    var sheet = styleSheets[i];
    try {
      for (var j = 0; j < sheet.cssRules.length; j++) {
        insertRule(targetStyleSheet, sheet.cssRules[j], needApplyAllStyles);
      }
    } catch (err) {
    }
  }
}
function insertRule(targetStyleSheet, rule, needApplyAllStyles) {
  var _rule$selectorText, _rule$cssRules, _rule$cssRules$, _rule$cssRules$$selec, _rule$name, _rule$style;
  var isDxRule = needApplyAllStyles || (null === (_rule$selectorText = rule.selectorText) || void 0 === _rule$selectorText ? void 0 : _rule$selectorText.includes(DX_RULE_PREFIX)) || (null === (_rule$cssRules = rule.cssRules) || void 0 === _rule$cssRules ? void 0 : null === (_rule$cssRules$ = _rule$cssRules[0]) || void 0 === _rule$cssRules$ ? void 0 : null === (_rule$cssRules$$selec = _rule$cssRules$.selectorText) || void 0 === _rule$cssRules$$selec ? void 0 : _rule$cssRules$$selec.includes(DX_RULE_PREFIX)) || (null === (_rule$name = rule.name) || void 0 === _rule$name ? void 0 : _rule$name.startsWith(DX_RULE_PREFIX)) || "DXIcons" === (null === (_rule$style = rule.style) || void 0 === _rule$style ? void 0 : _rule$style.fontFamily);
  if (isDxRule) {
    targetStyleSheet.insertRule(rule.cssText, targetStyleSheet.cssRules.length);
  }
}
function addShadowDomStyles($element) {
  var _el$getRootNode;
  var el = $element.get(0);
  var root = null === (_el$getRootNode = el.getRootNode) || void 0 === _el$getRootNode ? void 0 : _el$getRootNode.call(el);
  if (!(null !== root && void 0 !== root && root.host)) {
    return;
  }
  if (!ownerDocumentStyleSheet) {
    ownerDocumentStyleSheet = createConstructedStyleSheet(root);
    processRules(ownerDocumentStyleSheet, el.ownerDocument.styleSheets, false);
  }
  var currentShadowDomStyleSheet = createConstructedStyleSheet(root);
  processRules(currentShadowDomStyleSheet, root.styleSheets, true);
  root.adoptedStyleSheets = [ownerDocumentStyleSheet, currentShadowDomStyleSheet];
}
function isPositionInElementRectangle(element, x, y) {
  var rect = element.getBoundingClientRect();
  return rect && x >= rect.left && x < rect.right && y >= rect.top && y < rect.bottom;
}
function createQueue() {
  var shiftIndex = 0;
  var items = [];
  return {
    push(item) {
      items.push(item);
      return this;
    },
    shift() {
      shiftIndex++;
      return items[shiftIndex - 1];
    },
    get length() {
      return items.length - shiftIndex;
    },
    get items() {
      return items;
    }
  };
}
function getShadowElementsFromPoint(x, y, root) {
  var elementQueue = createQueue().push(root);
  while (elementQueue.length) {
    var el = elementQueue.shift();
    for (var i = 0; i < el.childNodes.length; i++) {
      var childNode = el.childNodes[i];
      if (childNode.nodeType === Node.ELEMENT_NODE && isPositionInElementRectangle(childNode, x, y) && "none" !== getComputedStyle(childNode).pointerEvents) {
        elementQueue.push(childNode);
      }
    }
  }
  var result2 = elementQueue.items.reverse();
  result2.pop();
  return result2;
}

// node_modules/devextreme/esm/core/dom_adapter.js
var ELEMENT_NODE = 1;
var TEXT_NODE = 3;
var DOCUMENT_NODE = 9;
var DOCUMENT_FRAGMENT_NODE = 11;
var nativeDOMAdapterStrategy = {
  querySelectorAll: (element, selector) => element.querySelectorAll(selector),
  elementMatches(element, selector) {
    var matches = element.matches || element.matchesSelector || element.mozMatchesSelector || element.msMatchesSelector || element.oMatchesSelector || element.webkitMatchesSelector || ((selector2) => {
      var doc = element.document || element.ownerDocument;
      if (!doc) {
        return false;
      }
      var items = this.querySelectorAll(doc, selector2);
      for (var i = 0; i < items.length; i++) {
        if (items[i] === element) {
          return true;
        }
      }
    });
    return matches.call(element, selector);
  },
  createElement(tagName, context2) {
    context2 = context2 || this._document;
    return context2.createElement(tagName);
  },
  createElementNS(ns, tagName, context2) {
    context2 = context2 || this._document;
    return context2.createElementNS(ns, tagName);
  },
  createTextNode(text, context2) {
    context2 = context2 || this._document;
    return context2.createTextNode(text);
  },
  createAttribute(text, context2) {
    context2 = context2 || this._document;
    return context2.createAttribute(text);
  },
  isNode: (element) => element && "object" === typeof element && "nodeType" in element && "nodeName" in element,
  isElementNode: (element) => element && element.nodeType === ELEMENT_NODE,
  isTextNode: (element) => element && element.nodeType === TEXT_NODE,
  isDocument: (element) => element && element.nodeType === DOCUMENT_NODE,
  isDocumentFragment: (element) => element && element.nodeType === DOCUMENT_FRAGMENT_NODE,
  removeElement(element) {
    var parentNode = element && element.parentNode;
    if (parentNode) {
      parentNode.removeChild(element);
    }
  },
  insertElement(parentElement, newElement, nextSiblingElement) {
    if (parentElement && newElement && parentElement !== newElement) {
      if (nextSiblingElement) {
        parentElement.insertBefore(newElement, nextSiblingElement);
      } else {
        parentElement.appendChild(newElement);
      }
    }
  },
  getAttribute: (element, name2) => element.getAttribute(name2),
  setAttribute(element, name2, value2) {
    if ("style" === name2) {
      element.style.cssText = value2;
    } else {
      element.setAttribute(name2, value2);
    }
  },
  removeAttribute(element, name2) {
    element.removeAttribute(name2);
  },
  setProperty(element, name2, value2) {
    element[name2] = value2;
  },
  setText(element, text) {
    if (element) {
      element.textContent = text;
    }
  },
  setClass(element, className, isAdd) {
    if (1 === element.nodeType && className) {
      isAdd ? element.classList.add(className) : element.classList.remove(className);
    }
  },
  setStyle(element, name2, value2) {
    element.style[name2] = value2 || "";
  },
  _document: "undefined" === typeof document ? void 0 : document,
  getDocument() {
    return this._document;
  },
  getActiveElement(element) {
    var activeElementHolder = this.getRootNode(element);
    return activeElementHolder.activeElement;
  },
  getRootNode(element) {
    var _element$getRootNode, _element$getRootNode2;
    return null !== (_element$getRootNode = null === element || void 0 === element ? void 0 : null === (_element$getRootNode2 = element.getRootNode) || void 0 === _element$getRootNode2 ? void 0 : _element$getRootNode2.call(element)) && void 0 !== _element$getRootNode ? _element$getRootNode : this._document;
  },
  getBody() {
    return this._document.body;
  },
  createDocumentFragment() {
    return this._document.createDocumentFragment();
  },
  getDocumentElement() {
    return this._document.documentElement;
  },
  getLocation() {
    return this._document.location;
  },
  getSelection() {
    return this._document.selection;
  },
  getReadyState() {
    return this._document.readyState;
  },
  getHead() {
    return this._document.head;
  },
  hasDocumentProperty(property) {
    return property in this._document;
  },
  listen(element, event, callback, options2) {
    if (!element || !("addEventListener" in element)) {
      return noop2;
    }
    element.addEventListener(event, callback, options2);
    return () => {
      element.removeEventListener(event, callback);
    };
  },
  elementsFromPoint(x, y, element) {
    var activeElementHolder = this.getRootNode(element);
    if (activeElementHolder.host) {
      return getShadowElementsFromPoint(x, y, activeElementHolder);
    }
    return activeElementHolder.elementsFromPoint(x, y);
  }
};
var dom_adapter_default = dependency_injector_default(nativeDOMAdapterStrategy);

// node_modules/devextreme/esm/core/memorized_callbacks.js
var MemorizedCallbacks = class {
  constructor() {
    this.memory = [];
    this.callbacks = callbacks_default();
  }
  add(fn) {
    each(this.memory, (_, item) => fn.apply(fn, item));
    this.callbacks.add(fn);
  }
  remove(fn) {
    this.callbacks.remove(fn);
  }
  fire() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    this.memory.push(args);
    this.callbacks.fire.apply(this.callbacks, args);
  }
};

// node_modules/devextreme/esm/events/core/event_registrator_callbacks.js
var event_registrator_callbacks_default = new MemorizedCallbacks();

// node_modules/devextreme/esm/core/utils/window.js
var hasWindowValue = "undefined" !== typeof window;
var hasWindow = () => hasWindowValue;
var windowObject = hasWindow() ? window : void 0;
if (!windowObject) {
  windowObject = {};
  windowObject.window = windowObject;
}
var getWindow = () => windowObject;
var hasProperty = (prop) => hasWindow() && prop in windowObject;
var defaultScreenFactorFunc = (width) => {
  if (width < 768) {
    return "xs";
  } else if (width < 992) {
    return "sm";
  } else if (width < 1200) {
    return "md";
  } else {
    return "lg";
  }
};
var getCurrentScreenFactor = (screenFactorCallback) => {
  var screenFactorFunc = screenFactorCallback || defaultScreenFactorFunc;
  var windowWidth = dom_adapter_default.getDocumentElement().clientWidth;
  return screenFactorFunc(windowWidth);
};
var getNavigator = () => hasWindow() ? windowObject.navigator : {
  userAgent: ""
};

// node_modules/devextreme/esm/events/core/hook_touch_props.js
var touchPropsToHook = ["pageX", "pageY", "screenX", "screenY", "clientX", "clientY"];
var touchPropHook = function(name2, event) {
  if (event[name2] && !event.touches || !event.touches) {
    return event[name2];
  }
  var touches = event.touches.length ? event.touches : event.changedTouches;
  if (!touches.length) {
    return;
  }
  return touches[0][name2];
};
function hook_touch_props_default(callback) {
  touchPropsToHook.forEach(function(name2) {
    callback(name2, function(event) {
      return touchPropHook(name2, event);
    });
  }, this);
}

// node_modules/devextreme/esm/core/utils/call_once.js
var callOnce = function(handler) {
  var result2;
  var _wrappedHandler = function() {
    result2 = handler.apply(this, arguments);
    _wrappedHandler = function() {
      return result2;
    };
    return result2;
  };
  return function() {
    return _wrappedHandler.apply(this, arguments);
  };
};
var call_once_default = callOnce;

// node_modules/devextreme/esm/events/core/events_engine.js
var window2 = getWindow();
var EMPTY_EVENT_NAME = "dxEmptyEventType";
var NATIVE_EVENTS_TO_SUBSCRIBE = {
  mouseenter: "mouseover",
  mouseleave: "mouseout",
  pointerenter: "pointerover",
  pointerleave: "pointerout"
};
var NATIVE_EVENTS_TO_TRIGGER = {
  focusin: "focus",
  focusout: "blur"
};
var NO_BUBBLE_EVENTS = ["blur", "focus", "load"];
var forcePassiveFalseEventNames = ["touchmove", "wheel", "mousewheel", "touchstart"];
var EVENT_PROPERTIES = ["target", "relatedTarget", "delegateTarget", "altKey", "bubbles", "cancelable", "changedTouches", "ctrlKey", "detail", "eventPhase", "metaKey", "shiftKey", "view", "char", "code", "charCode", "key", "keyCode", "button", "buttons", "offsetX", "offsetY", "pointerId", "pointerType", "targetTouches", "toElement", "touches"];
function matchesSafe(target, selector) {
  return !isWindow(target) && "#document" !== target.nodeName && dom_adapter_default.elementMatches(target, selector);
}
var elementDataMap = /* @__PURE__ */ new WeakMap();
var guid = 0;
var skipEvent;
var special = function() {
  var specialData = {};
  event_registrator_callbacks_default.add(function(eventName, eventObject) {
    specialData[eventName] = eventObject;
  });
  return {
    getField: function(eventName, field) {
      return specialData[eventName] && specialData[eventName][field];
    },
    callMethod: function(eventName, methodName, context2, args) {
      return specialData[eventName] && specialData[eventName][methodName] && specialData[eventName][methodName].apply(context2, args);
    }
  };
}();
var eventsEngine = dependency_injector_default({
  on: getHandler(normalizeOnArguments(iterate(function(element, eventName, selector, data3, handler) {
    var handlersController = getHandlersController(element, eventName);
    handlersController.addHandler(handler, selector, data3);
  }))),
  one: getHandler(normalizeOnArguments(function(element, eventName, selector, data3, handler) {
    eventsEngine.on(element, eventName, selector, data3, function oneTimeHandler() {
      eventsEngine.off(element, eventName, selector, oneTimeHandler);
      handler.apply(this, arguments);
    });
  })),
  off: getHandler(normalizeOffArguments(iterate(function(element, eventName, selector, handler) {
    var handlersController = getHandlersController(element, eventName);
    handlersController.removeHandler(handler, selector);
  }))),
  trigger: getHandler(normalizeTriggerArguments(function(element, event, extraParameters) {
    var eventName = event.type;
    var handlersController = getHandlersController(element, event.type);
    special.callMethod(eventName, "trigger", element, [event, extraParameters]);
    handlersController.callHandlers(event, extraParameters);
    var noBubble = special.getField(eventName, "noBubble") || event.isPropagationStopped() || -1 !== NO_BUBBLE_EVENTS.indexOf(eventName);
    if (!noBubble) {
      var parents = [];
      !function getParents(element2) {
        var _element$parentNode;
        var parent = null !== (_element$parentNode = element2.parentNode) && void 0 !== _element$parentNode ? _element$parentNode : isObject(element2.host) ? element2.host : null;
        if (parent) {
          parents.push(parent);
          getParents(parent);
        }
      }(element);
      parents.push(window2);
      var i = 0;
      while (parents[i] && !event.isPropagationStopped()) {
        var parentDataByEvent = getHandlersController(parents[i], event.type);
        parentDataByEvent.callHandlers(extend(event, {
          currentTarget: parents[i]
        }), extraParameters);
        i++;
      }
    }
    if (element.nodeType || isWindow(element)) {
      special.callMethod(eventName, "_default", element, [event, extraParameters]);
      callNativeMethod(eventName, element);
    }
  })),
  triggerHandler: getHandler(normalizeTriggerArguments(function(element, event, extraParameters) {
    var handlersController = getHandlersController(element, event.type);
    handlersController.callHandlers(event, extraParameters);
  }))
});
function applyForEach(args, method) {
  var element = args[0];
  if (!element) {
    return;
  }
  if (dom_adapter_default.isNode(element) || isWindow(element)) {
    method.apply(eventsEngine, args);
  } else if (!isString(element) && "length" in element) {
    var itemArgs = Array.prototype.slice.call(args, 0);
    Array.prototype.forEach.call(element, function(itemElement) {
      itemArgs[0] = itemElement;
      applyForEach(itemArgs, method);
    });
  } else {
    throw errors_default.Error("E0025");
  }
}
function getHandler(method) {
  return function() {
    applyForEach(arguments, method);
  };
}
function detectPassiveEventHandlersSupport() {
  var isSupported = false;
  try {
    var options2 = Object.defineProperty({}, "passive", {
      get: function() {
        isSupported = true;
        return true;
      }
    });
    window2.addEventListener("test", null, options2);
  } catch (e) {
  }
  return isSupported;
}
var passiveEventHandlersSupported = call_once_default(detectPassiveEventHandlersSupport);
var contains = (container, element) => {
  if (isWindow(container)) {
    return contains(container.document, element);
  }
  return container.contains ? container.contains(element) : !!(element.compareDocumentPosition(container) & element.DOCUMENT_POSITION_CONTAINS);
};
function getHandlersController(element, eventName) {
  var elementData = elementDataMap.get(element);
  eventName = eventName || "";
  var eventNameParts = eventName.split(".");
  var namespaces2 = eventNameParts.slice(1);
  var eventNameIsDefined = !!eventNameParts[0];
  eventName = eventNameParts[0] || EMPTY_EVENT_NAME;
  if (!elementData) {
    elementData = {};
    elementDataMap.set(element, elementData);
  }
  if (!elementData[eventName]) {
    elementData[eventName] = {
      handleObjects: [],
      nativeHandler: null
    };
  }
  var eventData2 = elementData[eventName];
  return {
    addHandler: function(handler, selector, data3) {
      var callHandler = function(e, extraParameters) {
        var handlerArgs = [e];
        var target = e.currentTarget;
        var relatedTarget = e.relatedTarget;
        var secondaryTargetIsInside;
        var result2;
        if (eventName in NATIVE_EVENTS_TO_SUBSCRIBE) {
          secondaryTargetIsInside = relatedTarget && target && (relatedTarget === target || contains(target, relatedTarget));
        }
        if (void 0 !== extraParameters) {
          handlerArgs.push(extraParameters);
        }
        special.callMethod(eventName, "handle", element, [e, data3]);
        if (!secondaryTargetIsInside) {
          result2 = handler.apply(target, handlerArgs);
        }
        if (false === result2) {
          e.preventDefault();
          e.stopPropagation();
        }
      };
      var handleObject = {
        handler,
        wrappedHandler: function(e, extraParameters) {
          if (skipEvent && e.type === skipEvent) {
            return;
          }
          e.data = data3;
          e.delegateTarget = element;
          if (selector) {
            var currentTarget = e.target;
            while (currentTarget && currentTarget !== element) {
              if (matchesSafe(currentTarget, selector)) {
                e.currentTarget = currentTarget;
                callHandler(e, extraParameters);
              }
              currentTarget = currentTarget.parentNode;
            }
          } else {
            e.currentTarget = e.delegateTarget || e.target;
            callHandler(e, extraParameters);
          }
        },
        selector,
        type: eventName,
        data: data3,
        namespace: namespaces2.join("."),
        namespaces: namespaces2,
        guid: ++guid
      };
      eventData2.handleObjects.push(handleObject);
      var firstHandlerForTheType = 1 === eventData2.handleObjects.length;
      var shouldAddNativeListener = firstHandlerForTheType && eventNameIsDefined;
      var nativeListenerOptions;
      if (shouldAddNativeListener) {
        shouldAddNativeListener = !special.callMethod(eventName, "setup", element, [data3, namespaces2, handler]);
      }
      if (shouldAddNativeListener) {
        eventData2.nativeHandler = getNativeHandler(eventName);
        if (passiveEventHandlersSupported() && forcePassiveFalseEventNames.indexOf(eventName) > -1) {
          nativeListenerOptions = {
            passive: false
          };
        }
        eventData2.removeListener = dom_adapter_default.listen(element, NATIVE_EVENTS_TO_SUBSCRIBE[eventName] || eventName, eventData2.nativeHandler, nativeListenerOptions);
      }
      special.callMethod(eventName, "add", element, [handleObject]);
    },
    removeHandler: function(handler, selector) {
      var removeByEventName = function(eventName2) {
        var eventData3 = elementData[eventName2];
        if (!eventData3.handleObjects.length) {
          delete elementData[eventName2];
          return;
        }
        var removedHandler;
        eventData3.handleObjects = eventData3.handleObjects.filter(function(handleObject) {
          var skip = namespaces2.length && !isSubset(handleObject.namespaces, namespaces2) || handler && handleObject.handler !== handler || selector && handleObject.selector !== selector;
          if (!skip) {
            removedHandler = handleObject.handler;
            special.callMethod(eventName2, "remove", element, [handleObject]);
          }
          return skip;
        });
        var lastHandlerForTheType = !eventData3.handleObjects.length;
        var shouldRemoveNativeListener = lastHandlerForTheType && eventName2 !== EMPTY_EVENT_NAME;
        if (shouldRemoveNativeListener) {
          special.callMethod(eventName2, "teardown", element, [namespaces2, removedHandler]);
          if (eventData3.nativeHandler) {
            eventData3.removeListener();
          }
          delete elementData[eventName2];
        }
      };
      if (eventNameIsDefined) {
        removeByEventName(eventName);
      } else {
        for (var name2 in elementData) {
          removeByEventName(name2);
        }
      }
      var elementDataIsEmpty = 0 === Object.keys(elementData).length;
      if (elementDataIsEmpty) {
        elementDataMap.delete(element);
      }
    },
    callHandlers: function(event, extraParameters) {
      var forceStop = false;
      var handleCallback = function(handleObject) {
        if (forceStop) {
          return;
        }
        if (!namespaces2.length || isSubset(handleObject.namespaces, namespaces2)) {
          handleObject.wrappedHandler(event, extraParameters);
          forceStop = event.isImmediatePropagationStopped();
        }
      };
      eventData2.handleObjects.forEach(handleCallback);
      if (namespaces2.length && elementData[EMPTY_EVENT_NAME]) {
        elementData[EMPTY_EVENT_NAME].handleObjects.forEach(handleCallback);
      }
    }
  };
}
function getNativeHandler(subscribeName) {
  return function(event, extraParameters) {
    var handlersController = getHandlersController(this, subscribeName);
    event = eventsEngine.Event(event);
    handlersController.callHandlers(event, extraParameters);
  };
}
function isSubset(original, checked) {
  for (var i = 0; i < checked.length; i++) {
    if (original.indexOf(checked[i]) < 0) {
      return false;
    }
  }
  return true;
}
function normalizeOnArguments(callback) {
  return function(element, eventName, selector, data3, handler) {
    if (!handler) {
      handler = data3;
      data3 = void 0;
    }
    if ("string" !== typeof selector) {
      data3 = selector;
      selector = void 0;
    }
    if (!handler && "string" === typeof eventName) {
      handler = data3 || selector;
      selector = void 0;
      data3 = void 0;
    }
    callback(element, eventName, selector, data3, handler);
  };
}
function normalizeOffArguments(callback) {
  return function(element, eventName, selector, handler) {
    if ("function" === typeof selector) {
      handler = selector;
      selector = void 0;
    }
    callback(element, eventName, selector, handler);
  };
}
function normalizeTriggerArguments(callback) {
  return function(element, src, extraParameters) {
    if ("string" === typeof src) {
      src = {
        type: src
      };
    }
    if (!src.target) {
      src.target = element;
    }
    src.currentTarget = element;
    if (!src.delegateTarget) {
      src.delegateTarget = element;
    }
    if (!src.type && src.originalEvent) {
      src.type = src.originalEvent.type;
    }
    callback(element, src instanceof eventsEngine.Event ? src : eventsEngine.Event(src), extraParameters);
  };
}
function normalizeEventArguments(callback) {
  eventsEngine.Event = function(src, config3) {
    if (!(this instanceof eventsEngine.Event)) {
      return new eventsEngine.Event(src, config3);
    }
    if (!src) {
      src = {};
    }
    if ("string" === typeof src) {
      src = {
        type: src
      };
    }
    if (!config3) {
      config3 = {};
    }
    callback.call(this, src, config3);
  };
  _extends(eventsEngine.Event.prototype, {
    _propagationStopped: false,
    _immediatePropagationStopped: false,
    _defaultPrevented: false,
    isPropagationStopped: function() {
      return !!(this._propagationStopped || this.originalEvent && this.originalEvent.propagationStopped);
    },
    stopPropagation: function() {
      this._propagationStopped = true;
      this.originalEvent && this.originalEvent.stopPropagation();
    },
    isImmediatePropagationStopped: function() {
      return this._immediatePropagationStopped;
    },
    stopImmediatePropagation: function() {
      this.stopPropagation();
      this._immediatePropagationStopped = true;
      this.originalEvent && this.originalEvent.stopImmediatePropagation();
    },
    isDefaultPrevented: function() {
      return !!(this._defaultPrevented || this.originalEvent && this.originalEvent.defaultPrevented);
    },
    preventDefault: function() {
      this._defaultPrevented = true;
      this.originalEvent && this.originalEvent.preventDefault();
    }
  });
  return eventsEngine.Event;
}
function iterate(callback) {
  var iterateEventNames = function(element, eventName) {
    if (eventName && eventName.indexOf(" ") > -1) {
      var args = Array.prototype.slice.call(arguments, 0);
      eventName.split(" ").forEach(function(eventName2) {
        args[1] = eventName2;
        callback.apply(this, args);
      });
    } else {
      callback.apply(this, arguments);
    }
  };
  return function(element, eventName) {
    if ("object" === typeof eventName) {
      var args = Array.prototype.slice.call(arguments, 0);
      for (var name2 in eventName) {
        args[1] = name2;
        args[args.length - 1] = eventName[name2];
        iterateEventNames.apply(this, args);
      }
    } else {
      iterateEventNames.apply(this, arguments);
    }
  };
}
function callNativeMethod(eventName, element) {
  var nativeMethodName = NATIVE_EVENTS_TO_TRIGGER[eventName] || eventName;
  if (function(eventName2, element2) {
    return "click" === eventName2 && "a" === element2.localName;
  }(eventName, element)) {
    return;
  }
  if (isFunction(element[nativeMethodName])) {
    skipEvent = eventName;
    element[nativeMethodName]();
    skipEvent = void 0;
  }
}
function calculateWhich(event) {
  if (function(event2) {
    return null == event2.which && 0 === event2.type.indexOf("key");
  }(event)) {
    return null != event.charCode ? event.charCode : event.keyCode;
  }
  if (function(event2) {
    return !event2.which && void 0 !== event2.button && /^(?:mouse|pointer|contextmenu|drag|drop)|click/.test(event2.type);
  }(event)) {
    return {
      1: 1,
      2: 3,
      3: 1,
      4: 2
    }[event.button];
  }
  return event.which;
}
function initEvent(EventClass) {
  if (EventClass) {
    eventsEngine.Event = EventClass;
    eventsEngine.Event.prototype = EventClass.prototype;
  }
}
initEvent(normalizeEventArguments(function(src, config3) {
  var _src$view;
  var srcIsEvent = src instanceof eventsEngine.Event || hasWindow() && src instanceof window2.Event || (null === (_src$view = src.view) || void 0 === _src$view ? void 0 : _src$view.Event) && src instanceof src.view.Event;
  if (srcIsEvent) {
    this.originalEvent = src;
    this.type = src.type;
    this.currentTarget = void 0;
    if (Object.prototype.hasOwnProperty.call(src, "isTrusted")) {
      this.isTrusted = src.isTrusted;
    }
    this.timeStamp = src.timeStamp || Date.now();
  } else {
    _extends(this, src);
  }
  addProperty("which", calculateWhich, this);
  if (0 === src.type.indexOf("touch")) {
    delete config3.pageX;
    delete config3.pageY;
  }
  _extends(this, config3);
  this.guid = ++guid;
}));
function addProperty(propName, hook, eventInstance) {
  Object.defineProperty(eventInstance || eventsEngine.Event.prototype, propName, {
    enumerable: true,
    configurable: true,
    get: function() {
      return this.originalEvent && hook(this.originalEvent);
    },
    set: function(value2) {
      Object.defineProperty(this, propName, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: value2
      });
    }
  });
}
EVENT_PROPERTIES.forEach((prop) => addProperty(prop, (event) => event[prop]));
hook_touch_props_default(addProperty);
var beforeSetStrategy = callbacks_default();
var afterSetStrategy = callbacks_default();
eventsEngine.set = function(engine) {
  beforeSetStrategy.fire();
  eventsEngine.inject(engine);
  initEvent(engine.Event);
  afterSetStrategy.fire();
};
eventsEngine.subscribeGlobal = function() {
  applyForEach(arguments, normalizeOnArguments(function() {
    var args = arguments;
    eventsEngine.on.apply(this, args);
    beforeSetStrategy.add(function() {
      var offArgs = Array.prototype.slice.call(args, 0);
      offArgs.splice(3, 1);
      eventsEngine.off.apply(this, offArgs);
    });
    afterSetStrategy.add(function() {
      eventsEngine.on.apply(this, args);
    });
  }));
};
eventsEngine.forcePassiveFalseEventNames = forcePassiveFalseEventNames;
eventsEngine.passiveEventHandlersSupported = passiveEventHandlersSupported;
var events_engine_default = eventsEngine;

// node_modules/devextreme/esm/core/element_data.js
var dataMap = /* @__PURE__ */ new WeakMap();
var strategy;
var strategyChanging = new MemorizedCallbacks();
var beforeCleanDataFunc = function() {
};
var afterCleanDataFunc = function() {
};
var setDataStrategy = function(value2) {
  strategyChanging.fire(value2);
  strategy = value2;
  var cleanData = strategy.cleanData;
  strategy.cleanData = function(nodes) {
    beforeCleanDataFunc(nodes);
    var result2 = cleanData.call(this, nodes);
    afterCleanDataFunc(nodes);
    return result2;
  };
};
setDataStrategy({
  data: function() {
    var element = arguments[0];
    var key = arguments[1];
    var value2 = arguments[2];
    if (!element) {
      return;
    }
    var elementData = dataMap.get(element);
    if (!elementData) {
      elementData = {};
      dataMap.set(element, elementData);
    }
    if (void 0 === key) {
      return elementData;
    }
    if (2 === arguments.length) {
      return elementData[key];
    }
    elementData[key] = value2;
    return value2;
  },
  removeData: function(element, key) {
    if (!element) {
      return;
    }
    if (void 0 === key) {
      dataMap.delete(element);
    } else {
      var elementData = dataMap.get(element);
      if (elementData) {
        delete elementData[key];
      }
    }
  },
  cleanData: function(elements) {
    for (var i = 0; i < elements.length; i++) {
      events_engine_default.off(elements[i]);
      dataMap.delete(elements[i]);
    }
  }
});
function data() {
  return strategy.data.apply(this, arguments);
}
function beforeCleanData(callback) {
  beforeCleanDataFunc = callback;
}
function removeData(element, key) {
  return strategy.removeData.call(this, element, key);
}
function cleanDataRecursive(element, cleanSelf) {
  if (!dom_adapter_default.isElementNode(element)) {
    return;
  }
  var childElements = element.getElementsByTagName("*");
  strategy.cleanData(childElements);
  if (cleanSelf) {
    strategy.cleanData([element]);
  }
}

// node_modules/devextreme/esm/core/utils/inflector.js
var _normalize = function(text) {
  if (void 0 === text || null === text) {
    return "";
  }
  return String(text);
};
var _upperCaseFirst = function(text) {
  return _normalize(text).charAt(0).toUpperCase() + text.substr(1);
};
var _chop = function(text) {
  return _normalize(text).replace(/([a-z\d])([A-Z])/g, "$1 $2").split(/[\s_-]+/);
};
var dasherize = function(text) {
  return map(_chop(text), function(p2) {
    return p2.toLowerCase();
  }).join("-");
};
var camelize = function(text, upperFirst) {
  return map(_chop(text), function(p2, i) {
    p2 = p2.toLowerCase();
    if (upperFirst || i > 0) {
      p2 = _upperCaseFirst(p2);
    }
    return p2;
  }).join("");
};
var humanize = function(text) {
  return _upperCaseFirst(dasherize(text).replace(/-/g, " "));
};
var titleize = function(text) {
  return map(_chop(text), function(p2) {
    return _upperCaseFirst(p2.toLowerCase());
  }).join(" ");
};
var DIGIT_CHARS = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
var captionize = function(name2) {
  var captionList = [];
  var i;
  var char;
  var isPrevCharNewWord = false;
  var isNewWord = false;
  for (i = 0; i < name2.length; i++) {
    char = name2.charAt(i);
    isNewWord = char === char.toUpperCase() && "-" !== char && ")" !== char && "/" !== char || char in DIGIT_CHARS;
    if ("_" === char || "." === char) {
      char = " ";
      isNewWord = true;
    } else if (0 === i) {
      char = char.toUpperCase();
      isNewWord = true;
    } else if (!isPrevCharNewWord && isNewWord) {
      if (captionList.length > 0) {
        captionList.push(" ");
      }
    }
    captionList.push(char);
    isPrevCharNewWord = isNewWord;
  }
  return captionList.join("");
};

// node_modules/devextreme/esm/core/utils/style.js
var jsPrefixes = ["", "Webkit", "Moz", "O", "Ms"];
var cssPrefixes = {
  "": "",
  Webkit: "-webkit-",
  Moz: "-moz-",
  O: "-o-",
  ms: "-ms-"
};
var getStyles = call_once_default(function() {
  return dom_adapter_default.createElement("dx").style;
});
var forEachPrefixes = function(prop, callBack) {
  prop = camelize(prop, true);
  var result2;
  for (var i = 0, cssPrefixesCount = jsPrefixes.length; i < cssPrefixesCount; i++) {
    var jsPrefix = jsPrefixes[i];
    var prefixedProp = jsPrefix + prop;
    var lowerPrefixedProp = camelize(prefixedProp);
    result2 = callBack(lowerPrefixedProp, jsPrefix);
    if (void 0 === result2) {
      result2 = callBack(prefixedProp, jsPrefix);
    }
    if (void 0 !== result2) {
      break;
    }
  }
  return result2 || "";
};
var styleProp = function(name2) {
  if (name2 in getStyles()) {
    return name2;
  }
  var originalName = name2;
  name2 = name2.charAt(0).toUpperCase() + name2.substr(1);
  for (var i = 1; i < jsPrefixes.length; i++) {
    var prefixedProp = jsPrefixes[i].toLowerCase() + name2;
    if (prefixedProp in getStyles()) {
      return prefixedProp;
    }
  }
  return originalName;
};
var stylePropPrefix = function(prop) {
  return forEachPrefixes(prop, function(specific, jsPrefix) {
    if (specific in getStyles()) {
      return cssPrefixes[jsPrefix];
    }
  });
};
var pxExceptions = ["fillOpacity", "columnCount", "flexGrow", "flexShrink", "fontWeight", "lineHeight", "opacity", "zIndex", "zoom"];
var normalizeStyleProp = function(prop, value2) {
  if (isNumeric(value2) && -1 === pxExceptions.indexOf(prop)) {
    value2 += "px";
  }
  return value2;
};
var setDimensionProperty = function(elements, propertyName, value2) {
  if (elements) {
    value2 = isNumeric(value2) ? value2 += "px" : value2;
    for (var i = 0; i < elements.length; ++i) {
      elements[i].style[propertyName] = value2;
    }
  }
};
var setWidth = function(elements, value2) {
  setDimensionProperty(elements, "width", value2);
};
var setHeight = function(elements, value2) {
  setDimensionProperty(elements, "height", value2);
};
var setStyle = function(element, styleString) {
  var resetStyle = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : true;
  if (resetStyle) {
    var styleList = [].slice.call(element.style);
    styleList.forEach((propertyName) => {
      element.style.removeProperty(propertyName);
    });
  }
  styleString.split(";").forEach((style) => {
    var parts = style.split(":").map((stylePart) => stylePart.trim());
    if (2 === parts.length) {
      var [property, value2] = parts;
      element.style[property] = value2;
    }
  });
};

// node_modules/devextreme/esm/core/utils/size.js
var window3 = getWindow();
var SPECIAL_HEIGHT_VALUES = ["auto", "none", "inherit", "initial"];
var getSizeByStyles = function(elementStyles, styles) {
  var result2 = 0;
  styles.forEach(function(style) {
    result2 += parseFloat(elementStyles[style]) || 0;
  });
  return result2;
};
var getElementBoxParams = function(name2, elementStyles) {
  var beforeName = "width" === name2 ? "Left" : "Top";
  var afterName = "width" === name2 ? "Right" : "Bottom";
  return {
    padding: getSizeByStyles(elementStyles, ["padding" + beforeName, "padding" + afterName]),
    border: getSizeByStyles(elementStyles, ["border" + beforeName + "Width", "border" + afterName + "Width"]),
    margin: getSizeByStyles(elementStyles, ["margin" + beforeName, "margin" + afterName])
  };
};
var getElementComputedStyle = function(element) {
  var _element$ownerDocumen;
  var view = (null === element || void 0 === element ? void 0 : null === (_element$ownerDocumen = element.ownerDocument) || void 0 === _element$ownerDocumen ? void 0 : _element$ownerDocumen.defaultView) || window3;
  return view.getComputedStyle && view.getComputedStyle(element);
};
var getCSSProperty = function(element, styles, name2, defaultValue) {
  var _element$style;
  return (null === styles || void 0 === styles ? void 0 : styles[name2]) || (null === (_element$style = element.style) || void 0 === _element$style ? void 0 : _element$style[name2]) || defaultValue;
};
var boxIndices = {
  content: 0,
  padding: 1,
  border: 2,
  margin: 3,
  "content-box": 0,
  "border-box": 2
};
var dimensionComponents = {
  width: ["left", "right"],
  height: ["top", "bottom"]
};
function getComponentThickness(elem, dimension, component, styles) {
  var get = (elem2, styles2, field) => parseFloat(getCSSProperty(elem2, styles2, field, "0")) || 0;
  var suffix = "border" === component ? "-width" : "";
  return get(elem, styles, "".concat(component, "-").concat(dimensionComponents[dimension][0]).concat(suffix)) + get(elem, styles, "".concat(component, "-").concat(dimensionComponents[dimension][1]).concat(suffix));
}
var getSize = function(element, dimension, box) {
  var offsetFieldName = "width" === dimension ? "offsetWidth" : "offsetHeight";
  var styles = getElementComputedStyle(element);
  var result2 = getCSSProperty(element, styles, dimension);
  if ("" === result2 || "auto" === result2) {
    result2 = element[offsetFieldName];
  }
  result2 = parseFloat(result2) || 0;
  var currentBox = getCSSProperty(element, styles, "boxSizing", "content-box");
  var targetBox = box || currentBox;
  var targetBoxIndex = boxIndices[targetBox];
  var currentBoxIndex = boxIndices[currentBox];
  if (void 0 === targetBoxIndex || void 0 === currentBoxIndex) {
    throw new Error();
  }
  if (currentBoxIndex === targetBoxIndex) {
    return result2;
  }
  var coeff = Math.sign(targetBoxIndex - currentBoxIndex);
  var padding = false;
  var border = false;
  var margin = false;
  var scrollThickness = false;
  if (1 === coeff) {
    targetBoxIndex += 1;
    currentBoxIndex += 1;
  }
  for (var boxPart = currentBoxIndex; boxPart !== targetBoxIndex; boxPart += coeff) {
    switch (boxPart) {
      case boxIndices.content:
        break;
      case boxIndices.padding:
        padding = coeff * getComponentThickness(element, dimension, "padding", styles);
        break;
      case boxIndices.border:
        border = coeff * getComponentThickness(element, dimension, "border", styles);
        break;
      case boxIndices.margin:
        margin = coeff * getComponentThickness(element, dimension, "margin", styles);
    }
  }
  if (padding || border) {
    var paddingAndBorder = (false === padding ? coeff * getComponentThickness(element, dimension, "padding", styles) : padding) + (false === border ? coeff * getComponentThickness(element, dimension, "border", styles) : border);
    scrollThickness = coeff * Math.max(0, Math.floor(element[offsetFieldName] - result2 - coeff * paddingAndBorder)) || 0;
  }
  return result2 + margin + padding + border + scrollThickness;
};
var getContainerHeight = function(container) {
  return isWindow(container) ? container.innerHeight : container.offsetHeight;
};
var parseHeight = function(value2, container, element) {
  if (value2.indexOf("px") > 0) {
    value2 = parseInt(value2.replace("px", ""));
  } else if (value2.indexOf("%") > 0) {
    value2 = parseInt(value2.replace("%", "")) * getContainerHeight(container) / 100;
  } else if (!isNaN(value2)) {
    value2 = parseInt(value2);
  } else if (value2.indexOf("vh") > 0) {
    value2 = window3.innerHeight / 100 * parseInt(value2.replace("vh", ""));
  } else if (element && value2.indexOf("em") > 0) {
    value2 = parseFloat(value2.replace("em", "")) * parseFloat(window3.getComputedStyle(element).fontSize);
  }
  return value2;
};
var getHeightWithOffset = function(value2, offset2, container) {
  if (!value2) {
    return null;
  }
  if (SPECIAL_HEIGHT_VALUES.indexOf(value2) > -1) {
    return offset2 ? null : value2;
  }
  if (isString(value2)) {
    value2 = parseHeight(value2, container);
  }
  if (isNumeric(value2)) {
    return Math.max(0, value2 + offset2);
  }
  var operationString = offset2 < 0 ? " - " : " ";
  return "calc(" + value2 + operationString + Math.abs(offset2) + "px)";
};
var addOffsetToMaxHeight = function(value2, offset2, container) {
  var maxHeight = getHeightWithOffset(value2, offset2, container);
  return null !== maxHeight ? maxHeight : "none";
};
var addOffsetToMinHeight = function(value2, offset2, container) {
  var minHeight = getHeightWithOffset(value2, offset2, container);
  return null !== minHeight ? minHeight : 0;
};
var getVerticalOffsets = function(element, withMargins) {
  if (!element) {
    return 0;
  }
  var boxParams = getElementBoxParams("height", window3.getComputedStyle(element));
  return boxParams.padding + boxParams.border + (withMargins ? boxParams.margin : 0);
};
var getVisibleHeight = function(element) {
  if (element) {
    var boundingClientRect = element.getBoundingClientRect();
    if (boundingClientRect.height) {
      return boundingClientRect.height;
    }
  }
  return 0;
};
var implementationsMap = {
  getWidth: function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return elementSizeHelper("width", ...args);
  },
  setWidth: function() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return elementSizeHelper("width", ...args);
  },
  getHeight: function() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    return elementSizeHelper("height", ...args);
  },
  setHeight: function() {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    return elementSizeHelper("height", ...args);
  },
  getOuterWidth: function() {
    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      args[_key5] = arguments[_key5];
    }
    return elementSizeHelper("outerWidth", ...args);
  },
  setOuterWidth: function() {
    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
      args[_key6] = arguments[_key6];
    }
    return elementSizeHelper("outerWidth", ...args);
  },
  getOuterHeight: function() {
    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
      args[_key7] = arguments[_key7];
    }
    return elementSizeHelper("outerHeight", ...args);
  },
  setOuterHeight: function() {
    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
      args[_key8] = arguments[_key8];
    }
    return elementSizeHelper("outerHeight", ...args);
  },
  getInnerWidth: function() {
    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
      args[_key9] = arguments[_key9];
    }
    return elementSizeHelper("innerWidth", ...args);
  },
  setInnerWidth: function() {
    for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
      args[_key10] = arguments[_key10];
    }
    return elementSizeHelper("innerWidth", ...args);
  },
  getInnerHeight: function() {
    for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
      args[_key11] = arguments[_key11];
    }
    return elementSizeHelper("innerHeight", ...args);
  },
  setInnerHeight: function() {
    for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
      args[_key12] = arguments[_key12];
    }
    return elementSizeHelper("innerHeight", ...args);
  }
};
function elementSizeHelper(sizeProperty, el, value2) {
  return 2 === arguments.length ? elementSize(el, sizeProperty) : elementSize(el, sizeProperty, value2);
}
var getWidth = (el) => implementationsMap.getWidth(el);
var setWidth2 = (el, value2) => implementationsMap.setWidth(el, value2);
var getHeight = (el) => implementationsMap.getHeight(el);
var setHeight2 = (el, value2) => implementationsMap.setHeight(el, value2);
var getOuterWidth = (el, includeMargin) => implementationsMap.getOuterWidth(el, includeMargin || false);
var setOuterWidth = (el, value2) => implementationsMap.setOuterWidth(el, value2);
var getOuterHeight = (el, includeMargin) => implementationsMap.getOuterHeight(el, includeMargin || false);
var setOuterHeight = (el, value2) => implementationsMap.setOuterHeight(el, value2);
var getInnerWidth = (el) => implementationsMap.getInnerWidth(el);
var getInnerHeight = (el) => implementationsMap.getInnerHeight(el);
var elementSize = function elementSize2(el, sizeProperty, value2) {
  var partialName = sizeProperty.toLowerCase().indexOf("width") >= 0 ? "Width" : "Height";
  var propName = partialName.toLowerCase();
  var isOuter = 0 === sizeProperty.indexOf("outer");
  var isInner = 0 === sizeProperty.indexOf("inner");
  var isGetter = 2 === arguments.length || "boolean" === typeof value2;
  if (isRenderer(el)) {
    if (el.length > 1 && !isGetter) {
      for (var i = 0; i < el.length; i++) {
        elementSize2(el[i], sizeProperty, value2);
      }
      return;
    }
    el = el[0];
  }
  if (!el) {
    return;
  }
  if (isWindow(el)) {
    return isOuter ? el["inner" + partialName] : dom_adapter_default.getDocumentElement()["client" + partialName];
  }
  if (dom_adapter_default.isDocument(el)) {
    var documentElement = dom_adapter_default.getDocumentElement();
    var body = dom_adapter_default.getBody();
    return Math.max(body["scroll" + partialName], body["offset" + partialName], documentElement["scroll" + partialName], documentElement["offset" + partialName], documentElement["client" + partialName]);
  }
  if (isGetter) {
    var box = "content";
    if (isOuter) {
      box = value2 ? "margin" : "border";
    }
    if (isInner) {
      box = "padding";
    }
    return getSize(el, propName, box);
  }
  if (isNumeric(value2)) {
    var elementStyles = getElementComputedStyle(el);
    var sizeAdjustment = getElementBoxParams(propName, elementStyles);
    var isBorderBox = "border-box" === elementStyles.boxSizing;
    value2 = Number(value2);
    if (isOuter) {
      value2 -= isBorderBox ? 0 : sizeAdjustment.border + sizeAdjustment.padding;
    } else if (isInner) {
      value2 += isBorderBox ? sizeAdjustment.border : -sizeAdjustment.padding;
    } else if (isBorderBox) {
      value2 += sizeAdjustment.border + sizeAdjustment.padding;
    }
  }
  value2 += isNumeric(value2) ? "px" : "";
  dom_adapter_default.setStyle(el, propName, value2);
  return null;
};
var getWindowByElement = (el) => isWindow(el) ? el : el.defaultView;
var getOffset = (el) => {
  if (!el.getClientRects().length) {
    return {
      top: 0,
      left: 0
    };
  }
  var rect = el.getBoundingClientRect();
  var win = getWindowByElement(el.ownerDocument);
  var docElem = el.ownerDocument.documentElement;
  return {
    top: rect.top + win.pageYOffset - docElem.clientTop,
    left: rect.left + win.pageXOffset - docElem.clientLeft
  };
};

// node_modules/devextreme/esm/core/utils/html_parser.js
var isTagName = /<([a-z][^/\0>\x20\t\r\n\f]+)/i;
var tagWrappers = {
  default: {
    tagsCount: 0,
    startTags: "",
    endTags: ""
  },
  thead: {
    tagsCount: 1,
    startTags: "<table>",
    endTags: "</table>"
  },
  td: {
    tagsCount: 3,
    startTags: "<table><tbody><tr>",
    endTags: "</tr></tbody></table>"
  },
  col: {
    tagsCount: 2,
    startTags: "<table><colgroup>",
    endTags: "</colgroup></table>"
  },
  tr: {
    tagsCount: 2,
    startTags: "<table><tbody>",
    endTags: "</tbody></table>"
  }
};
tagWrappers.tbody = tagWrappers.colgroup = tagWrappers.caption = tagWrappers.tfoot = tagWrappers.thead;
tagWrappers.th = tagWrappers.td;
var parseHTML = function(html) {
  if ("string" !== typeof html) {
    return null;
  }
  var fragment = dom_adapter_default.createDocumentFragment();
  var container = fragment.appendChild(dom_adapter_default.createElement("div"));
  var tags = isTagName.exec(html);
  var firstRootTag = tags && tags[1].toLowerCase();
  var tagWrapper = tagWrappers[firstRootTag] || tagWrappers.default;
  container.innerHTML = tagWrapper.startTags + html + tagWrapper.endTags;
  for (var i = 0; i < tagWrapper.tagsCount; i++) {
    container = container.lastChild;
  }
  return [...container.childNodes];
};
var isTablePart = function(html) {
  var tags = isTagName.exec(html);
  return tags && tags[1] in tagWrappers;
};

// node_modules/devextreme/esm/core/renderer_base.js
var window4 = getWindow();
var renderer;
var initRender = function(selector, context2) {
  if (!selector) {
    this.length = 0;
    return this;
  }
  if ("string" === typeof selector) {
    if ("body" === selector) {
      this[0] = context2 ? context2.body : dom_adapter_default.getBody();
      this.length = 1;
      return this;
    }
    context2 = context2 || dom_adapter_default.getDocument();
    if ("<" === selector[0]) {
      this[0] = dom_adapter_default.createElement(selector.slice(1, -1), context2);
      this.length = 1;
      return this;
    }
    [].push.apply(this, dom_adapter_default.querySelectorAll(context2, selector));
    return this;
  } else if (dom_adapter_default.isNode(selector) || isWindow(selector)) {
    this[0] = selector;
    this.length = 1;
    return this;
  } else if (Array.isArray(selector)) {
    [].push.apply(this, selector);
    return this;
  }
  return renderer(selector.toArray ? selector.toArray() : [selector]);
};
renderer = function(selector, context2) {
  return new initRender(selector, context2);
};
renderer.fn = {
  dxRenderer: true
};
initRender.prototype = renderer.fn;
var repeatMethod = function(methodName, args) {
  for (var i = 0; i < this.length; i++) {
    var item = renderer(this[i]);
    item[methodName].apply(item, args);
  }
  return this;
};
var setAttributeValue = function(element, attrName, value2) {
  if (void 0 !== value2 && null !== value2 && false !== value2) {
    dom_adapter_default.setAttribute(element, attrName, value2);
  } else {
    dom_adapter_default.removeAttribute(element, attrName);
  }
};
initRender.prototype.show = function() {
  return this.toggle(true);
};
initRender.prototype.hide = function() {
  return this.toggle(false);
};
initRender.prototype.toggle = function(value2) {
  if (this[0]) {
    this.toggleClass("dx-state-invisible", !value2);
  }
  return this;
};
initRender.prototype.attr = function(attrName, value2) {
  if (this.length > 1 && arguments.length > 1) {
    return repeatMethod.call(this, "attr", arguments);
  }
  if (!this[0]) {
    if (isObject(attrName) || void 0 !== value2) {
      return this;
    } else {
      return;
    }
  }
  if (!this[0].getAttribute) {
    return this.prop(attrName, value2);
  }
  if ("string" === typeof attrName && 1 === arguments.length) {
    var result2 = this[0].getAttribute(attrName);
    return null == result2 ? void 0 : result2;
  } else if (isPlainObject(attrName)) {
    for (var key in attrName) {
      this.attr(key, attrName[key]);
    }
  } else {
    setAttributeValue(this[0], attrName, value2);
  }
  return this;
};
initRender.prototype.removeAttr = function(attrName) {
  this[0] && dom_adapter_default.removeAttribute(this[0], attrName);
  return this;
};
initRender.prototype.prop = function(propName, value2) {
  if (!this[0]) {
    return this;
  }
  if ("string" === typeof propName && 1 === arguments.length) {
    return this[0][propName];
  } else if (isPlainObject(propName)) {
    for (var key in propName) {
      this.prop(key, propName[key]);
    }
  } else {
    dom_adapter_default.setProperty(this[0], propName, value2);
  }
  return this;
};
initRender.prototype.addClass = function(className) {
  return this.toggleClass(className, true);
};
initRender.prototype.removeClass = function(className) {
  return this.toggleClass(className, false);
};
initRender.prototype.hasClass = function(className) {
  if (!this[0] || void 0 === this[0].className) {
    return false;
  }
  var classNames2 = className.split(" ");
  for (var i = 0; i < classNames2.length; i++) {
    if (this[0].classList) {
      if (this[0].classList.contains(classNames2[i])) {
        return true;
      }
    } else {
      var _className = isString(this[0].className) ? this[0].className : dom_adapter_default.getAttribute(this[0], "class");
      if ((_className || "").split(" ").indexOf(classNames2[i]) >= 0) {
        return true;
      }
    }
  }
  return false;
};
initRender.prototype.toggleClass = function(className, value2) {
  if (this.length > 1) {
    return repeatMethod.call(this, "toggleClass", arguments);
  }
  if (!this[0] || !className) {
    return this;
  }
  value2 = void 0 === value2 ? !this.hasClass(className) : value2;
  var classNames2 = className.split(" ");
  for (var i = 0; i < classNames2.length; i++) {
    dom_adapter_default.setClass(this[0], classNames2[i], value2);
  }
  return this;
};
initRender.prototype.html = function(value2) {
  if (!arguments.length) {
    return this[0].innerHTML;
  }
  this.empty();
  if ("string" === typeof value2 && !isTablePart(value2) || "number" === typeof value2) {
    this[0].innerHTML = value2;
    return this;
  }
  return this.append(parseHTML(value2));
};
var appendElements = function(element, nextSibling) {
  if (!this[0] || !element) {
    return;
  }
  if ("string" === typeof element) {
    element = parseHTML(element);
  } else if (element.nodeType) {
    element = [element];
  } else if (isNumeric(element)) {
    element = [dom_adapter_default.createTextNode(element)];
  }
  for (var i = 0; i < element.length; i++) {
    var item = element[i];
    var container = this[0];
    var wrapTR = "TABLE" === container.tagName && "TR" === item.tagName;
    if (wrapTR && container.tBodies && container.tBodies.length) {
      container = container.tBodies[0];
    }
    dom_adapter_default.insertElement(container, item.nodeType ? item : item[0], nextSibling);
  }
};
var setCss = function(name2, value2) {
  if (!this[0] || !this[0].style) {
    return;
  }
  if (null === value2 || "number" === typeof value2 && isNaN(value2)) {
    return;
  }
  name2 = styleProp(name2);
  for (var i = 0; i < this.length; i++) {
    this[i].style[name2] = normalizeStyleProp(name2, value2);
  }
};
initRender.prototype.css = function(name2, value2) {
  if (isString(name2)) {
    if (2 === arguments.length) {
      setCss.call(this, name2, value2);
    } else {
      if (!this[0]) {
        return;
      }
      name2 = styleProp(name2);
      var result2 = window4.getComputedStyle(this[0])[name2] || this[0].style[name2];
      return isNumeric(result2) ? result2.toString() : result2;
    }
  } else if (isPlainObject(name2)) {
    for (var key in name2) {
      setCss.call(this, key, name2[key]);
    }
  }
  return this;
};
initRender.prototype.prepend = function(element) {
  if (arguments.length > 1) {
    for (var i = 0; i < arguments.length; i++) {
      this.prepend(arguments[i]);
    }
    return this;
  }
  appendElements.apply(this, [element, this[0].firstChild]);
  return this;
};
initRender.prototype.append = function(element) {
  if (arguments.length > 1) {
    for (var i = 0; i < arguments.length; i++) {
      this.append(arguments[i]);
    }
    return this;
  }
  appendElements.apply(this, [element]);
  return this;
};
initRender.prototype.prependTo = function(element) {
  if (this.length > 1) {
    for (var i = this.length - 1; i >= 0; i--) {
      renderer(this[i]).prependTo(element);
    }
    return this;
  }
  element = renderer(element);
  if (element[0]) {
    dom_adapter_default.insertElement(element[0], this[0], element[0].firstChild);
  }
  return this;
};
initRender.prototype.appendTo = function(element) {
  if (this.length > 1) {
    return repeatMethod.call(this, "appendTo", arguments);
  }
  dom_adapter_default.insertElement(renderer(element)[0], this[0]);
  return this;
};
initRender.prototype.insertBefore = function(element) {
  if (element && element[0]) {
    dom_adapter_default.insertElement(element[0].parentNode, this[0], element[0]);
  }
  return this;
};
initRender.prototype.insertAfter = function(element) {
  if (element && element[0]) {
    dom_adapter_default.insertElement(element[0].parentNode, this[0], element[0].nextSibling);
  }
  return this;
};
initRender.prototype.before = function(element) {
  if (this[0]) {
    dom_adapter_default.insertElement(this[0].parentNode, element[0], this[0]);
  }
  return this;
};
initRender.prototype.after = function(element) {
  if (this[0]) {
    dom_adapter_default.insertElement(this[0].parentNode, element[0], this[0].nextSibling);
  }
  return this;
};
initRender.prototype.wrap = function(wrapper) {
  if (this[0]) {
    var wrap = renderer(wrapper);
    wrap.insertBefore(this);
    wrap.append(this);
  }
  return this;
};
initRender.prototype.wrapInner = function(wrapper) {
  var contents = this.contents();
  if (contents.length) {
    contents.wrap(wrapper);
  } else {
    this.append(wrapper);
  }
  return this;
};
initRender.prototype.replaceWith = function(element) {
  if (!(element && element[0])) {
    return;
  }
  if (element.is(this)) {
    return this;
  }
  element.insertBefore(this);
  this.remove();
  return element;
};
initRender.prototype.remove = function() {
  if (this.length > 1) {
    return repeatMethod.call(this, "remove", arguments);
  }
  cleanDataRecursive(this[0], true);
  dom_adapter_default.removeElement(this[0]);
  return this;
};
initRender.prototype.detach = function() {
  if (this.length > 1) {
    return repeatMethod.call(this, "detach", arguments);
  }
  dom_adapter_default.removeElement(this[0]);
  return this;
};
initRender.prototype.empty = function() {
  if (this.length > 1) {
    return repeatMethod.call(this, "empty", arguments);
  }
  cleanDataRecursive(this[0]);
  dom_adapter_default.setText(this[0], "");
  return this;
};
initRender.prototype.clone = function() {
  var result2 = [];
  for (var i = 0; i < this.length; i++) {
    result2.push(this[i].cloneNode(true));
  }
  return renderer(result2);
};
initRender.prototype.text = function(value2) {
  if (!arguments.length) {
    var result2 = "";
    for (var i = 0; i < this.length; i++) {
      result2 += this[i] && this[i].textContent || "";
    }
    return result2;
  }
  var text = isFunction(value2) ? value2() : value2;
  cleanDataRecursive(this[0], false);
  dom_adapter_default.setText(this[0], isDefined(text) ? text : "");
  return this;
};
initRender.prototype.val = function(value2) {
  if (1 === arguments.length) {
    return this.prop("value", isDefined(value2) ? value2 : "");
  }
  return this.prop("value");
};
initRender.prototype.contents = function() {
  if (!this[0]) {
    return renderer();
  }
  var result2 = [];
  result2.push.apply(result2, this[0].childNodes);
  return renderer(result2);
};
initRender.prototype.find = function(selector) {
  var result2 = renderer();
  if (!selector) {
    return result2;
  }
  var nodes = [];
  var i;
  if ("string" === typeof selector) {
    selector = selector.trim();
    for (i = 0; i < this.length; i++) {
      var element = this[i];
      if (dom_adapter_default.isElementNode(element)) {
        var elementId = element.getAttribute("id");
        var queryId = elementId || "dx-query-children";
        if (!elementId) {
          setAttributeValue(element, "id", queryId);
        }
        queryId = "[id='" + queryId + "'] ";
        var querySelector = queryId + selector.replace(/([^\\])(,)/g, "$1, " + queryId);
        nodes.push.apply(nodes, dom_adapter_default.querySelectorAll(element, querySelector));
        setAttributeValue(element, "id", elementId);
      } else if (dom_adapter_default.isDocument(element) || dom_adapter_default.isDocumentFragment(element)) {
        nodes.push.apply(nodes, dom_adapter_default.querySelectorAll(element, selector));
      }
    }
  } else {
    for (i = 0; i < this.length; i++) {
      selector = dom_adapter_default.isNode(selector) ? selector : selector[0];
      if (this[i] !== selector && this[i].contains(selector)) {
        nodes.push(selector);
      }
    }
  }
  return result2.add(nodes);
};
var isVisible = function(_, element) {
  var _element$host;
  element = null !== (_element$host = element.host) && void 0 !== _element$host ? _element$host : element;
  if (!element.nodeType) {
    return true;
  }
  return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length);
};
initRender.prototype.filter = function(selector) {
  if (!selector) {
    return renderer();
  }
  if (":visible" === selector) {
    return this.filter(isVisible);
  } else if (":hidden" === selector) {
    return this.filter(function(_, element) {
      return !isVisible(_, element);
    });
  }
  var result2 = [];
  for (var i = 0; i < this.length; i++) {
    var item = this[i];
    if (dom_adapter_default.isElementNode(item) && "string" === type(selector)) {
      dom_adapter_default.elementMatches(item, selector) && result2.push(item);
    } else if (dom_adapter_default.isNode(selector) || isWindow(selector)) {
      selector === item && result2.push(item);
    } else if (isFunction(selector)) {
      selector.call(item, i, item) && result2.push(item);
    } else {
      for (var j = 0; j < selector.length; j++) {
        selector[j] === item && result2.push(item);
      }
    }
  }
  return renderer(result2);
};
initRender.prototype.not = function(selector) {
  var result2 = [];
  var nodes = this.filter(selector).toArray();
  for (var i = 0; i < this.length; i++) {
    if (-1 === nodes.indexOf(this[i])) {
      result2.push(this[i]);
    }
  }
  return renderer(result2);
};
initRender.prototype.is = function(selector) {
  return !!this.filter(selector).length;
};
initRender.prototype.children = function(selector) {
  var result2 = [];
  for (var i = 0; i < this.length; i++) {
    var nodes = this[i] ? this[i].childNodes : [];
    for (var j = 0; j < nodes.length; j++) {
      if (dom_adapter_default.isElementNode(nodes[j])) {
        result2.push(nodes[j]);
      }
    }
  }
  result2 = renderer(result2);
  return selector ? result2.filter(selector) : result2;
};
initRender.prototype.siblings = function() {
  var element = this[0];
  if (!element || !element.parentNode) {
    return renderer();
  }
  var result2 = [];
  var parentChildNodes = element.parentNode.childNodes || [];
  for (var i = 0; i < parentChildNodes.length; i++) {
    var node = parentChildNodes[i];
    if (dom_adapter_default.isElementNode(node) && node !== element) {
      result2.push(node);
    }
  }
  return renderer(result2);
};
initRender.prototype.each = function(callback) {
  for (var i = 0; i < this.length; i++) {
    if (false === callback.call(this[i], i, this[i])) {
      break;
    }
  }
};
initRender.prototype.index = function(element) {
  if (!element) {
    return this.parent().children().index(this);
  }
  element = renderer(element);
  return this.toArray().indexOf(element[0]);
};
initRender.prototype.get = function(index2) {
  return this[index2 < 0 ? this.length + index2 : index2];
};
initRender.prototype.eq = function(index2) {
  index2 = index2 < 0 ? this.length + index2 : index2;
  return renderer(this[index2]);
};
initRender.prototype.first = function() {
  return this.eq(0);
};
initRender.prototype.last = function() {
  return this.eq(-1);
};
initRender.prototype.select = function() {
  for (var i = 0; i < this.length; i += 1) {
    this[i].select && this[i].select();
  }
  return this;
};
initRender.prototype.parent = function(selector) {
  if (!this[0]) {
    return renderer();
  }
  var result2 = renderer(this[0].parentNode);
  return !selector || result2.is(selector) ? result2 : renderer();
};
initRender.prototype.parents = function(selector) {
  var result2 = [];
  var parent = this.parent();
  while (parent && parent[0] && !dom_adapter_default.isDocument(parent[0])) {
    if (dom_adapter_default.isElementNode(parent[0])) {
      if (!selector || parent.is(selector)) {
        result2.push(parent.get(0));
      }
    }
    parent = parent.parent();
  }
  return renderer(result2);
};
initRender.prototype.closest = function(selector) {
  if (this.is(selector)) {
    return this;
  }
  var parent = this.parent();
  while (parent && parent.length) {
    if (parent.is(selector)) {
      return parent;
    }
    parent = parent.parent();
  }
  return renderer();
};
initRender.prototype.next = function(selector) {
  if (!this[0]) {
    return renderer();
  }
  var next = renderer(this[0].nextSibling);
  if (!arguments.length) {
    return next;
  }
  while (next && next.length) {
    if (next.is(selector)) {
      return next;
    }
    next = next.next();
  }
  return renderer();
};
initRender.prototype.prev = function() {
  if (!this[0]) {
    return renderer();
  }
  return renderer(this[0].previousSibling);
};
initRender.prototype.add = function(selector) {
  var targets = renderer(selector);
  var result2 = this.toArray();
  for (var i = 0; i < targets.length; i++) {
    var target = targets[i];
    if (-1 === result2.indexOf(target)) {
      result2.push(target);
    }
  }
  return renderer(result2);
};
var emptyArray = [];
initRender.prototype.splice = function() {
  return renderer(emptyArray.splice.apply(this, arguments));
};
initRender.prototype.slice = function() {
  return renderer(emptyArray.slice.apply(this, arguments));
};
initRender.prototype.toArray = function() {
  return emptyArray.slice.call(this);
};
initRender.prototype.offset = function() {
  if (!this[0]) {
    return;
  }
  return getOffset(this[0]);
};
initRender.prototype.offsetParent = function() {
  if (!this[0]) {
    return renderer();
  }
  var offsetParent = renderer(this[0].offsetParent);
  while (offsetParent[0] && "static" === offsetParent.css("position")) {
    offsetParent = renderer(offsetParent[0].offsetParent);
  }
  offsetParent = offsetParent[0] ? offsetParent : renderer(dom_adapter_default.getDocumentElement());
  return offsetParent;
};
initRender.prototype.position = function() {
  if (!this[0]) {
    return;
  }
  var offset2;
  var marginTop = parseFloat(this.css("marginTop"));
  var marginLeft = parseFloat(this.css("marginLeft"));
  if ("fixed" === this.css("position")) {
    offset2 = this[0].getBoundingClientRect();
    return {
      top: offset2.top - marginTop,
      left: offset2.left - marginLeft
    };
  }
  offset2 = this.offset();
  var offsetParent = this.offsetParent();
  var parentOffset = {
    top: 0,
    left: 0
  };
  if ("HTML" !== offsetParent[0].nodeName) {
    parentOffset = offsetParent.offset();
  }
  parentOffset = {
    top: parentOffset.top + parseFloat(offsetParent.css("borderTopWidth")),
    left: parentOffset.left + parseFloat(offsetParent.css("borderLeftWidth"))
  };
  return {
    top: offset2.top - parentOffset.top - marginTop,
    left: offset2.left - parentOffset.left - marginLeft
  };
};
[{
  name: "scrollLeft",
  offsetProp: "pageXOffset",
  scrollWindow: function(win, value2) {
    win.scrollTo(value2, win.pageYOffset);
  }
}, {
  name: "scrollTop",
  offsetProp: "pageYOffset",
  scrollWindow: function(win, value2) {
    win.scrollTo(win.pageXOffset, value2);
  }
}].forEach(function(directionStrategy) {
  var propName = directionStrategy.name;
  initRender.prototype[propName] = function(value2) {
    if (!this[0]) {
      return;
    }
    var window29 = getWindowByElement(this[0]);
    if (void 0 === value2) {
      return window29 ? window29[directionStrategy.offsetProp] : this[0][propName];
    }
    if (window29) {
      directionStrategy.scrollWindow(window29, value2);
    } else {
      this[0][propName] = value2;
    }
    return this;
  };
});
initRender.prototype.data = function(key, value2) {
  if (!this[0]) {
    return;
  }
  if (arguments.length < 2) {
    return data.call(renderer, this[0], key);
  }
  data.call(renderer, this[0], key, value2);
  return this;
};
initRender.prototype.removeData = function(key) {
  this[0] && removeData(this[0], key);
  return this;
};
var rendererWrapper = function() {
  return renderer.apply(this, arguments);
};
Object.defineProperty(rendererWrapper, "fn", {
  enumerable: true,
  configurable: true,
  get: function() {
    return renderer.fn;
  },
  set: function(value2) {
    renderer.fn = value2;
  }
});
var renderer_base_default = {
  set: function(strategy4) {
    renderer = strategy4;
  },
  get: function() {
    return rendererWrapper;
  }
};

// node_modules/devextreme/esm/core/renderer.js
var renderer_default = renderer_base_default.get();

// node_modules/devextreme/esm/localization/cldr-data/parent_locales.js
var parent_locales_default = {
  "en-150": "en-001",
  "en-AG": "en-001",
  "en-AI": "en-001",
  "en-AU": "en-001",
  "en-BB": "en-001",
  "en-BM": "en-001",
  "en-BS": "en-001",
  "en-BW": "en-001",
  "en-BZ": "en-001",
  "en-CC": "en-001",
  "en-CK": "en-001",
  "en-CM": "en-001",
  "en-CX": "en-001",
  "en-CY": "en-001",
  "en-DG": "en-001",
  "en-DM": "en-001",
  "en-ER": "en-001",
  "en-FJ": "en-001",
  "en-FK": "en-001",
  "en-FM": "en-001",
  "en-GB": "en-001",
  "en-GD": "en-001",
  "en-GG": "en-001",
  "en-GH": "en-001",
  "en-GI": "en-001",
  "en-GM": "en-001",
  "en-GY": "en-001",
  "en-HK": "en-001",
  "en-IE": "en-001",
  "en-IL": "en-001",
  "en-IM": "en-001",
  "en-IN": "en-001",
  "en-IO": "en-001",
  "en-JE": "en-001",
  "en-JM": "en-001",
  "en-KE": "en-001",
  "en-KI": "en-001",
  "en-KN": "en-001",
  "en-KY": "en-001",
  "en-LC": "en-001",
  "en-LR": "en-001",
  "en-LS": "en-001",
  "en-MG": "en-001",
  "en-MO": "en-001",
  "en-MS": "en-001",
  "en-MT": "en-001",
  "en-MU": "en-001",
  "en-MV": "en-001",
  "en-MW": "en-001",
  "en-MY": "en-001",
  "en-NA": "en-001",
  "en-NF": "en-001",
  "en-NG": "en-001",
  "en-NR": "en-001",
  "en-NU": "en-001",
  "en-NZ": "en-001",
  "en-PG": "en-001",
  "en-PK": "en-001",
  "en-PN": "en-001",
  "en-PW": "en-001",
  "en-RW": "en-001",
  "en-SB": "en-001",
  "en-SC": "en-001",
  "en-SD": "en-001",
  "en-SG": "en-001",
  "en-SH": "en-001",
  "en-SL": "en-001",
  "en-SS": "en-001",
  "en-SX": "en-001",
  "en-SZ": "en-001",
  "en-TC": "en-001",
  "en-TK": "en-001",
  "en-TO": "en-001",
  "en-TT": "en-001",
  "en-TV": "en-001",
  "en-TZ": "en-001",
  "en-UG": "en-001",
  "en-VC": "en-001",
  "en-VG": "en-001",
  "en-VU": "en-001",
  "en-WS": "en-001",
  "en-ZA": "en-001",
  "en-ZM": "en-001",
  "en-ZW": "en-001",
  "en-AT": "en-150",
  "en-BE": "en-150",
  "en-CH": "en-150",
  "en-DE": "en-150",
  "en-DK": "en-150",
  "en-FI": "en-150",
  "en-NL": "en-150",
  "en-SE": "en-150",
  "en-SI": "en-150",
  "hi-Latn": "en-IN",
  "es-AR": "es-419",
  "es-BO": "es-419",
  "es-BR": "es-419",
  "es-BZ": "es-419",
  "es-CL": "es-419",
  "es-CO": "es-419",
  "es-CR": "es-419",
  "es-CU": "es-419",
  "es-DO": "es-419",
  "es-EC": "es-419",
  "es-GT": "es-419",
  "es-HN": "es-419",
  "es-MX": "es-419",
  "es-NI": "es-419",
  "es-PA": "es-419",
  "es-PE": "es-419",
  "es-PR": "es-419",
  "es-PY": "es-419",
  "es-SV": "es-419",
  "es-US": "es-419",
  "es-UY": "es-419",
  "es-VE": "es-419",
  nb: "no",
  nn: "no",
  "pt-AO": "pt-PT",
  "pt-CH": "pt-PT",
  "pt-CV": "pt-PT",
  "pt-FR": "pt-PT",
  "pt-GQ": "pt-PT",
  "pt-GW": "pt-PT",
  "pt-LU": "pt-PT",
  "pt-MO": "pt-PT",
  "pt-MZ": "pt-PT",
  "pt-ST": "pt-PT",
  "pt-TL": "pt-PT",
  "az-Arab": "und",
  "az-Cyrl": "und",
  "bal-Latn": "und",
  "blt-Latn": "und",
  "bm-Nkoo": "und",
  "bs-Cyrl": "und",
  "byn-Latn": "und",
  "cu-Glag": "und",
  "dje-Arab": "und",
  "dyo-Arab": "und",
  "en-Dsrt": "und",
  "en-Shaw": "und",
  "ff-Adlm": "und",
  "ff-Arab": "und",
  "ha-Arab": "und",
  "iu-Latn": "und",
  "kk-Arab": "und",
  "ks-Deva": "und",
  "ku-Arab": "und",
  "ky-Arab": "und",
  "ky-Latn": "und",
  "ml-Arab": "und",
  "mn-Mong": "und",
  "mni-Mtei": "und",
  "ms-Arab": "und",
  "pa-Arab": "und",
  "sat-Deva": "und",
  "sd-Deva": "und",
  "sd-Khoj": "und",
  "sd-Sind": "und",
  "shi-Latn": "und",
  "so-Arab": "und",
  "sr-Latn": "und",
  "sw-Arab": "und",
  "tg-Arab": "und",
  "ug-Cyrl": "und",
  "uz-Arab": "und",
  "uz-Cyrl": "und",
  "vai-Latn": "und",
  "wo-Arab": "und",
  "yo-Arab": "und",
  "yue-Hans": "und",
  "zh-Hant": "und",
  "zh-Hant-MO": "zh-Hant-HK"
};

// node_modules/devextreme/esm/localization/parentLocale.js
var PARENT_LOCALE_SEPARATOR = "-";
var parentLocale_default = (parentLocales, locale) => {
  var parentLocale = parentLocales[locale];
  if (parentLocale) {
    return "root" !== parentLocale && parentLocale;
  }
  return locale.substr(0, locale.lastIndexOf(PARENT_LOCALE_SEPARATOR));
};

// node_modules/devextreme/esm/localization/core.js
var DEFAULT_LOCALE = "en";
var core_default = dependency_injector_default({
  locale: /* @__PURE__ */ (() => {
    var currentLocale = DEFAULT_LOCALE;
    return (locale) => {
      if (!locale) {
        return currentLocale;
      }
      currentLocale = locale;
    };
  })(),
  getValueByClosestLocale: function(getter) {
    var locale = this.locale();
    var value2 = getter(locale);
    var isRootLocale;
    while (!value2 && !isRootLocale) {
      locale = parentLocale_default(parent_locales_default, locale);
      if (locale) {
        value2 = getter(locale);
      } else {
        isRootLocale = true;
      }
    }
    if (void 0 === value2 && locale !== DEFAULT_LOCALE) {
      return getter(DEFAULT_LOCALE);
    }
    return value2;
  }
});

// node_modules/devextreme/esm/localization/default_messages.js
var defaultMessages = {
  en: {
    Yes: "Yes",
    No: "No",
    Cancel: "Cancel",
    Close: "Close",
    Clear: "Clear",
    Done: "Done",
    Loading: "Loading...",
    Select: "Select...",
    Search: "Search",
    Back: "Back",
    OK: "OK",
    "dxCollectionWidget-noDataText": "No data to display",
    "dxDropDownEditor-selectLabel": "Select",
    "validation-required": "Required",
    "validation-required-formatted": "{0} is required",
    "validation-numeric": "Value must be a number",
    "validation-numeric-formatted": "{0} must be a number",
    "validation-range": "Value is out of range",
    "validation-range-formatted": "{0} is out of range",
    "validation-stringLength": "The length of the value is not correct",
    "validation-stringLength-formatted": "The length of {0} is not correct",
    "validation-custom": "Value is invalid",
    "validation-custom-formatted": "{0} is invalid",
    "validation-async": "Value is invalid",
    "validation-async-formatted": "{0} is invalid",
    "validation-compare": "Values do not match",
    "validation-compare-formatted": "{0} does not match",
    "validation-pattern": "Value does not match pattern",
    "validation-pattern-formatted": "{0} does not match pattern",
    "validation-email": "Email is invalid",
    "validation-email-formatted": "{0} is invalid",
    "validation-mask": "Value is invalid",
    "dxLookup-searchPlaceholder": "Minimum character number: {0}",
    "dxList-pullingDownText": "Pull down to refresh...",
    "dxList-pulledDownText": "Release to refresh...",
    "dxList-refreshingText": "Refreshing...",
    "dxList-pageLoadingText": "Loading...",
    "dxList-nextButtonText": "More",
    "dxList-selectAll": "Select All",
    "dxListEditDecorator-delete": "Delete",
    "dxListEditDecorator-more": "More",
    "dxScrollView-pullingDownText": "Pull down to refresh...",
    "dxScrollView-pulledDownText": "Release to refresh...",
    "dxScrollView-refreshingText": "Refreshing...",
    "dxScrollView-reachBottomText": "Loading...",
    "dxDateBox-simulatedDataPickerTitleTime": "Select time",
    "dxDateBox-simulatedDataPickerTitleDate": "Select date",
    "dxDateBox-simulatedDataPickerTitleDateTime": "Select date and time",
    "dxDateBox-validation-datetime": "Value must be a date or time",
    "dxDateRangeBox-invalidStartDateMessage": "Start value must be a date",
    "dxDateRangeBox-invalidEndDateMessage": "End value must be a date",
    "dxDateRangeBox-startDateOutOfRangeMessage": "Start date is out of range",
    "dxDateRangeBox-endDateOutOfRangeMessage": "End date is out of range",
    "dxDateRangeBox-startDateLabel": "Start Date",
    "dxDateRangeBox-endDateLabel": "End Date",
    "dxFileUploader-selectFile": "Select a file",
    "dxFileUploader-dropFile": "or Drop a file here",
    "dxFileUploader-bytes": "bytes",
    "dxFileUploader-kb": "KB",
    "dxFileUploader-Mb": "MB",
    "dxFileUploader-Gb": "GB",
    "dxFileUploader-upload": "Upload",
    "dxFileUploader-uploaded": "Uploaded",
    "dxFileUploader-readyToUpload": "Ready to upload",
    "dxFileUploader-uploadAbortedMessage": "Upload cancelled",
    "dxFileUploader-uploadFailedMessage": "Upload failed",
    "dxFileUploader-invalidFileExtension": "File type is not allowed",
    "dxFileUploader-invalidMaxFileSize": "File is too large",
    "dxFileUploader-invalidMinFileSize": "File is too small",
    "dxRangeSlider-ariaFrom": "From",
    "dxRangeSlider-ariaTill": "Till",
    "dxSwitch-switchedOnText": "ON",
    "dxSwitch-switchedOffText": "OFF",
    "dxForm-optionalMark": "optional",
    "dxForm-requiredMessage": "{0} is required",
    "dxNumberBox-invalidValueMessage": "Value must be a number",
    "dxNumberBox-noDataText": "No data",
    "dxDataGrid-emptyHeaderWithColumnChooserText": "Use {0} to display columns",
    "dxDataGrid-emptyHeaderWithGroupPanelText": "Drag a column from the group panel here",
    "dxDataGrid-emptyHeaderWithColumnChooserAndGroupPanelText": "Use {0} or drag a column from the group panel",
    "dxDataGrid-emptyHeaderColumnChooserText": "column chooser",
    "dxDataGrid-columnChooserTitle": "Column Chooser",
    "dxDataGrid-columnChooserEmptyText": "Drag a column here to hide it",
    "dxDataGrid-groupContinuesMessage": "Continues on the next page",
    "dxDataGrid-groupContinuedMessage": "Continued from the previous page",
    "dxDataGrid-groupHeaderText": "Group by This Column",
    "dxDataGrid-ungroupHeaderText": "Ungroup",
    "dxDataGrid-ungroupAllText": "Ungroup All",
    "dxDataGrid-editingEditRow": "Edit",
    "dxDataGrid-editingSaveRowChanges": "Save",
    "dxDataGrid-editingCancelRowChanges": "Cancel",
    "dxDataGrid-editingDeleteRow": "Delete",
    "dxDataGrid-editingUndeleteRow": "Undelete",
    "dxDataGrid-editingConfirmDeleteMessage": "Are you sure you want to delete this record?",
    "dxDataGrid-validationCancelChanges": "Cancel changes",
    "dxDataGrid-groupPanelEmptyText": "Drag a column header here to group by that column",
    "dxDataGrid-noDataText": "No data",
    "dxDataGrid-searchPanelPlaceholder": "Search...",
    "dxDataGrid-filterRowShowAllText": "(All)",
    "dxDataGrid-filterRowResetOperationText": "Reset",
    "dxDataGrid-filterRowOperationEquals": "Equals",
    "dxDataGrid-filterRowOperationNotEquals": "Does not equal",
    "dxDataGrid-filterRowOperationLess": "Less than",
    "dxDataGrid-filterRowOperationLessOrEquals": "Less than or equal to",
    "dxDataGrid-filterRowOperationGreater": "Greater than",
    "dxDataGrid-filterRowOperationGreaterOrEquals": "Greater than or equal to",
    "dxDataGrid-filterRowOperationStartsWith": "Starts with",
    "dxDataGrid-filterRowOperationContains": "Contains",
    "dxDataGrid-filterRowOperationNotContains": "Does not contain",
    "dxDataGrid-filterRowOperationEndsWith": "Ends with",
    "dxDataGrid-filterRowOperationBetween": "Between",
    "dxDataGrid-filterRowOperationBetweenStartText": "Start",
    "dxDataGrid-filterRowOperationBetweenEndText": "End",
    "dxDataGrid-ariaSearchBox": "Search box",
    "dxDataGrid-applyFilterText": "Apply filter",
    "dxDataGrid-trueText": "true",
    "dxDataGrid-falseText": "false",
    "dxDataGrid-sortingAscendingText": "Sort Ascending",
    "dxDataGrid-sortingDescendingText": "Sort Descending",
    "dxDataGrid-sortingClearText": "Clear Sorting",
    "dxDataGrid-ariaNotSortedColumn": "Not sorted column",
    "dxDataGrid-ariaSortedAscendingColumn": "Column sorted in ascending order",
    "dxDataGrid-ariaSortedDescendingColumn": "Column sorted in descending order",
    "dxDataGrid-ariaSortIndex": "Sort index {0}",
    "dxDataGrid-editingSaveAllChanges": "Save changes",
    "dxDataGrid-editingCancelAllChanges": "Discard changes",
    "dxDataGrid-editingAddRow": "Add a row",
    "dxDataGrid-summaryMin": "Min: {0}",
    "dxDataGrid-summaryMinOtherColumn": "Min of {1} is {0}",
    "dxDataGrid-summaryMax": "Max: {0}",
    "dxDataGrid-summaryMaxOtherColumn": "Max of {1} is {0}",
    "dxDataGrid-summaryAvg": "Avg: {0}",
    "dxDataGrid-summaryAvgOtherColumn": "Avg of {1} is {0}",
    "dxDataGrid-summarySum": "Sum: {0}",
    "dxDataGrid-summarySumOtherColumn": "Sum of {1} is {0}",
    "dxDataGrid-summaryCount": "Count: {0}",
    "dxDataGrid-columnFixingFix": "Fix",
    "dxDataGrid-columnFixingUnfix": "Unfix",
    "dxDataGrid-columnFixingLeftPosition": "To the left",
    "dxDataGrid-columnFixingRightPosition": "To the right",
    "dxDataGrid-exportTo": "Export",
    "dxDataGrid-exportToExcel": "Export to Excel file",
    "dxDataGrid-exporting": "Exporting...",
    "dxDataGrid-excelFormat": "Excel file",
    "dxDataGrid-selectedRows": "Selected rows",
    "dxDataGrid-exportSelectedRows": "Export selected rows to {0}",
    "dxDataGrid-exportAll": "Export all data to {0}",
    "dxDataGrid-headerFilterLabel": "Filter options",
    "dxDataGrid-headerFilterIndicatorLabel": "Show filter options for column '{0}'",
    "dxDataGrid-headerFilterEmptyValue": "(Blanks)",
    "dxDataGrid-headerFilterOK": "OK",
    "dxDataGrid-headerFilterCancel": "Cancel",
    "dxDataGrid-ariaAdaptiveCollapse": "Hide additional data",
    "dxDataGrid-ariaAdaptiveExpand": "Display additional data",
    "dxDataGrid-ariaColumn": "Column",
    "dxDataGrid-ariaColumnHeader": "Column header",
    "dxDataGrid-ariaValue": "Value",
    "dxDataGrid-ariaError": "Error",
    "dxDataGrid-ariaRevertButton": "Press Escape to discard the changes",
    "dxDataGrid-ariaFilterCell": "Filter cell",
    "dxDataGrid-ariaCollapse": "Collapse",
    "dxDataGrid-ariaModifiedCell": "Modified",
    "dxDataGrid-ariaDeletedCell": "Deleted",
    "dxDataGrid-ariaEditableCell": "Editable",
    "dxDataGrid-ariaExpand": "Expand",
    "dxDataGrid-ariaCollapsedRow": "Collapsed row",
    "dxDataGrid-ariaExpandedRow": "Expanded row",
    "dxDataGrid-ariaDataGrid": "Data grid with {0} rows and {1} columns",
    "dxDataGrid-ariaSearchInGrid": "Search in the data grid",
    "dxDataGrid-ariaSelectAll": "Select all",
    "dxDataGrid-ariaSelectRow": "Select row",
    "dxDataGrid-ariaToolbar": "Data grid toolbar",
    "dxDataGrid-ariaEditForm": "Edit form",
    "dxDataGrid-filterBuilderPopupTitle": "Filter Builder",
    "dxDataGrid-filterPanelCreateFilter": "Create Filter",
    "dxDataGrid-filterPanelClearFilter": "Clear",
    "dxDataGrid-filterPanelFilterEnabledHint": "Enable the filter",
    "dxTreeList-ariaTreeList": "Tree list with {0} rows and {1} columns",
    "dxTreeList-ariaSearchInGrid": "Search in the tree list",
    "dxTreeList-ariaToolbar": "Tree list toolbar",
    "dxTreeList-editingAddRowToNode": "Add",
    "dxPager-infoText": "Page {0} of {1} ({2} items)",
    "dxPager-pagesCountText": "of",
    "dxPager-pageSize": "Items per page: {0}",
    "dxPager-pageSizesAllText": "All",
    "dxPager-page": "Page {0}",
    "dxPager-prevPage": "Previous Page",
    "dxPager-nextPage": "Next Page",
    "dxPager-ariaLabel": "Page Navigation",
    "dxPager-ariaPageSize": "Page size",
    "dxPager-ariaPageNumber": "Page number",
    "dxPivotGrid-grandTotal": "Grand Total",
    "dxPivotGrid-total": "{0} Total",
    "dxPivotGrid-fieldChooserTitle": "Field Chooser",
    "dxPivotGrid-showFieldChooser": "Show Field Chooser",
    "dxPivotGrid-expandAll": "Expand All",
    "dxPivotGrid-collapseAll": "Collapse All",
    "dxPivotGrid-sortColumnBySummary": 'Sort "{0}" by This Column',
    "dxPivotGrid-sortRowBySummary": 'Sort "{0}" by This Row',
    "dxPivotGrid-removeAllSorting": "Remove All Sorting",
    "dxPivotGrid-dataNotAvailable": "N/A",
    "dxPivotGrid-rowFields": "Row Fields",
    "dxPivotGrid-columnFields": "Column Fields",
    "dxPivotGrid-dataFields": "Data Fields",
    "dxPivotGrid-filterFields": "Filter Fields",
    "dxPivotGrid-allFields": "All Fields",
    "dxPivotGrid-columnFieldArea": "Drop Column Fields Here",
    "dxPivotGrid-dataFieldArea": "Drop Data Fields Here",
    "dxPivotGrid-rowFieldArea": "Drop Row Fields Here",
    "dxPivotGrid-filterFieldArea": "Drop Filter Fields Here",
    "dxScheduler-editorLabelTitle": "Subject",
    "dxScheduler-editorLabelStartDate": "Start Date",
    "dxScheduler-editorLabelEndDate": "End Date",
    "dxScheduler-editorLabelDescription": "Description",
    "dxScheduler-editorLabelRecurrence": "Repeat",
    "dxScheduler-openAppointment": "Open appointment",
    "dxScheduler-recurrenceNever": "Never",
    "dxScheduler-recurrenceMinutely": "Every minute",
    "dxScheduler-recurrenceHourly": "Hourly",
    "dxScheduler-recurrenceDaily": "Daily",
    "dxScheduler-recurrenceWeekly": "Weekly",
    "dxScheduler-recurrenceMonthly": "Monthly",
    "dxScheduler-recurrenceYearly": "Yearly",
    "dxScheduler-recurrenceRepeatEvery": "Repeat Every",
    "dxScheduler-recurrenceRepeatOn": "Repeat On",
    "dxScheduler-recurrenceEnd": "End repeat",
    "dxScheduler-recurrenceAfter": "After",
    "dxScheduler-recurrenceOn": "On",
    "dxScheduler-recurrenceRepeatMinutely": "minute(s)",
    "dxScheduler-recurrenceRepeatHourly": "hour(s)",
    "dxScheduler-recurrenceRepeatDaily": "day(s)",
    "dxScheduler-recurrenceRepeatWeekly": "week(s)",
    "dxScheduler-recurrenceRepeatMonthly": "month(s)",
    "dxScheduler-recurrenceRepeatYearly": "year(s)",
    "dxScheduler-switcherDay": "Day",
    "dxScheduler-switcherWeek": "Week",
    "dxScheduler-switcherWorkWeek": "Work Week",
    "dxScheduler-switcherMonth": "Month",
    "dxScheduler-switcherAgenda": "Agenda",
    "dxScheduler-switcherTimelineDay": "Timeline Day",
    "dxScheduler-switcherTimelineWeek": "Timeline Week",
    "dxScheduler-switcherTimelineWorkWeek": "Timeline Work Week",
    "dxScheduler-switcherTimelineMonth": "Timeline Month",
    "dxScheduler-recurrenceRepeatOnDate": "on date",
    "dxScheduler-recurrenceRepeatCount": "occurrence(s)",
    "dxScheduler-allDay": "All day",
    "dxScheduler-confirmRecurrenceEditTitle": "Edit Recurring Appointment",
    "dxScheduler-confirmRecurrenceDeleteTitle": "Delete Recurring Appointment",
    "dxScheduler-confirmRecurrenceEditMessage": "Do you want to edit only this appointment or the whole series?",
    "dxScheduler-confirmRecurrenceDeleteMessage": "Do you want to delete only this appointment or the whole series?",
    "dxScheduler-confirmRecurrenceEditSeries": "Edit series",
    "dxScheduler-confirmRecurrenceDeleteSeries": "Delete series",
    "dxScheduler-confirmRecurrenceEditOccurrence": "Edit appointment",
    "dxScheduler-confirmRecurrenceDeleteOccurrence": "Delete appointment",
    "dxScheduler-noTimezoneTitle": "No timezone",
    "dxScheduler-moreAppointments": "{0} more",
    "dxCalendar-todayButtonText": "Today",
    "dxCalendar-ariaWidgetName": "Calendar",
    "dxCalendar-previousMonthButtonLabel": "Previous month",
    "dxCalendar-previousYearButtonLabel": "Previous year",
    "dxCalendar-previousDecadeButtonLabel": "Previous decade",
    "dxCalendar-previousCenturyButtonLabel": "Previous century",
    "dxCalendar-nextMonthButtonLabel": "Next month",
    "dxCalendar-nextYearButtonLabel": "Next year",
    "dxCalendar-nextDecadeButtonLabel": "Next decade",
    "dxCalendar-nextCenturyButtonLabel": "Next century",
    "dxCalendar-captionMonthLabel": "Month selection",
    "dxCalendar-captionYearLabel": "Year selection",
    "dxCalendar-captionDecadeLabel": "Decade selection",
    "dxCalendar-captionCenturyLabel": "Century selection",
    "dxColorView-ariaRed": "Red",
    "dxColorView-ariaGreen": "Green",
    "dxColorView-ariaBlue": "Blue",
    "dxColorView-ariaAlpha": "Transparency",
    "dxColorView-ariaHex": "Color code",
    "dxTagBox-selected": "{0} selected",
    "dxTagBox-allSelected": "All selected ({0})",
    "dxTagBox-moreSelected": "{0} more",
    "vizExport-printingButtonText": "Print",
    "vizExport-titleMenuText": "Exporting/Printing",
    "vizExport-exportButtonText": "{0} file",
    "dxFilterBuilder-and": "And",
    "dxFilterBuilder-or": "Or",
    "dxFilterBuilder-notAnd": "Not And",
    "dxFilterBuilder-notOr": "Not Or",
    "dxFilterBuilder-addCondition": "Add Condition",
    "dxFilterBuilder-addGroup": "Add Group",
    "dxFilterBuilder-enterValueText": "<enter a value>",
    "dxFilterBuilder-filterOperationEquals": "Equals",
    "dxFilterBuilder-filterOperationNotEquals": "Does not equal",
    "dxFilterBuilder-filterOperationLess": "Is less than",
    "dxFilterBuilder-filterOperationLessOrEquals": "Is less than or equal to",
    "dxFilterBuilder-filterOperationGreater": "Is greater than",
    "dxFilterBuilder-filterOperationGreaterOrEquals": "Is greater than or equal to",
    "dxFilterBuilder-filterOperationStartsWith": "Starts with",
    "dxFilterBuilder-filterOperationContains": "Contains",
    "dxFilterBuilder-filterOperationNotContains": "Does not contain",
    "dxFilterBuilder-filterOperationEndsWith": "Ends with",
    "dxFilterBuilder-filterOperationIsBlank": "Is blank",
    "dxFilterBuilder-filterOperationIsNotBlank": "Is not blank",
    "dxFilterBuilder-filterOperationBetween": "Is between",
    "dxFilterBuilder-filterOperationAnyOf": "Is any of",
    "dxFilterBuilder-filterOperationNoneOf": "Is none of",
    "dxHtmlEditor-dialogColorCaption": "Change Font Color",
    "dxHtmlEditor-dialogBackgroundCaption": "Change Background Color",
    "dxHtmlEditor-dialogLinkCaption": "Add Link",
    "dxHtmlEditor-dialogLinkUrlField": "URL",
    "dxHtmlEditor-dialogLinkTextField": "Text",
    "dxHtmlEditor-dialogLinkTargetField": "Open link in new window",
    "dxHtmlEditor-dialogImageCaption": "Add Image",
    "dxHtmlEditor-dialogImageUrlField": "URL",
    "dxHtmlEditor-dialogImageAltField": "Alternate text",
    "dxHtmlEditor-dialogImageWidthField": "Width (px)",
    "dxHtmlEditor-dialogImageHeightField": "Height (px)",
    "dxHtmlEditor-dialogInsertTableRowsField": "Rows",
    "dxHtmlEditor-dialogInsertTableColumnsField": "Columns",
    "dxHtmlEditor-dialogInsertTableCaption": "Insert Table",
    "dxHtmlEditor-dialogUpdateImageCaption": "Update Image",
    "dxHtmlEditor-dialogImageUpdateButton": "Update",
    "dxHtmlEditor-dialogImageAddButton": "Add",
    "dxHtmlEditor-dialogImageSpecifyUrl": "From the Web",
    "dxHtmlEditor-dialogImageSelectFile": "From This Device",
    "dxHtmlEditor-dialogImageKeepAspectRatio": "Keep Aspect Ratio",
    "dxHtmlEditor-dialogImageEncodeToBase64": "Encode to Base64",
    "dxHtmlEditor-heading": "Heading",
    "dxHtmlEditor-normalText": "Normal text",
    "dxHtmlEditor-background": "Background Color",
    "dxHtmlEditor-bold": "Bold",
    "dxHtmlEditor-color": "Font Color",
    "dxHtmlEditor-font": "Font",
    "dxHtmlEditor-italic": "Italic",
    "dxHtmlEditor-link": "Add Link",
    "dxHtmlEditor-image": "Add Image",
    "dxHtmlEditor-size": "Size",
    "dxHtmlEditor-strike": "Strikethrough",
    "dxHtmlEditor-subscript": "Subscript",
    "dxHtmlEditor-superscript": "Superscript",
    "dxHtmlEditor-underline": "Underline",
    "dxHtmlEditor-blockquote": "Blockquote",
    "dxHtmlEditor-header": "Header",
    "dxHtmlEditor-increaseIndent": "Increase Indent",
    "dxHtmlEditor-decreaseIndent": "Decrease Indent",
    "dxHtmlEditor-orderedList": "Ordered List",
    "dxHtmlEditor-bulletList": "Bullet List",
    "dxHtmlEditor-alignLeft": "Align Left",
    "dxHtmlEditor-alignCenter": "Align Center",
    "dxHtmlEditor-alignRight": "Align Right",
    "dxHtmlEditor-alignJustify": "Align Justify",
    "dxHtmlEditor-codeBlock": "Code Block",
    "dxHtmlEditor-variable": "Add Variable",
    "dxHtmlEditor-undo": "Undo",
    "dxHtmlEditor-redo": "Redo",
    "dxHtmlEditor-clear": "Clear Formatting",
    "dxHtmlEditor-insertTable": "Insert Table",
    "dxHtmlEditor-insertHeaderRow": "Insert Header Row",
    "dxHtmlEditor-insertRowAbove": "Insert Row Above",
    "dxHtmlEditor-insertRowBelow": "Insert Row Below",
    "dxHtmlEditor-insertColumnLeft": "Insert Column Left",
    "dxHtmlEditor-insertColumnRight": "Insert Column Right",
    "dxHtmlEditor-deleteColumn": "Delete Column",
    "dxHtmlEditor-deleteRow": "Delete Row",
    "dxHtmlEditor-deleteTable": "Delete Table",
    "dxHtmlEditor-cellProperties": "Cell Properties",
    "dxHtmlEditor-tableProperties": "Table Properties",
    "dxHtmlEditor-insert": "Insert",
    "dxHtmlEditor-delete": "Delete",
    "dxHtmlEditor-border": "Border",
    "dxHtmlEditor-style": "Style",
    "dxHtmlEditor-width": "Width",
    "dxHtmlEditor-height": "Height",
    "dxHtmlEditor-borderColor": "Color",
    "dxHtmlEditor-tableBackground": "Background",
    "dxHtmlEditor-dimensions": "Dimensions",
    "dxHtmlEditor-alignment": "Alignment",
    "dxHtmlEditor-horizontal": "Horizontal",
    "dxHtmlEditor-vertical": "Vertical",
    "dxHtmlEditor-paddingVertical": "Vertical Padding",
    "dxHtmlEditor-paddingHorizontal": "Horizontal Padding",
    "dxHtmlEditor-pixels": "Pixels",
    "dxHtmlEditor-list": "List",
    "dxHtmlEditor-ordered": "Ordered",
    "dxHtmlEditor-bullet": "Bullet",
    "dxHtmlEditor-align": "Align",
    "dxHtmlEditor-center": "Center",
    "dxHtmlEditor-left": "Left",
    "dxHtmlEditor-right": "Right",
    "dxHtmlEditor-indent": "Indent",
    "dxHtmlEditor-justify": "Justify",
    "dxHtmlEditor-borderStyleNone": "none",
    "dxHtmlEditor-borderStyleHidden": "hidden",
    "dxHtmlEditor-borderStyleDotted": "dotted",
    "dxHtmlEditor-borderStyleDashed": "dashed",
    "dxHtmlEditor-borderStyleSolid": "solid",
    "dxHtmlEditor-borderStyleDouble": "double",
    "dxHtmlEditor-borderStyleGroove": "groove",
    "dxHtmlEditor-borderStyleRidge": "ridge",
    "dxHtmlEditor-borderStyleInset": "inset",
    "dxHtmlEditor-borderStyleOutset": "outset",
    "dxFileManager-newDirectoryName": "Untitled directory",
    "dxFileManager-rootDirectoryName": "Files",
    "dxFileManager-errorNoAccess": "Access Denied. Operation could not be completed.",
    "dxFileManager-errorDirectoryExistsFormat": "Directory '{0}' already exists.",
    "dxFileManager-errorFileExistsFormat": "File '{0}' already exists.",
    "dxFileManager-errorFileNotFoundFormat": "File '{0}' not found.",
    "dxFileManager-errorDirectoryNotFoundFormat": "Directory '{0}' not found.",
    "dxFileManager-errorWrongFileExtension": "File extension is not allowed.",
    "dxFileManager-errorMaxFileSizeExceeded": "File size exceeds the maximum allowed size.",
    "dxFileManager-errorInvalidSymbols": "This name contains invalid characters.",
    "dxFileManager-errorDefault": "Unspecified error.",
    "dxFileManager-errorDirectoryOpenFailed": "The directory cannot be opened",
    "dxFileManager-commandCreate": "New directory",
    "dxFileManager-commandRename": "Rename",
    "dxFileManager-commandMove": "Move to",
    "dxFileManager-commandCopy": "Copy to",
    "dxFileManager-commandDelete": "Delete",
    "dxFileManager-commandDownload": "Download",
    "dxFileManager-commandUpload": "Upload files",
    "dxFileManager-commandRefresh": "Refresh",
    "dxFileManager-commandThumbnails": "Thumbnails View",
    "dxFileManager-commandDetails": "Details View",
    "dxFileManager-commandClearSelection": "Clear selection",
    "dxFileManager-commandShowNavPane": "Toggle navigation pane",
    "dxFileManager-dialogDirectoryChooserMoveTitle": "Move to",
    "dxFileManager-dialogDirectoryChooserMoveButtonText": "Move",
    "dxFileManager-dialogDirectoryChooserCopyTitle": "Copy to",
    "dxFileManager-dialogDirectoryChooserCopyButtonText": "Copy",
    "dxFileManager-dialogRenameItemTitle": "Rename",
    "dxFileManager-dialogRenameItemButtonText": "Save",
    "dxFileManager-dialogCreateDirectoryTitle": "New directory",
    "dxFileManager-dialogCreateDirectoryButtonText": "Create",
    "dxFileManager-dialogDeleteItemTitle": "Delete",
    "dxFileManager-dialogDeleteItemButtonText": "Delete",
    "dxFileManager-dialogDeleteItemSingleItemConfirmation": "Are you sure you want to delete {0}?",
    "dxFileManager-dialogDeleteItemMultipleItemsConfirmation": "Are you sure you want to delete {0} items?",
    "dxFileManager-dialogButtonCancel": "Cancel",
    "dxFileManager-editingCreateSingleItemProcessingMessage": "Creating a directory inside {0}",
    "dxFileManager-editingCreateSingleItemSuccessMessage": "Created a directory inside {0}",
    "dxFileManager-editingCreateSingleItemErrorMessage": "Directory was not created",
    "dxFileManager-editingCreateCommonErrorMessage": "Directory was not created",
    "dxFileManager-editingRenameSingleItemProcessingMessage": "Renaming an item inside {0}",
    "dxFileManager-editingRenameSingleItemSuccessMessage": "Renamed an item inside {0}",
    "dxFileManager-editingRenameSingleItemErrorMessage": "Item was not renamed",
    "dxFileManager-editingRenameCommonErrorMessage": "Item was not renamed",
    "dxFileManager-editingDeleteSingleItemProcessingMessage": "Deleting an item from {0}",
    "dxFileManager-editingDeleteMultipleItemsProcessingMessage": "Deleting {0} items from {1}",
    "dxFileManager-editingDeleteSingleItemSuccessMessage": "Deleted an item from {0}",
    "dxFileManager-editingDeleteMultipleItemsSuccessMessage": "Deleted {0} items from {1}",
    "dxFileManager-editingDeleteSingleItemErrorMessage": "Item was not deleted",
    "dxFileManager-editingDeleteMultipleItemsErrorMessage": "{0} items were not deleted",
    "dxFileManager-editingDeleteCommonErrorMessage": "Some items were not deleted",
    "dxFileManager-editingMoveSingleItemProcessingMessage": "Moving an item to {0}",
    "dxFileManager-editingMoveMultipleItemsProcessingMessage": "Moving {0} items to {1}",
    "dxFileManager-editingMoveSingleItemSuccessMessage": "Moved an item to {0}",
    "dxFileManager-editingMoveMultipleItemsSuccessMessage": "Moved {0} items to {1}",
    "dxFileManager-editingMoveSingleItemErrorMessage": "Item was not moved",
    "dxFileManager-editingMoveMultipleItemsErrorMessage": "{0} items were not moved",
    "dxFileManager-editingMoveCommonErrorMessage": "Some items were not moved",
    "dxFileManager-editingCopySingleItemProcessingMessage": "Copying an item to {0}",
    "dxFileManager-editingCopyMultipleItemsProcessingMessage": "Copying {0} items to {1}",
    "dxFileManager-editingCopySingleItemSuccessMessage": "Copied an item to {0}",
    "dxFileManager-editingCopyMultipleItemsSuccessMessage": "Copied {0} items to {1}",
    "dxFileManager-editingCopySingleItemErrorMessage": "Item was not copied",
    "dxFileManager-editingCopyMultipleItemsErrorMessage": "{0} items were not copied",
    "dxFileManager-editingCopyCommonErrorMessage": "Some items were not copied",
    "dxFileManager-editingUploadSingleItemProcessingMessage": "Uploading an item to {0}",
    "dxFileManager-editingUploadMultipleItemsProcessingMessage": "Uploading {0} items to {1}",
    "dxFileManager-editingUploadSingleItemSuccessMessage": "Uploaded an item to {0}",
    "dxFileManager-editingUploadMultipleItemsSuccessMessage": "Uploaded {0} items to {1}",
    "dxFileManager-editingUploadSingleItemErrorMessage": "Item was not uploaded",
    "dxFileManager-editingUploadMultipleItemsErrorMessage": "{0} items were not uploaded",
    "dxFileManager-editingUploadCanceledMessage": "Canceled",
    "dxFileManager-editingDownloadSingleItemErrorMessage": "Item was not downloaded",
    "dxFileManager-editingDownloadMultipleItemsErrorMessage": "{0} items were not downloaded",
    "dxFileManager-listDetailsColumnCaptionName": "Name",
    "dxFileManager-listDetailsColumnCaptionDateModified": "Date Modified",
    "dxFileManager-listDetailsColumnCaptionFileSize": "File Size",
    "dxFileManager-listThumbnailsTooltipTextSize": "Size",
    "dxFileManager-listThumbnailsTooltipTextDateModified": "Date Modified",
    "dxFileManager-notificationProgressPanelTitle": "Progress",
    "dxFileManager-notificationProgressPanelEmptyListText": "No operations",
    "dxFileManager-notificationProgressPanelOperationCanceled": "Canceled",
    "dxDiagram-categoryGeneral": "General",
    "dxDiagram-categoryFlowchart": "Flowchart",
    "dxDiagram-categoryOrgChart": "Org Chart",
    "dxDiagram-categoryContainers": "Containers",
    "dxDiagram-categoryCustom": "Custom",
    "dxDiagram-commandExportToSvg": "Export to SVG",
    "dxDiagram-commandExportToPng": "Export to PNG",
    "dxDiagram-commandExportToJpg": "Export to JPEG",
    "dxDiagram-commandUndo": "Undo",
    "dxDiagram-commandRedo": "Redo",
    "dxDiagram-commandFontName": "Font Name",
    "dxDiagram-commandFontSize": "Font Size",
    "dxDiagram-commandBold": "Bold",
    "dxDiagram-commandItalic": "Italic",
    "dxDiagram-commandUnderline": "Underline",
    "dxDiagram-commandTextColor": "Font Color",
    "dxDiagram-commandLineColor": "Line Color",
    "dxDiagram-commandLineWidth": "Line Width",
    "dxDiagram-commandLineStyle": "Line Style",
    "dxDiagram-commandLineStyleSolid": "Solid",
    "dxDiagram-commandLineStyleDotted": "Dotted",
    "dxDiagram-commandLineStyleDashed": "Dashed",
    "dxDiagram-commandFillColor": "Fill Color",
    "dxDiagram-commandAlignLeft": "Align Left",
    "dxDiagram-commandAlignCenter": "Align Center",
    "dxDiagram-commandAlignRight": "Align Right",
    "dxDiagram-commandConnectorLineType": "Connector Line Type",
    "dxDiagram-commandConnectorLineStraight": "Straight",
    "dxDiagram-commandConnectorLineOrthogonal": "Orthogonal",
    "dxDiagram-commandConnectorLineStart": "Connector Line Start",
    "dxDiagram-commandConnectorLineEnd": "Connector Line End",
    "dxDiagram-commandConnectorLineNone": "None",
    "dxDiagram-commandConnectorLineArrow": "Arrow",
    "dxDiagram-commandFullscreen": "Full Screen",
    "dxDiagram-commandUnits": "Units",
    "dxDiagram-commandPageSize": "Page Size",
    "dxDiagram-commandPageOrientation": "Page Orientation",
    "dxDiagram-commandPageOrientationLandscape": "Landscape",
    "dxDiagram-commandPageOrientationPortrait": "Portrait",
    "dxDiagram-commandPageColor": "Page Color",
    "dxDiagram-commandShowGrid": "Show Grid",
    "dxDiagram-commandSnapToGrid": "Snap to Grid",
    "dxDiagram-commandGridSize": "Grid Size",
    "dxDiagram-commandZoomLevel": "Zoom Level",
    "dxDiagram-commandAutoZoom": "Auto Zoom",
    "dxDiagram-commandFitToContent": "Fit to Content",
    "dxDiagram-commandFitToWidth": "Fit to Width",
    "dxDiagram-commandAutoZoomByContent": "Auto Zoom by Content",
    "dxDiagram-commandAutoZoomByWidth": "Auto Zoom by Width",
    "dxDiagram-commandSimpleView": "Simple View",
    "dxDiagram-commandCut": "Cut",
    "dxDiagram-commandCopy": "Copy",
    "dxDiagram-commandPaste": "Paste",
    "dxDiagram-commandSelectAll": "Select All",
    "dxDiagram-commandDelete": "Delete",
    "dxDiagram-commandBringToFront": "Bring to Front",
    "dxDiagram-commandSendToBack": "Send to Back",
    "dxDiagram-commandLock": "Lock",
    "dxDiagram-commandUnlock": "Unlock",
    "dxDiagram-commandInsertShapeImage": "Insert Image...",
    "dxDiagram-commandEditShapeImage": "Change Image...",
    "dxDiagram-commandDeleteShapeImage": "Delete Image",
    "dxDiagram-commandLayoutLeftToRight": "Left-to-right",
    "dxDiagram-commandLayoutRightToLeft": "Right-to-left",
    "dxDiagram-commandLayoutTopToBottom": "Top-to-bottom",
    "dxDiagram-commandLayoutBottomToTop": "Bottom-to-top",
    "dxDiagram-unitIn": "in",
    "dxDiagram-unitCm": "cm",
    "dxDiagram-unitPx": "px",
    "dxDiagram-dialogButtonOK": "OK",
    "dxDiagram-dialogButtonCancel": "Cancel",
    "dxDiagram-dialogInsertShapeImageTitle": "Insert Image",
    "dxDiagram-dialogEditShapeImageTitle": "Change Image",
    "dxDiagram-dialogEditShapeImageSelectButton": "Select image",
    "dxDiagram-dialogEditShapeImageLabelText": "or drop a file here",
    "dxDiagram-uiExport": "Export",
    "dxDiagram-uiProperties": "Properties",
    "dxDiagram-uiSettings": "Settings",
    "dxDiagram-uiShowToolbox": "Show Toolbox",
    "dxDiagram-uiSearch": "Search",
    "dxDiagram-uiStyle": "Style",
    "dxDiagram-uiLayout": "Layout",
    "dxDiagram-uiLayoutTree": "Tree",
    "dxDiagram-uiLayoutLayered": "Layered",
    "dxDiagram-uiDiagram": "Diagram",
    "dxDiagram-uiText": "Text",
    "dxDiagram-uiObject": "Object",
    "dxDiagram-uiConnector": "Connector",
    "dxDiagram-uiPage": "Page",
    "dxDiagram-shapeText": "Text",
    "dxDiagram-shapeRectangle": "Rectangle",
    "dxDiagram-shapeEllipse": "Ellipse",
    "dxDiagram-shapeCross": "Cross",
    "dxDiagram-shapeTriangle": "Triangle",
    "dxDiagram-shapeDiamond": "Diamond",
    "dxDiagram-shapeHeart": "Heart",
    "dxDiagram-shapePentagon": "Pentagon",
    "dxDiagram-shapeHexagon": "Hexagon",
    "dxDiagram-shapeOctagon": "Octagon",
    "dxDiagram-shapeStar": "Star",
    "dxDiagram-shapeArrowLeft": "Left Arrow",
    "dxDiagram-shapeArrowUp": "Up Arrow",
    "dxDiagram-shapeArrowRight": "Right Arrow",
    "dxDiagram-shapeArrowDown": "Down Arrow",
    "dxDiagram-shapeArrowUpDown": "Up Down Arrow",
    "dxDiagram-shapeArrowLeftRight": "Left Right Arrow",
    "dxDiagram-shapeProcess": "Process",
    "dxDiagram-shapeDecision": "Decision",
    "dxDiagram-shapeTerminator": "Terminator",
    "dxDiagram-shapePredefinedProcess": "Predefined Process",
    "dxDiagram-shapeDocument": "Document",
    "dxDiagram-shapeMultipleDocuments": "Multiple Documents",
    "dxDiagram-shapeManualInput": "Manual Input",
    "dxDiagram-shapePreparation": "Preparation",
    "dxDiagram-shapeData": "Data",
    "dxDiagram-shapeDatabase": "Database",
    "dxDiagram-shapeHardDisk": "Hard Disk",
    "dxDiagram-shapeInternalStorage": "Internal Storage",
    "dxDiagram-shapePaperTape": "Paper Tape",
    "dxDiagram-shapeManualOperation": "Manual Operation",
    "dxDiagram-shapeDelay": "Delay",
    "dxDiagram-shapeStoredData": "Stored Data",
    "dxDiagram-shapeDisplay": "Display",
    "dxDiagram-shapeMerge": "Merge",
    "dxDiagram-shapeConnector": "Connector",
    "dxDiagram-shapeOr": "Or",
    "dxDiagram-shapeSummingJunction": "Summing Junction",
    "dxDiagram-shapeContainerDefaultText": "Container",
    "dxDiagram-shapeVerticalContainer": "Vertical Container",
    "dxDiagram-shapeHorizontalContainer": "Horizontal Container",
    "dxDiagram-shapeCardDefaultText": "Person's Name",
    "dxDiagram-shapeCardWithImageOnLeft": "Card with Image on the Left",
    "dxDiagram-shapeCardWithImageOnTop": "Card with Image on the Top",
    "dxDiagram-shapeCardWithImageOnRight": "Card with Image on the Right",
    "dxGantt-dialogTitle": "Title",
    "dxGantt-dialogStartTitle": "Start",
    "dxGantt-dialogEndTitle": "End",
    "dxGantt-dialogProgressTitle": "Progress",
    "dxGantt-dialogResourcesTitle": "Resources",
    "dxGantt-dialogResourceManagerTitle": "Resource Manager",
    "dxGantt-dialogTaskDetailsTitle": "Task Details",
    "dxGantt-dialogEditResourceListHint": "Edit Resource List",
    "dxGantt-dialogEditNoResources": "No resources",
    "dxGantt-dialogButtonAdd": "Add",
    "dxGantt-contextMenuNewTask": "New Task",
    "dxGantt-contextMenuNewSubtask": "New Subtask",
    "dxGantt-contextMenuDeleteTask": "Delete Task",
    "dxGantt-contextMenuDeleteDependency": "Delete Dependency",
    "dxGantt-dialogTaskDeleteConfirmation": "Deleting a task also deletes all its dependencies and subtasks. Are you sure you want to delete this task?",
    "dxGantt-dialogDependencyDeleteConfirmation": "Are you sure you want to delete the dependency from the task?",
    "dxGantt-dialogResourcesDeleteConfirmation": "Deleting a resource also deletes it from tasks to which this resource is assigned. Are you sure you want to delete these resources? Resources: {0}",
    "dxGantt-dialogConstraintCriticalViolationMessage": "The task you are attempting to move is linked to a second task by a dependency relation. This change would conflict with dependency rules. How would you like to proceed?",
    "dxGantt-dialogConstraintViolationMessage": "The task you are attempting to move is linked to a second task by a dependency relation. How would you like to proceed?",
    "dxGantt-dialogCancelOperationMessage": "Cancel the operation",
    "dxGantt-dialogDeleteDependencyMessage": "Delete the dependency",
    "dxGantt-dialogMoveTaskAndKeepDependencyMessage": "Move the task and keep the dependency",
    "dxGantt-dialogConstraintCriticalViolationSeveralTasksMessage": "The task you are attempting to move is linked to another tasks by dependency relations. This change would conflict with dependency rules. How would you like to proceed?",
    "dxGantt-dialogConstraintViolationSeveralTasksMessage": "The task you are attempting to move is linked to another tasks by dependency relations. How would you like to proceed?",
    "dxGantt-dialogDeleteDependenciesMessage": "Delete the dependency relations",
    "dxGantt-dialogMoveTaskAndKeepDependenciesMessage": "Move the task and keep the dependencies",
    "dxGantt-undo": "Undo",
    "dxGantt-redo": "Redo",
    "dxGantt-expandAll": "Expand All",
    "dxGantt-collapseAll": "Collapse All",
    "dxGantt-addNewTask": "Add New Task",
    "dxGantt-deleteSelectedTask": "Delete Selected Task",
    "dxGantt-zoomIn": "Zoom In",
    "dxGantt-zoomOut": "Zoom Out",
    "dxGantt-fullScreen": "Full Screen",
    "dxGantt-quarter": "Q{0}",
    "dxGantt-sortingAscendingText": "Sort Ascending",
    "dxGantt-sortingDescendingText": "Sort Descending",
    "dxGantt-sortingClearText": "Clear Sorting",
    "dxGantt-showResources": "Show Resources",
    "dxGantt-showDependencies": "Show Dependencies",
    "dxGantt-dialogStartDateValidation": "Start date must be after {0}",
    "dxGantt-dialogEndDateValidation": "End date must be after {0}",
    "dxGallery-itemName": "Gallery item",
    "dxMultiView-elementAriaRoleDescription": "MultiView",
    "dxMultiView-elementAriaLabel": "Use the arrow keys or swipe to navigate between views",
    "dxMultiView-itemAriaRoleDescription": "View",
    "dxMultiView-itemAriaLabel": "{0} of {1}"
  }
};

// node_modules/devextreme/esm/localization/message.js
var baseDictionary = extend(true, {}, defaultMessages);
var getDataByLocale = (localeData, locale) => {
  var _Object$entries$find;
  return localeData[locale] || (null === locale || void 0 === locale ? void 0 : locale.toLowerCase) && (null === (_Object$entries$find = Object.entries(localeData).find((_ref) => {
    var [key] = _ref;
    return key.toLowerCase() === locale.toLowerCase();
  })) || void 0 === _Object$entries$find ? void 0 : _Object$entries$find[1]) || {};
};
var newMessages = {};
var messageLocalization = dependency_injector_default({
  engine: function() {
    return "base";
  },
  _dictionary: baseDictionary,
  load: function(messages) {
    extend(true, this._dictionary, messages);
  },
  _localizablePrefix: "@",
  setup: function(localizablePrefix) {
    this._localizablePrefix = localizablePrefix;
  },
  localizeString: function(text) {
    var that = this;
    var regex = new RegExp("(^|[^a-zA-Z_0-9" + that._localizablePrefix + "-]+)(" + that._localizablePrefix + "{1,2})([a-zA-Z_0-9-]+)", "g");
    var escapeString = that._localizablePrefix + that._localizablePrefix;
    return text.replace(regex, (str, prefix, escape, localizationKey) => {
      var defaultResult = that._localizablePrefix + localizationKey;
      var result2;
      if (escape !== escapeString) {
        result2 = that.format(localizationKey);
      }
      if (!result2) {
        newMessages[localizationKey] = humanize(localizationKey);
      }
      return prefix + (result2 || defaultResult);
    });
  },
  getMessagesByLocales: function() {
    return this._dictionary;
  },
  getDictionary: function(onlyNew) {
    if (onlyNew) {
      return newMessages;
    }
    return extend({}, newMessages, this.getMessagesByLocales()[core_default.locale()]);
  },
  getFormatter: function(key) {
    return this._getFormatterBase(key) || this._getFormatterBase(key, "en");
  },
  _getFormatterBase: function(key, locale) {
    var message = core_default.getValueByClosestLocale((locale2) => getDataByLocale(this._dictionary, locale2)[key]);
    if (message) {
      return function() {
        var args = 1 === arguments.length && Array.isArray(arguments[0]) ? arguments[0].slice(0) : Array.prototype.slice.call(arguments, 0);
        args.unshift(message);
        return format.apply(this, args);
      };
    }
  },
  format: function(key) {
    var formatter = this.getFormatter(key);
    var values = Array.prototype.slice.call(arguments, 1);
    return formatter && formatter.apply(this, values) || "";
  }
});
var message_default = messageLocalization;

// node_modules/devextreme/esm/events/utils/add_namespace.js
var addNamespace = (eventNames, namespace) => {
  if (!namespace) {
    throw errors_default.Error("E0017");
  }
  if (Array.isArray(eventNames)) {
    return eventNames.map((eventName) => addNamespace(eventName, namespace)).join(" ");
  }
  if (-1 !== eventNames.indexOf(" ")) {
    return addNamespace(eventNames.split(/\s+/g), namespace);
  }
  return "".concat(eventNames, ".").concat(namespace);
};
var add_namespace_default = addNamespace;

// node_modules/devextreme/esm/ui/widget/selectors.js
var focusableFn = function(element, tabIndex) {
  if (!visible(element)) {
    return false;
  }
  var nodeName = element.nodeName.toLowerCase();
  var isTabIndexNotNaN = !isNaN(tabIndex);
  var isDisabled = element.disabled;
  var isDefaultFocus = /^(input|select|textarea|button|object|iframe)$/.test(nodeName);
  var isHyperlink = "a" === nodeName;
  var isFocusable;
  var isContentEditable = element.isContentEditable;
  if (isDefaultFocus || isContentEditable) {
    isFocusable = !isDisabled;
  } else if (isHyperlink) {
    isFocusable = element.href || isTabIndexNotNaN;
  } else {
    isFocusable = isTabIndexNotNaN;
  }
  return isFocusable;
};
function visible(element) {
  var $element = renderer_default(element);
  return $element.is(":visible") && "hidden" !== $element.css("visibility") && "hidden" !== $element.parents().css("visibility");
}
var focusable = function(index2, element) {
  return focusableFn(element, renderer_default(element).attr("tabIndex"));
};
var tabbable = function(index2, element) {
  var tabIndex = renderer_default(element).attr("tabIndex");
  return (isNaN(tabIndex) || tabIndex >= 0) && focusableFn(element, tabIndex);
};
var focused = function($element) {
  var element = renderer_default($element).get(0);
  return dom_adapter_default.getActiveElement(element) === element;
};

// node_modules/devextreme/esm/events/utils/index.js
var KEY_MAP = {
  backspace: "backspace",
  tab: "tab",
  enter: "enter",
  escape: "escape",
  pageup: "pageUp",
  pagedown: "pageDown",
  end: "end",
  home: "home",
  arrowleft: "leftArrow",
  arrowup: "upArrow",
  arrowright: "rightArrow",
  arrowdown: "downArrow",
  delete: "del",
  " ": "space",
  f: "F",
  a: "A",
  "*": "asterisk",
  "-": "minus",
  alt: "alt",
  control: "control",
  shift: "shift"
};
var LEGACY_KEY_CODES = {
  8: "backspace",
  9: "tab",
  13: "enter",
  27: "escape",
  33: "pageUp",
  34: "pageDown",
  35: "end",
  36: "home",
  37: "leftArrow",
  38: "upArrow",
  39: "rightArrow",
  40: "downArrow",
  46: "del",
  32: "space",
  70: "F",
  65: "A",
  106: "asterisk",
  109: "minus",
  189: "minus",
  173: "minus",
  16: "shift",
  17: "control",
  18: "alt"
};
var EVENT_SOURCES_REGEX = {
  dx: /^dx/i,
  mouse: /(mouse|wheel)/i,
  touch: /^touch/i,
  keyboard: /^key/i,
  pointer: /^(ms)?pointer/i
};
var fixMethod = (e) => e;
var copyEvent = (originalEvent) => fixMethod(events_engine_default.Event(originalEvent, originalEvent), originalEvent);
var isDxEvent = (e) => "dx" === eventSource(e);
var isNativeMouseEvent = (e) => "mouse" === eventSource(e);
var isNativeTouchEvent = (e) => "touch" === eventSource(e);
var eventSource = (_ref) => {
  var {
    type: type2
  } = _ref;
  var result2 = "other";
  each(EVENT_SOURCES_REGEX, function(key) {
    if (this.test(type2)) {
      result2 = key;
      return false;
    }
  });
  return result2;
};
var isPointerEvent = (e) => "pointer" === eventSource(e);
var isMouseEvent = (e) => isNativeMouseEvent(e) || (isPointerEvent(e) || isDxEvent(e)) && "mouse" === e.pointerType;
var isDxMouseWheelEvent = (e) => e && "dxmousewheel" === e.type;
var isTouchEvent = (e) => isNativeTouchEvent(e) || (isPointerEvent(e) || isDxEvent(e)) && "touch" === e.pointerType;
var eventData = (_ref3) => {
  var {
    pageX,
    pageY,
    timeStamp
  } = _ref3;
  return {
    x: pageX,
    y: pageY,
    time: timeStamp
  };
};
var eventDelta = (from, to) => ({
  x: to.x - from.x,
  y: to.y - from.y,
  time: to.time - from.time || 1
});
var hasTouches = (e) => {
  var {
    originalEvent,
    pointers
  } = e;
  if (isNativeTouchEvent(e)) {
    return (originalEvent.touches || []).length;
  }
  if (isDxEvent(e)) {
    return (pointers || []).length;
  }
  return 0;
};
var skipEvents = false;
var needSkipEvent = (e) => {
  if (skipEvents) {
    return true;
  }
  var {
    target
  } = e;
  var $target = renderer_default(target);
  var isContentEditable = (null === target || void 0 === target ? void 0 : target.isContentEditable) || (null === target || void 0 === target ? void 0 : target.hasAttribute("contenteditable"));
  var touchInEditable = $target.is("input, textarea, select") || isContentEditable;
  if (isDxMouseWheelEvent(e)) {
    var isTextArea = $target.is("textarea") && $target.hasClass("dx-texteditor-input");
    if (isTextArea || isContentEditable) {
      return false;
    }
    var isInputFocused = $target.is("input[type='number'], textarea, select") && $target.is(":focus");
    return isInputFocused;
  }
  if (isMouseEvent(e)) {
    return touchInEditable || e.which > 1;
  }
  if (isTouchEvent(e)) {
    return touchInEditable && focused($target);
  }
};
var createEvent = (originalEvent, args) => {
  var event = copyEvent(originalEvent);
  args && extend(event, args);
  return event;
};
var fireEvent = (props) => {
  var {
    originalEvent,
    delegateTarget
  } = props;
  var event = createEvent(originalEvent, props);
  events_engine_default.trigger(delegateTarget || event.target, event);
  return event;
};
var normalizeKeyName = (_ref4) => {
  var {
    key,
    which
  } = _ref4;
  var normalizedKey = KEY_MAP[null === key || void 0 === key ? void 0 : key.toLowerCase()] || key;
  var normalizedKeyFromWhich = LEGACY_KEY_CODES[which];
  if (normalizedKeyFromWhich && normalizedKey === key) {
    return normalizedKeyFromWhich;
  } else if (!normalizedKey && which) {
    return String.fromCharCode(which);
  }
  return normalizedKey;
};
var getChar = (_ref5) => {
  var {
    key,
    which
  } = _ref5;
  return key || String.fromCharCode(which);
};
var addNamespace2 = add_namespace_default;
var isCommandKeyPressed = (_ref6) => {
  var {
    ctrlKey,
    metaKey
  } = _ref6;
  return ctrlKey || metaKey;
};

// node_modules/devextreme/esm/ui/shared/accessibility.js
var FOCUS_STATE_CLASS = "dx-state-focused";
var FOCUS_DISABLED_CLASS = "dx-cell-focus-disabled";
var FOCUSED_ROW_SELECTOR = ".dx-row-focused";
var GRID_ROW_SELECTOR = ".dx-datagrid-rowsview .dx-row";
var GRID_CELL_SELECTOR = "".concat(GRID_ROW_SELECTOR, " > td");
var TREELIST_ROW_SELECTOR = ".dx-treelist-rowsview .dx-row";
var TREELIST_CELL_SELECTOR = "".concat(TREELIST_ROW_SELECTOR, " > td");
var viewItemSelectorMap = {
  groupPanel: [".dx-datagrid-group-panel .dx-group-panel-item[tabindex]"],
  columnHeaders: [".dx-datagrid-headers .dx-header-row > td.dx-datagrid-action", ".dx-treelist-headers .dx-header-row > td.dx-treelist-action"],
  filterRow: [".dx-datagrid-headers .dx-datagrid-filter-row .dx-editor-cell .dx-texteditor-input", ".dx-treelist-headers .dx-treelist-filter-row .dx-editor-cell .dx-texteditor-input"],
  rowsView: ["".concat(FOCUSED_ROW_SELECTOR), "".concat(GRID_ROW_SELECTOR, "[tabindex]"), "".concat(GRID_CELL_SELECTOR, "[tabindex]"), "".concat(GRID_CELL_SELECTOR), "".concat(TREELIST_ROW_SELECTOR, "[tabindex]"), "".concat(TREELIST_CELL_SELECTOR, "[tabindex]"), "".concat(TREELIST_CELL_SELECTOR)],
  footer: [".dx-datagrid-total-footer .dx-datagrid-summary-item", ".dx-treelist-total-footer .dx-treelist-summary-item"],
  filterPanel: [".dx-datagrid-filter-panel .dx-icon-filter", ".dx-treelist-filter-panel .dx-icon-filter"],
  pager: [".dx-datagrid-pager [tabindex]", ".dx-treelist-pager [tabindex]"]
};
var isMouseDown = false;
var isHiddenFocusing = false;
var focusedElementInfo = null;
function processKeyDown(viewName2, instance, event, action, $mainElement, executeKeyDown) {
  var isHandled = fireKeyDownEvent(instance, event.originalEvent, executeKeyDown);
  if (isHandled) {
    return;
  }
  var keyName = normalizeKeyName(event);
  if ("enter" === keyName || "space" === keyName) {
    saveFocusedElementInfo(event.target, instance);
    action && action({
      event
    });
  } else if ("tab" === keyName) {
    $mainElement.addClass(FOCUS_STATE_CLASS);
  } else {
    selectView(viewName2, instance, event);
  }
}
function saveFocusedElementInfo(target, instance) {
  var $target = renderer_default(target);
  var ariaLabel = $target.attr("aria-label");
  var $activeElements = getActiveAccessibleElements(ariaLabel, instance.element());
  var targetIndex = $activeElements.index($target);
  focusedElementInfo = extend({}, {
    ariaLabel,
    index: targetIndex
  }, {
    viewInstance: instance
  });
}
function getActiveAccessibleElements(ariaLabel, viewElement) {
  var $viewElement = renderer_default(viewElement);
  var $activeElements;
  if (ariaLabel) {
    $activeElements = $viewElement.find('[aria-label="'.concat(ariaLabel, '"][tabindex]'));
  } else {
    $activeElements = $viewElement.find("[tabindex]");
  }
  return $activeElements;
}
function findFocusedViewElement(viewSelectors, element) {
  var root = (null === element || void 0 === element ? void 0 : element.getRootNode()) || dom_adapter_default.getDocument();
  for (var index2 in viewSelectors) {
    var selector = viewSelectors[index2];
    var $focusViewElement = renderer_default(root).find(selector).first();
    if ($focusViewElement.length) {
      return $focusViewElement;
    }
  }
}
function fireKeyDownEvent(instance, event, executeAction2) {
  var args = {
    event,
    handled: false
  };
  if (executeAction2) {
    executeAction2(args);
  } else {
    instance._createActionByOption("onKeyDown")(args);
  }
  return args.handled;
}
function onDocumentVisibilityChange() {
  isHiddenFocusing = "visible" === dom_adapter_default.getDocument().visibilityState;
}
function subscribeVisibilityChange() {
  events_engine_default.on(dom_adapter_default.getDocument(), "visibilitychange", onDocumentVisibilityChange);
}
function unsubscribeVisibilityChange() {
  events_engine_default.off(dom_adapter_default.getDocument(), "visibilitychange", onDocumentVisibilityChange);
}
function hiddenFocus(element, preventScroll) {
  isHiddenFocusing = true;
  element.focus({
    preventScroll
  });
  isHiddenFocusing = false;
}
function registerKeyboardAction(viewName2, instance, $element, selector, action, executeKeyDown) {
  if (instance.option("useLegacyKeyboardNavigation")) {
    return noop2;
  }
  var getMainElement = () => renderer_default(instance.element());
  var keyDownHandler = (e) => processKeyDown(viewName2, instance, e, action, getMainElement(), executeKeyDown);
  var mouseDownHandler = () => {
    isMouseDown = true;
    getMainElement().removeClass(FOCUS_STATE_CLASS);
  };
  var focusinHandler = () => {
    var needShowOverlay = !isMouseDown && !isHiddenFocusing;
    if (needShowOverlay) {
      getMainElement().addClass(FOCUS_STATE_CLASS);
    }
    isMouseDown = false;
  };
  events_engine_default.on($element, "keydown", selector, keyDownHandler);
  events_engine_default.on($element, "mousedown", selector, mouseDownHandler);
  events_engine_default.on($element, "focusin", selector, focusinHandler);
  return () => {
    events_engine_default.off($element, "keydown", selector, keyDownHandler);
    events_engine_default.off($element, "mousedown", selector, mouseDownHandler);
    events_engine_default.off($element, "focusin", selector, focusinHandler);
  };
}
function restoreFocus(instance) {
  if (!instance.option("useLegacyKeyboardNavigation") && focusedElementInfo) {
    var viewInstance = focusedElementInfo.viewInstance;
    if (viewInstance) {
      var $activeElements = getActiveAccessibleElements(focusedElementInfo.ariaLabel, viewInstance.element());
      var $targetElement = $activeElements.eq(focusedElementInfo.index);
      focusedElementInfo = null;
      events_engine_default.trigger($targetElement, "focus");
    }
  }
}
function selectView(viewName2, instance, event) {
  var keyName = normalizeKeyName(event);
  if (event.ctrlKey && ("upArrow" === keyName || "downArrow" === keyName)) {
    var viewNames = Object.keys(viewItemSelectorMap);
    var viewItemIndex = viewNames.indexOf(viewName2);
    while (viewItemIndex >= 0 && viewItemIndex < viewNames.length) {
      viewItemIndex = "upArrow" === keyName ? --viewItemIndex : ++viewItemIndex;
      var _viewName = viewNames[viewItemIndex];
      var viewSelectors = viewItemSelectorMap[_viewName];
      var $focusViewElement = findFocusedViewElement(viewSelectors, event.target);
      if ($focusViewElement && $focusViewElement.length) {
        $focusViewElement.attr("tabindex", instance.option("tabindex") || 0);
        events_engine_default.trigger($focusViewElement, "focus");
        $focusViewElement.removeClass(FOCUS_DISABLED_CLASS);
        break;
      }
    }
  }
}
function setTabIndex(instance, $element) {
  if (!instance.option("useLegacyKeyboardnavigation")) {
    $element.attr("tabindex", instance.option("tabindex") || 0);
  }
}

// node_modules/devextreme/esm/__internal/grids/grid_core/m_accessibility.js
var registerKeyboardAction2 = function(viewName2, instance, $element, selector, action) {
  var keyboardController = instance.getController("keyboardNavigation");
  if (instance.option("useLegacyKeyboardNavigation") || keyboardController && !keyboardController.isKeyboardEnabled()) {
    return;
  }
  instance.createAction("onKeyDown");
  registerKeyboardAction(viewName2, instance, $element, selector, action, (args) => {
    instance.executeAction("onKeyDown", args);
  });
};

// node_modules/devextreme/esm/core/element.js
var strategy2 = function(element) {
  return element && element.get(0);
};
function getPublicElement(element) {
  return strategy2(element);
}

// node_modules/devextreme/esm/core/utils/browser.js
var navigator = getNavigator();
var webkitRegExp = /(webkit)[ /]([\w.]+)/;
var mozillaRegExp = /(mozilla)(?:.*? rv:([\w.]+))/;
var browserFromUA = (ua) => {
  ua = ua.toLowerCase();
  var result2 = {};
  var matches = webkitRegExp.exec(ua) || ua.indexOf("compatible") < 0 && mozillaRegExp.exec(ua) || [];
  var browserName = matches[1];
  var browserVersion = matches[2];
  if ("webkit" === browserName) {
    result2.webkit = true;
    if (ua.indexOf("chrome") >= 0 || ua.indexOf("crios") >= 0) {
      browserName = "chrome";
      browserVersion = /(?:chrome|crios)\/(\d+\.\d+)/.exec(ua);
      browserVersion = browserVersion && browserVersion[1];
    } else if (ua.indexOf("fxios") >= 0) {
      browserName = "mozilla";
      browserVersion = /fxios\/(\d+\.\d+)/.exec(ua);
      browserVersion = browserVersion && browserVersion[1];
    } else if (ua.indexOf("safari") >= 0 && /version|phantomjs/.test(ua)) {
      browserName = "safari";
      browserVersion = /(?:version|phantomjs)\/([0-9.]+)/.exec(ua);
      browserVersion = browserVersion && browserVersion[1];
    } else {
      browserName = "unknown";
      browserVersion = /applewebkit\/([0-9.]+)/.exec(ua);
      browserVersion = browserVersion && browserVersion[1];
    }
  }
  if (browserName) {
    result2[browserName] = true;
    result2.version = browserVersion;
  }
  return result2;
};
var browser_default = extend({
  _fromUA: browserFromUA
}, browserFromUA(navigator.userAgent));

// node_modules/devextreme/esm/core/utils/position.js
var getDefaultAlignment = (isRtlEnabled) => {
  var rtlEnabled = null !== isRtlEnabled && void 0 !== isRtlEnabled ? isRtlEnabled : config_default().rtlEnabled;
  return rtlEnabled ? "right" : "left";
};
var getBoundingRect = (element) => {
  if (isWindow(element)) {
    return {
      width: element.outerWidth,
      height: element.outerHeight
    };
  }
  return element.getBoundingClientRect();
};

// node_modules/devextreme/esm/core/utils/support.js
var support_exports = {};
__export(support_exports, {
  animation: () => animation,
  inputType: () => inputType,
  nativeScrolling: () => nativeScrolling,
  pointerEvents: () => pointerEvents,
  styleProp: () => styleProp,
  stylePropPrefix: () => stylePropPrefix,
  supportProp: () => supportProp,
  touch: () => touch,
  touchEvents: () => touchEvents,
  transition: () => transition,
  transitionEndEventName: () => transitionEndEventName
});

// node_modules/devextreme/esm/core/utils/ready_callbacks.js
var callbacks = [];
var subscribeReady = call_once_default(() => {
  var removeListener = dom_adapter_default.listen(dom_adapter_default.getDocument(), "DOMContentLoaded", () => {
    readyCallbacks.fire();
    removeListener();
  });
});
var readyCallbacks = {
  add: (callback) => {
    var windowExists = hasWindow();
    if (windowExists && "loading" !== dom_adapter_default.getReadyState()) {
      callback();
    } else {
      callbacks.push(callback);
      windowExists && subscribeReady();
    }
  },
  fire: () => {
    callbacks.forEach((callback) => callback());
    callbacks = [];
  }
};
var ready_callbacks_default = dependency_injector_default(readyCallbacks);

// node_modules/devextreme/esm/core/utils/resize_callbacks.js
var resizeCallbacks = function() {
  var prevSize;
  var callbacks2 = callbacks_default();
  var originalCallbacksAdd = callbacks2.add;
  var originalCallbacksRemove = callbacks2.remove;
  if (!hasWindow()) {
    return callbacks2;
  }
  var formatSize = function() {
    var window29 = getWindow();
    return {
      width: window29.innerWidth,
      height: window29.innerHeight
    };
  };
  var handleResize = function() {
    var now = formatSize();
    if (now.width === prevSize.width && now.height === prevSize.height) {
      return;
    }
    var changedDimension;
    if (now.width === prevSize.width) {
      changedDimension = "height";
    }
    if (now.height === prevSize.height) {
      changedDimension = "width";
    }
    prevSize = now;
    callbacks2.fire(changedDimension);
  };
  var setPrevSize = call_once_default(function() {
    prevSize = formatSize();
  });
  var removeListener;
  callbacks2.add = function() {
    var result2 = originalCallbacksAdd.apply(callbacks2, arguments);
    setPrevSize();
    ready_callbacks_default.add(function() {
      if (!removeListener && callbacks2.has()) {
        removeListener = dom_adapter_default.listen(getWindow(), "resize", handleResize);
      }
    });
    return result2;
  };
  callbacks2.remove = function() {
    var result2 = originalCallbacksRemove.apply(callbacks2, arguments);
    if (!callbacks2.has() && removeListener) {
      removeListener();
      removeListener = void 0;
    }
    return result2;
  };
  return callbacks2;
}();
var resize_callbacks_default = resizeCallbacks;

// node_modules/devextreme/esm/core/events_strategy.js
var EventsStrategy = class _EventsStrategy {
  constructor(owner) {
    var options2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    this._events = {};
    this._owner = owner;
    this._options = options2;
  }
  static create(owner, strategy4) {
    if (strategy4) {
      return isFunction(strategy4) ? strategy4(owner) : strategy4;
    } else {
      return new _EventsStrategy(owner);
    }
  }
  hasEvent(eventName) {
    var callbacks2 = this._events[eventName];
    return callbacks2 ? callbacks2.has() : false;
  }
  fireEvent(eventName, eventArgs) {
    var callbacks2 = this._events[eventName];
    if (callbacks2) {
      callbacks2.fireWith(this._owner, eventArgs);
    }
    return this._owner;
  }
  on(eventName, eventHandler) {
    if (isPlainObject(eventName)) {
      each(eventName, (e, h2) => {
        this.on(e, h2);
      });
    } else {
      var callbacks2 = this._events[eventName];
      if (!callbacks2) {
        callbacks2 = callbacks_default({
          syncStrategy: this._options.syncStrategy
        });
        this._events[eventName] = callbacks2;
      }
      var addFn = callbacks2.originalAdd || callbacks2.add;
      addFn.call(callbacks2, eventHandler);
    }
  }
  off(eventName, eventHandler) {
    var callbacks2 = this._events[eventName];
    if (callbacks2) {
      if (isFunction(eventHandler)) {
        callbacks2.remove(eventHandler);
      } else {
        callbacks2.empty();
      }
    }
  }
  dispose() {
    each(this._events, (eventName, event) => {
      event.empty();
    });
  }
};

// node_modules/devextreme/esm/core/utils/storage.js
var window5 = getWindow();
var getSessionStorage = function() {
  var sessionStorage;
  try {
    sessionStorage = window5.sessionStorage;
  } catch (e) {
  }
  return sessionStorage;
};

// node_modules/devextreme/esm/core/utils/view_port.js
var ready = ready_callbacks_default.add;
var changeCallback = callbacks_default();
var $originalViewPort = renderer_default();
var value = /* @__PURE__ */ function() {
  var $current;
  return function(element) {
    if (!arguments.length) {
      return $current;
    }
    var $element = renderer_default(element);
    $originalViewPort = $element;
    var isNewViewportFound = !!$element.length;
    var prevViewPort = value();
    $current = isNewViewportFound ? $element : renderer_default("body");
    changeCallback.fire(isNewViewportFound ? value() : renderer_default(), prevViewPort);
  };
}();
ready(function() {
  value(".dx-viewport");
});
function originalViewPort() {
  return $originalViewPort;
}

// node_modules/devextreme/esm/core/devices.js
var window6 = getWindow();
var KNOWN_UA_TABLE = {
  iPhone: "iPhone",
  iPhone5: "iPhone",
  iPhone6: "iPhone",
  iPhone6plus: "iPhone",
  iPad: "iPad",
  iPadMini: "iPad Mini",
  androidPhone: "Android Mobile",
  androidTablet: "Android",
  msSurface: "Windows ARM Tablet PC",
  desktop: "desktop"
};
var DEFAULT_DEVICE = {
  deviceType: "desktop",
  platform: "generic",
  version: [],
  phone: false,
  tablet: false,
  android: false,
  ios: false,
  generic: true,
  grade: "A",
  mac: false
};
var UA_PARSERS = {
  generic(userAgent) {
    var isPhone = /windows phone/i.test(userAgent) || userAgent.match(/WPDesktop/);
    var isTablet = !isPhone && /Windows(.*)arm(.*)Tablet PC/i.test(userAgent);
    var isDesktop = !isPhone && !isTablet && /msapphost/i.test(userAgent);
    var isMac = /((intel|ppc) mac os x)/.test(userAgent.toLowerCase());
    if (!(isPhone || isTablet || isDesktop || isMac)) {
      return null;
    }
    return {
      deviceType: isPhone ? "phone" : isTablet ? "tablet" : "desktop",
      platform: "generic",
      version: [],
      grade: "A",
      mac: isMac
    };
  },
  appleTouchDevice(userAgent) {
    var navigator3 = getNavigator();
    var isIpadOs = /Macintosh/i.test(userAgent) && (null === navigator3 || void 0 === navigator3 ? void 0 : navigator3.maxTouchPoints) > 2;
    var isAppleDevice = /ip(hone|od|ad)/i.test(userAgent);
    if (!isAppleDevice && !isIpadOs) {
      return null;
    }
    var isPhone = /ip(hone|od)/i.test(userAgent);
    var matches = userAgent.match(/os\s{0,}X? (\d+)_(\d+)_?(\d+)?/i);
    var version2 = matches ? [parseInt(matches[1], 10), parseInt(matches[2], 10), parseInt(matches[3] || 0, 10)] : [];
    var isIPhone4 = 480 === window6.screen.height;
    var grade = isIPhone4 ? "B" : "A";
    return {
      deviceType: isPhone ? "phone" : "tablet",
      platform: "ios",
      version: version2,
      grade
    };
  },
  android(userAgent) {
    var isAndroid = /android|htc_|silk/i.test(userAgent);
    var isWinPhone = /windows phone/i.test(userAgent);
    if (!isAndroid || isWinPhone) {
      return null;
    }
    var isPhone = /mobile/i.test(userAgent);
    var matches = userAgent.match(/android (\d+)\.?(\d+)?\.?(\d+)?/i);
    var version2 = matches ? [parseInt(matches[1], 10), parseInt(matches[2] || 0, 10), parseInt(matches[3] || 0, 10)] : [];
    var worseThan4_4 = version2.length > 1 && (version2[0] < 4 || 4 === version2[0] && version2[1] < 4);
    var grade = worseThan4_4 ? "B" : "A";
    return {
      deviceType: isPhone ? "phone" : "tablet",
      platform: "android",
      version: version2,
      grade
    };
  }
};
var UA_PARSERS_ARRAY = [UA_PARSERS.appleTouchDevice, UA_PARSERS.android, UA_PARSERS.generic];
var Devices = class {
  constructor(options2) {
    this._window = (null === options2 || void 0 === options2 ? void 0 : options2.window) || window6;
    this._realDevice = this._getDevice();
    this._currentDevice = void 0;
    this._currentOrientation = void 0;
    this._eventsStrategy = new EventsStrategy(this);
    this.changed = callbacks_default();
    if (hasWindow()) {
      ready_callbacks_default.add(this._recalculateOrientation.bind(this));
      resize_callbacks_default.add(this._recalculateOrientation.bind(this));
    }
  }
  current(deviceOrName) {
    if (deviceOrName) {
      this._currentDevice = this._getDevice(deviceOrName);
      this._forced = true;
      this.changed.fire();
      return;
    }
    if (!this._currentDevice) {
      deviceOrName = void 0;
      try {
        deviceOrName = this._getDeviceOrNameFromWindowScope();
      } catch (e) {
        deviceOrName = this._getDeviceNameFromSessionStorage();
      } finally {
        if (!deviceOrName) {
          deviceOrName = this._getDeviceNameFromSessionStorage();
        }
        if (deviceOrName) {
          this._forced = true;
        }
      }
      this._currentDevice = this._getDevice(deviceOrName);
    }
    return this._currentDevice;
  }
  real(forceDevice) {
    return extend({}, this._realDevice);
  }
  orientation() {
    return this._currentOrientation;
  }
  isForced() {
    return this._forced;
  }
  isRippleEmulator() {
    return !!this._window.tinyHippos;
  }
  _getCssClasses(device) {
    var result2 = [];
    var realDevice2 = this._realDevice;
    device = device || this.current();
    if (device.deviceType) {
      result2.push("dx-device-".concat(device.deviceType));
      if ("desktop" !== device.deviceType) {
        result2.push("dx-device-mobile");
      }
    }
    result2.push("dx-device-".concat(realDevice2.platform));
    if (realDevice2.version && realDevice2.version.length) {
      result2.push("dx-device-".concat(realDevice2.platform, "-").concat(realDevice2.version[0]));
    }
    if (this.isSimulator()) {
      result2.push("dx-simulator");
    }
    if (config_default().rtlEnabled) {
      result2.push("dx-rtl");
    }
    return result2;
  }
  attachCssClasses(element, device) {
    this._deviceClasses = this._getCssClasses(device).join(" ");
    renderer_default(element).addClass(this._deviceClasses);
  }
  detachCssClasses(element) {
    renderer_default(element).removeClass(this._deviceClasses);
  }
  isSimulator() {
    try {
      return this._isSimulator || hasWindow() && this._window.top !== this._window.self && this._window.top["dx-force-device"] || this.isRippleEmulator();
    } catch (e) {
      return false;
    }
  }
  forceSimulator() {
    this._isSimulator = true;
  }
  _getDevice(deviceName) {
    if ("genericPhone" === deviceName) {
      deviceName = {
        deviceType: "phone",
        platform: "generic",
        generic: true
      };
    }
    if (isPlainObject(deviceName)) {
      return this._fromConfig(deviceName);
    } else {
      var ua;
      if (deviceName) {
        ua = KNOWN_UA_TABLE[deviceName];
        if (!ua) {
          throw errors_default.Error("E0005");
        }
      } else {
        var navigator3 = getNavigator();
        ua = navigator3.userAgent;
      }
      return this._fromUA(ua);
    }
  }
  _getDeviceOrNameFromWindowScope() {
    var result2;
    if (hasWindow() && (this._window.top["dx-force-device-object"] || this._window.top["dx-force-device"])) {
      result2 = this._window.top["dx-force-device-object"] || this._window.top["dx-force-device"];
    }
    return result2;
  }
  _getDeviceNameFromSessionStorage() {
    var sessionStorage = getSessionStorage();
    if (!sessionStorage) {
      return;
    }
    var deviceOrName = sessionStorage.getItem("dx-force-device");
    try {
      return JSON.parse(deviceOrName);
    } catch (ex) {
      return deviceOrName;
    }
  }
  _fromConfig(config3) {
    var result2 = extend({}, DEFAULT_DEVICE, this._currentDevice, config3);
    var shortcuts = {
      phone: "phone" === result2.deviceType,
      tablet: "tablet" === result2.deviceType,
      android: "android" === result2.platform,
      ios: "ios" === result2.platform,
      generic: "generic" === result2.platform
    };
    return extend(result2, shortcuts);
  }
  _fromUA(ua) {
    for (var idx = 0; idx < UA_PARSERS_ARRAY.length; idx += 1) {
      var parser = UA_PARSERS_ARRAY[idx];
      var config3 = parser(ua);
      if (config3) {
        return this._fromConfig(config3);
      }
    }
    return DEFAULT_DEVICE;
  }
  _changeOrientation() {
    var $window = renderer_default(this._window);
    var orientation = getHeight($window) > getWidth($window) ? "portrait" : "landscape";
    if (this._currentOrientation === orientation) {
      return;
    }
    this._currentOrientation = orientation;
    this._eventsStrategy.fireEvent("orientationChanged", [{
      orientation
    }]);
  }
  _recalculateOrientation() {
    var windowWidth = getWidth(this._window);
    if (this._currentWidth === windowWidth) {
      return;
    }
    this._currentWidth = windowWidth;
    this._changeOrientation();
  }
  on(eventName, eventHandler) {
    this._eventsStrategy.on(eventName, eventHandler);
    return this;
  }
  off(eventName, eventHandler) {
    this._eventsStrategy.off(eventName, eventHandler);
    return this;
  }
};
var devices = new Devices();
var viewPortElement = value();
if (viewPortElement) {
  devices.attachCssClasses(viewPortElement);
}
changeCallback.add((viewPort2, prevViewport) => {
  devices.detachCssClasses(prevViewport);
  devices.attachCssClasses(viewPort2);
});
var devices_default = devices;

// node_modules/devextreme/esm/core/utils/support.js
var {
  maxTouchPoints
} = getNavigator();
var transitionEndEventNames = {
  webkitTransition: "webkitTransitionEnd",
  MozTransition: "transitionend",
  OTransition: "oTransitionEnd",
  transition: "transitionend"
};
var supportProp = function(prop) {
  return !!styleProp(prop);
};
var isNativeScrollingSupported = function() {
  var {
    platform,
    mac: isMac
  } = devices_default.real();
  var isNativeScrollDevice = "ios" === platform || "android" === platform || isMac;
  return isNativeScrollDevice;
};
var inputType = function(type2) {
  if ("text" === type2) {
    return true;
  }
  var input = dom_adapter_default.createElement("input");
  try {
    input.setAttribute("type", type2);
    input.value = "wrongValue";
    return !input.value;
  } catch (e) {
    return false;
  }
};
var detectTouchEvents = function(hasWindowProperty, maxTouchPoints2) {
  return (hasWindowProperty("ontouchstart") || !!maxTouchPoints2) && !hasWindowProperty("callPhantom");
};
var detectPointerEvent = function(hasWindowProperty) {
  return hasWindowProperty("PointerEvent");
};
var touchEvents = detectTouchEvents(hasProperty, maxTouchPoints);
var pointerEvents = detectPointerEvent(hasProperty);
var touchPointersPresent = !!maxTouchPoints;
var touch = touchEvents || pointerEvents && touchPointersPresent;
var transition = call_once_default(function() {
  return supportProp("transition");
});
var transitionEndEventName = call_once_default(function() {
  return transitionEndEventNames[styleProp("transition")];
});
var animation = call_once_default(function() {
  return supportProp("animation");
});
var nativeScrolling = isNativeScrollingSupported();

// node_modules/devextreme/esm/core/utils/dom.js
var window7 = getWindow();
var getRootNodeHost = (element) => {
  if (!element.getRootNode) {
    return;
  }
  var host = element.getRootNode().host;
  if (isString(host)) {
    return;
  }
  return host;
};
var resetActiveElement = () => {
  var activeElement = dom_adapter_default.getActiveElement();
  if (activeElement && activeElement !== dom_adapter_default.getBody()) {
    var _activeElement$blur;
    null === (_activeElement$blur = activeElement.blur) || void 0 === _activeElement$blur ? void 0 : _activeElement$blur.call(activeElement);
  }
};
var clearSelection = () => {
  var selection = window7.getSelection();
  if (!selection) {
    return;
  }
  if ("Caret" === selection.type) {
    return;
  }
  if (selection.empty) {
    selection.empty();
  } else if (selection.removeAllRanges) {
    try {
      selection.removeAllRanges();
    } catch (e) {
    }
  }
};
var closestCommonParent = (startTarget, endTarget) => {
  var $startTarget = renderer_default(startTarget);
  var $endTarget = renderer_default(endTarget);
  if ($startTarget[0] === $endTarget[0]) {
    return $startTarget[0];
  }
  var $startParents = $startTarget.parents();
  var $endParents = $endTarget.parents();
  var startingParent = Math.min($startParents.length, $endParents.length);
  for (var i = -startingParent; i < 0; i++) {
    if ($startParents.get(i) === $endParents.get(i)) {
      return $startParents.get(i);
    }
  }
};
var normalizeTemplateElement = (element) => {
  var $element = isDefined(element) && (element.nodeType || isRenderer(element)) ? renderer_default(element) : renderer_default("<div>").html(element).contents();
  if (1 === $element.length) {
    if ($element.is("script")) {
      $element = normalizeTemplateElement($element.html().trim());
    } else if ($element.is("table")) {
      $element = $element.children("tbody").contents();
    }
  }
  return $element;
};
var clipboardText = (event, text) => {
  var clipboard = event.originalEvent && event.originalEvent.clipboardData || window7.clipboardData;
  if (!text) {
    return clipboard && clipboard.getData("Text");
  }
  clipboard && clipboard.setData("Text", text);
};
var contains2 = (container, element) => {
  if (!element) {
    return false;
  }
  if (isWindow(container)) {
    return contains2(container.document, element);
  }
  return container.contains(element) || contains2(container, getRootNodeHost(element));
};
var createTextElementHiddenCopy = (element, text, options2) => {
  var elementStyles = window7.getComputedStyle(renderer_default(element).get(0));
  var includePaddings = options2 && options2.includePaddings;
  return renderer_default("<div>").text(text).css({
    fontStyle: elementStyles.fontStyle,
    fontVariant: elementStyles.fontVariant,
    fontWeight: elementStyles.fontWeight,
    fontSize: elementStyles.fontSize,
    fontFamily: elementStyles.fontFamily,
    letterSpacing: elementStyles.letterSpacing,
    border: elementStyles.border,
    paddingTop: includePaddings ? elementStyles.paddingTop : "",
    paddingRight: includePaddings ? elementStyles.paddingRight : "",
    paddingBottom: includePaddings ? elementStyles.paddingBottom : "",
    paddingLeft: includePaddings ? elementStyles.paddingLeft : "",
    visibility: "hidden",
    whiteSpace: "pre",
    position: "absolute",
    float: "left"
  });
};
var insertBefore = (element, newElement) => {
  if (newElement) {
    dom_adapter_default.insertElement(element.parentNode, newElement, element);
  }
  return element;
};
var replaceWith = (element, newElement) => {
  if (!(newElement && newElement[0])) {
    return;
  }
  if (newElement.is(element)) {
    return element;
  }
  each(newElement, (_, currentElement) => {
    insertBefore(element[0], currentElement);
  });
  element.remove();
  return newElement;
};
var isElementInDom = ($element) => {
  var element = null === $element || void 0 === $element ? void 0 : $element.get(0);
  var shadowHost = null === element || void 0 === element ? void 0 : element.getRootNode().host;
  return !!renderer_default(shadowHost || element).closest(getWindow().document).length;
};

// node_modules/devextreme/esm/animation/frame.js
var window8 = hasWindow() ? getWindow() : {};
var FRAME_ANIMATION_STEP_TIME = 1e3 / 60;
var request = function(callback) {
  return setTimeout(callback, FRAME_ANIMATION_STEP_TIME);
};
var cancel = function(requestID) {
  clearTimeout(requestID);
};
var setAnimationFrameMethods = call_once_default(function() {
  var nativeRequest = window8.requestAnimationFrame || window8.webkitRequestAnimationFrame || window8.mozRequestAnimationFrame || window8.oRequestAnimationFrame || window8.msRequestAnimationFrame;
  var nativeCancel = window8.cancelAnimationFrame || window8.webkitCancelAnimationFrame || window8.mozCancelAnimationFrame || window8.oCancelAnimationFrame || window8.msCancelAnimationFrame;
  if (nativeRequest && nativeCancel) {
    request = nativeRequest;
    cancel = nativeCancel;
  }
});
function requestAnimationFrame() {
  setAnimationFrameMethods();
  return request.apply(window8, arguments);
}
function cancelAnimationFrame() {
  setAnimationFrameMethods();
  cancel.apply(window8, arguments);
}

// node_modules/devextreme/esm/events/core/event_registrator.js
var registerEvent = function(name2, eventObject) {
  var strategy4 = {};
  if ("noBubble" in eventObject) {
    strategy4.noBubble = eventObject.noBubble;
  }
  if ("bindType" in eventObject) {
    strategy4.bindType = eventObject.bindType;
  }
  if ("delegateType" in eventObject) {
    strategy4.delegateType = eventObject.delegateType;
  }
  each(["setup", "teardown", "add", "remove", "trigger", "handle", "_default", "dispose"], function(_, methodName) {
    if (!eventObject[methodName]) {
      return;
    }
    strategy4[methodName] = function() {
      var args = [].slice.call(arguments);
      args.unshift(this);
      return eventObject[methodName].apply(eventObject, args);
    };
  });
  event_registrator_callbacks_default.fire(name2, strategy4);
};
registerEvent.callbacks = event_registrator_callbacks_default;
var event_registrator_default = registerEvent;

// node_modules/devextreme/esm/events/remove.js
var removeEvent = "dxremove";
var eventPropName = "dxRemoveEvent";
beforeCleanData(function(elements) {
  elements = [].slice.call(elements);
  for (var i = 0; i < elements.length; i++) {
    var $element = renderer_default(elements[i]);
    if ($element.prop(eventPropName)) {
      $element[0][eventPropName] = null;
      events_engine_default.triggerHandler($element, removeEvent);
    }
  }
});
event_registrator_default(removeEvent, {
  noBubble: true,
  setup: function(element) {
    renderer_default(element).prop(eventPropName, true);
  }
});

// node_modules/devextreme/esm/events/utils/event_nodes_disposing.js
function nodesByEvent(event) {
  return event && [event.target, event.delegateTarget, event.relatedTarget, event.currentTarget].filter((node) => !!node);
}
var subscribeNodesDisposing = (event, callback) => {
  events_engine_default.one(nodesByEvent(event), removeEvent, callback);
};
var unsubscribeNodesDisposing = (event, callback) => {
  events_engine_default.off(nodesByEvent(event), removeEvent, callback);
};

// node_modules/devextreme/esm/events/pointer/base.js
var POINTER_EVENTS_NAMESPACE = "dxPointerEvents";
var BaseStrategy = class_default.inherit({
  ctor: function(eventName, originalEvents) {
    this._eventName = eventName;
    this._originalEvents = addNamespace2(originalEvents, POINTER_EVENTS_NAMESPACE);
    this._handlerCount = 0;
    this.noBubble = this._isNoBubble();
  },
  _isNoBubble: function() {
    var eventName = this._eventName;
    return "dxpointerenter" === eventName || "dxpointerleave" === eventName;
  },
  _handler: function(e) {
    var _originalEvent$target;
    var delegateTarget = this._getDelegateTarget(e);
    var event = {
      type: this._eventName,
      pointerType: e.pointerType || eventSource(e),
      originalEvent: e,
      delegateTarget,
      timeStamp: browser_default.mozilla ? (/* @__PURE__ */ new Date()).getTime() : e.timeStamp
    };
    var originalEvent = e.originalEvent;
    if (null !== originalEvent && void 0 !== originalEvent && null !== (_originalEvent$target = originalEvent.target) && void 0 !== _originalEvent$target && _originalEvent$target.shadowRoot) {
      var _originalEvent$path, _originalEvent$compos;
      var path = null !== (_originalEvent$path = originalEvent.path) && void 0 !== _originalEvent$path ? _originalEvent$path : null === (_originalEvent$compos = originalEvent.composedPath) || void 0 === _originalEvent$compos ? void 0 : _originalEvent$compos.call(originalEvent);
      event.target = path[0];
    }
    return this._fireEvent(event);
  },
  _getDelegateTarget: function(e) {
    var delegateTarget;
    if (this.noBubble) {
      delegateTarget = e.delegateTarget;
    }
    return delegateTarget;
  },
  _fireEvent: function(args) {
    return fireEvent(args);
  },
  _setSelector: function(handleObj) {
    this._selector = this.noBubble && handleObj ? handleObj.selector : null;
  },
  _getSelector: function() {
    return this._selector;
  },
  setup: function() {
    return true;
  },
  add: function(element, handleObj) {
    if (this._handlerCount <= 0 || this.noBubble) {
      element = this.noBubble ? element : dom_adapter_default.getDocument();
      this._setSelector(handleObj);
      var that = this;
      events_engine_default.on(element, this._originalEvents, this._getSelector(), function(e) {
        that._handler(e);
      });
    }
    if (!this.noBubble) {
      this._handlerCount++;
    }
  },
  remove: function(handleObj) {
    this._setSelector(handleObj);
    if (!this.noBubble) {
      this._handlerCount--;
    }
  },
  teardown: function(element) {
    if (this._handlerCount && !this.noBubble) {
      return;
    }
    element = this.noBubble ? element : dom_adapter_default.getDocument();
    if (this._originalEvents !== "." + POINTER_EVENTS_NAMESPACE) {
      events_engine_default.off(element, this._originalEvents, this._getSelector());
    }
  },
  dispose: function(element) {
    element = this.noBubble ? element : dom_adapter_default.getDocument();
    events_engine_default.off(element, this._originalEvents);
  }
});
var base_default = BaseStrategy;

// node_modules/devextreme/esm/events/pointer/touch.js
var eventMap = {
  dxpointerdown: "touchstart",
  dxpointermove: "touchmove",
  dxpointerup: "touchend",
  dxpointercancel: "touchcancel",
  dxpointerover: "",
  dxpointerout: "",
  dxpointerenter: "",
  dxpointerleave: ""
};
var normalizeTouchEvent = function(e) {
  var pointers = [];
  each(e.touches, function(_, touch2) {
    pointers.push(extend({
      pointerId: touch2.identifier
    }, touch2));
  });
  return {
    pointers,
    pointerId: e.changedTouches[0].identifier
  };
};
var skipTouchWithSameIdentifier = function(pointerEvent) {
  return "ios" === devices_default.real().platform && ("dxpointerdown" === pointerEvent || "dxpointerup" === pointerEvent);
};
var TouchStrategy = base_default.inherit({
  ctor: function() {
    this.callBase.apply(this, arguments);
    this._pointerId = 0;
  },
  _handler: function(e) {
    if (skipTouchWithSameIdentifier(this._eventName)) {
      var touch2 = e.changedTouches[0];
      if (this._pointerId === touch2.identifier && 0 !== this._pointerId) {
        return;
      }
      this._pointerId = touch2.identifier;
    }
    return this.callBase.apply(this, arguments);
  },
  _fireEvent: function(args) {
    return this.callBase(extend(normalizeTouchEvent(args.originalEvent), args));
  }
});
TouchStrategy.map = eventMap;
TouchStrategy.normalize = normalizeTouchEvent;
var touch_default = TouchStrategy;

// node_modules/devextreme/esm/events/pointer/observer.js
var addEventsListener = function(events, handler) {
  ready_callbacks_default.add(function() {
    events.split(" ").forEach(function(event) {
      dom_adapter_default.listen(dom_adapter_default.getDocument(), event, handler, true);
    });
  });
};
var Observer = function(eventMap4, pointerEquals, onPointerAdding) {
  onPointerAdding = onPointerAdding || function() {
  };
  var pointers = [];
  var getPointerIndex = function(e) {
    var index2 = -1;
    each(pointers, function(i, pointer2) {
      if (!pointerEquals(e, pointer2)) {
        return true;
      }
      index2 = i;
      return false;
    });
    return index2;
  };
  var removePointer = function(e) {
    var index2 = getPointerIndex(e);
    if (index2 > -1) {
      pointers.splice(index2, 1);
    }
  };
  addEventsListener(eventMap4.dxpointerdown, function(e) {
    if (-1 === getPointerIndex(e)) {
      onPointerAdding(e);
      pointers.push(e);
    }
  });
  addEventsListener(eventMap4.dxpointermove, function(e) {
    pointers[getPointerIndex(e)] = e;
  });
  addEventsListener(eventMap4.dxpointerup, removePointer);
  addEventsListener(eventMap4.dxpointercancel, removePointer);
  this.pointers = function() {
    return pointers;
  };
  this.reset = function() {
    pointers = [];
  };
};
var observer_default = Observer;

// node_modules/devextreme/esm/events/pointer/mouse.js
var eventMap2 = {
  dxpointerdown: "mousedown",
  dxpointermove: "mousemove",
  dxpointerup: "mouseup",
  dxpointercancel: "",
  dxpointerover: "mouseover",
  dxpointerout: "mouseout",
  dxpointerenter: "mouseenter",
  dxpointerleave: "mouseleave"
};
var normalizeMouseEvent = function(e) {
  e.pointerId = 1;
  return {
    pointers: observer.pointers(),
    pointerId: 1
  };
};
var observer;
var activated = false;
var activateStrategy = function() {
  if (activated) {
    return;
  }
  observer = new observer_default(eventMap2, function() {
    return true;
  });
  activated = true;
};
var MouseStrategy = base_default.inherit({
  ctor: function() {
    this.callBase.apply(this, arguments);
    activateStrategy();
  },
  _fireEvent: function(args) {
    return this.callBase(extend(normalizeMouseEvent(args.originalEvent), args));
  }
});
MouseStrategy.map = eventMap2;
MouseStrategy.normalize = normalizeMouseEvent;
MouseStrategy.activate = activateStrategy;
MouseStrategy.resetObserver = function() {
  observer.reset();
};
var mouse_default = MouseStrategy;

// node_modules/devextreme/esm/events/pointer/mouse_and_touch.js
var eventMap3 = {
  dxpointerdown: "touchstart mousedown",
  dxpointermove: "touchmove mousemove",
  dxpointerup: "touchend mouseup",
  dxpointercancel: "touchcancel",
  dxpointerover: "mouseover",
  dxpointerout: "mouseout",
  dxpointerenter: "mouseenter",
  dxpointerleave: "mouseleave"
};
var activated2 = false;
var activateStrategy2 = function() {
  if (activated2) {
    return;
  }
  mouse_default.activate();
  activated2 = true;
};
var MouseAndTouchStrategy = base_default.inherit({
  EVENT_LOCK_TIMEOUT: 100,
  ctor: function() {
    this.callBase.apply(this, arguments);
    activateStrategy2();
  },
  _handler: function(e) {
    var isMouse = isMouseEvent(e);
    if (!isMouse) {
      this._skipNextEvents = true;
    }
    if (isMouse && this._mouseLocked) {
      return;
    }
    if (isMouse && this._skipNextEvents) {
      this._skipNextEvents = false;
      this._mouseLocked = true;
      clearTimeout(this._unlockMouseTimer);
      var that = this;
      this._unlockMouseTimer = setTimeout(function() {
        that._mouseLocked = false;
      }, this.EVENT_LOCK_TIMEOUT);
      return;
    }
    return this.callBase(e);
  },
  _fireEvent: function(args) {
    var normalizer = isMouseEvent(args.originalEvent) ? mouse_default.normalize : touch_default.normalize;
    return this.callBase(extend(normalizer(args.originalEvent), args));
  },
  dispose: function() {
    this.callBase();
    this._skipNextEvents = false;
    this._mouseLocked = false;
    clearTimeout(this._unlockMouseTimer);
  }
});
MouseAndTouchStrategy.map = eventMap3;
MouseAndTouchStrategy.resetObserver = mouse_default.resetObserver;
var mouse_and_touch_default = MouseAndTouchStrategy;

// node_modules/devextreme/esm/events/pointer.js
var getStrategy = (support, _ref) => {
  var {
    tablet,
    phone
  } = _ref;
  var pointerEventStrategy = getStrategyFromGlobalConfig();
  if (pointerEventStrategy) {
    return pointerEventStrategy;
  }
  if (support.touch && !(tablet || phone)) {
    return mouse_and_touch_default;
  }
  if (support.touch) {
    return touch_default;
  }
  return mouse_default;
};
var EventStrategy = getStrategy(support_exports, devices_default.real());
each(EventStrategy.map, (pointerEvent, originalEvents) => {
  event_registrator_default(pointerEvent, new EventStrategy(pointerEvent, originalEvents));
});
var pointer = {
  down: "dxpointerdown",
  up: "dxpointerup",
  move: "dxpointermove",
  cancel: "dxpointercancel",
  enter: "dxpointerenter",
  leave: "dxpointerleave",
  over: "dxpointerover",
  out: "dxpointerout"
};
function getStrategyFromGlobalConfig() {
  var eventStrategyName = config_default().pointerEventStrategy;
  return {
    "mouse-and-touch": mouse_and_touch_default,
    touch: touch_default,
    mouse: mouse_default
  }[eventStrategyName];
}
var pointer_default = pointer;

// node_modules/devextreme/esm/events/core/emitter.js
var Emitter = class_default.inherit({
  ctor: function(element) {
    this._$element = renderer_default(element);
    this._cancelCallback = callbacks_default();
    this._acceptCallback = callbacks_default();
  },
  getElement: function() {
    return this._$element;
  },
  validate: function(e) {
    return !isDxMouseWheelEvent(e);
  },
  validatePointers: function(e) {
    return 1 === hasTouches(e);
  },
  allowInterruptionByMouseWheel: function() {
    return true;
  },
  configure: function(data3) {
    extend(this, data3);
  },
  addCancelCallback: function(callback) {
    this._cancelCallback.add(callback);
  },
  removeCancelCallback: function() {
    this._cancelCallback.empty();
  },
  _cancel: function(e) {
    this._cancelCallback.fire(this, e);
  },
  addAcceptCallback: function(callback) {
    this._acceptCallback.add(callback);
  },
  removeAcceptCallback: function() {
    this._acceptCallback.empty();
  },
  _accept: function(e) {
    this._acceptCallback.fire(this, e);
  },
  _requestAccept: function(e) {
    this._acceptRequestEvent = e;
  },
  _forgetAccept: function() {
    this._accept(this._acceptRequestEvent);
    this._acceptRequestEvent = null;
  },
  start: noop2,
  move: noop2,
  end: noop2,
  cancel: noop2,
  reset: function() {
    if (this._acceptRequestEvent) {
      this._accept(this._acceptRequestEvent);
    }
  },
  _fireEvent: function(eventName, e, params) {
    var eventData2 = extend({
      type: eventName,
      originalEvent: e,
      target: this._getEmitterTarget(e),
      delegateTarget: this.getElement().get(0)
    }, params);
    e = fireEvent(eventData2);
    if (e.cancel) {
      this._cancel(e);
    }
    return e;
  },
  _getEmitterTarget: function(e) {
    return (this.delegateSelector ? renderer_default(e.target).closest(this.delegateSelector) : this.getElement()).get(0);
  },
  dispose: noop2
});
var emitter_default = Emitter;

// node_modules/devextreme/esm/events/core/wheel.js
var EVENT_NAME = "dxmousewheel";
var EVENT_NAMESPACE = "dxWheel";
var NATIVE_EVENT_NAME = "wheel";
var PIXEL_MODE = 0;
var DELTA_MUTLIPLIER = 30;
var wheel = {
  setup: function(element) {
    var $element = renderer_default(element);
    events_engine_default.on($element, addNamespace2(NATIVE_EVENT_NAME, EVENT_NAMESPACE), wheel._wheelHandler.bind(wheel));
  },
  teardown: function(element) {
    events_engine_default.off(element, ".".concat(EVENT_NAMESPACE));
  },
  _wheelHandler: function(e) {
    var {
      deltaMode,
      deltaY,
      deltaX,
      deltaZ
    } = e.originalEvent;
    fireEvent({
      type: EVENT_NAME,
      originalEvent: e,
      delta: this._normalizeDelta(deltaY, deltaMode),
      deltaX,
      deltaY,
      deltaZ,
      deltaMode,
      pointerType: "mouse"
    });
    e.stopPropagation();
  },
  _normalizeDelta(delta) {
    var deltaMode = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : PIXEL_MODE;
    if (deltaMode === PIXEL_MODE) {
      return -delta;
    } else {
      return -DELTA_MUTLIPLIER * delta;
    }
  }
};
event_registrator_default(EVENT_NAME, wheel);

// node_modules/devextreme/esm/events/core/emitter_registrator.js
var MANAGER_EVENT = "dxEventManager";
var EMITTER_DATA = "dxEmitter";
var EventManager = class_default.inherit({
  ctor: function() {
    this._attachHandlers();
    this.reset();
    this._proxiedCancelHandler = this._cancelHandler.bind(this);
    this._proxiedAcceptHandler = this._acceptHandler.bind(this);
  },
  _attachHandlers: function() {
    ready_callbacks_default.add((function() {
      var document2 = dom_adapter_default.getDocument();
      events_engine_default.subscribeGlobal(document2, addNamespace2(pointer_default.down, MANAGER_EVENT), this._pointerDownHandler.bind(this));
      events_engine_default.subscribeGlobal(document2, addNamespace2(pointer_default.move, MANAGER_EVENT), this._pointerMoveHandler.bind(this));
      events_engine_default.subscribeGlobal(document2, addNamespace2([pointer_default.up, pointer_default.cancel].join(" "), MANAGER_EVENT), this._pointerUpHandler.bind(this));
      events_engine_default.subscribeGlobal(document2, addNamespace2(EVENT_NAME, MANAGER_EVENT), this._mouseWheelHandler.bind(this));
    }).bind(this));
  },
  _eachEmitter: function(callback) {
    var activeEmitters = this._activeEmitters || [];
    var i = 0;
    while (activeEmitters.length > i) {
      var emitter = activeEmitters[i];
      if (false === callback(emitter)) {
        break;
      }
      if (activeEmitters[i] === emitter) {
        i++;
      }
    }
  },
  _applyToEmitters: function(method, arg) {
    this._eachEmitter(function(emitter) {
      emitter[method].call(emitter, arg);
    });
  },
  reset: function() {
    this._eachEmitter(this._proxiedCancelHandler);
    this._activeEmitters = [];
  },
  resetEmitter: function(emitter) {
    this._proxiedCancelHandler(emitter);
  },
  _pointerDownHandler: function(e) {
    if (isMouseEvent(e) && e.which > 1) {
      return;
    }
    this._updateEmitters(e);
  },
  _updateEmitters: function(e) {
    if (!this._isSetChanged(e)) {
      return;
    }
    this._cleanEmitters(e);
    this._fetchEmitters(e);
  },
  _isSetChanged: function(e) {
    var currentSet = this._closestEmitter(e);
    var previousSet = this._emittersSet || [];
    var setChanged = currentSet.length !== previousSet.length;
    each(currentSet, function(index2, emitter) {
      setChanged = setChanged || previousSet[index2] !== emitter;
      return !setChanged;
    });
    this._emittersSet = currentSet;
    return setChanged;
  },
  _closestEmitter: function(e) {
    var that = this;
    var result2 = [];
    var $element = renderer_default(e.target);
    function handleEmitter(_, emitter) {
      if (!!emitter && emitter.validatePointers(e) && emitter.validate(e)) {
        emitter.addCancelCallback(that._proxiedCancelHandler);
        emitter.addAcceptCallback(that._proxiedAcceptHandler);
        result2.push(emitter);
      }
    }
    while ($element.length) {
      var emitters = data($element.get(0), EMITTER_DATA) || [];
      each(emitters, handleEmitter);
      $element = $element.parent();
    }
    return result2;
  },
  _acceptHandler: function(acceptedEmitter, e) {
    var that = this;
    this._eachEmitter(function(emitter) {
      if (emitter !== acceptedEmitter) {
        that._cancelEmitter(emitter, e);
      }
    });
  },
  _cancelHandler: function(canceledEmitter, e) {
    this._cancelEmitter(canceledEmitter, e);
  },
  _cancelEmitter: function(emitter, e) {
    var activeEmitters = this._activeEmitters;
    if (e) {
      emitter.cancel(e);
    } else {
      emitter.reset();
    }
    emitter.removeCancelCallback();
    emitter.removeAcceptCallback();
    var emitterIndex = activeEmitters.indexOf(emitter);
    if (emitterIndex > -1) {
      activeEmitters.splice(emitterIndex, 1);
    }
  },
  _cleanEmitters: function(e) {
    this._applyToEmitters("end", e);
    this.reset(e);
  },
  _fetchEmitters: function(e) {
    this._activeEmitters = this._emittersSet.slice();
    this._applyToEmitters("start", e);
  },
  _pointerMoveHandler: function(e) {
    this._applyToEmitters("move", e);
  },
  _pointerUpHandler: function(e) {
    this._updateEmitters(e);
  },
  _mouseWheelHandler: function(e) {
    if (!this._allowInterruptionByMouseWheel()) {
      return;
    }
    e.pointers = [null];
    this._pointerDownHandler(e);
    this._adjustWheelEvent(e);
    this._pointerMoveHandler(e);
    e.pointers = [];
    this._pointerUpHandler(e);
  },
  _allowInterruptionByMouseWheel: function() {
    var allowInterruption = true;
    this._eachEmitter(function(emitter) {
      allowInterruption = emitter.allowInterruptionByMouseWheel() && allowInterruption;
      return allowInterruption;
    });
    return allowInterruption;
  },
  _adjustWheelEvent: function(e) {
    var closestGestureEmitter = null;
    this._eachEmitter(function(emitter) {
      if (!emitter.gesture) {
        return;
      }
      var direction2 = emitter.getDirection(e);
      if ("horizontal" !== direction2 && !e.shiftKey || "vertical" !== direction2 && e.shiftKey) {
        closestGestureEmitter = emitter;
        return false;
      }
    });
    if (!closestGestureEmitter) {
      return;
    }
    var direction = closestGestureEmitter.getDirection(e);
    var verticalGestureDirection = "both" === direction && !e.shiftKey || "vertical" === direction;
    var prop = verticalGestureDirection ? "pageY" : "pageX";
    e[prop] += e.delta;
  },
  isActive: function(element) {
    var result2 = false;
    this._eachEmitter(function(emitter) {
      result2 = result2 || emitter.getElement().is(element);
    });
    return result2;
  }
});
var eventManager = new EventManager();
var EMITTER_SUBSCRIPTION_DATA = "dxEmitterSubscription";
var registerEmitter = function(emitterConfig) {
  var emitterClass = emitterConfig.emitter;
  var emitterName = emitterConfig.events[0];
  var emitterEvents = emitterConfig.events;
  each(emitterEvents, function(_, eventName) {
    event_registrator_default(eventName, {
      noBubble: !emitterConfig.bubble,
      setup: function(element) {
        var subscriptions = data(element, EMITTER_SUBSCRIPTION_DATA) || {};
        var emitters = data(element, EMITTER_DATA) || {};
        var emitter = emitters[emitterName] || new emitterClass(element);
        subscriptions[eventName] = true;
        emitters[emitterName] = emitter;
        data(element, EMITTER_DATA, emitters);
        data(element, EMITTER_SUBSCRIPTION_DATA, subscriptions);
      },
      add: function(element, handleObj) {
        var emitters = data(element, EMITTER_DATA);
        var emitter = emitters[emitterName];
        emitter.configure(extend({
          delegateSelector: handleObj.selector
        }, handleObj.data), handleObj.type);
      },
      teardown: function(element) {
        var subscriptions = data(element, EMITTER_SUBSCRIPTION_DATA);
        var emitters = data(element, EMITTER_DATA);
        var emitter = emitters[emitterName];
        delete subscriptions[eventName];
        var disposeEmitter = true;
        each(emitterEvents, function(_2, eventName2) {
          disposeEmitter = disposeEmitter && !subscriptions[eventName2];
          return disposeEmitter;
        });
        if (disposeEmitter) {
          if (eventManager.isActive(element)) {
            eventManager.resetEmitter(emitter);
          }
          emitter && emitter.dispose();
          delete emitters[emitterName];
        }
      }
    });
  });
};
var emitter_registrator_default = registerEmitter;

// node_modules/devextreme/esm/events/click.js
var CLICK_EVENT_NAME = "dxclick";
var prevented = null;
var lastFiredEvent = null;
var onNodeRemove = () => {
  lastFiredEvent = null;
};
var clickHandler = function(e) {
  var originalEvent = e.originalEvent;
  var eventAlreadyFired = lastFiredEvent === originalEvent || originalEvent && originalEvent.DXCLICK_FIRED;
  var leftButton = !e.which || 1 === e.which;
  if (leftButton && !prevented && !eventAlreadyFired) {
    if (originalEvent) {
      originalEvent.DXCLICK_FIRED = true;
    }
    unsubscribeNodesDisposing(lastFiredEvent, onNodeRemove);
    lastFiredEvent = originalEvent;
    subscribeNodesDisposing(lastFiredEvent, onNodeRemove);
    fireEvent({
      type: CLICK_EVENT_NAME,
      originalEvent: e
    });
  }
};
var ClickEmitter = emitter_default.inherit({
  ctor: function(element) {
    this.callBase(element);
    events_engine_default.on(this.getElement(), "click", clickHandler);
  },
  start: function(e) {
    prevented = null;
  },
  cancel: function() {
    prevented = true;
  },
  dispose: function() {
    events_engine_default.off(this.getElement(), "click", clickHandler);
  }
});
!function() {
  var desktopDevice = devices_default.real().generic;
  if (!desktopDevice) {
    var startTarget = null;
    var blurPrevented = false;
    var document2 = dom_adapter_default.getDocument();
    events_engine_default.subscribeGlobal(document2, addNamespace2(pointer_default.down, "NATIVE_CLICK_FIXER"), function(e) {
      startTarget = e.target;
      blurPrevented = e.isDefaultPrevented();
    });
    events_engine_default.subscribeGlobal(document2, addNamespace2("click", "NATIVE_CLICK_FIXER"), function(e) {
      var $target = renderer_default(e.target);
      if (!blurPrevented && startTarget && !$target.is(startTarget) && !renderer_default(startTarget).is("label") && (element = $target, renderer_default(element).is("input, textarea, select, button ,:focus, :focus *"))) {
        resetActiveElement();
      }
      var element;
      startTarget = null;
      blurPrevented = false;
    });
  }
}();
emitter_registrator_default({
  emitter: ClickEmitter,
  bubble: true,
  events: [CLICK_EVENT_NAME]
});

// node_modules/devextreme/esm/events/double_click.js
var DBLCLICK_EVENT_NAME = "dxdblclick";
var DBLCLICK_NAMESPACE = "dxDblClick";
var NAMESPACED_CLICK_EVENT = addNamespace2(CLICK_EVENT_NAME, DBLCLICK_NAMESPACE);
var DBLCLICK_TIMEOUT = 300;
var DblClick = class_default.inherit({
  ctor: function() {
    this._handlerCount = 0;
    this._forgetLastClick();
  },
  _forgetLastClick: function() {
    this._firstClickTarget = null;
    this._lastClickTimeStamp = -DBLCLICK_TIMEOUT;
  },
  add: function() {
    if (this._handlerCount <= 0) {
      events_engine_default.on(dom_adapter_default.getDocument(), NAMESPACED_CLICK_EVENT, this._clickHandler.bind(this));
    }
    this._handlerCount++;
  },
  _clickHandler: function(e) {
    var timeStamp = e.timeStamp || Date.now();
    var timeBetweenClicks = timeStamp - this._lastClickTimeStamp;
    var isSimulated = timeBetweenClicks < 0;
    var isDouble = !isSimulated && timeBetweenClicks < DBLCLICK_TIMEOUT;
    if (isDouble) {
      fireEvent({
        type: DBLCLICK_EVENT_NAME,
        target: closestCommonParent(this._firstClickTarget, e.target),
        originalEvent: e
      });
      this._forgetLastClick();
    } else {
      this._firstClickTarget = e.target;
      this._lastClickTimeStamp = timeStamp;
    }
  },
  remove: function() {
    this._handlerCount--;
    if (this._handlerCount <= 0) {
      this._forgetLastClick();
      events_engine_default.off(dom_adapter_default.getDocument(), NAMESPACED_CLICK_EVENT);
    }
  }
});
event_registrator_default(DBLCLICK_EVENT_NAME, new DblClick());

// node_modules/devextreme/esm/__internal/grids/grid_core/column_state_mixin/m_column_state_mixin.js
var COLUMN_INDICATORS_CLASS = "dx-column-indicators";
var GROUP_PANEL_ITEM_CLASS = "dx-group-panel-item";
var m_column_state_mixin_default = {
  _applyColumnState(options2) {
    var _a2;
    var rtlEnabled = this.option("rtlEnabled");
    var columnAlignment = this._getColumnAlignment(options2.column.alignment, rtlEnabled);
    var parameters = extend(true, {
      columnAlignment
    }, options2);
    var isGroupPanelItem = parameters.rootElement.hasClass(GROUP_PANEL_ITEM_CLASS);
    var $indicatorsContainer = this._createIndicatorContainer(parameters, isGroupPanelItem);
    var $span = renderer_default("<span>").addClass(this._getIndicatorClassName(options2.name));
    var columnsController = null === (_a2 = this.component) || void 0 === _a2 ? void 0 : _a2.getController("columns");
    var indicatorAlignment = (null === columnsController || void 0 === columnsController ? void 0 : columnsController.getHeaderContentAlignment(columnAlignment)) || columnAlignment;
    parameters.container = $indicatorsContainer;
    parameters.indicator = $span;
    this._renderIndicator(parameters);
    $indicatorsContainer[(isGroupPanelItem || !options2.showColumnLines) && "left" === indicatorAlignment ? "appendTo" : "prependTo"](options2.rootElement);
    return $span;
  },
  _getIndicatorClassName: noop2,
  _getColumnAlignment(alignment, rtlEnabled) {
    rtlEnabled = rtlEnabled || this.option("rtlEnabled");
    return alignment && "center" !== alignment ? alignment : getDefaultAlignment(rtlEnabled);
  },
  _createIndicatorContainer(options2, ignoreIndicatorAlignment) {
    var $indicatorsContainer = this._getIndicatorContainer(options2.rootElement);
    var indicatorAlignment = "left" === options2.columnAlignment ? "right" : "left";
    if (!$indicatorsContainer.length) {
      $indicatorsContainer = renderer_default("<div>").addClass(COLUMN_INDICATORS_CLASS);
    }
    this.setAria("role", "presentation", $indicatorsContainer);
    return $indicatorsContainer.css("float", options2.showColumnLines && !ignoreIndicatorAlignment ? indicatorAlignment : null);
  },
  _getIndicatorContainer: ($cell) => $cell && $cell.find(".".concat(COLUMN_INDICATORS_CLASS)),
  _getIndicatorElements($cell) {
    var $indicatorContainer = this._getIndicatorContainer($cell);
    return $indicatorContainer && $indicatorContainer.children();
  },
  _renderIndicator(options2) {
    var $container = options2.container;
    var $indicator = options2.indicator;
    $container && $indicator && $container.append($indicator);
  },
  _updateIndicators(indicatorName) {
    var columns2 = this.getColumns();
    var $cells = this.getColumnElements();
    var $cell;
    if (!$cells || columns2.length !== $cells.length) {
      return;
    }
    for (var i = 0; i < columns2.length; i++) {
      $cell = $cells.eq(i);
      this._updateIndicator($cell, columns2[i], indicatorName);
      var rowOptions = $cell.parent().data("options");
      if (rowOptions && rowOptions.cells) {
        rowOptions.cells[$cell.index()].column = columns2[i];
      }
    }
  },
  _updateIndicator($cell, column, indicatorName) {
    if (!column.command) {
      return this._applyColumnState({
        name: indicatorName,
        rootElement: $cell,
        column,
        showColumnLines: this.option("showColumnLines")
      });
    }
  }
};

// node_modules/devextreme/esm/ui/widget/ui.errors.js
var ui_errors_default = error_default(errors_default.ERROR_MESSAGES, {
  E1001: "Module '{0}'. Controller '{1}' is already registered",
  E1002: "Module '{0}'. Controller '{1}' does not inherit from DevExpress.ui.dxDataGrid.Controller",
  E1003: "Module '{0}'. View '{1}' is already registered",
  E1004: "Module '{0}'. View '{1}' does not inherit from DevExpress.ui.dxDataGrid.View",
  E1005: "Public method '{0}' is already registered",
  E1006: "Public method '{0}.{1}' does not exist",
  E1007: "State storing cannot be provided due to the restrictions of the browser",
  E1010: "The template does not contain the TextBox widget",
  E1011: 'Items cannot be deleted from the List. Implement the "remove" function in the data store',
  E1012: "Editing type '{0}' with the name '{1}' is unsupported",
  E1016: "Unexpected type of data source is provided for a lookup column",
  E1018: "The 'collapseAll' method cannot be called if you use a remote data source",
  E1019: "Search mode '{0}' is unavailable",
  E1020: "The type cannot be changed after initialization",
  E1021: "{0} '{1}' you are trying to remove does not exist",
  E1022: 'The "markers" option is given an invalid value. Assign an array instead',
  E1023: 'The "routes" option is given an invalid value. Assign an array instead',
  E1025: "This layout is too complex to render",
  E1026: 'The "calculateCustomSummary" function is missing from a field whose "summaryType" option is set to "custom"',
  E1031: "Unknown subscription in the Scheduler widget: '{0}'",
  E1032: "Unknown start date in an appointment: '{0}'",
  E1033: "Unknown step in the date navigator: '{0}'",
  E1034: "The browser does not implement an API for saving files",
  E1035: "The editor cannot be created: {0}",
  E1037: "Invalid structure of grouped data",
  E1038: "The browser does not support local storages for local web pages",
  E1039: "A cell's position cannot be calculated",
  E1040: "The '{0}' key value is not unique within the data array",
  E1041: "The '{0}' script is referenced after the DevExtreme scripts or not referenced at all",
  E1042: "{0} requires the key field to be specified",
  E1043: "Changes cannot be processed due to the incorrectly set key",
  E1044: "The key field specified by the keyExpr option does not match the key field specified in the data store",
  E1045: "Editing requires the key field to be specified in the data store",
  E1046: "The '{0}' key field is not found in data objects",
  E1047: 'The "{0}" field is not found in the fields array',
  E1048: 'The "{0}" operation is not found in the filterOperations array',
  E1049: "Column '{0}': filtering is allowed but the 'dataField' or 'name' option is not specified",
  E1050: "The validationRules option does not apply to third-party editors defined in the editCellTemplate",
  E1051: `HtmlEditor's valueType is "{0}", but the {0} converter was not imported.`,
  E1052: '{0} should have the "dataSource" option specified',
  E1053: 'The "buttons" option accepts an array that contains only objects or string values',
  E1054: "All text editor buttons must have names",
  E1055: 'One or several text editor buttons have invalid or non-unique "name" values',
  E1056: 'The {0} widget does not support buttons of the "{1}" type',
  E1058: 'The "startDayHour" and "endDayHour" options must be integers in the [0, 24] range, with "endDayHour" being greater than "startDayHour".',
  E1059: "The following column names are not unique: {0}",
  E1060: "All editable columns must have names",
  E1061: 'The "offset" option must be an integer in the [-1440, 1440] range, divisible by 5 without a remainder.',
  E1062: 'The "cellDuration" must be a positive integer, evenly dividing the ("endDayHour" - "startDayHour") interval into minutes.',
  W1001: 'The "key" option cannot be modified after initialization',
  W1002: "An item with the key '{0}' does not exist",
  W1003: "A group with the key '{0}' in which you are trying to select items does not exist",
  W1004: "The item '{0}' you are trying to select in the group '{1}' does not exist",
  W1005: "Due to column data types being unspecified, data has been loaded twice in order to apply initial filter settings. To resolve this issue, specify data types for all grid columns.",
  W1006: "The map service returned the following error: '{0}'",
  W1007: "No item with key {0} was found in the data source, but this key was used as the parent key for item {1}",
  W1008: "Cannot scroll to the '{0}' date because it does not exist on the current view",
  W1009: "Searching works only if data is specified using the dataSource option",
  W1010: "The capability to select all items works with source data of plain structure only",
  W1011: 'The "keyExpr" option is not applied when dataSource is not an array',
  W1012: "The '{0}' key field is not found in data objects",
  W1013: 'The "message" field in the dialog component was renamed to "messageHtml". Change your code correspondingly. In addition, if you used HTML code in the message, make sure that it is secure',
  W1014: "The Floating Action Button exceeds the recommended speed dial action count. If you need to display more speed dial actions, increase the maxSpeedDialActionCount option value in the global config.",
  W1016: "The '{0}' field in the HTML Editor toolbar item configuration was renamed to '{1}'. Please make a corresponding change in your code.",
  W1017: "The 'key' property is not specified for a lookup data source. Please specify it to prevent requests for the entire dataset when users filter data.",
  W1018: "Infinite scrolling may not work properly with multiple selection. To use these features together, set 'selection.deferred' to true or set 'selection.selectAllMode' to 'page'.",
  W1019: "Filter query string exceeds maximum length limit of {0} characters.",
  W1020: "hideEvent is ignored when the shading property is true",
  W1021: `The '{0}' is not rendered because none of the DOM elements match the value of the "container" property.`,
  W1022: "{0} JSON parsing error: '{1}'",
  W1023: "Appointments require unique keys. Otherwise, the agenda view may not work correctly.",
  W1024: "The client-side export is enabled. Implement the 'onExporting' function.",
  W1025: "'scrolling.mode' is set to 'virtual' or 'infinite'. Specify the height of the component."
});

// node_modules/devextreme/esm/__internal/grids/grid_core/views/utils/update_views_borders.js
var __rest = function(s, e) {
  var t = {};
  for (var p2 in s) {
    if (Object.prototype.hasOwnProperty.call(s, p2) && e.indexOf(p2) < 0) {
      t[p2] = s[p2];
    }
  }
  if (null != s && "function" === typeof Object.getOwnPropertySymbols) {
    var i = 0;
    for (p2 = Object.getOwnPropertySymbols(s); i < p2.length; i++) {
      if (e.indexOf(p2[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p2[i])) {
        t[p2[i]] = s[p2[i]];
      }
    }
  }
  return t;
};
var CLASSES = {
  borderedTop: "dx-bordered-top-view",
  borderedBottom: "dx-bordered-bottom-view"
};
var getFirstVisibleViewElement = (_ref) => {
  var {
    columnHeadersView,
    rowsView: rowsView3
  } = _ref;
  if (null === columnHeadersView || void 0 === columnHeadersView ? void 0 : columnHeadersView.isVisible()) {
    return columnHeadersView.element();
  }
  return rowsView3.element();
};
var getLastVisibleViewElement = (_ref2) => {
  var {
    filterPanelView,
    footerView,
    rowsView: rowsView3
  } = _ref2;
  if (null === filterPanelView || void 0 === filterPanelView ? void 0 : filterPanelView.isVisible()) {
    return filterPanelView.element();
  }
  if (null === footerView || void 0 === footerView ? void 0 : footerView.isVisible()) {
    return footerView.element();
  }
  return rowsView3.element();
};
var getViewElementWithClass = (viewsWithBorder, className) => {
  var _a2;
  var borderedView = Object.values(viewsWithBorder).find((view) => {
    var _a3;
    return null === (_a3 = null === view || void 0 === view ? void 0 : view.element()) || void 0 === _a3 ? void 0 : _a3.hasClass(className);
  });
  return null !== (_a2 = null === borderedView || void 0 === borderedView ? void 0 : borderedView.element()) && void 0 !== _a2 ? _a2 : null;
};
var shouldUpdateBorders = (viewName2, viewsWithBorder) => {
  var _a2;
  if (!Object.keys(viewsWithBorder).includes(viewName2)) {
    return false;
  }
  var {
    rowsView: rowsView3
  } = viewsWithBorder, otherViews = __rest(viewsWithBorder, ["rowsView"]);
  if (!isDefined(null === (_a2 = null === rowsView3 || void 0 === rowsView3 ? void 0 : rowsView3.element) || void 0 === _a2 ? void 0 : _a2.call(rowsView3))) {
    return false;
  }
  return Object.values(otherViews).filter((view) => {
    var _a3;
    return null === (_a3 = null === view || void 0 === view ? void 0 : view.isVisible) || void 0 === _a3 ? void 0 : _a3.call(view);
  }).every((view) => isDefined(null === view || void 0 === view ? void 0 : view.element()));
};
var updateViewsBorders = (viewName2, viewsWithBorder) => {
  if (!shouldUpdateBorders(viewName2, viewsWithBorder)) {
    return;
  }
  var $oldFirst = getViewElementWithClass(viewsWithBorder, CLASSES.borderedTop);
  var $oldLast = getViewElementWithClass(viewsWithBorder, CLASSES.borderedBottom);
  var $newFirst = getFirstVisibleViewElement(viewsWithBorder);
  var $newLast = getLastVisibleViewElement(viewsWithBorder);
  if ($oldFirst && !$oldFirst.is($newFirst)) {
    $oldFirst.removeClass(CLASSES.borderedTop);
  }
  if ($oldLast && !$oldLast.is($newLast)) {
    $oldLast.removeClass(CLASSES.borderedBottom);
  }
  if (!$newFirst.hasClass(CLASSES.borderedTop)) {
    $newFirst.addClass(CLASSES.borderedTop);
  }
  if (!$newLast.hasClass(CLASSES.borderedBottom)) {
    $newLast.addClass(CLASSES.borderedBottom);
  }
};

// node_modules/devextreme/esm/__internal/grids/grid_core/m_modules.js
var WIDGET_WITH_LEGACY_CONTAINER_NAME = "dxDataGrid";
var ModuleItem = class_default.inherit({
  _endUpdateCore() {
  },
  ctor(component) {
    var that = this;
    that._updateLockCount = 0;
    that.component = component;
    that._actions = {};
    that._actionConfigs = {};
    each(this.callbackNames() || [], function(index2, name2) {
      var flags = that.callbackFlags(name2) || {};
      flags.unique = true;
      flags.syncStrategy = true;
      that[this] = callbacks_default(flags);
    });
  },
  init() {
  },
  callbackNames() {
  },
  callbackFlags() {
  },
  publicMethods() {
  },
  beginUpdate() {
    this._updateLockCount++;
  },
  endUpdate() {
    if (this._updateLockCount > 0) {
      this._updateLockCount--;
      if (!this._updateLockCount) {
        this._endUpdateCore();
      }
    }
  },
  option(name2) {
    var {
      component
    } = this;
    var optionCache = component._optionCache;
    if (1 === arguments.length && optionCache) {
      if (!(name2 in optionCache)) {
        optionCache[name2] = component.option(name2);
      }
      return optionCache[name2];
    }
    return component.option.apply(component, arguments);
  },
  _silentOption(name2, value2) {
    var {
      component
    } = this;
    var optionCache = component._optionCache;
    if (optionCache) {
      optionCache[name2] = value2;
    }
    return component._setOptionWithoutOptionChange(name2, value2);
  },
  localize(name2) {
    var optionCache = this.component._optionCache;
    if (optionCache) {
      if (!(name2 in optionCache)) {
        optionCache[name2] = message_default.format(name2);
      }
      return optionCache[name2];
    }
    return message_default.format(name2);
  },
  on() {
    return this.component.on.apply(this.component, arguments);
  },
  off() {
    return this.component.off.apply(this.component, arguments);
  },
  optionChanged(args) {
    if (args.name in this._actions) {
      this.createAction(args.name, this._actionConfigs[args.name]);
      args.handled = true;
    }
  },
  getAction(actionName) {
    return this._actions[actionName];
  },
  setAria(name2, value2, $target) {
    var target = $target.get(0);
    var prefix = "role" !== name2 && "id" !== name2 ? "aria-" : "";
    if (target.setAttribute) {
      target.setAttribute(prefix + name2, value2);
    } else {
      $target.attr(prefix + name2, value2);
    }
  },
  _createComponent() {
    return this.component._createComponent.apply(this.component, arguments);
  },
  getController(name2) {
    return this.component._controllers[name2];
  },
  createAction(actionName, config3) {
    if (isFunction(actionName)) {
      var action = this.component._createAction(actionName.bind(this), config3);
      return function(e) {
        action({
          event: e
        });
      };
    }
    this._actions[actionName] = this.component._createActionByOption(actionName, config3);
    this._actionConfigs[actionName] = config3;
    return;
  },
  executeAction(actionName, options2) {
    var action = this._actions[actionName];
    return action && action(options2);
  },
  dispose() {
    var that = this;
    each(that.callbackNames() || [], function() {
      that[this].empty();
    });
  },
  addWidgetPrefix(className) {
    var componentName = this.component.NAME;
    return "dx-".concat(componentName.slice(2).toLowerCase()).concat(className ? "-".concat(className) : "");
  },
  getWidgetContainerClass() {
    var containerName = this.component.NAME === WIDGET_WITH_LEGACY_CONTAINER_NAME ? null : "container";
    return this.addWidgetPrefix(containerName);
  },
  elementIsInsideGrid($element) {
    var $gridElement = $element.closest(".".concat(this.getWidgetContainerClass())).parent();
    return $gridElement.is(this.component.$element());
  }
});
var Controller = ModuleItem;
var ViewController = Controller.inherit({
  getView(name2) {
    return this.component._views[name2];
  },
  getViews() {
    return this.component._views;
  }
});
var View = ModuleItem.inherit({
  _isReady() {
    return this.component.isReady();
  },
  _endUpdateCore() {
    this.callBase();
    if (!this._isReady() && this._requireReady) {
      this._requireRender = false;
      this.component._requireResize = false;
    }
    if (this._requireRender) {
      this._requireRender = false;
      this.render(this._$parent);
    }
  },
  _invalidate(requireResize, requireReady) {
    this._requireRender = true;
    this.component._requireResize = hasWindow() && (this.component._requireResize || requireResize);
    this._requireReady = this._requireReady || requireReady;
  },
  _renderCore() {
  },
  _resizeCore() {
  },
  _parentElement() {
    return this._$parent;
  },
  ctor(component) {
    this.callBase(component);
    this.renderCompleted = callbacks_default();
    this.resizeCompleted = callbacks_default();
  },
  element() {
    return this._$element;
  },
  getElementHeight() {
    var $element = this.element();
    if (!$element) {
      return 0;
    }
    var marginTop = parseFloat($element.css("marginTop")) || 0;
    var marginBottom = parseFloat($element.css("marginBottom")) || 0;
    var {
      offsetHeight
    } = $element.get(0);
    return offsetHeight + marginTop + marginBottom;
  },
  isVisible: () => true,
  getTemplate(name2) {
    return this.component._getTemplate(name2);
  },
  getView(name2) {
    return this.component._views[name2];
  },
  _getBorderedViews() {
    return {
      columnHeadersView: this.component._views.columnHeadersView,
      rowsView: this.component._views.rowsView,
      filterPanelView: this.component._views.filterPanelView,
      footerView: this.component._views.footerView
    };
  },
  render($parent, options2) {
    var $element = this._$element;
    var isVisible2 = this.isVisible();
    if (!$element && !$parent) {
      return;
    }
    this._requireReady = false;
    if (!$element) {
      $element = this._$element = renderer_default("<div>").appendTo($parent);
      this._$parent = $parent;
    }
    $element.toggleClass("dx-hidden", !isVisible2);
    if (this.component._views) {
      updateViewsBorders(this.name, this._getBorderedViews());
    }
    if (isVisible2) {
      this.component._optionCache = {};
      var deferred = this._renderCore(options2);
      this.component._optionCache = void 0;
      if (deferred) {
        deferred.done(() => {
          this.renderCompleted.fire(options2);
        });
      } else {
        this.renderCompleted.fire(options2);
      }
    }
  },
  resize() {
    this.isResizing = true;
    this._resizeCore();
    this.resizeCompleted.fire();
    this.isResizing = false;
  },
  focus(preventScroll) {
    this.element().get(0).focus({
      preventScroll
    });
  }
});
var MODULES_ORDER_MAX_INDEX = 1e6;
function getExtendedTypes(types2) {
  var moduleExtenders = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
  var extendTypes = {};
  Object.entries(moduleExtenders).forEach((_ref) => {
    var [name2, extender] = _ref;
    var currentType = types2[name2];
    if (currentType) {
      if (isFunction(extender)) {
        extendTypes[name2] = extender(currentType);
      } else {
        var classType = currentType;
        extendTypes[name2] = classType.inherit(extender);
      }
    }
  });
  return extendTypes;
}
function registerPublicMethods(componentInstance, name2, moduleItem) {
  var publicMethods = moduleItem.publicMethods();
  if (publicMethods) {
    each(publicMethods, (_, methodName) => {
      if (moduleItem[methodName]) {
        if (!componentInstance[methodName]) {
          componentInstance[methodName] = function() {
            return moduleItem[methodName](...arguments);
          };
        } else {
          throw ui_errors_default.Error("E1005", methodName);
        }
      } else {
        throw ui_errors_default.Error("E1006", name2, methodName);
      }
    });
  }
}
function processModules(componentInstance, componentClass) {
  var {
    modules
  } = componentClass;
  var {
    modulesOrder
  } = componentClass;
  function createModuleItems(moduleTypes) {
    var moduleItems = {};
    each(moduleTypes, (name2, moduleType) => {
      var moduleItem = new moduleType(componentInstance);
      moduleItem.name = name2;
      registerPublicMethods(componentInstance, name2, moduleItem);
      moduleItems[name2] = moduleItem;
    });
    return moduleItems;
  }
  if (modulesOrder) {
    modules.sort((module1, module2) => {
      var orderIndex1 = modulesOrder.indexOf(module1.name);
      var orderIndex2 = modulesOrder.indexOf(module2.name);
      if (orderIndex1 < 0) {
        orderIndex1 = MODULES_ORDER_MAX_INDEX;
      }
      if (orderIndex2 < 0) {
        orderIndex2 = MODULES_ORDER_MAX_INDEX;
      }
      return orderIndex1 - orderIndex2;
    });
  }
  var rootControllerTypes = {};
  var rootViewTypes = {};
  modules.forEach((_ref2) => {
    var {
      name: moduleName,
      controllers = {},
      views = {}
    } = _ref2;
    Object.entries(controllers).forEach((_ref3) => {
      var [name2, type2] = _ref3;
      var _a2;
      if (rootControllerTypes[name2]) {
        throw ui_errors_default.Error("E1001", moduleName, name2);
      } else if (!(null === (_a2 = null === type2 || void 0 === type2 ? void 0 : type2.subclassOf) || void 0 === _a2 ? void 0 : _a2.call(type2, Controller))) {
        throw ui_errors_default.Error("E1002", moduleName, name2);
      }
      rootControllerTypes[name2] = type2;
    });
    Object.entries(views).forEach((_ref4) => {
      var [name2, type2] = _ref4;
      var _a2;
      if (rootViewTypes[name2]) {
        throw ui_errors_default.Error("E1003", moduleName, name2);
      } else if (!(null === (_a2 = null === type2 || void 0 === type2 ? void 0 : type2.subclassOf) || void 0 === _a2 ? void 0 : _a2.call(type2, View))) {
        throw ui_errors_default.Error("E1004", moduleName, name2);
      }
      rootViewTypes[name2] = type2;
    });
  });
  var moduleExtenders = modules.filter((_ref5) => {
    var {
      extenders
    } = _ref5;
    return !!extenders;
  });
  var controllerTypes = moduleExtenders.reduce((types2, _ref6) => {
    var {
      extenders
    } = _ref6;
    return _extends(_extends({}, types2), getExtendedTypes(types2, null === extenders || void 0 === extenders ? void 0 : extenders.controllers));
  }, rootControllerTypes);
  var viewTypes = moduleExtenders.reduce((types2, _ref7) => {
    var {
      extenders
    } = _ref7;
    return _extends(_extends({}, types2), getExtendedTypes(types2, null === extenders || void 0 === extenders ? void 0 : extenders.views));
  }, rootViewTypes);
  componentInstance._controllers = createModuleItems(controllerTypes);
  componentInstance._views = createModuleItems(viewTypes);
}
var callModuleItemsMethod = function(that, methodName, args) {
  args = args || [];
  if (that._controllers) {
    each(that._controllers, function() {
      this[methodName] && this[methodName].apply(this, args);
    });
  }
  if (that._views) {
    each(that._views, function() {
      this[methodName] && this[methodName].apply(this, args);
    });
  }
};
var m_modules_default = {
  modules: [],
  View,
  ViewController,
  Controller,
  registerModule(name2, module) {
    var {
      modules
    } = this;
    for (var i = 0; i < modules.length; i++) {
      if (modules[i].name === name2) {
        return;
      }
    }
    module.name = name2;
    modules.push(module);
  },
  registerModulesOrder(moduleNames) {
    this.modulesOrder = moduleNames;
  },
  unregisterModule(name2) {
    this.modules = grep(this.modules, (module) => module.name !== name2);
  },
  processModules,
  callModuleItemsMethod
};

// node_modules/devextreme/esm/data/utils.js
var ready2 = ready_callbacks_default.add;
var XHR_ERROR_UNLOAD = "DEVEXTREME_XHR_ERROR_UNLOAD";
var normalizeBinaryCriterion = function(crit) {
  return [crit[0], crit.length < 3 ? "=" : String(crit[1]).toLowerCase(), crit.length < 2 ? true : crit[crit.length - 1]];
};
var normalizeSortingInfo = function(info) {
  if (!Array.isArray(info)) {
    info = [info];
  }
  return map(info, function(i) {
    var result2 = {
      selector: isFunction(i) || "string" === typeof i ? i : i.getter || i.field || i.selector,
      desc: !!(i.desc || "d" === String(i.dir).charAt(0).toLowerCase())
    };
    if (i.compare) {
      result2.compare = i.compare;
    }
    return result2;
  });
};
var errorMessageFromXhr = function() {
  var textStatusMessages = {
    timeout: "Network connection timeout",
    error: "Unspecified network error",
    parsererror: "Unexpected server response"
  };
  var unloading;
  ready2(function() {
    var window29 = getWindow();
    dom_adapter_default.listen(window29, "beforeunload", function() {
      unloading = true;
    });
  });
  return function(xhr, textStatus) {
    if (unloading) {
      return XHR_ERROR_UNLOAD;
    }
    if (xhr.status < 400) {
      return function(textStatus2) {
        var result2 = textStatusMessages[textStatus2];
        if (!result2) {
          return textStatus2;
        }
        return result2;
      }(textStatus);
    }
    return xhr.statusText;
  };
}();
var aggregators = {
  count: {
    seed: 0,
    step: function(count) {
      return 1 + count;
    }
  },
  sum: {
    seed: 0,
    step: function(sum, item) {
      return sum + item;
    }
  },
  min: {
    step: function(min, item) {
      return item < min ? item : min;
    }
  },
  max: {
    step: function(max, item) {
      return item > max ? item : max;
    }
  },
  avg: {
    seed: [0, 0],
    step: function(pair, value2) {
      return [pair[0] + value2, pair[1] + 1];
    },
    finalize: function(pair) {
      return pair[1] ? pair[0] / pair[1] : NaN;
    }
  }
};
var processRequestResultLock = /* @__PURE__ */ function() {
  var lockCount = 0;
  var lockDeferred;
  return {
    obtain: function() {
      if (0 === lockCount) {
        lockDeferred = new Deferred();
      }
      lockCount++;
    },
    release: function() {
      lockCount--;
      if (lockCount < 1) {
        lockDeferred.resolve();
      }
    },
    promise: function() {
      var deferred = 0 === lockCount ? new Deferred().resolve() : lockDeferred;
      return deferred.promise();
    },
    reset: function() {
      lockCount = 0;
      if (lockDeferred) {
        lockDeferred.resolve();
      }
    }
  };
}();
function isConjunctiveOperator(condition) {
  return /^(and|&&|&)$/i.test(condition);
}
var keysEqual = function(keyExpr, key1, key2) {
  if (Array.isArray(keyExpr)) {
    var names = map(key1, function(v, k) {
      return k;
    });
    var name2;
    for (var i = 0; i < names.length; i++) {
      name2 = names[i];
      if (!equalByValue(key1[name2], key2[name2], {
        strict: false
      })) {
        return false;
      }
    }
    return true;
  }
  return equalByValue(key1, key2, {
    strict: false
  });
};
var isUnaryOperation = function(crit) {
  return "!" === crit[0] && Array.isArray(crit[1]);
};
var isGroupOperator = function(value2) {
  return "and" === value2 || "or" === value2;
};
var isGroupCriterion = function(crit) {
  var first = crit[0];
  var second = crit[1];
  if (Array.isArray(first)) {
    return true;
  }
  if (isFunction(first)) {
    if (Array.isArray(second) || isFunction(second) || isGroupOperator(second)) {
      return true;
    }
  }
  return false;
};
var trivialPromise = function() {
  var d = new Deferred();
  return d.resolve.apply(d, arguments).promise();
};
var rejectedPromise = function() {
  var d = new Deferred();
  return d.reject.apply(d, arguments).promise();
};
function throttle(func, timeout) {
  var timeoutId;
  return function() {
    if (!timeoutId) {
      timeoutId = setTimeout(() => {
        timeoutId = void 0;
        func.call(this);
      }, isFunction(timeout) ? timeout() : timeout);
    }
    return timeoutId;
  };
}
function throttleChanges(func, timeout) {
  var cache = [];
  var throttled = throttle(function() {
    func.call(this, cache);
    cache = [];
  }, timeout);
  return function(changes) {
    if (Array.isArray(changes)) {
      cache.push(...changes);
    }
    return throttled.call(this, cache);
  };
}

// node_modules/devextreme/esm/data/errors.js
var errors = error_default(errors_default.ERROR_MESSAGES, {
  E4000: "[DevExpress.data]: {0}",
  E4001: "Unknown aggregating function is detected: '{0}'",
  E4002: "Unsupported OData protocol version is used",
  E4003: "Unknown filter operation is used: {0}",
  E4004: "The thenby() method is called before the sortby() method",
  E4005: "Store requires a key expression for this operation",
  E4006: "ArrayStore 'data' option must be an array",
  E4007: "Compound keys cannot be auto-generated",
  E4008: "Attempt to insert an item with a duplicated key",
  E4009: "Data item cannot be found",
  E4010: "CustomStore does not support creating queries",
  E4011: "Custom Store method is not implemented or is not a function: {0}",
  E4012: "Custom Store method returns an invalid value: {0}",
  E4013: "Local Store requires the 'name' configuration option is specified",
  E4014: "Unknown data type is specified for ODataStore: {0}",
  E4015: "Unknown entity name or alias is used: {0}",
  E4016: "The compileSetter(expr) method is called with 'self' passed as a parameter",
  E4017: "Keys cannot be modified",
  E4018: "The server has returned a non-numeric value in a response to an item count request",
  E4019: "Mixing of group operators inside a single group of filter expression is not allowed",
  E4020: "Unknown store type is detected: {0}",
  E4021: "The server response does not provide the totalCount value",
  E4022: "The server response does not provide the groupCount value",
  E4023: "Could not parse the following XML: {0}",
  E4024: "String function {0} cannot be used with the data field {1} of type {2}.",
  W4000: "Data returned from the server has an incorrect structure",
  W4001: 'The {0} field is listed in both "keyType" and "fieldTypes". The value of "fieldTypes" is used.',
  W4002: "Data loading has failed for some cells due to the following error: {0}"
});
var errorHandler = null;
var handleError = function(error) {
  var _errorHandler;
  null === (_errorHandler = errorHandler) || void 0 === _errorHandler ? void 0 : _errorHandler(error);
};

// node_modules/devextreme/esm/data/array_utils.js
function hasKey(target, keyOrKeys) {
  var key;
  var keys = "string" === typeof keyOrKeys ? keyOrKeys.split() : keyOrKeys.slice();
  while (keys.length) {
    key = keys.shift();
    if (key in target) {
      return true;
    }
  }
  return false;
}
function findItems(keyInfo, items, key, groupCount) {
  var childItems;
  var result2;
  if (groupCount) {
    for (var i = 0; i < items.length; i++) {
      childItems = items[i].items || items[i].collapsedItems || [];
      result2 = findItems(keyInfo, childItems || [], key, groupCount - 1);
      if (result2) {
        return result2;
      }
    }
  } else if (indexByKey(keyInfo, items, key) >= 0) {
    return items;
  }
}
function getItems(keyInfo, items, key, groupCount) {
  if (groupCount) {
    return findItems(keyInfo, items, key, groupCount) || [];
  }
  return items;
}
function generateDataByKeyMap(keyInfo, array) {
  if (keyInfo.key() && (!array._dataByKeyMap || array._dataByKeyMapLength !== array.length)) {
    var dataByKeyMap = {};
    var arrayLength = array.length;
    for (var i = 0; i < arrayLength; i++) {
      dataByKeyMap[JSON.stringify(keyInfo.keyOf(array[i]))] = array[i];
    }
    array._dataByKeyMap = dataByKeyMap;
    array._dataByKeyMapLength = arrayLength;
  }
}
function getCacheValue(array, key) {
  if (array._dataByKeyMap) {
    return array._dataByKeyMap[JSON.stringify(key)];
  }
}
function getHasKeyCacheValue(array, key) {
  if (array._dataByKeyMap) {
    return array._dataByKeyMap[JSON.stringify(key)];
  }
  return true;
}
function setDataByKeyMapValue(array, key, data3) {
  if (array._dataByKeyMap) {
    array._dataByKeyMap[JSON.stringify(key)] = data3;
    array._dataByKeyMapLength += data3 ? 1 : -1;
  }
}
function cloneInstanceWithChangedPaths(instance, changes, clonedInstances) {
  clonedInstances = clonedInstances || /* @__PURE__ */ new WeakMap();
  var result2 = instance ? Object.create(Object.getPrototypeOf(instance)) : {};
  if (instance) {
    clonedInstances.set(instance, result2);
  }
  var instanceWithoutPrototype = _extends({}, instance);
  deepExtendArraySafe(result2, instanceWithoutPrototype, true, true);
  for (var name2 in instanceWithoutPrototype) {
    var value2 = instanceWithoutPrototype[name2];
    var change = null === changes || void 0 === changes ? void 0 : changes[name2];
    if (isObject(value2) && !isPlainObject(value2) && isObject(change) && !clonedInstances.has(value2)) {
      result2[name2] = cloneInstanceWithChangedPaths(value2, change, clonedInstances);
    }
  }
  for (var _name in result2) {
    var prop = result2[_name];
    if (isObject(prop) && clonedInstances.has(prop)) {
      result2[_name] = clonedInstances.get(prop);
    }
  }
  return result2;
}
function createObjectWithChanges(target, changes) {
  var result2 = cloneInstanceWithChangedPaths(target, changes);
  return deepExtendArraySafe(result2, changes, true, true);
}
function applyBatch(_ref) {
  var {
    keyInfo,
    data: data3,
    changes,
    groupCount,
    useInsertIndex,
    immutable,
    disableCache,
    logError,
    skipCopying
  } = _ref;
  var resultItems = true === immutable ? [...data3] : data3;
  changes.forEach((item) => {
    var items = "insert" === item.type ? resultItems : getItems(keyInfo, resultItems, item.key, groupCount);
    !disableCache && generateDataByKeyMap(keyInfo, items);
    switch (item.type) {
      case "update":
        update(keyInfo, items, item.key, item.data, true, immutable, logError);
        break;
      case "insert":
        insert(keyInfo, items, item.data, useInsertIndex && isDefined(item.index) ? item.index : -1, true, logError, skipCopying);
        break;
      case "remove":
        remove(keyInfo, items, item.key, true, logError);
    }
  });
  return resultItems;
}
function getErrorResult(isBatch, logError, errorCode) {
  return !isBatch ? rejectedPromise(errors.Error(errorCode)) : logError && errors.log(errorCode);
}
function update(keyInfo, array, key, data3, isBatch, immutable, logError) {
  var target;
  var keyExpr = keyInfo.key();
  if (keyExpr) {
    if (hasKey(data3, keyExpr) && !keysEqual(keyExpr, key, keyInfo.keyOf(data3))) {
      return getErrorResult(isBatch, logError, "E4017");
    }
    target = getCacheValue(array, key);
    if (!target) {
      var index2 = indexByKey(keyInfo, array, key);
      if (index2 < 0) {
        return getErrorResult(isBatch, logError, "E4009");
      }
      target = array[index2];
      if (true === immutable && isDefined(target)) {
        var newTarget = createObjectWithChanges(target, data3);
        array[index2] = newTarget;
        return !isBatch && trivialPromise(newTarget, key);
      }
    }
  } else {
    target = key;
  }
  deepExtendArraySafe(target, data3, true);
  if (!isBatch) {
    if (config_default().useLegacyStoreResult) {
      return trivialPromise(key, data3);
    } else {
      return trivialPromise(target, key);
    }
  }
}
function insert(keyInfo, array, data3, index2, isBatch, logError, skipCopying) {
  var keyValue;
  var keyExpr = keyInfo.key();
  var obj = isPlainObject(data3) && !skipCopying ? extend({}, data3) : data3;
  if (keyExpr) {
    keyValue = keyInfo.keyOf(obj);
    if (void 0 === keyValue || "object" === typeof keyValue && isEmptyObject(keyValue)) {
      if (Array.isArray(keyExpr)) {
        throw errors.Error("E4007");
      }
      keyValue = obj[keyExpr] = String(new guid_default());
    } else if (void 0 !== array[indexByKey(keyInfo, array, keyValue)]) {
      return getErrorResult(isBatch, logError, "E4008");
    }
  } else {
    keyValue = obj;
  }
  if (index2 >= 0) {
    array.splice(index2, 0, obj);
  } else {
    array.push(obj);
  }
  setDataByKeyMapValue(array, keyValue, obj);
  if (!isBatch) {
    return trivialPromise(config_default().useLegacyStoreResult ? data3 : obj, keyValue);
  }
}
function remove(keyInfo, array, key, isBatch, logError) {
  var index2 = indexByKey(keyInfo, array, key);
  if (index2 > -1) {
    array.splice(index2, 1);
    setDataByKeyMapValue(array, key, null);
  }
  if (!isBatch) {
    return trivialPromise(key);
  } else if (index2 < 0) {
    return getErrorResult(isBatch, logError, "E4009");
  }
}
function indexByKey(keyInfo, array, key) {
  var keyExpr = keyInfo.key();
  if (!getHasKeyCacheValue(array, key)) {
    return -1;
  }
  for (var i = 0, arrayLength = array.length; i < arrayLength; i++) {
    if (keysEqual(keyExpr, keyInfo.keyOf(array[i]), key)) {
      return i;
    }
  }
  return -1;
}

// node_modules/devextreme/esm/data/array_query.js
var Iterator = class_default.inherit({
  toArray: function() {
    var result2 = [];
    this.reset();
    while (this.next()) {
      result2.push(this.current());
    }
    return result2;
  },
  countable: function() {
    return false;
  }
});
var ArrayIterator = Iterator.inherit({
  ctor: function(array) {
    this.array = array;
    this.index = -1;
  },
  next: function() {
    if (this.index + 1 < this.array.length) {
      this.index++;
      return true;
    }
    return false;
  },
  current: function() {
    return this.array[this.index];
  },
  reset: function() {
    this.index = -1;
  },
  toArray: function() {
    return this.array.slice(0);
  },
  countable: function() {
    return true;
  },
  count: function() {
    return this.array.length;
  }
});
var WrappedIterator = Iterator.inherit({
  ctor: function(iter) {
    this.iter = iter;
  },
  next: function() {
    return this.iter.next();
  },
  current: function() {
    return this.iter.current();
  },
  reset: function() {
    return this.iter.reset();
  }
});
var MapIterator = WrappedIterator.inherit({
  ctor: function(iter, mapper) {
    this.callBase(iter);
    this.index = -1;
    this.mapper = mapper;
  },
  current: function() {
    return this.mapper(this.callBase(), this.index);
  },
  next: function() {
    var hasNext = this.callBase();
    if (hasNext) {
      this.index++;
    }
    return hasNext;
  }
});
var defaultCompare = function(xValue, yValue, options2) {
  if (isString(xValue) && isString(yValue) && (null !== options2 && void 0 !== options2 && options2.locale || null !== options2 && void 0 !== options2 && options2.collatorOptions)) {
    return new Intl.Collator((null === options2 || void 0 === options2 ? void 0 : options2.locale) || void 0, (null === options2 || void 0 === options2 ? void 0 : options2.collatorOptions) || void 0).compare(xValue, yValue);
  }
  xValue = toComparable(xValue, false, options2);
  yValue = toComparable(yValue, false, options2);
  if (null === xValue && null !== yValue) {
    return -1;
  }
  if (null !== xValue && null === yValue) {
    return 1;
  }
  if (void 0 === xValue && void 0 !== yValue) {
    return 1;
  }
  if (void 0 !== xValue && void 0 === yValue) {
    return -1;
  }
  if (xValue < yValue) {
    return -1;
  }
  if (xValue > yValue) {
    return 1;
  }
  return 0;
};
var SortIterator = Iterator.inherit({
  ctor: function(iter, getter, desc, compare3) {
    this.langParams = iter.langParams;
    if (!(iter instanceof MapIterator)) {
      iter = new MapIterator(iter, this._wrap);
      iter.langParams = this.langParams;
    }
    this.iter = iter;
    this.rules = [{
      getter,
      desc,
      compare: compare3,
      langParams: this.langParams
    }];
  },
  thenBy: function(getter, desc, compare3) {
    var result2 = new SortIterator(this.sortedIter || this.iter, getter, desc, compare3);
    if (!this.sortedIter) {
      result2.rules = this.rules.concat(result2.rules);
    }
    return result2;
  },
  next: function() {
    this._ensureSorted();
    return this.sortedIter.next();
  },
  current: function() {
    this._ensureSorted();
    return this.sortedIter.current();
  },
  reset: function() {
    delete this.sortedIter;
  },
  countable: function() {
    return this.sortedIter || this.iter.countable();
  },
  count: function() {
    if (this.sortedIter) {
      return this.sortedIter.count();
    }
    return this.iter.count();
  },
  _ensureSorted: function() {
    var that = this;
    if (that.sortedIter) {
      return;
    }
    each(that.rules, function() {
      this.getter = compileGetter(this.getter);
    });
    that.sortedIter = new MapIterator(new ArrayIterator(this.iter.toArray().sort(function(x, y) {
      return that._compare(x, y);
    })), that._unwrap);
  },
  _wrap: function(record, index2) {
    return {
      index: index2,
      value: record
    };
  },
  _unwrap: function(wrappedItem) {
    return wrappedItem.value;
  },
  _getDefaultCompare: (langParams) => (xValue, yValue) => defaultCompare(xValue, yValue, langParams),
  _compare: function(x, y) {
    var xIndex = x.index;
    var yIndex = y.index;
    x = x.value;
    y = y.value;
    if (x === y) {
      return xIndex - yIndex;
    }
    for (var i = 0, rulesCount = this.rules.length; i < rulesCount; i++) {
      var rule = this.rules[i];
      var xValue = rule.getter(x);
      var yValue = rule.getter(y);
      var compare3 = rule.compare || this._getDefaultCompare(rule.langParams);
      var compareResult = compare3(xValue, yValue);
      if (compareResult) {
        return rule.desc ? -compareResult : compareResult;
      }
    }
    return xIndex - yIndex;
  }
});
var compileCriteria = /* @__PURE__ */ function() {
  var langParams = {};
  var _toComparable = (value2) => toComparable(value2, false, langParams);
  var toString = function(value2) {
    var _langParams;
    return isDefined(value2) ? null !== (_langParams = langParams) && void 0 !== _langParams && _langParams.locale ? value2.toLocaleString(langParams.locale) : value2.toString() : "";
  };
  function compileEquals(getter, value2, negate) {
    return function(obj) {
      obj = _toComparable(getter(obj));
      var result2 = /* @__PURE__ */ function(value3) {
        return "" === value3 || 0 === value3 || false === value3;
      }(value2) ? obj === value2 : obj == value2;
      if (negate) {
        result2 = !result2;
      }
      return result2;
    };
  }
  return function(crit, options2) {
    langParams = options2 || {};
    if (isFunction(crit)) {
      return crit;
    }
    if (isGroupCriterion(crit)) {
      return function(crit2) {
        var ops = [];
        var isConjunctiveOperator2 = false;
        var isConjunctiveNextOperator = false;
        each(crit2, function() {
          if (Array.isArray(this) || isFunction(this)) {
            if (ops.length > 1 && isConjunctiveOperator2 !== isConjunctiveNextOperator) {
              throw new errors.Error("E4019");
            }
            ops.push(compileCriteria(this, langParams));
            isConjunctiveOperator2 = isConjunctiveNextOperator;
            isConjunctiveNextOperator = true;
          } else {
            isConjunctiveNextOperator = isConjunctiveOperator(this);
          }
        });
        return function(d) {
          var result2 = isConjunctiveOperator2;
          for (var i = 0; i < ops.length; i++) {
            if (ops[i](d) !== isConjunctiveOperator2) {
              result2 = !isConjunctiveOperator2;
              break;
            }
          }
          return result2;
        };
      }(crit);
    }
    if (isUnaryOperation(crit)) {
      return function(crit2) {
        var op = crit2[0];
        var criteria = compileCriteria(crit2[1], langParams);
        if ("!" === op) {
          return function(obj) {
            return !criteria(obj);
          };
        }
        throw errors.Error("E4003", op);
      }(crit);
    }
    return function(crit2) {
      crit2 = normalizeBinaryCriterion(crit2);
      var getter = compileGetter(crit2[0]);
      var op = crit2[1];
      var value2 = crit2[2];
      value2 = _toComparable(value2);
      var compare3 = (obj, operatorFn) => {
        obj = _toComparable(getter(obj));
        return (null == value2 || null == obj) && value2 !== obj ? false : operatorFn(obj, value2);
      };
      switch (op.toLowerCase()) {
        case "=":
          return compileEquals(getter, value2);
        case "<>":
          return compileEquals(getter, value2, true);
        case ">":
          return (obj) => compare3(obj, (a, b) => a > b);
        case "<":
          return (obj) => compare3(obj, (a, b) => a < b);
        case ">=":
          return (obj) => compare3(obj, (a, b) => a >= b);
        case "<=":
          return (obj) => compare3(obj, (a, b) => a <= b);
        case "startswith":
          return function(obj) {
            return 0 === _toComparable(toString(getter(obj))).indexOf(value2);
          };
        case "endswith":
          return function(obj) {
            var getterValue = _toComparable(toString(getter(obj)));
            var searchValue = toString(value2);
            if (getterValue.length < searchValue.length) {
              return false;
            }
            var index2 = getterValue.lastIndexOf(value2);
            return -1 !== index2 && index2 === getterValue.length - value2.length;
          };
        case "contains":
          return function(obj) {
            return _toComparable(toString(getter(obj))).indexOf(value2) > -1;
          };
        case "notcontains":
          return function(obj) {
            return -1 === _toComparable(toString(getter(obj))).indexOf(value2);
          };
      }
      throw errors.Error("E4003", op);
    }(crit);
  };
}();
var FilterIterator = WrappedIterator.inherit({
  ctor: function(iter, criteria) {
    this.callBase(iter);
    this.langParams = iter.langParams;
    this.criteria = compileCriteria(criteria, this.langParams);
  },
  next: function() {
    while (this.iter.next()) {
      if (this.criteria(this.current())) {
        return true;
      }
    }
    return false;
  }
});
var GroupIterator = Iterator.inherit({
  ctor: function(iter, getter) {
    this.iter = iter;
    this.getter = getter;
  },
  next: function() {
    this._ensureGrouped();
    return this.groupedIter.next();
  },
  current: function() {
    this._ensureGrouped();
    return this.groupedIter.current();
  },
  reset: function() {
    delete this.groupedIter;
  },
  countable: function() {
    return !!this.groupedIter;
  },
  count: function() {
    return this.groupedIter.count();
  },
  _ensureGrouped: function() {
    if (this.groupedIter) {
      return;
    }
    var hash = {};
    var keys = [];
    var iter = this.iter;
    var getter = compileGetter(this.getter);
    iter.reset();
    while (iter.next()) {
      var current2 = iter.current();
      var key = getter(current2);
      if (key in hash) {
        hash[key].push(current2);
      } else {
        hash[key] = [current2];
        keys.push(key);
      }
    }
    this.groupedIter = new ArrayIterator(map(keys, function(key2) {
      return {
        key: key2,
        items: hash[key2]
      };
    }));
  }
});
var SelectIterator = WrappedIterator.inherit({
  ctor: function(iter, getter) {
    this.callBase(iter);
    this.getter = compileGetter(getter);
  },
  current: function() {
    return this.getter(this.callBase());
  },
  countable: function() {
    return this.iter.countable();
  },
  count: function() {
    return this.iter.count();
  }
});
var SliceIterator = WrappedIterator.inherit({
  ctor: function(iter, skip, take) {
    this.callBase(iter);
    this.skip = Math.max(0, skip);
    this.take = Math.max(0, take);
    this.pos = 0;
  },
  next: function() {
    if (this.pos >= this.skip + this.take) {
      return false;
    }
    while (this.pos < this.skip && this.iter.next()) {
      this.pos++;
    }
    this.pos++;
    return this.iter.next();
  },
  reset: function() {
    this.callBase();
    this.pos = 0;
  },
  countable: function() {
    return this.iter.countable();
  },
  count: function() {
    return Math.min(this.iter.count() - this.skip, this.take);
  }
});
var arrayQueryImpl = function arrayQueryImpl2(iter, queryOptions) {
  queryOptions = queryOptions || {};
  if (!(iter instanceof Iterator)) {
    iter = new ArrayIterator(iter);
  }
  if (queryOptions.langParams) {
    iter.langParams = queryOptions.langParams;
  }
  var handleError2 = function(error) {
    var handler = queryOptions.errorHandler;
    if (handler) {
      handler(error);
    }
    handleError(error);
  };
  var aggregateCore = function(aggregator) {
    var d = new Deferred().fail(handleError2);
    var seed;
    var step = aggregator.step;
    var finalize = aggregator.finalize;
    try {
      iter.reset();
      if ("seed" in aggregator) {
        seed = aggregator.seed;
      } else {
        seed = iter.next() ? iter.current() : NaN;
      }
      var accumulator = seed;
      while (iter.next()) {
        accumulator = step(accumulator, iter.current());
      }
      d.resolve(finalize ? finalize(accumulator) : accumulator);
    } catch (x) {
      d.reject(x);
    }
    return d.promise();
  };
  var standardAggregate = function(name2) {
    return aggregateCore(aggregators[name2]);
  };
  var select = function(getter) {
    if (!isFunction(getter) && !Array.isArray(getter)) {
      getter = [].slice.call(arguments);
    }
    return chainQuery(new SelectIterator(iter, getter));
  };
  var selectProp = function(name2) {
    return select(compileGetter(name2));
  };
  function chainQuery(iter2) {
    return arrayQueryImpl2(iter2, queryOptions);
  }
  return {
    toArray: function() {
      return iter.toArray();
    },
    enumerate: function() {
      var d = new Deferred().fail(handleError2);
      try {
        d.resolve(iter.toArray());
      } catch (x) {
        d.reject(x);
      }
      return d.promise();
    },
    setLangParams(options2) {
      iter.langParams = options2;
    },
    sortBy: function(getter, desc, compare3) {
      return chainQuery(new SortIterator(iter, getter, desc, compare3));
    },
    thenBy: function(getter, desc, compare3) {
      if (iter instanceof SortIterator) {
        return chainQuery(iter.thenBy(getter, desc, compare3));
      }
      throw errors.Error("E4004");
    },
    filter: function(criteria) {
      if (!Array.isArray(criteria)) {
        criteria = [].slice.call(arguments);
      }
      return chainQuery(new FilterIterator(iter, criteria));
    },
    slice: function(skip, take) {
      if (void 0 === take) {
        take = Number.MAX_VALUE;
      }
      return chainQuery(new SliceIterator(iter, skip, take));
    },
    select,
    groupBy: function(getter) {
      return chainQuery(new GroupIterator(iter, getter));
    },
    aggregate: function(seed, step, finalize) {
      if (arguments.length < 2) {
        return aggregateCore({
          step: arguments[0]
        });
      }
      return aggregateCore({
        seed,
        step,
        finalize
      });
    },
    count: function() {
      if (iter.countable()) {
        var d = new Deferred().fail(handleError2);
        try {
          d.resolve(iter.count());
        } catch (x) {
          d.reject(x);
        }
        return d.promise();
      }
      return standardAggregate("count");
    },
    sum: function(getter) {
      if (getter) {
        return selectProp(getter).sum();
      }
      return standardAggregate("sum");
    },
    min: function(getter) {
      if (getter) {
        return selectProp(getter).min();
      }
      return standardAggregate("min");
    },
    max: function(getter) {
      if (getter) {
        return selectProp(getter).max();
      }
      return standardAggregate("max");
    },
    avg: function(getter) {
      if (getter) {
        return selectProp(getter).avg();
      }
      return standardAggregate("avg");
    }
  };
};
var array_query_default = arrayQueryImpl;

// node_modules/devextreme/esm/data/store_helper.js
function multiLevelGroup(query2, groupInfo) {
  query2 = query2.groupBy(groupInfo[0].selector);
  if (groupInfo.length > 1) {
    query2 = query2.select(function(g) {
      return extend({}, g, {
        items: multiLevelGroup(array_query_default(g.items), groupInfo.slice(1)).toArray()
      });
    });
  }
  return query2;
}
function arrangeSortingInfo(groupInfo, sortInfo) {
  var filteredGroup = [];
  each(groupInfo, function(_, group) {
    var collision = grep(sortInfo, function(sort) {
      return group.selector === sort.selector;
    });
    if (collision.length < 1) {
      filteredGroup.push(group);
    }
  });
  return filteredGroup.concat(sortInfo);
}
function queryByOptions(query2, options2, isCountQuery) {
  var _options;
  options2 = options2 || {};
  var filter = options2.filter;
  if (null !== (_options = options2) && void 0 !== _options && _options.langParams) {
    var _query$setLangParams, _query;
    null === (_query$setLangParams = (_query = query2).setLangParams) || void 0 === _query$setLangParams ? void 0 : _query$setLangParams.call(_query, options2.langParams);
  }
  if (filter) {
    query2 = query2.filter(filter);
  }
  if (isCountQuery) {
    return query2;
  }
  var sort = options2.sort;
  var select = options2.select;
  var group = options2.group;
  var skip = options2.skip;
  var take = options2.take;
  if (group) {
    group = normalizeSortingInfo(group);
    group.keepInitialKeyOrder = !!options2.group.keepInitialKeyOrder;
  }
  if (sort || group) {
    sort = normalizeSortingInfo(sort || []);
    if (group && !group.keepInitialKeyOrder) {
      sort = arrangeSortingInfo(group, sort);
    }
    each(sort, function(index2) {
      query2 = query2[index2 ? "thenBy" : "sortBy"](this.selector, this.desc, this.compare);
    });
  }
  if (select) {
    query2 = query2.select(select);
  }
  if (group) {
    query2 = multiLevelGroup(query2, group);
  }
  if (take || skip) {
    query2 = query2.slice(skip || 0, take);
  }
  return query2;
}
var store_helper_default = {
  multiLevelGroup,
  arrangeSortingInfo,
  queryByOptions
};

// node_modules/devextreme/esm/data/abstract_store.js
var abstract2 = class_default.abstract;
var queryByOptions2 = store_helper_default.queryByOptions;
var storeImpl = {};
var Store = class_default.inherit({
  _langParams: {},
  ctor: function(options2) {
    var that = this;
    options2 = options2 || {};
    this._eventsStrategy = new EventsStrategy(this);
    each(["onLoaded", "onLoading", "onInserted", "onInserting", "onUpdated", "onUpdating", "onPush", "onRemoved", "onRemoving", "onModified", "onModifying"], function(_, optionName) {
      if (optionName in options2) {
        that.on(optionName.slice(2).toLowerCase(), options2[optionName]);
      }
    });
    this._key = options2.key;
    this._errorHandler = options2.errorHandler;
    this._useDefaultSearch = true;
  },
  _clearCache: noop2,
  _customLoadOptions: function() {
    return null;
  },
  key: function() {
    return this._key;
  },
  keyOf: function(obj) {
    if (!this._keyGetter) {
      this._keyGetter = compileGetter(this.key());
    }
    return this._keyGetter(obj);
  },
  _requireKey: function() {
    if (!this.key()) {
      throw errors.Error("E4005");
    }
  },
  load: function(options2) {
    var that = this;
    options2 = options2 || {};
    this._eventsStrategy.fireEvent("loading", [options2]);
    return this._withLock(this._loadImpl(options2)).done(function(result2) {
      that._eventsStrategy.fireEvent("loaded", [result2, options2]);
    });
  },
  _loadImpl: function(options2) {
    if (!isEmptyObject(this._langParams)) {
      options2 = options2 || {};
      options2._langParams = _extends({}, this._langParams, options2._langParams);
    }
    return queryByOptions2(this.createQuery(options2), options2).enumerate();
  },
  _withLock: function(task) {
    var result2 = new Deferred();
    task.done(function() {
      var that = this;
      var args = arguments;
      processRequestResultLock.promise().done(function() {
        result2.resolveWith(that, args);
      });
    }).fail(function() {
      result2.rejectWith(this, arguments);
    });
    return result2;
  },
  createQuery: abstract2,
  totalCount: function(options2) {
    return this._totalCountImpl(options2);
  },
  _totalCountImpl: function(options2) {
    return queryByOptions2(this.createQuery(options2), options2, true).count();
  },
  byKey: function(key, extraOptions) {
    return this._addFailHandlers(this._withLock(this._byKeyImpl(key, extraOptions)));
  },
  _byKeyImpl: abstract2,
  insert: function(values) {
    var that = this;
    that._eventsStrategy.fireEvent("modifying");
    that._eventsStrategy.fireEvent("inserting", [values]);
    return that._addFailHandlers(that._insertImpl(values).done(function(callbackValues, callbackKey) {
      that._eventsStrategy.fireEvent("inserted", [callbackValues, callbackKey]);
      that._eventsStrategy.fireEvent("modified");
    }));
  },
  _insertImpl: abstract2,
  update: function(key, values) {
    var that = this;
    that._eventsStrategy.fireEvent("modifying");
    that._eventsStrategy.fireEvent("updating", [key, values]);
    return that._addFailHandlers(that._updateImpl(key, values).done(function() {
      that._eventsStrategy.fireEvent("updated", [key, values]);
      that._eventsStrategy.fireEvent("modified");
    }));
  },
  _updateImpl: abstract2,
  push: function(changes) {
    var beforePushArgs = {
      changes,
      waitFor: []
    };
    this._eventsStrategy.fireEvent("beforePushAggregation", [beforePushArgs]);
    when(...beforePushArgs.waitFor).done(() => {
      this._pushImpl(changes);
      this._eventsStrategy.fireEvent("beforePush", [{
        changes
      }]);
      this._eventsStrategy.fireEvent("push", [changes]);
    });
  },
  _pushImpl: noop2,
  remove: function(key) {
    var that = this;
    that._eventsStrategy.fireEvent("modifying");
    that._eventsStrategy.fireEvent("removing", [key]);
    return that._addFailHandlers(that._removeImpl(key).done(function(callbackKey) {
      that._eventsStrategy.fireEvent("removed", [callbackKey]);
      that._eventsStrategy.fireEvent("modified");
    }));
  },
  _removeImpl: abstract2,
  _addFailHandlers: function(deferred) {
    return deferred.fail(this._errorHandler).fail(handleError);
  },
  on(eventName, eventHandler) {
    this._eventsStrategy.on(eventName, eventHandler);
    return this;
  },
  off(eventName, eventHandler) {
    this._eventsStrategy.off(eventName, eventHandler);
    return this;
  }
});
Store.create = function(alias, options2) {
  if (!(alias in storeImpl)) {
    throw errors.Error("E4020", alias);
  }
  return new storeImpl[alias](options2);
};
Store.registerClass = function(type2, alias) {
  if (alias) {
    storeImpl[alias] = type2;
  }
  return type2;
};
Store.inherit = /* @__PURE__ */ function(inheritor) {
  return function(members, alias) {
    var type2 = inheritor.apply(this, [members]);
    Store.registerClass(type2, alias);
    return type2;
  };
}(Store.inherit);
var abstract_store_default = Store;

// node_modules/devextreme/esm/data/custom_store.js
var TOTAL_COUNT = "totalCount";
var LOAD = "load";
var BY_KEY = "byKey";
var INSERT = "insert";
var UPDATE = "update";
var REMOVE = "remove";
function isPromise2(obj) {
  return obj && isFunction(obj.then);
}
function trivialPromise2(value2) {
  return new Deferred().resolve(value2).promise();
}
function ensureRequiredFuncOption(name2, obj) {
  if (!isFunction(obj)) {
    throw errors.Error("E4011", name2);
  }
}
function throwInvalidUserFuncResult(name2) {
  throw errors.Error("E4012", name2);
}
function createUserFuncFailureHandler(pendingDeferred) {
  function errorMessageFromXhr2(promiseArguments) {
    var xhr = promiseArguments[0];
    var textStatus = promiseArguments[1];
    if (!xhr || !xhr.getResponseHeader) {
      return null;
    }
    return errorMessageFromXhr(xhr, textStatus);
  }
  return function(arg) {
    var error;
    if (arg instanceof Error) {
      error = arg;
    } else {
      error = new Error(errorMessageFromXhr2(arguments) || arg && String(arg) || "Unknown error");
    }
    if (error.message !== XHR_ERROR_UNLOAD) {
      pendingDeferred.reject(error);
    }
  };
}
function invokeUserLoad(store, options2) {
  var userFunc = store._loadFunc;
  var userResult;
  ensureRequiredFuncOption(LOAD, userFunc);
  userResult = userFunc.apply(store, [options2]);
  if (Array.isArray(userResult)) {
    userResult = trivialPromise2(userResult);
  } else if (null === userResult || void 0 === userResult) {
    userResult = trivialPromise2([]);
  } else if (!isPromise2(userResult)) {
    throwInvalidUserFuncResult(LOAD);
  }
  return fromPromise(userResult);
}
function invokeUserTotalCountFunc(store, options2) {
  var userFunc = store._totalCountFunc;
  var userResult;
  if (!isFunction(userFunc)) {
    throw errors.Error("E4021");
  }
  userResult = userFunc.apply(store, [options2]);
  if (!isPromise2(userResult)) {
    userResult = Number(userResult);
    if (!isFinite(userResult)) {
      throwInvalidUserFuncResult(TOTAL_COUNT);
    }
    userResult = trivialPromise2(userResult);
  }
  return fromPromise(userResult);
}
function invokeUserByKeyFunc(store, key, extraOptions) {
  var userFunc = store._byKeyFunc;
  var userResult;
  ensureRequiredFuncOption(BY_KEY, userFunc);
  userResult = userFunc.apply(store, [key, extraOptions]);
  if (!isPromise2(userResult)) {
    userResult = trivialPromise2(userResult);
  }
  return fromPromise(userResult);
}
function runRawLoad(pendingDeferred, store, userFuncOptions, continuation) {
  if (store.__rawData) {
    continuation(store.__rawData);
  } else {
    var loadPromise = store.__rawDataPromise || invokeUserLoad(store, userFuncOptions);
    if (store._cacheRawData) {
      store.__rawDataPromise = loadPromise;
    }
    loadPromise.always(function() {
      delete store.__rawDataPromise;
    }).done(function(rawData) {
      if (store._cacheRawData) {
        store.__rawData = rawData;
      }
      continuation(rawData);
    }).fail(createUserFuncFailureHandler(pendingDeferred));
  }
}
function runRawLoadWithQuery(pendingDeferred, store, options2, countOnly) {
  options2 = options2 || {};
  var userFuncOptions = {};
  if ("userData" in options2) {
    userFuncOptions.userData = options2.userData;
  }
  runRawLoad(pendingDeferred, store, userFuncOptions, function(rawData) {
    var rawDataQuery = array_query_default(rawData, {
      errorHandler: store._errorHandler
    });
    var itemsQuery;
    var totalCountQuery;
    var waitList = [];
    var items;
    var totalCount;
    if (!countOnly) {
      itemsQuery = store_helper_default.queryByOptions(rawDataQuery, options2);
      if (itemsQuery === rawDataQuery) {
        items = rawData.slice(0);
      } else {
        waitList.push(itemsQuery.enumerate().done(function(asyncResult) {
          items = asyncResult;
        }));
      }
    }
    if (options2.requireTotalCount || countOnly) {
      totalCountQuery = store_helper_default.queryByOptions(rawDataQuery, options2, true);
      if (totalCountQuery === rawDataQuery) {
        totalCount = rawData.length;
      } else {
        waitList.push(totalCountQuery.count().done(function(asyncResult) {
          totalCount = asyncResult;
        }));
      }
    }
    when.apply(renderer_default, waitList).done(function() {
      if (countOnly) {
        pendingDeferred.resolve(totalCount);
      } else if (options2.requireTotalCount) {
        pendingDeferred.resolve(items, {
          totalCount
        });
      } else {
        pendingDeferred.resolve(items);
      }
    }).fail(function(x) {
      pendingDeferred.reject(x);
    });
  });
}
function runRawLoadWithKey(pendingDeferred, store, key) {
  runRawLoad(pendingDeferred, store, {}, function(rawData) {
    var keyExpr = store.key();
    var item;
    for (var i = 0, len = rawData.length; i < len; i++) {
      item = rawData[i];
      if (keysEqual(keyExpr, store.keyOf(rawData[i]), key)) {
        pendingDeferred.resolve(item);
        return;
      }
    }
    pendingDeferred.reject(errors.Error("E4009"));
  });
}
var CustomStore = abstract_store_default.inherit({
  ctor: function(options2) {
    options2 = options2 || {};
    this.callBase(options2);
    this._useDefaultSearch = !!options2.useDefaultSearch || "raw" === options2.loadMode;
    this._loadMode = options2.loadMode;
    this._cacheRawData = false !== options2.cacheRawData;
    this._loadFunc = options2[LOAD];
    this._totalCountFunc = options2[TOTAL_COUNT];
    this._byKeyFunc = options2[BY_KEY];
    this._insertFunc = options2[INSERT];
    this._updateFunc = options2[UPDATE];
    this._removeFunc = options2[REMOVE];
  },
  _clearCache() {
    delete this.__rawData;
  },
  createQuery: function() {
    throw errors.Error("E4010");
  },
  clearRawDataCache: function() {
    this._clearCache();
  },
  _totalCountImpl: function(options2) {
    var d = new Deferred();
    if ("raw" === this._loadMode && !this._totalCountFunc) {
      runRawLoadWithQuery(d, this, options2, true);
    } else {
      invokeUserTotalCountFunc(this, options2).done(function(count) {
        d.resolve(Number(count));
      }).fail(createUserFuncFailureHandler(d));
      d = this._addFailHandlers(d);
    }
    return d.promise();
  },
  _pushImpl: function(changes) {
    if (this.__rawData) {
      applyBatch({
        keyInfo: this,
        data: this.__rawData,
        changes
      });
    }
  },
  _loadImpl: function(options2) {
    var d = new Deferred();
    if ("raw" === this._loadMode) {
      runRawLoadWithQuery(d, this, options2, false);
    } else {
      invokeUserLoad(this, options2).done(function(data3, extra) {
        d.resolve(data3, extra);
      }).fail(createUserFuncFailureHandler(d));
      d = this._addFailHandlers(d);
    }
    return d.promise();
  },
  _byKeyImpl: function(key, extraOptions) {
    var d = new Deferred();
    if (this._byKeyViaLoad()) {
      this._requireKey();
      runRawLoadWithKey(d, this, key);
    } else {
      invokeUserByKeyFunc(this, key, extraOptions).done(function(obj) {
        d.resolve(obj);
      }).fail(createUserFuncFailureHandler(d));
    }
    return d.promise();
  },
  _byKeyViaLoad: function() {
    return "raw" === this._loadMode && !this._byKeyFunc;
  },
  _insertImpl: function(values) {
    var that = this;
    var userFunc = that._insertFunc;
    var userResult;
    var d = new Deferred();
    ensureRequiredFuncOption(INSERT, userFunc);
    userResult = userFunc.apply(that, [values]);
    if (!isPromise2(userResult)) {
      userResult = trivialPromise2(userResult);
    }
    fromPromise(userResult).done(function(serverResponse) {
      if (config_default().useLegacyStoreResult) {
        d.resolve(values, serverResponse);
      } else {
        d.resolve(serverResponse || values, that.keyOf(serverResponse));
      }
    }).fail(createUserFuncFailureHandler(d));
    return d.promise();
  },
  _updateImpl: function(key, values) {
    var userFunc = this._updateFunc;
    var userResult;
    var d = new Deferred();
    ensureRequiredFuncOption(UPDATE, userFunc);
    userResult = userFunc.apply(this, [key, values]);
    if (!isPromise2(userResult)) {
      userResult = trivialPromise2(userResult);
    }
    fromPromise(userResult).done(function(serverResponse) {
      if (config_default().useLegacyStoreResult) {
        d.resolve(key, values);
      } else {
        d.resolve(serverResponse || values, key);
      }
    }).fail(createUserFuncFailureHandler(d));
    return d.promise();
  },
  _removeImpl: function(key) {
    var userFunc = this._removeFunc;
    var userResult;
    var d = new Deferred();
    ensureRequiredFuncOption(REMOVE, userFunc);
    userResult = userFunc.apply(this, [key]);
    if (!isPromise2(userResult)) {
      userResult = trivialPromise2();
    }
    fromPromise(userResult).done(function() {
      d.resolve(key);
    }).fail(createUserFuncFailureHandler(d));
    return d.promise();
  }
});
var custom_store_default = CustomStore;

// node_modules/devextreme/esm/core/utils/queue.js
function createQueue2(discardPendingTasks) {
  var _tasks = [];
  var _busy = false;
  function exec() {
    while (_tasks.length) {
      _busy = true;
      var task = _tasks.shift();
      var result2 = task();
      if (void 0 === result2) {
        continue;
      }
      if (result2.then) {
        when(result2).always(exec);
        return;
      }
      throw errors_default.Error("E0015");
    }
    _busy = false;
  }
  return {
    add: function(task, removeTaskCallback) {
      if (!discardPendingTasks) {
        _tasks.push(task);
      } else {
        if (_tasks[0] && removeTaskCallback) {
          removeTaskCallback(_tasks[0]);
        }
        _tasks = [task];
      }
      if (!_busy) {
        exec();
      }
    },
    busy: function() {
      return _busy;
    }
  };
}
var enqueue = createQueue2().add;

// node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}

// node_modules/devextreme/esm/core/http_request.js
var window9 = getWindow();
var nativeXMLHttpRequest = {
  getXhr: function() {
    return new window9.XMLHttpRequest();
  }
};
var http_request_default = dependency_injector_default(nativeXMLHttpRequest);

// node_modules/devextreme/esm/core/utils/ajax.js
var window10 = getWindow();
var SUCCESS = "success";
var ERROR = "error";
var TIMEOUT = "timeout";
var NO_CONTENT = "nocontent";
var PARSER_ERROR = "parsererror";
var isStatusSuccess = function(status) {
  return 200 <= status && status < 300;
};
var hasContent = function(status) {
  return 204 !== status;
};
var paramsConvert = function(params) {
  var result2 = [];
  for (var name2 in params) {
    var value2 = params[name2];
    if (void 0 === value2) {
      continue;
    }
    if (null === value2) {
      value2 = "";
    }
    if ("function" === typeof value2) {
      value2 = value2();
    }
    result2.push(encodeURIComponent(name2) + "=" + encodeURIComponent(value2));
  }
  return result2.join("&");
};
var createScript = function(options2) {
  var script = dom_adapter_default.createElement("script");
  for (var name2 in options2) {
    script[name2] = options2[name2];
  }
  return script;
};
var removeScript = function(scriptNode) {
  scriptNode.parentNode.removeChild(scriptNode);
};
var appendToHead = function(element) {
  return dom_adapter_default.getHead().appendChild(element);
};
var evalScript = function(code) {
  var script = createScript({
    text: code
  });
  appendToHead(script);
  removeScript(script);
};
var evalCrossDomainScript = function(url) {
  var script = createScript({
    src: url
  });
  return new Promise(function(resolve, reject) {
    var events = {
      load: resolve,
      error: reject
    };
    var loadHandler = function(e) {
      events[e.type]();
      removeScript(script);
    };
    for (var event in events) {
      dom_adapter_default.listen(script, event, loadHandler);
    }
    appendToHead(script);
  });
};
var getAcceptHeader = function(options2) {
  var dataType = options2.dataType || "*";
  var scriptAccept = "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript";
  var accepts = {
    "*": "*/*",
    text: "text/plain",
    html: "text/html",
    xml: "application/xml, text/xml",
    json: "application/json, text/javascript",
    jsonp: scriptAccept,
    script: scriptAccept
  };
  extendFromObject(accepts, options2.accepts, true);
  return accepts[dataType] ? accepts[dataType] + ("*" !== dataType ? ", */*; q=0.01" : "") : accepts["*"];
};
var getContentTypeHeader = function(options2) {
  var defaultContentType;
  if (options2.data && !options2.upload && "GET" !== getMethod(options2)) {
    defaultContentType = "application/x-www-form-urlencoded;charset=utf-8";
  }
  return options2.contentType || defaultContentType;
};
var getDataFromResponse = function(xhr) {
  return xhr.responseType && "text" !== xhr.responseType || "string" !== typeof xhr.responseText ? xhr.response : xhr.responseText;
};
var postProcess = function(deferred, xhr, dataType) {
  var data3 = getDataFromResponse(xhr);
  switch (dataType) {
    case "jsonp":
      evalScript(data3);
      break;
    case "script":
      evalScript(data3);
      deferred.resolve(data3, SUCCESS, xhr);
      break;
    case "json":
      try {
        deferred.resolve(JSON.parse(data3), SUCCESS, xhr);
      } catch (e) {
        deferred.reject(xhr, PARSER_ERROR, e);
      }
      break;
    default:
      deferred.resolve(data3, SUCCESS, xhr);
  }
};
var isCrossDomain = function(url) {
  if (!hasWindow()) {
    return true;
  }
  var crossDomain = false;
  var originAnchor = dom_adapter_default.createElement("a");
  var urlAnchor = dom_adapter_default.createElement("a");
  originAnchor.href = window10.location.href;
  try {
    urlAnchor.href = url;
    urlAnchor.href = urlAnchor.href;
    crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
  } catch (e) {
    crossDomain = true;
  }
  return crossDomain;
};
var setHttpTimeout = function(timeout, xhr) {
  return timeout && setTimeout(function() {
    xhr.customStatus = TIMEOUT;
    xhr.abort();
  }, timeout);
};
var getJsonpOptions = function(options2) {
  if ("jsonp" === options2.dataType) {
    var random = Math.random().toString().replace(/\D/g, "");
    var callbackName = options2.jsonpCallback || "dxCallback" + Date.now() + "_" + random;
    var callbackParameter = options2.jsonp || "callback";
    options2.data = options2.data || {};
    options2.data[callbackParameter] = callbackName;
    return callbackName;
  }
};
var getRequestOptions = function(options2, headers) {
  var params = options2.data;
  var paramsAlreadyString = "string" === typeof params;
  var url = options2.url || window10.location.href;
  if (!paramsAlreadyString && !options2.cache) {
    params = params || {};
    params._ = Date.now();
  }
  if (params && !options2.upload) {
    if (!paramsAlreadyString) {
      params = paramsConvert(params);
    }
    if ("GET" === getMethod(options2)) {
      if ("" !== params) {
        url += (url.indexOf("?") > -1 ? "&" : "?") + params;
      }
      params = null;
    } else if (headers["Content-Type"] && headers["Content-Type"].indexOf("application/x-www-form-urlencoded") > -1) {
      params = params.replace(/%20/g, "+");
    }
  }
  return {
    url,
    parameters: params
  };
};
function getMethod(options2) {
  return (options2.method || "GET").toUpperCase();
}
var getRequestHeaders = function(options2) {
  var headers = options2.headers || {};
  headers["Content-Type"] = headers["Content-Type"] || getContentTypeHeader(options2);
  headers.Accept = headers.Accept || getAcceptHeader(options2);
  if (!options2.crossDomain && !headers["X-Requested-With"]) {
    headers["X-Requested-With"] = "XMLHttpRequest";
  }
  return headers;
};
var sendRequest = function(options2) {
  var xhr = http_request_default.getXhr();
  var d = new Deferred();
  var result2 = d.promise();
  var async = isDefined(options2.async) ? options2.async : true;
  var dataType = options2.dataType;
  var timeout = options2.timeout || 0;
  var timeoutId;
  options2.crossDomain = isCrossDomain(options2.url);
  var needScriptEvaluation = "jsonp" === dataType || "script" === dataType;
  if (void 0 === options2.cache) {
    options2.cache = !needScriptEvaluation;
  }
  var callbackName = getJsonpOptions(options2);
  var headers = getRequestHeaders(options2);
  var requestOptions = getRequestOptions(options2, headers);
  var url = requestOptions.url;
  var parameters = requestOptions.parameters;
  if (callbackName) {
    window10[callbackName] = function(data3) {
      d.resolve(data3, SUCCESS, xhr);
    };
  }
  if (options2.crossDomain && needScriptEvaluation) {
    evalCrossDomainScript(url).then(function() {
      if ("jsonp" === dataType) {
        return;
      }
      d.resolve(null, SUCCESS, xhr);
    }, function() {
      d.reject(xhr, ERROR);
    });
    return result2;
  }
  if (options2.crossDomain && !("withCredentials" in xhr)) {
    d.reject(xhr, ERROR);
    return result2;
  }
  xhr.open(getMethod(options2), url, async, options2.username, options2.password);
  if (async) {
    xhr.timeout = timeout;
    timeoutId = setHttpTimeout(timeout, xhr);
  }
  xhr.onreadystatechange = function(e) {
    if (4 === xhr.readyState) {
      clearTimeout(timeoutId);
      if (isStatusSuccess(xhr.status)) {
        if (hasContent(xhr.status)) {
          postProcess(d, xhr, dataType);
        } else {
          d.resolve(null, NO_CONTENT, xhr);
        }
      } else {
        d.reject(xhr, xhr.customStatus || ERROR);
      }
    }
  };
  if (options2.upload) {
    xhr.upload.onprogress = options2.upload.onprogress;
    xhr.upload.onloadstart = options2.upload.onloadstart;
    xhr.upload.onabort = options2.upload.onabort;
  }
  if (options2.xhrFields) {
    for (var field in options2.xhrFields) {
      xhr[field] = options2.xhrFields[field];
    }
  }
  if ("arraybuffer" === options2.responseType) {
    xhr.responseType = options2.responseType;
  }
  for (var name2 in headers) {
    if (Object.prototype.hasOwnProperty.call(headers, name2) && isDefined(headers[name2])) {
      xhr.setRequestHeader(name2, headers[name2]);
    }
  }
  if (options2.beforeSend) {
    options2.beforeSend(xhr);
  }
  xhr.send(parameters);
  result2.abort = function() {
    xhr.abort();
  };
  return result2;
};
var ajax_default = dependency_injector_default({
  sendRequest
});

// node_modules/devextreme/esm/data/query_adapters.js
var query_adapters_default = {};

// node_modules/devextreme/esm/data/remote_query.js
var remoteQueryImpl = function remoteQueryImpl2(url, queryOptions, tasks) {
  tasks = tasks || [];
  queryOptions = queryOptions || {};
  var createTask = function(name2, args) {
    return {
      name: name2,
      args
    };
  };
  var exec = function(executorTask) {
    var d = new Deferred();
    var _adapterFactory;
    var _adapter;
    var _taskQueue;
    var _currentTask;
    var _mergedSortArgs;
    var rejectWithNotify = function(error) {
      var handler = queryOptions.errorHandler;
      if (handler) {
        handler(error);
      }
      handleError(error);
      d.reject(error);
    };
    function mergeSortTask(task) {
      switch (task.name) {
        case "sortBy":
          _mergedSortArgs = [task.args];
          return true;
        case "thenBy":
          if (!_mergedSortArgs) {
            throw errors.Error("E4004");
          }
          _mergedSortArgs.push(task.args);
          return true;
      }
      return false;
    }
    try {
      _adapterFactory = queryOptions.adapter;
      if (!isFunction(_adapterFactory)) {
        _adapterFactory = query_adapters_default[_adapterFactory];
      }
      _adapter = _adapterFactory(queryOptions);
      _taskQueue = [].concat(tasks).concat(executorTask);
      var optimize = _adapter.optimize;
      if (optimize) {
        optimize(_taskQueue);
      }
      while (_taskQueue.length) {
        _currentTask = _taskQueue[0];
        if (!mergeSortTask(_currentTask)) {
          if (_mergedSortArgs) {
            _taskQueue.unshift(createTask("multiSort", [_mergedSortArgs]));
            _mergedSortArgs = null;
            continue;
          }
          if ("enumerate" !== String(_currentTask.name)) {
            if (!_adapter[_currentTask.name] || false === _adapter[_currentTask.name].apply(_adapter, _currentTask.args)) {
              break;
            }
          }
        }
        _taskQueue.shift();
      }
      !function() {
        var head = _taskQueue[0];
        var unmergedTasks = [];
        if (head && "multiSort" === head.name) {
          _taskQueue.shift();
          each(head.args[0], function() {
            unmergedTasks.push(createTask(unmergedTasks.length ? "thenBy" : "sortBy", this));
          });
        }
        _taskQueue = unmergedTasks.concat(_taskQueue);
      }();
      _adapter.exec(url).done(function(result2, extra) {
        if (!_taskQueue.length) {
          d.resolve(result2, extra);
        } else {
          var clientChain = array_query_default(result2, {
            errorHandler: queryOptions.errorHandler
          });
          each(_taskQueue, function() {
            clientChain = clientChain[this.name].apply(clientChain, this.args);
          });
          clientChain.done(d.resolve).fail(d.reject);
        }
      }).fail(rejectWithNotify);
    } catch (x) {
      rejectWithNotify(x);
    }
    return d.promise();
  };
  var query2 = {};
  each(["sortBy", "thenBy", "filter", "slice", "select", "groupBy"], function() {
    var name2 = String(this);
    query2[name2] = function() {
      return remoteQueryImpl2(url, queryOptions, tasks.concat(createTask(name2, arguments)));
    };
  });
  each(["count", "min", "max", "sum", "avg", "aggregate", "enumerate"], function() {
    var name2 = String(this);
    query2[name2] = function() {
      return exec.call(this, createTask(name2, arguments));
    };
  });
  return query2;
};
var remote_query_default = remoteQueryImpl;

// node_modules/devextreme/esm/data/query_implementation.js
var queryImpl = {
  array: array_query_default,
  remote: remote_query_default
};

// node_modules/devextreme/esm/data/query.js
var query = function() {
  var impl = Array.isArray(arguments[0]) ? "array" : "remote";
  return queryImpl[impl].apply(this, arguments);
};
var query_default = query;

// node_modules/devextreme/esm/data/array_store.js
var ArrayStore = abstract_store_default.inherit({
  ctor: function(options2) {
    if (Array.isArray(options2)) {
      options2 = {
        data: options2
      };
    } else {
      options2 = options2 || {};
    }
    this.callBase(options2);
    var initialArray = options2.data;
    if (initialArray && !Array.isArray(initialArray)) {
      throw errors.Error("E4006");
    }
    this._array = initialArray || [];
  },
  createQuery: function() {
    return query_default(this._array, {
      errorHandler: this._errorHandler
    });
  },
  _byKeyImpl: function(key) {
    var index2 = indexByKey(this, this._array, key);
    if (-1 === index2) {
      return rejectedPromise(errors.Error("E4009"));
    }
    return trivialPromise(this._array[index2]);
  },
  _insertImpl: function(values) {
    return insert(this, this._array, values);
  },
  _pushImpl: function(changes) {
    applyBatch({
      keyInfo: this,
      data: this._array,
      changes
    });
  },
  _updateImpl: function(key, values) {
    return update(this, this._array, key, values);
  },
  _removeImpl: function(key) {
    return remove(this, this._array, key);
  },
  clear: function() {
    this._eventsStrategy.fireEvent("modifying");
    this._array = [];
    this._eventsStrategy.fireEvent("modified");
  }
}, "array");
var array_store_default = ArrayStore;

// node_modules/devextreme/esm/data/data_source/utils.js
var _excluded = ["items"];
var CANCELED_TOKEN = "canceled";
var isPending = (deferred) => "pending" === deferred.state();
var normalizeStoreLoadOptionAccessorArguments = (originalArguments) => {
  switch (originalArguments.length) {
    case 0:
      return;
    case 1:
      return originalArguments[0];
  }
  return [].slice.call(originalArguments);
};
var mapGroup = (group, level, mapper) => map(group, (item) => {
  var restItem = _objectWithoutPropertiesLoose(item, _excluded);
  return _extends({}, restItem, {
    items: mapRecursive(item.items, level - 1, mapper)
  });
});
var mapRecursive = (items, level, mapper) => {
  if (!Array.isArray(items)) {
    return items;
  }
  return level ? mapGroup(items, level, mapper) : map(items, mapper);
};
var mapDataRespectingGrouping = (items, mapper, groupInfo) => {
  var level = groupInfo ? normalizeSortingInfo(groupInfo).length : 0;
  return mapRecursive(items, level, mapper);
};
var normalizeLoadResult = (data3, extra) => {
  var _data;
  if (null !== (_data = data3) && void 0 !== _data && _data.data) {
    extra = data3;
    data3 = data3.data;
  }
  if (!Array.isArray(data3)) {
    data3 = [data3];
  }
  return {
    data: data3,
    extra
  };
};
var createCustomStoreFromLoadFunc = (options2) => {
  var storeConfig = {};
  each(["useDefaultSearch", "key", "load", "loadMode", "cacheRawData", "byKey", "lookup", "totalCount", "insert", "update", "remove"], function() {
    storeConfig[this] = options2[this];
    delete options2[this];
  });
  return new custom_store_default(storeConfig);
};
var createStoreFromConfig = (storeConfig) => {
  var alias = storeConfig.type;
  delete storeConfig.type;
  return abstract_store_default.create(alias, storeConfig);
};
var createCustomStoreFromUrl = (url, normalizationOptions) => new custom_store_default({
  load: () => ajax_default.sendRequest({
    url,
    dataType: "json"
  }),
  loadMode: null === normalizationOptions || void 0 === normalizationOptions ? void 0 : normalizationOptions.fromUrlLoadMode
});
var normalizeDataSourceOptions = (options2, normalizationOptions) => {
  var store;
  if ("string" === typeof options2) {
    options2 = {
      paginate: false,
      store: createCustomStoreFromUrl(options2, normalizationOptions)
    };
  }
  if (void 0 === options2) {
    options2 = [];
  }
  if (Array.isArray(options2) || options2 instanceof abstract_store_default) {
    options2 = {
      store: options2
    };
  } else {
    options2 = extend({}, options2);
  }
  if (void 0 === options2.store) {
    options2.store = [];
  }
  store = options2.store;
  if ("load" in options2) {
    store = createCustomStoreFromLoadFunc(options2);
  } else if (Array.isArray(store)) {
    store = new array_store_default(store);
  } else if (isPlainObject(store)) {
    store = createStoreFromConfig(extend({}, store));
  }
  options2.store = store;
  return options2;
};

// node_modules/devextreme/esm/data/data_source/operation_manager.js
var OperationManager = class {
  constructor() {
    this._counter = -1;
    this._deferreds = {};
  }
  add(deferred) {
    this._counter++;
    this._deferreds[this._counter] = deferred;
    return this._counter;
  }
  remove(operationId) {
    return delete this._deferreds[operationId];
  }
  cancel(operationId) {
    if (operationId in this._deferreds) {
      this._deferreds[operationId].reject(CANCELED_TOKEN);
      return true;
    }
    return false;
  }
  cancelAll() {
    while (this._counter > -1) {
      this.cancel(this._counter);
      this._counter--;
    }
  }
};

// node_modules/devextreme/esm/data/data_source/data_source.js
var DataSource = class_default.inherit({
  ctor(options2) {
    var _options$reshapeOnPus;
    options2 = normalizeDataSourceOptions(options2);
    this._eventsStrategy = new EventsStrategy(this, {
      syncStrategy: true
    });
    this._store = options2.store;
    this._changedTime = 0;
    var needThrottling = 0 !== options2.pushAggregationTimeout;
    if (needThrottling) {
      var throttlingTimeout = void 0 === options2.pushAggregationTimeout ? () => 5 * this._changedTime : options2.pushAggregationTimeout;
      var pushDeferred;
      var lastPushWaiters;
      var throttlingPushHandler = throttleChanges((changes) => {
        pushDeferred.resolve();
        var storePushPending = when(...lastPushWaiters);
        storePushPending.done(() => this._onPush(changes));
        lastPushWaiters = void 0;
        pushDeferred = void 0;
      }, throttlingTimeout);
      this._onPushHandler = (args) => {
        this._aggregationTimeoutId = throttlingPushHandler(args.changes);
        if (!pushDeferred) {
          pushDeferred = new Deferred();
        }
        lastPushWaiters = args.waitFor;
        args.waitFor.push(pushDeferred.promise());
      };
      this._store.on("beforePushAggregation", this._onPushHandler);
    } else {
      this._onPushHandler = (changes) => this._onPush(changes);
      this._store.on("push", this._onPushHandler);
    }
    this._storeLoadOptions = this._extractLoadOptions(options2);
    this._mapFunc = options2.map;
    this._postProcessFunc = options2.postProcess;
    this._pageIndex = void 0 !== options2.pageIndex ? options2.pageIndex : 0;
    this._pageSize = void 0 !== options2.pageSize ? options2.pageSize : 20;
    this._loadingCount = 0;
    this._loadQueue = this._createLoadQueue();
    this._searchValue = "searchValue" in options2 ? options2.searchValue : null;
    this._searchOperation = options2.searchOperation || "contains";
    this._searchExpr = options2.searchExpr;
    this._paginate = options2.paginate;
    this._reshapeOnPush = null !== (_options$reshapeOnPus = options2.reshapeOnPush) && void 0 !== _options$reshapeOnPus ? _options$reshapeOnPus : false;
    each(["onChanged", "onLoadError", "onLoadingChanged", "onCustomizeLoadResult", "onCustomizeStoreLoadOptions"], (_, optionName) => {
      if (optionName in options2) {
        this.on(optionName.substr(2, 1).toLowerCase() + optionName.substr(3), options2[optionName]);
      }
    });
    this._operationManager = new OperationManager();
    this._init();
  },
  _init() {
    this._items = [];
    this._userData = {};
    this._totalCount = -1;
    this._isLoaded = false;
    if (!isDefined(this._paginate)) {
      this._paginate = !this.group();
    }
    this._isLastPage = !this._paginate;
  },
  dispose() {
    var _this$_delayedLoadTas;
    this._store.off("beforePushAggregation", this._onPushHandler);
    this._store.off("push", this._onPushHandler);
    this._eventsStrategy.dispose();
    clearTimeout(this._aggregationTimeoutId);
    null === (_this$_delayedLoadTas = this._delayedLoadTask) || void 0 === _this$_delayedLoadTas ? void 0 : _this$_delayedLoadTas.abort();
    this._operationManager.cancelAll();
    delete this._store;
    delete this._items;
    delete this._delayedLoadTask;
    this._disposed = true;
  },
  _extractLoadOptions(options2) {
    var result2 = {};
    var names = ["sort", "filter", "langParams", "select", "group", "requireTotalCount"];
    var customNames = this._store._customLoadOptions();
    if (customNames) {
      names = names.concat(customNames);
    }
    each(names, function() {
      result2[this] = options2[this];
    });
    return result2;
  },
  loadOptions() {
    return this._storeLoadOptions;
  },
  items() {
    return this._items;
  },
  pageIndex(newIndex) {
    if (!isNumeric(newIndex)) {
      return this._pageIndex;
    }
    this._pageIndex = newIndex;
    this._isLastPage = !this._paginate;
  },
  paginate(value2) {
    if (!isBoolean(value2)) {
      return this._paginate;
    }
    if (this._paginate !== value2) {
      this._paginate = value2;
      this.pageIndex(0);
    }
  },
  pageSize(value2) {
    if (!isNumeric(value2)) {
      return this._pageSize;
    }
    this._pageSize = value2;
  },
  isLastPage() {
    return this._isLastPage;
  },
  generateStoreLoadOptionAccessor(optionName) {
    return (args) => {
      var normalizedArgs = normalizeStoreLoadOptionAccessorArguments(args);
      if (void 0 === normalizedArgs) {
        return this._storeLoadOptions[optionName];
      }
      this._storeLoadOptions[optionName] = normalizedArgs;
    };
  },
  sort() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return this.generateStoreLoadOptionAccessor("sort")(args);
  },
  filter() {
    var newFilter = normalizeStoreLoadOptionAccessorArguments(arguments);
    if (void 0 === newFilter) {
      return this._storeLoadOptions.filter;
    }
    this._storeLoadOptions.filter = newFilter;
    this.pageIndex(0);
  },
  group() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return this.generateStoreLoadOptionAccessor("group")(args);
  },
  select() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    return this.generateStoreLoadOptionAccessor("select")(args);
  },
  requireTotalCount(value2) {
    if (!isBoolean(value2)) {
      return this._storeLoadOptions.requireTotalCount;
    }
    this._storeLoadOptions.requireTotalCount = value2;
  },
  searchValue(value2) {
    if (arguments.length < 1) {
      return this._searchValue;
    }
    this._searchValue = value2;
    this.pageIndex(0);
  },
  searchOperation(op) {
    if (!isString(op)) {
      return this._searchOperation;
    }
    this._searchOperation = op;
    this.pageIndex(0);
  },
  searchExpr(expr) {
    var argc = arguments.length;
    if (0 === argc) {
      return this._searchExpr;
    }
    if (argc > 1) {
      expr = [].slice.call(arguments);
    }
    this._searchExpr = expr;
    this.pageIndex(0);
  },
  store() {
    return this._store;
  },
  key() {
    var _this$_store;
    return null === (_this$_store = this._store) || void 0 === _this$_store ? void 0 : _this$_store.key();
  },
  totalCount() {
    return this._totalCount;
  },
  isLoaded() {
    return this._isLoaded;
  },
  isLoading() {
    return this._loadingCount > 0;
  },
  beginLoading() {
    this._changeLoadingCount(1);
  },
  endLoading() {
    this._changeLoadingCount(-1);
  },
  _createLoadQueue: () => createQueue2(),
  _changeLoadingCount(increment) {
    var oldLoading = this.isLoading();
    this._loadingCount += increment;
    var newLoading = this.isLoading();
    if (oldLoading ^ newLoading) {
      this._eventsStrategy.fireEvent("loadingChanged", [newLoading]);
    }
  },
  _scheduleLoadCallbacks(deferred) {
    this.beginLoading();
    deferred.always(() => {
      this.endLoading();
    });
  },
  _scheduleFailCallbacks(deferred) {
    var _this = this;
    deferred.fail(function() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      if (args[0] === CANCELED_TOKEN) {
        return;
      }
      _this._eventsStrategy.fireEvent("loadError", args);
    });
  },
  _fireChanged(args) {
    var date = /* @__PURE__ */ new Date();
    this._eventsStrategy.fireEvent("changed", args);
    this._changedTime = /* @__PURE__ */ new Date() - date;
  },
  _scheduleChangedCallbacks(deferred) {
    deferred.done(() => this._fireChanged());
  },
  loadSingle(propName, propValue) {
    var d = new Deferred();
    var key = this.key();
    var store = this._store;
    var options2 = this._createStoreLoadOptions();
    this._scheduleFailCallbacks(d);
    if (arguments.length < 2) {
      propValue = propName;
      propName = key;
    }
    delete options2.skip;
    delete options2.group;
    delete options2.refresh;
    delete options2.pageIndex;
    delete options2.searchString;
    (() => {
      if (propName === key || store instanceof custom_store_default && !store._byKeyViaLoad()) {
        return store.byKey(propValue, options2);
      }
      options2.take = 1;
      options2.filter = options2.filter ? [options2.filter, [propName, propValue]] : [propName, propValue];
      return store.load(options2);
    })().fail(d.reject).done((data3) => {
      var isEmptyArray = Array.isArray(data3) && !data3.length;
      if (!isDefined(data3) || isEmptyArray) {
        d.reject(new errors.Error("E4009"));
      } else {
        if (!Array.isArray(data3)) {
          data3 = [data3];
        }
        d.resolve(this._applyMapFunction(data3)[0]);
      }
    });
    return d.promise();
  },
  load() {
    var d = new Deferred();
    var loadTask = () => {
      if (this._disposed) {
        return;
      }
      if (!isPending(d)) {
        return;
      }
      return this._loadFromStore(loadOperation, d);
    };
    this._scheduleLoadCallbacks(d);
    this._scheduleFailCallbacks(d);
    this._scheduleChangedCallbacks(d);
    var loadOperation = this._createLoadOperation(d);
    this._eventsStrategy.fireEvent("customizeStoreLoadOptions", [loadOperation]);
    this._loadQueue.add(() => {
      if ("number" === typeof loadOperation.delay) {
        this._delayedLoadTask = executeAsync(loadTask, loadOperation.delay);
      } else {
        loadTask();
      }
      return d.promise();
    });
    return d.promise({
      operationId: loadOperation.operationId
    });
  },
  _onPush(changes) {
    if (this._reshapeOnPush) {
      this.load();
    } else {
      var changingArgs = {
        changes
      };
      this._eventsStrategy.fireEvent("changing", [changingArgs]);
      var group = this.group();
      var items = this.items();
      var groupLevel = 0;
      var dataSourceChanges = this.paginate() || group ? changes.filter((item) => "update" === item.type) : changes;
      if (group) {
        groupLevel = Array.isArray(group) ? group.length : 1;
      }
      if (this._mapFunc) {
        dataSourceChanges.forEach((item) => {
          if ("insert" === item.type) {
            item.data = this._mapFunc(item.data);
          }
        });
      }
      if (changingArgs.postProcessChanges) {
        dataSourceChanges = changingArgs.postProcessChanges(dataSourceChanges);
      }
      applyBatch({
        keyInfo: this.store(),
        data: items,
        changes: dataSourceChanges,
        groupCount: groupLevel,
        useInsertIndex: true
      });
      this._fireChanged([{
        changes
      }]);
    }
  },
  _createLoadOperation(deferred) {
    var operationId = this._operationManager.add(deferred);
    var storeLoadOptions = this._createStoreLoadOptions();
    if (this._store && !isEmptyObject(null === storeLoadOptions || void 0 === storeLoadOptions ? void 0 : storeLoadOptions.langParams)) {
      this._store._langParams = _extends({}, this._store._langParams, storeLoadOptions.langParams);
    }
    deferred.always(() => this._operationManager.remove(operationId));
    return {
      operationId,
      storeLoadOptions
    };
  },
  reload() {
    var store = this.store();
    store._clearCache();
    this._init();
    return this.load();
  },
  cancel(operationId) {
    return this._operationManager.cancel(operationId);
  },
  cancelAll() {
    return this._operationManager.cancelAll();
  },
  _addSearchOptions(storeLoadOptions) {
    if (this._disposed) {
      return;
    }
    if (this.store()._useDefaultSearch) {
      this._addSearchFilter(storeLoadOptions);
    } else {
      storeLoadOptions.searchOperation = this._searchOperation;
      storeLoadOptions.searchValue = this._searchValue;
      storeLoadOptions.searchExpr = this._searchExpr;
    }
  },
  _createStoreLoadOptions() {
    var result2 = extend({}, this._storeLoadOptions);
    this._addSearchOptions(result2);
    if (this._paginate) {
      if (this._pageSize) {
        result2.skip = this._pageIndex * this._pageSize;
        result2.take = this._pageSize;
      }
    }
    result2.userData = this._userData;
    return result2;
  },
  _addSearchFilter(storeLoadOptions) {
    var value2 = this._searchValue;
    var op = this._searchOperation;
    var selector = this._searchExpr;
    var searchFilter = [];
    if (!value2) {
      return;
    }
    if (!selector) {
      selector = "this";
    }
    if (!Array.isArray(selector)) {
      selector = [selector];
    }
    each(selector, function(i, item) {
      if (searchFilter.length) {
        searchFilter.push("or");
      }
      searchFilter.push([item, op, value2]);
    });
    if (storeLoadOptions.filter) {
      storeLoadOptions.filter = [searchFilter, storeLoadOptions.filter];
    } else {
      storeLoadOptions.filter = searchFilter;
    }
  },
  _loadFromStore(loadOptions, pendingDeferred) {
    var handleSuccess = (data3, extra) => {
      if (this._disposed) {
        return;
      }
      if (!isPending(pendingDeferred)) {
        return;
      }
      var loadResult = extend(normalizeLoadResult(data3, extra), loadOptions);
      this._eventsStrategy.fireEvent("customizeLoadResult", [loadResult]);
      when(loadResult.data).done((data4) => {
        loadResult.data = data4;
        this._processStoreLoadResult(loadResult, pendingDeferred);
      }).fail(pendingDeferred.reject);
    };
    if (loadOptions.data) {
      return new Deferred().resolve(loadOptions.data).done(handleSuccess);
    }
    return this.store().load(loadOptions.storeLoadOptions).done(handleSuccess).fail(pendingDeferred.reject);
  },
  _processStoreLoadResult(loadResult, pendingDeferred) {
    var data3 = loadResult.data;
    var extra = loadResult.extra;
    var storeLoadOptions = loadResult.storeLoadOptions;
    var resolvePendingDeferred = () => {
      this._isLoaded = true;
      this._totalCount = isFinite(extra.totalCount) ? extra.totalCount : -1;
      return pendingDeferred.resolve(data3, extra);
    };
    if (this._disposed) {
      return;
    }
    data3 = this._applyPostProcessFunction(this._applyMapFunction(data3));
    if (!isObject(extra)) {
      extra = {};
    }
    this._items = data3;
    if (!data3.length || !this._paginate || this._pageSize && data3.length < this._pageSize) {
      this._isLastPage = true;
    }
    if (storeLoadOptions.requireTotalCount && !isFinite(extra.totalCount)) {
      (() => {
        this.store().totalCount(storeLoadOptions).done(function(count) {
          extra.totalCount = count;
          resolvePendingDeferred();
        }).fail(pendingDeferred.reject);
      })();
    } else {
      resolvePendingDeferred();
    }
  },
  _applyMapFunction(data3) {
    if (this._mapFunc) {
      return mapDataRespectingGrouping(data3, this._mapFunc, this.group());
    }
    return data3;
  },
  _applyPostProcessFunction(data3) {
    if (this._postProcessFunc) {
      return this._postProcessFunc(data3);
    }
    return data3;
  },
  on(eventName, eventHandler) {
    this._eventsStrategy.on(eventName, eventHandler);
    return this;
  },
  off(eventName, eventHandler) {
    this._eventsStrategy.off(eventName, eventHandler);
    return this;
  }
});

// node_modules/devextreme/esm/core/utils/math.js
var sign = function(value2) {
  if (0 === value2) {
    return 0;
  }
  return value2 / Math.abs(value2);
};
var fitIntoRange = function(value2, minValue, maxValue) {
  var isMinValueUndefined = !minValue && 0 !== minValue;
  var isMaxValueUndefined = !maxValue && 0 !== maxValue;
  isMinValueUndefined && (minValue = !isMaxValueUndefined ? Math.min(value2, maxValue) : value2);
  isMaxValueUndefined && (maxValue = !isMinValueUndefined ? Math.max(value2, minValue) : value2);
  return Math.min(Math.max(value2, minValue), maxValue);
};
var inRange = function(value2, minValue, maxValue) {
  return value2 >= minValue && value2 <= maxValue;
};
function getExponent(value2) {
  return Math.abs(parseInt(value2.toExponential().split("e")[1]));
}
function getExponentialNotation(value2) {
  var parts = value2.toExponential().split("e");
  var mantissa = parseFloat(parts[0]);
  var exponent = parseInt(parts[1]);
  return {
    exponent,
    mantissa
  };
}
function multiplyInExponentialForm(value2, exponentShift) {
  var exponentialNotation = getExponentialNotation(value2);
  return parseFloat("".concat(exponentialNotation.mantissa, "e").concat(exponentialNotation.exponent + exponentShift));
}
function _isEdgeBug() {
  return "0.000300" !== 3e-4.toPrecision(3);
}
function adjust(value2, interval) {
  var precision = getPrecision(interval || 0) + 2;
  var separatedValue = value2.toString().split(".");
  var sourceValue = value2;
  var absValue = Math.abs(value2);
  var separatedAdjustedValue;
  var isExponentValue = isExponential(value2);
  var integerPart = absValue > 1 ? 10 : 0;
  if (1 === separatedValue.length) {
    return value2;
  }
  if (!isExponentValue) {
    if (isExponential(interval)) {
      precision = separatedValue[0].length + getExponent(interval);
    }
    value2 = absValue;
    value2 = value2 - Math.floor(value2) + integerPart;
  }
  precision = _isEdgeBug() && getExponent(value2) > 6 || precision > 7 ? 15 : 7;
  if (!isExponentValue) {
    separatedAdjustedValue = parseFloat(value2.toPrecision(precision)).toString().split(".");
    if (separatedAdjustedValue[0] === integerPart.toString()) {
      return parseFloat(separatedValue[0] + "." + separatedAdjustedValue[1]);
    }
  }
  return parseFloat(sourceValue.toPrecision(precision));
}
function getPrecision(value2) {
  var str = value2.toString();
  if (str.indexOf(".") < 0) {
    return 0;
  }
  var mantissa = str.split(".");
  var positionOfDelimiter = mantissa[1].indexOf("e");
  return positionOfDelimiter >= 0 ? positionOfDelimiter : mantissa[1].length;
}

// node_modules/devextreme/esm/renovation/ui/common/utils/date/toMilliseconds.js
var timeIntervals = {
  millisecond: 1,
  second: 1e3,
  minute: 6e4,
  hour: 36e5,
  day: 864e5,
  week: 6048e5,
  month: 2592e6,
  quarter: 7776e6,
  year: 31536e6
};
function toMilliseconds(value2) {
  return timeIntervals[value2];
}

// node_modules/devextreme/esm/core/utils/date.js
var DAYS_IN_WEEK = 7;
var THURSDAY_WEEK_NUMBER = 4;
var SUNDAY_WEEK_NUMBER = 7;
var USUAL_WEEK_COUNT_IN_YEAR = 52;
var dateUnitIntervals = ["millisecond", "second", "minute", "hour", "day", "week", "month", "quarter", "year"];
var getDatesInterval = function(startDate, endDate, intervalUnit) {
  var delta = endDate.getTime() - startDate.getTime();
  var millisecondCount = toMilliseconds(intervalUnit) || 1;
  return Math.floor(delta / millisecondCount);
};
var getNextDateUnit = function(unit, withWeeks) {
  var interval = getDateUnitInterval(unit);
  switch (interval) {
    case "millisecond":
      return "second";
    case "second":
      return "minute";
    case "minute":
      return "hour";
    case "hour":
      return "day";
    case "day":
      return withWeeks ? "week" : "month";
    case "week":
      return "month";
    case "month":
      return "quarter";
    case "quarter":
    case "year":
      return "year";
    default:
      return 0;
  }
};
var convertMillisecondsToDateUnits = function(value2) {
  var i;
  var dateUnitCount;
  var dateUnitInterval;
  var dateUnitIntervals2 = ["millisecond", "second", "minute", "hour", "day", "month", "year"];
  var result2 = {};
  for (i = dateUnitIntervals2.length - 1; i >= 0; i--) {
    dateUnitInterval = dateUnitIntervals2[i];
    dateUnitCount = Math.floor(value2 / toMilliseconds(dateUnitInterval));
    if (dateUnitCount > 0) {
      result2[dateUnitInterval + "s"] = dateUnitCount;
      value2 -= convertDateUnitToMilliseconds(dateUnitInterval, dateUnitCount);
    }
  }
  return result2;
};
var dateToMilliseconds = function(tickInterval) {
  var milliseconds = 0;
  if (isObject(tickInterval)) {
    each(tickInterval, function(key, value2) {
      milliseconds += convertDateUnitToMilliseconds(key.substr(0, key.length - 1), value2);
    });
  }
  if (isString(tickInterval)) {
    milliseconds = convertDateUnitToMilliseconds(tickInterval, 1);
  }
  return milliseconds;
};
function convertDateUnitToMilliseconds(dateUnit, count) {
  return toMilliseconds(dateUnit) * count;
}
function getDateUnitInterval(tickInterval) {
  var maxInterval = -1;
  var i;
  if (isString(tickInterval)) {
    return tickInterval;
  }
  if (isObject(tickInterval)) {
    each(tickInterval, function(key, value2) {
      for (i = 0; i < dateUnitIntervals.length; i++) {
        if (value2 && (key === dateUnitIntervals[i] + "s" || key === dateUnitIntervals[i]) && maxInterval < i) {
          maxInterval = i;
        }
      }
    });
    return dateUnitIntervals[maxInterval];
  }
  return "";
}
var tickIntervalToFormatMap = {
  millisecond: "millisecond",
  second: "longtime",
  minute: "shorttime",
  hour: "shorttime",
  day: "day",
  week: "day",
  month: "month",
  quarter: "quarter",
  year: "year"
};
function getDateFormatByTickInterval(tickInterval) {
  return tickIntervalToFormatMap[getDateUnitInterval(tickInterval)] || "";
}
var getQuarter = function(month) {
  return Math.floor(month / 3);
};
var getFirstQuarterMonth = function(month) {
  return 3 * getQuarter(month);
};
function correctDateWithUnitBeginning(date, dateInterval, withCorrection, firstDayOfWeek) {
  date = new Date(date.getTime());
  var oldDate = new Date(date.getTime());
  var firstQuarterMonth;
  var month;
  var dateUnitInterval = getDateUnitInterval(dateInterval);
  switch (dateUnitInterval) {
    case "second":
      date = new Date(1e3 * Math.floor(oldDate.getTime() / 1e3));
      break;
    case "minute":
      date = new Date(6e4 * Math.floor(oldDate.getTime() / 6e4));
      break;
    case "hour":
      date = new Date(36e5 * Math.floor(oldDate.getTime() / 36e5));
      break;
    case "year":
      date.setMonth(0);
    case "month":
      date.setDate(1);
    case "day":
      date.setHours(0, 0, 0, 0);
      break;
    case "week":
      date = getFirstWeekDate(date, firstDayOfWeek || 0);
      date.setHours(0, 0, 0, 0);
      break;
    case "quarter":
      firstQuarterMonth = getFirstQuarterMonth(date.getMonth());
      month = date.getMonth();
      date.setDate(1);
      date.setHours(0, 0, 0, 0);
      if (month !== firstQuarterMonth) {
        date.setMonth(firstQuarterMonth);
      }
  }
  if (withCorrection && "hour" !== dateUnitInterval && "minute" !== dateUnitInterval && "second" !== dateUnitInterval) {
    fixTimezoneGap(oldDate, date);
  }
  return date;
}
function trimTime(date) {
  return correctDateWithUnitBeginning(date, "day");
}
var setToDayEnd = function(date) {
  var result2 = trimTime(date);
  result2.setDate(result2.getDate() + 1);
  return new Date(result2.getTime() - 1);
};
var getDatesDifferences = function(date1, date2) {
  var counter = 0;
  var differences = {
    year: date1.getFullYear() !== date2.getFullYear(),
    month: date1.getMonth() !== date2.getMonth(),
    day: date1.getDate() !== date2.getDate(),
    hour: date1.getHours() !== date2.getHours(),
    minute: date1.getMinutes() !== date2.getMinutes(),
    second: date1.getSeconds() !== date2.getSeconds(),
    millisecond: date1.getMilliseconds() !== date2.getMilliseconds()
  };
  each(differences, function(key, value2) {
    if (value2) {
      counter++;
    }
  });
  if (0 === counter && 0 !== getTimezonesDifference(date1, date2)) {
    differences.hour = true;
    counter++;
  }
  differences.count = counter;
  return differences;
};
function addDateInterval(value2, interval, dir) {
  var result2 = new Date(value2.getTime());
  var intervalObject = isString(interval) ? getDateIntervalByString(interval.toLowerCase()) : isNumeric(interval) ? convertMillisecondsToDateUnits(interval) : interval;
  if (intervalObject.years) {
    result2.setFullYear(result2.getFullYear() + intervalObject.years * dir);
  }
  if (intervalObject.quarters) {
    result2.setMonth(result2.getMonth() + 3 * intervalObject.quarters * dir);
  }
  if (intervalObject.months) {
    result2.setMonth(result2.getMonth() + intervalObject.months * dir);
  }
  if (intervalObject.weeks) {
    result2.setDate(result2.getDate() + 7 * intervalObject.weeks * dir);
  }
  if (intervalObject.days) {
    result2.setDate(result2.getDate() + intervalObject.days * dir);
  }
  if (intervalObject.hours) {
    result2.setTime(result2.getTime() + 36e5 * intervalObject.hours * dir);
  }
  if (intervalObject.minutes) {
    result2.setTime(result2.getTime() + 6e4 * intervalObject.minutes * dir);
  }
  if (intervalObject.seconds) {
    result2.setTime(result2.getTime() + 1e3 * intervalObject.seconds * dir);
  }
  if (intervalObject.milliseconds) {
    result2.setTime(result2.getTime() + intervalObject.milliseconds * dir);
  }
  return result2;
}
var addInterval = function(value2, interval, isNegative) {
  var dir = isNegative ? -1 : 1;
  return isDate(value2) ? addDateInterval(value2, interval, dir) : adjust(value2 + interval * dir, interval);
};
var getSequenceByInterval = function(min, max, interval) {
  var intervals = [];
  var cur;
  intervals.push(isDate(min) ? new Date(min.getTime()) : min);
  cur = min;
  while (cur < max) {
    cur = addInterval(cur, interval);
    intervals.push(cur);
  }
  return intervals;
};
var getViewFirstCellDate = function(viewType, date) {
  if ("month" === viewType) {
    return createDateWithFullYear(date.getFullYear(), date.getMonth(), 1);
  }
  if ("year" === viewType) {
    return createDateWithFullYear(date.getFullYear(), 0, date.getDate());
  }
  if ("decade" === viewType) {
    return createDateWithFullYear(getFirstYearInDecade(date), date.getMonth(), date.getDate());
  }
  if ("century" === viewType) {
    return createDateWithFullYear(getFirstDecadeInCentury(date), date.getMonth(), date.getDate());
  }
};
var getViewLastCellDate = function(viewType, date) {
  if ("month" === viewType) {
    return createDateWithFullYear(date.getFullYear(), date.getMonth(), getLastMonthDay(date));
  }
  if ("year" === viewType) {
    return createDateWithFullYear(date.getFullYear(), 11, date.getDate());
  }
  if ("decade" === viewType) {
    return createDateWithFullYear(getFirstYearInDecade(date) + 9, date.getMonth(), date.getDate());
  }
  if ("century" === viewType) {
    return createDateWithFullYear(getFirstDecadeInCentury(date) + 90, date.getMonth(), date.getDate());
  }
};
var getViewMinBoundaryDate = function(viewType, date) {
  var resultDate = createDateWithFullYear(date.getFullYear(), date.getMonth(), 1);
  if ("month" === viewType) {
    return resultDate;
  }
  resultDate.setMonth(0);
  if ("year" === viewType) {
    return resultDate;
  }
  if ("decade" === viewType) {
    resultDate.setFullYear(getFirstYearInDecade(date));
  }
  if ("century" === viewType) {
    resultDate.setFullYear(getFirstDecadeInCentury(date));
  }
  return resultDate;
};
var getViewMaxBoundaryDate = function(viewType, date) {
  var resultDate = new Date(date);
  resultDate.setDate(getLastMonthDay(date));
  if ("month" === viewType) {
    return resultDate;
  }
  resultDate.setMonth(11);
  resultDate.setDate(getLastMonthDay(resultDate));
  if ("year" === viewType) {
    return resultDate;
  }
  if ("decade" === viewType) {
    resultDate.setFullYear(getFirstYearInDecade(date) + 9);
  }
  if ("century" === viewType) {
    resultDate.setFullYear(getFirstDecadeInCentury(date) + 99);
  }
  return resultDate;
};
function getLastMonthDay(date) {
  var resultDate = createDateWithFullYear(date.getFullYear(), date.getMonth() + 1, 0);
  return resultDate.getDate();
}
var getViewUp = function(typeView) {
  switch (typeView) {
    case "month":
      return "year";
    case "year":
      return "decade";
    case "decade":
      return "century";
  }
};
var getViewDown = function(typeView) {
  switch (typeView) {
    case "century":
      return "decade";
    case "decade":
      return "year";
    case "year":
      return "month";
  }
};
var getDifferenceInMonth = function(typeView) {
  var difference = 1;
  if ("year" === typeView) {
    difference = 12;
  }
  if ("decade" === typeView) {
    difference = 120;
  }
  if ("century" === typeView) {
    difference = 1200;
  }
  return difference;
};
var getDifferenceInMonthForCells = function(typeView) {
  var difference = 1;
  if ("decade" === typeView) {
    difference = 12;
  }
  if ("century" === typeView) {
    difference = 120;
  }
  return difference;
};
function getDateIntervalByString(intervalString) {
  var result2 = {};
  switch (intervalString) {
    case "year":
      result2.years = 1;
      break;
    case "month":
      result2.months = 1;
      break;
    case "quarter":
      result2.months = 3;
      break;
    case "week":
      result2.weeks = 1;
      break;
    case "day":
      result2.days = 1;
      break;
    case "hour":
      result2.hours = 1;
      break;
    case "minute":
      result2.minutes = 1;
      break;
    case "second":
      result2.seconds = 1;
      break;
    case "millisecond":
      result2.milliseconds = 1;
  }
  return result2;
}
function sameDate(date1, date2) {
  return sameMonthAndYear(date1, date2) && date1.getDate() === date2.getDate();
}
function sameMonthAndYear(date1, date2) {
  return sameYear(date1, date2) && date1.getMonth() === date2.getMonth();
}
function sameYear(date1, date2) {
  return date1 && date2 && date1.getFullYear() === date2.getFullYear();
}
function sameHoursAndMinutes(date1, date2) {
  return date1 && date2 && date1.getHours() === date2.getHours() && date1.getMinutes() === date2.getMinutes();
}
var sameDecade = function(date1, date2) {
  if (!isDefined(date1) || !isDefined(date2)) {
    return;
  }
  var startDecadeDate1 = date1.getFullYear() - date1.getFullYear() % 10;
  var startDecadeDate2 = date2.getFullYear() - date2.getFullYear() % 10;
  return date1 && date2 && startDecadeDate1 === startDecadeDate2;
};
var sameCentury = function(date1, date2) {
  if (!isDefined(date1) || !isDefined(date2)) {
    return;
  }
  var startCenturyDate1 = date1.getFullYear() - date1.getFullYear() % 100;
  var startCenturyDate2 = date2.getFullYear() - date2.getFullYear() % 100;
  return date1 && date2 && startCenturyDate1 === startCenturyDate2;
};
function getFirstDecadeInCentury(date) {
  return date && date.getFullYear() - date.getFullYear() % 100;
}
function getFirstYearInDecade(date) {
  return date && date.getFullYear() - date.getFullYear() % 10;
}
var getShortDateFormat = function() {
  return "yyyy/MM/dd";
};
var getFirstMonthDate = function(date) {
  if (!isDefined(date)) {
    return;
  }
  return createDateWithFullYear(date.getFullYear(), date.getMonth(), 1);
};
var getLastMonthDate = function(date) {
  if (!isDefined(date)) {
    return;
  }
  return createDateWithFullYear(date.getFullYear(), date.getMonth() + 1, 0);
};
function getFirstWeekDate(date, firstDayOfWeek) {
  var delta = (date.getDay() - firstDayOfWeek + DAYS_IN_WEEK) % DAYS_IN_WEEK;
  var result2 = new Date(date);
  result2.setDate(date.getDate() - delta);
  return result2;
}
function getUTCTime(date) {
  return Date.UTC(date.getFullYear(), date.getMonth(), date.getDate());
}
function getDayNumber(date) {
  var ms = getUTCTime(date) - getUTCTime(getFirstDateInYear(date.getFullYear()));
  return 1 + Math.floor(ms / toMilliseconds("day"));
}
function getFirstDateInYear(year) {
  return new Date(year, 0, 1);
}
function getLastDateInYear(year) {
  return new Date(year, 11, 31);
}
function getDayWeekNumber(date, firstDayOfWeek) {
  var day = date.getDay() - firstDayOfWeek + 1;
  if (day <= 0) {
    day += DAYS_IN_WEEK;
  }
  return day;
}
function getWeekNumber(date, firstDayOfWeek, rule) {
  var firstWeekDayInYear = getDayWeekNumber(getFirstDateInYear(date.getFullYear()), firstDayOfWeek);
  var lastWeekDayInYear = getDayWeekNumber(getLastDateInYear(date.getFullYear()), firstDayOfWeek);
  var daysInFirstWeek = DAYS_IN_WEEK - firstWeekDayInYear + 1;
  var weekNumber = Math.ceil((getDayNumber(date) - daysInFirstWeek) / 7);
  switch (rule) {
    case "fullWeek":
      if (daysInFirstWeek === DAYS_IN_WEEK) {
        weekNumber++;
      }
      if (0 === weekNumber) {
        var lastDateInPreviousYear = getLastDateInYear(date.getFullYear() - 1);
        return getWeekNumber(lastDateInPreviousYear, firstDayOfWeek, rule);
      }
      return weekNumber;
    case "firstDay":
      if (daysInFirstWeek > 0) {
        weekNumber++;
      }
      var isSunday = firstWeekDayInYear === SUNDAY_WEEK_NUMBER || lastWeekDayInYear === SUNDAY_WEEK_NUMBER;
      if (weekNumber > USUAL_WEEK_COUNT_IN_YEAR && !isSunday || 54 === weekNumber) {
        weekNumber = 1;
      }
      return weekNumber;
    case "firstFourDays":
      if (daysInFirstWeek > 3) {
        weekNumber++;
      }
      var isThursday = firstWeekDayInYear === THURSDAY_WEEK_NUMBER || lastWeekDayInYear === THURSDAY_WEEK_NUMBER;
      if (weekNumber > USUAL_WEEK_COUNT_IN_YEAR && !isThursday) {
        weekNumber = 1;
      }
      if (0 === weekNumber) {
        var _lastDateInPreviousYear = getLastDateInYear(date.getFullYear() - 1);
        return getWeekNumber(_lastDateInPreviousYear, firstDayOfWeek, rule);
      }
      return weekNumber;
  }
}
var normalizeDateByWeek = function(date, currentDate) {
  var differenceInDays = dateUtils.getDatesInterval(date, currentDate, "day");
  var resultDate = new Date(date);
  if (differenceInDays >= 6) {
    resultDate = new Date(resultDate.setDate(resultDate.getDate() + 7));
  }
  return resultDate;
};
var dateInRange = function(date, min, max, format2) {
  if ("date" === format2) {
    min = min && dateUtils.correctDateWithUnitBeginning(min, "day");
    max = max && dateUtils.correctDateWithUnitBeginning(max, "day");
    date = date && dateUtils.correctDateWithUnitBeginning(date, "day");
  }
  return normalizeDate(date, min, max) === date;
};
var intervalsOverlap = function(options2) {
  var {
    firstMin,
    firstMax,
    secondMin,
    secondMax
  } = options2;
  return firstMin <= secondMin && secondMin <= firstMax || firstMin > secondMin && firstMin < secondMax || firstMin < secondMax && firstMax > secondMax;
};
var dateTimeFromDecimal = function(number) {
  var hours = Math.floor(number);
  var minutes = number % 1 * 60;
  return {
    hours,
    minutes
  };
};
var roundDateByStartDayHour = function(date, startDayHour) {
  var startTime = this.dateTimeFromDecimal(startDayHour);
  var result2 = new Date(date);
  if (date.getHours() === startTime.hours && date.getMinutes() < startTime.minutes || date.getHours() < startTime.hours) {
    result2.setHours(startTime.hours, startTime.minutes, 0, 0);
  }
  return result2;
};
function normalizeDate(date, min, max) {
  var normalizedDate = date;
  if (!isDefined(date)) {
    return date;
  }
  if (isDefined(min) && date < min) {
    normalizedDate = min;
  }
  if (isDefined(max) && date > max) {
    normalizedDate = max;
  }
  return normalizedDate;
}
function fixTimezoneGap(oldDate, newDate) {
  if (!isDefined(oldDate)) {
    return;
  }
  var diff = newDate.getHours() - oldDate.getHours();
  if (0 === diff) {
    return;
  }
  var sign2 = 1 === diff || -23 === diff ? -1 : 1;
  var trial = new Date(newDate.getTime() + 36e5 * sign2);
  if (sign2 > 0 || trial.getDate() === newDate.getDate()) {
    newDate.setTime(trial.getTime());
  }
}
var roundToHour = function(date) {
  var result2 = new Date(date.getTime());
  result2.setHours(result2.getHours() + 1);
  result2.setMinutes(0);
  return result2;
};
function getTimezonesDifference(min, max) {
  return 60 * (max.getTimezoneOffset() - min.getTimezoneOffset()) * 1e3;
}
var makeDate = function(date) {
  return new Date(date);
};
var getDatesOfInterval = function(startDate, endDate, step) {
  var result2 = [];
  var currentDate = new Date(startDate.getTime());
  while (currentDate < endDate) {
    result2.push(new Date(currentDate.getTime()));
    currentDate = this.addInterval(currentDate, step);
  }
  return result2;
};
var createDateWithFullYear = function(year) {
  var result2 = new Date(...arguments);
  result2.setFullYear(year);
  return result2;
};
var getMachineTimezoneName = () => {
  var hasIntl3 = "undefined" !== typeof Intl;
  return hasIntl3 ? Intl.DateTimeFormat().resolvedOptions().timeZone : null;
};
var dateUtils = {
  dateUnitIntervals,
  convertMillisecondsToDateUnits,
  dateToMilliseconds,
  getNextDateUnit,
  convertDateUnitToMilliseconds,
  getDateUnitInterval,
  getDateFormatByTickInterval,
  getDatesDifferences,
  correctDateWithUnitBeginning,
  trimTime,
  setToDayEnd,
  roundDateByStartDayHour,
  dateTimeFromDecimal,
  addDateInterval,
  addInterval,
  getSequenceByInterval,
  getDateIntervalByString,
  sameHoursAndMinutes,
  sameDate,
  sameMonthAndYear,
  sameMonth: sameMonthAndYear,
  sameYear,
  sameDecade,
  sameCentury,
  getDifferenceInMonth,
  getDifferenceInMonthForCells,
  getFirstYearInDecade,
  getFirstDecadeInCentury,
  getShortDateFormat,
  getViewFirstCellDate,
  getViewLastCellDate,
  getViewDown,
  getViewUp,
  getLastMonthDay,
  getLastMonthDate,
  getFirstMonthDate,
  getFirstWeekDate,
  getWeekNumber,
  normalizeDateByWeek,
  getQuarter,
  getFirstQuarterMonth,
  dateInRange,
  intervalsOverlap,
  roundToHour,
  normalizeDate,
  getViewMinBoundaryDate,
  getViewMaxBoundaryDate,
  fixTimezoneGap,
  getTimezonesDifference,
  makeDate,
  getDatesInterval,
  getDatesOfInterval,
  createDateWithFullYear,
  getMachineTimezoneName
};
dateUtils.sameView = function(view, date1, date2) {
  return dateUtils[camelize("same " + view)](date1, date2);
};
var date_default = dateUtils;

// node_modules/devextreme/esm/localization/utils.js
var DECIMAL_BASE = 10;
function roundByAbs(value2) {
  var valueSign = sign(value2);
  return valueSign * Math.round(Math.abs(value2));
}
function adjustValue(value2, precision) {
  var precisionMultiplier = Math.pow(DECIMAL_BASE, precision);
  var intermediateValue = multiplyInExponentialForm(value2, precision);
  return roundByAbs(intermediateValue) / precisionMultiplier;
}
function toFixed(value2, precision) {
  var valuePrecision = precision || 0;
  var adjustedValue = valuePrecision > 0 ? adjustValue(...arguments) : value2;
  return adjustedValue.toFixed(valuePrecision);
}

// node_modules/devextreme/esm/localization/ldml/number.js
var DEFAULT_CONFIG = {
  thousandsSeparator: ",",
  decimalSeparator: "."
};
var ESCAPING_CHAR = "'";
var MAXIMUM_NUMBER_LENGTH = 15;
var PERCENT_EXPONENT_SHIFT = 2;
function getGroupSizes(formatString) {
  return formatString.split(",").slice(1).map(function(str) {
    var singleQuotesLeft = 0;
    return str.split("").filter(function(char, index2) {
      singleQuotesLeft += "'" === char;
      var isDigit = "#" === char || "0" === char;
      var isInStub = singleQuotesLeft % 2;
      return isDigit && !isInStub;
    }).length;
  });
}
function getSignParts(format2) {
  var signParts = format2.split(";");
  if (1 === signParts.length) {
    signParts.push("-" + signParts[0]);
  }
  return signParts;
}
function reverseString(str) {
  return str.toString().split("").reverse().join("");
}
function isPercentFormat(format2) {
  return -1 !== format2.indexOf("%") && !format2.match(/'[^']*%[^']*'/g);
}
function removeStubs(str) {
  return str.replace(/'.+'/g, "");
}
function getNonRequiredDigitCount(floatFormat) {
  if (!floatFormat) {
    return 0;
  }
  var format2 = removeStubs(floatFormat);
  return format2.length - format2.replace(/[#]/g, "").length;
}
function getRequiredDigitCount(floatFormat) {
  if (!floatFormat) {
    return 0;
  }
  var format2 = removeStubs(floatFormat);
  return format2.length - format2.replace(/[0]/g, "").length;
}
function normalizeValueString(valuePart, minDigitCount, maxDigitCount) {
  if (!valuePart) {
    return "";
  }
  if (valuePart.length > maxDigitCount) {
    valuePart = valuePart.substr(0, maxDigitCount);
  }
  while (valuePart.length > minDigitCount && "0" === valuePart.slice(-1)) {
    valuePart = valuePart.substr(0, valuePart.length - 1);
  }
  while (valuePart.length < minDigitCount) {
    valuePart += "0";
  }
  return valuePart;
}
function applyGroups(valueString, groupSizes, thousandsSeparator) {
  if (!groupSizes.length) {
    return valueString;
  }
  var groups = [];
  var index2 = 0;
  while (valueString) {
    var groupSize = groupSizes[index2];
    if (!groupSize) {
      break;
    }
    groups.push(valueString.slice(0, groupSize));
    valueString = valueString.slice(groupSize);
    if (index2 < groupSizes.length - 1) {
      index2++;
    }
  }
  return groups.join(thousandsSeparator);
}
function formatNumberPart(format2, valueString) {
  return format2.split(ESCAPING_CHAR).map(function(formatPart, escapeIndex) {
    var isEscape = escapeIndex % 2;
    if (!formatPart && isEscape) {
      return ESCAPING_CHAR;
    }
    return isEscape ? formatPart : formatPart.replace(/[,#0]+/, valueString);
  }).join("");
}
function getFloatPointIndex(format2) {
  var isEscape = false;
  for (var index2 = 0; index2 < format2.length; index2++) {
    if ("'" === format2[index2]) {
      isEscape = !isEscape;
    }
    if ("." === format2[index2] && !isEscape) {
      return index2;
    }
  }
  return format2.length;
}
function getFormatter(format2, config3) {
  config3 = config3 || DEFAULT_CONFIG;
  return function(value2) {
    if ("number" !== typeof value2 || isNaN(value2)) {
      return "";
    }
    var signFormatParts = getSignParts(format2);
    var isPositiveZero = 1 / value2 === 1 / 0;
    var isPositive = value2 > 0 || isPositiveZero;
    var numberFormat = signFormatParts[isPositive ? 0 : 1];
    var floatPointIndex = getFloatPointIndex(numberFormat);
    var floatFormatParts = [numberFormat.substr(0, floatPointIndex), numberFormat.substr(floatPointIndex + 1)];
    var minFloatPrecision = getRequiredDigitCount(floatFormatParts[1]);
    var maxFloatPrecision = minFloatPrecision + getNonRequiredDigitCount(floatFormatParts[1]);
    if (isPercentFormat(numberFormat)) {
      value2 = multiplyInExponentialForm(value2, PERCENT_EXPONENT_SHIFT);
    }
    if (!isPositive) {
      value2 = -value2;
    }
    var minIntegerPrecision = getRequiredDigitCount(floatFormatParts[0]);
    var maxIntegerPrecision = getNonRequiredDigitCount(floatFormatParts[0]) || config3.unlimitedIntegerDigits ? void 0 : minIntegerPrecision;
    var integerLength = Math.floor(value2).toString().length;
    var floatPrecision = fitIntoRange(maxFloatPrecision, 0, MAXIMUM_NUMBER_LENGTH - integerLength);
    var groupSizes = getGroupSizes(floatFormatParts[0]).reverse();
    var valueParts = toFixed(value2, floatPrecision < 0 ? 0 : floatPrecision).split(".");
    var valueIntegerPart = normalizeValueString(reverseString(valueParts[0]), minIntegerPrecision, maxIntegerPrecision);
    var valueFloatPart = normalizeValueString(valueParts[1], minFloatPrecision, maxFloatPrecision);
    valueIntegerPart = applyGroups(valueIntegerPart, groupSizes, config3.thousandsSeparator);
    var integerString = reverseString(formatNumberPart(reverseString(floatFormatParts[0]), valueIntegerPart));
    var floatString = maxFloatPrecision ? formatNumberPart(floatFormatParts[1], valueFloatPart) : "";
    var result2 = integerString + (floatString.match(/\d/) ? config3.decimalSeparator : "") + floatString;
    return result2;
  };
}
function parseValue(text, isPercent, isNegative) {
  var value2 = (isPercent ? 0.01 : 1) * parseFloat(text) || 0;
  return isNegative ? -value2 : value2;
}
function prepareValueText(valueText, formatter, isPercent, isIntegerPart) {
  var nextValueText = valueText;
  var char;
  var text;
  var nextText;
  do {
    if (nextText) {
      char = text.length === nextText.length ? "0" : "1";
      valueText = isIntegerPart ? char + valueText : valueText + char;
    }
    text = nextText || formatter(parseValue(nextValueText, isPercent));
    nextValueText = isIntegerPart ? "1" + nextValueText : nextValueText + "1";
    nextText = formatter(parseValue(nextValueText, isPercent));
  } while (text !== nextText && (isIntegerPart ? text.length === nextText.length : text.length <= nextText.length));
  if (isIntegerPart && nextText.length > text.length) {
    var hasGroups = -1 === formatter(12345).indexOf("12345");
    do {
      valueText = "1" + valueText;
    } while (hasGroups && parseValue(valueText, isPercent) < 1e5);
  }
  return valueText;
}
function getFormatByValueText(valueText, formatter, isPercent, isNegative) {
  var format2 = formatter(parseValue(valueText, isPercent, isNegative));
  var valueTextParts = valueText.split(".");
  var valueTextWithModifiedFloat = valueTextParts[0] + ".3" + valueTextParts[1].slice(1);
  var valueWithModifiedFloat = parseValue(valueTextWithModifiedFloat, isPercent, isNegative);
  var decimalSeparatorIndex = formatter(valueWithModifiedFloat).indexOf("3") - 1;
  format2 = format2.replace(/(\d)\D(\d)/g, "$1,$2");
  if (decimalSeparatorIndex >= 0) {
    format2 = format2.slice(0, decimalSeparatorIndex) + "." + format2.slice(decimalSeparatorIndex + 1);
  }
  format2 = format2.replace(/1+/, "1").replace(/1/g, "#");
  if (!isPercent) {
    format2 = format2.replace(/%/g, "'%'");
  }
  return format2;
}
function getFormat(formatter) {
  var valueText = ".";
  var isPercent = formatter(1).indexOf("100") >= 0;
  valueText = prepareValueText(valueText, formatter, isPercent, true);
  valueText = prepareValueText(valueText, formatter, isPercent, false);
  var positiveFormat = getFormatByValueText(valueText, formatter, isPercent, false);
  var negativeFormat = getFormatByValueText(valueText, formatter, isPercent, true);
  return negativeFormat === "-" + positiveFormat ? positiveFormat : positiveFormat + ";" + negativeFormat;
}

// node_modules/devextreme/esm/localization/currency.js
var currency_default = {
  _formatNumberCore: function(value2, format2, formatConfig) {
    if ("currency" === format2) {
      formatConfig.precision = formatConfig.precision || 0;
      var result2 = this.format(value2, extend({}, formatConfig, {
        type: "fixedpoint"
      }));
      var currencyPart = this.getCurrencySymbol().symbol.replace(/\$/g, "$$$$");
      result2 = result2.replace(/^(\D*)(\d.*)/, "$1" + currencyPart + "$2");
      return result2;
    }
    return this.callBase.apply(this, arguments);
  },
  getCurrencySymbol: function() {
    return {
      symbol: "$"
    };
  },
  getOpenXmlCurrencyFormat: function() {
    return "$#,##0{0}_);\\($#,##0{0}\\)";
  }
};

// node_modules/devextreme/esm/localization/open_xml_currency_format.js
var open_xml_currency_format_default = (currencySymbol, accountingFormat) => {
  if (!accountingFormat) {
    return;
  }
  var encodedCurrencySymbol = currencySymbol;
  if ("string" === typeof currencySymbol) {
    encodedCurrencySymbol = "";
    for (var i = 0; i < currencySymbol.length; i++) {
      if ("$" !== currencySymbol[i]) {
        encodedCurrencySymbol += "\\";
      }
      encodedCurrencySymbol += currencySymbol[i];
    }
  }
  var encodeSymbols = {
    ".00": "{0}",
    "'": "\\'",
    "\\(": "\\(",
    "\\)": "\\)",
    " ": "\\ ",
    '"': "&quot;",
    "\\¤": encodedCurrencySymbol
  };
  var result2 = accountingFormat.split(";");
  for (var _i = 0; _i < result2.length; _i++) {
    for (var symbol in encodeSymbols) {
      if (Object.prototype.hasOwnProperty.call(encodeSymbols, symbol)) {
        result2[_i] = result2[_i].replace(new RegExp(symbol, "g"), encodeSymbols[symbol]);
      }
    }
  }
  return 2 === result2.length ? result2[0] + "_);" + result2[1] : result2[0];
};

// node_modules/devextreme/esm/localization/cldr-data/accounting_formats.js
var accounting_formats_default = {
  af: "¤#,##0.00;(¤#,##0.00)",
  "af-NA": "¤#,##0.00;(¤#,##0.00)",
  agq: "#,##0.00¤",
  ak: "¤#,##0.00",
  am: "¤#,##0.00;(¤#,##0.00)",
  ar: "¤#,##0.00;(¤#,##0.00)",
  "ar-AE": "¤#,##0.00;(¤#,##0.00)",
  "ar-BH": "¤#,##0.00;(¤#,##0.00)",
  "ar-DJ": "¤#,##0.00;(¤#,##0.00)",
  "ar-DZ": "¤#,##0.00;(¤#,##0.00)",
  "ar-EG": "¤#,##0.00;(¤#,##0.00)",
  "ar-EH": "¤#,##0.00;(¤#,##0.00)",
  "ar-ER": "¤#,##0.00;(¤#,##0.00)",
  "ar-IL": "¤#,##0.00;(¤#,##0.00)",
  "ar-IQ": "¤#,##0.00;(¤#,##0.00)",
  "ar-JO": "¤#,##0.00;(¤#,##0.00)",
  "ar-KM": "¤#,##0.00;(¤#,##0.00)",
  "ar-KW": "¤#,##0.00;(¤#,##0.00)",
  "ar-LB": "¤#,##0.00;(¤#,##0.00)",
  "ar-LY": "¤#,##0.00;(¤#,##0.00)",
  "ar-MA": "¤#,##0.00;(¤#,##0.00)",
  "ar-MR": "¤#,##0.00;(¤#,##0.00)",
  "ar-OM": "¤#,##0.00;(¤#,##0.00)",
  "ar-PS": "¤#,##0.00;(¤#,##0.00)",
  "ar-QA": "¤#,##0.00;(¤#,##0.00)",
  "ar-SA": "¤#,##0.00;(¤#,##0.00)",
  "ar-SD": "¤#,##0.00;(¤#,##0.00)",
  "ar-SO": "¤#,##0.00;(¤#,##0.00)",
  "ar-SS": "¤#,##0.00;(¤#,##0.00)",
  "ar-SY": "¤#,##0.00;(¤#,##0.00)",
  "ar-TD": "¤#,##0.00;(¤#,##0.00)",
  "ar-TN": "¤#,##0.00;(¤#,##0.00)",
  "ar-YE": "¤#,##0.00;(¤#,##0.00)",
  as: "¤ #,##,##0.00",
  asa: "#,##0.00 ¤",
  ast: "#,##0.00 ¤",
  az: "#,##0.00 ¤",
  "az-Cyrl": "#,##0.00 ¤",
  "az-Latn": "#,##0.00 ¤",
  bas: "#,##0.00 ¤",
  be: "#,##0.00 ¤",
  "be-tarask": "#,##0.00 ¤",
  bem: "¤#,##0.00;(¤#,##0.00)",
  bez: "#,##0.00¤",
  bg: "0.00 ¤;(0.00 ¤)",
  bm: "¤#,##0.00;(¤#,##0.00)",
  bn: "#,##,##0.00¤;(#,##,##0.00¤)",
  "bn-IN": "#,##,##0.00¤;(#,##,##0.00¤)",
  bo: "¤ #,##0.00",
  "bo-IN": "¤ #,##0.00",
  br: "#,##0.00 ¤",
  brx: "¤ #,##,##0.00",
  bs: "#,##0.00 ¤",
  "bs-Cyrl": "#,##0.00 ¤",
  "bs-Latn": "#,##0.00 ¤",
  ca: "#,##0.00 ¤;(#,##0.00 ¤)",
  "ca-AD": "#,##0.00 ¤;(#,##0.00 ¤)",
  "ca-ES-valencia": "#,##0.00 ¤;(#,##0.00 ¤)",
  "ca-FR": "#,##0.00 ¤;(#,##0.00 ¤)",
  "ca-IT": "#,##0.00 ¤;(#,##0.00 ¤)",
  ccp: "#,##,##0.00¤;(#,##,##0.00¤)",
  "ccp-IN": "#,##,##0.00¤;(#,##,##0.00¤)",
  ce: "#,##0.00 ¤",
  ceb: "¤#,##0.00;(¤#,##0.00)",
  cgg: "¤#,##0.00",
  chr: "¤#,##0.00;(¤#,##0.00)",
  ckb: "¤ #,##0.00",
  "ckb-IR": "¤ #,##0.00",
  cs: "#,##0.00 ¤",
  cy: "¤#,##0.00;(¤#,##0.00)",
  da: "#,##0.00 ¤",
  "da-GL": "#,##0.00 ¤",
  dav: "¤#,##0.00;(¤#,##0.00)",
  de: "#,##0.00 ¤",
  "de-AT": "#,##0.00 ¤",
  "de-BE": "#,##0.00 ¤",
  "de-CH": "#,##0.00 ¤",
  "de-IT": "#,##0.00 ¤",
  "de-LI": "#,##0.00 ¤",
  "de-LU": "#,##0.00 ¤",
  dje: "#,##0.00¤",
  doi: "¤#,##0.00",
  dsb: "#,##0.00 ¤",
  dua: "#,##0.00 ¤",
  dyo: "#,##0.00 ¤",
  dz: "¤#,##,##0.00",
  ebu: "¤#,##0.00;(¤#,##0.00)",
  ee: "¤#,##0.00;(¤#,##0.00)",
  "ee-TG": "¤#,##0.00;(¤#,##0.00)",
  el: "#,##0.00 ¤",
  "el-CY": "#,##0.00 ¤",
  en: "¤#,##0.00;(¤#,##0.00)",
  "en-001": "¤#,##0.00;(¤#,##0.00)",
  "en-150": "#,##0.00 ¤",
  "en-AE": "¤#,##0.00;(¤#,##0.00)",
  "en-AG": "¤#,##0.00;(¤#,##0.00)",
  "en-AI": "¤#,##0.00;(¤#,##0.00)",
  "en-AS": "¤#,##0.00;(¤#,##0.00)",
  "en-AT": "¤ #,##0.00",
  "en-AU": "¤#,##0.00;(¤#,##0.00)",
  "en-BB": "¤#,##0.00;(¤#,##0.00)",
  "en-BE": "#,##0.00 ¤",
  "en-BI": "¤#,##0.00;(¤#,##0.00)",
  "en-BM": "¤#,##0.00;(¤#,##0.00)",
  "en-BS": "¤#,##0.00;(¤#,##0.00)",
  "en-BW": "¤#,##0.00;(¤#,##0.00)",
  "en-BZ": "¤#,##0.00;(¤#,##0.00)",
  "en-CA": "¤#,##0.00;(¤#,##0.00)",
  "en-CC": "¤#,##0.00;(¤#,##0.00)",
  "en-CH": "¤ #,##0.00;¤-#,##0.00",
  "en-CK": "¤#,##0.00;(¤#,##0.00)",
  "en-CM": "¤#,##0.00;(¤#,##0.00)",
  "en-CX": "¤#,##0.00;(¤#,##0.00)",
  "en-CY": "¤#,##0.00;(¤#,##0.00)",
  "en-DE": "#,##0.00 ¤",
  "en-DG": "¤#,##0.00;(¤#,##0.00)",
  "en-DK": "#,##0.00 ¤",
  "en-DM": "¤#,##0.00;(¤#,##0.00)",
  "en-ER": "¤#,##0.00;(¤#,##0.00)",
  "en-FI": "#,##0.00 ¤",
  "en-FJ": "¤#,##0.00;(¤#,##0.00)",
  "en-FK": "¤#,##0.00;(¤#,##0.00)",
  "en-FM": "¤#,##0.00;(¤#,##0.00)",
  "en-GB": "¤#,##0.00;(¤#,##0.00)",
  "en-GD": "¤#,##0.00;(¤#,##0.00)",
  "en-GG": "¤#,##0.00;(¤#,##0.00)",
  "en-GH": "¤#,##0.00;(¤#,##0.00)",
  "en-GI": "¤#,##0.00;(¤#,##0.00)",
  "en-GM": "¤#,##0.00;(¤#,##0.00)",
  "en-GU": "¤#,##0.00;(¤#,##0.00)",
  "en-GY": "¤#,##0.00;(¤#,##0.00)",
  "en-HK": "¤#,##0.00;(¤#,##0.00)",
  "en-IE": "¤#,##0.00;(¤#,##0.00)",
  "en-IL": "¤#,##0.00;(¤#,##0.00)",
  "en-IM": "¤#,##0.00;(¤#,##0.00)",
  "en-IN": "¤#,##0.00;(¤#,##0.00)",
  "en-IO": "¤#,##0.00;(¤#,##0.00)",
  "en-JE": "¤#,##0.00;(¤#,##0.00)",
  "en-JM": "¤#,##0.00;(¤#,##0.00)",
  "en-KE": "¤#,##0.00;(¤#,##0.00)",
  "en-KI": "¤#,##0.00;(¤#,##0.00)",
  "en-KN": "¤#,##0.00;(¤#,##0.00)",
  "en-KY": "¤#,##0.00;(¤#,##0.00)",
  "en-LC": "¤#,##0.00;(¤#,##0.00)",
  "en-LR": "¤#,##0.00;(¤#,##0.00)",
  "en-LS": "¤#,##0.00;(¤#,##0.00)",
  "en-MG": "¤#,##0.00;(¤#,##0.00)",
  "en-MH": "¤#,##0.00;(¤#,##0.00)",
  "en-MO": "¤#,##0.00;(¤#,##0.00)",
  "en-MP": "¤#,##0.00;(¤#,##0.00)",
  "en-MS": "¤#,##0.00;(¤#,##0.00)",
  "en-MT": "¤#,##0.00;(¤#,##0.00)",
  "en-MU": "¤#,##0.00;(¤#,##0.00)",
  "en-MV": "¤ #,##0.00",
  "en-MW": "¤#,##0.00;(¤#,##0.00)",
  "en-MY": "¤#,##0.00;(¤#,##0.00)",
  "en-NA": "¤#,##0.00;(¤#,##0.00)",
  "en-NF": "¤#,##0.00;(¤#,##0.00)",
  "en-NG": "¤#,##0.00;(¤#,##0.00)",
  "en-NL": "¤ #,##0.00;(¤ #,##0.00)",
  "en-NR": "¤#,##0.00;(¤#,##0.00)",
  "en-NU": "¤#,##0.00;(¤#,##0.00)",
  "en-NZ": "¤#,##0.00;(¤#,##0.00)",
  "en-PG": "¤#,##0.00;(¤#,##0.00)",
  "en-PH": "¤#,##0.00;(¤#,##0.00)",
  "en-PK": "¤#,##0.00;(¤#,##0.00)",
  "en-PN": "¤#,##0.00;(¤#,##0.00)",
  "en-PR": "¤#,##0.00;(¤#,##0.00)",
  "en-PW": "¤#,##0.00;(¤#,##0.00)",
  "en-RW": "¤#,##0.00;(¤#,##0.00)",
  "en-SB": "¤#,##0.00;(¤#,##0.00)",
  "en-SC": "¤#,##0.00;(¤#,##0.00)",
  "en-SD": "¤#,##0.00;(¤#,##0.00)",
  "en-SE": "#,##0.00 ¤",
  "en-SG": "¤#,##0.00;(¤#,##0.00)",
  "en-SH": "¤#,##0.00;(¤#,##0.00)",
  "en-SI": "#,##0.00 ¤;(#,##0.00 ¤)",
  "en-SL": "¤#,##0.00;(¤#,##0.00)",
  "en-SS": "¤#,##0.00;(¤#,##0.00)",
  "en-SX": "¤#,##0.00;(¤#,##0.00)",
  "en-SZ": "¤#,##0.00;(¤#,##0.00)",
  "en-TC": "¤#,##0.00;(¤#,##0.00)",
  "en-TK": "¤#,##0.00;(¤#,##0.00)",
  "en-TO": "¤#,##0.00;(¤#,##0.00)",
  "en-TT": "¤#,##0.00;(¤#,##0.00)",
  "en-TV": "¤#,##0.00;(¤#,##0.00)",
  "en-TZ": "¤#,##0.00;(¤#,##0.00)",
  "en-UG": "¤#,##0.00;(¤#,##0.00)",
  "en-UM": "¤#,##0.00;(¤#,##0.00)",
  "en-VC": "¤#,##0.00;(¤#,##0.00)",
  "en-VG": "¤#,##0.00;(¤#,##0.00)",
  "en-VI": "¤#,##0.00;(¤#,##0.00)",
  "en-VU": "¤#,##0.00;(¤#,##0.00)",
  "en-WS": "¤#,##0.00;(¤#,##0.00)",
  "en-ZA": "¤#,##0.00;(¤#,##0.00)",
  "en-ZM": "¤#,##0.00;(¤#,##0.00)",
  "en-ZW": "¤#,##0.00;(¤#,##0.00)",
  eo: "¤ #,##0.00",
  es: "#,##0.00 ¤",
  "es-419": "¤#,##0.00",
  "es-AR": "¤ #,##0.00;(¤ #,##0.00)",
  "es-BO": "¤#,##0.00",
  "es-BR": "¤#,##0.00",
  "es-BZ": "¤#,##0.00",
  "es-CL": "¤#,##0.00",
  "es-CO": "¤#,##0.00",
  "es-CR": "¤#,##0.00",
  "es-CU": "¤#,##0.00",
  "es-DO": "¤#,##0.00;(¤#,##0.00)",
  "es-EA": "#,##0.00 ¤",
  "es-EC": "¤#,##0.00",
  "es-GQ": "#,##0.00 ¤",
  "es-GT": "¤#,##0.00",
  "es-HN": "¤#,##0.00",
  "es-IC": "#,##0.00 ¤",
  "es-MX": "¤#,##0.00",
  "es-NI": "¤#,##0.00",
  "es-PA": "¤#,##0.00",
  "es-PE": "¤#,##0.00",
  "es-PH": "#,##0.00 ¤",
  "es-PR": "¤#,##0.00",
  "es-PY": "¤#,##0.00",
  "es-SV": "¤#,##0.00",
  "es-US": "¤#,##0.00",
  "es-UY": "¤ #,##0.00;(¤ #,##0.00)",
  "es-VE": "¤#,##0.00",
  et: "#,##0.00 ¤;(#,##0.00 ¤)",
  eu: "#,##0.00 ¤;(#,##0.00 ¤)",
  ewo: "#,##0.00 ¤",
  fa: "‎¤ #,##0.00;‎(¤ #,##0.00)",
  "fa-AF": "¤ #,##0.00;‎(¤ #,##0.00)",
  ff: "#,##0.00 ¤",
  "ff-Adlm": "¤ #,##0.00",
  "ff-Adlm-BF": "¤ #,##0.00",
  "ff-Adlm-CM": "¤ #,##0.00",
  "ff-Adlm-GH": "¤ #,##0.00",
  "ff-Adlm-GM": "¤ #,##0.00",
  "ff-Adlm-GW": "¤ #,##0.00",
  "ff-Adlm-LR": "¤ #,##0.00",
  "ff-Adlm-MR": "¤ #,##0.00",
  "ff-Adlm-NE": "¤ #,##0.00",
  "ff-Adlm-NG": "¤ #,##0.00",
  "ff-Adlm-SL": "¤ #,##0.00",
  "ff-Adlm-SN": "¤ #,##0.00",
  "ff-Latn": "#,##0.00 ¤",
  "ff-Latn-BF": "#,##0.00 ¤",
  "ff-Latn-CM": "#,##0.00 ¤",
  "ff-Latn-GH": "#,##0.00 ¤",
  "ff-Latn-GM": "#,##0.00 ¤",
  "ff-Latn-GN": "#,##0.00 ¤",
  "ff-Latn-GW": "#,##0.00 ¤",
  "ff-Latn-LR": "#,##0.00 ¤",
  "ff-Latn-MR": "#,##0.00 ¤",
  "ff-Latn-NE": "#,##0.00 ¤",
  "ff-Latn-NG": "#,##0.00 ¤",
  "ff-Latn-SL": "#,##0.00 ¤",
  fi: "#,##0.00 ¤",
  fil: "¤#,##0.00;(¤#,##0.00)",
  fo: "#,##0.00 ¤;(#,##0.00 ¤)",
  "fo-DK": "#,##0.00 ¤;(#,##0.00 ¤)",
  fr: "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-BE": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-BF": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-BI": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-BJ": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-BL": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-CA": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-CD": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-CF": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-CG": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-CH": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-CI": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-CM": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-DJ": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-DZ": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-GA": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-GF": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-GN": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-GP": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-GQ": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-HT": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-KM": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-LU": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-MA": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-MC": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-MF": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-MG": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-ML": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-MQ": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-MR": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-MU": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-NC": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-NE": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-PF": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-PM": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-RE": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-RW": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-SC": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-SN": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-SY": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-TD": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-TG": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-TN": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-VU": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-WF": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-YT": "#,##0.00 ¤;(#,##0.00 ¤)",
  fur: "¤ #,##0.00",
  fy: "¤ #,##0.00;(¤ #,##0.00)",
  ga: "¤#,##0.00;(¤#,##0.00)",
  "ga-GB": "¤#,##0.00;(¤#,##0.00)",
  gd: "¤#,##0.00;(¤#,##0.00)",
  gl: "#,##0.00 ¤",
  gsw: "#,##0.00 ¤",
  "gsw-FR": "#,##0.00 ¤",
  "gsw-LI": "#,##0.00 ¤",
  gu: "¤#,##,##0.00;(¤#,##,##0.00)",
  guz: "¤#,##0.00;(¤#,##0.00)",
  gv: "¤#,##0.00",
  ha: "¤ #,##0.00",
  "ha-GH": "¤ #,##0.00",
  "ha-NE": "¤ #,##0.00",
  haw: "¤#,##0.00;(¤#,##0.00)",
  he: "#,##0.00 ¤",
  hi: "¤#,##,##0.00",
  "hi-Latn": "¤#,##,##0.00",
  hr: "#,##0.00 ¤",
  "hr-BA": "#,##0.00 ¤",
  hsb: "#,##0.00 ¤",
  hu: "#,##0.00 ¤",
  hy: "#,##0.00 ¤",
  ia: "¤ #,##0.00;(¤ #,##0.00)",
  id: "¤#,##0.00",
  ig: "¤#,##0.00;(¤#,##0.00)",
  ii: "¤ #,##0.00",
  is: "#,##0.00 ¤",
  it: "#,##0.00 ¤",
  "it-CH": "#,##0.00 ¤",
  "it-SM": "#,##0.00 ¤",
  "it-VA": "#,##0.00 ¤",
  ja: "¤#,##0.00;(¤#,##0.00)",
  jgo: "¤ #,##0.00",
  jmc: "¤#,##0.00",
  jv: "¤ #,##0.00",
  ka: "#,##0.00 ¤",
  kab: "#,##0.00¤",
  kam: "¤#,##0.00;(¤#,##0.00)",
  kde: "¤#,##0.00;(¤#,##0.00)",
  kea: "#,##0.00 ¤;(#,##0.00 ¤)",
  kgp: "¤ #,##0.00",
  khq: "#,##0.00¤",
  ki: "¤#,##0.00;(¤#,##0.00)",
  kk: "#,##0.00 ¤",
  kkj: "¤ #,##0.00",
  kl: "¤#,##0.00;¤-#,##0.00",
  kln: "¤#,##0.00;(¤#,##0.00)",
  km: "#,##0.00¤;(#,##0.00¤)",
  kn: "¤#,##0.00;(¤#,##0.00)",
  ko: "¤#,##0.00;(¤#,##0.00)",
  "ko-KP": "¤#,##0.00;(¤#,##0.00)",
  kok: "¤#,##0.00;(¤#,##0.00)",
  ks: "¤#,##0.00",
  "ks-Arab": "¤#,##0.00",
  "ks-Deva": "¤ #,##0.00",
  ksb: "#,##0.00¤",
  ksf: "#,##0.00 ¤",
  ksh: "#,##0.00 ¤",
  ku: "#,##0.00 ¤;(#,##0.00 ¤)",
  kw: "¤#,##0.00",
  ky: "#,##0.00 ¤",
  lag: "¤ #,##0.00",
  lb: "#,##0.00 ¤",
  lg: "#,##0.00¤",
  lkt: "¤ #,##0.00",
  ln: "#,##0.00 ¤",
  "ln-AO": "#,##0.00 ¤",
  "ln-CF": "#,##0.00 ¤",
  "ln-CG": "#,##0.00 ¤",
  lo: "¤#,##0.00;¤-#,##0.00",
  lrc: "¤ #,##0.00",
  "lrc-IQ": "¤ #,##0.00",
  lt: "#,##0.00 ¤",
  lu: "#,##0.00¤",
  luo: "#,##0.00¤",
  luy: "¤#,##0.00;¤- #,##0.00",
  lv: "#,##0.00 ¤",
  mai: "¤ #,##0.00",
  mas: "¤#,##0.00;(¤#,##0.00)",
  "mas-TZ": "¤#,##0.00;(¤#,##0.00)",
  mer: "¤#,##0.00;(¤#,##0.00)",
  mfe: "¤ #,##0.00",
  mg: "¤#,##0.00",
  mgh: "¤ #,##0.00",
  mgo: "¤ #,##0.00",
  mi: "¤ #,##0.00",
  mk: "#,##0.00 ¤",
  ml: "¤#,##0.00;(¤#,##0.00)",
  mn: "¤ #,##0.00",
  mni: "¤ #,##0.00",
  "mni-Beng": "¤ #,##0.00",
  mr: "¤#,##0.00;(¤#,##0.00)",
  ms: "¤#,##0.00;(¤#,##0.00)",
  "ms-BN": "¤#,##0.00;(¤#,##0.00)",
  "ms-ID": "¤#,##0.00",
  "ms-SG": "¤#,##0.00;(¤#,##0.00)",
  mt: "¤#,##0.00",
  mua: "¤#,##0.00;(¤#,##0.00)",
  my: "¤ #,##0.00",
  mzn: "¤ #,##0.00",
  naq: "¤#,##0.00",
  nb: "¤ #,##0.00;(¤ #,##0.00)",
  "nb-SJ": "¤ #,##0.00;(¤ #,##0.00)",
  nd: "¤#,##0.00;(¤#,##0.00)",
  nds: "¤ #,##0.00",
  "nds-NL": "¤ #,##0.00",
  ne: "¤ #,##,##0.00",
  "ne-IN": "¤ #,##,##0.00",
  nl: "¤ #,##0.00;(¤ #,##0.00)",
  "nl-AW": "¤ #,##0.00;(¤ #,##0.00)",
  "nl-BE": "¤ #,##0.00;(¤ #,##0.00)",
  "nl-BQ": "¤ #,##0.00;(¤ #,##0.00)",
  "nl-CW": "¤ #,##0.00;(¤ #,##0.00)",
  "nl-SR": "¤ #,##0.00;(¤ #,##0.00)",
  "nl-SX": "¤ #,##0.00;(¤ #,##0.00)",
  nmg: "#,##0.00 ¤",
  nn: "#,##0.00 ¤",
  nnh: "¤ #,##0.00",
  no: "¤ #,##0.00;(¤ #,##0.00)",
  nus: "¤#,##0.00;(¤#,##0.00)",
  nyn: "¤#,##0.00",
  om: "¤#,##0.00",
  "om-KE": "¤#,##0.00",
  or: "¤#,##0.00;(¤#,##0.00)",
  os: "¤ #,##0.00",
  "os-RU": "¤ #,##0.00",
  pa: "¤ #,##0.00",
  "pa-Arab": "¤ #,##0.00",
  "pa-Guru": "¤ #,##0.00",
  pcm: "¤#,##0.00",
  pl: "#,##0.00 ¤;(#,##0.00 ¤)",
  ps: "¤#,##0.00;(¤#,##0.00)",
  "ps-PK": "¤#,##0.00;(¤#,##0.00)",
  pt: "¤ #,##0.00",
  "pt-AO": "#,##0.00 ¤;(#,##0.00 ¤)",
  "pt-CH": "#,##0.00 ¤;(#,##0.00 ¤)",
  "pt-CV": "#,##0.00 ¤;(#,##0.00 ¤)",
  "pt-GQ": "#,##0.00 ¤;(#,##0.00 ¤)",
  "pt-GW": "#,##0.00 ¤;(#,##0.00 ¤)",
  "pt-LU": "#,##0.00 ¤;(#,##0.00 ¤)",
  "pt-MO": "#,##0.00 ¤;(#,##0.00 ¤)",
  "pt-MZ": "#,##0.00 ¤;(#,##0.00 ¤)",
  "pt-PT": "#,##0.00 ¤;(#,##0.00 ¤)",
  "pt-ST": "#,##0.00 ¤;(#,##0.00 ¤)",
  "pt-TL": "#,##0.00 ¤;(#,##0.00 ¤)",
  qu: "¤ #,##0.00",
  "qu-BO": "¤ #,##0.00",
  "qu-EC": "¤ #,##0.00",
  rm: "#,##0.00 ¤",
  rn: "#,##0.00¤",
  ro: "#,##0.00 ¤;(#,##0.00 ¤)",
  "ro-MD": "#,##0.00 ¤;(#,##0.00 ¤)",
  rof: "¤#,##0.00",
  ru: "#,##0.00 ¤",
  "ru-BY": "#,##0.00 ¤",
  "ru-KG": "#,##0.00 ¤",
  "ru-KZ": "#,##0.00 ¤",
  "ru-MD": "#,##0.00 ¤",
  "ru-UA": "#,##0.00 ¤",
  rw: "¤ #,##0.00",
  rwk: "#,##0.00¤",
  sa: "¤ #,##0.00",
  sah: "#,##0.00 ¤",
  saq: "¤#,##0.00;(¤#,##0.00)",
  sat: "¤ #,##0.00",
  "sat-Olck": "¤ #,##0.00",
  sbp: "#,##0.00¤",
  sc: "#,##0.00 ¤",
  sd: "¤ #,##0.00",
  "sd-Arab": "¤ #,##0.00",
  "sd-Deva": "¤ #,##0.00",
  se: "#,##0.00 ¤",
  "se-FI": "#,##0.00 ¤",
  "se-SE": "#,##0.00 ¤",
  seh: "#,##0.00¤",
  ses: "#,##0.00¤",
  sg: "¤#,##0.00;¤-#,##0.00",
  shi: "#,##0.00¤",
  "shi-Latn": "#,##0.00¤",
  "shi-Tfng": "#,##0.00¤",
  si: "¤#,##0.00;(¤#,##0.00)",
  sk: "#,##0.00 ¤;(#,##0.00 ¤)",
  sl: "#,##0.00 ¤;(#,##0.00 ¤)",
  smn: "#,##0.00 ¤",
  sn: "¤#,##0.00;(¤#,##0.00)",
  so: "¤#,##0.00;(¤#,##0.00)",
  "so-DJ": "¤#,##0.00;(¤#,##0.00)",
  "so-ET": "¤#,##0.00;(¤#,##0.00)",
  "so-KE": "¤#,##0.00;(¤#,##0.00)",
  sq: "#,##0.00 ¤;(#,##0.00 ¤)",
  "sq-MK": "#,##0.00 ¤;(#,##0.00 ¤)",
  "sq-XK": "#,##0.00 ¤;(#,##0.00 ¤)",
  sr: "#,##0.00 ¤;(#,##0.00 ¤)",
  "sr-Cyrl": "#,##0.00 ¤;(#,##0.00 ¤)",
  "sr-Cyrl-BA": "#,##0.00 ¤;(#,##0.00 ¤)",
  "sr-Cyrl-ME": "#,##0.00 ¤;(#,##0.00 ¤)",
  "sr-Cyrl-XK": "#,##0.00 ¤;(#,##0.00 ¤)",
  "sr-Latn": "#,##0.00 ¤;(#,##0.00 ¤)",
  "sr-Latn-BA": "#,##0.00 ¤;(#,##0.00 ¤)",
  "sr-Latn-ME": "#,##0.00 ¤;(#,##0.00 ¤)",
  "sr-Latn-XK": "#,##0.00 ¤;(#,##0.00 ¤)",
  su: "¤#,##0.00",
  "su-Latn": "¤#,##0.00",
  sv: "#,##0.00 ¤",
  "sv-AX": "#,##0.00 ¤",
  "sv-FI": "#,##0.00 ¤",
  sw: "¤ #,##0.00",
  "sw-CD": "¤ #,##0.00",
  "sw-KE": "¤ #,##0.00",
  "sw-UG": "¤ #,##0.00",
  ta: "¤#,##0.00;(¤#,##0.00)",
  "ta-LK": "¤#,##0.00;(¤#,##0.00)",
  "ta-MY": "¤#,##0.00;(¤#,##0.00)",
  "ta-SG": "¤#,##0.00;(¤#,##0.00)",
  te: "¤#,##0.00;(¤#,##0.00)",
  teo: "¤#,##0.00;(¤#,##0.00)",
  "teo-KE": "¤#,##0.00;(¤#,##0.00)",
  tg: "#,##0.00 ¤",
  th: "¤#,##0.00;(¤#,##0.00)",
  ti: "¤#,##0.00",
  "ti-ER": "¤#,##0.00",
  tk: "#,##0.00 ¤",
  to: "¤ #,##0.00",
  tr: "¤#,##0.00;(¤#,##0.00)",
  "tr-CY": "¤#,##0.00;(¤#,##0.00)",
  tt: "#,##0.00 ¤",
  twq: "#,##0.00¤",
  tzm: "#,##0.00 ¤",
  ug: "¤#,##0.00;(¤#,##0.00)",
  uk: "#,##0.00 ¤",
  und: "¤ #,##0.00",
  ur: "¤#,##0.00;(¤#,##0.00)",
  "ur-IN": "¤#,##0.00;(¤#,##0.00)",
  uz: "#,##0.00 ¤",
  "uz-Arab": "¤ #,##0.00",
  "uz-Cyrl": "#,##0.00 ¤",
  "uz-Latn": "#,##0.00 ¤",
  vai: "¤#,##0.00;(¤#,##0.00)",
  "vai-Latn": "¤#,##0.00;(¤#,##0.00)",
  "vai-Vaii": "¤#,##0.00;(¤#,##0.00)",
  vi: "#,##0.00 ¤",
  vun: "¤#,##0.00",
  wae: "¤ #,##0.00",
  wo: "¤ #,##0.00",
  xh: "¤#,##0.00",
  xog: "#,##0.00 ¤",
  yav: "#,##0.00 ¤;(#,##0.00 ¤)",
  yi: "¤ #,##0.00",
  yo: "¤#,##0.00;(¤#,##0.00)",
  "yo-BJ": "¤#,##0.00;(¤#,##0.00)",
  yrl: "¤ #,##0.00",
  "yrl-CO": "¤ #,##0.00",
  "yrl-VE": "¤ #,##0.00",
  yue: "¤#,##0.00;(¤#,##0.00)",
  "yue-Hans": "¤#,##0.00;(¤#,##0.00)",
  "yue-Hant": "¤#,##0.00;(¤#,##0.00)",
  zgh: "#,##0.00¤",
  zh: "¤#,##0.00;(¤#,##0.00)",
  "zh-Hans": "¤#,##0.00;(¤#,##0.00)",
  "zh-Hans-HK": "¤#,##0.00;(¤#,##0.00)",
  "zh-Hans-MO": "¤#,##0.00;(¤#,##0.00)",
  "zh-Hans-SG": "¤#,##0.00;(¤#,##0.00)",
  "zh-Hant": "¤#,##0.00;(¤#,##0.00)",
  "zh-Hant-HK": "¤#,##0.00;(¤#,##0.00)",
  "zh-Hant-MO": "¤#,##0.00;(¤#,##0.00)",
  zu: "¤#,##0.00;(¤#,##0.00)"
};

// node_modules/devextreme/esm/localization/intl/number.js
var CURRENCY_STYLES = ["standard", "accounting"];
var MAX_FRACTION_DIGITS = 20;
var detectCurrencySymbolRegex = /([^\s0]+)?(\s*)0*[.,]*0*(\s*)([^\s0]+)?/;
var formattersCache = {};
var getFormatter2 = (format2) => {
  var key = core_default.locale() + "/" + JSON.stringify(format2);
  if (!formattersCache[key]) {
    formattersCache[key] = new Intl.NumberFormat(core_default.locale(), format2).format;
  }
  return formattersCache[key];
};
var getCurrencyFormatter = (currency) => new Intl.NumberFormat(core_default.locale(), {
  style: "currency",
  currency
});
var number_default = {
  engine: function() {
    return "intl";
  },
  _formatNumberCore: function(value2, format2, formatConfig) {
    if ("exponential" === format2) {
      return this.callBase.apply(this, arguments);
    }
    return getFormatter2(this._normalizeFormatConfig(format2, formatConfig, value2))(value2);
  },
  _normalizeFormatConfig: function(format2, formatConfig, value2) {
    var config3;
    if ("decimal" === format2) {
      var fractionDigits = String(value2).split(".")[1];
      config3 = {
        minimumIntegerDigits: formatConfig.precision || void 0,
        useGrouping: false,
        maximumFractionDigits: fractionDigits && fractionDigits.length,
        round: value2 < 0 ? "ceil" : "floor"
      };
    } else {
      config3 = this._getPrecisionConfig(formatConfig.precision);
    }
    if ("percent" === format2) {
      config3.style = "percent";
    } else if ("currency" === format2) {
      var _formatConfig$useCurr;
      var useAccountingStyle = null !== (_formatConfig$useCurr = formatConfig.useCurrencyAccountingStyle) && void 0 !== _formatConfig$useCurr ? _formatConfig$useCurr : config_default().defaultUseCurrencyAccountingStyle;
      config3.style = "currency";
      config3.currency = formatConfig.currency || config_default().defaultCurrency;
      config3.currencySign = CURRENCY_STYLES[+useAccountingStyle];
    }
    return config3;
  },
  _getPrecisionConfig: function(precision) {
    var config3;
    if (null === precision) {
      config3 = {
        minimumFractionDigits: 0,
        maximumFractionDigits: MAX_FRACTION_DIGITS
      };
    } else {
      config3 = {
        minimumFractionDigits: precision || 0,
        maximumFractionDigits: precision || 0
      };
    }
    return config3;
  },
  format: function(value2, _format) {
    if ("number" !== typeof value2) {
      return value2;
    }
    _format = this._normalizeFormat(_format);
    if ("default" === _format.currency) {
      _format.currency = config_default().defaultCurrency;
    }
    if (!_format || "function" !== typeof _format && !_format.type && !_format.formatter) {
      return getFormatter2(_format)(value2);
    }
    return this.callBase.apply(this, arguments);
  },
  _getCurrencySymbolInfo: function(currency) {
    var formatter = getCurrencyFormatter(currency);
    return this._extractCurrencySymbolInfo(formatter.format(0));
  },
  _extractCurrencySymbolInfo: function(currencyValueString) {
    var match2 = detectCurrencySymbolRegex.exec(currencyValueString) || [];
    var position3 = match2[1] ? "before" : "after";
    var symbol = match2[1] || match2[4] || "";
    var delimiter = match2[2] || match2[3] || "";
    return {
      position: position3,
      symbol,
      delimiter
    };
  },
  getCurrencySymbol: function(currency) {
    if (!currency) {
      currency = config_default().defaultCurrency;
    }
    var symbolInfo = this._getCurrencySymbolInfo(currency);
    return {
      symbol: symbolInfo.symbol
    };
  },
  getOpenXmlCurrencyFormat: function(currency) {
    var targetCurrency = currency || config_default().defaultCurrency;
    var currencySymbol = this._getCurrencySymbolInfo(targetCurrency).symbol;
    var closestAccountingFormat = core_default.getValueByClosestLocale((locale) => accounting_formats_default[locale]);
    return open_xml_currency_format_default(currencySymbol, closestAccountingFormat);
  }
};

// node_modules/devextreme/esm/localization/number.js
var hasIntl = "undefined" !== typeof Intl;
var MAX_LARGE_NUMBER_POWER = 4;
var DECIMAL_BASE2 = 10;
var NUMERIC_FORMATS = ["currency", "fixedpoint", "exponential", "percent", "decimal"];
var LargeNumberFormatPostfixes = {
  1: "K",
  2: "M",
  3: "B",
  4: "T"
};
var LargeNumberFormatPowers = {
  largenumber: "auto",
  thousands: 1,
  millions: 2,
  billions: 3,
  trillions: 4
};
var numberLocalization = dependency_injector_default({
  engine: function() {
    return "base";
  },
  numericFormats: NUMERIC_FORMATS,
  defaultLargeNumberFormatPostfixes: LargeNumberFormatPostfixes,
  _parseNumberFormatString: function(formatType) {
    var formatObject = {};
    if (!formatType || "string" !== typeof formatType) {
      return;
    }
    var formatList = formatType.toLowerCase().split(" ");
    each(formatList, (index2, value2) => {
      if (NUMERIC_FORMATS.includes(value2)) {
        formatObject.formatType = value2;
      } else if (value2 in LargeNumberFormatPowers) {
        formatObject.power = LargeNumberFormatPowers[value2];
      }
    });
    if (formatObject.power && !formatObject.formatType) {
      formatObject.formatType = "fixedpoint";
    }
    if (formatObject.formatType) {
      return formatObject;
    }
  },
  _calculateNumberPower: function(value2, base2, minPower, maxPower) {
    var number = Math.abs(value2);
    var power = 0;
    if (number > 1) {
      while (number && number >= base2 && (void 0 === maxPower || power < maxPower)) {
        power++;
        number /= base2;
      }
    } else if (number > 0 && number < 1) {
      while (number < 1 && (void 0 === minPower || power > minPower)) {
        power--;
        number *= base2;
      }
    }
    return power;
  },
  _getNumberByPower: function(number, power, base2) {
    var result2 = number;
    while (power > 0) {
      result2 /= base2;
      power--;
    }
    while (power < 0) {
      result2 *= base2;
      power++;
    }
    return result2;
  },
  _formatNumber: function(value2, formatObject, formatConfig) {
    if ("auto" === formatObject.power) {
      formatObject.power = this._calculateNumberPower(value2, 1e3, 0, MAX_LARGE_NUMBER_POWER);
    }
    if (formatObject.power) {
      value2 = this._getNumberByPower(value2, formatObject.power, 1e3);
    }
    var powerPostfix = this.defaultLargeNumberFormatPostfixes[formatObject.power] || "";
    var result2 = this._formatNumberCore(value2, formatObject.formatType, formatConfig);
    result2 = result2.replace(/(\d|.$)(\D*)$/, "$1" + powerPostfix + "$2");
    return result2;
  },
  _formatNumberExponential: function(value2, formatConfig) {
    var power = this._calculateNumberPower(value2, DECIMAL_BASE2);
    var number = this._getNumberByPower(value2, power, DECIMAL_BASE2);
    if (void 0 === formatConfig.precision) {
      formatConfig.precision = 1;
    }
    if (number.toFixed(formatConfig.precision || 0) >= DECIMAL_BASE2) {
      power++;
      number /= DECIMAL_BASE2;
    }
    var powString = (power >= 0 ? "+" : "") + power.toString();
    return this._formatNumberCore(number, "fixedpoint", formatConfig) + "E" + powString;
  },
  _addZeroes: function(value2, precision) {
    var multiplier = Math.pow(10, precision);
    var sign2 = value2 < 0 ? "-" : "";
    value2 = (Math.abs(value2) * multiplier >>> 0) / multiplier;
    var result2 = value2.toString();
    while (result2.length < precision) {
      result2 = "0" + result2;
    }
    return sign2 + result2;
  },
  _addGroupSeparators: function(value2) {
    var parts = value2.toString().split(".");
    return parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, config_default().thousandsSeparator) + (parts[1] ? config_default().decimalSeparator + parts[1] : "");
  },
  _formatNumberCore: function(value2, format2, formatConfig) {
    if ("exponential" === format2) {
      return this._formatNumberExponential(value2, formatConfig);
    }
    if ("decimal" !== format2 && null !== formatConfig.precision) {
      formatConfig.precision = formatConfig.precision || 0;
    }
    if ("percent" === format2) {
      value2 *= 100;
    }
    if (void 0 !== formatConfig.precision) {
      if ("decimal" === format2) {
        value2 = this._addZeroes(value2, formatConfig.precision);
      } else {
        value2 = null === formatConfig.precision ? value2.toPrecision() : toFixed(value2, formatConfig.precision);
      }
    }
    if ("decimal" !== format2) {
      value2 = this._addGroupSeparators(value2);
    } else {
      value2 = value2.toString().replace(".", config_default().decimalSeparator);
    }
    if ("percent" === format2) {
      value2 += "%";
    }
    return value2;
  },
  _normalizeFormat: function(format2) {
    if (!format2) {
      return {};
    }
    if ("function" === typeof format2) {
      return format2;
    }
    if (!isPlainObject(format2)) {
      format2 = {
        type: format2
      };
    }
    return format2;
  },
  _getSeparators: function() {
    return {
      decimalSeparator: this.getDecimalSeparator(),
      thousandsSeparator: this.getThousandsSeparator()
    };
  },
  getThousandsSeparator: function() {
    return this.format(1e4, "fixedPoint")[2];
  },
  getDecimalSeparator: function() {
    return this.format(1.2, {
      type: "fixedPoint",
      precision: 1
    })[1];
  },
  convertDigits: function(value2, toStandard) {
    var digits = this.format(90, "decimal");
    if ("string" !== typeof value2 || "0" === digits[1]) {
      return value2;
    }
    var fromFirstDigit = toStandard ? digits[1] : "0";
    var toFirstDigit = toStandard ? "0" : digits[1];
    var fromLastDigit = toStandard ? digits[0] : "9";
    var regExp = new RegExp("[" + fromFirstDigit + "-" + fromLastDigit + "]", "g");
    return value2.replace(regExp, (char) => String.fromCharCode(char.charCodeAt(0) + (toFirstDigit.charCodeAt(0) - fromFirstDigit.charCodeAt(0))));
  },
  getNegativeEtalonRegExp: function(format2) {
    var separators = this._getSeparators();
    var digitalRegExp = new RegExp("[0-9" + escapeRegExp(separators.decimalSeparator + separators.thousandsSeparator) + "]+", "g");
    var negativeEtalon = this.format(-1, format2).replace(digitalRegExp, "1");
    ["\\", "(", ")", "[", "]", "*", "+", "$", "^", "?", "|", "{", "}"].forEach((char) => {
      negativeEtalon = negativeEtalon.replace(new RegExp("\\".concat(char), "g"), "\\".concat(char));
    });
    negativeEtalon = negativeEtalon.replace(/ /g, "\\s");
    negativeEtalon = negativeEtalon.replace(/1/g, ".*");
    return new RegExp(negativeEtalon, "g");
  },
  getSign: function(text, format2) {
    if (!format2) {
      if ("-" === text.replace(/[^0-9-]/g, "").charAt(0)) {
        return -1;
      }
      return 1;
    }
    var negativeEtalon = this.getNegativeEtalonRegExp(format2);
    return text.match(negativeEtalon) ? -1 : 1;
  },
  format: function(value2, _format) {
    if ("number" !== typeof value2) {
      return value2;
    }
    if ("number" === typeof _format) {
      return value2;
    }
    _format = _format && _format.formatter || _format;
    if ("function" === typeof _format) {
      return _format(value2);
    }
    _format = this._normalizeFormat(_format);
    if (!_format.type) {
      _format.type = "decimal";
    }
    var numberConfig = this._parseNumberFormatString(_format.type);
    if (!numberConfig) {
      var formatterConfig = this._getSeparators();
      formatterConfig.unlimitedIntegerDigits = _format.unlimitedIntegerDigits;
      return this.convertDigits(getFormatter(_format.type, formatterConfig)(value2));
    }
    return this._formatNumber(value2, numberConfig, _format);
  },
  parse: function(text, format2) {
    if (!text) {
      return;
    }
    if (format2 && format2.parser) {
      return format2.parser(text);
    }
    text = this.convertDigits(text, true);
    if (format2 && "string" !== typeof format2) {
      errors_default.log("W0011");
    }
    var decimalSeparator = this.getDecimalSeparator();
    var regExp = new RegExp("[^0-9" + escapeRegExp(decimalSeparator) + "]", "g");
    var cleanedText = text.replace(regExp, "").replace(decimalSeparator, ".").replace(/\.$/g, "");
    if ("." === cleanedText || "" === cleanedText) {
      return null;
    }
    if (this._calcSignificantDigits(cleanedText) > 15) {
      return NaN;
    }
    var parsed = +cleanedText * this.getSign(text, format2);
    format2 = this._normalizeFormat(format2);
    var formatConfig = this._parseNumberFormatString(format2.type);
    var power = null === formatConfig || void 0 === formatConfig ? void 0 : formatConfig.power;
    if (power) {
      if ("auto" === power) {
        var match2 = text.match(/\d(K|M|B|T)/);
        if (match2) {
          power = Object.keys(LargeNumberFormatPostfixes).find((power2) => LargeNumberFormatPostfixes[power2] === match2[1]);
        }
      }
      parsed *= Math.pow(10, 3 * power);
    }
    if ("percent" === (null === formatConfig || void 0 === formatConfig ? void 0 : formatConfig.formatType)) {
      parsed /= 100;
    }
    return parsed;
  },
  _calcSignificantDigits: function(text) {
    var [integer, fractional] = text.split(".");
    var calcDigitsAfterLeadingZeros = (digits) => {
      var index2 = -1;
      for (var i = 0; i < digits.length; i++) {
        if ("0" !== digits[i]) {
          index2 = i;
          break;
        }
      }
      return index2 > -1 ? digits.length - index2 : 0;
    };
    var result2 = 0;
    if (integer) {
      result2 += calcDigitsAfterLeadingZeros(integer.split(""));
    }
    if (fractional) {
      result2 += calcDigitsAfterLeadingZeros(fractional.split("").reverse());
    }
    return result2;
  }
});
numberLocalization.inject(currency_default);
if (hasIntl) {
  numberLocalization.inject(number_default);
}
var number_default2 = numberLocalization;

// node_modules/devextreme/esm/localization/ldml/date.formatter.js
function leftPad(text, length) {
  while (text.length < length) {
    text = "0" + text;
  }
  return text;
}
var FORMAT_TYPES = {
  3: "abbreviated",
  4: "wide",
  5: "narrow"
};
var LDML_FORMATTERS = {
  y: function(date, count, useUtc) {
    var year = date[useUtc ? "getUTCFullYear" : "getFullYear"]();
    if (2 === count) {
      year %= 100;
    }
    return leftPad(year.toString(), count);
  },
  M: function(date, count, useUtc, dateParts) {
    var month = date[useUtc ? "getUTCMonth" : "getMonth"]();
    var formatType = FORMAT_TYPES[count];
    if (formatType) {
      return dateParts.getMonthNames(formatType, "format")[month];
    }
    return leftPad((month + 1).toString(), Math.min(count, 2));
  },
  L: function(date, count, useUtc, dateParts) {
    var month = date[useUtc ? "getUTCMonth" : "getMonth"]();
    var formatType = FORMAT_TYPES[count];
    if (formatType) {
      return dateParts.getMonthNames(formatType, "standalone")[month];
    }
    return leftPad((month + 1).toString(), Math.min(count, 2));
  },
  Q: function(date, count, useUtc, dateParts) {
    var month = date[useUtc ? "getUTCMonth" : "getMonth"]();
    var quarter = Math.floor(month / 3);
    var formatType = FORMAT_TYPES[count];
    if (formatType) {
      return dateParts.getQuarterNames(formatType)[quarter];
    }
    return leftPad((quarter + 1).toString(), Math.min(count, 2));
  },
  E: function(date, count, useUtc, dateParts) {
    var day = date[useUtc ? "getUTCDay" : "getDay"]();
    var formatType = FORMAT_TYPES[count < 3 ? 3 : count];
    return dateParts.getDayNames(formatType)[day];
  },
  a: function(date, count, useUtc, dateParts) {
    var hours = date[useUtc ? "getUTCHours" : "getHours"]();
    var period = hours < 12 ? 0 : 1;
    var formatType = FORMAT_TYPES[count];
    return dateParts.getPeriodNames(formatType)[period];
  },
  d: function(date, count, useUtc) {
    return leftPad(date[useUtc ? "getUTCDate" : "getDate"]().toString(), Math.min(count, 2));
  },
  H: function(date, count, useUtc) {
    return leftPad(date[useUtc ? "getUTCHours" : "getHours"]().toString(), Math.min(count, 2));
  },
  h: function(date, count, useUtc) {
    var hours = date[useUtc ? "getUTCHours" : "getHours"]();
    return leftPad((hours % 12 || 12).toString(), Math.min(count, 2));
  },
  m: function(date, count, useUtc) {
    return leftPad(date[useUtc ? "getUTCMinutes" : "getMinutes"]().toString(), Math.min(count, 2));
  },
  s: function(date, count, useUtc) {
    return leftPad(date[useUtc ? "getUTCSeconds" : "getSeconds"]().toString(), Math.min(count, 2));
  },
  S: function(date, count, useUtc) {
    return leftPad(date[useUtc ? "getUTCMilliseconds" : "getMilliseconds"]().toString(), 3).substr(0, count);
  },
  x: function(date, count, useUtc) {
    var timezoneOffset = useUtc ? 0 : date.getTimezoneOffset();
    var signPart = timezoneOffset > 0 ? "-" : "+";
    var timezoneOffsetAbs = Math.abs(timezoneOffset);
    var hours = Math.floor(timezoneOffsetAbs / 60);
    var minutes = timezoneOffsetAbs % 60;
    var hoursPart = leftPad(hours.toString(), 2);
    var minutesPart = leftPad(minutes.toString(), 2);
    return signPart + hoursPart + (count >= 3 ? ":" : "") + (count > 1 || minutes ? minutesPart : "");
  },
  X: function(date, count, useUtc) {
    if (useUtc || !date.getTimezoneOffset()) {
      return "Z";
    }
    return LDML_FORMATTERS.x(date, count, useUtc);
  },
  Z: function(date, count, useUtc) {
    return LDML_FORMATTERS.X(date, count >= 5 ? 3 : 2, useUtc);
  }
};
var getFormatter3 = function(format2, dateParts) {
  return function(date) {
    var charIndex;
    var formatter;
    var char;
    var charCount = 0;
    var isEscaping = false;
    var isCurrentCharEqualsNext;
    var result2 = "";
    if (!date) {
      return null;
    }
    if (!format2) {
      return date;
    }
    var useUtc = "Z" === format2[format2.length - 1] || "'Z'" === format2.slice(-3);
    for (charIndex = 0; charIndex < format2.length; charIndex++) {
      char = format2[charIndex];
      formatter = LDML_FORMATTERS[char];
      isCurrentCharEqualsNext = char === format2[charIndex + 1];
      charCount++;
      if (!isCurrentCharEqualsNext) {
        if (formatter && !isEscaping) {
          result2 += formatter(date, charCount, useUtc, dateParts);
        }
        charCount = 0;
      }
      if ("'" === char && !isCurrentCharEqualsNext) {
        isEscaping = !isEscaping;
      } else if (isEscaping || !formatter) {
        result2 += char;
      }
      if ("'" === char && isCurrentCharEqualsNext) {
        charIndex++;
      }
    }
    return result2;
  };
};

// node_modules/devextreme/esm/localization/ldml/date.format.js
var ARABIC_COMMA = "،";
var FORMAT_SEPARATORS = " .,:;/\\<>()-[]" + ARABIC_COMMA;
var AM_PM_PATTERN = ". m.";
var checkDigit = function(char) {
  var code = char && number_default2.convertDigits(char, false).charCodeAt(0);
  var zeroCode = number_default2.convertDigits("0", false).charCodeAt(0);
  return zeroCode <= code && code < zeroCode + 10;
};
var checkPatternContinue = function(text, patterns, index2, isDigit) {
  var char = text[index2];
  var nextChar = text[index2 + 1];
  if (!isDigit) {
    if ("." === char || " " === char && text.slice(index2 - 1, index2 + 3) === AM_PM_PATTERN) {
      return true;
    }
    if ("-" === char && !checkDigit(nextChar)) {
      return true;
    }
  }
  var isDigitChanged = isDigit && patterns.some((pattern) => text[index2] !== pattern[index2]);
  return FORMAT_SEPARATORS.indexOf(char) < 0 && isDigit === checkDigit(char) && (!isDigit || isDigitChanged);
};
var getPatternStartIndex = function(defaultPattern, index2) {
  if (!checkDigit(defaultPattern[index2])) {
    while (index2 > 0 && !checkDigit(defaultPattern[index2 - 1]) && ("." === defaultPattern[index2 - 1] || FORMAT_SEPARATORS.indexOf(defaultPattern[index2 - 1]) < 0)) {
      index2--;
    }
  }
  return index2;
};
var getDifference = function(defaultPattern, patterns, processedIndexes, isDigit) {
  var i = 0;
  var result2 = [];
  var patternsFilter = function(pattern) {
    return defaultPattern[i] !== pattern[i] && (void 0 === isDigit || checkDigit(defaultPattern[i]) === isDigit);
  };
  if (!Array.isArray(patterns)) {
    patterns = [patterns];
  }
  for (i = 0; i < defaultPattern.length; i++) {
    if (processedIndexes.indexOf(i) < 0 && patterns.filter(patternsFilter).length) {
      i = getPatternStartIndex(defaultPattern, i);
      do {
        isDigit = checkDigit(defaultPattern[i]);
        if (!result2.length && !isDigit && checkDigit(patterns[0][i])) {
          break;
        }
        result2.push(i);
        processedIndexes.unshift(i);
        i++;
      } while (defaultPattern[i] && checkPatternContinue(defaultPattern, patterns, i, isDigit));
      break;
    }
  }
  if (1 === result2.length && ("0" === defaultPattern[processedIndexes[0] - 1] || "٠" === defaultPattern[processedIndexes[0] - 1])) {
    processedIndexes.unshift(processedIndexes[0] - 1);
  }
  return result2;
};
var replaceCharsCore = function(pattern, indexes, char, patternPositions) {
  var baseCharIndex = indexes[0];
  var patternIndex = baseCharIndex < patternPositions.length ? patternPositions[baseCharIndex] : baseCharIndex;
  indexes.forEach(function(_, index2) {
    pattern = pattern.substr(0, patternIndex + index2) + (char.length > 1 ? char[index2] : char) + pattern.substr(patternIndex + index2 + 1);
  });
  if (1 === indexes.length) {
    pattern = pattern.replace("0" + char, char + char);
    pattern = pattern.replace("٠" + char, char + char);
  }
  return pattern;
};
var replaceChars = function(pattern, indexes, char, patternPositions) {
  var i;
  var index2;
  var patternIndex;
  if (!checkDigit(pattern[indexes[0]] || "0")) {
    var letterCount = Math.max(indexes.length <= 3 ? 3 : 4, char.length);
    while (indexes.length > letterCount) {
      index2 = indexes.pop();
      patternIndex = patternPositions[index2];
      patternPositions[index2] = -1;
      for (i = index2 + 1; i < patternPositions.length; i++) {
        patternPositions[i]--;
      }
      pattern = pattern.substr(0, patternIndex) + pattern.substr(patternIndex + 1);
    }
    index2 = indexes[indexes.length - 1] + 1, patternIndex = index2 < patternPositions.length ? patternPositions[index2] : index2;
    while (indexes.length < letterCount) {
      indexes.push(indexes[indexes.length - 1] + 1);
      for (i = index2; i < patternPositions.length; i++) {
        patternPositions[i]++;
      }
      pattern = pattern.substr(0, patternIndex) + " " + pattern.substr(patternIndex);
    }
  }
  pattern = replaceCharsCore(pattern, indexes, char, patternPositions);
  return pattern;
};
var formatValue = function(value2, formatter) {
  if (Array.isArray(value2)) {
    return value2.map(function(value3) {
      return (formatter(value3) || "").toString();
    });
  }
  return (formatter(value2) || "").toString();
};
var ESCAPE_CHARS_REGEXP = /[a-zA-Z]/g;
var escapeChars = function(pattern, defaultPattern, processedIndexes, patternPositions) {
  var escapeIndexes = defaultPattern.split("").map(function(char, index2) {
    if (processedIndexes.indexOf(index2) < 0 && (char.match(ESCAPE_CHARS_REGEXP) || "'" === char)) {
      return patternPositions[index2];
    }
    return -1;
  });
  pattern = pattern.split("").map(function(char, index2) {
    var result2 = char;
    var isCurrentCharEscaped = escapeIndexes.indexOf(index2) >= 0;
    var isPrevCharEscaped = index2 > 0 && escapeIndexes.indexOf(index2 - 1) >= 0;
    var isNextCharEscaped = escapeIndexes.indexOf(index2 + 1) >= 0;
    if (isCurrentCharEscaped) {
      if (!isPrevCharEscaped) {
        result2 = "'" + result2;
      }
      if (!isNextCharEscaped) {
        result2 += "'";
      }
    }
    return result2;
  }).join("");
  return pattern;
};
var getFormat2 = function(formatter) {
  var processedIndexes = [];
  var defaultPattern = formatValue(new Date(2009, 8, 8, 6, 5, 4), formatter);
  var patternPositions = defaultPattern.split("").map(function(_, index2) {
    return index2;
  });
  var result2 = defaultPattern;
  var replacedPatterns = {};
  var datePatterns = [{
    date: new Date(2009, 8, 8, 6, 5, 4, 111),
    pattern: "S"
  }, {
    date: new Date(2009, 8, 8, 6, 5, 2),
    pattern: "s"
  }, {
    date: new Date(2009, 8, 8, 6, 2, 4),
    pattern: "m"
  }, {
    date: new Date(2009, 8, 8, 18, 5, 4),
    pattern: "H",
    isDigit: true
  }, {
    date: new Date(2009, 8, 8, 2, 5, 4),
    pattern: "h",
    isDigit: true
  }, {
    date: new Date(2009, 8, 8, 18, 5, 4),
    pattern: "a",
    isDigit: false
  }, {
    date: new Date(2009, 8, 1, 6, 5, 4),
    pattern: "d"
  }, {
    date: [new Date(2009, 8, 2, 6, 5, 4), new Date(2009, 8, 3, 6, 5, 4), new Date(2009, 8, 4, 6, 5, 4)],
    pattern: "E"
  }, {
    date: new Date(2009, 9, 6, 6, 5, 4),
    pattern: "M"
  }, {
    date: new Date(1998, 8, 8, 6, 5, 4),
    pattern: "y"
  }];
  if (!result2) {
    return;
  }
  datePatterns.forEach(function(test) {
    var diff = getDifference(defaultPattern, formatValue(test.date, formatter), processedIndexes, test.isDigit);
    var pattern = "M" === test.pattern && !replacedPatterns.d ? "L" : test.pattern;
    result2 = replaceChars(result2, diff, pattern, patternPositions);
    replacedPatterns[pattern] = diff.length;
  });
  result2 = escapeChars(result2, defaultPattern, processedIndexes, patternPositions);
  if (processedIndexes.length) {
    return result2;
  }
};

// node_modules/devextreme/esm/localization/ldml/date.parser.js
var FORMAT_TYPES2 = {
  3: "abbreviated",
  4: "wide",
  5: "narrow"
};
var monthRegExpGenerator = function(count, dateParts) {
  if (count > 2) {
    return Object.keys(FORMAT_TYPES2).map(function(count2) {
      return ["format", "standalone"].map(function(type2) {
        return dateParts.getMonthNames(FORMAT_TYPES2[count2], type2).join("|");
      }).join("|");
    }).join("|");
  }
  return 2 === count ? "1[012]|0?[1-9]" : "0??[1-9]|1[012]";
};
var PATTERN_REGEXPS = {
  ":": function(count, dateParts) {
    var countSuffix = count > 1 ? "{".concat(count, "}") : "";
    var timeSeparator = escapeRegExp(dateParts.getTimeSeparator());
    ":" !== timeSeparator && (timeSeparator = "".concat(timeSeparator, "|:"));
    return "".concat(timeSeparator).concat(countSuffix);
  },
  y: function(count) {
    return 2 === count ? "[0-9]{".concat(count, "}") : "[0-9]+?";
  },
  M: monthRegExpGenerator,
  L: monthRegExpGenerator,
  Q: function(count, dateParts) {
    if (count > 2) {
      return dateParts.getQuarterNames(FORMAT_TYPES2[count], "format").join("|");
    }
    return "0?[1-4]";
  },
  E: function(count, dateParts) {
    return "\\D*";
  },
  a: function(count, dateParts) {
    return dateParts.getPeriodNames(FORMAT_TYPES2[count < 3 ? 3 : count], "format").join("|");
  },
  d: function(count) {
    return 2 === count ? "3[01]|[12][0-9]|0?[1-9]" : "0??[1-9]|[12][0-9]|3[01]";
  },
  H: function(count) {
    return 2 === count ? "2[0-3]|1[0-9]|0?[0-9]" : "0??[0-9]|1[0-9]|2[0-3]";
  },
  h: function(count) {
    return 2 === count ? "1[012]|0?[1-9]" : "0??[1-9]|1[012]";
  },
  m: function(count) {
    return 2 === count ? "[1-5][0-9]|0?[0-9]" : "0??[0-9]|[1-5][0-9]";
  },
  s: function(count) {
    return 2 === count ? "[1-5][0-9]|0?[0-9]" : "0??[0-9]|[1-5][0-9]";
  },
  S: function(count) {
    return "[0-9]{1,".concat(count, "}");
  },
  w: function(count) {
    return 2 === count ? "[1-5][0-9]|0?[0-9]" : "0??[0-9]|[1-5][0-9]";
  }
};
var parseNumber = Number;
var caseInsensitiveIndexOf = function(array, value2) {
  return array.map((item) => item.toLowerCase()).indexOf(value2.toLowerCase());
};
var monthPatternParser = function(text, count, dateParts) {
  if (count > 2) {
    return ["format", "standalone"].map(function(type2) {
      return Object.keys(FORMAT_TYPES2).map(function(count2) {
        var monthNames = dateParts.getMonthNames(FORMAT_TYPES2[count2], type2);
        return caseInsensitiveIndexOf(monthNames, text);
      });
    }).reduce(function(a, b) {
      return a.concat(b);
    }).filter(function(index2) {
      return index2 >= 0;
    })[0];
  }
  return parseNumber(text) - 1;
};
var PATTERN_PARSERS = {
  y: function(text, count) {
    var year = parseNumber(text);
    if (2 === count) {
      return year < 30 ? 2e3 + year : 1900 + year;
    }
    return year;
  },
  M: monthPatternParser,
  L: monthPatternParser,
  Q: function(text, count, dateParts) {
    if (count > 2) {
      return dateParts.getQuarterNames(FORMAT_TYPES2[count], "format").indexOf(text);
    }
    return parseNumber(text) - 1;
  },
  E: function(text, count, dateParts) {
    var dayNames = dateParts.getDayNames(FORMAT_TYPES2[count < 3 ? 3 : count], "format");
    return caseInsensitiveIndexOf(dayNames, text);
  },
  a: function(text, count, dateParts) {
    var periodNames = dateParts.getPeriodNames(FORMAT_TYPES2[count < 3 ? 3 : count], "format");
    return caseInsensitiveIndexOf(periodNames, text);
  },
  d: parseNumber,
  H: parseNumber,
  h: parseNumber,
  m: parseNumber,
  s: parseNumber,
  S: function(text, count) {
    count = Math.max(count, 3);
    text = text.slice(0, 3);
    while (count < 3) {
      text += "0";
      count++;
    }
    return parseNumber(text);
  }
};
var ORDERED_PATTERNS = ["y", "M", "d", "h", "m", "s", "S"];
var PATTERN_SETTERS = {
  y: "setFullYear",
  M: "setMonth",
  L: "setMonth",
  a: function(date, value2, datePartValues) {
    var hours = date.getHours();
    var hourPartValue = datePartValues.h;
    if (void 0 !== hourPartValue && hourPartValue !== hours) {
      hours--;
    }
    if (!value2 && 12 === hours) {
      hours = 0;
    } else if (value2 && 12 !== hours) {
      hours += 12;
    }
    date.setHours(hours);
  },
  d: "setDate",
  H: "setHours",
  h: "setHours",
  m: "setMinutes",
  s: "setSeconds",
  S: "setMilliseconds"
};
var getSameCharCount = function(text, index2) {
  var char = text[index2];
  if (!char) {
    return 0;
  }
  var count = 0;
  do {
    index2++;
    count++;
  } while (text[index2] === char);
  return count;
};
var createPattern = function(char, count) {
  var result2 = "";
  for (var i = 0; i < count; i++) {
    result2 += char;
  }
  return result2;
};
var getRegExpInfo = function(format2, dateParts) {
  var regexpText = "";
  var stubText = "";
  var isEscaping;
  var patterns = [];
  var addPreviousStub = function() {
    if (stubText) {
      patterns.push("'".concat(stubText, "'"));
      regexpText += "".concat(escapeRegExp(stubText), ")");
      stubText = "";
    }
  };
  for (var i = 0; i < format2.length; i++) {
    var char = format2[i];
    var isEscapeChar = "'" === char;
    var regexpPart = PATTERN_REGEXPS[char];
    if (isEscapeChar) {
      isEscaping = !isEscaping;
      if ("'" !== format2[i - 1]) {
        continue;
      }
    }
    if (regexpPart && !isEscaping) {
      var count = getSameCharCount(format2, i);
      var pattern = createPattern(char, count);
      addPreviousStub();
      patterns.push(pattern);
      regexpText += "(".concat(regexpPart(count, dateParts), ")");
      i += count - 1;
    } else {
      if (!stubText) {
        regexpText += "(";
      }
      stubText += char;
    }
  }
  addPreviousStub();
  if (!isPossibleForParsingFormat(patterns)) {
    logger.warn("The following format may be parsed incorrectly: ".concat(format2, "."));
  }
  return {
    patterns,
    regexp: new RegExp("^".concat(regexpText, "$"), "i")
  };
};
var digitFieldSymbols = ["d", "H", "h", "m", "s", "w", "M", "L", "Q"];
var isPossibleForParsingFormat = function(patterns) {
  var isDigitPattern = (pattern) => {
    if (!pattern) {
      return false;
    }
    var char = pattern[0];
    return ["y", "S"].includes(char) || digitFieldSymbols.includes(char) && pattern.length < 3;
  };
  var possibleForParsing = true;
  var ambiguousDigitPatternsCount = 0;
  return patterns.every((pattern, index2, patterns2) => {
    if (isDigitPattern(pattern)) {
      if (((pattern2) => "S" !== pattern2[0] && 2 !== pattern2.length)(pattern)) {
        possibleForParsing = ++ambiguousDigitPatternsCount < 2;
      }
      if (!isDigitPattern(patterns2[index2 + 1])) {
        ambiguousDigitPatternsCount = 0;
      }
    }
    return possibleForParsing;
  });
};
var getPatternSetters = function() {
  return PATTERN_SETTERS;
};
var setPatternPart = function(date, pattern, text, dateParts, datePartValues) {
  var patternChar = pattern[0];
  var partSetter = PATTERN_SETTERS[patternChar];
  var partParser = PATTERN_PARSERS[patternChar];
  if (partSetter && partParser) {
    var value2 = partParser(text, pattern.length, dateParts);
    datePartValues[pattern] = value2;
    if (date[partSetter]) {
      date[partSetter](value2);
    } else {
      partSetter(date, value2, datePartValues);
    }
  }
};
var setPatternPartFromNow = function(date, pattern, now) {
  var setterName = PATTERN_SETTERS[pattern];
  var getterName = "g" + setterName.substr(1);
  var value2 = now[getterName]();
  date[setterName](value2);
};
var getShortPatterns = function(fullPatterns) {
  return fullPatterns.map(function(pattern) {
    if ("'" === pattern[0]) {
      return "";
    } else {
      return "H" === pattern[0] ? "h" : pattern[0];
    }
  });
};
var getMaxOrderedPatternIndex = function(patterns) {
  var indexes = patterns.map(function(pattern) {
    return ORDERED_PATTERNS.indexOf(pattern);
  });
  return Math.max.apply(Math, indexes);
};
var getOrderedFormatPatterns = function(formatPatterns) {
  var otherPatterns = formatPatterns.filter(function(pattern) {
    return ORDERED_PATTERNS.indexOf(pattern) < 0;
  });
  return ORDERED_PATTERNS.concat(otherPatterns);
};
var getParser = function(format2, dateParts) {
  var regExpInfo = getRegExpInfo(format2, dateParts);
  return function(text) {
    var regExpResult = regExpInfo.regexp.exec(text);
    if (regExpResult) {
      var now = /* @__PURE__ */ new Date();
      var date = new Date(now.getFullYear(), 0, 1);
      var formatPatterns = getShortPatterns(regExpInfo.patterns);
      var maxPatternIndex = getMaxOrderedPatternIndex(formatPatterns);
      var orderedFormatPatterns = getOrderedFormatPatterns(formatPatterns);
      var datePartValues = {};
      orderedFormatPatterns.forEach(function(pattern, index2) {
        if (!pattern || index2 < ORDERED_PATTERNS.length && index2 > maxPatternIndex) {
          return;
        }
        var patternIndex = formatPatterns.indexOf(pattern);
        if (patternIndex >= 0) {
          var regExpPattern = regExpInfo.patterns[patternIndex];
          var regExpText = regExpResult[patternIndex + 1];
          setPatternPart(date, regExpPattern, regExpText, dateParts, datePartValues);
        } else {
          setPatternPartFromNow(date, pattern, now);
        }
      });
      return date;
    }
    return null;
  };
};

// node_modules/devextreme/esm/localization/default_date_names.js
var MONTHS = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
var DAYS = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
var PERIODS = ["AM", "PM"];
var QUARTERS = ["Q1", "Q2", "Q3", "Q4"];
var cutCaptions = (captions, format2) => {
  var lengthByFormat = {
    abbreviated: 3,
    short: 2,
    narrow: 1
  };
  return map(captions, (caption) => caption.substr(0, lengthByFormat[format2]));
};
var default_date_names_default = {
  getMonthNames: function(format2) {
    return cutCaptions(MONTHS, format2);
  },
  getDayNames: function(format2) {
    return cutCaptions(DAYS, format2);
  },
  getQuarterNames: function(format2) {
    return QUARTERS;
  },
  getPeriodNames: function(format2) {
    return PERIODS;
  }
};

// node_modules/devextreme/esm/localization/cldr-data/first_day_of_week_data.js
var first_day_of_week_data_default = {
  "af-NA": 1,
  agq: 1,
  ak: 1,
  ar: 6,
  "ar-EH": 1,
  "ar-ER": 1,
  "ar-KM": 1,
  "ar-LB": 1,
  "ar-MA": 1,
  "ar-MR": 1,
  "ar-PS": 1,
  "ar-SO": 1,
  "ar-SS": 1,
  "ar-TD": 1,
  "ar-TN": 1,
  asa: 1,
  ast: 1,
  az: 1,
  "az-Cyrl": 1,
  bas: 1,
  be: 1,
  bem: 1,
  bez: 1,
  bg: 1,
  bm: 1,
  br: 1,
  bs: 1,
  "bs-Cyrl": 1,
  ca: 1,
  ce: 1,
  cgg: 1,
  ckb: 6,
  cs: 1,
  cy: 1,
  da: 1,
  de: 1,
  dje: 1,
  dsb: 1,
  dua: 1,
  dyo: 1,
  ee: 1,
  el: 1,
  "en-001": 1,
  "en-AE": 6,
  "en-BI": 1,
  "en-MP": 1,
  "en-MV": 5,
  "en-SD": 6,
  eo: 1,
  es: 1,
  et: 1,
  eu: 1,
  ewo: 1,
  fa: 6,
  ff: 1,
  "ff-Adlm": 1,
  fi: 1,
  fo: 1,
  fr: 1,
  "fr-DJ": 6,
  "fr-DZ": 6,
  "fr-SY": 6,
  fur: 1,
  fy: 1,
  ga: 1,
  gd: 1,
  gl: 1,
  gsw: 1,
  gv: 1,
  ha: 1,
  hr: 1,
  hsb: 1,
  hu: 1,
  hy: 1,
  ia: 1,
  ig: 1,
  is: 1,
  it: 1,
  jgo: 1,
  jmc: 1,
  ka: 1,
  kab: 6,
  kde: 1,
  kea: 1,
  khq: 1,
  kk: 1,
  kkj: 1,
  kl: 1,
  "ko-KP": 1,
  ksb: 1,
  ksf: 1,
  ksh: 1,
  ku: 1,
  kw: 1,
  ky: 1,
  lag: 1,
  lb: 1,
  lg: 1,
  ln: 1,
  lrc: 6,
  lt: 1,
  lu: 1,
  lv: 1,
  "mas-TZ": 1,
  mfe: 1,
  mg: 1,
  mgo: 1,
  mi: 1,
  mk: 1,
  mn: 1,
  ms: 1,
  mua: 1,
  mzn: 6,
  naq: 1,
  nds: 1,
  nl: 1,
  nmg: 1,
  nnh: 1,
  no: 1,
  nus: 1,
  nyn: 1,
  os: 1,
  pcm: 1,
  pl: 1,
  ps: 6,
  "pt-AO": 1,
  "pt-CH": 1,
  "pt-CV": 1,
  "pt-GQ": 1,
  "pt-GW": 1,
  "pt-LU": 1,
  "pt-ST": 1,
  "pt-TL": 1,
  "qu-BO": 1,
  "qu-EC": 1,
  rm: 1,
  rn: 1,
  ro: 1,
  rof: 1,
  ru: 1,
  rw: 1,
  rwk: 1,
  sah: 1,
  sbp: 1,
  sc: 1,
  se: 1,
  ses: 1,
  sg: 1,
  shi: 1,
  "shi-Latn": 1,
  si: 1,
  sk: 1,
  sl: 1,
  smn: 1,
  so: 1,
  "so-DJ": 6,
  sq: 1,
  sr: 1,
  "sr-Latn": 1,
  sv: 1,
  sw: 1,
  "ta-LK": 1,
  "ta-MY": 1,
  teo: 1,
  tg: 1,
  "ti-ER": 1,
  tk: 1,
  to: 1,
  tr: 1,
  tt: 1,
  twq: 1,
  tzm: 1,
  uk: 1,
  uz: 1,
  "uz-Arab": 6,
  "uz-Cyrl": 1,
  vai: 1,
  "vai-Latn": 1,
  vi: 1,
  vun: 1,
  wae: 1,
  wo: 1,
  xog: 1,
  yav: 1,
  yi: 1,
  yo: 1,
  zgh: 1
};

// node_modules/devextreme/esm/localization/intl/date.js
var SYMBOLS_TO_REMOVE_REGEX = /[\u200E\u200F]/g;
var NARROW_NO_BREAK_SPACE_REGEX = /[\u202F]/g;
var getIntlFormatter = (format2) => (date) => {
  if (!format2.timeZoneName) {
    var year = date.getFullYear();
    var recognizableAsTwentyCentury = String(year).length < 3;
    var temporaryYearValue = recognizableAsTwentyCentury ? year + 400 : year;
    var utcDate = new Date(Date.UTC(temporaryYearValue, date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
    if (recognizableAsTwentyCentury) {
      utcDate.setFullYear(year);
    }
    var utcFormat = extend({
      timeZone: "UTC"
    }, format2);
    return formatDateTime(utcDate, utcFormat);
  }
  return formatDateTime(date, format2);
};
var formattersCache2 = {};
var getFormatter4 = (format2) => {
  var key = core_default.locale() + "/" + JSON.stringify(format2);
  if (!formattersCache2[key]) {
    formattersCache2[key] = new Intl.DateTimeFormat(core_default.locale(), format2).format;
  }
  return formattersCache2[key];
};
function formatDateTime(date, format2) {
  return getFormatter4(format2)(date).replace(SYMBOLS_TO_REMOVE_REGEX, "").replace(NARROW_NO_BREAK_SPACE_REGEX, " ");
}
var formatNumber = (number) => new Intl.NumberFormat(core_default.locale()).format(number);
var getAlternativeNumeralsMap = /* @__PURE__ */ (() => {
  var numeralsMapCache = {};
  return (locale) => {
    if (!(locale in numeralsMapCache)) {
      if ("0" === formatNumber(0)) {
        numeralsMapCache[locale] = false;
        return false;
      }
      numeralsMapCache[locale] = {};
      for (var i = 0; i < 10; ++i) {
        numeralsMapCache[locale][formatNumber(i)] = i;
      }
    }
    return numeralsMapCache[locale];
  };
})();
var normalizeNumerals = (dateString) => {
  var alternativeNumeralsMap = getAlternativeNumeralsMap(core_default.locale());
  if (!alternativeNumeralsMap) {
    return dateString;
  }
  return dateString.split("").map((sign2) => sign2 in alternativeNumeralsMap ? String(alternativeNumeralsMap[sign2]) : sign2).join("");
};
var removeLeadingZeroes = (str) => str.replace(/(\D)0+(\d)/g, "$1$2");
var dateStringEquals = (actual, expected) => removeLeadingZeroes(actual) === removeLeadingZeroes(expected);
var normalizeMonth = (text) => text.replace("d’", "de ");
var intlFormats = {
  day: {
    day: "numeric"
  },
  dayofweek: {
    weekday: "long"
  },
  longdate: {
    weekday: "long",
    year: "numeric",
    month: "long",
    day: "numeric"
  },
  longdatelongtime: {
    weekday: "long",
    year: "numeric",
    month: "long",
    day: "numeric",
    hour: "numeric",
    minute: "numeric",
    second: "numeric"
  },
  longtime: {
    hour: "numeric",
    minute: "numeric",
    second: "numeric"
  },
  month: {
    month: "long"
  },
  monthandday: {
    month: "long",
    day: "numeric"
  },
  monthandyear: {
    year: "numeric",
    month: "long"
  },
  shortdate: {},
  shorttime: {
    hour: "numeric",
    minute: "numeric"
  },
  shortyear: {
    year: "2-digit"
  },
  year: {
    year: "numeric"
  }
};
Object.defineProperty(intlFormats, "shortdateshorttime", {
  get: function() {
    var defaultOptions3 = Intl.DateTimeFormat(core_default.locale()).resolvedOptions();
    return {
      year: defaultOptions3.year,
      month: defaultOptions3.month,
      day: defaultOptions3.day,
      hour: "numeric",
      minute: "numeric"
    };
  }
});
var getIntlFormat = (format2) => "string" === typeof format2 && intlFormats[format2.toLowerCase()];
var monthNameStrategies = {
  standalone: function(monthIndex, monthFormat) {
    var date = new Date(1999, monthIndex, 13, 1);
    var dateString = getIntlFormatter({
      month: monthFormat
    })(date);
    return dateString;
  },
  format: function(monthIndex, monthFormat) {
    var date = new Date(0, monthIndex, 13, 1);
    var dateString = normalizeMonth(getIntlFormatter({
      day: "numeric",
      month: monthFormat
    })(date));
    var parts = dateString.split(" ").filter((part) => part.indexOf("13") < 0);
    if (1 === parts.length) {
      return parts[0];
    } else if (2 === parts.length) {
      return parts[0].length > parts[1].length ? parts[0] : parts[1];
    }
    return monthNameStrategies.standalone(monthIndex, monthFormat);
  }
};
var date_default2 = {
  engine: function() {
    return "intl";
  },
  getMonthNames: function(format2, type2) {
    var monthFormat = {
      wide: "long",
      abbreviated: "short",
      narrow: "narrow"
    }[format2 || "wide"];
    type2 = "format" === type2 ? type2 : "standalone";
    return Array.apply(null, new Array(12)).map((_, monthIndex) => monthNameStrategies[type2](monthIndex, monthFormat));
  },
  getDayNames: function(format2) {
    var result2 = ((format3) => Array.apply(null, new Array(7)).map((_, dayIndex) => getIntlFormatter({
      weekday: format3
    })(new Date(0, 0, dayIndex))))({
      wide: "long",
      abbreviated: "short",
      short: "narrow",
      narrow: "narrow"
    }[format2 || "wide"]);
    return result2;
  },
  getPeriodNames: function() {
    var hour12Formatter = getIntlFormatter({
      hour: "numeric",
      hour12: true
    });
    return [1, 13].map((hours) => {
      var hourNumberText = formatNumber(1);
      var timeParts = hour12Formatter(new Date(0, 0, 1, hours)).split(hourNumberText);
      if (2 !== timeParts.length) {
        return "";
      }
      var biggerPart = timeParts[0].length > timeParts[1].length ? timeParts[0] : timeParts[1];
      return biggerPart.trim();
    });
  },
  format: function(date, _format) {
    if (!date) {
      return;
    }
    if (!_format) {
      return date;
    }
    if ("function" !== typeof _format && !_format.formatter) {
      _format = _format.type || _format;
    }
    var intlFormat = getIntlFormat(_format);
    if (intlFormat) {
      return getIntlFormatter(intlFormat)(date);
    }
    var formatType = typeof _format;
    if (_format.formatter || "function" === formatType || "string" === formatType) {
      return this.callBase.apply(this, arguments);
    }
    return getIntlFormatter(_format)(date);
  },
  parse: function(dateString, format2) {
    var formatter;
    if (format2 && !format2.parser && "string" === typeof dateString) {
      dateString = normalizeMonth(dateString);
      formatter = (date) => normalizeMonth(this.format(date, format2));
    }
    return this.callBase(dateString, formatter || format2);
  },
  _parseDateBySimpleFormat: function(dateString, format2) {
    dateString = normalizeNumerals(dateString);
    var formatParts = this.getFormatParts(format2);
    var dateParts = dateString.split(/\D+/).filter((part) => part.length > 0);
    if (formatParts.length !== dateParts.length) {
      return;
    }
    var dateArgs = this._generateDateArgs(formatParts, dateParts);
    var constructValidDate = (ampmShift) => {
      var parsedDate = ((dateArgs2, ampmShift2) => {
        var hoursShift = ampmShift2 ? 12 : 0;
        return new Date(dateArgs2.year, dateArgs2.month, dateArgs2.day, (dateArgs2.hours + hoursShift) % 24, dateArgs2.minutes, dateArgs2.seconds);
      })(dateArgs, ampmShift);
      if (dateStringEquals(normalizeNumerals(this.format(parsedDate, format2)), dateString)) {
        return parsedDate;
      }
    };
    return constructValidDate(false) || constructValidDate(true);
  },
  _generateDateArgs: function(formatParts, dateParts) {
    var currentDate = /* @__PURE__ */ new Date();
    var dateArgs = {
      year: currentDate.getFullYear(),
      month: currentDate.getMonth(),
      day: currentDate.getDate(),
      hours: 0,
      minutes: 0,
      seconds: 0
    };
    formatParts.forEach((formatPart, index2) => {
      var datePart = dateParts[index2];
      var parsed = parseInt(datePart, 10);
      if ("month" === formatPart) {
        parsed -= 1;
      }
      dateArgs[formatPart] = parsed;
    });
    return dateArgs;
  },
  formatUsesMonthName: function(format2) {
    if ("object" === typeof format2 && !(format2.type || format2.format)) {
      return "long" === format2.month;
    }
    return this.callBase.apply(this, arguments);
  },
  formatUsesDayName: function(format2) {
    if ("object" === typeof format2 && !(format2.type || format2.format)) {
      return "long" === format2.weekday;
    }
    return this.callBase.apply(this, arguments);
  },
  getTimeSeparator: function() {
    return normalizeNumerals(formatDateTime(new Date(2001, 1, 1, 11, 11), {
      hour: "numeric",
      minute: "numeric",
      hour12: false
    })).replace(/\d/g, "");
  },
  getFormatParts: function(format2) {
    if ("string" === typeof format2) {
      return this.callBase(format2);
    }
    var intlFormat = extend({}, intlFormats[format2.toLowerCase()]);
    var date = new Date(2001, 2, 4, 5, 6, 7);
    var formattedDate = getIntlFormatter(intlFormat)(date);
    formattedDate = normalizeNumerals(formattedDate);
    return [{
      name: "year",
      value: 1
    }, {
      name: "month",
      value: 3
    }, {
      name: "day",
      value: 4
    }, {
      name: "hours",
      value: 5
    }, {
      name: "minutes",
      value: 6
    }, {
      name: "seconds",
      value: 7
    }].map((part) => ({
      name: part.name,
      index: formattedDate.indexOf(part.value)
    })).filter((part) => part.index > -1).sort((a, b) => a.index - b.index).map((part) => part.name);
  }
};

// node_modules/devextreme/esm/localization/date.js
var DEFAULT_DAY_OF_WEEK_INDEX = 0;
var hasIntl2 = "undefined" !== typeof Intl;
var FORMATS_TO_PATTERN_MAP = {
  shortdate: "M/d/y",
  shorttime: "h:mm a",
  longdate: "EEEE, MMMM d, y",
  longtime: "h:mm:ss a",
  monthandday: "MMMM d",
  monthandyear: "MMMM y",
  quarterandyear: "QQQ y",
  day: "d",
  year: "y",
  shortdateshorttime: "M/d/y, h:mm a",
  longdatelongtime: "EEEE, MMMM d, y, h:mm:ss a",
  month: "LLLL",
  shortyear: "yy",
  dayofweek: "EEEE",
  quarter: "QQQ",
  hour: "HH",
  minute: "mm",
  second: "ss",
  millisecond: "SSS",
  "datetime-local": "yyyy-MM-ddTHH':'mm':'ss"
};
var possiblePartPatterns = {
  year: ["y", "yy", "yyyy"],
  day: ["d", "dd"],
  month: ["M", "MM", "MMM", "MMMM"],
  hours: ["H", "HH", "h", "hh", "ah"],
  minutes: ["m", "mm"],
  seconds: ["s", "ss"],
  milliseconds: ["S", "SS", "SSS"]
};
var dateLocalization = dependency_injector_default({
  engine: function() {
    return "base";
  },
  _getPatternByFormat: function(format2) {
    return FORMATS_TO_PATTERN_MAP[format2.toLowerCase()];
  },
  _expandPattern: function(pattern) {
    return this._getPatternByFormat(pattern) || pattern;
  },
  formatUsesMonthName: function(format2) {
    return -1 !== this._expandPattern(format2).indexOf("MMMM");
  },
  formatUsesDayName: function(format2) {
    return -1 !== this._expandPattern(format2).indexOf("EEEE");
  },
  getFormatParts: function(format2) {
    var pattern = this._getPatternByFormat(format2) || format2;
    var result2 = [];
    each(pattern.split(/\W+/), (_, formatPart) => {
      each(possiblePartPatterns, (partName, possiblePatterns) => {
        if (possiblePatterns.includes(formatPart)) {
          result2.push(partName);
        }
      });
    });
    return result2;
  },
  getMonthNames: function(format2) {
    return default_date_names_default.getMonthNames(format2);
  },
  getDayNames: function(format2) {
    return default_date_names_default.getDayNames(format2);
  },
  getQuarterNames: function(format2) {
    return default_date_names_default.getQuarterNames(format2);
  },
  getPeriodNames: function(format2) {
    return default_date_names_default.getPeriodNames(format2);
  },
  getTimeSeparator: function() {
    return ":";
  },
  is24HourFormat: function(format2) {
    var amTime = new Date(2017, 0, 20, 11, 0, 0, 0);
    var pmTime = new Date(2017, 0, 20, 23, 0, 0, 0);
    var amTimeFormatted = this.format(amTime, format2);
    var pmTimeFormatted = this.format(pmTime, format2);
    for (var i = 0; i < amTimeFormatted.length; i++) {
      if (amTimeFormatted[i] !== pmTimeFormatted[i]) {
        return !isNaN(parseInt(amTimeFormatted[i]));
      }
    }
  },
  format: function(date, _format) {
    if (!date) {
      return;
    }
    if (!_format) {
      return date;
    }
    var formatter;
    if ("function" === typeof _format) {
      formatter = _format;
    } else if (_format.formatter) {
      formatter = _format.formatter;
    } else {
      _format = _format.type || _format;
      if (isString(_format)) {
        _format = FORMATS_TO_PATTERN_MAP[_format.toLowerCase()] || _format;
        return number_default2.convertDigits(getFormatter3(_format, this)(date));
      }
    }
    if (!formatter) {
      return;
    }
    return formatter(date);
  },
  parse: function(text, format2) {
    var that = this;
    var ldmlFormat;
    var formatter;
    if (!text) {
      return;
    }
    if (!format2) {
      return this.parse(text, "shortdate");
    }
    if (format2.parser) {
      return format2.parser(text);
    }
    if ("string" === typeof format2 && !FORMATS_TO_PATTERN_MAP[format2.toLowerCase()]) {
      ldmlFormat = format2;
    } else {
      formatter = (value2) => {
        var text2 = that.format(value2, format2);
        return number_default2.convertDigits(text2, true);
      };
      try {
        ldmlFormat = getFormat2(formatter);
      } catch (e) {
      }
    }
    if (ldmlFormat) {
      text = number_default2.convertDigits(text, true);
      return getParser(ldmlFormat, this)(text);
    }
    errors_default.log("W0012");
    var result2 = new Date(text);
    if (!result2 || isNaN(result2.getTime())) {
      return;
    }
    return result2;
  },
  firstDayOfWeekIndex: function() {
    var index2 = core_default.getValueByClosestLocale((locale) => first_day_of_week_data_default[locale]);
    return void 0 === index2 ? DEFAULT_DAY_OF_WEEK_INDEX : index2;
  }
});
if (hasIntl2) {
  dateLocalization.inject(date_default2);
}
var date_default3 = dateLocalization;

// node_modules/devextreme/esm/format_helper.js
var format_helper_default = dependency_injector_default({
  format: function(value2, _format) {
    var formatIsValid = isString(_format) && "" !== _format || isPlainObject(_format) || isFunction(_format);
    var valueIsValid = isNumeric(value2) || isDate(value2);
    if (!formatIsValid || !valueIsValid) {
      return isDefined(value2) ? value2.toString() : "";
    }
    if (isFunction(_format)) {
      return _format(value2);
    }
    if (isString(_format)) {
      _format = {
        type: _format
      };
    }
    if (isNumeric(value2)) {
      return number_default2.format(value2, _format);
    }
    if (isDate(value2)) {
      return date_default3.format(value2, _format);
    }
  },
  getTimeFormat: function(showSecond) {
    return showSecond ? "longtime" : "shorttime";
  },
  _normalizeFormat: function(format2) {
    if (!Array.isArray(format2)) {
      return format2;
    }
    if (1 === format2.length) {
      return format2[0];
    }
    return function(date) {
      return format2.map(function(formatPart) {
        return date_default3.format(date, formatPart);
      }).join(" ");
    };
  },
  getDateFormatByDifferences: function(dateDifferences, intervalFormat) {
    var resultFormat = [];
    var needSpecialSecondFormatter = intervalFormat && dateDifferences.millisecond && !(dateDifferences.year || dateDifferences.month || dateDifferences.day);
    if (needSpecialSecondFormatter) {
      resultFormat.push(function(date) {
        return date.getSeconds() + date.getMilliseconds() / 1e3 + "s";
      });
    } else if (dateDifferences.millisecond) {
      resultFormat.push("millisecond");
    }
    if (dateDifferences.hour || dateDifferences.minute || !needSpecialSecondFormatter && dateDifferences.second) {
      resultFormat.unshift(this.getTimeFormat(dateDifferences.second));
    }
    if (dateDifferences.year && dateDifferences.month && dateDifferences.day) {
      if (intervalFormat && "month" === intervalFormat) {
        return "monthandyear";
      } else {
        resultFormat.unshift("shortdate");
        return this._normalizeFormat(resultFormat);
      }
    }
    if (dateDifferences.year && dateDifferences.month) {
      return "monthandyear";
    }
    if (dateDifferences.year && dateDifferences.quarter) {
      return "quarterandyear";
    }
    if (dateDifferences.year) {
      return "year";
    }
    if (dateDifferences.quarter) {
      return "quarter";
    }
    if (dateDifferences.month && dateDifferences.day) {
      if (intervalFormat) {
        resultFormat.unshift(function(date) {
          return date_default3.getMonthNames("abbreviated")[date.getMonth()] + " " + date_default3.format(date, "day");
        });
      } else {
        resultFormat.unshift("monthandday");
      }
      return this._normalizeFormat(resultFormat);
    }
    if (dateDifferences.month) {
      return "month";
    }
    if (dateDifferences.day) {
      if (intervalFormat) {
        resultFormat.unshift("day");
      } else {
        resultFormat.unshift(function(date) {
          return date_default3.format(date, "dayofweek") + ", " + date_default3.format(date, "day");
        });
      }
      return this._normalizeFormat(resultFormat);
    }
    return this._normalizeFormat(resultFormat);
  },
  getDateFormatByTicks: function(ticks) {
    var maxDiff;
    var currentDiff;
    var i;
    if (ticks.length > 1) {
      maxDiff = date_default.getDatesDifferences(ticks[0], ticks[1]);
      for (i = 1; i < ticks.length - 1; i++) {
        currentDiff = date_default.getDatesDifferences(ticks[i], ticks[i + 1]);
        if (maxDiff.count < currentDiff.count) {
          maxDiff = currentDiff;
        }
      }
    } else {
      maxDiff = {
        year: true,
        month: true,
        day: true,
        hour: ticks[0].getHours() > 0,
        minute: ticks[0].getMinutes() > 0,
        second: ticks[0].getSeconds() > 0,
        millisecond: ticks[0].getMilliseconds() > 0
      };
    }
    var resultFormat = this.getDateFormatByDifferences(maxDiff);
    return resultFormat;
  },
  getDateFormatByTickInterval: function(startValue, endValue, tickInterval) {
    var dateUnitInterval;
    var correctDateDifferences = function(dateDifferences2, tickInterval2, value2) {
      switch (tickInterval2) {
        case "year":
        case "quarter":
          dateDifferences2.month = value2;
        case "month":
          dateDifferences2.day = value2;
        case "week":
        case "day":
          dateDifferences2.hour = value2;
        case "hour":
          dateDifferences2.minute = value2;
        case "minute":
          dateDifferences2.second = value2;
        case "second":
          dateDifferences2.millisecond = value2;
      }
    };
    tickInterval = isString(tickInterval) ? tickInterval.toLowerCase() : tickInterval;
    var dateDifferences = date_default.getDatesDifferences(startValue, endValue);
    if (startValue !== endValue) {
      !function(differences, minDate, maxDate) {
        if (!maxDate.getMilliseconds() && maxDate.getSeconds()) {
          if (maxDate.getSeconds() - minDate.getSeconds() === 1) {
            differences.millisecond = true;
            differences.second = false;
          }
        } else if (!maxDate.getSeconds() && maxDate.getMinutes()) {
          if (maxDate.getMinutes() - minDate.getMinutes() === 1) {
            differences.second = true;
            differences.minute = false;
          }
        } else if (!maxDate.getMinutes() && maxDate.getHours()) {
          if (maxDate.getHours() - minDate.getHours() === 1) {
            differences.minute = true;
            differences.hour = false;
          }
        } else if (!maxDate.getHours() && maxDate.getDate() > 1) {
          if (maxDate.getDate() - minDate.getDate() === 1) {
            differences.hour = true;
            differences.day = false;
          }
        } else if (1 === maxDate.getDate() && maxDate.getMonth()) {
          if (maxDate.getMonth() - minDate.getMonth() === 1) {
            differences.day = true;
            differences.month = false;
          }
        } else if (!maxDate.getMonth() && maxDate.getFullYear()) {
          if (maxDate.getFullYear() - minDate.getFullYear() === 1) {
            differences.month = true;
            differences.year = false;
          }
        }
      }(dateDifferences, startValue > endValue ? endValue : startValue, startValue > endValue ? startValue : endValue);
    }
    dateUnitInterval = date_default.getDateUnitInterval(dateDifferences);
    correctDateDifferences(dateDifferences, dateUnitInterval, true);
    dateUnitInterval = date_default.getDateUnitInterval(tickInterval || "second");
    correctDateDifferences(dateDifferences, dateUnitInterval, false);
    dateDifferences[{
      week: "day"
    }[dateUnitInterval] || dateUnitInterval] = true;
    var resultFormat = this.getDateFormatByDifferences(dateDifferences);
    return resultFormat;
  }
});

// node_modules/devextreme/esm/core/component_registrator_callbacks.js
var component_registrator_callbacks_default = new MemorizedCallbacks();

// node_modules/devextreme/esm/core/utils/public_component.js
var COMPONENT_NAMES_DATA_KEY = "dxComponents";
var ANONYMOUS_COMPONENT_DATA_KEY = "dxPrivateComponent";
var componentNames = /* @__PURE__ */ new WeakMap();
var nextAnonymousComponent = 0;
var getName = function(componentClass, newName) {
  if (isDefined(newName)) {
    componentNames.set(componentClass, newName);
    return;
  }
  if (!componentNames.has(componentClass)) {
    var generatedName = ANONYMOUS_COMPONENT_DATA_KEY + nextAnonymousComponent++;
    componentNames.set(componentClass, generatedName);
    return generatedName;
  }
  return componentNames.get(componentClass);
};
function attachInstanceToElement($element, componentInstance, disposeFn) {
  var data3 = data($element.get(0));
  var name2 = getName(componentInstance.constructor);
  data3[name2] = componentInstance;
  if (disposeFn) {
    events_engine_default.one($element, removeEvent, function() {
      disposeFn.call(componentInstance);
    });
  }
  if (!data3[COMPONENT_NAMES_DATA_KEY]) {
    data3[COMPONENT_NAMES_DATA_KEY] = [];
  }
  data3[COMPONENT_NAMES_DATA_KEY].push(name2);
}
function getInstanceByElement($element, componentClass) {
  var name2 = getName(componentClass);
  return data($element.get(0), name2);
}

// node_modules/devextreme/esm/core/component_registrator.js
var registerComponent = function(name2, namespace, componentClass) {
  if (!componentClass) {
    componentClass = namespace;
  } else {
    namespace[name2] = componentClass;
  }
  getName(componentClass, name2);
  component_registrator_callbacks_default.fire(name2, componentClass);
};
var registerRendererComponent = function(name2, componentClass) {
  renderer_default.fn[name2] = function(options2) {
    var isMemberInvoke = "string" === typeof options2;
    var result2;
    if (isMemberInvoke) {
      var memberName = options2;
      var memberArgs = [].slice.call(arguments).slice(1);
      this.each(function() {
        var instance = componentClass.getInstance(this);
        if (!instance) {
          throw errors_default.Error("E0009", name2);
        }
        var member = instance[memberName];
        var memberValue = member.apply(instance, memberArgs);
        if (void 0 === result2) {
          result2 = memberValue;
        }
      });
    } else {
      this.each(function() {
        var instance = componentClass.getInstance(this);
        if (instance) {
          instance.option(options2);
        } else {
          new componentClass(this, options2);
        }
      });
      result2 = this;
    }
    return result2;
  };
};
component_registrator_callbacks_default.add(registerRendererComponent);
var component_registrator_default = registerComponent;

// node_modules/devextreme/esm/ui/themes_callback.js
var themeReadyCallback = callbacks_default();

// node_modules/devextreme/esm/ui/themes.js
var window11 = getWindow();
var ready3 = ready_callbacks_default.add;
var viewPort = value;
var viewPortChanged = changeCallback;
var initDeferred = new Deferred();
var DX_LINK_SELECTOR = "link[rel=dx-theme]";
var THEME_ATTR = "data-theme";
var ACTIVE_ATTR = "data-active";
var DX_HAIRLINES_CLASS = "dx-hairlines";
var ANY_THEME = "any";
var context;
var $activeThemeLink;
var knownThemes;
var currentThemeName;
var pendingThemeName;
var defaultTimeout = 15e3;
var THEME_MARKER_PREFIX = "dx.";
function readThemeMarker() {
  if (!hasWindow()) {
    return null;
  }
  var element = renderer_default("<div>", context).addClass("dx-theme-marker").appendTo(context.documentElement);
  var result2;
  try {
    result2 = window11.getComputedStyle(element.get(0)).fontFamily;
    if (!result2) {
      return null;
    }
    result2 = result2.replace(/["']/g, "");
    if (result2.substr(0, THEME_MARKER_PREFIX.length) !== THEME_MARKER_PREFIX) {
      return null;
    }
    return result2.substr(THEME_MARKER_PREFIX.length);
  } finally {
    element.remove();
  }
}
function waitForThemeLoad(themeName) {
  var waitStartTime;
  var timerId;
  var intervalCleared = true;
  pendingThemeName = themeName;
  function handleLoaded() {
    pendingThemeName = null;
    clearInterval(timerId);
    intervalCleared = true;
    themeReadyCallback.fire();
    themeReadyCallback.empty();
    initDeferred.resolve();
  }
  if (isPendingThemeLoaded() || !defaultTimeout) {
    handleLoaded();
  } else {
    if (!intervalCleared) {
      if (pendingThemeName) {
        pendingThemeName = themeName;
      }
      return;
    }
    waitStartTime = Date.now();
    intervalCleared = false;
    timerId = setInterval(function() {
      var isLoaded = isPendingThemeLoaded();
      var isTimeout = !isLoaded && Date.now() - waitStartTime > defaultTimeout;
      if (isTimeout) {
        ui_errors_default.log("W0004", pendingThemeName);
      }
      if (isLoaded || isTimeout) {
        handleLoaded();
      }
    }, 10);
  }
}
function isPendingThemeLoaded() {
  if (!pendingThemeName) {
    return true;
  }
  var anyThemePending = pendingThemeName === ANY_THEME;
  if ("resolved" === initDeferred.state() && anyThemePending) {
    return true;
  }
  var themeMarker = readThemeMarker();
  if (themeMarker && anyThemePending) {
    return true;
  }
  return themeMarker === pendingThemeName;
}
function processMarkup() {
  var $allThemeLinks = renderer_default(DX_LINK_SELECTOR, context);
  if (!$allThemeLinks.length) {
    return;
  }
  knownThemes = {};
  $activeThemeLink = renderer_default(parseHTML("<link rel=stylesheet>"), context);
  $allThemeLinks.each(function() {
    var link = renderer_default(this, context);
    var fullThemeName = link.attr(THEME_ATTR);
    var url = link.attr("href");
    var isActive = "true" === link.attr(ACTIVE_ATTR);
    knownThemes[fullThemeName] = {
      url,
      isActive
    };
  });
  $allThemeLinks.last().after($activeThemeLink);
  $allThemeLinks.remove();
}
function resolveFullThemeName(desiredThemeName) {
  var desiredThemeParts = desiredThemeName ? desiredThemeName.split(".") : [];
  var result2 = null;
  if (knownThemes) {
    if (desiredThemeName in knownThemes) {
      return desiredThemeName;
    }
    each(knownThemes, function(knownThemeName, themeData) {
      var knownThemeParts = knownThemeName.split(".");
      if (desiredThemeParts[0] && knownThemeParts[0] !== desiredThemeParts[0]) {
        return;
      }
      if (desiredThemeParts[1] && desiredThemeParts[1] !== knownThemeParts[1]) {
        return;
      }
      if (desiredThemeParts[2] && desiredThemeParts[2] !== knownThemeParts[2]) {
        return;
      }
      if (!result2 || themeData.isActive) {
        result2 = knownThemeName;
      }
      if (themeData.isActive) {
        return false;
      }
    });
  }
  return result2;
}
function initContext(newContext) {
  try {
    if (newContext !== context) {
      knownThemes = null;
    }
  } catch (x) {
    knownThemes = null;
  }
  context = newContext;
}
function init(options2) {
  options2 = options2 || {};
  initContext(options2.context || dom_adapter_default.getDocument());
  if (!context) {
    return;
  }
  processMarkup();
  currentThemeName = void 0;
  current(options2);
}
function current(options2) {
  if (!arguments.length) {
    currentThemeName = currentThemeName || readThemeMarker();
    return currentThemeName;
  }
  detachCssClasses(viewPort());
  options2 = options2 || {};
  if ("string" === typeof options2) {
    options2 = {
      theme: options2
    };
  }
  var isAutoInit = options2._autoInit;
  var loadCallback = options2.loadCallback;
  var currentThemeData;
  currentThemeName = resolveFullThemeName(options2.theme || currentThemeName);
  if (currentThemeName) {
    currentThemeData = knownThemes[currentThemeName];
  }
  if (loadCallback) {
    themeReadyCallback.add(loadCallback);
  }
  if (currentThemeData) {
    $activeThemeLink.attr("href", knownThemes[currentThemeName].url);
    if (themeReadyCallback.has() || "resolved" !== initDeferred.state() || options2._forceTimeout) {
      waitForThemeLoad(currentThemeName);
    }
  } else if (isAutoInit) {
    if (hasWindow()) {
      waitForThemeLoad(ANY_THEME);
    }
    themeReadyCallback.fire();
    themeReadyCallback.empty();
  } else {
    throw ui_errors_default.Error("E0021", currentThemeName);
  }
  initDeferred.done(() => attachCssClasses(originalViewPort(), currentThemeName));
}
function getCssClasses(themeName) {
  themeName = themeName || current();
  var result2 = [];
  var themeNameParts = themeName && themeName.split(".");
  if (themeNameParts) {
    result2.push("dx-theme-" + themeNameParts[0], "dx-theme-" + themeNameParts[0] + "-typography");
    if (themeNameParts.length > 1) {
      result2.push("dx-color-scheme-" + themeNameParts[1] + (isMaterialBased(themeName) ? "-" + themeNameParts[2] : ""));
    }
  }
  return result2;
}
var themeClasses;
function attachCssClasses(element, themeName) {
  themeClasses = getCssClasses(themeName).join(" ");
  renderer_default(element).addClass(themeClasses);
  !function() {
    var pixelRatio = hasWindow() && window11.devicePixelRatio;
    if (!pixelRatio || pixelRatio < 2) {
      return;
    }
    var $tester = renderer_default("<div>");
    $tester.css("border", ".5px solid transparent");
    renderer_default("body").append($tester);
    if (1 === getOuterHeight($tester)) {
      renderer_default(element).addClass(DX_HAIRLINES_CLASS);
      themeClasses += " " + DX_HAIRLINES_CLASS;
    }
    $tester.remove();
  }();
}
function detachCssClasses(element) {
  renderer_default(element).removeClass(themeClasses);
}
function isTheme(themeRegExp, themeName) {
  if (!themeName) {
    themeName = currentThemeName || readThemeMarker();
  }
  return new RegExp(themeRegExp).test(themeName);
}
function isMaterialBased(themeName) {
  return isMaterial(themeName) || isFluent(themeName);
}
function isMaterial(themeName) {
  return isTheme("material", themeName);
}
function isFluent(themeName) {
  return isTheme("fluent", themeName);
}
function isGeneric(themeName) {
  return isTheme("generic", themeName);
}
function isCompact(themeName) {
  return isTheme("compact", themeName);
}
function isWebFontLoaded(text, fontWeight) {
  var document2 = dom_adapter_default.getDocument();
  var testElement = document2.createElement("span");
  testElement.style.position = "absolute";
  testElement.style.top = "-9999px";
  testElement.style.left = "-9999px";
  testElement.style.visibility = "hidden";
  testElement.style.fontFamily = "Arial";
  testElement.style.fontSize = "250px";
  testElement.style.fontWeight = fontWeight;
  testElement.innerHTML = text;
  document2.body.appendChild(testElement);
  var etalonFontWidth = testElement.offsetWidth;
  testElement.style.fontFamily = "Roboto, RobotoFallback, Arial";
  var testedFontWidth = testElement.offsetWidth;
  testElement.parentNode.removeChild(testElement);
  return etalonFontWidth !== testedFontWidth;
}
function waitWebFont(text, fontWeight) {
  return new Promise((resolve) => {
    var clear = () => {
      clearInterval(intervalId);
      clearTimeout(timeoutId);
      resolve();
    };
    var intervalId = setInterval(() => {
      if (isWebFontLoaded(text, fontWeight)) {
        clear();
      }
    }, 15);
    var timeoutId = setTimeout(clear, 2e3);
  });
}
function autoInit() {
  init({
    _autoInit: true,
    _forceTimeout: true
  });
  if (renderer_default(DX_LINK_SELECTOR, context).length) {
    throw ui_errors_default.Error("E0022");
  }
}
if (hasWindow()) {
  autoInit();
} else {
  ready3(autoInit);
}
viewPortChanged.add(function(viewPort2, prevViewPort) {
  initDeferred.done(function() {
    detachCssClasses(prevViewPort);
    attachCssClasses(viewPort2);
  });
});
devices_default.changed.add(function() {
  init({
    _autoInit: true
  });
});

// node_modules/devextreme/esm/core/action.js
var Action = class _Action {
  constructor(action, config3) {
    config3 = config3 || {};
    this._action = action;
    this._context = config3.context || getWindow();
    this._beforeExecute = config3.beforeExecute;
    this._afterExecute = config3.afterExecute;
    this._component = config3.component;
    this._validatingTargetName = config3.validatingTargetName;
    var excludeValidators = this._excludeValidators = {};
    if (config3.excludeValidators) {
      for (var i = 0; i < config3.excludeValidators.length; i++) {
        excludeValidators[config3.excludeValidators[i]] = true;
      }
    }
  }
  execute() {
    var e = {
      action: this._action,
      args: Array.prototype.slice.call(arguments),
      context: this._context,
      component: this._component,
      validatingTargetName: this._validatingTargetName,
      cancel: false,
      handled: false
    };
    var beforeExecute = this._beforeExecute;
    var afterExecute = this._afterExecute;
    var argsBag = e.args[0] || {};
    if (!this._validateAction(e)) {
      return;
    }
    null === beforeExecute || void 0 === beforeExecute ? void 0 : beforeExecute.call(this._context, e);
    if (e.cancel) {
      return;
    }
    var result2 = this._executeAction(e);
    if (argsBag.cancel) {
      return;
    }
    null === afterExecute || void 0 === afterExecute ? void 0 : afterExecute.call(this._context, e);
    return result2;
  }
  _validateAction(e) {
    var excludeValidators = this._excludeValidators;
    var {
      executors
    } = _Action;
    for (var name2 in executors) {
      if (!excludeValidators[name2]) {
        var _executor$validate;
        var executor = executors[name2];
        null === (_executor$validate = executor.validate) || void 0 === _executor$validate ? void 0 : _executor$validate.call(executor, e);
        if (e.cancel) {
          return false;
        }
      }
    }
    return true;
  }
  _executeAction(e) {
    var result2;
    var {
      executors
    } = _Action;
    for (var name2 in executors) {
      var _executor$execute;
      var executor = executors[name2];
      null === (_executor$execute = executor.execute) || void 0 === _executor$execute ? void 0 : _executor$execute.call(executor, e);
      if (e.handled) {
        result2 = e.result;
        break;
      }
    }
    return result2;
  }
  static registerExecutor(name2, executor) {
    if (isPlainObject(name2)) {
      each(name2, _Action.registerExecutor);
      return;
    }
    _Action.executors[name2] = executor;
  }
  static unregisterExecutor() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    each(args, function() {
      delete _Action.executors[this];
    });
  }
};
Action.executors = {};
var createValidatorByTargetElement = (condition) => (e) => {
  if (!e.args.length) {
    return;
  }
  var args = e.args[0];
  var element = args[e.validatingTargetName] || args.element;
  if (element && condition(renderer_default(element))) {
    e.cancel = true;
  }
};
Action.registerExecutor({
  disabled: {
    validate: createValidatorByTargetElement(($target) => $target.is(".dx-state-disabled, .dx-state-disabled *"))
  },
  readOnly: {
    validate: createValidatorByTargetElement(($target) => $target.is(".dx-state-readonly, .dx-state-readonly *:not(.dx-state-independent)"))
  },
  undefined: {
    execute: (e) => {
      if (!e.action) {
        e.result = void 0;
        e.handled = true;
      }
    }
  },
  func: {
    execute: (e) => {
      if (isFunction(e.action)) {
        e.result = e.action.call(e.context, e.args[0]);
        e.handled = true;
      }
    }
  }
});

// node_modules/devextreme/esm/core/utils/comparator.js
var hasNegation = function(oldValue, newValue) {
  return 1 / oldValue === 1 / newValue;
};
var equals = function(oldValue, newValue) {
  oldValue = toComparable(oldValue, true);
  newValue = toComparable(newValue, true);
  if (oldValue && newValue && isRenderer(oldValue) && isRenderer(newValue)) {
    return newValue.is(oldValue);
  }
  var oldValueIsNaN = oldValue !== oldValue;
  var newValueIsNaN = newValue !== newValue;
  if (oldValueIsNaN && newValueIsNaN) {
    return true;
  }
  if (0 === oldValue && 0 === newValue) {
    return hasNegation(oldValue, newValue);
  }
  if (null === oldValue || "object" !== typeof oldValue || dom_adapter_default.isElementNode(oldValue)) {
    return oldValue === newValue;
  }
  return false;
};

// node_modules/devextreme/esm/core/options/utils.js
var cachedGetters = {};
var convertRulesToOptions = (rules) => {
  var currentDevice = devices_default.current();
  return rules.reduce((options2, _ref) => {
    var {
      device,
      options: ruleOptions
    } = _ref;
    var deviceFilter = device || {};
    var match2 = isFunction(deviceFilter) ? deviceFilter(currentDevice) : deviceMatch(currentDevice, deviceFilter);
    if (match2) {
      extend(true, options2, ruleOptions);
    }
    return options2;
  }, {});
};
var normalizeOptions = (options2, value2) => "string" !== typeof options2 ? options2 : {
  [options2]: value2
};
var deviceMatch = (device, filter) => isEmptyObject(filter) || findBestMatches(device, [filter]).length > 0;
var getFieldName = (fullName) => fullName.substr(fullName.lastIndexOf(".") + 1);
var getParentName = (fullName) => fullName.substr(0, fullName.lastIndexOf("."));
var getNestedOptionValue = function(optionsObject, name2) {
  cachedGetters[name2] = cachedGetters[name2] || compileGetter(name2);
  return cachedGetters[name2](optionsObject, {
    functionsAsIs: true
  });
};
var createDefaultOptionRules = function() {
  var options2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
  return options2;
};

// node_modules/devextreme/esm/core/options/option_manager.js
var cachedGetters2 = {};
var cachedSetters = {};
var OptionManager = class {
  constructor(options2, optionsByReference) {
    this._options = options2;
    this._optionsByReference = optionsByReference;
    this._changingCallback;
    this._changedCallback;
    this._namePreparedCallbacks;
  }
  _setByReference(options2, rulesOptions) {
    extend(true, options2, rulesOptions);
    for (var fieldName in this._optionsByReference) {
      if (Object.prototype.hasOwnProperty.call(rulesOptions, fieldName)) {
        options2[fieldName] = rulesOptions[fieldName];
      }
    }
  }
  _setPreparedValue(name2, value2, merge, silent) {
    var previousValue = this.get(this._options, name2, false);
    if (!equals(previousValue, value2)) {
      var path = getPathParts(name2);
      !silent && this._changingCallback(name2, previousValue, value2);
      cachedSetters[name2] = cachedSetters[name2] || compileSetter(name2);
      cachedSetters[name2](this._options, value2, {
        functionsAsIs: true,
        merge: isDefined(merge) ? merge : !this._optionsByReference[name2],
        unwrapObservables: path.length > 1 && !!this._optionsByReference[path[0]]
      });
      !silent && this._changedCallback(name2, value2, previousValue);
    }
  }
  _prepareRelevantNames(options2, name2, value2, silent) {
    if (isPlainObject(value2)) {
      for (var valueName in value2) {
        this._prepareRelevantNames(options2, "".concat(name2, ".").concat(valueName), value2[valueName]);
      }
    }
    this._namePreparedCallbacks(options2, name2, value2, silent);
  }
  get() {
    var options2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this._options;
    var name2 = arguments.length > 1 ? arguments[1] : void 0;
    var unwrapObservables = arguments.length > 2 ? arguments[2] : void 0;
    cachedGetters2[name2] = cachedGetters2[name2] || compileGetter(name2);
    return cachedGetters2[name2](options2, {
      functionsAsIs: true,
      unwrapObservables
    });
  }
  set(options2, value2, merge, silent) {
    options2 = normalizeOptions(options2, value2);
    for (var name2 in options2) {
      this._prepareRelevantNames(options2, name2, options2[name2], silent);
    }
    for (var _name in options2) {
      this._setPreparedValue(_name, options2[_name], merge, silent);
    }
  }
  onRelevantNamesPrepared(callBack) {
    this._namePreparedCallbacks = callBack;
  }
  onChanging(callBack) {
    this._changingCallback = callBack;
  }
  onChanged(callBack) {
    this._changedCallback = callBack;
  }
  dispose() {
    this._changingCallback = noop2;
    this._changedCallback = noop2;
  }
};

// node_modules/devextreme/esm/core/options/index.js
var Options = class {
  constructor(options2, defaultOptions3, optionsByReference, deprecatedOptions) {
    this._deprecatedCallback;
    this._startChangeCallback;
    this._endChangeCallback;
    this._default = defaultOptions3;
    this._deprecated = deprecatedOptions;
    this._deprecatedNames = [];
    this._initDeprecatedNames();
    this._optionManager = new OptionManager(options2, optionsByReference);
    this._optionManager.onRelevantNamesPrepared((options3, name2, value2, silent) => this._setRelevantNames(options3, name2, value2, silent));
    this._cachedOptions = {};
    this._rules = [];
  }
  set _initial(value2) {
    this._initialOptions = value2;
  }
  get _initial() {
    if (!this._initialOptions) {
      var rulesOptions = this._getByRules(this.silent("defaultOptionsRules"));
      this._initialOptions = this._default;
      this._optionManager._setByReference(this._initialOptions, rulesOptions);
    }
    return this._initialOptions;
  }
  _initDeprecatedNames() {
    for (var optionName in this._deprecated) {
      this._deprecatedNames.push(optionName);
    }
  }
  _getByRules(rules) {
    rules = Array.isArray(rules) ? this._rules.concat(rules) : this._rules;
    return convertRulesToOptions(rules);
  }
  _notifyDeprecated(option) {
    var info = this._deprecated[option];
    if (info) {
      this._deprecatedCallback(option, info);
    }
  }
  _setRelevantNames(options2, name2, value2, silent) {
    if (name2) {
      var normalizedName = this._normalizeName(name2, silent);
      if (normalizedName && normalizedName !== name2) {
        this._setField(options2, normalizedName, value2);
        this._clearField(options2, name2);
      }
    }
  }
  _setField(options2, fullName, value2) {
    var fieldName = "";
    var fieldObject = null;
    do {
      fieldName = fieldName ? ".".concat(fieldName) : "";
      fieldName = getFieldName(fullName) + fieldName;
      fullName = getParentName(fullName);
      fieldObject = fullName ? this._optionManager.get(options2, fullName, false) : options2;
    } while (!fieldObject);
    fieldObject[fieldName] = value2;
  }
  _clearField(options2, name2) {
    delete options2[name2];
    var previousFieldName = getParentName(name2);
    var fieldObject = previousFieldName ? this._optionManager.get(options2, previousFieldName, false) : options2;
    if (fieldObject) {
      delete fieldObject[getFieldName(name2)];
    }
  }
  _normalizeName(name2, silent) {
    if (this._deprecatedNames.length && name2) {
      for (var i = 0; i < this._deprecatedNames.length; i++) {
        if (this._deprecatedNames[i] === name2) {
          var deprecate = this._deprecated[name2];
          if (deprecate) {
            !silent && this._notifyDeprecated(name2);
            return deprecate.alias || name2;
          }
        }
      }
    }
    return name2;
  }
  addRules(rules) {
    this._rules = rules.concat(this._rules);
  }
  applyRules(rules) {
    var options2 = this._getByRules(rules);
    this.silent(options2);
  }
  dispose() {
    this._deprecatedCallback = noop2;
    this._startChangeCallback = noop2;
    this._endChangeCallback = noop2;
    this._optionManager.dispose();
  }
  onChanging(callBack) {
    this._optionManager.onChanging(callBack);
  }
  onChanged(callBack) {
    this._optionManager.onChanged(callBack);
  }
  onDeprecated(callBack) {
    this._deprecatedCallback = callBack;
  }
  onStartChange(callBack) {
    this._startChangeCallback = callBack;
  }
  onEndChange(callBack) {
    this._endChangeCallback = callBack;
  }
  isInitial(name2) {
    var value2 = this.silent(name2);
    var initialValue = this.initial(name2);
    var areFunctions = isFunction(value2) && isFunction(initialValue);
    return areFunctions ? value2.toString() === initialValue.toString() : equalByValue(value2, initialValue);
  }
  initial(name2) {
    return getNestedOptionValue(this._initial, name2);
  }
  option(options2, value2) {
    var isGetter = arguments.length < 2 && "object" !== type(options2);
    if (isGetter) {
      return this._optionManager.get(void 0, this._normalizeName(options2));
    } else {
      this._startChangeCallback();
      try {
        this._optionManager.set(options2, value2);
      } finally {
        this._endChangeCallback();
      }
    }
  }
  silent(options2, value2) {
    var isGetter = arguments.length < 2 && "object" !== type(options2);
    if (isGetter) {
      return this._optionManager.get(void 0, options2, void 0, true);
    } else {
      this._optionManager.set(options2, value2, void 0, true);
    }
  }
  reset(name2) {
    if (name2) {
      var fullPath = getPathParts(name2);
      var value2 = fullPath.reduce((value3, field) => value3 ? value3[field] : this.initial(field), null);
      var defaultValue = isObject(value2) ? _extends({}, value2) : value2;
      this._optionManager.set(name2, defaultValue, false);
    }
  }
  getAliasesByName(name2) {
    return Object.keys(this._deprecated).filter((aliasName) => name2 === this._deprecated[aliasName].alias);
  }
  isDeprecated(name2) {
    return Object.prototype.hasOwnProperty.call(this._deprecated, name2);
  }
  cache(name2, options2) {
    var isGetter = arguments.length < 2;
    if (isGetter) {
      return this._cachedOptions[name2];
    } else {
      this._cachedOptions[name2] = extend(this._cachedOptions[name2], options2);
    }
  }
};

// node_modules/devextreme/esm/core/postponed_operations.js
var PostponedOperations = class {
  constructor() {
    this._postponedOperations = {};
  }
  add(key, fn, postponedPromise) {
    if (key in this._postponedOperations) {
      postponedPromise && this._postponedOperations[key].promises.push(postponedPromise);
    } else {
      var completePromise = new Deferred();
      this._postponedOperations[key] = {
        fn,
        completePromise,
        promises: postponedPromise ? [postponedPromise] : []
      };
    }
    return this._postponedOperations[key].completePromise.promise();
  }
  callPostponedOperations() {
    for (var key in this._postponedOperations) {
      var operation = this._postponedOperations[key];
      if (isDefined(operation)) {
        if (operation.promises && operation.promises.length) {
          when(...operation.promises).done(operation.fn).then(operation.completePromise.resolve);
        } else {
          operation.fn().done(operation.completePromise.resolve);
        }
      }
    }
    this._postponedOperations = {};
  }
};

// node_modules/devextreme/esm/core/component.js
var getEventName = (actionName) => actionName.charAt(2).toLowerCase() + actionName.substr(3);
var isInnerOption = (optionName) => 0 === optionName.indexOf("_", 0);
var Component = class_default.inherit({
  _setDeprecatedOptions() {
    this._deprecatedOptions = {};
  },
  _getDeprecatedOptions() {
    return this._deprecatedOptions;
  },
  _getDefaultOptions: () => ({
    onInitialized: null,
    onOptionChanged: null,
    onDisposing: null,
    defaultOptionsRules: null
  }),
  _defaultOptionsRules: () => [],
  _setOptionsByDevice(rules) {
    this._options.applyRules(rules);
  },
  _convertRulesToOptions: (rules) => convertRulesToOptions(rules),
  _isInitialOptionValue(name2) {
    return this._options.isInitial(name2);
  },
  _setOptionsByReference() {
    this._optionsByReference = {};
  },
  _getOptionsByReference() {
    return this._optionsByReference;
  },
  ctor() {
    var options2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    var {
      _optionChangedCallbacks,
      _disposingCallbacks
    } = options2;
    this.NAME = getName(this.constructor);
    this._eventsStrategy = EventsStrategy.create(this, options2.eventsStrategy);
    this._updateLockCount = 0;
    this._optionChangedCallbacks = _optionChangedCallbacks || callbacks_default();
    this._disposingCallbacks = _disposingCallbacks || callbacks_default();
    this.postponedOperations = new PostponedOperations();
    this._createOptions(options2);
  },
  _createOptions(options2) {
    this.beginUpdate();
    try {
      this._setOptionsByReference();
      this._setDeprecatedOptions();
      this._options = new Options(this._getDefaultOptions(), this._getDefaultOptions(), this._getOptionsByReference(), this._getDeprecatedOptions());
      this._options.onChanging((name2, previousValue, value2) => this._initialized && this._optionChanging(name2, previousValue, value2));
      this._options.onDeprecated((option, info) => this._logDeprecatedOptionWarning(option, info));
      this._options.onChanged((name2, value2, previousValue) => this._notifyOptionChanged(name2, value2, previousValue));
      this._options.onStartChange(() => this.beginUpdate());
      this._options.onEndChange(() => this.endUpdate());
      this._options.addRules(this._defaultOptionsRules());
      if (options2 && options2.onInitializing) {
        options2.onInitializing.apply(this, [options2]);
      }
      this._setOptionsByDevice(options2.defaultOptionsRules);
      this._initOptions(options2);
    } finally {
      this.endUpdate();
    }
  },
  _initOptions(options2) {
    this.option(options2);
  },
  _init() {
    this._createOptionChangedAction();
    this.on("disposing", (args) => {
      this._disposingCallbacks.fireWith(this, [args]);
    });
  },
  _logDeprecatedOptionWarning(option, info) {
    var message = info.message || "Use the '".concat(info.alias, "' option instead");
    errors_default.log("W0001", this.NAME, option, info.since, message);
  },
  _logDeprecatedComponentWarning(since, alias) {
    errors_default.log("W0000", this.NAME, since, "Use the '".concat(alias, "' widget instead"));
  },
  _createOptionChangedAction() {
    this._optionChangedAction = this._createActionByOption("onOptionChanged", {
      excludeValidators: ["disabled", "readOnly"]
    });
  },
  _createDisposingAction() {
    this._disposingAction = this._createActionByOption("onDisposing", {
      excludeValidators: ["disabled", "readOnly"]
    });
  },
  _optionChanged(args) {
    switch (args.name) {
      case "onDisposing":
      case "onInitialized":
        break;
      case "onOptionChanged":
        this._createOptionChangedAction();
    }
  },
  _dispose() {
    this._optionChangedCallbacks.empty();
    this._createDisposingAction();
    this._disposingAction();
    this._eventsStrategy.dispose();
    this._options.dispose();
    this._disposed = true;
  },
  _lockUpdate() {
    this._updateLockCount++;
  },
  _unlockUpdate() {
    this._updateLockCount = Math.max(this._updateLockCount - 1, 0);
  },
  _isUpdateAllowed() {
    return 0 === this._updateLockCount;
  },
  _isInitializingRequired() {
    return !this._initializing && !this._initialized;
  },
  isInitialized() {
    return this._initialized;
  },
  _commitUpdate() {
    this.postponedOperations.callPostponedOperations();
    this._isInitializingRequired() && this._initializeComponent();
  },
  _initializeComponent() {
    this._initializing = true;
    try {
      this._init();
    } finally {
      this._initializing = false;
      this._lockUpdate();
      this._createActionByOption("onInitialized", {
        excludeValidators: ["disabled", "readOnly"]
      })();
      this._unlockUpdate();
      this._initialized = true;
    }
  },
  instance() {
    return this;
  },
  beginUpdate: function() {
    this._lockUpdate();
  },
  endUpdate: function() {
    this._unlockUpdate();
    this._isUpdateAllowed() && this._commitUpdate();
  },
  _optionChanging: noop2,
  _notifyOptionChanged(option, value2, previousValue) {
    if (this._initialized) {
      var optionNames = [option].concat(this._options.getAliasesByName(option));
      for (var i = 0; i < optionNames.length; i++) {
        var name2 = optionNames[i];
        var args = {
          name: getPathParts(name2)[0],
          fullName: name2,
          value: value2,
          previousValue
        };
        if (!isInnerOption(name2)) {
          this._optionChangedCallbacks.fireWith(this, [extend(this._defaultActionArgs(), args)]);
          this._optionChangedAction(extend({}, args));
        }
        if (!this._disposed && this._cancelOptionChange !== name2) {
          this._optionChanged(args);
        }
      }
    }
  },
  initialOption(name2) {
    return this._options.initial(name2);
  },
  _defaultActionConfig() {
    return {
      context: this,
      component: this
    };
  },
  _defaultActionArgs() {
    return {
      component: this
    };
  },
  _createAction(actionSource, config3) {
    var action;
    return (e) => {
      if (!isDefined(e)) {
        e = {};
      }
      if (!isPlainObject(e)) {
        e = {
          actionValue: e
        };
      }
      action = action || new Action(actionSource, extend({}, config3, this._defaultActionConfig()));
      return action.execute.call(action, extend(e, this._defaultActionArgs()));
    };
  },
  _createActionByOption(optionName, config3) {
    var _this = this;
    var action;
    var eventName;
    var actionFunc;
    config3 = extend({}, config3);
    var result2 = function() {
      if (!eventName) {
        config3 = config3 || {};
        if ("string" !== typeof optionName) {
          throw errors_default.Error("E0008");
        }
        if (0 === optionName.indexOf("on")) {
          eventName = getEventName(optionName);
        }
        actionFunc = _this.option(optionName);
      }
      if (!action && !actionFunc && !config3.beforeExecute && !config3.afterExecute && !_this._eventsStrategy.hasEvent(eventName)) {
        return;
      }
      if (!action) {
        var beforeExecute = config3.beforeExecute;
        config3.beforeExecute = function() {
          for (var _len2 = arguments.length, props = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            props[_key2] = arguments[_key2];
          }
          beforeExecute && beforeExecute.apply(_this, props);
          _this._eventsStrategy.fireEvent(eventName, props[0].args);
        };
        action = _this._createAction(actionFunc, config3);
      }
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      if (config_default().wrapActionsBeforeExecute) {
        var beforeActionExecute = _this.option("beforeActionExecute") || noop2;
        var wrappedAction = beforeActionExecute(_this, action, config3) || action;
        return wrappedAction.apply(_this, args);
      }
      return action.apply(_this, args);
    };
    if (config_default().wrapActionsBeforeExecute) {
      return result2;
    }
    var onActionCreated = this.option("onActionCreated") || noop2;
    return onActionCreated(this, result2, config3) || result2;
  },
  on(eventName, eventHandler) {
    this._eventsStrategy.on(eventName, eventHandler);
    return this;
  },
  off(eventName, eventHandler) {
    this._eventsStrategy.off(eventName, eventHandler);
    return this;
  },
  hasActionSubscription: function(actionName) {
    return !!this._options.silent(actionName) || this._eventsStrategy.hasEvent(getEventName(actionName));
  },
  isOptionDeprecated(name2) {
    return this._options.isDeprecated(name2);
  },
  _setOptionWithoutOptionChange(name2, value2) {
    this._cancelOptionChange = name2;
    this.option(name2, value2);
    this._cancelOptionChange = false;
  },
  _getOptionValue(name2, context2) {
    var value2 = this.option(name2);
    if (isFunction(value2)) {
      return value2.bind(context2)();
    }
    return value2;
  },
  option() {
    return this._options.option(...arguments);
  },
  resetOption(name2) {
    this.beginUpdate();
    this._options.reset(name2);
    this.endUpdate();
  }
});

// node_modules/devextreme/esm/events/visibility_change.js
var triggerVisibilityChangeEvent = function(eventName) {
  return function(element) {
    var $element = renderer_default(element || "body");
    var changeHandlers = $element.filter(".dx-visibility-change-handler").add($element.find(".dx-visibility-change-handler"));
    for (var i = 0; i < changeHandlers.length; i++) {
      events_engine_default.triggerHandler(changeHandlers[i], eventName);
    }
  };
};
var triggerShownEvent = triggerVisibilityChangeEvent("dxshown");
var triggerHidingEvent = triggerVisibilityChangeEvent("dxhiding");
var triggerResizeEvent = triggerVisibilityChangeEvent("dxresize");

// node_modules/devextreme/esm/core/templates/template_base.js
var renderedCallbacks = callbacks_default({
  syncStrategy: true
});
var TemplateBase = class {
  render(options2) {
    options2 = options2 || {};
    var onRendered = options2.onRendered;
    delete options2.onRendered;
    var $result;
    if (options2.renovated && options2.transclude && this._element) {
      $result = renderer_default("<div>").append(this._element).contents();
    } else {
      $result = this._renderCore(options2);
    }
    this._ensureResultInContainer($result, options2.container);
    renderedCallbacks.fire($result, options2.container);
    onRendered && onRendered();
    return $result;
  }
  _ensureResultInContainer($result, container) {
    if (!container) {
      return;
    }
    var $container = renderer_default(container);
    var resultInContainer = contains2($container.get(0), $result.get(0));
    $container.append($result);
    if (resultInContainer) {
      return;
    }
    var resultInBody = dom_adapter_default.getBody().contains($container.get(0));
    if (!resultInBody) {
      return;
    }
    triggerShownEvent($result);
  }
  _renderCore() {
    throw errors_default.Error("E0001");
  }
};

// node_modules/devextreme/esm/core/templates/function_template.js
var FunctionTemplate = class extends TemplateBase {
  constructor(render4) {
    super();
    this._render = render4;
  }
  _renderCore(options2) {
    return normalizeTemplateElement(this._render(options2));
  }
};

// node_modules/devextreme/esm/core/templates/empty_template.js
var EmptyTemplate = class extends TemplateBase {
  _renderCore() {
    return renderer_default();
  }
};

// node_modules/devextreme/esm/core/templates/child_default_template.js
var ChildDefaultTemplate = class extends TemplateBase {
  constructor(name2) {
    super();
    this.name = name2;
  }
};

// node_modules/devextreme/esm/core/templates/template_engine_registry.js
var templateEngines = {};
var currentTemplateEngine;
function registerTemplateEngine(name2, templateEngine) {
  templateEngines[name2] = templateEngine;
}
function setTemplateEngine(templateEngine) {
  if (isString(templateEngine)) {
    currentTemplateEngine = templateEngines[templateEngine];
    if (!currentTemplateEngine) {
      throw errors_default.Error("E0020", templateEngine);
    }
  } else {
    currentTemplateEngine = templateEngine;
  }
}
function getCurrentTemplateEngine() {
  return currentTemplateEngine;
}

// node_modules/devextreme/esm/core/templates/template.js
registerTemplateEngine("default", {
  compile: (element) => normalizeTemplateElement(element),
  render: (template, model, index2) => template.clone()
});
setTemplateEngine("default");
var Template = class extends TemplateBase {
  constructor(element) {
    super();
    this._element = element;
  }
  _renderCore(options2) {
    var transclude = options2.transclude;
    if (!transclude && !this._compiledTemplate) {
      this._compiledTemplate = getCurrentTemplateEngine().compile(this._element);
    }
    return renderer_default("<div>").append(transclude ? this._element : getCurrentTemplateEngine().render(this._compiledTemplate, options2.model, options2.index)).contents();
  }
  source() {
    return renderer_default(this._element).clone();
  }
};

// node_modules/devextreme/esm/core/utils/array.js
function createOccurrenceMap(array) {
  return array.reduce((map3, value2) => {
    var _map$get;
    var count = (null !== (_map$get = map3.get(value2)) && void 0 !== _map$get ? _map$get : 0) + 1;
    map3.set(value2, count);
    return map3;
  }, /* @__PURE__ */ new Map());
}
var wrapToArray = function(item) {
  return Array.isArray(item) ? item : [item];
};
var getUniqueValues = function(values) {
  return [...new Set(values)];
};
var removeDuplicates = function() {
  var from = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
  var toRemove = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
  var toRemoveMap = createOccurrenceMap(toRemove);
  return from.filter((value2) => {
    var occurrencesCount = toRemoveMap.get(value2);
    occurrencesCount && toRemoveMap.set(value2, occurrencesCount - 1);
    return !occurrencesCount;
  });
};
var normalizeIndexes = function(items, indexPropName, currentItem, needIndexCallback) {
  var indexedItems = {};
  var {
    useLegacyVisibleIndex
  } = config_default();
  var currentIndex = 0;
  var shouldUpdateIndex = (item) => !isDefined(item[indexPropName]) && (!needIndexCallback || needIndexCallback(item));
  items.forEach((item) => {
    var index2 = item[indexPropName];
    if (index2 >= 0) {
      indexedItems[index2] = indexedItems[index2] || [];
      if (item === currentItem) {
        indexedItems[index2].unshift(item);
      } else {
        indexedItems[index2].push(item);
      }
    } else {
      item[indexPropName] = void 0;
    }
  });
  if (!useLegacyVisibleIndex) {
    items.forEach((item) => {
      if (shouldUpdateIndex(item)) {
        while (indexedItems[currentIndex]) {
          currentIndex++;
        }
        indexedItems[currentIndex] = [item];
        currentIndex++;
      }
    });
  }
  currentIndex = 0;
  orderEach(indexedItems, function(index2, items2) {
    items2.forEach((item) => {
      if (index2 >= 0) {
        item[indexPropName] = currentIndex++;
      }
    });
  });
  if (useLegacyVisibleIndex) {
    items.forEach((item) => {
      if (shouldUpdateIndex(item)) {
        item[indexPropName] = currentIndex++;
      }
    });
  }
};
var groupBy = (array, getGroupName) => array.reduce((groupedResult, item) => {
  var _groupedResult$groupN;
  var groupName = getGroupName(item);
  groupedResult[groupName] = null !== (_groupedResult$groupN = groupedResult[groupName]) && void 0 !== _groupedResult$groupN ? _groupedResult$groupN : [];
  groupedResult[groupName].push(item);
  return groupedResult;
}, {});

// node_modules/devextreme/esm/core/utils/template_manager.js
var findTemplates = (element, name2) => {
  var templates = renderer_default(element).contents().filter("[".concat("data-options", '*="').concat(name2, '"]'));
  return [].slice.call(templates).map((element2) => {
    var optionsString = renderer_default(element2).attr("data-options") || "";
    return {
      element: element2,
      options: config_default().optionsParser(optionsString)[name2]
    };
  }).filter((template) => !!template.options);
};
var suitableTemplatesByName = (rawTemplates) => {
  var templatesMap = groupBy(rawTemplates, (template) => template.options.name);
  if (templatesMap[void 0]) {
    throw errors_default.Error("E0023");
  }
  var result2 = {};
  Object.keys(templatesMap).forEach((name2) => {
    var _findBestMatches$;
    var suitableTemplate = null === (_findBestMatches$ = findBestMatches(devices_default.current(), templatesMap[name2], (template) => template.options)[0]) || void 0 === _findBestMatches$ ? void 0 : _findBestMatches$.element;
    if (suitableTemplate) {
      result2[name2] = suitableTemplate;
    }
  });
  return result2;
};
var addOneRenderedCall = (template) => {
  var render4 = template.render.bind(template);
  return extend({}, template, {
    render(options2) {
      var templateResult = render4(options2);
      options2 && options2.onRendered && options2.onRendered();
      return templateResult;
    }
  });
};
var addPublicElementNormalization = (template) => {
  var render4 = template.render.bind(template);
  return extend({}, template, {
    render(options2) {
      var $container = renderer_default(options2.container);
      return render4(_extends({}, options2, {
        container: getPublicElement($container)
      }));
    }
  });
};
var getNormalizedTemplateArgs = (options2) => {
  var args = [];
  if ("model" in options2) {
    args.push(options2.model);
  }
  if ("index" in options2) {
    args.push(options2.index);
  }
  args.push(options2.container);
  return args;
};
var validateTemplateSource = (templateSource) => "string" === typeof templateSource ? normalizeTemplateElement(templateSource) : templateSource;
var templateKey = (templateSource) => isRenderer(templateSource) && templateSource[0] || templateSource;
var defaultCreateElement = (element) => new Template(element);
var acquireIntegrationTemplate = (templateSource, templates, isAsyncTemplate, skipTemplates) => {
  var integrationTemplate = null;
  if (!skipTemplates || -1 === skipTemplates.indexOf(templateSource)) {
    integrationTemplate = templates[templateSource];
    if (integrationTemplate && !(integrationTemplate instanceof TemplateBase)) {
      if (isFunction(integrationTemplate.render)) {
        integrationTemplate = addPublicElementNormalization(integrationTemplate);
      }
      if (!isAsyncTemplate) {
        integrationTemplate = addOneRenderedCall(integrationTemplate);
      }
    }
  }
  return integrationTemplate;
};
var acquireTemplate = (templateSource, createTemplate, templates, isAsyncTemplate, skipTemplates, defaultTemplates) => {
  if (null == templateSource) {
    return new EmptyTemplate();
  }
  if (templateSource instanceof ChildDefaultTemplate) {
    return defaultTemplates[templateSource.name];
  }
  if (templateSource instanceof TemplateBase) {
    return templateSource;
  }
  if (isFunction(templateSource.render) && !isRenderer(templateSource)) {
    return isAsyncTemplate ? templateSource : addOneRenderedCall(templateSource);
  }
  if (templateSource.nodeType || isRenderer(templateSource)) {
    return createTemplate(renderer_default(templateSource));
  }
  return acquireIntegrationTemplate(templateSource, templates, isAsyncTemplate, skipTemplates) || defaultTemplates[templateSource] || createTemplate(templateSource);
};

// node_modules/devextreme/esm/core/template_manager.js
var TEXT_NODE2 = 3;
var ANONYMOUS_TEMPLATE_NAME = "template";
var TEMPLATE_OPTIONS_NAME = "dxTemplate";
var TEMPLATE_WRAPPER_CLASS = "dx-template-wrapper";
var DX_POLYMORPH_WIDGET_TEMPLATE = new FunctionTemplate((_ref) => {
  var {
    model,
    parent
  } = _ref;
  var widgetName = model.widget;
  if (!widgetName) {
    return renderer_default();
  }
  var widgetElement = renderer_default("<div>");
  var widgetOptions = model.options || {};
  if (parent) {
    parent._createComponent(widgetElement, widgetName, widgetOptions);
  } else {
    widgetElement[widgetName](widgetOptions);
  }
  return widgetElement;
});
var TemplateManager = class {
  constructor(createElement2, anonymousTemplateName) {
    this._tempTemplates = [];
    this._defaultTemplates = {};
    this._anonymousTemplateName = anonymousTemplateName || ANONYMOUS_TEMPLATE_NAME;
    this._createElement = createElement2 || defaultCreateElement;
    this._createTemplateIfNeeded = this._createTemplateIfNeeded.bind(this);
  }
  static createDefaultOptions() {
    return {
      integrationOptions: {
        watchMethod: function(fn, callback) {
          var options2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
          if (!options2.skipImmediate) {
            callback(fn());
          }
          return noop2;
        },
        templates: {
          "dx-polymorph-widget": DX_POLYMORPH_WIDGET_TEMPLATE
        },
        useDeferUpdateForTemplates: true
      }
    };
  }
  get anonymousTemplateName() {
    return this._anonymousTemplateName;
  }
  addDefaultTemplates(templates) {
    this._defaultTemplates = extend({}, this._defaultTemplates, templates);
  }
  dispose() {
    this._tempTemplates.forEach((tempTemplate) => {
      tempTemplate.template.dispose && tempTemplate.template.dispose();
    });
    this._tempTemplates = [];
  }
  extractTemplates($el) {
    var templates = this._extractTemplates($el);
    var anonymousTemplateMeta = this._extractAnonymousTemplate($el);
    return {
      templates,
      anonymousTemplateMeta
    };
  }
  _extractTemplates($el) {
    var templates = findTemplates($el, TEMPLATE_OPTIONS_NAME);
    var suitableTemplates = suitableTemplatesByName(templates);
    templates.forEach((_ref2) => {
      var {
        element,
        options: {
          name: name2
        }
      } = _ref2;
      if (element === suitableTemplates[name2]) {
        renderer_default(element).addClass(TEMPLATE_WRAPPER_CLASS).detach();
      } else {
        renderer_default(element).remove();
      }
    });
    return Object.keys(suitableTemplates).map((name2) => ({
      name: name2,
      template: this._createTemplate(suitableTemplates[name2])
    }));
  }
  _extractAnonymousTemplate($el) {
    var $anonymousTemplate = $el.contents().detach();
    var $notJunkTemplateContent = $anonymousTemplate.filter((_, element) => {
      var isTextNode = element.nodeType === TEXT_NODE2;
      var isEmptyText = renderer_default(element).text().trim().length < 1;
      return !(isTextNode && isEmptyText);
    });
    return $notJunkTemplateContent.length > 0 ? {
      template: this._createTemplate($anonymousTemplate),
      name: this._anonymousTemplateName
    } : {};
  }
  _createTemplateIfNeeded(templateSource) {
    var cachedTemplate = this._tempTemplates.filter((tempTemplate) => tempTemplate.source === templateKey(templateSource))[0];
    if (cachedTemplate) {
      return cachedTemplate.template;
    }
    var template = this._createTemplate(templateSource);
    this._tempTemplates.push({
      template,
      source: templateKey(templateSource)
    });
    return template;
  }
  _createTemplate(templateSource) {
    return this._createElement(validateTemplateSource(templateSource));
  }
  getTemplate(templateSource, templates, _ref3, context2) {
    var {
      isAsyncTemplate,
      skipTemplates
    } = _ref3;
    if (!isFunction(templateSource)) {
      return acquireTemplate(templateSource, this._createTemplateIfNeeded, templates, isAsyncTemplate, skipTemplates, this._defaultTemplates);
    }
    return new FunctionTemplate((options2) => {
      var templateSourceResult = templateSource.apply(context2, getNormalizedTemplateArgs(options2));
      if (!isDefined(templateSourceResult)) {
        return new EmptyTemplate();
      }
      var dispose = false;
      var template = acquireTemplate(templateSourceResult, (templateSource2) => {
        if (templateSource2.nodeType || isRenderer(templateSource2) && !renderer_default(templateSource2).is("script")) {
          return new FunctionTemplate(() => templateSource2);
        }
        dispose = true;
        return this._createTemplate(templateSource2);
      }, templates, isAsyncTemplate, skipTemplates, this._defaultTemplates);
      var result2 = template.render(options2);
      dispose && template.dispose && template.dispose();
      return result2;
    });
  }
};

// node_modules/devextreme/esm/events/core/keyboard_processor.js
var COMPOSITION_START_EVENT = "compositionstart";
var COMPOSITION_END_EVENT = "compositionend";
var KEYDOWN_EVENT = "keydown";
var NAMESPACE = "KeyboardProcessor";
var createKeyDownOptions = (e) => ({
  keyName: normalizeKeyName(e),
  key: e.key,
  code: e.code,
  ctrl: e.ctrlKey,
  location: e.location,
  metaKey: e.metaKey,
  shift: e.shiftKey,
  alt: e.altKey,
  which: e.which,
  originalEvent: e
});
var KeyboardProcessor = class_default.inherit({
  _keydown: addNamespace2(KEYDOWN_EVENT, NAMESPACE),
  _compositionStart: addNamespace2(COMPOSITION_START_EVENT, NAMESPACE),
  _compositionEnd: addNamespace2(COMPOSITION_END_EVENT, NAMESPACE),
  ctor: function(options2) {
    options2 = options2 || {};
    if (options2.element) {
      this._element = renderer_default(options2.element);
    }
    if (options2.focusTarget) {
      this._focusTarget = options2.focusTarget;
    }
    this._handler = options2.handler;
    if (this._element) {
      this._processFunction = (e) => {
        var focusTargets = renderer_default(this._focusTarget).toArray();
        var isNotFocusTarget = this._focusTarget && this._focusTarget !== e.target && !focusTargets.includes(e.target);
        var shouldSkipProcessing = this._isComposingJustFinished && 229 === e.which || this._isComposing || isNotFocusTarget;
        this._isComposingJustFinished = false;
        if (!shouldSkipProcessing) {
          this.process(e);
        }
      };
      this._toggleProcessingWithContext = this.toggleProcessing.bind(this);
      events_engine_default.on(this._element, this._keydown, this._processFunction);
      events_engine_default.on(this._element, this._compositionStart, this._toggleProcessingWithContext);
      events_engine_default.on(this._element, this._compositionEnd, this._toggleProcessingWithContext);
    }
  },
  dispose: function() {
    if (this._element) {
      events_engine_default.off(this._element, this._keydown, this._processFunction);
      events_engine_default.off(this._element, this._compositionStart, this._toggleProcessingWithContext);
      events_engine_default.off(this._element, this._compositionEnd, this._toggleProcessingWithContext);
    }
    this._element = void 0;
    this._handler = void 0;
  },
  process: function(e) {
    this._handler(createKeyDownOptions(e));
  },
  toggleProcessing: function(_ref) {
    var {
      type: type2
    } = _ref;
    this._isComposing = type2 === COMPOSITION_START_EVENT;
    this._isComposingJustFinished = !this._isComposing;
  }
});
KeyboardProcessor.createKeyDownOptions = createKeyDownOptions;
var keyboard_processor_default = KeyboardProcessor;

// node_modules/devextreme/esm/events/short.js
function addNamespace3(event, namespace) {
  return namespace ? addNamespace2(event, namespace) : event;
}
function executeAction(action, args) {
  return "function" === typeof action ? action(args) : action.execute(args);
}
var active = {
  on: ($el, active2, inactive, opts) => {
    var {
      selector,
      showTimeout,
      hideTimeout,
      namespace
    } = opts;
    events_engine_default.on($el, addNamespace3("dxactive", namespace), selector, {
      timeout: showTimeout
    }, (event) => executeAction(active2, {
      event,
      element: event.currentTarget
    }));
    events_engine_default.on($el, addNamespace3("dxinactive", namespace), selector, {
      timeout: hideTimeout
    }, (event) => executeAction(inactive, {
      event,
      element: event.currentTarget
    }));
  },
  off: ($el, _ref) => {
    var {
      namespace,
      selector
    } = _ref;
    events_engine_default.off($el, addNamespace3("dxactive", namespace), selector);
    events_engine_default.off($el, addNamespace3("dxinactive", namespace), selector);
  }
};
var resize = {
  on: function($el, resize2) {
    var {
      namespace
    } = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
    events_engine_default.on($el, addNamespace3("dxresize", namespace), resize2);
  },
  off: function($el) {
    var {
      namespace
    } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    events_engine_default.off($el, addNamespace3("dxresize", namespace));
  }
};
var hover = {
  on: ($el, start, end, _ref2) => {
    var {
      selector,
      namespace
    } = _ref2;
    events_engine_default.on($el, addNamespace3("dxhoverend", namespace), selector, (event) => end(event));
    events_engine_default.on($el, addNamespace3("dxhoverstart", namespace), selector, (event) => executeAction(start, {
      element: event.target,
      event
    }));
  },
  off: ($el, _ref3) => {
    var {
      selector,
      namespace
    } = _ref3;
    events_engine_default.off($el, addNamespace3("dxhoverstart", namespace), selector);
    events_engine_default.off($el, addNamespace3("dxhoverend", namespace), selector);
  }
};
var visibility = {
  on: ($el, shown, hiding, _ref4) => {
    var {
      namespace
    } = _ref4;
    events_engine_default.on($el, addNamespace3("dxhiding", namespace), hiding);
    events_engine_default.on($el, addNamespace3("dxshown", namespace), shown);
  },
  off: ($el, _ref5) => {
    var {
      namespace
    } = _ref5;
    events_engine_default.off($el, addNamespace3("dxhiding", namespace));
    events_engine_default.off($el, addNamespace3("dxshown", namespace));
  }
};
var focus = {
  on: ($el, focusIn, focusOut, _ref6) => {
    var {
      namespace
    } = _ref6;
    events_engine_default.on($el, addNamespace3("focusin", namespace), focusIn);
    events_engine_default.on($el, addNamespace3("focusout", namespace), focusOut);
  },
  off: ($el, _ref7) => {
    var {
      namespace
    } = _ref7;
    events_engine_default.off($el, addNamespace3("focusin", namespace));
    events_engine_default.off($el, addNamespace3("focusout", namespace));
  },
  trigger: ($el) => events_engine_default.trigger($el, "focus")
};
var dxClick = {
  on: function($el, click2) {
    var {
      namespace
    } = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
    events_engine_default.on($el, addNamespace3("dxclick", namespace), click2);
  },
  off: function($el) {
    var {
      namespace
    } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    events_engine_default.off($el, addNamespace3("dxclick", namespace));
  }
};
var click = {
  on: function($el, click2) {
    var {
      namespace
    } = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
    events_engine_default.on($el, addNamespace3("click", namespace), click2);
  },
  off: function($el) {
    var {
      namespace
    } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    events_engine_default.off($el, addNamespace3("click", namespace));
  }
};
var index = 0;
var keyboardProcessors = {};
var generateListenerId = () => "keyboardProcessorId".concat(index++);
var keyboard = {
  on: (element, focusTarget, handler) => {
    var listenerId = generateListenerId();
    keyboardProcessors[listenerId] = new keyboard_processor_default({
      element,
      focusTarget,
      handler
    });
    return listenerId;
  },
  off: (listenerId) => {
    if (listenerId && keyboardProcessors[listenerId]) {
      keyboardProcessors[listenerId].dispose();
      delete keyboardProcessors[listenerId];
    }
  },
  _getProcessor: (listenerId) => keyboardProcessors[listenerId]
};

// node_modules/devextreme/esm/__internal/core/license/byte_utils.js
function base64ToBytes(base64) {
  return new Uint8Array(atob(base64).split("").map((s) => s.charCodeAt(0)));
}
function hexToBytes(string) {
  var _a2, _b2;
  return new Uint8Array(null !== (_b2 = null === (_a2 = string.match(/.{1,2}/g)) || void 0 === _a2 ? void 0 : _a2.map((byte) => parseInt(byte, 16))) && void 0 !== _b2 ? _b2 : []);
}
function stringToBytes(string) {
  var bytes = new Uint8Array(string.length);
  for (var k = 0; k < string.length; k += 1) {
    bytes[k] = 255 & string.charCodeAt(k);
  }
  return bytes;
}
function wordsToBytes(words) {
  var bytes = new Uint8Array(4 * words.length);
  for (var k = 0; k < bytes.length; k += 1) {
    bytes[k] = words[k >> 2] >>> 8 * (3 - k % 4);
  }
  return bytes;
}
function bytesToWords(bytes) {
  var words = new Uint32Array(1 + (bytes.length - 1 >> 2));
  for (var k = 0; k < bytes.length; k += 1) {
    words[k >> 2] |= bytes[k] << 8 * (3 - k % 4);
  }
  return words;
}
function leftRotate(x, n) {
  return (x << n | x >>> 32 - n) >>> 0;
}
function concatBytes(a, b) {
  var result2 = new Uint8Array(a.length + b.length);
  result2.set(a, 0);
  result2.set(b, a.length);
  return result2;
}

// node_modules/devextreme/esm/__internal/core/license/key.js
var PUBLIC_KEY = {
  e: 65537,
  n: new Uint8Array([200, 219, 153, 203, 140, 7, 228, 253, 193, 243, 62, 137, 139, 60, 68, 242, 48, 142, 113, 88, 185, 235, 253, 105, 80, 74, 32, 170, 96, 74, 111, 250, 7, 205, 154, 3, 146, 115, 153, 53, 45, 132, 123, 56, 61, 208, 184, 201, 63, 24, 109, 223, 0, 179, 169, 102, 139, 224, 73, 233, 45, 173, 138, 66, 98, 88, 69, 76, 177, 111, 113, 218, 192, 33, 101, 152, 25, 134, 34, 173, 32, 82, 230, 44, 247, 200, 253, 170, 192, 246, 30, 12, 96, 205, 100, 249, 181, 93, 0, 231])
};
var INTERNAL_USAGE_ID = "2D293FRQFEus9BTrBCkD5A";

// node_modules/devextreme/esm/__internal/core/license/pkcs1.js
var ASN1_SHA1 = "3021300906052b0e03021a05000414";
function pad(hash) {
  var dataLength = (8 * PUBLIC_KEY.n.length + 6) / 8;
  var data3 = concatBytes(hexToBytes(ASN1_SHA1), hash);
  if (data3.length + 10 > dataLength) {
    throw Error("Key is too short for SHA1 signing algorithm");
  }
  var padding = new Uint8Array(dataLength - data3.length);
  padding.fill(255, 0, padding.length - 1);
  padding[0] = 0;
  padding[1] = 1;
  padding[padding.length - 1] = 0;
  return concatBytes(padding, data3);
}

// node_modules/devextreme/esm/__internal/core/license/rsa_bigint.js
function compareSignatures(args) {
  try {
    var zero = BigInt(0);
    var one2 = BigInt(1);
    var eight = BigInt(8);
    var bigIntFromBytes = (bytes) => bytes.reduce((acc, cur) => (acc << eight) + BigInt(cur), zero);
    var actual = bigIntFromBytes(args.actual);
    var signature = bigIntFromBytes(args.signature);
    var exponent = BigInt(args.key.e);
    var modulus = bigIntFromBytes(args.key.n);
    var expected = ((base2, exponent2, modulus2) => {
      var result2 = one2;
      var b = base2;
      var e = exponent2;
      while (e) {
        if (e & one2) {
          result2 = result2 * b % modulus2;
        }
        b = b * b % modulus2;
        e >>= one2;
      }
      return result2;
    })(signature, exponent, modulus);
    return expected === actual;
  } catch (_a2) {
    return true;
  }
}

// node_modules/devextreme/esm/__internal/core/license/sha1.js
function preprocess(text) {
  var bytes = new Uint8Array(text.length + 1);
  bytes.set(stringToBytes(text));
  bytes[bytes.length - 1] = 128;
  var words = bytesToWords(new Uint8Array(bytes));
  var result2 = new Uint32Array(16 * Math.ceil((words.length + 2) / 16));
  result2.set(words, 0);
  result2[result2.length - 1] = 8 * (bytes.length - 1);
  return result2;
}
function sha1(text) {
  var message = preprocess(text);
  var h2 = new Uint32Array([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
  for (var i = 0; i < message.length; i += 16) {
    var w = new Uint32Array(80);
    for (var j = 0; j < 16; j += 1) {
      w[j] = message[i + j];
    }
    for (var _j = 16; _j < 80; _j += 1) {
      var n = w[_j - 3] ^ w[_j - 8] ^ w[_j - 14] ^ w[_j - 16];
      w[_j] = n << 1 | n >>> 31;
    }
    var a = h2[0];
    var b = h2[1];
    var c = h2[2];
    var d = h2[3];
    var e = h2[4];
    for (var _j2 = 0; _j2 < 80; _j2 += 1) {
      var [f, k] = _j2 < 20 ? [b & c | ~b & d, 1518500249] : _j2 < 40 ? [b ^ c ^ d, 1859775393] : _j2 < 60 ? [b & c | b & d | c & d, 2400959708] : [b ^ c ^ d, 3395469782];
      var temp = leftRotate(a, 5) + f + e + k + w[_j2];
      e = d;
      d = c;
      c = leftRotate(b, 30);
      b = a;
      a = temp;
    }
    h2[0] += a;
    h2[1] += b;
    h2[2] += c;
    h2[3] += d;
    h2[4] += e;
  }
  return wordsToBytes(h2);
}

// node_modules/devextreme/esm/__internal/core/license/types.js
var TokenKind;
!function(TokenKind2) {
  TokenKind2.corrupted = "corrupted";
  TokenKind2.verified = "verified";
  TokenKind2.internal = "internal";
}(TokenKind || (TokenKind = {}));

// node_modules/devextreme/esm/__internal/core/license/license_validation.js
var __rest2 = function(s, e) {
  var t = {};
  for (var p2 in s) {
    if (Object.prototype.hasOwnProperty.call(s, p2) && e.indexOf(p2) < 0) {
      t[p2] = s[p2];
    }
  }
  if (null != s && "function" === typeof Object.getOwnPropertySymbols) {
    var i = 0;
    for (p2 = Object.getOwnPropertySymbols(s); i < p2.length; i++) {
      if (e.indexOf(p2[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p2[i])) {
        t[p2[i]] = s[p2[i]];
      }
    }
  }
  return t;
};
var SPLITTER = ".";
var FORMAT = 1;
var RTM_MIN_PATCH_VERSION = 3;
var GENERAL_ERROR = {
  kind: TokenKind.corrupted,
  error: "general"
};
var VERIFICATION_ERROR = {
  kind: TokenKind.corrupted,
  error: "verification"
};
var DECODING_ERROR = {
  kind: TokenKind.corrupted,
  error: "decoding"
};
var DESERIALIZATION_ERROR = {
  kind: TokenKind.corrupted,
  error: "deserialization"
};
var PAYLOAD_ERROR = {
  kind: TokenKind.corrupted,
  error: "payload"
};
var VERSION_ERROR = {
  kind: TokenKind.corrupted,
  error: "version"
};
var validationPerformed = false;
function verifySignature(_ref) {
  var {
    text,
    signature: encodedSignature
  } = _ref;
  return compareSignatures({
    key: PUBLIC_KEY,
    signature: base64ToBytes(encodedSignature),
    actual: pad(sha1(text))
  });
}
function parseLicenseKey(encodedKey) {
  if (void 0 === encodedKey) {
    return GENERAL_ERROR;
  }
  var parts = encodedKey.split(SPLITTER);
  if (2 !== parts.length || 0 === parts[0].length || 0 === parts[1].length) {
    return GENERAL_ERROR;
  }
  if (!verifySignature({
    text: parts[0],
    signature: parts[1]
  })) {
    return VERIFICATION_ERROR;
  }
  var decodedPayload = "";
  try {
    decodedPayload = atob(parts[0]);
  } catch (_a2) {
    return DECODING_ERROR;
  }
  var payload = {};
  try {
    payload = JSON.parse(decodedPayload);
  } catch (_b2) {
    return DESERIALIZATION_ERROR;
  }
  var {
    customerId,
    maxVersionAllowed,
    format: format2,
    internalUsageId
  } = payload, rest = __rest2(payload, ["customerId", "maxVersionAllowed", "format", "internalUsageId"]);
  if (void 0 !== internalUsageId) {
    return {
      kind: TokenKind.internal,
      internalUsageId
    };
  }
  if (void 0 === customerId || void 0 === maxVersionAllowed || void 0 === format2) {
    return PAYLOAD_ERROR;
  }
  if (format2 !== FORMAT) {
    return VERSION_ERROR;
  }
  return {
    kind: TokenKind.verified,
    payload: _extends({
      customerId,
      maxVersionAllowed
    }, rest)
  };
}
function getLicenseCheckParams(_ref2) {
  var {
    licenseKey,
    version: version2
  } = _ref2;
  var preview = false;
  try {
    var [major, minor, patch2] = version2.split(".").map(Number);
    preview = isNaN(patch2) || patch2 < RTM_MIN_PATCH_VERSION;
    if (!licenseKey) {
      return {
        preview,
        error: "W0019"
      };
    }
    var license = parseLicenseKey(licenseKey);
    if (license.kind === TokenKind.corrupted) {
      return {
        preview,
        error: "W0021"
      };
    }
    if (license.kind === TokenKind.internal) {
      return {
        preview,
        internal: true,
        error: license.internalUsageId === INTERNAL_USAGE_ID ? void 0 : "W0020"
      };
    }
    if (!(major && minor)) {
      return {
        preview,
        error: "W0021"
      };
    }
    if (10 * major + minor > license.payload.maxVersionAllowed) {
      return {
        preview,
        error: "W0020"
      };
    }
    return {
      preview,
      error: void 0
    };
  } catch (_a2) {
    return {
      preview,
      error: "W0021"
    };
  }
}
function validateLicense(licenseKey) {
  var version2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : version;
  if (validationPerformed) {
    return;
  }
  validationPerformed = true;
  var {
    preview,
    internal,
    error
  } = getLicenseCheckParams({
    licenseKey,
    version: version2
  });
  if (error) {
    errors_default.log(preview ? "W0022" : error);
    return;
  }
  if (preview && !internal) {
    errors_default.log("W0022");
  }
}
function peekValidationPerformed() {
  return validationPerformed;
}
var license_validation_default = {
  validateLicense
};

// node_modules/devextreme/esm/core/dom_component.js
var {
  abstract: abstract3
} = Component;
var DOMComponent = Component.inherit({
  _getDefaultOptions() {
    return extend(this.callBase(), {
      width: void 0,
      height: void 0,
      rtlEnabled: config_default().rtlEnabled,
      elementAttr: {},
      disabled: false,
      integrationOptions: {}
    }, this._useTemplates() ? TemplateManager.createDefaultOptions() : {});
  },
  ctor(element, options2) {
    this._customClass = null;
    this._createElement(element);
    attachInstanceToElement(this._$element, this, this._dispose);
    this.callBase(options2);
    var validationAlreadyPerformed = peekValidationPerformed();
    license_validation_default.validateLicense(config_default().licenseKey);
    if (!validationAlreadyPerformed && peekValidationPerformed()) {
      config_default({
        licenseKey: ""
      });
    }
  },
  _createElement(element) {
    this._$element = renderer_default(element);
  },
  _getSynchronizableOptionsForCreateComponent: () => ["rtlEnabled", "disabled", "templatesRenderAsynchronously"],
  _checkFunctionValueDeprecation: function(optionNames) {
    if (!this.option("_ignoreFunctionValueDeprecation")) {
      optionNames.forEach((optionName) => {
        if (isFunction(this.option(optionName))) {
          errors_default.log("W0017", optionName);
        }
      });
    }
  },
  _visibilityChanged: abstract3,
  _dimensionChanged: abstract3,
  _init() {
    this.callBase();
    this._checkFunctionValueDeprecation(["width", "height", "maxHeight", "maxWidth", "minHeight", "minWidth", "popupHeight", "popupWidth"]);
    this._attachWindowResizeCallback();
    this._initTemplateManager();
  },
  _setOptionsByDevice(instanceCustomRules) {
    this.callBase([].concat(this.constructor._classCustomRules || [], instanceCustomRules || []));
  },
  _isInitialOptionValue(name2) {
    var isCustomOption = this.constructor._classCustomRules && Object.prototype.hasOwnProperty.call(this._convertRulesToOptions(this.constructor._classCustomRules), name2);
    return !isCustomOption && this.callBase(name2);
  },
  _attachWindowResizeCallback() {
    if (this._isDimensionChangeSupported()) {
      var windowResizeCallBack = this._windowResizeCallBack = this._dimensionChanged.bind(this);
      resize_callbacks_default.add(windowResizeCallBack);
    }
  },
  _isDimensionChangeSupported() {
    return this._dimensionChanged !== abstract3;
  },
  _renderComponent() {
    this._initMarkup();
    hasWindow() && this._render();
  },
  _initMarkup() {
    var {
      rtlEnabled
    } = this.option() || {};
    this._renderElementAttributes();
    this._toggleRTLDirection(rtlEnabled);
    this._renderVisibilityChange();
    this._renderDimensions();
  },
  _render() {
    this._attachVisibilityChangeHandlers();
    addShadowDomStyles(this.$element());
  },
  _renderElementAttributes() {
    var {
      elementAttr
    } = this.option() || {};
    var attributes = extend({}, elementAttr);
    var classNames2 = attributes.class;
    delete attributes.class;
    this.$element().attr(attributes).removeClass(this._customClass).addClass(classNames2);
    this._customClass = classNames2;
  },
  _renderVisibilityChange() {
    if (this._isDimensionChangeSupported()) {
      this._attachDimensionChangeHandlers();
    }
    if (this._isVisibilityChangeSupported()) {
      var $element = this.$element();
      $element.addClass("dx-visibility-change-handler");
    }
  },
  _renderDimensions() {
    var $element = this.$element();
    var element = $element.get(0);
    var width = this._getOptionValue("width", element);
    var height = this._getOptionValue("height", element);
    if (this._isCssUpdateRequired(element, height, width)) {
      $element.css({
        width: null === width ? "" : width,
        height: null === height ? "" : height
      });
    }
  },
  _isCssUpdateRequired: (element, height, width) => !!(isDefined(width) || isDefined(height) || element.style.width || element.style.height),
  _attachDimensionChangeHandlers() {
    var $el = this.$element();
    var namespace = "".concat(this.NAME, "VisibilityChange");
    resize.off($el, {
      namespace
    });
    resize.on($el, () => this._dimensionChanged(), {
      namespace
    });
  },
  _attachVisibilityChangeHandlers() {
    if (this._isVisibilityChangeSupported()) {
      var $el = this.$element();
      var namespace = "".concat(this.NAME, "VisibilityChange");
      this._isHidden = !this._isVisible();
      visibility.off($el, {
        namespace
      });
      visibility.on($el, () => this._checkVisibilityChanged("shown"), () => this._checkVisibilityChanged("hiding"), {
        namespace
      });
    }
  },
  _isVisible() {
    var $element = this.$element();
    return $element.is(":visible");
  },
  _checkVisibilityChanged(action) {
    var isVisible2 = this._isVisible();
    if (isVisible2) {
      if ("hiding" === action && !this._isHidden) {
        this._visibilityChanged(false);
        this._isHidden = true;
      } else if ("shown" === action && this._isHidden) {
        this._isHidden = false;
        this._visibilityChanged(true);
      }
    }
  },
  _isVisibilityChangeSupported() {
    return this._visibilityChanged !== abstract3 && hasWindow();
  },
  _clean: noop2,
  _modelByElement() {
    var {
      modelByElement
    } = this.option();
    var $element = this.$element();
    return modelByElement ? modelByElement($element) : void 0;
  },
  _invalidate() {
    if (this._isUpdateAllowed()) {
      throw errors_default.Error("E0007");
    }
    this._requireRefresh = true;
  },
  _refresh() {
    this._clean();
    this._renderComponent();
  },
  _dispose() {
    this._templateManager && this._templateManager.dispose();
    this.callBase();
    this._clean();
    this._detachWindowResizeCallback();
  },
  _detachWindowResizeCallback() {
    if (this._isDimensionChangeSupported()) {
      resize_callbacks_default.remove(this._windowResizeCallBack);
    }
  },
  _toggleRTLDirection(rtl) {
    var $element = this.$element();
    $element.toggleClass("dx-rtl", rtl);
  },
  _createComponent(element, component) {
    var config3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
    var synchronizableOptions = grep(this._getSynchronizableOptionsForCreateComponent(), (value2) => !(value2 in config3));
    var {
      integrationOptions
    } = this.option();
    var {
      nestedComponentOptions
    } = this.option();
    nestedComponentOptions = nestedComponentOptions || noop2;
    var nestedComponentConfig = extend({
      integrationOptions
    }, nestedComponentOptions(this));
    synchronizableOptions.forEach((optionName) => nestedComponentConfig[optionName] = this.option(optionName));
    this._extendConfig(config3, nestedComponentConfig);
    var instance = void 0;
    if (isString(component)) {
      var $element = renderer_default(element)[component](config3);
      instance = $element[component]("instance");
    } else if (element) {
      instance = component.getInstance(element);
      if (instance) {
        instance.option(config3);
      } else {
        instance = new component(element, config3);
      }
    }
    if (instance) {
      var optionChangedHandler = (_ref) => {
        var {
          name: name2,
          value: value2
        } = _ref;
        if (synchronizableOptions.includes(name2)) {
          instance.option(name2, value2);
        }
      };
      this.on("optionChanged", optionChangedHandler);
      instance.on("disposing", () => this.off("optionChanged", optionChangedHandler));
    }
    return instance;
  },
  _extendConfig(config3, extendConfig) {
    each(extendConfig, (key, value2) => {
      !Object.prototype.hasOwnProperty.call(config3, key) && (config3[key] = value2);
    });
  },
  _defaultActionConfig() {
    var $element = this.$element();
    var context2 = this._modelByElement($element);
    return extend(this.callBase(), {
      context: context2
    });
  },
  _defaultActionArgs() {
    var $element = this.$element();
    var model = this._modelByElement($element);
    var element = this.element();
    return extend(this.callBase(), {
      element,
      model
    });
  },
  _optionChanged(args) {
    switch (args.name) {
      case "width":
      case "height":
        this._renderDimensions();
        break;
      case "rtlEnabled":
        this._invalidate();
        break;
      case "elementAttr":
        this._renderElementAttributes();
        break;
      case "disabled":
      case "integrationOptions":
        break;
      default:
        this.callBase(args);
    }
  },
  _removeAttributes(element) {
    var attrs = element.attributes;
    for (var i = attrs.length - 1; i >= 0; i--) {
      var attr = attrs[i];
      if (attr) {
        var {
          name: name2
        } = attr;
        if (!name2.indexOf("aria-") || -1 !== name2.indexOf("dx-") || "role" === name2 || "style" === name2 || "tabindex" === name2) {
          element.removeAttribute(name2);
        }
      }
    }
  },
  _removeClasses(element) {
    element.className = element.className.split(" ").filter((cssClass) => 0 !== cssClass.lastIndexOf("dx-", 0)).join(" ");
  },
  _updateDOMComponent(renderRequired) {
    if (renderRequired) {
      this._renderComponent();
    } else if (this._requireRefresh) {
      this._requireRefresh = false;
      this._refresh();
    }
  },
  endUpdate() {
    var renderRequired = this._isInitializingRequired();
    this.callBase();
    this._isUpdateAllowed() && this._updateDOMComponent(renderRequired);
  },
  $element() {
    return this._$element;
  },
  element() {
    var $element = this.$element();
    return getPublicElement($element);
  },
  dispose() {
    var element = this.$element().get(0);
    cleanDataRecursive(element, true);
    element.textContent = "";
    this._removeAttributes(element);
    this._removeClasses(element);
  },
  resetOption(optionName) {
    this.callBase(optionName);
    if ("width" === optionName || "height" === optionName) {
      var initialOption = this.initialOption(optionName);
      !isDefined(initialOption) && this.$element().css(optionName, "");
    }
  },
  _getAnonymousTemplateName() {
    return;
  },
  _initTemplateManager() {
    if (this._templateManager || !this._useTemplates()) {
      return;
    }
    var {
      integrationOptions = {}
    } = this.option();
    var {
      createTemplate
    } = integrationOptions;
    this._templateManager = new TemplateManager(createTemplate, this._getAnonymousTemplateName());
    this._initTemplates();
  },
  _initTemplates() {
    var {
      templates,
      anonymousTemplateMeta
    } = this._templateManager.extractTemplates(this.$element());
    var anonymousTemplate = this.option("integrationOptions.templates.".concat(anonymousTemplateMeta.name));
    templates.forEach((_ref2) => {
      var {
        name: name2,
        template
      } = _ref2;
      this._options.silent("integrationOptions.templates.".concat(name2), template);
    });
    if (anonymousTemplateMeta.name && !anonymousTemplate) {
      this._options.silent("integrationOptions.templates.".concat(anonymousTemplateMeta.name), anonymousTemplateMeta.template);
      this._options.silent("_hasAnonymousTemplateContent", true);
    }
  },
  _getTemplateByOption(optionName) {
    return this._getTemplate(this.option(optionName));
  },
  _getTemplate(templateSource) {
    var templates = this.option("integrationOptions.templates");
    var isAsyncTemplate = this.option("templatesRenderAsynchronously");
    var skipTemplates = this.option("integrationOptions.skipTemplates");
    return this._templateManager.getTemplate(templateSource, templates, {
      isAsyncTemplate,
      skipTemplates
    }, this);
  },
  _saveTemplate(name2, template) {
    this._setOptionWithoutOptionChange("integrationOptions.templates." + name2, this._templateManager._createTemplate(template));
  },
  _useTemplates: () => true
});
DOMComponent.getInstance = function(element) {
  return getInstanceByElement(renderer_default(element), this);
};
DOMComponent.defaultOptions = function(rule) {
  this._classCustomRules = this._classCustomRules || [];
  this._classCustomRules.push(rule);
};
var dom_component_default = DOMComponent;

// node_modules/devextreme/esm/core/utils/version.js
function compare(x, y, maxLevel) {
  function normalizeArg(value2) {
    if ("string" === typeof value2) {
      return value2.split(".");
    }
    if ("number" === typeof value2) {
      return [value2];
    }
    return value2;
  }
  x = normalizeArg(x);
  y = normalizeArg(y);
  var length = Math.max(x.length, y.length);
  if (isFinite(maxLevel)) {
    length = Math.min(length, maxLevel);
  }
  for (var i = 0; i < length; i++) {
    var xItem = parseInt(x[i] || 0, 10);
    var yItem = parseInt(y[i] || 0, 10);
    if (xItem < yItem) {
      return -1;
    }
    if (xItem > yItem) {
      return 1;
    }
  }
  return 0;
}

// node_modules/devextreme/esm/events/core/emitter.feedback.js
var ACTIVE_EVENT_NAME = "dxactive";
var INACTIVE_EVENT_NAME = "dxinactive";
var ACTIVE_TIMEOUT = 30;
var INACTIVE_TIMEOUT = 400;
var FeedbackEvent = class_default.inherit({
  ctor: function(timeout, fire) {
    this._timeout = timeout;
    this._fire = fire;
  },
  start: function() {
    var that = this;
    this._schedule(function() {
      that.force();
    });
  },
  _schedule: function(fn) {
    this.stop();
    this._timer = setTimeout(fn, this._timeout);
  },
  stop: function() {
    clearTimeout(this._timer);
  },
  force: function() {
    if (this._fired) {
      return;
    }
    this.stop();
    this._fire();
    this._fired = true;
  },
  fired: function() {
    return this._fired;
  }
});
var activeFeedback;
var FeedbackEmitter = emitter_default.inherit({
  ctor: function() {
    this.callBase.apply(this, arguments);
    this._active = new FeedbackEvent(0, noop2);
    this._inactive = new FeedbackEvent(0, noop2);
  },
  configure: function(data3, eventName) {
    switch (eventName) {
      case ACTIVE_EVENT_NAME:
        data3.activeTimeout = data3.timeout;
        break;
      case INACTIVE_EVENT_NAME:
        data3.inactiveTimeout = data3.timeout;
    }
    this.callBase(data3);
  },
  start: function(e) {
    if (activeFeedback) {
      var activeChildExists = contains2(this.getElement().get(0), activeFeedback.getElement().get(0));
      var childJustActivated = !activeFeedback._active.fired();
      if (activeChildExists && childJustActivated) {
        this._cancel();
        return;
      }
      activeFeedback._inactive.force();
    }
    activeFeedback = this;
    this._initEvents(e);
    this._active.start();
  },
  _initEvents: function(e) {
    var that = this;
    var eventTarget = this._getEmitterTarget(e);
    var mouseEvent = isMouseEvent(e);
    var isSimulator = devices_default.isSimulator();
    var deferFeedback = isSimulator || !mouseEvent;
    var activeTimeout = ensureDefined(this.activeTimeout, ACTIVE_TIMEOUT);
    var inactiveTimeout = ensureDefined(this.inactiveTimeout, INACTIVE_TIMEOUT);
    this._active = new FeedbackEvent(deferFeedback ? activeTimeout : 0, function() {
      that._fireEvent(ACTIVE_EVENT_NAME, e, {
        target: eventTarget
      });
    });
    this._inactive = new FeedbackEvent(deferFeedback ? inactiveTimeout : 0, function() {
      that._fireEvent(INACTIVE_EVENT_NAME, e, {
        target: eventTarget
      });
      activeFeedback = null;
    });
  },
  cancel: function(e) {
    this.end(e);
  },
  end: function(e) {
    var skipTimers = e.type !== pointer_default.up;
    if (skipTimers) {
      this._active.stop();
    } else {
      this._active.force();
    }
    this._inactive.start();
    if (skipTimers) {
      this._inactive.force();
    }
  },
  dispose: function() {
    this._active.stop();
    this._inactive.stop();
    if (activeFeedback === this) {
      activeFeedback = null;
    }
    this.callBase();
  },
  lockInactive: function() {
    this._active.force();
    this._inactive.stop();
    activeFeedback = null;
    this._cancel();
    return this._inactive.force.bind(this._inactive);
  }
});
FeedbackEmitter.lock = function(deferred) {
  var lockInactive = activeFeedback ? activeFeedback.lockInactive() : noop2;
  deferred.done(lockInactive);
};
emitter_registrator_default({
  emitter: FeedbackEmitter,
  events: [ACTIVE_EVENT_NAME, INACTIVE_EVENT_NAME]
});
var lock = FeedbackEmitter.lock;

// node_modules/devextreme/esm/events/hover.js
var HOVERSTART_NAMESPACE = "dxHoverStart";
var HOVERSTART = "dxhoverstart";
var POINTERENTER_NAMESPACED_EVENT_NAME = addNamespace2(pointer_default.enter, HOVERSTART_NAMESPACE);
var HOVEREND_NAMESPACE = "dxHoverEnd";
var HOVEREND = "dxhoverend";
var POINTERLEAVE_NAMESPACED_EVENT_NAME = addNamespace2(pointer_default.leave, HOVEREND_NAMESPACE);
var Hover = class_default.inherit({
  noBubble: true,
  ctor: function() {
    this._handlerArrayKeyPath = this._eventNamespace + "_HandlerStore";
  },
  setup: function(element) {
    data(element, this._handlerArrayKeyPath, {});
  },
  add: function(element, handleObj) {
    var that = this;
    var handler = function(e) {
      that._handler(e);
    };
    events_engine_default.on(element, this._originalEventName, handleObj.selector, handler);
    data(element, this._handlerArrayKeyPath)[handleObj.guid] = handler;
  },
  _handler: function(e) {
    if (isTouchEvent(e) || devices_default.isSimulator()) {
      return;
    }
    fireEvent({
      type: this._eventName,
      originalEvent: e,
      delegateTarget: e.delegateTarget
    });
  },
  remove: function(element, handleObj) {
    var handler = data(element, this._handlerArrayKeyPath)[handleObj.guid];
    events_engine_default.off(element, this._originalEventName, handleObj.selector, handler);
  },
  teardown: function(element) {
    removeData(element, this._handlerArrayKeyPath);
  }
});
var HoverStart = Hover.inherit({
  ctor: function() {
    this._eventNamespace = HOVERSTART_NAMESPACE;
    this._eventName = HOVERSTART;
    this._originalEventName = POINTERENTER_NAMESPACED_EVENT_NAME;
    this.callBase();
  },
  _handler: function(e) {
    var pointers = e.pointers || [];
    if (!pointers.length) {
      this.callBase(e);
    }
  }
});
var HoverEnd = Hover.inherit({
  ctor: function() {
    this._eventNamespace = HOVEREND_NAMESPACE;
    this._eventName = HOVEREND;
    this._originalEventName = POINTERLEAVE_NAMESPACED_EVENT_NAME;
    this.callBase();
  }
});
event_registrator_default(HOVERSTART, new HoverStart());
event_registrator_default(HOVEREND, new HoverEnd());

// node_modules/devextreme/esm/ui/widget/ui.widget.js
function setAttribute(name2, value2, target) {
  name2 = "role" === name2 || "id" === name2 ? name2 : "aria-".concat(name2);
  value2 = isDefined(value2) ? value2.toString() : null;
  target.attr(name2, value2);
}
var Widget = dom_component_default.inherit({
  _feedbackHideTimeout: 400,
  _feedbackShowTimeout: 30,
  _supportedKeys: () => ({}),
  _getDefaultOptions() {
    return extend(this.callBase(), {
      hoveredElement: null,
      isActive: false,
      disabled: false,
      visible: true,
      hint: void 0,
      activeStateEnabled: false,
      onContentReady: null,
      hoverStateEnabled: false,
      focusStateEnabled: false,
      tabIndex: 0,
      accessKey: void 0,
      onFocusIn: null,
      onFocusOut: null,
      onKeyboardHandled: null,
      ignoreParentReadOnly: false,
      useResizeObserver: true
    });
  },
  _defaultOptionsRules: function() {
    return this.callBase().concat([{
      device: function() {
        var device = devices_default.real();
        var platform = device.platform;
        var version2 = device.version;
        return "ios" === platform && compare(version2, "13.3") <= 0;
      },
      options: {
        useResizeObserver: false
      }
    }]);
  },
  _init() {
    this.callBase();
    this._initContentReadyAction();
  },
  _innerWidgetOptionChanged: function(innerWidget, args) {
    var options2 = Widget.getOptionsFromContainer(args);
    innerWidget && innerWidget.option(options2);
    this._options.cache(args.name, options2);
  },
  _bindInnerWidgetOptions(innerWidget, optionsContainer) {
    var syncOptions = () => this._options.silent(optionsContainer, extend({}, innerWidget.option()));
    syncOptions();
    innerWidget.on("optionChanged", syncOptions);
  },
  _getAriaTarget() {
    return this._focusTarget();
  },
  _initContentReadyAction() {
    this._contentReadyAction = this._createActionByOption("onContentReady", {
      excludeValidators: ["disabled", "readOnly"]
    });
  },
  _initMarkup() {
    var {
      disabled,
      visible: visible2
    } = this.option();
    this.$element().addClass("dx-widget");
    this._toggleDisabledState(disabled);
    this._toggleVisibility(visible2);
    this._renderHint();
    this._isFocusable() && this._renderFocusTarget();
    this.callBase();
  },
  _render() {
    this.callBase();
    this._renderContent();
    this._renderFocusState();
    this._attachFeedbackEvents();
    this._attachHoverEvents();
    this._toggleIndependentState();
  },
  _renderHint() {
    var {
      hint
    } = this.option();
    this.$element().attr("title", hint || null);
  },
  _renderContent() {
    deferRender(() => !this._disposed ? this._renderContentImpl() : void 0).done(() => !this._disposed ? this._fireContentReadyAction() : void 0);
  },
  _renderContentImpl: noop2,
  _fireContentReadyAction: deferRenderer(function() {
    return this._contentReadyAction();
  }),
  _dispose() {
    this._contentReadyAction = null;
    this._detachKeyboardEvents();
    this.callBase();
  },
  _resetActiveState() {
    this._toggleActiveState(this._eventBindingTarget(), false);
  },
  _clean() {
    this._cleanFocusState();
    this._resetActiveState();
    this.callBase();
    this.$element().empty();
  },
  _toggleVisibility(visible2) {
    this.$element().toggleClass("dx-state-invisible", !visible2);
  },
  _renderFocusState() {
    this._attachKeyboardEvents();
    if (this._isFocusable()) {
      this._renderFocusTarget();
      this._attachFocusEvents();
      this._renderAccessKey();
    }
  },
  _renderAccessKey() {
    var $el = this._focusTarget();
    var {
      accessKey
    } = this.option();
    $el.attr("accesskey", accessKey);
  },
  _isFocusable() {
    var {
      focusStateEnabled,
      disabled
    } = this.option();
    return focusStateEnabled && !disabled;
  },
  _eventBindingTarget() {
    return this.$element();
  },
  _focusTarget() {
    return this._getActiveElement();
  },
  _isFocusTarget: function(element) {
    var focusTargets = renderer_default(this._focusTarget()).toArray();
    return focusTargets.includes(element);
  },
  _findActiveTarget($element) {
    return $element.find(this._activeStateUnit).not(".dx-state-disabled");
  },
  _getActiveElement() {
    var activeElement = this._eventBindingTarget();
    if (this._activeStateUnit) {
      return this._findActiveTarget(activeElement);
    }
    return activeElement;
  },
  _renderFocusTarget() {
    var {
      tabIndex
    } = this.option();
    this._focusTarget().attr("tabIndex", tabIndex);
  },
  _keyboardEventBindingTarget() {
    return this._eventBindingTarget();
  },
  _refreshFocusEvent() {
    this._detachFocusEvents();
    this._attachFocusEvents();
  },
  _focusEventTarget() {
    return this._focusTarget();
  },
  _focusInHandler(event) {
    if (!event.isDefaultPrevented()) {
      this._createActionByOption("onFocusIn", {
        beforeExecute: () => this._updateFocusState(event, true),
        excludeValidators: ["readOnly"]
      })({
        event
      });
    }
  },
  _focusOutHandler(event) {
    if (!event.isDefaultPrevented()) {
      this._createActionByOption("onFocusOut", {
        beforeExecute: () => this._updateFocusState(event, false),
        excludeValidators: ["readOnly", "disabled"]
      })({
        event
      });
    }
  },
  _updateFocusState(_ref, isFocused) {
    var {
      target
    } = _ref;
    if (this._isFocusTarget(target)) {
      this._toggleFocusClass(isFocused, renderer_default(target));
    }
  },
  _toggleFocusClass(isFocused, $element) {
    var $focusTarget = $element && $element.length ? $element : this._focusTarget();
    $focusTarget.toggleClass("dx-state-focused", isFocused);
  },
  _hasFocusClass(element) {
    var $focusTarget = renderer_default(element || this._focusTarget());
    return $focusTarget.hasClass("dx-state-focused");
  },
  _isFocused() {
    return this._hasFocusClass();
  },
  _getKeyboardListeners: () => [],
  _attachKeyboardEvents() {
    this._detachKeyboardEvents();
    var {
      focusStateEnabled,
      onKeyboardHandled
    } = this.option();
    var hasChildListeners = this._getKeyboardListeners().length;
    var hasKeyboardEventHandler = !!onKeyboardHandled;
    var shouldAttach = focusStateEnabled || hasChildListeners || hasKeyboardEventHandler;
    if (shouldAttach) {
      this._keyboardListenerId = keyboard.on(this._keyboardEventBindingTarget(), this._focusTarget(), (opts) => this._keyboardHandler(opts));
    }
  },
  _keyboardHandler(options2, onlyChildProcessing) {
    if (!onlyChildProcessing) {
      var {
        originalEvent,
        keyName,
        which
      } = options2;
      var keys = this._supportedKeys(originalEvent);
      var func = keys[keyName] || keys[which];
      if (void 0 !== func) {
        var handler = func.bind(this);
        var result2 = handler(originalEvent, options2);
        if (!result2) {
          return false;
        }
      }
    }
    var keyboardListeners = this._getKeyboardListeners();
    var {
      onKeyboardHandled
    } = this.option();
    keyboardListeners.forEach((listener) => listener && listener._keyboardHandler(options2));
    onKeyboardHandled && onKeyboardHandled(options2);
    return true;
  },
  _refreshFocusState() {
    this._cleanFocusState();
    this._renderFocusState();
  },
  _cleanFocusState() {
    var $element = this._focusTarget();
    $element.removeAttr("tabIndex");
    this._toggleFocusClass(false);
    this._detachFocusEvents();
    this._detachKeyboardEvents();
  },
  _detachKeyboardEvents() {
    keyboard.off(this._keyboardListenerId);
    this._keyboardListenerId = null;
  },
  _attachHoverEvents() {
    var {
      hoverStateEnabled
    } = this.option();
    var selector = this._activeStateUnit;
    var $el = this._eventBindingTarget();
    hover.off($el, {
      selector,
      namespace: "UIFeedback"
    });
    if (hoverStateEnabled) {
      hover.on($el, new Action((_ref2) => {
        var {
          event,
          element
        } = _ref2;
        this._hoverStartHandler(event);
        this.option("hoveredElement", renderer_default(element));
      }, {
        excludeValidators: ["readOnly"]
      }), (event) => {
        this.option("hoveredElement", null);
        this._hoverEndHandler(event);
      }, {
        selector,
        namespace: "UIFeedback"
      });
    }
  },
  _attachFeedbackEvents() {
    var {
      activeStateEnabled
    } = this.option();
    var selector = this._activeStateUnit;
    var $el = this._eventBindingTarget();
    active.off($el, {
      namespace: "UIFeedback",
      selector
    });
    if (activeStateEnabled) {
      active.on($el, new Action((_ref3) => {
        var {
          event,
          element
        } = _ref3;
        return this._toggleActiveState(renderer_default(element), true, event);
      }), new Action((_ref4) => {
        var {
          event,
          element
        } = _ref4;
        return this._toggleActiveState(renderer_default(element), false, event);
      }, {
        excludeValidators: ["disabled", "readOnly"]
      }), {
        showTimeout: this._feedbackShowTimeout,
        hideTimeout: this._feedbackHideTimeout,
        selector,
        namespace: "UIFeedback"
      });
    }
  },
  _detachFocusEvents() {
    var $el = this._focusEventTarget();
    focus.off($el, {
      namespace: "".concat(this.NAME, "Focus")
    });
  },
  _attachFocusEvents() {
    var $el = this._focusEventTarget();
    focus.on($el, (e) => this._focusInHandler(e), (e) => this._focusOutHandler(e), {
      namespace: "".concat(this.NAME, "Focus"),
      isFocusable: (index2, el) => renderer_default(el).is(focusable)
    });
  },
  _hoverStartHandler: noop2,
  _hoverEndHandler: noop2,
  _toggleActiveState($element, value2) {
    this.option("isActive", value2);
    $element.toggleClass("dx-state-active", value2);
  },
  _updatedHover() {
    var hoveredElement = this._options.silent("hoveredElement");
    this._hover(hoveredElement, hoveredElement);
  },
  _findHoverTarget($el) {
    return $el && $el.closest(this._activeStateUnit || this._eventBindingTarget());
  },
  _hover($el, $previous) {
    var {
      hoverStateEnabled,
      disabled,
      isActive
    } = this.option();
    $previous = this._findHoverTarget($previous);
    $previous && $previous.toggleClass("dx-state-hover", false);
    if ($el && hoverStateEnabled && !disabled && !isActive) {
      var newHoveredElement = this._findHoverTarget($el);
      newHoveredElement && newHoveredElement.toggleClass("dx-state-hover", true);
    }
  },
  _toggleDisabledState(value2) {
    this.$element().toggleClass("dx-state-disabled", Boolean(value2));
    this.setAria("disabled", value2 || void 0);
  },
  _toggleIndependentState() {
    this.$element().toggleClass("dx-state-independent", this.option("ignoreParentReadOnly"));
  },
  _setWidgetOption(widgetName, args) {
    if (!this[widgetName]) {
      return;
    }
    if (isPlainObject(args[0])) {
      each(args[0], (option, value3) => this._setWidgetOption(widgetName, [option, value3]));
      return;
    }
    var optionName = args[0];
    var value2 = args[1];
    if (1 === args.length) {
      value2 = this.option(optionName);
    }
    var widgetOptionMap = this["".concat(widgetName, "OptionMap")];
    this[widgetName].option(widgetOptionMap ? widgetOptionMap(optionName) : optionName, value2);
  },
  _optionChanged(args) {
    var {
      name: name2,
      value: value2,
      previousValue
    } = args;
    switch (name2) {
      case "disabled":
        this._toggleDisabledState(value2);
        this._updatedHover();
        this._refreshFocusState();
        break;
      case "hint":
        this._renderHint();
        break;
      case "ignoreParentReadOnly":
        this._toggleIndependentState();
        break;
      case "activeStateEnabled":
        this._attachFeedbackEvents();
        break;
      case "hoverStateEnabled":
        this._attachHoverEvents();
        this._updatedHover();
        break;
      case "tabIndex":
      case "focusStateEnabled":
        this._refreshFocusState();
        break;
      case "onFocusIn":
      case "onFocusOut":
      case "useResizeObserver":
        break;
      case "accessKey":
        this._renderAccessKey();
        break;
      case "hoveredElement":
        this._hover(value2, previousValue);
        break;
      case "isActive":
        this._updatedHover();
        break;
      case "visible":
        this._toggleVisibility(value2);
        if (this._isVisibilityChangeSupported()) {
          this._checkVisibilityChanged(value2 ? "shown" : "hiding");
        }
        break;
      case "onKeyboardHandled":
        this._attachKeyboardEvents();
        break;
      case "onContentReady":
        this._initContentReadyAction();
        break;
      default:
        this.callBase(args);
    }
  },
  _isVisible() {
    var {
      visible: visible2
    } = this.option();
    return this.callBase() && visible2;
  },
  beginUpdate() {
    this._ready(false);
    this.callBase();
  },
  endUpdate() {
    this.callBase();
    if (this._initialized) {
      this._ready(true);
    }
  },
  _ready(value2) {
    if (0 === arguments.length) {
      return this._isReady;
    }
    this._isReady = value2;
  },
  setAria() {
    if (!isPlainObject(arguments.length <= 0 ? void 0 : arguments[0])) {
      setAttribute(arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 1 ? void 0 : arguments[1], (arguments.length <= 2 ? void 0 : arguments[2]) || this._getAriaTarget());
    } else {
      var target = (arguments.length <= 1 ? void 0 : arguments[1]) || this._getAriaTarget();
      each(arguments.length <= 0 ? void 0 : arguments[0], (name2, value2) => setAttribute(name2, value2, target));
    }
  },
  isReady() {
    return this._ready();
  },
  repaint() {
    this._refresh();
  },
  focus() {
    focus.trigger(this._focusTarget());
  },
  registerKeyHandler(key, handler) {
    var currentKeys = this._supportedKeys();
    this._supportedKeys = () => extend(currentKeys, {
      [key]: handler
    });
  }
});
Widget.getOptionsFromContainer = (_ref5) => {
  var {
    name: name2,
    fullName,
    value: value2
  } = _ref5;
  var options2 = {};
  if (name2 === fullName) {
    options2 = value2;
  } else {
    var option = fullName.split(".").pop();
    options2[option] = value2;
  }
  return options2;
};
var ui_widget_default = Widget;

// node_modules/devextreme/esm/ui/load_indicator.js
var navigator2 = getNavigator();
var LOADINDICATOR_CLASS = "dx-loadindicator";
var LOADINDICATOR_WRAPPER_CLASS = "dx-loadindicator-wrapper";
var LOADINDICATOR_CONTENT_CLASS = "dx-loadindicator-content";
var LOADINDICATOR_ICON_CLASS = "dx-loadindicator-icon";
var LOADINDICATOR_SEGMENT_CLASS = "dx-loadindicator-segment";
var LOADINDICATOR_SEGMENT_INNER_CLASS = "dx-loadindicator-segment-inner";
var LOADINDICATOR_IMAGE_CLASS = "dx-loadindicator-image";
var LoadIndicator = ui_widget_default.inherit({
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      indicatorSrc: "",
      activeStateEnabled: false,
      hoverStateEnabled: false,
      _animatingSegmentCount: 1,
      _animatingSegmentInner: false
    });
  },
  _defaultOptionsRules: function() {
    var themeName = current();
    return this.callBase().concat([{
      device: function() {
        var realDevice2 = devices_default.real();
        var obsoleteAndroid = "android" === realDevice2.platform && !/chrome/i.test(navigator2.userAgent);
        return obsoleteAndroid;
      },
      options: {
        viaImage: true
      }
    }, {
      device: function() {
        return isMaterialBased(themeName);
      },
      options: {
        _animatingSegmentCount: 2,
        _animatingSegmentInner: true
      }
    }, {
      device: function() {
        return isGeneric(themeName);
      },
      options: {
        _animatingSegmentCount: 7
      }
    }]);
  },
  _useTemplates: function() {
    return false;
  },
  _init: function() {
    this.callBase();
    this.$element().addClass(LOADINDICATOR_CLASS);
  },
  _initMarkup: function() {
    this.callBase();
    this._renderWrapper();
    this._renderIndicatorContent();
    this._renderMarkup();
  },
  _renderWrapper: function() {
    this._$wrapper = renderer_default("<div>").addClass(LOADINDICATOR_WRAPPER_CLASS);
    this.$element().append(this._$wrapper);
  },
  _renderIndicatorContent: function() {
    this._$content = renderer_default("<div>").addClass(LOADINDICATOR_CONTENT_CLASS);
    this._$wrapper.append(this._$content);
  },
  _renderMarkup: function() {
    var {
      viaImage,
      indicatorSrc
    } = this.option();
    if (animation() && !viaImage && !indicatorSrc) {
      this._renderMarkupForAnimation();
    } else {
      this._renderMarkupForImage();
    }
  },
  _renderMarkupForAnimation: function() {
    var animatingSegmentInner = this.option("_animatingSegmentInner");
    this._$indicator = renderer_default("<div>").addClass(LOADINDICATOR_ICON_CLASS);
    this._$content.append(this._$indicator);
    for (var i = this.option("_animatingSegmentCount"); i >= 0; --i) {
      var $segment = renderer_default("<div>").addClass(LOADINDICATOR_SEGMENT_CLASS).addClass(LOADINDICATOR_SEGMENT_CLASS + i);
      if (animatingSegmentInner) {
        $segment.append(renderer_default("<div>").addClass(LOADINDICATOR_SEGMENT_INNER_CLASS));
      }
      this._$indicator.append($segment);
    }
  },
  _renderMarkupForImage: function() {
    var {
      indicatorSrc
    } = this.option();
    if (indicatorSrc) {
      this._$wrapper.addClass(LOADINDICATOR_IMAGE_CLASS);
      this._$wrapper.css("backgroundImage", "url(" + indicatorSrc + ")");
    } else if (animation()) {
      this._renderMarkupForAnimation();
    }
  },
  _renderDimensions: function() {
    this.callBase();
    this._updateContentSizeForAnimation();
  },
  _updateContentSizeForAnimation: function() {
    if (!this._$indicator) {
      return;
    }
    var width = this.option("width");
    var height = this.option("height");
    if (width || height) {
      width = getWidth(this.$element());
      height = getHeight(this.$element());
      var minDimension = Math.min(height, width);
      this._$wrapper.css({
        height: minDimension,
        width: minDimension,
        fontSize: minDimension
      });
    }
  },
  _clean: function() {
    this.callBase();
    this._removeMarkupForAnimation();
    this._removeMarkupForImage();
  },
  _removeMarkupForAnimation: function() {
    if (!this._$indicator) {
      return;
    }
    this._$indicator.remove();
    delete this._$indicator;
  },
  _removeMarkupForImage: function() {
    this._$wrapper.css("backgroundImage", "none");
  },
  _optionChanged: function(args) {
    switch (args.name) {
      case "_animatingSegmentCount":
      case "_animatingSegmentInner":
      case "indicatorSrc":
        this._invalidate();
        break;
      default:
        this.callBase(args);
    }
  }
});
component_registrator_default("dxLoadIndicator", LoadIndicator);
var load_indicator_default = LoadIndicator;

// node_modules/devextreme/esm/animation/translator.js
var TRANSLATOR_DATA_KEY = "dxTranslator";
var TRANSFORM_MATRIX_REGEX = /matrix(3d)?\((.+?)\)/;
var TRANSLATE_REGEX = /translate(?:3d)?\((.+?)\)/;
var locate = function($element) {
  $element = renderer_default($element);
  var translate = getTranslate($element);
  return {
    left: translate.x,
    top: translate.y
  };
};
function isPercentValue(value2) {
  return "string" === type(value2) && "%" === value2[value2.length - 1];
}
function cacheTranslate($element, translate) {
  if ($element.length) {
    data($element.get(0), TRANSLATOR_DATA_KEY, translate);
  }
}
var clearCache = function($element) {
  if ($element.length) {
    removeData($element.get(0), TRANSLATOR_DATA_KEY);
  }
};
var getTranslateCss = function(translate) {
  translate.x = translate.x || 0;
  translate.y = translate.y || 0;
  var xValueString = isPercentValue(translate.x) ? translate.x : translate.x + "px";
  var yValueString = isPercentValue(translate.y) ? translate.y : translate.y + "px";
  return "translate(" + xValueString + ", " + yValueString + ")";
};
var getTranslate = function($element) {
  var result2 = $element.length ? data($element.get(0), TRANSLATOR_DATA_KEY) : null;
  if (!result2) {
    var transformValue = $element.css("transform") || getTranslateCss({
      x: 0,
      y: 0
    });
    var matrix = transformValue.match(TRANSFORM_MATRIX_REGEX);
    var is3D = matrix && matrix[1];
    if (matrix) {
      matrix = matrix[2].split(",");
      if ("3d" === is3D) {
        matrix = matrix.slice(12, 15);
      } else {
        matrix.push(0);
        matrix = matrix.slice(4, 7);
      }
    } else {
      matrix = [0, 0, 0];
    }
    result2 = {
      x: parseFloat(matrix[0]),
      y: parseFloat(matrix[1]),
      z: parseFloat(matrix[2])
    };
    cacheTranslate($element, result2);
  }
  return result2;
};
var move = function($element, position3) {
  $element = renderer_default($element);
  var left = position3.left;
  var top = position3.top;
  var translate;
  if (void 0 === left) {
    translate = getTranslate($element);
    translate.y = top || 0;
  } else if (void 0 === top) {
    translate = getTranslate($element);
    translate.x = left || 0;
  } else {
    translate = {
      x: left || 0,
      y: top || 0,
      z: 0
    };
    cacheTranslate($element, translate);
  }
  $element.css({
    transform: getTranslateCss(translate)
  });
  if (isPercentValue(left) || isPercentValue(top)) {
    clearCache($element);
  }
};
var resetPosition = function($element, finishTransition) {
  $element = renderer_default($element);
  var originalTransition;
  var stylesConfig = {
    left: 0,
    top: 0,
    transform: "none"
  };
  if (finishTransition) {
    originalTransition = $element.css("transition");
    stylesConfig.transition = "none";
  }
  $element.css(stylesConfig);
  clearCache($element);
  if (finishTransition) {
    $element.get(0).offsetHeight;
    $element.css("transition", originalTransition);
  }
};
var parseTranslate = function(translateString) {
  var result2 = translateString.match(TRANSLATE_REGEX);
  if (!result2 || !result2[1]) {
    return;
  }
  result2 = result2[1].split(",");
  result2 = {
    x: parseFloat(result2[0]),
    y: parseFloat(result2[1]),
    z: parseFloat(result2[2])
  };
  return result2;
};

// node_modules/devextreme/esm/animation/easing.js
var CSS_TRANSITION_EASING_REGEX = /cubic-bezier\((\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\)/;
var TransitionTimingFuncMap = {
  linear: "cubic-bezier(0, 0, 1, 1)",
  swing: "cubic-bezier(0.445, 0.05, 0.55, 0.95)",
  ease: "cubic-bezier(0.25, 0.1, 0.25, 1)",
  "ease-in": "cubic-bezier(0.42, 0, 1, 1)",
  "ease-out": "cubic-bezier(0, 0, 0.58, 1)",
  "ease-in-out": "cubic-bezier(0.42, 0, 0.58, 1)"
};
var polynomBezier = function(x1, y1, x2, y2) {
  var Cx = 3 * x1;
  var Bx = 3 * (x2 - x1) - Cx;
  var Ax = 1 - Cx - Bx;
  var Cy = 3 * y1;
  var By = 3 * (y2 - y1) - Cy;
  var Ay = 1 - Cy - By;
  var bezierX = function(t) {
    return t * (Cx + t * (Bx + t * Ax));
  };
  var derivativeX = function(t) {
    return Cx + t * (2 * Bx + 3 * t * Ax);
  };
  return function(t) {
    return function(t2) {
      return t2 * (Cy + t2 * (By + t2 * Ay));
    }(function(t2) {
      var x = t2;
      var i = 0;
      var z;
      while (i < 14) {
        z = bezierX(x) - t2;
        if (Math.abs(z) < 1e-3) {
          break;
        }
        x -= z / derivativeX(x);
        i++;
      }
      return x;
    }(t));
  };
};
var easing = {};
var convertTransitionTimingFuncToEasing = function(cssTransitionEasing) {
  cssTransitionEasing = TransitionTimingFuncMap[cssTransitionEasing] || cssTransitionEasing;
  var coeffs = cssTransitionEasing.match(CSS_TRANSITION_EASING_REGEX);
  var forceName;
  if (!coeffs) {
    forceName = "linear";
    coeffs = TransitionTimingFuncMap[forceName].match(CSS_TRANSITION_EASING_REGEX);
  }
  coeffs = coeffs.slice(1, 5);
  for (var i = 0; i < coeffs.length; i++) {
    coeffs[i] = parseFloat(coeffs[i]);
  }
  var easingName = forceName || "cubicbezier_" + coeffs.join("_").replace(/\./g, "p");
  if (!isFunction(easing[easingName])) {
    easing[easingName] = function(x, t, b, c, d) {
      return c * polynomBezier(coeffs[0], coeffs[1], coeffs[2], coeffs[3])(t / d) + b;
    };
  }
  return easingName;
};
function getEasing(name2) {
  return easing[name2];
}

// node_modules/devextreme/esm/animation/position.js
var window12 = getWindow();
var horzRe = /left|right/;
var vertRe = /top|bottom/;
var collisionRe = /fit|flip|none/;
var scaleRe = /scale\(.+?\)/;
var IS_SAFARI = browser_default.safari;
var normalizeAlign = function(raw) {
  var result2 = {
    h: "center",
    v: "center"
  };
  var pair = splitPair(raw);
  if (pair) {
    each(pair, function() {
      var w = String(this).toLowerCase();
      if (horzRe.test(w)) {
        result2.h = w;
      } else if (vertRe.test(w)) {
        result2.v = w;
      }
    });
  }
  return result2;
};
var normalizeOffset = function(raw, preventRound) {
  return pairToObject(raw, preventRound);
};
var normalizeCollision = function(raw) {
  var pair = splitPair(raw);
  var h2 = String(pair && pair[0]).toLowerCase();
  var v = String(pair && pair[1]).toLowerCase();
  if (!collisionRe.test(h2)) {
    h2 = "none";
  }
  if (!collisionRe.test(v)) {
    v = h2;
  }
  return {
    h: h2,
    v
  };
};
var getAlignFactor = function(align) {
  switch (align) {
    case "center":
      return 0.5;
    case "right":
    case "bottom":
      return 1;
    default:
      return 0;
  }
};
var inverseAlign = function(align) {
  switch (align) {
    case "left":
      return "right";
    case "right":
      return "left";
    case "top":
      return "bottom";
    case "bottom":
      return "top";
    default:
      return align;
  }
};
var calculateOversize = function(data3, bounds) {
  var oversize = 0;
  if (data3.myLocation < bounds.min) {
    oversize += bounds.min - data3.myLocation;
  }
  if (data3.myLocation > bounds.max) {
    oversize += data3.myLocation - bounds.max;
  }
  return oversize;
};
var collisionSide = function(direction, data3, bounds) {
  if (data3.myLocation < bounds.min) {
    return "h" === direction ? "left" : "top";
  }
  if (data3.myLocation > bounds.max) {
    return "h" === direction ? "right" : "bottom";
  }
  return "none";
};
var initMyLocation = function(data3) {
  data3.myLocation = data3.atLocation + getAlignFactor(data3.atAlign) * data3.atSize - getAlignFactor(data3.myAlign) * data3.mySize + data3.offset;
};
var collisionResolvers = {
  fit: function(data3, bounds) {
    var result2 = false;
    if (data3.myLocation > bounds.max) {
      data3.myLocation = bounds.max;
      result2 = true;
    }
    if (data3.myLocation < bounds.min) {
      data3.myLocation = bounds.min;
      result2 = true;
    }
    data3.fit = result2;
  },
  flip: function(data3, bounds) {
    data3.flip = false;
    if ("center" === data3.myAlign && "center" === data3.atAlign) {
      return;
    }
    if (data3.myLocation < bounds.min || data3.myLocation > bounds.max) {
      var inverseData = extend({}, data3, {
        myAlign: inverseAlign(data3.myAlign),
        atAlign: inverseAlign(data3.atAlign),
        offset: -data3.offset
      });
      initMyLocation(inverseData);
      inverseData.oversize = calculateOversize(inverseData, bounds);
      if (inverseData.myLocation >= bounds.min && inverseData.myLocation <= bounds.max || data3.oversize > inverseData.oversize) {
        data3.myLocation = inverseData.myLocation;
        data3.oversize = inverseData.oversize;
        data3.flip = true;
      }
    }
  },
  flipfit: function(data3, bounds) {
    this.flip(data3, bounds);
    this.fit(data3, bounds);
  },
  none: function(data3) {
    data3.oversize = 0;
  }
};
var scrollbarWidth;
var calculateScrollbarWidth = function() {
  var $scrollDiv = renderer_default("<div>").css({
    width: 100,
    height: 100,
    overflow: "scroll",
    position: "absolute",
    top: -9999
  }).appendTo(renderer_default("body"));
  var result2 = $scrollDiv.get(0).offsetWidth - $scrollDiv.get(0).clientWidth;
  $scrollDiv.remove();
  scrollbarWidth = result2;
};
var defaultPositionResult = {
  h: {
    location: 0,
    flip: false,
    fit: false,
    oversize: 0
  },
  v: {
    location: 0,
    flip: false,
    fit: false,
    oversize: 0
  }
};
var calculatePosition = function(what, options2) {
  var $what = renderer_default(what);
  var currentOffset = $what.offset();
  var result2 = extend(true, {}, defaultPositionResult, {
    h: {
      location: currentOffset.left
    },
    v: {
      location: currentOffset.top
    }
  });
  if (!options2) {
    return result2;
  }
  var my = normalizeAlign(options2.my);
  var at = normalizeAlign(options2.at);
  var of = renderer_default(options2.of).length && options2.of || window12;
  var offset2 = normalizeOffset(options2.offset, options2.precise);
  var collision = normalizeCollision(options2.collision);
  var boundary = options2.boundary;
  var boundaryOffset = normalizeOffset(options2.boundaryOffset, options2.precise);
  var h2 = {
    mySize: getOuterWidth($what),
    myAlign: my.h,
    atAlign: at.h,
    offset: offset2.h,
    collision: collision.h,
    boundaryOffset: boundaryOffset.h
  };
  var v = {
    mySize: getOuterHeight($what),
    myAlign: my.v,
    atAlign: at.v,
    offset: offset2.v,
    collision: collision.v,
    boundaryOffset: boundaryOffset.v
  };
  if (of.preventDefault) {
    h2.atLocation = of.pageX;
    v.atLocation = of.pageY;
    h2.atSize = 0;
    v.atSize = 0;
  } else {
    of = renderer_default(of);
    if (isWindow(of[0])) {
      h2.atLocation = of.scrollLeft();
      v.atLocation = of.scrollTop();
      if ("phone" === devices_default.real().deviceType && of[0].visualViewport) {
        h2.atLocation = Math.max(h2.atLocation, of[0].visualViewport.offsetLeft);
        v.atLocation = Math.max(v.atLocation, of[0].visualViewport.offsetTop);
        h2.atSize = of[0].visualViewport.width;
        v.atSize = of[0].visualViewport.height;
      } else {
        h2.atSize = of[0].innerWidth > of[0].outerWidth ? of[0].innerWidth : getWidth(of);
        v.atSize = of[0].innerHeight > of[0].outerHeight || IS_SAFARI ? of[0].innerHeight : getHeight(of);
      }
    } else if (9 === of[0].nodeType) {
      h2.atLocation = 0;
      v.atLocation = 0;
      h2.atSize = getWidth(of);
      v.atSize = getHeight(of);
    } else {
      var ofRect = getBoundingRect(of.get(0));
      var o = getOffsetWithoutScale(of);
      h2.atLocation = o.left;
      v.atLocation = o.top;
      h2.atSize = Math.max(ofRect.width, getOuterWidth(of));
      v.atSize = Math.max(ofRect.height, getOuterHeight(of));
    }
  }
  initMyLocation(h2);
  initMyLocation(v);
  var bounds = function() {
    var win = renderer_default(window12);
    var windowWidth = getWidth(win);
    var windowHeight = getHeight(win);
    var left = win.scrollLeft();
    var top = win.scrollTop();
    var documentElement = dom_adapter_default.getDocumentElement();
    var hZoomLevel = touch ? documentElement.clientWidth / windowWidth : 1;
    var vZoomLevel = touch ? documentElement.clientHeight / windowHeight : 1;
    if (void 0 === scrollbarWidth) {
      calculateScrollbarWidth();
    }
    var boundaryWidth = windowWidth;
    var boundaryHeight = windowHeight;
    if (boundary && !isWindow(boundary)) {
      var $boundary = renderer_default(boundary);
      var boundaryPosition = $boundary.offset();
      left = boundaryPosition.left;
      top = boundaryPosition.top;
      boundaryWidth = getWidth($boundary);
      boundaryHeight = getHeight($boundary);
    }
    return {
      h: {
        min: left + h2.boundaryOffset,
        max: left + boundaryWidth / hZoomLevel - h2.mySize - h2.boundaryOffset
      },
      v: {
        min: top + v.boundaryOffset,
        max: top + boundaryHeight / vZoomLevel - v.mySize - v.boundaryOffset
      }
    };
  }();
  h2.oversize = calculateOversize(h2, bounds.h);
  v.oversize = calculateOversize(v, bounds.v);
  h2.collisionSide = collisionSide("h", h2, bounds.h);
  v.collisionSide = collisionSide("v", v, bounds.v);
  if (collisionResolvers[h2.collision]) {
    collisionResolvers[h2.collision](h2, bounds.h);
  }
  if (collisionResolvers[v.collision]) {
    collisionResolvers[v.collision](v, bounds.v);
  }
  var preciser = function(number) {
    return options2.precise ? number : Math.round(number);
  };
  extend(true, result2, {
    h: {
      location: preciser(h2.myLocation),
      oversize: preciser(h2.oversize),
      fit: h2.fit,
      flip: h2.flip,
      collisionSide: h2.collisionSide
    },
    v: {
      location: preciser(v.myLocation),
      oversize: preciser(v.oversize),
      fit: v.fit,
      flip: v.flip,
      collisionSide: v.collisionSide
    },
    precise: options2.precise
  });
  return result2;
};
var setScaleProperty = function(element, scale, styleAttr, isEmpty3) {
  var stylePropIsValid = isDefined(element.style) && !dom_adapter_default.isNode(element.style);
  var newStyleValue = isEmpty3 ? styleAttr.replace(scale, "") : styleAttr;
  if (stylePropIsValid) {
    setStyle(element, newStyleValue, false);
  } else {
    var styleAttributeNode = dom_adapter_default.createAttribute("style");
    styleAttributeNode.value = newStyleValue;
    element.setAttributeNode(styleAttributeNode);
  }
};
var getOffsetWithoutScale = function getOffsetWithoutScale2($startElement) {
  var _currentElement$getAt, _style$match;
  var $currentElement = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : $startElement;
  var currentElement = $currentElement.get(0);
  if (!currentElement) {
    return $startElement.offset();
  }
  var style = (null === (_currentElement$getAt = currentElement.getAttribute) || void 0 === _currentElement$getAt ? void 0 : _currentElement$getAt.call(currentElement, "style")) || "";
  var scale = null === (_style$match = style.match(scaleRe)) || void 0 === _style$match ? void 0 : _style$match[0];
  var offset2;
  if (scale) {
    setScaleProperty(currentElement, scale, style, true);
    offset2 = getOffsetWithoutScale2($startElement, $currentElement.parent());
    setScaleProperty(currentElement, scale, style, false);
  } else {
    offset2 = getOffsetWithoutScale2($startElement, $currentElement.parent());
  }
  return offset2;
};
var position = function(what, options2) {
  var $what = renderer_default(what);
  if (!options2) {
    return $what.offset();
  }
  resetPosition($what, true);
  var offset2 = getOffsetWithoutScale($what);
  var targetPosition = options2.h && options2.v ? options2 : calculatePosition($what, options2);
  var preciser = function(number) {
    return options2.precise ? number : Math.round(number);
  };
  move($what, {
    left: targetPosition.h.location - preciser(offset2.left),
    top: targetPosition.v.location - preciser(offset2.top)
  });
  return targetPosition;
};
var offset = function(element) {
  element = renderer_default(element).get(0);
  if (isWindow(element)) {
    return null;
  } else if (element && "pageY" in element && "pageX" in element) {
    return {
      top: element.pageY,
      left: element.pageX
    };
  }
  return renderer_default(element).offset();
};
if (!position.inverseAlign) {
  position.inverseAlign = inverseAlign;
}
if (!position.normalizeAlign) {
  position.normalizeAlign = normalizeAlign;
}
var position_default = {
  calculateScrollbarWidth,
  calculate: calculatePosition,
  setup: position,
  offset
};

// node_modules/devextreme/esm/animation/fx.js
var window13 = getWindow();
var removeEventName = addNamespace2(removeEvent, "dxFX");
var RELATIVE_VALUE_REGEX = /^([+-])=(.*)/i;
var ANIM_DATA_KEY = "dxAnimData";
var ANIM_QUEUE_KEY = "dxAnimQueue";
var TRANSFORM_PROP = "transform";
var TransitionAnimationStrategy = {
  initAnimation: function($element, config3) {
    $element.css({
      transitionProperty: "none"
    });
    if ("string" === typeof config3.from) {
      $element.addClass(config3.from);
    } else {
      setProps($element, config3.from);
    }
    var that = this;
    var deferred = new Deferred();
    var cleanupWhen = config3.cleanupWhen;
    config3.transitionAnimation = {
      deferred,
      finish: function() {
        that._finishTransition($element);
        if (cleanupWhen) {
          when(deferred, cleanupWhen).always(function() {
            that._cleanup($element, config3);
          });
        } else {
          that._cleanup($element, config3);
        }
        deferred.resolveWith($element, [config3, $element]);
      }
    };
    this._completeAnimationCallback($element, config3).done(function() {
      config3.transitionAnimation.finish();
    }).fail(function() {
      deferred.rejectWith($element, [config3, $element]);
    });
    if (!config3.duration) {
      config3.transitionAnimation.finish();
    }
    $element.css("transform");
  },
  animate: function($element, config3) {
    this._startAnimation($element, config3);
    return config3.transitionAnimation.deferred.promise();
  },
  _completeAnimationCallback: function($element, config3) {
    var that = this;
    var startTime = Date.now() + config3.delay;
    var deferred = new Deferred();
    var transitionEndFired = new Deferred();
    var simulatedTransitionEndFired = new Deferred();
    var simulatedEndEventTimer;
    var transitionEndEventFullName = transitionEndEventName() + ".dxFX";
    config3.transitionAnimation.cleanup = function() {
      clearTimeout(simulatedEndEventTimer);
      clearTimeout(waitForJSCompleteTimer);
      events_engine_default.off($element, transitionEndEventFullName);
      events_engine_default.off($element, removeEventName);
    };
    events_engine_default.one($element, transitionEndEventFullName, function() {
      if (Date.now() - startTime >= config3.duration) {
        transitionEndFired.reject();
      }
    });
    events_engine_default.off($element, removeEventName);
    events_engine_default.on($element, removeEventName, function() {
      that.stop($element, config3);
      deferred.reject();
    });
    var waitForJSCompleteTimer = setTimeout(function() {
      simulatedEndEventTimer = setTimeout(function() {
        simulatedTransitionEndFired.reject();
      }, config3.duration + config3.delay + fx._simulatedTransitionEndDelay);
      when(transitionEndFired, simulatedTransitionEndFired).fail((function() {
        deferred.resolve();
      }).bind(this));
    });
    return deferred.promise();
  },
  _startAnimation: function($element, config3) {
    $element.css({
      transitionProperty: "all",
      transitionDelay: config3.delay + "ms",
      transitionDuration: config3.duration + "ms",
      transitionTimingFunction: config3.easing
    });
    if ("string" === typeof config3.to) {
      $element[0].className += " " + config3.to;
    } else if (config3.to) {
      setProps($element, config3.to);
    }
  },
  _finishTransition: function($element) {
    $element.css("transition", "none");
  },
  _cleanup: function($element, config3) {
    config3.transitionAnimation.cleanup();
    if ("string" === typeof config3.from) {
      $element.removeClass(config3.from);
      $element.removeClass(config3.to);
    }
  },
  stop: function($element, config3, jumpToEnd) {
    if (!config3) {
      return;
    }
    if (jumpToEnd) {
      config3.transitionAnimation.finish();
    } else {
      if (isPlainObject(config3.to)) {
        each(config3.to, function(key) {
          $element.css(key, $element.css(key));
        });
      }
      this._finishTransition($element);
      this._cleanup($element, config3);
    }
  }
};
var FrameAnimationStrategy = {
  initAnimation: function($element, config3) {
    setProps($element, config3.from);
  },
  animate: function($element, config3) {
    var deferred = new Deferred();
    var that = this;
    if (!config3) {
      return deferred.reject().promise();
    }
    each(config3.to, function(prop) {
      if (void 0 === config3.from[prop]) {
        config3.from[prop] = that._normalizeValue($element.css(prop));
      }
    });
    if (config3.to[TRANSFORM_PROP]) {
      config3.from[TRANSFORM_PROP] = that._parseTransform(config3.from[TRANSFORM_PROP]);
      config3.to[TRANSFORM_PROP] = that._parseTransform(config3.to[TRANSFORM_PROP]);
    }
    config3.frameAnimation = {
      to: config3.to,
      from: config3.from,
      currentValue: config3.from,
      easing: convertTransitionTimingFuncToEasing(config3.easing),
      duration: config3.duration,
      startTime: (/* @__PURE__ */ new Date()).valueOf(),
      finish: function() {
        this.currentValue = this.to;
        this.draw();
        cancelAnimationFrame(config3.frameAnimation.animationFrameId);
        deferred.resolve();
      },
      draw: function() {
        if (config3.draw) {
          config3.draw(this.currentValue);
          return;
        }
        var currentValue = extend({}, this.currentValue);
        if (currentValue[TRANSFORM_PROP]) {
          currentValue[TRANSFORM_PROP] = map(currentValue[TRANSFORM_PROP], function(value2, prop) {
            if ("translate" === prop) {
              return getTranslateCss(value2);
            } else if ("scale" === prop) {
              return "scale(" + value2 + ")";
            } else if ("rotate" === prop.substr(0, prop.length - 1)) {
              return prop + "(" + value2 + "deg)";
            }
          }).join(" ");
        }
        $element.css(currentValue);
      }
    };
    if (config3.delay) {
      config3.frameAnimation.startTime += config3.delay;
      config3.frameAnimation.delayTimeout = setTimeout(function() {
        that._startAnimation($element, config3);
      }, config3.delay);
    } else {
      that._startAnimation($element, config3);
    }
    return deferred.promise();
  },
  _startAnimation: function($element, config3) {
    events_engine_default.off($element, removeEventName);
    events_engine_default.on($element, removeEventName, function() {
      if (config3.frameAnimation) {
        cancelAnimationFrame(config3.frameAnimation.animationFrameId);
      }
    });
    this._animationStep($element, config3);
  },
  _parseTransform: function(transformString) {
    var result2 = {};
    each(transformString.match(/\w+\d*\w*\([^)]*\)\s*/g), function(i, part) {
      var translateData = parseTranslate(part);
      var scaleData = part.match(/scale\((.+?)\)/);
      var rotateData = part.match(/(rotate.)\((.+)deg\)/);
      if (translateData) {
        result2.translate = translateData;
      }
      if (scaleData && scaleData[1]) {
        result2.scale = parseFloat(scaleData[1]);
      }
      if (rotateData && rotateData[1]) {
        result2[rotateData[1]] = parseFloat(rotateData[2]);
      }
    });
    return result2;
  },
  stop: function($element, config3, jumpToEnd) {
    var frameAnimation = config3 && config3.frameAnimation;
    if (!frameAnimation) {
      return;
    }
    cancelAnimationFrame(frameAnimation.animationFrameId);
    clearTimeout(frameAnimation.delayTimeout);
    if (jumpToEnd) {
      frameAnimation.finish();
    }
    delete config3.frameAnimation;
  },
  _animationStep: function($element, config3) {
    var frameAnimation = config3 && config3.frameAnimation;
    if (!frameAnimation) {
      return;
    }
    var now = (/* @__PURE__ */ new Date()).valueOf();
    if (now >= frameAnimation.startTime + frameAnimation.duration) {
      frameAnimation.finish();
      return;
    }
    frameAnimation.currentValue = this._calcStepValue(frameAnimation, now - frameAnimation.startTime);
    frameAnimation.draw();
    var that = this;
    frameAnimation.animationFrameId = requestAnimationFrame(function() {
      that._animationStep($element, config3);
    });
  },
  _calcStepValue: function(frameAnimation, currentDuration) {
    return function calcValueRecursively(from, to) {
      var result2 = Array.isArray(to) ? [] : {};
      each(to, function(propName, endPropValue) {
        if ("string" === typeof endPropValue && false === parseFloat(endPropValue)) {
          return true;
        }
        result2[propName] = "object" === typeof endPropValue ? calcValueRecursively(from[propName], endPropValue) : function(propName2) {
          var x = currentDuration / frameAnimation.duration;
          var t = currentDuration;
          var b = 1 * from[propName2];
          var c = to[propName2] - from[propName2];
          var d = frameAnimation.duration;
          return getEasing(frameAnimation.easing)(x, t, b, c, d);
        }(propName);
      });
      return result2;
    }(frameAnimation.from, frameAnimation.to);
  },
  _normalizeValue: function(value2) {
    var numericValue = parseFloat(value2);
    if (false === numericValue) {
      return value2;
    }
    return numericValue;
  }
};
var FallbackToNoAnimationStrategy = {
  initAnimation: function() {
  },
  animate: function() {
    return new Deferred().resolve().promise();
  },
  stop: noop2,
  isSynchronous: true
};
var getAnimationStrategy = function(config3) {
  config3 = config3 || {};
  var animationStrategies = {
    transition: transition() ? TransitionAnimationStrategy : FrameAnimationStrategy,
    frame: FrameAnimationStrategy,
    noAnimation: FallbackToNoAnimationStrategy
  };
  var strategy4 = config3.strategy || "transition";
  if ("css" === config3.type && !transition()) {
    strategy4 = "noAnimation";
  }
  return animationStrategies[strategy4];
};
var baseConfigValidator = function(config3, animationType, validate, typeMessage) {
  each(["from", "to"], function() {
    if (!validate(config3[this])) {
      throw errors_default.Error("E0010", animationType, this, typeMessage);
    }
  });
};
var isObjectConfigValidator = function(config3, animationType) {
  return baseConfigValidator(config3, animationType, function(target) {
    return isPlainObject(target);
  }, "a plain object");
};
var isStringConfigValidator = function(config3, animationType) {
  return baseConfigValidator(config3, animationType, function(target) {
    return "string" === typeof target;
  }, "a string");
};
var CustomAnimationConfigurator = {
  setup: function() {
  }
};
var CssAnimationConfigurator = {
  validateConfig: function(config3) {
    isStringConfigValidator(config3, "css");
  },
  setup: function() {
  }
};
var positionAliases = {
  top: {
    my: "bottom center",
    at: "top center"
  },
  bottom: {
    my: "top center",
    at: "bottom center"
  },
  right: {
    my: "left center",
    at: "right center"
  },
  left: {
    my: "right center",
    at: "left center"
  }
};
var SlideAnimationConfigurator = {
  validateConfig: function(config3) {
    isObjectConfigValidator(config3, "slide");
  },
  setup: function($element, config3) {
    var location = locate($element);
    if ("slide" !== config3.type) {
      var positioningConfig = "slideIn" === config3.type ? config3.from : config3.to;
      positioningConfig.position = extend({
        of: window13
      }, positionAliases[config3.direction]);
      setupPosition($element, positioningConfig);
    }
    this._setUpConfig(location, config3.from);
    this._setUpConfig(location, config3.to);
    clearCache($element);
  },
  _setUpConfig: function(location, config3) {
    config3.left = "left" in config3 ? config3.left : "+=0";
    config3.top = "top" in config3 ? config3.top : "+=0";
    this._initNewPosition(location, config3);
  },
  _initNewPosition: function(location, config3) {
    var position3 = {
      left: config3.left,
      top: config3.top
    };
    delete config3.left;
    delete config3.top;
    var relativeValue = this._getRelativeValue(position3.left);
    if (void 0 !== relativeValue) {
      position3.left = relativeValue + location.left;
    } else {
      config3.left = 0;
    }
    relativeValue = this._getRelativeValue(position3.top);
    if (void 0 !== relativeValue) {
      position3.top = relativeValue + location.top;
    } else {
      config3.top = 0;
    }
    config3[TRANSFORM_PROP] = getTranslateCss({
      x: position3.left,
      y: position3.top
    });
  },
  _getRelativeValue: function(value2) {
    var relativeValue;
    if ("string" === typeof value2 && (relativeValue = RELATIVE_VALUE_REGEX.exec(value2))) {
      return parseInt(relativeValue[1] + "1") * relativeValue[2];
    }
  }
};
var FadeAnimationConfigurator = {
  setup: function($element, config3) {
    var _from$opacity, _to$opacity;
    var from = config3.from;
    var to = config3.to;
    var defaultFromOpacity = "fadeOut" === config3.type ? 1 : 0;
    var defaultToOpacity = "fadeOut" === config3.type ? 0 : 1;
    var fromOpacity = isPlainObject(from) ? String(null !== (_from$opacity = from.opacity) && void 0 !== _from$opacity ? _from$opacity : defaultFromOpacity) : String(from);
    var toOpacity = isPlainObject(to) ? String(null !== (_to$opacity = to.opacity) && void 0 !== _to$opacity ? _to$opacity : defaultToOpacity) : String(to);
    if (!config3.skipElementInitialStyles) {
      fromOpacity = $element.css("opacity");
    }
    switch (config3.type) {
      case "fadeIn":
        toOpacity = 1;
        break;
      case "fadeOut":
        toOpacity = 0;
    }
    config3.from = {
      visibility: "visible",
      opacity: fromOpacity
    };
    config3.to = {
      opacity: toOpacity
    };
  }
};
var PopAnimationConfigurator = {
  validateConfig: function(config3) {
    isObjectConfigValidator(config3, "pop");
  },
  setup: function($element, config3) {
    var from = config3.from;
    var to = config3.to;
    var fromOpacity = "opacity" in from ? from.opacity : $element.css("opacity");
    var toOpacity = "opacity" in to ? to.opacity : 1;
    var fromScale = "scale" in from ? from.scale : 0;
    var toScale = "scale" in to ? to.scale : 1;
    config3.from = {
      opacity: fromOpacity
    };
    var translate = getTranslate($element);
    config3.from[TRANSFORM_PROP] = this._getCssTransform(translate, fromScale);
    config3.to = {
      opacity: toOpacity
    };
    config3.to[TRANSFORM_PROP] = this._getCssTransform(translate, toScale);
  },
  _getCssTransform: function(translate, scale) {
    return getTranslateCss(translate) + "scale(" + scale + ")";
  }
};
var animationConfigurators = {
  custom: CustomAnimationConfigurator,
  slide: SlideAnimationConfigurator,
  slideIn: SlideAnimationConfigurator,
  slideOut: SlideAnimationConfigurator,
  fade: FadeAnimationConfigurator,
  fadeIn: FadeAnimationConfigurator,
  fadeOut: FadeAnimationConfigurator,
  pop: PopAnimationConfigurator,
  css: CssAnimationConfigurator
};
var getAnimationConfigurator = function(config3) {
  var result2 = animationConfigurators[config3.type];
  if (!result2) {
    throw errors_default.Error("E0011", config3.type);
  }
  return result2;
};
var defaultJSConfig = {
  type: "custom",
  from: {},
  to: {},
  duration: 400,
  start: noop2,
  complete: noop2,
  easing: "ease",
  delay: 0
};
var defaultCssConfig = {
  duration: 400,
  easing: "ease",
  delay: 0
};
function setupAnimationOnElement() {
  var $element = this.element;
  var config3 = this.config;
  setupPosition($element, config3.from);
  setupPosition($element, config3.to);
  this.configurator.setup($element, config3);
  $element.data(ANIM_DATA_KEY, this);
  if (fx.off) {
    config3.duration = 0;
    config3.delay = 0;
  }
  this.strategy.initAnimation($element, config3);
  if (config3.start) {
    var element = getPublicElement($element);
    config3.start.apply(this, [element, config3]);
  }
}
var onElementAnimationComplete = function(animation3) {
  var $element = animation3.element;
  var config3 = animation3.config;
  $element.removeData(ANIM_DATA_KEY);
  if (config3.complete) {
    var element = getPublicElement($element);
    config3.complete.apply(this, [element, config3]);
  }
  animation3.deferred.resolveWith(this, [$element, config3]);
};
var startAnimationOnElement = function() {
  var animation3 = this;
  var $element = animation3.element;
  var config3 = animation3.config;
  animation3.isStarted = true;
  return animation3.strategy.animate($element, config3).done(function() {
    onElementAnimationComplete(animation3);
  }).fail(function() {
    animation3.deferred.rejectWith(this, [$element, config3]);
  });
};
var stopAnimationOnElement = function(jumpToEnd) {
  var $element = this.element;
  var config3 = this.config;
  clearTimeout(this.startTimeout);
  if (!this.isStarted) {
    this.start();
  }
  this.strategy.stop($element, config3, jumpToEnd);
};
var scopedRemoveEvent = addNamespace2(removeEvent, "dxFXStartAnimation");
var subscribeToRemoveEvent = function(animation3) {
  events_engine_default.off(animation3.element, scopedRemoveEvent);
  events_engine_default.on(animation3.element, scopedRemoveEvent, function() {
    fx.stop(animation3.element);
  });
  animation3.deferred.always(function() {
    events_engine_default.off(animation3.element, scopedRemoveEvent);
  });
};
var createAnimation = function(element, initialConfig) {
  var defaultConfig = "css" === initialConfig.type ? defaultCssConfig : defaultJSConfig;
  var config3 = extend(true, {}, defaultConfig, initialConfig);
  var configurator = getAnimationConfigurator(config3);
  var strategy4 = getAnimationStrategy(config3);
  var animation3 = {
    element: renderer_default(element),
    config: config3,
    configurator,
    strategy: strategy4,
    isSynchronous: strategy4.isSynchronous,
    setup: setupAnimationOnElement,
    start: startAnimationOnElement,
    stop: stopAnimationOnElement,
    deferred: new Deferred()
  };
  if (isFunction(configurator.validateConfig)) {
    configurator.validateConfig(config3);
  }
  subscribeToRemoveEvent(animation3);
  return animation3;
};
var animate = function(element, config3) {
  var $element = renderer_default(element);
  if (!$element.length) {
    return new Deferred().resolve().promise();
  }
  var animation3 = createAnimation($element, config3);
  pushInAnimationQueue($element, animation3);
  return animation3.deferred.promise();
};
function pushInAnimationQueue($element, animation3) {
  var queueData = getAnimQueueData($element);
  writeAnimQueueData($element, queueData);
  queueData.push(animation3);
  if (!isAnimating($element)) {
    shiftFromAnimationQueue($element, queueData);
  }
}
function getAnimQueueData($element) {
  return $element.data(ANIM_QUEUE_KEY) || [];
}
function writeAnimQueueData($element, queueData) {
  $element.data(ANIM_QUEUE_KEY, queueData);
}
var destroyAnimQueueData = function($element) {
  $element.removeData(ANIM_QUEUE_KEY);
};
function isAnimating($element) {
  return !!$element.data(ANIM_DATA_KEY);
}
function shiftFromAnimationQueue($element, queueData) {
  queueData = getAnimQueueData($element);
  if (!queueData.length) {
    return;
  }
  var animation3 = queueData.shift();
  if (0 === queueData.length) {
    destroyAnimQueueData($element);
  }
  executeAnimation(animation3).done(function() {
    if (!isAnimating($element)) {
      shiftFromAnimationQueue($element);
    }
  });
}
function executeAnimation(animation3) {
  animation3.setup();
  if (fx.off || animation3.isSynchronous) {
    animation3.start();
  } else {
    animation3.startTimeout = setTimeout(function() {
      animation3.start();
    });
  }
  return animation3.deferred.promise();
}
function setupPosition($element, config3) {
  if (!config3 || !config3.position) {
    return;
  }
  var win = renderer_default(window13);
  var left = 0;
  var top = 0;
  var position3 = position_default.calculate($element, config3.position);
  var offset2 = $element.offset();
  var currentPosition = $element.position();
  if (currentPosition.top > offset2.top) {
    top = win.scrollTop();
  }
  if (currentPosition.left > offset2.left) {
    left = win.scrollLeft();
  }
  extend(config3, {
    left: position3.h.location - offset2.left + currentPosition.left - left,
    top: position3.v.location - offset2.top + currentPosition.top - top
  });
  delete config3.position;
}
function setProps($element, props) {
  each(props, function(key, value2) {
    try {
      $element.css(key, isFunction(value2) ? value2() : value2);
    } catch (e) {
    }
  });
}
var stop = function(element, jumpToEnd) {
  var $element = renderer_default(element);
  var queueData = getAnimQueueData($element);
  each(queueData, function(_, animation4) {
    animation4.config.delay = 0;
    animation4.config.duration = 0;
    animation4.isSynchronous = true;
  });
  if (!isAnimating($element)) {
    shiftFromAnimationQueue($element, queueData);
  }
  var animation3 = $element.data(ANIM_DATA_KEY);
  if (animation3) {
    animation3.stop(jumpToEnd);
  }
  $element.removeData(ANIM_DATA_KEY);
  destroyAnimQueueData($element);
};
var fx = {
  off: false,
  animationTypes: animationConfigurators,
  animate,
  createAnimation,
  isAnimating,
  stop,
  _simulatedTransitionEndDelay: 100
};
var fx_default = fx;

// node_modules/devextreme/esm/events/gesture/emitter.gesture.js
var ready4 = ready_callbacks_default.add;
var abs = Math.abs;
var SLEEP = 0;
var INITED = 1;
var STARTED = 2;
var TOUCH_BOUNDARY = 10;
var IMMEDIATE_TOUCH_BOUNDARY = 0;
var IMMEDIATE_TIMEOUT = 180;
var supportPointerEvents = function() {
  return styleProp("pointer-events");
};
var setGestureCover = call_once_default(function() {
  var isDesktop = "desktop" === devices_default.real().deviceType;
  if (!supportPointerEvents() || !isDesktop) {
    return noop2;
  }
  var $cover = renderer_default("<div>").addClass("dx-gesture-cover").css("pointerEvents", "none");
  events_engine_default.subscribeGlobal($cover, "dxmousewheel", function(e) {
    e.preventDefault();
  });
  ready4(function() {
    $cover.appendTo("body");
  });
  return function(toggle, cursor) {
    $cover.css("pointerEvents", toggle ? "all" : "none");
    toggle && $cover.css("cursor", cursor);
  };
});
var gestureCover = function(toggle, cursor) {
  var gestureCoverStrategy = setGestureCover();
  gestureCoverStrategy(toggle, cursor);
};
var GestureEmitter = emitter_default.inherit({
  gesture: true,
  configure: function(data3) {
    this.getElement().css("msTouchAction", data3.immediate ? "pinch-zoom" : "");
    this.callBase(data3);
  },
  allowInterruptionByMouseWheel: function() {
    return this._stage !== STARTED;
  },
  getDirection: function() {
    return this.direction;
  },
  _cancel: function() {
    this.callBase.apply(this, arguments);
    this._toggleGestureCover(false);
    this._stage = SLEEP;
  },
  start: function(e) {
    if (e._needSkipEvent || needSkipEvent(e)) {
      this._cancel(e);
      return;
    }
    this._startEvent = createEvent(e);
    this._startEventData = eventData(e);
    this._stage = INITED;
    this._init(e);
    this._setupImmediateTimer();
  },
  _setupImmediateTimer: function() {
    var _this$immediateTimeou;
    clearTimeout(this._immediateTimer);
    this._immediateAccepted = false;
    if (!this.immediate) {
      return;
    }
    if (0 === this.immediateTimeout) {
      this._immediateAccepted = true;
      return;
    }
    this._immediateTimer = setTimeout((function() {
      this._immediateAccepted = true;
    }).bind(this), null !== (_this$immediateTimeou = this.immediateTimeout) && void 0 !== _this$immediateTimeou ? _this$immediateTimeou : IMMEDIATE_TIMEOUT);
  },
  move: function(e) {
    if (this._stage === INITED && this._directionConfirmed(e)) {
      this._stage = STARTED;
      this._resetActiveElement();
      this._toggleGestureCover(true);
      this._clearSelection(e);
      this._adjustStartEvent(e);
      this._start(this._startEvent);
      if (this._stage === SLEEP) {
        return;
      }
      this._requestAccept(e);
      this._move(e);
      this._forgetAccept();
    } else if (this._stage === STARTED) {
      this._clearSelection(e);
      this._move(e);
    }
  },
  _directionConfirmed: function(e) {
    var touchBoundary = this._getTouchBoundary(e);
    var delta = eventDelta(this._startEventData, eventData(e));
    var deltaX = abs(delta.x);
    var deltaY = abs(delta.y);
    var horizontalMove = this._validateMove(touchBoundary, deltaX, deltaY);
    var verticalMove = this._validateMove(touchBoundary, deltaY, deltaX);
    var direction = this.getDirection(e);
    var bothAccepted = "both" === direction && (horizontalMove || verticalMove);
    var horizontalAccepted = "horizontal" === direction && horizontalMove;
    var verticalAccepted = "vertical" === direction && verticalMove;
    return bothAccepted || horizontalAccepted || verticalAccepted || this._immediateAccepted;
  },
  _validateMove: function(touchBoundary, mainAxis, crossAxis) {
    return mainAxis && mainAxis >= touchBoundary && (this.immediate ? mainAxis >= crossAxis : true);
  },
  _getTouchBoundary: function(e) {
    return this.immediate || isDxMouseWheelEvent(e) ? IMMEDIATE_TOUCH_BOUNDARY : TOUCH_BOUNDARY;
  },
  _adjustStartEvent: function(e) {
    var touchBoundary = this._getTouchBoundary(e);
    var delta = eventDelta(this._startEventData, eventData(e));
    this._startEvent.pageX += sign(delta.x) * touchBoundary;
    this._startEvent.pageY += sign(delta.y) * touchBoundary;
  },
  _resetActiveElement: function() {
    if ("ios" === devices_default.real().platform && this.getElement().find(":focus").length) {
      resetActiveElement();
    }
  },
  _toggleGestureCover: function(toggle) {
    this._toggleGestureCoverImpl(toggle);
  },
  _toggleGestureCoverImpl: function(toggle) {
    var isStarted = this._stage === STARTED;
    if (isStarted) {
      gestureCover(toggle, this.getElement().css("cursor"));
    }
  },
  _clearSelection: function(e) {
    if (isDxMouseWheelEvent(e) || isTouchEvent(e)) {
      return;
    }
    clearSelection();
  },
  end: function(e) {
    this._toggleGestureCover(false);
    if (this._stage === STARTED) {
      this._end(e);
    } else if (this._stage === INITED) {
      this._stop(e);
    }
    this._stage = SLEEP;
  },
  dispose: function() {
    clearTimeout(this._immediateTimer);
    this.callBase.apply(this, arguments);
    this._toggleGestureCover(false);
  },
  _init: noop2,
  _start: noop2,
  _move: noop2,
  _stop: noop2,
  _end: noop2
});
GestureEmitter.initialTouchBoundary = TOUCH_BOUNDARY;
GestureEmitter.touchBoundary = function(newBoundary) {
  if (isDefined(newBoundary)) {
    TOUCH_BOUNDARY = newBoundary;
    return;
  }
  return TOUCH_BOUNDARY;
};
var emitter_gesture_default = GestureEmitter;

// node_modules/devextreme/esm/events/drag.js
var DRAG_START_EVENT = "dxdragstart";
var DRAG_EVENT = "dxdrag";
var DRAG_END_EVENT = "dxdragend";
var DRAG_ENTER_EVENT = "dxdragenter";
var DRAG_LEAVE_EVENT = "dxdragleave";
var DROP_EVENT = "dxdrop";
var DX_DRAG_EVENTS_COUNT_KEY = "dxDragEventsCount";
var knownDropTargets = [];
var knownDropTargetSelectors = [];
var knownDropTargetConfigs = [];
var dropTargetRegistration = {
  setup: function(element, data3) {
    var knownDropTarget = knownDropTargets.includes(element);
    if (!knownDropTarget) {
      knownDropTargets.push(element);
      knownDropTargetSelectors.push([]);
      knownDropTargetConfigs.push(data3 || {});
    }
  },
  add: function(element, handleObj) {
    var index2 = knownDropTargets.indexOf(element);
    this.updateEventsCounter(element, handleObj.type, 1);
    var selector = handleObj.selector;
    if (!knownDropTargetSelectors[index2].includes(selector)) {
      knownDropTargetSelectors[index2].push(selector);
    }
  },
  updateEventsCounter: function(element, event, value2) {
    if ([DRAG_ENTER_EVENT, DRAG_LEAVE_EVENT, DROP_EVENT].indexOf(event) > -1) {
      var eventsCount = data(element, DX_DRAG_EVENTS_COUNT_KEY) || 0;
      data(element, DX_DRAG_EVENTS_COUNT_KEY, Math.max(0, eventsCount + value2));
    }
  },
  remove: function(element, handleObj) {
    this.updateEventsCounter(element, handleObj.type, -1);
  },
  teardown: function(element) {
    var handlersCount = data(element, DX_DRAG_EVENTS_COUNT_KEY);
    if (!handlersCount) {
      var index2 = knownDropTargets.indexOf(element);
      knownDropTargets.splice(index2, 1);
      knownDropTargetSelectors.splice(index2, 1);
      knownDropTargetConfigs.splice(index2, 1);
      removeData(element, DX_DRAG_EVENTS_COUNT_KEY);
    }
  }
};
event_registrator_default(DRAG_ENTER_EVENT, dropTargetRegistration);
event_registrator_default(DRAG_LEAVE_EVENT, dropTargetRegistration);
event_registrator_default(DROP_EVENT, dropTargetRegistration);
var getItemDelegatedTargets = function($element) {
  var dropTargetIndex = knownDropTargets.indexOf($element.get(0));
  var dropTargetSelectors = knownDropTargetSelectors[dropTargetIndex].filter((selector) => selector);
  var $delegatedTargets = $element.find(dropTargetSelectors.join(", "));
  if (knownDropTargetSelectors[dropTargetIndex].includes(void 0)) {
    $delegatedTargets = $delegatedTargets.add($element);
  }
  return $delegatedTargets;
};
var getItemConfig = function($element) {
  var dropTargetIndex = knownDropTargets.indexOf($element.get(0));
  return knownDropTargetConfigs[dropTargetIndex];
};
var getItemPosition = function(dropTargetConfig, $element) {
  if (dropTargetConfig.itemPositionFunc) {
    return dropTargetConfig.itemPositionFunc($element);
  } else {
    return $element.offset();
  }
};
var getItemSize = function(dropTargetConfig, $element) {
  if (dropTargetConfig.itemSizeFunc) {
    return dropTargetConfig.itemSizeFunc($element);
  }
  return {
    width: $element.get(0).getBoundingClientRect().width,
    height: $element.get(0).getBoundingClientRect().height
  };
};
var DragEmitter = emitter_gesture_default.inherit({
  ctor: function(element) {
    this.callBase(element);
    this.direction = "both";
  },
  _init: function(e) {
    this._initEvent = e;
  },
  _start: function(e) {
    e = this._fireEvent(DRAG_START_EVENT, this._initEvent);
    this._maxLeftOffset = e.maxLeftOffset;
    this._maxRightOffset = e.maxRightOffset;
    this._maxTopOffset = e.maxTopOffset;
    this._maxBottomOffset = e.maxBottomOffset;
    if (e.targetElements || null === e.targetElements) {
      var dropTargets = wrapToArray(e.targetElements || []);
      this._dropTargets = map(dropTargets, function(element) {
        return renderer_default(element).get(0);
      });
    } else {
      this._dropTargets = knownDropTargets;
    }
  },
  _move: function(e) {
    var eventData2 = eventData(e);
    var dragOffset = this._calculateOffset(eventData2);
    e = this._fireEvent(DRAG_EVENT, e, {
      offset: dragOffset
    });
    this._processDropTargets(e);
    if (!e._cancelPreventDefault) {
      e.preventDefault();
    }
  },
  _calculateOffset: function(eventData2) {
    return {
      x: this._calculateXOffset(eventData2),
      y: this._calculateYOffset(eventData2)
    };
  },
  _calculateXOffset: function(eventData2) {
    if ("vertical" !== this.direction) {
      var offset2 = eventData2.x - this._startEventData.x;
      return this._fitOffset(offset2, this._maxLeftOffset, this._maxRightOffset);
    }
    return 0;
  },
  _calculateYOffset: function(eventData2) {
    if ("horizontal" !== this.direction) {
      var offset2 = eventData2.y - this._startEventData.y;
      return this._fitOffset(offset2, this._maxTopOffset, this._maxBottomOffset);
    }
    return 0;
  },
  _fitOffset: function(offset2, minOffset, maxOffset) {
    if (null != minOffset) {
      offset2 = Math.max(offset2, -minOffset);
    }
    if (null != maxOffset) {
      offset2 = Math.min(offset2, maxOffset);
    }
    return offset2;
  },
  _processDropTargets: function(e) {
    var target = this._findDropTarget(e);
    var sameTarget = target === this._currentDropTarget;
    if (!sameTarget) {
      this._fireDropTargetEvent(e, DRAG_LEAVE_EVENT);
      this._currentDropTarget = target;
      this._fireDropTargetEvent(e, DRAG_ENTER_EVENT);
    }
  },
  _fireDropTargetEvent: function(event, eventName) {
    if (!this._currentDropTarget) {
      return;
    }
    var eventData2 = {
      type: eventName,
      originalEvent: event,
      draggingElement: this._$element.get(0),
      target: this._currentDropTarget
    };
    fireEvent(eventData2);
  },
  _findDropTarget: function(e) {
    var that = this;
    var result2;
    each(knownDropTargets, function(_, target) {
      if (!that._checkDropTargetActive(target)) {
        return;
      }
      var $target = renderer_default(target);
      each(getItemDelegatedTargets($target), function(_2, delegatedTarget) {
        var $delegatedTarget = renderer_default(delegatedTarget);
        if (that._checkDropTarget(getItemConfig($target), $delegatedTarget, renderer_default(result2), e)) {
          result2 = delegatedTarget;
        }
      });
    });
    return result2;
  },
  _checkDropTargetActive: function(target) {
    var active2 = false;
    each(this._dropTargets, function(_, activeTarget) {
      active2 = active2 || activeTarget === target || contains2(activeTarget, target);
      return !active2;
    });
    return active2;
  },
  _checkDropTarget: function(config3, $target, $prevTarget, e) {
    var isDraggingElement = $target.get(0) === renderer_default(e.target).get(0);
    if (isDraggingElement) {
      return false;
    }
    var targetPosition = getItemPosition(config3, $target);
    if (e.pageX < targetPosition.left) {
      return false;
    }
    if (e.pageY < targetPosition.top) {
      return false;
    }
    var targetSize = getItemSize(config3, $target);
    if (e.pageX > targetPosition.left + targetSize.width) {
      return false;
    }
    if (e.pageY > targetPosition.top + targetSize.height) {
      return false;
    }
    if ($prevTarget.length && $prevTarget.closest($target).length) {
      return false;
    }
    if (config3.checkDropTarget && !config3.checkDropTarget($target, e)) {
      return false;
    }
    return $target;
  },
  _end: function(e) {
    var eventData2 = eventData(e);
    this._fireEvent(DRAG_END_EVENT, e, {
      offset: this._calculateOffset(eventData2)
    });
    this._fireDropTargetEvent(e, DROP_EVENT);
    delete this._currentDropTarget;
  }
});
emitter_registrator_default({
  emitter: DragEmitter,
  events: [DRAG_START_EVENT, DRAG_EVENT, DRAG_END_EVENT]
});

// node_modules/devextreme/esm/mobile/hide_callback.js
var hideCallback = /* @__PURE__ */ function() {
  var callbacks2 = [];
  return {
    add: function(callback) {
      if (!callbacks2.includes(callback)) {
        callbacks2.push(callback);
      }
    },
    remove: function(callback) {
      var indexOfCallback = callbacks2.indexOf(callback);
      if (-1 !== indexOfCallback) {
        callbacks2.splice(indexOfCallback, 1);
      }
    },
    fire: function() {
      var callback = callbacks2.pop();
      var result2 = !!callback;
      if (result2) {
        callback();
      }
      return result2;
    },
    hasCallback: function() {
      return callbacks2.length > 0;
    }
  };
}();

// node_modules/devextreme/esm/ui/overlay/z_index.js
var baseZIndex = 1500;
var zIndexStack = [];
var base = (ZIndex) => {
  baseZIndex = ensureDefined(ZIndex, baseZIndex);
  return baseZIndex;
};
var create = function() {
  var baseIndex = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : baseZIndex;
  var length = zIndexStack.length;
  var index2 = (length ? zIndexStack[length - 1] : baseIndex) + 1;
  zIndexStack.push(index2);
  return index2;
};
var remove2 = (zIndex) => {
  var position3 = zIndexStack.indexOf(zIndex);
  if (position3 >= 0) {
    zIndexStack.splice(position3, 1);
  }
};
var isLastZIndexInStack = (zIndex) => zIndexStack.length && zIndexStack[zIndexStack.length - 1] === zIndex;

// node_modules/devextreme/esm/ui/widget/swatch_container.js
var SWATCH_CONTAINER_CLASS_PREFIX = "dx-swatch-";
var getSwatchContainer = (element) => {
  var $element = renderer_default(element);
  var swatchContainer = $element.closest('[class^="'.concat(SWATCH_CONTAINER_CLASS_PREFIX, '"], [class*=" ').concat(SWATCH_CONTAINER_CLASS_PREFIX, '"]'));
  var viewport = value();
  if (!swatchContainer.length) {
    return viewport;
  }
  var swatchClassRegex = new RegExp("(\\s|^)(".concat(SWATCH_CONTAINER_CLASS_PREFIX, ".*?)(\\s|$)"));
  var swatchClass = swatchContainer[0].className.match(swatchClassRegex)[2];
  var viewportSwatchContainer = viewport.children("." + swatchClass);
  if (!viewportSwatchContainer.length) {
    viewportSwatchContainer = renderer_default("<div>").addClass(swatchClass).appendTo(viewport);
  }
  return viewportSwatchContainer;
};
var swatch_container_default = {
  getSwatchContainer
};

// node_modules/devextreme/esm/ui/overlay/overlay_position_controller.js
var window14 = getWindow();
var OVERLAY_POSITION_ALIASES = {
  top: {
    my: "top center",
    at: "top center"
  },
  bottom: {
    my: "bottom center",
    at: "bottom center"
  },
  right: {
    my: "right center",
    at: "right center"
  },
  left: {
    my: "left center",
    at: "left center"
  },
  center: {
    my: "center",
    at: "center"
  },
  "right bottom": {
    my: "right bottom",
    at: "right bottom"
  },
  "right top": {
    my: "right top",
    at: "right top"
  },
  "left bottom": {
    my: "left bottom",
    at: "left bottom"
  },
  "left top": {
    my: "left top",
    at: "left top"
  }
};
var OVERLAY_DEFAULT_BOUNDARY_OFFSET = {
  h: 0,
  v: 0
};
var OverlayPositionController = class {
  constructor(_ref) {
    var {
      position: position3,
      container,
      visualContainer,
      $root,
      $content,
      $wrapper,
      onPositioned,
      onVisualPositionChanged,
      restorePosition,
      _fixWrapperPosition,
      _skipContentPositioning
    } = _ref;
    this._props = {
      position: position3,
      container,
      visualContainer,
      restorePosition,
      onPositioned,
      onVisualPositionChanged,
      _fixWrapperPosition,
      _skipContentPositioning
    };
    this._$root = $root;
    this._$content = $content;
    this._$wrapper = $wrapper;
    this._$markupContainer = void 0;
    this._$visualContainer = void 0;
    this._shouldRenderContentInitialPosition = true;
    this._visualPosition = void 0;
    this._initialPosition = void 0;
    this._previousVisualPosition = void 0;
    this.updateContainer(container);
    this.updatePosition(position3);
    this.updateVisualContainer(visualContainer);
  }
  get $container() {
    this.updateContainer();
    return this._$markupContainer;
  }
  get $visualContainer() {
    return this._$visualContainer;
  }
  get position() {
    return this._position;
  }
  set fixWrapperPosition(fixWrapperPosition) {
    this._props._fixWrapperPosition = fixWrapperPosition;
    this.styleWrapperPosition();
  }
  set restorePosition(restorePosition) {
    this._props.restorePosition = restorePosition;
  }
  restorePositionOnNextRender(value2) {
    this._shouldRenderContentInitialPosition = value2 || !this._visualPosition;
  }
  openingHandled() {
    var shouldRestorePosition = this._props.restorePosition;
    this.restorePositionOnNextRender(shouldRestorePosition);
  }
  updatePosition(positionProp) {
    this._props.position = positionProp;
    this._position = this._normalizePosition(positionProp);
    this.updateVisualContainer();
  }
  updateContainer() {
    var containerProp = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this._props.container;
    this._props.container = containerProp;
    this._$markupContainer = containerProp ? renderer_default(containerProp) : swatch_container_default.getSwatchContainer(this._$root);
    this.updateVisualContainer(this._props.visualContainer);
  }
  updateVisualContainer() {
    var visualContainer = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this._props.visualContainer;
    this._props.visualContainer = visualContainer;
    this._$visualContainer = this._getVisualContainer();
  }
  detectVisualPositionChange(event) {
    this._updateVisualPositionValue();
    this._raisePositionedEvents(event);
  }
  positionContent() {
    if (this._shouldRenderContentInitialPosition) {
      this._renderContentInitialPosition();
    } else {
      move(this._$content, this._visualPosition);
      this.detectVisualPositionChange();
    }
  }
  positionWrapper() {
    if (this._$visualContainer) {
      position_default.setup(this._$wrapper, {
        my: "top left",
        at: "top left",
        of: this._$visualContainer
      });
    }
  }
  styleWrapperPosition() {
    var useFixed = isWindow(this.$visualContainer.get(0)) || this._props._fixWrapperPosition;
    var positionStyle = useFixed ? "fixed" : "absolute";
    this._$wrapper.css("position", positionStyle);
  }
  _updateVisualPositionValue() {
    this._previousVisualPosition = this._visualPosition;
    this._visualPosition = locate(this._$content);
  }
  _renderContentInitialPosition() {
    this._renderBoundaryOffset();
    resetPosition(this._$content);
    var wrapperOverflow = this._$wrapper.css("overflow");
    this._$wrapper.css("overflow", "hidden");
    if (!this._props._skipContentPositioning) {
      var resultPosition = position_default.setup(this._$content, this._position);
      this._initialPosition = resultPosition;
    }
    this._$wrapper.css("overflow", wrapperOverflow);
    this.detectVisualPositionChange();
  }
  _raisePositionedEvents(event) {
    var previousPosition = this._previousVisualPosition;
    var newPosition = this._visualPosition;
    var isVisualPositionChanged = (null === previousPosition || void 0 === previousPosition ? void 0 : previousPosition.top) !== newPosition.top || (null === previousPosition || void 0 === previousPosition ? void 0 : previousPosition.left) !== newPosition.left;
    if (isVisualPositionChanged) {
      this._props.onVisualPositionChanged({
        previousPosition,
        position: newPosition,
        event
      });
    }
    this._props.onPositioned({
      position: this._initialPosition
    });
  }
  _renderBoundaryOffset() {
    var _this$_position;
    var boundaryOffset = null !== (_this$_position = this._position) && void 0 !== _this$_position ? _this$_position : {
      boundaryOffset: OVERLAY_DEFAULT_BOUNDARY_OFFSET
    };
    this._$content.css("margin", "".concat(boundaryOffset.v, "px ").concat(boundaryOffset.h, "px"));
  }
  _getVisualContainer() {
    var _this$_props$position, _this$_props$position2;
    var containerProp = this._props.container;
    var visualContainerProp = this._props.visualContainer;
    var positionOf = isEvent(null === (_this$_props$position = this._props.position) || void 0 === _this$_props$position ? void 0 : _this$_props$position.of) ? this._props.position.of.target : null === (_this$_props$position2 = this._props.position) || void 0 === _this$_props$position2 ? void 0 : _this$_props$position2.of;
    if (visualContainerProp) {
      return renderer_default(visualContainerProp);
    }
    if (containerProp) {
      return renderer_default(containerProp);
    }
    if (positionOf) {
      return renderer_default(positionOf);
    }
    return renderer_default(window14);
  }
  _normalizePosition(positionProp) {
    var defaultPositionConfig = {
      boundaryOffset: OVERLAY_DEFAULT_BOUNDARY_OFFSET
    };
    if (isDefined(positionProp)) {
      return extend(true, {}, defaultPositionConfig, this._positionToObject(positionProp));
    } else {
      return defaultPositionConfig;
    }
  }
  _positionToObject(position3) {
    if (isString(position3)) {
      return extend({}, OVERLAY_POSITION_ALIASES[position3]);
    }
    return position3;
  }
};

// node_modules/devextreme/esm/ui/overlay/ui.overlay.js
var ready5 = ready_callbacks_default.add;
var window15 = getWindow();
var viewPortChanged2 = changeCallback;
var OVERLAY_CLASS = "dx-overlay";
var OVERLAY_WRAPPER_CLASS = "dx-overlay-wrapper";
var OVERLAY_CONTENT_CLASS = "dx-overlay-content";
var OVERLAY_SHADER_CLASS = "dx-overlay-shader";
var INNER_OVERLAY_CLASS = "dx-inner-overlay";
var INVISIBLE_STATE_CLASS = "dx-state-invisible";
var ANONYMOUS_TEMPLATE_NAME2 = "content";
var RTL_DIRECTION_CLASS = "dx-rtl";
var OVERLAY_STACK = [];
var PREVENT_SAFARI_SCROLLING_CLASS = "dx-prevent-safari-scrolling";
var TAB_KEY = "tab";
ready5(() => {
  events_engine_default.subscribeGlobal(dom_adapter_default.getDocument(), pointer_default.down, (e) => {
    for (var i = OVERLAY_STACK.length - 1; i >= 0; i--) {
      if (!OVERLAY_STACK[i]._proxiedDocumentDownHandler(e)) {
        return;
      }
    }
  });
});
var Overlay = ui_widget_default.inherit({
  _supportedKeys: function() {
    return extend(this.callBase(), {
      escape: function() {
        this.hide();
      }
    });
  },
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      activeStateEnabled: false,
      visible: false,
      deferRendering: true,
      shading: true,
      shadingColor: "",
      wrapperAttr: {},
      position: extend({}, OVERLAY_POSITION_ALIASES.center),
      width: "80vw",
      minWidth: null,
      maxWidth: null,
      height: "80vh",
      minHeight: null,
      maxHeight: null,
      animation: {
        show: {
          type: "pop",
          duration: 300,
          from: {
            scale: 0.55
          }
        },
        hide: {
          type: "pop",
          duration: 300,
          from: {
            opacity: 1,
            scale: 1
          },
          to: {
            opacity: 0,
            scale: 0.55
          }
        }
      },
      closeOnOutsideClick: false,
      hideOnOutsideClick: false,
      copyRootClassesToWrapper: false,
      _ignoreCopyRootClassesToWrapperDeprecation: false,
      _ignoreElementAttrDeprecation: false,
      _ignorePreventScrollEventsDeprecation: false,
      onShowing: null,
      onShown: null,
      onHiding: null,
      onHidden: null,
      contentTemplate: "content",
      innerOverlay: false,
      restorePosition: true,
      container: void 0,
      visualContainer: void 0,
      hideTopOverlayHandler: () => {
        this.hide();
      },
      hideOnParentScroll: false,
      preventScrollEvents: true,
      onPositioned: null,
      propagateOutsideClick: false,
      ignoreChildEvents: true,
      _checkParentVisibility: true,
      _hideOnParentScrollTarget: void 0,
      _fixWrapperPosition: false
    });
  },
  _defaultOptionsRules: function() {
    return this.callBase().concat([{
      device: function() {
        return !hasWindow();
      },
      options: {
        width: null,
        height: null,
        animation: null,
        _checkParentVisibility: false
      }
    }]);
  },
  _setOptionsByReference: function() {
    this.callBase();
    extend(this._optionsByReference, {
      animation: true
    });
  },
  $wrapper: function() {
    return this._$wrapper;
  },
  _eventBindingTarget: function() {
    return this._$content;
  },
  _setDeprecatedOptions() {
    this.callBase();
    extend(this._deprecatedOptions, {
      closeOnOutsideClick: {
        since: "22.1",
        alias: "hideOnOutsideClick"
      }
    });
  },
  ctor: function(element, options2) {
    this.callBase(element, options2);
    if (options2) {
      if (options2.copyRootClassesToWrapper && !options2._ignoreCopyRootClassesToWrapperDeprecation) {
        this._logDeprecatedOptionWarning("copyRootClassesToWrapper", {
          since: "21.2",
          message: 'Use the "wrapperAttr" option instead'
        });
      }
      if (options2.elementAttr && !options2._ignoreElementAttrDeprecation) {
        this._logDeprecatedOptionWarning("elementAttr", {
          since: "21.2",
          message: 'Use the "wrapperAttr" option instead'
        });
      }
      if ("preventScrollEvents" in options2 && !options2._ignorePreventScrollEventsDeprecation) {
        this._logDeprecatedPreventScrollEventsInfo();
      }
    }
  },
  _logDeprecatedPreventScrollEventsInfo() {
    this._logDeprecatedOptionWarning("preventScrollEvents", {
      since: "23.1",
      message: "If you enable this option, end-users may experience scrolling issues."
    });
  },
  _init: function() {
    this.callBase();
    this._initActions();
    this._initHideOnOutsideClickHandler();
    this._initTabTerminatorHandler();
    this._customWrapperClass = null;
    this._$wrapper = renderer_default("<div>").addClass(OVERLAY_WRAPPER_CLASS);
    this._$content = renderer_default("<div>").addClass(OVERLAY_CONTENT_CLASS);
    this._initInnerOverlayClass();
    var $element = this.$element();
    if (this.option("copyRootClassesToWrapper")) {
      this._$wrapper.addClass($element.attr("class"));
    }
    $element.addClass(OVERLAY_CLASS);
    this._$wrapper.attr("data-bind", "dxControlsDescendantBindings: true");
    this._toggleViewPortSubscription(true);
    this._initHideTopOverlayHandler(this.option("hideTopOverlayHandler"));
    this._parentsScrollSubscriptionInfo = {
      handler: (e) => {
        this._hideOnParentsScrollHandler(e);
      }
    };
    this.warnPositionAsFunction();
  },
  warnPositionAsFunction() {
    if (isFunction(this.option("position"))) {
      errors_default.log("W0018");
    }
  },
  _initInnerOverlayClass: function() {
    this._$content.toggleClass(INNER_OVERLAY_CLASS, this.option("innerOverlay"));
  },
  _initHideTopOverlayHandler: function(handler) {
    this._hideTopOverlayHandler = handler;
  },
  _getActionsList: function() {
    return ["onShowing", "onShown", "onHiding", "onHidden", "onPositioned", "onVisualPositionChanged"];
  },
  _initActions: function() {
    this._actions = {};
    var actions = this._getActionsList();
    each(actions, (_, action) => {
      this._actions[action] = this._createActionByOption(action, {
        excludeValidators: ["disabled", "readOnly"]
      }) || noop2;
    });
  },
  _initHideOnOutsideClickHandler: function() {
    var _this = this;
    this._proxiedDocumentDownHandler = function() {
      return _this._documentDownHandler(...arguments);
    };
  },
  _initMarkup() {
    this.callBase();
    this._renderWrapperAttributes();
    this._initPositionController();
  },
  _documentDownHandler: function(e) {
    if (this._showAnimationProcessing) {
      this._stopAnimation();
    }
    var isAttachedTarget = renderer_default(window15.document).is(e.target) || contains2(window15.document, e.target);
    var isInnerOverlay = renderer_default(e.target).closest(".".concat(INNER_OVERLAY_CLASS)).length;
    var outsideClick = isAttachedTarget && !isInnerOverlay && !(this._$content.is(e.target) || contains2(this._$content.get(0), e.target));
    if (outsideClick && this._shouldHideOnOutsideClick(e)) {
      this._outsideClickHandler(e);
    }
    return this.option("propagateOutsideClick");
  },
  _shouldHideOnOutsideClick: function(e) {
    var {
      hideOnOutsideClick
    } = this.option();
    if (isFunction(hideOnOutsideClick)) {
      return hideOnOutsideClick(e);
    }
    return hideOnOutsideClick;
  },
  _outsideClickHandler(e) {
    if (this.option("shading")) {
      e.preventDefault();
    }
    this.hide();
  },
  _getAnonymousTemplateName: function() {
    return ANONYMOUS_TEMPLATE_NAME2;
  },
  _initTemplates: function() {
    this._templateManager.addDefaultTemplates({
      content: new EmptyTemplate()
    });
    this.callBase();
  },
  _isTopOverlay: function() {
    var overlayStack = this._overlayStack();
    for (var i = overlayStack.length - 1; i >= 0; i--) {
      var tabbableElements = overlayStack[i]._findTabbableBounds();
      if (tabbableElements.first || tabbableElements.last) {
        return overlayStack[i] === this;
      }
    }
    return false;
  },
  _overlayStack: function() {
    return OVERLAY_STACK;
  },
  _zIndexInitValue: function() {
    return Overlay.baseZIndex();
  },
  _toggleViewPortSubscription: function(toggle) {
    var _this2 = this;
    viewPortChanged2.remove(this._viewPortChangeHandle);
    if (toggle) {
      this._viewPortChangeHandle = function() {
        _this2._viewPortChangeHandler(...arguments);
      };
      viewPortChanged2.add(this._viewPortChangeHandle);
    }
  },
  _viewPortChangeHandler: function() {
    this._positionController.updateContainer(this.option("container"));
    this._refresh();
  },
  _renderWrapperAttributes() {
    var {
      wrapperAttr
    } = this.option();
    var attributes = extend({}, wrapperAttr);
    var classNames2 = attributes.class;
    delete attributes.class;
    this.$wrapper().attr(attributes).removeClass(this._customWrapperClass).addClass(classNames2);
    this._customWrapperClass = classNames2;
  },
  _renderVisibilityAnimate: function(visible2) {
    this._stopAnimation();
    return visible2 ? this._show() : this._hide();
  },
  _getAnimationConfig: function() {
    return this._getOptionValue("animation", this);
  },
  _toggleBodyScroll: noop2,
  _animateShowing: function() {
    var _this$_getAnimationCo, _showAnimation$start, _showAnimation$comple, _this3 = this;
    var animation3 = null !== (_this$_getAnimationCo = this._getAnimationConfig()) && void 0 !== _this$_getAnimationCo ? _this$_getAnimationCo : {};
    var showAnimation = this._normalizeAnimation(animation3.show, "to");
    var startShowAnimation = null !== (_showAnimation$start = null === showAnimation || void 0 === showAnimation ? void 0 : showAnimation.start) && void 0 !== _showAnimation$start ? _showAnimation$start : noop2;
    var completeShowAnimation = null !== (_showAnimation$comple = null === showAnimation || void 0 === showAnimation ? void 0 : showAnimation.complete) && void 0 !== _showAnimation$comple ? _showAnimation$comple : noop2;
    this._animate(showAnimation, function() {
      if (_this3._isAnimationPaused) {
        return;
      }
      if (_this3.option("focusStateEnabled")) {
        events_engine_default.trigger(_this3._focusTarget(), "focus");
      }
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      completeShowAnimation.call(_this3, ...args);
      _this3._showAnimationProcessing = false;
      _this3._isHidden = false;
      _this3._actions.onShown();
      _this3._toggleSafariScrolling();
      _this3._showingDeferred.resolve();
    }, function() {
      if (_this3._isAnimationPaused) {
        return;
      }
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      startShowAnimation.call(_this3, ...args);
      _this3._showAnimationProcessing = true;
    });
  },
  _processShowingHidingCancel: function(cancelArg, applyFunction, cancelFunction) {
    if (isPromise(cancelArg)) {
      cancelArg.then((shouldCancel) => {
        if (shouldCancel) {
          cancelFunction();
        } else {
          applyFunction();
        }
      }).catch(() => applyFunction());
    } else {
      cancelArg ? cancelFunction() : applyFunction();
    }
  },
  _show: function() {
    this._showingDeferred = new Deferred();
    this._parentHidden = this._isParentHidden();
    this._showingDeferred.done(() => {
      delete this._parentHidden;
    });
    if (this._parentHidden) {
      this._isHidden = true;
      return this._showingDeferred.resolve();
    }
    if (this._currentVisible) {
      return new Deferred().resolve().promise();
    }
    this._currentVisible = true;
    if (this._isHidingActionCanceled) {
      delete this._isHidingActionCanceled;
      this._showingDeferred.reject();
    } else {
      var show = () => {
        this._stopAnimation();
        this._toggleBodyScroll(this.option("enableBodyScroll"));
        this._toggleVisibility(true);
        this._$content.css("visibility", "hidden");
        this._$content.toggleClass(INVISIBLE_STATE_CLASS, false);
        this._updateZIndexStackPosition(true);
        this._positionController.openingHandled();
        this._renderContent();
        var showingArgs = {
          cancel: false
        };
        this._actions.onShowing(showingArgs);
        this._processShowingHidingCancel(showingArgs.cancel, () => {
          this._$content.css("visibility", "");
          this._renderVisibility(true);
          this._animateShowing();
        }, () => {
          this._toggleVisibility(false);
          this._$content.css("visibility", "");
          this._$content.toggleClass(INVISIBLE_STATE_CLASS, true);
          this._isShowingActionCanceled = true;
          this._moveFromContainer();
          this._toggleBodyScroll(true);
          this.option("visible", false);
          this._showingDeferred.resolve();
        });
      };
      if (this.option("templatesRenderAsynchronously")) {
        this._stopShowTimer();
        this._asyncShowTimeout = setTimeout(show);
      } else {
        show();
      }
    }
    return this._showingDeferred.promise();
  },
  _normalizeAnimation: function(showHideConfig, direction) {
    if (showHideConfig) {
      showHideConfig = extend({
        type: "slide",
        skipElementInitialStyles: true
      }, showHideConfig);
      if (isObject(showHideConfig[direction])) {
        extend(showHideConfig[direction], {
          position: this._positionController.position
        });
      }
    }
    return showHideConfig;
  },
  _animateHiding: function() {
    var _this$_getAnimationCo2, _hideAnimation$start, _hideAnimation$comple, _this4 = this;
    var animation3 = null !== (_this$_getAnimationCo2 = this._getAnimationConfig()) && void 0 !== _this$_getAnimationCo2 ? _this$_getAnimationCo2 : {};
    var hideAnimation = this._normalizeAnimation(animation3.hide, "from");
    var startHideAnimation = null !== (_hideAnimation$start = null === hideAnimation || void 0 === hideAnimation ? void 0 : hideAnimation.start) && void 0 !== _hideAnimation$start ? _hideAnimation$start : noop2;
    var completeHideAnimation = null !== (_hideAnimation$comple = null === hideAnimation || void 0 === hideAnimation ? void 0 : hideAnimation.complete) && void 0 !== _hideAnimation$comple ? _hideAnimation$comple : noop2;
    this._animate(hideAnimation, function() {
      var _this4$_actions;
      _this4._$content.css("pointerEvents", "");
      _this4._renderVisibility(false);
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      completeHideAnimation.call(_this4, ...args);
      _this4._hideAnimationProcessing = false;
      null === (_this4$_actions = _this4._actions) || void 0 === _this4$_actions ? void 0 : _this4$_actions.onHidden();
      _this4._hidingDeferred.resolve();
    }, function() {
      _this4._$content.css("pointerEvents", "none");
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      startHideAnimation.call(_this4, ...args);
      _this4._hideAnimationProcessing = true;
    });
  },
  _hide: function() {
    if (!this._currentVisible) {
      return new Deferred().resolve().promise();
    }
    this._currentVisible = false;
    this._hidingDeferred = new Deferred();
    var hidingArgs = {
      cancel: false
    };
    if (this._isShowingActionCanceled) {
      delete this._isShowingActionCanceled;
      this._hidingDeferred.reject();
    } else {
      this._actions.onHiding(hidingArgs);
      this._toggleSafariScrolling();
      this._toggleBodyScroll(true);
      this._processShowingHidingCancel(hidingArgs.cancel, () => {
        this._forceFocusLost();
        this._toggleShading(false);
        this._toggleSubscriptions(false);
        this._stopShowTimer();
        this._animateHiding();
      }, () => {
        this._isHidingActionCanceled = true;
        this._toggleBodyScroll(this.option("enableBodyScroll"));
        this.option("visible", true);
        this._hidingDeferred.resolve();
      });
    }
    return this._hidingDeferred.promise();
  },
  _forceFocusLost: function() {
    var activeElement = dom_adapter_default.getActiveElement();
    var shouldResetActiveElement = !!this._$content.find(activeElement).length;
    if (shouldResetActiveElement) {
      resetActiveElement();
    }
  },
  _animate: function(animation3, completeCallback, startCallback) {
    if (animation3) {
      startCallback = startCallback || animation3.start || noop2;
      fx_default.animate(this._$content, extend({}, animation3, {
        start: startCallback,
        complete: completeCallback
      }));
    } else {
      completeCallback();
    }
  },
  _stopAnimation: function() {
    fx_default.stop(this._$content, true);
  },
  _renderVisibility: function(visible2) {
    if (visible2 && this._isParentHidden()) {
      return;
    }
    this._currentVisible = visible2;
    this._stopAnimation();
    if (!visible2) {
      triggerHidingEvent(this._$content);
    }
    if (visible2) {
      this._checkContainerExists();
      this._moveToContainer();
      this._renderGeometry();
      triggerShownEvent(this._$content);
      triggerResizeEvent(this._$content);
    } else {
      this._toggleVisibility(visible2);
      this._$content.toggleClass(INVISIBLE_STATE_CLASS, !visible2);
      this._updateZIndexStackPosition(visible2);
      this._moveFromContainer();
    }
    this._toggleShading(visible2);
    this._toggleSubscriptions(visible2);
  },
  _updateZIndexStackPosition: function(pushToStack) {
    var overlayStack = this._overlayStack();
    var index2 = overlayStack.indexOf(this);
    if (pushToStack) {
      if (-1 === index2) {
        this._zIndex = create(this._zIndexInitValue());
        overlayStack.push(this);
      }
      this._$wrapper.css("zIndex", this._zIndex);
      this._$content.css("zIndex", this._zIndex);
    } else if (-1 !== index2) {
      overlayStack.splice(index2, 1);
      remove2(this._zIndex);
    }
  },
  _toggleShading: function(visible2) {
    this._$wrapper.toggleClass(OVERLAY_SHADER_CLASS, visible2 && this.option("shading"));
    this._$wrapper.css("backgroundColor", this.option("shading") ? this.option("shadingColor") : "");
    this._toggleTabTerminator(visible2 && this.option("shading"));
  },
  _initTabTerminatorHandler: function() {
    var _this5 = this;
    this._proxiedTabTerminatorHandler = function() {
      _this5._tabKeyHandler(...arguments);
    };
  },
  _toggleTabTerminator: function(enabled) {
    var eventName = addNamespace2("keydown", this.NAME);
    if (enabled) {
      events_engine_default.on(dom_adapter_default.getDocument(), eventName, this._proxiedTabTerminatorHandler);
    } else {
      events_engine_default.off(dom_adapter_default.getDocument(), eventName, this._proxiedTabTerminatorHandler);
    }
  },
  _findTabbableBounds: function() {
    var $elements = this._$wrapper.find("*");
    var elementsCount = $elements.length - 1;
    var result2 = {
      first: null,
      last: null
    };
    for (var i = 0; i <= elementsCount; i++) {
      if (!result2.first && $elements.eq(i).is(tabbable)) {
        result2.first = $elements.eq(i);
      }
      if (!result2.last && $elements.eq(elementsCount - i).is(tabbable)) {
        result2.last = $elements.eq(elementsCount - i);
      }
      if (result2.first && result2.last) {
        break;
      }
    }
    return result2;
  },
  _tabKeyHandler: function(e) {
    if (normalizeKeyName(e) !== TAB_KEY || !this._isTopOverlay()) {
      return;
    }
    var tabbableElements = this._findTabbableBounds();
    var $firstTabbable = tabbableElements.first;
    var $lastTabbable = tabbableElements.last;
    var isTabOnLast = !e.shiftKey && e.target === $lastTabbable.get(0);
    var isShiftTabOnFirst = e.shiftKey && e.target === $firstTabbable.get(0);
    var isEmptyTabList = 0 === tabbableElements.length;
    var isOutsideTarget = !contains2(this._$wrapper.get(0), e.target);
    if (isTabOnLast || isShiftTabOnFirst || isEmptyTabList || isOutsideTarget) {
      e.preventDefault();
      var $focusElement = e.shiftKey ? $lastTabbable : $firstTabbable;
      events_engine_default.trigger($focusElement, "focusin");
      events_engine_default.trigger($focusElement, "focus");
    }
  },
  _toggleSubscriptions: function(enabled) {
    if (hasWindow()) {
      this._toggleHideTopOverlayCallback(enabled);
      this._toggleHideOnParentsScrollSubscription(enabled);
    }
  },
  _toggleHideTopOverlayCallback: function(subscribe) {
    if (!this._hideTopOverlayHandler) {
      return;
    }
    if (subscribe) {
      hideCallback.add(this._hideTopOverlayHandler);
    } else {
      hideCallback.remove(this._hideTopOverlayHandler);
    }
  },
  _toggleHideOnParentsScrollSubscription: function(needSubscribe) {
    var _this$_parentsScrollS;
    var scrollEvent = addNamespace2("scroll", this.NAME);
    var {
      prevTargets,
      handler
    } = null !== (_this$_parentsScrollS = this._parentsScrollSubscriptionInfo) && void 0 !== _this$_parentsScrollS ? _this$_parentsScrollS : {};
    events_engine_default.off(prevTargets, scrollEvent, handler);
    var hideOnScroll = this.option("hideOnParentScroll");
    if (needSubscribe && hideOnScroll) {
      var $parents = this._getHideOnParentScrollTarget().parents();
      if ("desktop" === devices_default.real().deviceType) {
        $parents = $parents.add(window15);
      }
      events_engine_default.on($parents, scrollEvent, handler);
      this._parentsScrollSubscriptionInfo.prevTargets = $parents;
    }
  },
  _hideOnParentsScrollHandler: function(e) {
    var hideHandled = false;
    var hideOnScroll = this.option("hideOnParentScroll");
    if (isFunction(hideOnScroll)) {
      hideHandled = hideOnScroll(e);
    }
    if (!hideHandled && !this._showAnimationProcessing) {
      this.hide();
    }
  },
  _getHideOnParentScrollTarget: function() {
    var $hideOnParentScrollTarget = renderer_default(this.option("_hideOnParentScrollTarget"));
    if ($hideOnParentScrollTarget.length) {
      return $hideOnParentScrollTarget;
    }
    return this._$wrapper;
  },
  _render: function() {
    this.callBase();
    this._appendContentToElement();
    this._renderVisibilityAnimate(this.option("visible"));
  },
  _appendContentToElement: function() {
    if (!this._$content.parent().is(this.$element())) {
      this._$content.appendTo(this.$element());
    }
  },
  _renderContent: function() {
    var shouldDeferRendering = !this._currentVisible && this.option("deferRendering");
    var isParentHidden = this.option("visible") && this._isParentHidden();
    if (isParentHidden) {
      this._isHidden = true;
      return;
    }
    if (this._contentAlreadyRendered || shouldDeferRendering) {
      return;
    }
    this._contentAlreadyRendered = true;
    this._appendContentToElement();
    this.callBase();
  },
  _isParentHidden: function() {
    if (!this.option("_checkParentVisibility")) {
      return false;
    }
    if (void 0 !== this._parentHidden) {
      return this._parentHidden;
    }
    var $parent = this.$element().parent();
    if ($parent.is(":visible")) {
      return false;
    }
    var isHidden = false;
    $parent.add($parent.parents()).each(function() {
      var $element = renderer_default(this);
      if ("none" === $element.css("display")) {
        isHidden = true;
        return false;
      }
    });
    return isHidden || !dom_adapter_default.getBody().contains($parent.get(0));
  },
  _renderContentImpl: function() {
    var whenContentRendered = new Deferred();
    var contentTemplateOption = this.option("contentTemplate");
    var contentTemplate = this._getTemplate(contentTemplateOption);
    var transclude = this._templateManager.anonymousTemplateName === contentTemplateOption;
    contentTemplate && contentTemplate.render({
      container: getPublicElement(this.$content()),
      noModel: true,
      transclude,
      onRendered: () => {
        whenContentRendered.resolve();
        if (this.option("templatesRenderAsynchronously")) {
          this._dimensionChanged();
        }
      }
    });
    this._toggleWrapperScrollEventsSubscription(this.option("preventScrollEvents"));
    whenContentRendered.done(() => {
      if (this.option("visible")) {
        this._moveToContainer();
      }
    });
    return whenContentRendered.promise();
  },
  _getPositionControllerConfig() {
    var {
      container,
      visualContainer,
      _fixWrapperPosition,
      restorePosition,
      _skipContentPositioning
    } = this.option();
    return {
      container,
      visualContainer,
      $root: this.$element(),
      $content: this._$content,
      $wrapper: this._$wrapper,
      onPositioned: this._actions.onPositioned,
      onVisualPositionChanged: this._actions.onVisualPositionChanged,
      restorePosition,
      _fixWrapperPosition,
      _skipContentPositioning
    };
  },
  _initPositionController() {
    this._positionController = new OverlayPositionController(this._getPositionControllerConfig());
  },
  _toggleWrapperScrollEventsSubscription: function(enabled) {
    var eventName = addNamespace2(DRAG_EVENT, this.NAME);
    events_engine_default.off(this._$wrapper, eventName);
    if (enabled) {
      events_engine_default.on(this._$wrapper, eventName, {
        validate: function() {
          return true;
        },
        getDirection: function() {
          return "both";
        },
        _toggleGestureCover: function(toggle) {
          if (!toggle) {
            this._toggleGestureCoverImpl(toggle);
          }
        },
        _clearSelection: noop2,
        isNative: true
      }, (e) => {
        var originalEvent = e.originalEvent.originalEvent;
        var {
          type: type2
        } = originalEvent || {};
        var isWheel = "wheel" === type2;
        var isMouseMove = "mousemove" === type2;
        var isScrollByWheel = isWheel && !isCommandKeyPressed(e);
        e._cancelPreventDefault = true;
        if (originalEvent && false !== e.cancelable && (!isMouseMove && !isWheel || isScrollByWheel)) {
          e.preventDefault();
        }
      });
    }
  },
  _moveFromContainer: function() {
    this._$content.appendTo(this.$element());
    this._$wrapper.detach();
  },
  _checkContainerExists() {
    var $wrapperContainer = this._positionController.$container;
    if (void 0 === $wrapperContainer) {
      return;
    }
    var containerExists = $wrapperContainer.length > 0;
    if (!containerExists) {
      ui_errors_default.log("W1021", this.NAME);
    }
  },
  _moveToContainer: function() {
    var $wrapperContainer = this._positionController.$container;
    this._$wrapper.appendTo($wrapperContainer);
    this._$content.appendTo(this._$wrapper);
  },
  _renderGeometry: function(options2) {
    var {
      visible: visible2
    } = this.option();
    if (visible2 && hasWindow()) {
      this._stopAnimation();
      this._renderGeometryImpl();
    }
  },
  _renderGeometryImpl: function() {
    this._positionController.updatePosition(this._getOptionValue("position"));
    this._renderWrapper();
    this._renderDimensions();
    this._renderPosition();
  },
  _renderPosition() {
    this._positionController.positionContent();
  },
  _isAllWindowCovered: function() {
    return isWindow(this._positionController.$visualContainer.get(0)) && this.option("shading");
  },
  _toggleSafariScrolling: function() {
    var visible2 = this.option("visible");
    var $body = renderer_default(dom_adapter_default.getBody());
    var isIosSafari = "ios" === devices_default.real().platform && browser_default.safari;
    var isAllWindowCovered = this._isAllWindowCovered();
    var isScrollingPrevented = $body.hasClass(PREVENT_SAFARI_SCROLLING_CLASS);
    var shouldPreventScrolling = !isScrollingPrevented && visible2 && isAllWindowCovered;
    var shouldEnableScrolling = isScrollingPrevented && (!visible2 || !isAllWindowCovered || this._disposed);
    if (isIosSafari) {
      if (shouldEnableScrolling) {
        $body.removeClass(PREVENT_SAFARI_SCROLLING_CLASS);
        window15.scrollTo(0, this._cachedBodyScrollTop);
        this._cachedBodyScrollTop = void 0;
      } else if (shouldPreventScrolling) {
        this._cachedBodyScrollTop = window15.pageYOffset;
        $body.addClass(PREVENT_SAFARI_SCROLLING_CLASS);
      }
    }
  },
  _renderWrapper: function() {
    this._positionController.styleWrapperPosition();
    this._renderWrapperDimensions();
    this._positionController.positionWrapper();
  },
  _renderWrapperDimensions: function() {
    var $visualContainer = this._positionController.$visualContainer;
    var documentElement = dom_adapter_default.getDocumentElement();
    var isVisualContainerWindow = isWindow($visualContainer.get(0));
    var wrapperWidth = isVisualContainerWindow ? documentElement.clientWidth : getOuterWidth($visualContainer);
    var wrapperHeight = isVisualContainerWindow ? window15.innerHeight : getOuterHeight($visualContainer);
    this._$wrapper.css({
      width: wrapperWidth,
      height: wrapperHeight
    });
  },
  _renderDimensions: function() {
    var content = this._$content.get(0);
    this._$content.css({
      minWidth: this._getOptionValue("minWidth", content),
      maxWidth: this._getOptionValue("maxWidth", content),
      minHeight: this._getOptionValue("minHeight", content),
      maxHeight: this._getOptionValue("maxHeight", content),
      width: this._getOptionValue("width", content),
      height: this._getOptionValue("height", content)
    });
  },
  _focusTarget: function() {
    return this._$content;
  },
  _attachKeyboardEvents: function() {
    this._keyboardListenerId = keyboard.on(this._$content, null, (opts) => this._keyboardHandler(opts));
  },
  _keyboardHandler: function(options2) {
    var e = options2.originalEvent;
    var $target = renderer_default(e.target);
    if ($target.is(this._$content) || !this.option("ignoreChildEvents")) {
      this.callBase(...arguments);
    }
  },
  _isVisible: function() {
    return this.option("visible");
  },
  _visibilityChanged: function(visible2) {
    if (visible2) {
      if (this.option("visible")) {
        this._renderVisibilityAnimate(visible2);
      }
    } else {
      this._renderVisibilityAnimate(visible2);
    }
  },
  _dimensionChanged: function() {
    this._renderGeometry();
  },
  _clean: function() {
    var options2 = this.option();
    if (!this._contentAlreadyRendered && !options2.isRenovated) {
      this.$content().empty();
    }
    this._renderVisibility(false);
    this._stopShowTimer();
    this._cleanFocusState();
  },
  _stopShowTimer() {
    if (this._asyncShowTimeout) {
      clearTimeout(this._asyncShowTimeout);
    }
    this._asyncShowTimeout = null;
  },
  _dispose: function() {
    fx_default.stop(this._$content, false);
    clearTimeout(this._deferShowTimer);
    this._toggleViewPortSubscription(false);
    this._toggleSubscriptions(false);
    this._updateZIndexStackPosition(false);
    this._toggleTabTerminator(false);
    this._actions = null;
    this._parentsScrollSubscriptionInfo = null;
    this.callBase();
    this._toggleSafariScrolling();
    this.option("visible") && remove2(this._zIndex);
    this._$wrapper.remove();
    this._$content.remove();
  },
  _toggleRTLDirection: function(rtl) {
    this._$content.toggleClass(RTL_DIRECTION_CLASS, rtl);
  },
  _optionChanged: function(args) {
    var {
      value: value2,
      name: name2
    } = args;
    if (this._getActionsList().includes(name2)) {
      this._initActions();
      return;
    }
    switch (name2) {
      case "animation":
        break;
      case "shading":
        this._toggleShading(this.option("visible"));
        this._toggleSafariScrolling();
        break;
      case "shadingColor":
        this._toggleShading(this.option("visible"));
        break;
      case "width":
      case "height":
        this._renderGeometry();
        break;
      case "minWidth":
      case "maxWidth":
      case "minHeight":
      case "maxHeight":
        this._renderGeometry();
        break;
      case "position":
        this._positionController.updatePosition(this.option("position"));
        this._positionController.restorePositionOnNextRender(true);
        this._renderGeometry();
        this._toggleSafariScrolling();
        break;
      case "visible":
        this._renderVisibilityAnimate(value2).done(() => {
          var _this$_animateDeferre;
          return null === (_this$_animateDeferre = this._animateDeferred) || void 0 === _this$_animateDeferre ? void 0 : _this$_animateDeferre.resolveWith(this);
        }).fail(() => {
          var _this$_animateDeferre2;
          return null === (_this$_animateDeferre2 = this._animateDeferred) || void 0 === _this$_animateDeferre2 ? void 0 : _this$_animateDeferre2.reject();
        });
        break;
      case "container":
        this._positionController.updateContainer(value2);
        this._invalidate();
        this._toggleSafariScrolling();
        break;
      case "visualContainer":
        this._positionController.updateVisualContainer(value2);
        this._renderWrapper();
        this._toggleSafariScrolling();
        break;
      case "innerOverlay":
        this._initInnerOverlayClass();
        break;
      case "deferRendering":
      case "contentTemplate":
        this._contentAlreadyRendered = false;
        this._clean();
        this._invalidate();
        break;
      case "hideTopOverlayHandler":
        this._toggleHideTopOverlayCallback(false);
        this._initHideTopOverlayHandler(value2);
        this._toggleHideTopOverlayCallback(this.option("visible"));
        break;
      case "hideOnParentScroll":
      case "_hideOnParentScrollTarget":
        this._toggleHideOnParentsScrollSubscription(this.option("visible"));
        break;
      case "closeOnOutsideClick":
      case "hideOnOutsideClick":
      case "propagateOutsideClick":
        break;
      case "rtlEnabled":
        this._contentAlreadyRendered = false;
        this.callBase(args);
        break;
      case "_fixWrapperPosition":
        this._positionController.fixWrapperPosition = value2;
        break;
      case "wrapperAttr":
        this._renderWrapperAttributes();
        break;
      case "restorePosition":
        this._positionController.restorePosition = value2;
        break;
      case "preventScrollEvents":
        this._logDeprecatedPreventScrollEventsInfo();
        this._toggleWrapperScrollEventsSubscription(value2);
        break;
      default:
        this.callBase(args);
    }
  },
  toggle: function(showing) {
    showing = void 0 === showing ? !this.option("visible") : showing;
    var result2 = new Deferred();
    if (showing === this.option("visible")) {
      return result2.resolveWith(this, [showing]).promise();
    }
    var animateDeferred = new Deferred();
    this._animateDeferred = animateDeferred;
    this.option("visible", showing);
    animateDeferred.promise().done(() => {
      delete this._animateDeferred;
      result2.resolveWith(this, [this.option("visible")]);
    }).fail(() => {
      delete this._animateDeferred;
      result2.reject();
    });
    return result2.promise();
  },
  $content: function() {
    return this._$content;
  },
  show: function() {
    return this.toggle(true);
  },
  hide: function() {
    return this.toggle(false);
  },
  content: function() {
    return getPublicElement(this._$content);
  },
  repaint: function() {
    if (this._contentAlreadyRendered) {
      this._positionController.restorePositionOnNextRender(true);
      this._renderGeometry({
        forceStopAnimation: true
      });
      triggerResizeEvent(this._$content);
    } else {
      this.callBase();
    }
  }
});
Overlay.baseZIndex = (zIndex) => base(zIndex);
component_registrator_default("dxOverlay", Overlay);
var ui_overlay_default = Overlay;

// node_modules/devextreme/esm/ui/load_panel.js
var LOADPANEL_CLASS = "dx-loadpanel";
var LOADPANEL_WRAPPER_CLASS = "dx-loadpanel-wrapper";
var LOADPANEL_INDICATOR_CLASS = "dx-loadpanel-indicator";
var LOADPANEL_MESSAGE_CLASS = "dx-loadpanel-message";
var LOADPANEL_CONTENT_CLASS = "dx-loadpanel-content";
var LOADPANEL_CONTENT_WRAPPER_CLASS = "dx-loadpanel-content-wrapper";
var LOADPANEL_PANE_HIDDEN_CLASS = "dx-loadpanel-pane-hidden";
var LoadPanel = ui_overlay_default.inherit({
  _supportedKeys: function() {
    return extend(this.callBase(), {
      escape: noop2
    });
  },
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      message: message_default.format("Loading"),
      width: 222,
      height: 90,
      animation: null,
      showIndicator: true,
      indicatorSrc: "",
      showPane: true,
      delay: 0,
      templatesRenderAsynchronously: false,
      hideTopOverlayHandler: null,
      focusStateEnabled: false,
      propagateOutsideClick: true,
      preventScrollEvents: false
    });
  },
  _defaultOptionsRules: function() {
    return this.callBase().concat([{
      device: {
        platform: "generic"
      },
      options: {
        shadingColor: "transparent"
      }
    }, {
      device: function() {
        return isMaterial();
      },
      options: {
        message: "",
        width: 60,
        height: 60,
        maxHeight: 60,
        maxWidth: 60
      }
    }, {
      device: function() {
        return isFluent();
      },
      options: {
        width: "auto",
        height: "auto"
      }
    }]);
  },
  _init: function() {
    this.callBase.apply(this, arguments);
  },
  _render: function() {
    this.callBase();
    this.$element().addClass(LOADPANEL_CLASS);
    this.$wrapper().addClass(LOADPANEL_WRAPPER_CLASS);
    this._setWrapperAria();
  },
  _setWrapperAria() {
    var {
      message
    } = this.option();
    var defaultLabel = isMaterialBased() ? message : null;
    var label = message ? defaultLabel : message_default.format("Loading");
    var aria = {
      role: "alert",
      label
    };
    this.setAria(aria, this.$wrapper());
  },
  _renderContentImpl: function() {
    this.callBase();
    this.$content().addClass(LOADPANEL_CONTENT_CLASS);
    this._$loadPanelContentWrapper = renderer_default("<div>").addClass(LOADPANEL_CONTENT_WRAPPER_CLASS);
    this._$loadPanelContentWrapper.appendTo(this.$content());
    this._togglePaneVisible();
    this._cleanPreviousContent();
    this._renderLoadIndicator();
    this._renderMessage();
  },
  _show: function() {
    var delay = this.option("delay");
    if (!delay) {
      return this.callBase();
    }
    var deferred = new Deferred();
    var callBase = this.callBase.bind(this);
    this._clearShowTimeout();
    this._showTimeout = setTimeout(function() {
      callBase().done(function() {
        deferred.resolve();
      });
    }, delay);
    return deferred.promise();
  },
  _hide: function() {
    this._clearShowTimeout();
    return this.callBase();
  },
  _clearShowTimeout: function() {
    clearTimeout(this._showTimeout);
  },
  _renderMessage: function() {
    if (!this._$loadPanelContentWrapper) {
      return;
    }
    var message = this.option("message");
    if (!message) {
      return;
    }
    var $message = renderer_default("<div>").addClass(LOADPANEL_MESSAGE_CLASS).text(message);
    this._$loadPanelContentWrapper.append($message);
  },
  _renderLoadIndicator: function() {
    if (!this._$loadPanelContentWrapper || !this.option("showIndicator")) {
      return;
    }
    if (!this._$indicator) {
      this._$indicator = renderer_default("<div>").addClass(LOADPANEL_INDICATOR_CLASS).appendTo(this._$loadPanelContentWrapper);
    }
    this._createComponent(this._$indicator, load_indicator_default, {
      indicatorSrc: this.option("indicatorSrc")
    });
  },
  _cleanPreviousContent: function() {
    this.$content().find("." + LOADPANEL_MESSAGE_CLASS).remove();
    this.$content().find("." + LOADPANEL_INDICATOR_CLASS).remove();
    delete this._$indicator;
  },
  _togglePaneVisible: function() {
    this.$content().toggleClass(LOADPANEL_PANE_HIDDEN_CLASS, !this.option("showPane"));
  },
  _optionChanged: function(args) {
    switch (args.name) {
      case "delay":
        break;
      case "message":
      case "showIndicator":
        this._cleanPreviousContent();
        this._renderLoadIndicator();
        this._renderMessage();
        this._setWrapperAria();
        break;
      case "showPane":
        this._togglePaneVisible();
        break;
      case "indicatorSrc":
        this._renderLoadIndicator();
        break;
      default:
        this.callBase(args);
    }
  },
  _dispose: function() {
    this._clearShowTimeout();
    this.callBase();
  }
});
component_registrator_default("dxLoadPanel", LoadPanel);
var load_panel_default = LoadPanel;

// node_modules/devextreme/esm/ui/shared/filtering.js
var DEFAULT_DATE_INTERVAL = ["year", "month", "day"];
var DEFAULT_DATETIME_INTERVAL = ["year", "month", "day", "hour", "minute"];
var isDateType = function(dataType) {
  return "date" === dataType || "datetime" === dataType;
};
var getGroupInterval = function(column) {
  var index2;
  var result2 = [];
  var dateIntervals = ["year", "month", "day", "hour", "minute", "second"];
  var groupInterval = column.headerFilter && column.headerFilter.groupInterval;
  var interval = "quarter" === groupInterval ? "month" : groupInterval;
  if (isDateType(column.dataType) && null !== groupInterval) {
    result2 = "datetime" === column.dataType ? DEFAULT_DATETIME_INTERVAL : DEFAULT_DATE_INTERVAL;
    index2 = dateIntervals.indexOf(interval);
    if (index2 >= 0) {
      result2 = dateIntervals.slice(0, index2);
      result2.push(groupInterval);
      return result2;
    }
    return result2;
  } else if (isDefined(groupInterval)) {
    return Array.isArray(groupInterval) ? groupInterval : [groupInterval];
  }
};
var filtering_default = /* @__PURE__ */ function() {
  var getFilterSelector = function(column, target) {
    var selector = column.dataField || column.selector;
    if ("search" === target) {
      selector = column.displayField || column.calculateDisplayValue || selector;
    }
    return selector;
  };
  var getFilterExpressionByRange = function(filterValue, target) {
    var endFilterValue;
    var startFilterExpression;
    var endFilterExpression;
    var selector = getFilterSelector(this, target);
    if (Array.isArray(filterValue) && isDefined(filterValue[0]) && isDefined(filterValue[1])) {
      startFilterExpression = [selector, ">=", filterValue[0]];
      endFilterExpression = [selector, "<=", filterValue[1]];
      if (isDateType(this.dataType) && (date = filterValue[1], date.getHours() + date.getMinutes() + date.getSeconds() + date.getMilliseconds() < 1)) {
        endFilterValue = new Date(filterValue[1].getTime());
        if ("date" === this.dataType) {
          endFilterValue.setDate(filterValue[1].getDate() + 1);
        }
        endFilterExpression = [selector, "<", endFilterValue];
      }
      return [startFilterExpression, "and", endFilterExpression];
    }
    var date;
  };
  var getFilterExpressionForDate = function(filterValue, selectedFilterOperation, target) {
    var dateStart;
    var dateEnd;
    var dateInterval;
    var values = function(dateValue) {
      if (isDate(dateValue)) {
        return [dateValue.getFullYear(), dateValue.getMonth(), dateValue.getDate(), dateValue.getHours(), dateValue.getMinutes(), dateValue.getSeconds()];
      }
      return map(("" + dateValue).split("/"), function(value2, index2) {
        return 1 === index2 ? Number(value2) - 1 : Number(value2);
      });
    }(filterValue);
    var selector = getFilterSelector(this, target);
    if ("headerFilter" === target) {
      dateInterval = getGroupInterval(this)[values.length - 1];
    } else if ("datetime" === this.dataType) {
      dateInterval = "minute";
    }
    switch (dateInterval) {
      case "year":
        dateStart = new Date(values[0], 0, 1);
        dateEnd = new Date(values[0] + 1, 0, 1);
        break;
      case "month":
        dateStart = new Date(values[0], values[1], 1);
        dateEnd = new Date(values[0], values[1] + 1, 1);
        break;
      case "quarter":
        dateStart = new Date(values[0], 3 * values[1], 1);
        dateEnd = new Date(values[0], 3 * values[1] + 3, 1);
        break;
      case "hour":
        dateStart = new Date(values[0], values[1], values[2], values[3]);
        dateEnd = new Date(values[0], values[1], values[2], values[3] + 1);
        break;
      case "minute":
        dateStart = new Date(values[0], values[1], values[2], values[3], values[4]);
        dateEnd = new Date(values[0], values[1], values[2], values[3], values[4] + 1);
        break;
      case "second":
        dateStart = new Date(values[0], values[1], values[2], values[3], values[4], values[5]);
        dateEnd = new Date(values[0], values[1], values[2], values[3], values[4], values[5] + 1);
        break;
      default:
        dateStart = new Date(values[0], values[1], values[2]);
        dateEnd = new Date(values[0], values[1], values[2] + 1);
    }
    switch (selectedFilterOperation) {
      case "<":
        return [selector, "<", dateStart];
      case "<=":
        return [selector, "<", dateEnd];
      case ">":
        return [selector, ">=", dateEnd];
      case ">=":
        return [selector, ">=", dateStart];
      case "<>":
        return [
          [selector, "<", dateStart],
          "or",
          [selector, ">=", dateEnd]
        ];
      default:
        return [
          [selector, ">=", dateStart],
          "and",
          [selector, "<", dateEnd]
        ];
    }
  };
  var getFilterExpressionForNumber = function(filterValue, selectedFilterOperation, target) {
    var selector = getFilterSelector(this, target);
    var groupInterval = getGroupInterval(this);
    if ("headerFilter" === target && groupInterval && isDefined(filterValue)) {
      var values = ("" + filterValue).split("/");
      var value2 = Number(values[values.length - 1]);
      var interval = groupInterval[values.length - 1];
      var startFilterValue = [selector, ">=", value2];
      var endFilterValue = [selector, "<", value2 + interval];
      var condition = [startFilterValue, "and", endFilterValue];
      return condition;
    }
    return [selector, selectedFilterOperation || "=", filterValue];
  };
  return {
    defaultCalculateFilterExpression: function(filterValue, selectedFilterOperation, target) {
      var column = this;
      var selector = getFilterSelector(column, target);
      var isSearchByDisplayValue = column.calculateDisplayValue && "search" === target;
      var dataType = isSearchByDisplayValue && column.lookup && column.lookup.dataType || column.dataType;
      var filter = null;
      if (("headerFilter" === target || "filterBuilder" === target) && null === filterValue) {
        filter = [selector, selectedFilterOperation || "=", null];
        if ("string" === dataType) {
          filter = [filter, "=" === selectedFilterOperation ? "or" : "and", [selector, selectedFilterOperation || "=", ""]];
        }
      } else if ("string" === dataType && (!column.lookup || isSearchByDisplayValue)) {
        filter = [selector, selectedFilterOperation || "contains", filterValue];
      } else if ("between" === selectedFilterOperation) {
        return getFilterExpressionByRange.apply(column, [filterValue, target]);
      } else if (isDateType(dataType) && isDefined(filterValue)) {
        return getFilterExpressionForDate.apply(column, arguments);
      } else if ("number" === dataType) {
        return getFilterExpressionForNumber.apply(column, arguments);
      } else {
        filter = [selector, selectedFilterOperation || "=", filterValue];
      }
      return filter;
    },
    getGroupInterval
  };
}();

// node_modules/devextreme/esm/__internal/grids/grid_core/m_utils.js
var DATAGRID_SELECTION_DISABLED_CLASS = "dx-selection-disabled";
var DATAGRID_GROUP_OPENED_CLASS = "dx-datagrid-group-opened";
var DATAGRID_GROUP_CLOSED_CLASS = "dx-datagrid-group-closed";
var DATAGRID_EXPAND_CLASS = "dx-datagrid-expand";
var NO_DATA_CLASS = "nodata";
var SCROLLING_MODE_INFINITE = "infinite";
var SCROLLING_MODE_VIRTUAL = "virtual";
var LEGACY_SCROLLING_MODE = "scrolling.legacyMode";
var SCROLLING_MODE_OPTION = "scrolling.mode";
var ROW_RENDERING_MODE_OPTION = "scrolling.rowRenderingMode";
var DATE_INTERVAL_SELECTORS = {
  year: (value2) => value2 && value2.getFullYear(),
  month: (value2) => value2 && value2.getMonth() + 1,
  day: (value2) => value2 && value2.getDate(),
  quarter: (value2) => value2 && Math.floor(value2.getMonth() / 3) + 1,
  hour: (value2) => value2 && value2.getHours(),
  minute: (value2) => value2 && value2.getMinutes(),
  second: (value2) => value2 && value2.getSeconds()
};
var getIntervalSelector = function() {
  var data3 = arguments[1];
  var value2 = this.calculateCellValue(data3);
  if (!isDefined(value2)) {
    return null;
  }
  if (isDateType2(this.dataType)) {
    var nameIntervalSelector = arguments[0];
    return DATE_INTERVAL_SELECTORS[nameIntervalSelector](value2);
  }
  if ("number" === this.dataType) {
    var groupInterval = arguments[0];
    return Math.floor(Number(value2) / groupInterval) * groupInterval;
  }
};
var equalSelectors = function(selector1, selector2) {
  if (isFunction(selector1) && isFunction(selector2)) {
    if (selector1.originalCallback && selector2.originalCallback) {
      return selector1.originalCallback === selector2.originalCallback && selector1.columnIndex === selector2.columnIndex;
    }
  }
  return selector1 === selector2;
};
function isDateType2(dataType) {
  return "date" === dataType || "datetime" === dataType;
}
var setEmptyText = function($container) {
  $container.get(0).textContent = " ";
};
var normalizeSortingInfo2 = function(sort) {
  sort = sort || [];
  var result2 = normalizeSortingInfo(sort);
  for (var i = 0; i < sort.length; i++) {
    if (sort && sort[i] && void 0 !== sort[i].isExpanded) {
      result2[i].isExpanded = sort[i].isExpanded;
    }
    if (sort && sort[i] && void 0 !== sort[i].groupInterval) {
      result2[i].groupInterval = sort[i].groupInterval;
    }
  }
  return result2;
};
var formatValue2 = function(value2, options2) {
  var valueText = format_helper_default.format(value2, options2.format) || value2 && value2.toString() || "";
  var formatObject = {
    value: value2,
    valueText: options2.getDisplayFormat ? options2.getDisplayFormat(valueText) : valueText,
    target: options2.target || "row",
    groupInterval: options2.groupInterval
  };
  return options2.customizeText ? options2.customizeText.call(options2, formatObject) : formatObject.valueText;
};
var getSummaryText = function(summaryItem, summaryTexts) {
  var displayFormat = summaryItem.displayFormat || summaryItem.columnCaption && summaryTexts["".concat(summaryItem.summaryType, "OtherColumn")] || summaryTexts[summaryItem.summaryType];
  return formatValue2(summaryItem.value, {
    format: summaryItem.valueFormat,
    getDisplayFormat: (valueText) => displayFormat ? format(displayFormat, valueText, summaryItem.columnCaption) : valueText,
    customizeText: summaryItem.customizeText
  });
};
var getWidgetInstance = function($element) {
  var editorData = $element.data && $element.data();
  var dxComponents = editorData && editorData.dxComponents;
  var widgetName = dxComponents && dxComponents[0];
  return widgetName && editorData[widgetName];
};
var equalFilterParameters = function equalFilterParameters2(filter1, filter2) {
  if (Array.isArray(filter1) && Array.isArray(filter2)) {
    if (filter1.length !== filter2.length) {
      return false;
    }
    for (var i = 0; i < filter1.length; i++) {
      if (!equalFilterParameters2(filter1[i], filter2[i])) {
        return false;
      }
    }
    return true;
  }
  if (isFunction(filter1) && filter1.columnIndex >= 0 && isFunction(filter2) && filter2.columnIndex >= 0) {
    return filter1.columnIndex === filter2.columnIndex && toComparable(filter1.filterValue) === toComparable(filter2.filterValue) && toComparable(filter1.selectedFilterOperation) === toComparable(filter2.selectedFilterOperation);
  }
  return toComparable(filter1) == toComparable(filter2);
};
function normalizeGroupingLoadOptions(group) {
  if (!Array.isArray(group)) {
    group = [group];
  }
  return group.map((item, i) => {
    if (isString(item)) {
      return {
        selector: item,
        isExpanded: i < group.length - 1
      };
    }
    return item;
  });
}
var m_utils_default = {
  renderNoDataText($element) {
    $element = $element || this.element();
    if (!$element) {
      return;
    }
    var noDataClass = this.addWidgetPrefix(NO_DATA_CLASS);
    var noDataElement = $element.find(".".concat(noDataClass)).last();
    var isVisible2 = this._dataController.isEmpty();
    var isLoading = this._dataController.isLoading();
    if (!noDataElement.length) {
      noDataElement = renderer_default("<span>").addClass(noDataClass);
    }
    if (!noDataElement.parent().is($element)) {
      noDataElement.appendTo($element);
    }
    if (isVisible2 && !isLoading) {
      noDataElement.removeClass("dx-hidden").text(this._getNoDataText());
    } else {
      noDataElement.addClass("dx-hidden");
    }
  },
  renderLoadPanel($element, $container, isLocalStore) {
    var loadPanelOptions;
    this._loadPanel && this._loadPanel.$element().remove();
    loadPanelOptions = this.option("loadPanel");
    if (loadPanelOptions && ("auto" === loadPanelOptions.enabled ? !isLocalStore : loadPanelOptions.enabled)) {
      loadPanelOptions = extend({
        shading: false,
        message: loadPanelOptions.text,
        container: $container
      }, loadPanelOptions);
      this._loadPanel = this._createComponent(renderer_default("<div>").appendTo($container), load_panel_default, loadPanelOptions);
    } else {
      this._loadPanel = null;
    }
  },
  calculateLoadPanelPosition($element) {
    var $window = renderer_default(getWindow());
    if (getHeight($element) > getHeight($window)) {
      return {
        of: $window,
        boundary: $element,
        collision: "fit"
      };
    }
    return {
      of: $element
    };
  },
  getIndexByKey(key, items, keyName) {
    var index2 = -1;
    if (void 0 !== key && Array.isArray(items)) {
      keyName = arguments.length <= 2 ? "key" : keyName;
      for (var i = 0; i < items.length; i++) {
        var item = isDefined(keyName) ? items[i][keyName] : items[i];
        if (equalByValue(key, item)) {
          index2 = i;
          break;
        }
      }
    }
    return index2;
  },
  combineFilters(filters, operation) {
    var _a2;
    var resultFilter = [];
    operation = operation || "and";
    for (var i = 0; i < filters.length; i++) {
      if (!filters[i]) {
        continue;
      }
      if (1 === (null === (_a2 = filters[i]) || void 0 === _a2 ? void 0 : _a2.length) && "!" === filters[i][0]) {
        if ("and" === operation) {
          return ["!"];
        }
        if ("or" === operation) {
          continue;
        }
      }
      if (resultFilter.length) {
        resultFilter.push(operation);
      }
      resultFilter.push(filters[i]);
    }
    if (1 === resultFilter.length) {
      resultFilter = resultFilter[0];
    }
    if (resultFilter.length) {
      return resultFilter;
    }
    return;
  },
  checkChanges(changes, changeNames) {
    var changesWithChangeNamesCount = 0;
    for (var i = 0; i < changeNames.length; i++) {
      if (changes[changeNames[i]]) {
        changesWithChangeNamesCount++;
      }
    }
    return changes.length && changes.length === changesWithChangeNamesCount;
  },
  equalFilterParameters,
  proxyMethod(instance, methodName, defaultResult) {
    if (!instance[methodName]) {
      instance[methodName] = function() {
        var dataSource = this._dataSource;
        return dataSource ? dataSource[methodName].apply(dataSource, arguments) : defaultResult;
      };
    }
  },
  formatValue: formatValue2,
  getFormatOptionsByColumn: (column, target) => ({
    format: column.format,
    getDisplayFormat: column.getDisplayFormat,
    customizeText: column.customizeText,
    target,
    trueText: column.trueText,
    falseText: column.falseText
  }),
  getDisplayValue(column, value2, data3, rowType) {
    if (column.displayValueMap && void 0 !== column.displayValueMap[value2]) {
      return column.displayValueMap[value2];
    }
    if (column.calculateDisplayValue && data3 && "group" !== rowType) {
      return column.calculateDisplayValue(data3);
    }
    if (column.lookup && !("group" === rowType && (column.calculateGroupValue || column.calculateDisplayValue))) {
      return column.lookup.calculateCellValue(value2);
    }
    return value2;
  },
  getGroupRowSummaryText(summaryItems, summaryTexts) {
    var result2 = "(";
    for (var i = 0; i < summaryItems.length; i++) {
      var summaryItem = summaryItems[i];
      result2 += (i > 0 ? ", " : "") + getSummaryText(summaryItem, summaryTexts);
    }
    return result2 + ")";
  },
  getSummaryText,
  normalizeSortingInfo: normalizeSortingInfo2,
  getFormatByDataType(dataType) {
    switch (dataType) {
      case "date":
        return "shortDate";
      case "datetime":
        return "shortDateShortTime";
      default:
        return;
    }
  },
  getHeaderFilterGroupParameters(column, remoteGrouping) {
    var result2 = [];
    var dataField = column.dataField || column.name;
    var groupInterval = filtering_default.getGroupInterval(column);
    if (groupInterval) {
      each(groupInterval, (index2, interval) => {
        result2.push(remoteGrouping ? {
          selector: dataField,
          groupInterval: interval,
          isExpanded: index2 < groupInterval.length - 1
        } : getIntervalSelector.bind(column, interval));
      });
      return result2;
    }
    if (remoteGrouping) {
      result2 = [{
        selector: dataField,
        isExpanded: false
      }];
    } else {
      result2 = function(data3) {
        var result3 = column.calculateCellValue(data3);
        if (void 0 === result3 || "" === result3) {
          result3 = null;
        }
        return result3;
      };
      if (column.sortingMethod) {
        result2 = [{
          selector: result2,
          compare: column.sortingMethod.bind(column)
        }];
      }
    }
    return result2;
  },
  equalSortParameters(sortParameters1, sortParameters2, ignoreIsExpanded) {
    sortParameters1 = normalizeSortingInfo2(sortParameters1);
    sortParameters2 = normalizeSortingInfo2(sortParameters2);
    if (Array.isArray(sortParameters1) && Array.isArray(sortParameters2)) {
      if (sortParameters1.length !== sortParameters2.length) {
        return false;
      }
      for (var i = 0; i < sortParameters1.length; i++) {
        if (!equalSelectors(sortParameters1[i].selector, sortParameters2[i].selector) || sortParameters1[i].desc !== sortParameters2[i].desc || sortParameters1[i].groupInterval !== sortParameters2[i].groupInterval || !ignoreIsExpanded && Boolean(sortParameters1[i].isExpanded) !== Boolean(sortParameters2[i].isExpanded)) {
          return false;
        }
      }
      return true;
    }
    return (!sortParameters1 || !sortParameters1.length) === (!sortParameters2 || !sortParameters2.length);
  },
  getPointsByColumns(items, pointCreated, isVertical, startColumnIndex) {
    var cellsLength = items.length;
    var notCreatePoint = false;
    var item;
    var offset2;
    var columnIndex = startColumnIndex || 0;
    var result2 = [];
    var rtlEnabled;
    for (var i = 0; i <= cellsLength; i++) {
      if (i < cellsLength) {
        item = items.eq(i);
        offset2 = item.offset();
        rtlEnabled = "rtl" === item.css("direction");
      }
      var point = {
        index: columnIndex,
        x: offset2 ? offset2.left + (!isVertical && rtlEnabled ^ i === cellsLength ? getBoundingRect(item[0]).width : 0) : 0,
        y: offset2 ? offset2.top + (isVertical && i === cellsLength ? getBoundingRect(item[0]).height : 0) : 0,
        columnIndex
      };
      if (!isVertical && i > 0) {
        var prevItemOffset = items.eq(i - 1).offset();
        if (prevItemOffset.top < point.y) {
          point.y = prevItemOffset.top;
        }
      }
      if (pointCreated) {
        notCreatePoint = pointCreated(point);
      }
      if (!notCreatePoint) {
        result2.push(point);
      }
      columnIndex++;
    }
    return result2;
  },
  getExpandCellTemplate: () => ({
    allowRenderToDetachedContainer: true,
    render(container, options2) {
      var $container = renderer_default(container);
      if (isDefined(options2.value) && !(options2.data && options2.data.isContinuation) && !options2.row.isNewRow) {
        var rowsView3 = options2.component.getView("rowsView");
        $container.addClass(DATAGRID_EXPAND_CLASS).addClass(DATAGRID_SELECTION_DISABLED_CLASS);
        renderer_default("<div>").addClass(options2.value ? DATAGRID_GROUP_OPENED_CLASS : DATAGRID_GROUP_CLOSED_CLASS).appendTo($container);
        rowsView3.setAria("label", options2.value ? rowsView3.localize("dxDataGrid-ariaCollapse") : rowsView3.localize("dxDataGrid-ariaExpand"), $container);
      } else {
        setEmptyText($container);
      }
    }
  }),
  setEmptyText,
  isDateType: isDateType2,
  getSelectionRange(focusedElement) {
    try {
      if (focusedElement) {
        return {
          selectionStart: focusedElement.selectionStart,
          selectionEnd: focusedElement.selectionEnd
        };
      }
    } catch (e) {
    }
    return {};
  },
  setSelectionRange(focusedElement, selectionRange) {
    try {
      if (focusedElement && focusedElement.setSelectionRange) {
        focusedElement.setSelectionRange(selectionRange.selectionStart, selectionRange.selectionEnd);
      }
    } catch (e) {
    }
  },
  focusAndSelectElement(component, $element) {
    var isFocused = $element.is(":focus");
    events_engine_default.trigger($element, "focus");
    var isSelectTextOnEditingStart = component.option("editing.selectTextOnEditStart");
    var element = $element.get(0);
    if (!isFocused && isSelectTextOnEditingStart && $element.is(".dx-texteditor-input") && !$element.is("[readonly]")) {
      var editor = getWidgetInstance($element.closest(".dx-texteditor"));
      when(editor && editor._loadItemDeferred).done(() => {
        element.select();
      });
    }
  },
  getWidgetInstance,
  getLastResizableColumnIndex(columns2, resultWidths) {
    var hasResizableColumns = columns2.some((column2) => column2 && !column2.command && !column2.fixed && false !== column2.allowResizing);
    var lastColumnIndex;
    for (lastColumnIndex = columns2.length - 1; columns2[lastColumnIndex]; lastColumnIndex--) {
      var column = columns2[lastColumnIndex];
      var width = resultWidths && resultWidths[lastColumnIndex];
      var allowResizing2 = !hasResizableColumns || false !== column.allowResizing;
      if (!column.command && !column.fixed && "adaptiveHidden" !== width && allowResizing2) {
        break;
      }
    }
    return lastColumnIndex;
  },
  isElementInCurrentGrid(controller, $element) {
    if ($element && $element.length) {
      var $grid = $element.closest(".".concat(controller.getWidgetContainerClass())).parent();
      return $grid.is(controller.component.$element());
    }
    return false;
  },
  isVirtualRowRendering(that) {
    var rowRenderingMode = that.option(ROW_RENDERING_MODE_OPTION);
    var isVirtualMode3 = that.option(SCROLLING_MODE_OPTION) === SCROLLING_MODE_VIRTUAL;
    var isAppendMode3 = that.option(SCROLLING_MODE_OPTION) === SCROLLING_MODE_INFINITE;
    if (false === that.option(LEGACY_SCROLLING_MODE) && (isVirtualMode3 || isAppendMode3)) {
      return true;
    }
    return rowRenderingMode === SCROLLING_MODE_VIRTUAL;
  },
  getPixelRatio: (window29) => window29.devicePixelRatio || 1,
  getContentHeightLimit(browser) {
    if (browser.mozilla) {
      return 8e6;
    }
    return 15e6 / this.getPixelRatio(getWindow());
  },
  normalizeLookupDataSource(lookup) {
    var lookupDataSourceOptions;
    if (lookup.items) {
      lookupDataSourceOptions = lookup.items;
    } else {
      lookupDataSourceOptions = lookup.dataSource;
      if (isFunction(lookupDataSourceOptions) && !variable_wrapper_default.isWrapped(lookupDataSourceOptions)) {
        lookupDataSourceOptions = lookupDataSourceOptions({});
      }
    }
    return normalizeDataSourceOptions(lookupDataSourceOptions);
  },
  getWrappedLookupDataSource(column, dataSource, filter) {
    if (!dataSource) {
      return [];
    }
    var lookupDataSourceOptions = this.normalizeLookupDataSource(column.lookup);
    if (column.calculateCellValue !== column.defaultCalculateCellValue) {
      return lookupDataSourceOptions;
    }
    var hasGroupPaging = dataSource.remoteOperations().groupPaging;
    var hasLookupOptimization = column.displayField && isString(column.displayField);
    var cachedUniqueRelevantItems;
    var previousTake;
    var previousSkip;
    var sliceItems = (items, loadOptions) => {
      var _a2;
      var start = null !== (_a2 = loadOptions.skip) && void 0 !== _a2 ? _a2 : 0;
      var end = loadOptions.take ? start + loadOptions.take : items.length;
      return items.slice(start, end);
    };
    var lookupDataSource = _extends(_extends({}, lookupDataSourceOptions), {
      __dataGridSourceFilter: filter,
      load: (loadOptions) => {
        var d = new Deferred();
        ((loadOptions2) => {
          var group = normalizeGroupingLoadOptions(hasLookupOptimization ? [column.dataField, column.displayField] : column.dataField);
          var d2 = new Deferred();
          var canUseCache = cachedUniqueRelevantItems && (!hasGroupPaging || loadOptions2.skip === previousSkip && loadOptions2.take === previousTake);
          if (canUseCache) {
            d2.resolve(sliceItems(cachedUniqueRelevantItems, loadOptions2));
          } else {
            previousSkip = loadOptions2.skip;
            previousTake = loadOptions2.take;
            dataSource.load({
              filter,
              group,
              take: hasGroupPaging ? loadOptions2.take : void 0,
              skip: hasGroupPaging ? loadOptions2.skip : void 0
            }).done((items) => {
              cachedUniqueRelevantItems = items;
              d2.resolve(hasGroupPaging ? items : sliceItems(items, loadOptions2));
            }).fail(d2.fail);
          }
          return d2;
        })(loadOptions).done((items) => {
          if (0 === items.length) {
            d.resolve([]);
            return;
          }
          var filter2 = this.combineFilters(items.flatMap((data3) => data3.key).map((key) => [column.lookup.valueExpr, key]), "or");
          var newDataSource = new DataSource(_extends(_extends(_extends({}, lookupDataSourceOptions), loadOptions), {
            filter: this.combineFilters([filter2, loadOptions.filter], "and"),
            paginate: false
          }));
          newDataSource.load().done(d.resolve).fail(d.fail);
        }).fail(d.fail);
        return d;
      },
      key: column.lookup.valueExpr,
      byKey(key) {
        var d = Deferred();
        this.load({
          filter: [column.lookup.valueExpr, "=", key]
        }).done((arr) => {
          d.resolve(arr[0]);
        });
        return d.promise();
      }
    });
    return lookupDataSource;
  },
  logHeaderFilterDeprecatedWarningIfNeed(component) {
    var logWarning = component._logDeprecatedOptionWarning.bind(component);
    if (isDefined(component.option("headerFilter.allowSearch"))) {
      logWarning("headerFilter.allowSearch", {
        since: "23.1",
        alias: "headerFilter.search.enabled"
      });
    }
    if (isDefined(component.option("headerFilter.searchTimeout"))) {
      logWarning("headerFilter.searchTimeout", {
        since: "23.1",
        alias: "headerFilter.search.timeout"
      });
    }
    var specificName = "dxPivotGrid" === component.NAME ? "dataSource.fields" : "columns";
    var columns2 = component.option(specificName);
    if (!Array.isArray(columns2)) {
      return;
    }
    var logSpecificDeprecatedWarningIfNeed = (columns3) => {
      columns3.forEach((column) => {
        var _a2;
        var headerFilter = column.headerFilter || {};
        if (isDefined(headerFilter.allowSearch)) {
          logWarning("".concat(specificName, "[].headerFilter.allowSearch"), {
            since: "23.1",
            alias: "".concat(specificName, "[].headerFilter.search.enabled")
          });
        }
        if (isDefined(headerFilter.searchMode)) {
          logWarning("".concat(specificName, "[].headerFilter.searchMode"), {
            since: "23.1",
            alias: "".concat(specificName, "[].headerFilter.search.mode")
          });
        }
        if (null === (_a2 = column.columns) || void 0 === _a2 ? void 0 : _a2.length) {
          logSpecificDeprecatedWarningIfNeed(column.columns);
        }
      });
    };
    logSpecificDeprecatedWarningIfNeed(columns2);
  }
};

// node_modules/devextreme/esm/__internal/grids/grid_core/views/m_columns_view.js
var SCROLL_CONTAINER_CLASS = "scroll-container";
var SCROLLABLE_SIMULATED_CLASS = "scrollable-simulated";
var GROUP_SPACE_CLASS = "group-space";
var CONTENT_CLASS = "content";
var TABLE_CLASS = "table";
var TABLE_FIXED_CLASS = "table-fixed";
var CONTENT_FIXED_CLASS = "content-fixed";
var ROW_CLASS = "dx-row";
var GROUP_ROW_CLASS = "dx-group-row";
var GROUP_CELL_CLASS = "dx-group-cell";
var DETAIL_ROW_CLASS = "dx-master-detail-row";
var FILTER_ROW_CLASS = "filter-row";
var ERROR_ROW_CLASS = "dx-error-row";
var CELL_UPDATED_ANIMATION_CLASS = "cell-updated-animation";
var HIDDEN_COLUMNS_WIDTH = "0.0001px";
var CELL_HINT_VISIBLE = "dxCellHintVisible";
var FORM_FIELD_ITEM_CONTENT_CLASS = "dx-field-item-content";
var appendElementTemplate = {
  render(options2) {
    options2.container.append(options2.content);
  }
};
var subscribeToRowEvents = function(that, $table) {
  var touchTarget;
  var touchCurrentTarget;
  var timeoutId;
  function clearTouchTargets(timeout) {
    return setTimeout(() => {
      touchTarget = touchCurrentTarget = null;
    }, timeout);
  }
  events_engine_default.on($table, "touchstart touchend", ".dx-row", (e) => {
    clearTimeout(timeoutId);
    if ("touchstart" === e.type) {
      touchTarget = e.target;
      touchCurrentTarget = e.currentTarget;
      timeoutId = clearTouchTargets(1e3);
    } else {
      timeoutId = clearTouchTargets();
    }
  });
  events_engine_default.on($table, [CLICK_EVENT_NAME, DBLCLICK_EVENT_NAME, pointer_default.down].join(" "), ".dx-row", that.createAction((e) => {
    var {
      event
    } = e;
    if (touchTarget) {
      event.target = touchTarget;
      event.currentTarget = touchCurrentTarget;
    }
    if (!renderer_default(event.target).closest("a").length) {
      e.rowIndex = that.getRowIndex(event.currentTarget);
      if (e.rowIndex >= 0) {
        e.rowElement = getPublicElement(renderer_default(event.currentTarget));
        e.columns = that.getColumns();
        if (event.type === pointer_default.down) {
          that._rowPointerDown(e);
        } else if (event.type === CLICK_EVENT_NAME) {
          that._rowClick(e);
        } else {
          that._rowDblClick(e);
        }
      }
    }
  }));
};
var getWidthStyle = function(width) {
  if ("auto" === width) {
    return "";
  }
  return isNumeric(width) ? "".concat(width, "px") : width;
};
var setCellWidth = function(cell, column, width) {
  cell.style.width = cell.style.maxWidth = "auto" === column.width ? "" : width;
};
var copyAttributes = function(element, newElement) {
  if (!element || !newElement) {
    return;
  }
  var oldAttributes = element.attributes;
  var newAttributes = newElement.attributes;
  var i;
  for (i = 0; i < oldAttributes.length; i++) {
    var name2 = oldAttributes[i].nodeName;
    if (!newElement.hasAttribute(name2)) {
      element.removeAttribute(name2);
    }
  }
  for (i = 0; i < newAttributes.length; i++) {
    element.setAttribute(newAttributes[i].nodeName, newAttributes[i].nodeValue);
  }
};
var removeHandler = function(templateDeferred) {
  templateDeferred.resolve();
};
var normalizeWidth = (width) => {
  if ("number" === typeof width) {
    return "".concat(width.toFixed(3), "px");
  }
  if ("adaptiveHidden" === width) {
    return HIDDEN_COLUMNS_WIDTH;
  }
  return width;
};
var viewWithColumnStateMixin = m_modules_default.View.inherit(m_column_state_mixin_default);
var ColumnsView = class extends viewWithColumnStateMixin {
  _createScrollableOptions() {
    var scrollingOptions = this.option("scrolling");
    var useNativeScrolling = this.option("scrolling.useNative");
    var options2 = extend({}, scrollingOptions, {
      direction: "both",
      bounceEnabled: false,
      useKeyboard: false
    });
    if (void 0 === useNativeScrolling) {
      useNativeScrolling = true;
    }
    if ("auto" === useNativeScrolling) {
      delete options2.useNative;
      delete options2.useSimulatedScrollbar;
    } else {
      options2.useNative = !!useNativeScrolling;
      options2.useSimulatedScrollbar = !useNativeScrolling;
    }
    return options2;
  }
  _updateCell($cell, parameters) {
    if (parameters.rowType) {
      this._cellPrepared($cell, parameters);
    }
  }
  _createCell(options2) {
    var {
      column
    } = options2;
    var alignment = column.alignment || getDefaultAlignment(this.option("rtlEnabled"));
    var cell = dom_adapter_default.createElement("td");
    cell.style.textAlign = alignment;
    var $cell = renderer_default(cell);
    if ("data" === options2.rowType && column.headerId && !column.type) {
      if (this.component.option("showColumnHeaders")) {
        this.setAria("describedby", column.headerId, $cell);
      }
    }
    if (column.cssClass) {
      $cell.addClass(column.cssClass);
    }
    if (Array.isArray(column.elementAttr)) {
      column.elementAttr.forEach((_ref) => {
        var {
          name: name2,
          value: value2
        } = _ref;
        $cell.attr(name2, value2);
      });
    }
    if ("expand" === column.command) {
      $cell.addClass(column.cssClass);
      $cell.addClass(this.addWidgetPrefix(GROUP_SPACE_CLASS));
    }
    if (column.colspan > 1) {
      $cell.attr("colSpan", column.colspan);
    } else if (!column.isBand && "auto" !== column.visibleWidth && this.option("columnAutoWidth")) {
      if (column.width || column.minWidth) {
        cell.style.minWidth = getWidthStyle(column.minWidth || column.width);
      }
      if (column.width) {
        setCellWidth(cell, column, getWidthStyle(column.width));
      }
    }
    return $cell;
  }
  _createRow(rowObject, tagName) {
    tagName = tagName || "tr";
    var $element = renderer_default("<".concat(tagName, ">")).addClass(ROW_CLASS);
    this.setAria("role", "row", $element);
    return $element;
  }
  _isAltRow(row) {
    return row && row.dataIndex % 2 === 1;
  }
  _createTable(columns2, isAppend) {
    var $table = renderer_default("<table>").addClass(this.addWidgetPrefix(TABLE_CLASS)).addClass(this.addWidgetPrefix(TABLE_FIXED_CLASS));
    if (columns2 && !isAppend) {
      $table.attr("id", "dx-".concat(new guid_default())).append(this._createColGroup(columns2));
      if (browser_default.safari) {
        $table.append(renderer_default("<thead>").append("<tr>"));
      }
      this.setAria("role", "presentation", $table);
    } else {
      this.setAria("hidden", true, $table);
    }
    this.setAria("role", "presentation", renderer_default("<tbody>").appendTo($table));
    if (isAppend) {
      return $table;
    }
    if (browser_default.mozilla) {
      events_engine_default.on($table, "mousedown", "td", (e) => {
        if (e.ctrlKey) {
          e.preventDefault();
        }
      });
    }
    if (this.option("cellHintEnabled")) {
      events_engine_default.on($table, "mousemove", ".dx-row > td", this.createAction((args) => {
        var e = args.event;
        var $element = renderer_default(e.target);
        var $cell = renderer_default(e.currentTarget);
        var $row = $cell.parent();
        var visibleColumns = this._columnsController.getVisibleColumns();
        var rowOptions = $row.data("options");
        var columnIndex = $cell.index();
        var cellOptions = rowOptions && rowOptions.cells && rowOptions.cells[columnIndex];
        var column = cellOptions ? cellOptions.column : visibleColumns[columnIndex];
        var isHeaderRow = $row.hasClass("dx-header-row");
        var isDataRow2 = $row.hasClass("dx-data-row");
        var isMasterDetailRow = $row.hasClass(DETAIL_ROW_CLASS);
        var isGroupRow3 = $row.hasClass(GROUP_ROW_CLASS);
        var isFilterRow = $row.hasClass(this.addWidgetPrefix(FILTER_ROW_CLASS));
        var isDataRowWithTemplate = isDataRow2 && (!column || column.cellTemplate);
        var isEditorShown = isDataRow2 && cellOptions && (rowOptions.isEditing || cellOptions.isEditing || (null === column || void 0 === column ? void 0 : column.showEditorAlways));
        var isHeaderRowWithTemplate = isHeaderRow && (!column || column.headerCellTemplate);
        var isGroupCellWithTemplate = isGroupRow3 && (!column || column.groupIndex && column.groupCellTemplate);
        var shouldShowHint = !isMasterDetailRow && !isFilterRow && !isEditorShown && !isDataRowWithTemplate && !isHeaderRowWithTemplate && !isGroupCellWithTemplate;
        if (shouldShowHint) {
          if ($element.data(CELL_HINT_VISIBLE)) {
            $element.removeAttr("title");
            $element.data(CELL_HINT_VISIBLE, false);
          }
          var difference = $element[0].scrollWidth - $element[0].clientWidth;
          if (difference > 0 && !isDefined($element.attr("title"))) {
            $element.attr("title", $element.text());
            $element.data(CELL_HINT_VISIBLE, true);
          }
        }
      }));
    }
    var getOptions = (event) => {
      var $cell = renderer_default(event.currentTarget);
      var $fieldItemContent = renderer_default(event.target).closest(".".concat(FORM_FIELD_ITEM_CONTENT_CLASS));
      var $row = $cell.parent();
      var rowOptions = $row.data("options");
      var options2 = rowOptions && rowOptions.cells && rowOptions.cells[$cell.index()];
      if (!$cell.closest("table").is(event.delegateTarget)) {
        return;
      }
      var resultOptions = extend({}, options2, {
        cellElement: getPublicElement($cell),
        event,
        eventType: event.type
      });
      resultOptions.rowIndex = this.getRowIndex($row);
      if ($fieldItemContent.length) {
        var formItemOptions = $fieldItemContent.data("dx-form-item");
        if (formItemOptions.column) {
          resultOptions.column = formItemOptions.column;
          resultOptions.columnIndex = this._columnsController.getVisibleIndex(resultOptions.column.index);
        }
      }
      return resultOptions;
    };
    events_engine_default.on($table, "mouseover", ".dx-row > td", (e) => {
      var options2 = getOptions(e);
      options2 && this.executeAction("onCellHoverChanged", options2);
    });
    events_engine_default.on($table, "mouseout", ".dx-row > td", (e) => {
      var options2 = getOptions(e);
      options2 && this.executeAction("onCellHoverChanged", options2);
    });
    events_engine_default.on($table, CLICK_EVENT_NAME, ".dx-row > td", (e) => {
      var options2 = getOptions(e);
      options2 && this.executeAction("onCellClick", options2);
    });
    events_engine_default.on($table, DBLCLICK_EVENT_NAME, ".dx-row > td", (e) => {
      var options2 = getOptions(e);
      options2 && this.executeAction("onCellDblClick", options2);
    });
    subscribeToRowEvents(this, $table);
    return $table;
  }
  _rowPointerDown() {
  }
  _rowClick() {
  }
  _rowDblClick() {
  }
  _createColGroup(columns2) {
    var colgroupElement = renderer_default("<colgroup>");
    for (var i = 0; i < columns2.length; i++) {
      var colspan = columns2[i].colspan || 1;
      for (var j = 0; j < colspan; j++) {
        colgroupElement.append(this._createCol(columns2[i]));
      }
    }
    return colgroupElement;
  }
  _createCol(column) {
    var width = column.visibleWidth || column.width;
    if ("adaptiveHidden" === width) {
      width = HIDDEN_COLUMNS_WIDTH;
    }
    var col = renderer_default("<col>");
    setWidth(col, width);
    return col;
  }
  renderDelayedTemplates(change) {
    var delayedTemplates = this._delayedTemplates;
    var syncTemplates = delayedTemplates.filter((template) => !template.async);
    var asyncTemplates = delayedTemplates.filter((template) => template.async);
    this._delayedTemplates = [];
    this._renderDelayedTemplatesCore(syncTemplates, false, change);
    this._renderDelayedTemplatesCoreAsync(asyncTemplates);
  }
  _renderDelayedTemplatesCoreAsync(templates) {
    if (templates.length) {
      var templateTimeout = getWindow().setTimeout(() => {
        this._templateTimeouts.delete(templateTimeout);
        this._renderDelayedTemplatesCore(templates, true);
      });
      this._templateTimeouts.add(templateTimeout);
    }
  }
  _renderDelayedTemplatesCore(templates, isAsync, change) {
    var date = /* @__PURE__ */ new Date();
    while (templates.length) {
      var templateParameters = templates.shift();
      var {
        options: options2
      } = templateParameters;
      var doc = dom_adapter_default.getRootNode(renderer_default(options2.container).get(0));
      var needWaitAsyncTemplates = this.needWaitAsyncTemplates();
      if (!isAsync || renderer_default(options2.container).closest(doc).length || needWaitAsyncTemplates) {
        if (change) {
          options2.change = change;
        }
        templateParameters.template.render(options2);
      }
      if (isAsync && /* @__PURE__ */ new Date() - date > 30) {
        this._renderDelayedTemplatesCoreAsync(templates);
        break;
      }
    }
    if (!templates.length && this._delayedTemplates.length) {
      this.renderDelayedTemplates();
    }
  }
  _processTemplate(template, options2) {
    var renderingTemplate;
    if (template && template.render && !isRenderer(template)) {
      renderingTemplate = {
        allowRenderToDetachedContainer: template.allowRenderToDetachedContainer,
        render(options3) {
          template.render(options3.container, options3.model, options3.change);
          options3.deferred && options3.deferred.resolve();
        }
      };
    } else if (isFunction(template)) {
      renderingTemplate = {
        render(options3) {
          var renderedTemplate = template(getPublicElement(options3.container), options3.model, options3.change);
          if (renderedTemplate && (renderedTemplate.nodeType || isRenderer(renderedTemplate))) {
            options3.container.append(renderedTemplate);
          }
          options3.deferred && options3.deferred.resolve();
        }
      };
    } else {
      var templateID = isString(template) ? template : renderer_default(template).attr("id");
      if (!templateID) {
        renderingTemplate = this.getTemplate(template);
      } else {
        if (!this._templatesCache[templateID]) {
          this._templatesCache[templateID] = this.getTemplate(template);
        }
        renderingTemplate = this._templatesCache[templateID];
      }
    }
    return renderingTemplate;
  }
  renderTemplate(container, template, options2, allowRenderToDetachedContainer, change) {
    var _a2;
    var renderingTemplate = this._processTemplate(template, options2);
    var {
      column
    } = options2;
    var isDataRow2 = "data" === options2.rowType;
    var templateDeferred = new Deferred();
    var templateOptions = {
      container,
      model: options2,
      deferred: templateDeferred,
      onRendered: () => {
        if (this.isDisposed()) {
          templateDeferred.reject();
        } else {
          templateDeferred.resolve();
        }
      }
    };
    if (renderingTemplate) {
      options2.component = this.component;
      var columnAsync = column && (column.renderAsync && isDataRow2 || this.option("renderAsync") && (false !== column.renderAsync && (column.command || column.showEditorAlways) && isDataRow2 || "filter" === options2.rowType));
      var async = null !== (_a2 = options2.renderAsync) && void 0 !== _a2 ? _a2 : columnAsync;
      if ((renderingTemplate.allowRenderToDetachedContainer || allowRenderToDetachedContainer) && !async) {
        renderingTemplate.render(templateOptions);
      } else {
        this._delayedTemplates.push({
          template: renderingTemplate,
          options: templateOptions,
          async
        });
      }
      this._templateDeferreds.add(templateDeferred);
      events_engine_default.on(container, removeEvent, removeHandler.bind(null, templateDeferred));
    } else {
      templateDeferred.reject();
    }
    return templateDeferred.promise().always(() => {
      this._templateDeferreds.delete(templateDeferred);
    });
  }
  _getBodies(tableElement) {
    return renderer_default(tableElement).children("tbody").not(".dx-header").not(".dx-footer");
  }
  _needWrapRow($tableElement) {
    var _a2;
    var hasRowTemplate = !!this.option().rowTemplate;
    return hasRowTemplate && !!(null === (_a2 = this._getBodies($tableElement)) || void 0 === _a2 ? void 0 : _a2.filter(".".concat(ROW_CLASS)).length);
  }
  _wrapRowIfNeed($table, $row, isRefreshing) {
    var $tableElement = isRefreshing ? $table || this._tableElement : this._tableElement || $table;
    var needWrapRow = this._needWrapRow($tableElement);
    if (needWrapRow) {
      var $tbody = renderer_default("<tbody>").addClass($row.attr("class"));
      this.setAria("role", "presentation", $tbody);
      return $tbody.append($row);
    }
    return $row;
  }
  _appendRow($table, $row, appendTemplate) {
    appendTemplate = appendTemplate || appendElementTemplate;
    appendTemplate.render({
      content: $row,
      container: $table
    });
  }
  _resizeCore() {
    var scrollLeft = this._scrollLeft;
    if (scrollLeft >= 0) {
      this._scrollLeft = 0;
      this.scrollTo({
        left: scrollLeft
      });
    }
  }
  _renderCore(e) {
    var $root = this.element().parent();
    if (!$root || $root.parent().length) {
      this.renderDelayedTemplates(e);
    }
  }
  _renderTable(options2) {
    options2 = options2 || {};
    options2.columns = this._columnsController.getVisibleColumns();
    var changeType = options2.change && options2.change.changeType;
    var $table = this._createTable(options2.columns, "append" === changeType || "prepend" === changeType || "update" === changeType);
    this._renderRows($table, options2);
    return $table;
  }
  _renderRows($table, options2) {
    var rows = this._getRows(options2.change);
    var columnIndices = options2.change && options2.change.columnIndices || [];
    var changeTypes = options2.change && options2.change.changeTypes || [];
    for (var i = 0; i < rows.length; i++) {
      this._renderRow($table, extend({
        row: rows[i],
        columnIndices: columnIndices[i],
        changeType: changeTypes[i]
      }, options2));
    }
  }
  _renderRow($table, options2) {
    if (!options2.columnIndices) {
      options2.row.cells = [];
    }
    var $row = this._createRow(options2.row);
    var $wrappedRow = this._wrapRowIfNeed($table, $row);
    if ("remove" !== options2.changeType) {
      this._renderCells($row, options2);
    }
    this._appendRow($table, $wrappedRow);
    var rowOptions = extend({
      columns: options2.columns
    }, options2.row);
    this._addWatchMethod(rowOptions, options2.row);
    this._rowPrepared($wrappedRow, rowOptions, options2.row);
  }
  _needRenderCell(columnIndex, columnIndices) {
    return !columnIndices || columnIndices.indexOf(columnIndex) >= 0;
  }
  _renderCells($row, options2) {
    var columnIndex = 0;
    var {
      row
    } = options2;
    var {
      columns: columns2
    } = options2;
    for (var i = 0; i < columns2.length; i++) {
      if (this._needRenderCell(i, options2.columnIndices)) {
        this._renderCell($row, extend({
          column: columns2[i],
          columnIndex,
          value: row.values && row.values[columnIndex],
          oldValue: row.oldValues && row.oldValues[columnIndex]
        }, options2));
      }
      if (columns2[i].colspan > 1) {
        columnIndex += columns2[i].colspan;
      } else {
        columnIndex++;
      }
    }
  }
  _updateCells($rowElement, $newRowElement, columnIndices) {
    var $cells = $rowElement.children();
    var $newCells = $newRowElement.children();
    var highlightChanges = this.option("highlightChanges");
    var cellUpdatedClass = this.addWidgetPrefix(CELL_UPDATED_ANIMATION_CLASS);
    columnIndices.forEach((columnIndex, index2) => {
      var $cell = $cells.eq(columnIndex);
      var $newCell = $newCells.eq(index2);
      $cell.replaceWith($newCell);
      if (highlightChanges && !$newCell.hasClass("dx-command-expand")) {
        $newCell.addClass(cellUpdatedClass);
      }
    });
    copyAttributes($rowElement.get(0), $newRowElement.get(0));
  }
  _setCellAriaAttributes($cell, cellOptions) {
    if ("freeSpace" !== cellOptions.rowType) {
      this.setAria("role", "gridcell", $cell);
      var columnIndexOffset = this._columnsController.getColumnIndexOffset();
      var ariaColIndex = cellOptions.columnIndex + columnIndexOffset + 1;
      this.setAria("colindex", ariaColIndex, $cell);
    }
  }
  _renderCell($row, options2) {
    var cellOptions = this._getCellOptions(options2);
    if (options2.columnIndices) {
      if (options2.row.cells) {
        var cellIndex = options2.row.cells.findIndex((cell) => cell.columnIndex === cellOptions.columnIndex);
        options2.row.cells[cellIndex] = cellOptions;
      }
    } else {
      options2.row.cells.push(cellOptions);
    }
    var $cell = this._createCell(cellOptions);
    this._setCellAriaAttributes($cell, cellOptions);
    this._renderCellContent($cell, cellOptions, options2);
    $row.get(0).appendChild($cell.get(0));
    return $cell;
  }
  _renderCellContent($cell, options2, renderOptions) {
    var template = this._getCellTemplate(options2);
    when(!template || this.renderTemplate($cell, template, options2, void 0, renderOptions.change)).done(() => {
      this._updateCell($cell, options2);
    });
  }
  _getCellTemplate(options2) {
  }
  _getRows(change) {
    return [];
  }
  _getCellOptions(options2) {
    var cellOptions = {
      column: options2.column,
      columnIndex: options2.columnIndex,
      rowType: options2.row.rowType,
      isAltRow: this._isAltRow(options2.row)
    };
    this._addWatchMethod(cellOptions);
    return cellOptions;
  }
  _addWatchMethod(options2, source) {
    if (!this.option("repaintChangesOnly")) {
      return;
    }
    var watchers = [];
    source = source || options2;
    source.watch = source.watch || function(getter, updateValueFunc, updateRowFunc) {
      var oldValue = getter(source.data);
      var watcher = function(row) {
        if (row && updateRowFunc) {
          updateRowFunc(row);
        }
        var newValue = getter(source.data);
        if (JSON.stringify(oldValue) !== JSON.stringify(newValue)) {
          if (row) {
            updateValueFunc(newValue);
          }
          oldValue = newValue;
        }
      };
      watchers.push(watcher);
      return function() {
        var index2 = watchers.indexOf(watcher);
        if (index2 >= 0) {
          watchers.splice(index2, 1);
        }
      };
    };
    source.update = source.update || function(row, keepRow) {
      if (row) {
        this.data = options2.data = row.data;
        this.rowIndex = options2.rowIndex = row.rowIndex;
        this.dataIndex = options2.dataIndex = row.dataIndex;
        this.isExpanded = options2.isExpanded = row.isExpanded;
        if (options2.row && !keepRow) {
          options2.row = row;
        }
      }
      watchers.forEach((watcher) => {
        watcher(row);
      });
    };
    if (source !== options2) {
      options2.watch = source.watch.bind(source);
    }
    return options2;
  }
  _cellPrepared(cell, options2) {
    options2.cellElement = getPublicElement(renderer_default(cell));
    this.executeAction("onCellPrepared", options2);
  }
  _rowPrepared($row, options2, row) {
    data($row.get(0), "options", options2);
    options2.rowElement = getPublicElement($row);
    this.executeAction("onRowPrepared", options2);
  }
  _columnOptionChanged(e) {
    var {
      optionNames
    } = e;
    if (m_utils_default.checkChanges(optionNames, ["width", "visibleWidth"])) {
      var visibleColumns = this._columnsController.getVisibleColumns();
      var widths = visibleColumns.map((column) => column.visibleWidth || column.width);
      this.setColumnWidths({
        widths,
        optionNames
      });
      return;
    }
    if (!this._requireReady) {
      this.render();
    }
  }
  getCellIndex($cell) {
    var cellIndex = $cell.length ? $cell[0].cellIndex : -1;
    return cellIndex;
  }
  getTableElements() {
    return this._tableElement || renderer_default();
  }
  getTableElement(isFixedTableRendering) {
    return this._tableElement;
  }
  setTableElement(tableElement, isFixedTableRendering) {
    this._tableElement = tableElement;
  }
  optionChanged(args) {
    super.optionChanged(args);
    switch (args.name) {
      case "cellHintEnabled":
      case "onCellPrepared":
      case "onRowPrepared":
      case "onCellHoverChanged":
      case "keyboardNavigation":
        this._invalidate(true, true);
        args.handled = true;
    }
  }
  init() {
    this._scrollLeft = -1;
    this._columnsController = this.getController("columns");
    this._dataController = this.getController("data");
    this._delayedTemplates = [];
    this._templateDeferreds = /* @__PURE__ */ new Set();
    this._templatesCache = {};
    this._templateTimeouts = /* @__PURE__ */ new Set();
    this.createAction("onCellClick");
    this.createAction("onRowClick");
    this.createAction("onCellDblClick");
    this.createAction("onRowDblClick");
    this.createAction("onCellHoverChanged", {
      excludeValidators: ["disabled", "readOnly"]
    });
    this.createAction("onCellPrepared", {
      excludeValidators: ["disabled", "readOnly"],
      category: "rendering"
    });
    this.createAction("onRowPrepared", {
      excludeValidators: ["disabled", "readOnly"],
      category: "rendering",
      afterExecute: (e) => {
        this._afterRowPrepared(e);
      }
    });
    this._columnsController.columnsChanged.add(this._columnOptionChanged.bind(this));
    this._dataController && this._dataController.changed.add(this._handleDataChanged.bind(this));
  }
  _afterRowPrepared(e) {
  }
  _handleDataChanged() {
  }
  callbackNames() {
    return ["scrollChanged"];
  }
  _updateScrollLeftPosition() {
    var scrollLeft = this._scrollLeft;
    if (scrollLeft >= 0) {
      this._scrollLeft = 0;
      this.scrollTo({
        left: scrollLeft
      });
    }
  }
  scrollTo(pos) {
    var $element = this.element();
    var $scrollContainer = $element && $element.children(".".concat(this.addWidgetPrefix(SCROLL_CONTAINER_CLASS))).not(".".concat(this.addWidgetPrefix(CONTENT_FIXED_CLASS)));
    if (isDefined(pos) && isDefined(pos.left) && this._scrollLeft !== pos.left) {
      this._scrollLeft = pos.left;
      $scrollContainer && $scrollContainer.scrollLeft(pos.left);
    }
  }
  _getContent(isFixedTableRendering) {
    var _a2;
    return null === (_a2 = this._tableElement) || void 0 === _a2 ? void 0 : _a2.parent();
  }
  _removeContent(isFixedTableRendering) {
    var $scrollContainer = this._getContent(isFixedTableRendering);
    if (null === $scrollContainer || void 0 === $scrollContainer ? void 0 : $scrollContainer.length) {
      $scrollContainer.remove();
    }
  }
  _wrapTableInScrollContainer($table, isFixedTableRendering) {
    var $scrollContainer = renderer_default("<div>");
    var useNative = this.option("scrolling.useNative");
    if (false === useNative || "auto" === useNative && !nativeScrolling) {
      $scrollContainer.addClass(this.addWidgetPrefix(SCROLLABLE_SIMULATED_CLASS));
    }
    events_engine_default.on($scrollContainer, "scroll", () => {
      var scrollLeft = $scrollContainer.scrollLeft();
      if (scrollLeft !== this._scrollLeft) {
        this.scrollChanged.fire({
          left: scrollLeft
        }, this.name);
      }
    });
    $scrollContainer.addClass(this.addWidgetPrefix(CONTENT_CLASS)).addClass(this.addWidgetPrefix(SCROLL_CONTAINER_CLASS)).append($table).appendTo(this.element());
    this.setAria("role", "presentation", $scrollContainer);
    return $scrollContainer;
  }
  needWaitAsyncTemplates() {
    return this.option("templatesRenderAsynchronously") && false === this.option("renderAsync");
  }
  waitAsyncTemplates() {
    var forceWaiting = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : false;
    var result2 = new Deferred();
    var needWaitAsyncTemplates = forceWaiting || this.needWaitAsyncTemplates();
    if (!needWaitAsyncTemplates) {
      return result2.resolve();
    }
    var waitTemplatesRecursion = () => when.apply(this, Array.from(this._templateDeferreds)).done(() => {
      if (this.isDisposed()) {
        result2.reject();
      } else if (this._templateDeferreds.size > 0) {
        waitTemplatesRecursion();
      } else {
        result2.resolve();
      }
    }).fail(result2.reject);
    waitTemplatesRecursion();
    return result2.promise();
  }
  _updateContent($newTableElement, change, isFixedTableRendering) {
    return this.waitAsyncTemplates().done(() => {
      this._removeContent(isFixedTableRendering);
      this.setTableElement($newTableElement, isFixedTableRendering);
      this._wrapTableInScrollContainer($newTableElement, isFixedTableRendering);
    });
  }
  _findContentElement() {
  }
  _getWidths($cellElements) {
    if (!$cellElements) {
      return [];
    }
    var result2 = [];
    var cellElements = $cellElements.toArray();
    cellElements.forEach((cell) => {
      var width = cell.offsetWidth;
      if (cell.getBoundingClientRect) {
        var rect = getBoundingRect(cell);
        if (rect.width > cell.offsetWidth - 1) {
          width = rect.width;
        }
      }
      result2.push(width);
    });
    return result2;
  }
  getColumnWidths($tableElement) {
    (this.option("forceApplyBindings") || noop2)();
    $tableElement = null !== $tableElement && void 0 !== $tableElement ? $tableElement : this.getTableElement();
    if ($tableElement) {
      var $rows = $tableElement.children("tbody:not(.dx-header)").children();
      for (var i = 0; i < $rows.length; i++) {
        var $row = $rows.eq(i);
        var isGroupRow3 = $row.hasClass(GROUP_ROW_CLASS);
        var isDetailRow2 = $row.hasClass(DETAIL_ROW_CLASS);
        var isErrorRow = $row.hasClass(ERROR_ROW_CLASS);
        var isRowVisible = "none" !== $row.get(0).style.display && !$row.hasClass("dx-state-invisible");
        var isRelevantRow = !isGroupRow3 && !isDetailRow2 && !isErrorRow;
        if (isRowVisible && isRelevantRow) {
          var $cells = $row.children("td");
          var result2 = this._getWidths($cells);
          return result2;
        }
      }
    }
    return [];
  }
  getVisibleColumnIndex(columnIndex, rowIndex) {
    return columnIndex;
  }
  setColumnWidths(_ref2) {
    var {
      widths,
      optionNames
    } = _ref2;
    var $tableElement = this.getTableElement();
    if (!(null === $tableElement || void 0 === $tableElement ? void 0 : $tableElement.length) || !widths) {
      return;
    }
    var columns2 = this.getColumns();
    var columnAutoWidth = this.option("columnAutoWidth");
    var $cols = $tableElement.children("colgroup").children("col");
    $cols.toArray().forEach((col) => col.removeAttribute("style"));
    columns2.forEach((column, columnIndex) => {
      if (columnAutoWidth && column.width && !column.command) {
        var width = getWidthStyle(column.visibleWidth || column.width);
        var minWidth = getWidthStyle(column.minWidth || width);
        var $rows = $tableElement.children().children(".dx-row").not(".".concat(DETAIL_ROW_CLASS));
        for (var rowIndex = 0; rowIndex < $rows.length; rowIndex++) {
          var visibleIndex = this.getVisibleColumnIndex(columnIndex, rowIndex);
          if (visibleIndex >= 0) {
            var $row = $rows.eq(rowIndex);
            var $cell = $row.hasClass(GROUP_ROW_CLASS) ? $row.find("td[aria-colindex='".concat(visibleIndex + 1, "']:not(.").concat(GROUP_CELL_CLASS, ")")) : $row.find("td").eq(visibleIndex);
            if ($cell.length) {
              var cell = $cell.get(0);
              setCellWidth(cell, column, width);
              cell.style.minWidth = minWidth;
            }
          }
        }
      }
      var colWidth = normalizeWidth(widths[columnIndex]);
      if (isDefined(colWidth)) {
        setWidth($cols.eq(columnIndex), colWidth);
      }
    });
  }
  getCellElements(rowIndex) {
    return this._getCellElementsCore(rowIndex);
  }
  _getCellElementsCore(rowIndex) {
    if (rowIndex < 0) {
      return;
    }
    var $row = this._getRowElements().eq(rowIndex);
    return $row.children();
  }
  _getCellElement(rowIndex, columnIdentifier) {
    var $cells = this.getCellElements(rowIndex);
    var columnVisibleIndex = this._getVisibleColumnIndex($cells, rowIndex, columnIdentifier);
    if (!(null === $cells || void 0 === $cells ? void 0 : $cells.length) || columnVisibleIndex < 0) {
      return;
    }
    var $cell = $cells.eq(columnVisibleIndex);
    return $cell.length > 0 ? $cell : void 0;
  }
  _getRowElement(rowIndex) {
    var that = this;
    var $rowElement = renderer_default();
    var $tableElements = that.getTableElements();
    each($tableElements, (_, tableElement) => {
      $rowElement = $rowElement.add(that._getRowElements(renderer_default(tableElement)).eq(rowIndex));
    });
    if ($rowElement.length) {
      return $rowElement;
    }
    return;
  }
  getCellElement(rowIndex, columnIdentifier) {
    var $cell = this._getCellElement(rowIndex, columnIdentifier);
    if ($cell) {
      return getPublicElement($cell);
    }
    return;
  }
  getRowElement(rowIndex) {
    var $rows = this._getRowElement(rowIndex);
    var elements = [];
    if ($rows && !getPublicElement($rows).get) {
      for (var i = 0; i < $rows.length; i++) {
        elements.push($rows[i]);
      }
    } else {
      elements = $rows;
    }
    return elements;
  }
  _getVisibleColumnIndex($cells, rowIndex, columnIdentifier) {
    if (isString(columnIdentifier)) {
      var columnIndex = this._columnsController.columnOption(columnIdentifier, "index");
      return this._columnsController.getVisibleIndex(columnIndex);
    }
    return columnIdentifier;
  }
  getColumnElements() {
  }
  getColumns(rowIndex) {
    return this._columnsController.getVisibleColumns(rowIndex);
  }
  getCell(cellPosition, rows, cells) {
    var $rows = rows || this._getRowElements();
    var $cells;
    if ($rows.length > 0 && cellPosition.rowIndex >= 0) {
      if ("virtual" !== this.option("scrolling.mode") && "virtual" !== this.option("scrolling.rowRenderingMode")) {
        cellPosition.rowIndex = cellPosition.rowIndex < $rows.length ? cellPosition.rowIndex : $rows.length - 1;
      }
      $cells = cells || this.getCellElements(cellPosition.rowIndex);
      if ((null === $cells || void 0 === $cells ? void 0 : $cells.length) > 0) {
        return $cells.eq($cells.length > cellPosition.columnIndex ? cellPosition.columnIndex : $cells.length - 1);
      }
    }
  }
  getRowsCount() {
    var tableElement = this.getTableElement();
    if (tableElement && 1 === tableElement.length) {
      return tableElement[0].rows.length;
    }
    return 0;
  }
  _getRowElementsCore(tableElement) {
    tableElement = tableElement || this.getTableElement();
    if (tableElement) {
      var hasRowTemplate = this.option().rowTemplate || this.option("dataRowTemplate");
      var tBodies = hasRowTemplate && tableElement.find("> tbody.".concat(ROW_CLASS));
      return tBodies && tBodies.length ? tBodies : tableElement.find("> tbody > " + ".".concat(ROW_CLASS, ", > .").concat(ROW_CLASS));
    }
    return renderer_default();
  }
  _getRowElements(tableElement) {
    return this._getRowElementsCore(tableElement);
  }
  getRowIndex($row) {
    return this._getRowElements().index($row);
  }
  getBoundingRect() {
  }
  getName() {
  }
  setScrollerSpacing(width) {
    var $element = this.element();
    var rtlEnabled = this.option("rtlEnabled");
    $element && $element.css({
      paddingLeft: rtlEnabled ? width : "",
      paddingRight: !rtlEnabled ? width : ""
    });
  }
  isScrollbarVisible(isHorizontal) {
    var $element = this.element();
    var $tableElement = this._tableElement;
    if ($element && $tableElement) {
      return isHorizontal ? getOuterWidth($tableElement) - getWidth($element) > 0 : getOuterHeight($tableElement) - getHeight($element) > 0;
    }
    return false;
  }
  isDisposed() {
    var _a2;
    return null === (_a2 = this.component) || void 0 === _a2 ? void 0 : _a2._disposed;
  }
  dispose() {
    var _a2, _b2;
    if (hasWindow()) {
      var window29 = getWindow();
      null === (_a2 = this._templateTimeouts) || void 0 === _a2 ? void 0 : _a2.forEach((templateTimeout) => window29.clearTimeout(templateTimeout));
      null === (_b2 = this._templateTimeouts) || void 0 === _b2 ? void 0 : _b2.clear();
    }
  }
};

// node_modules/devextreme/esm/__internal/grids/grid_core/column_headers/m_column_headers.js
var CELL_CONTENT_CLASS = "text-content";
var HEADERS_CLASS = "headers";
var NOWRAP_CLASS = "nowrap";
var ROW_CLASS_SELECTOR = ".dx-row";
var HEADER_ROW_CLASS = "dx-header-row";
var COLUMN_LINES_CLASS = "dx-column-lines";
var CONTEXT_MENU_SORT_ASC_ICON = "context-menu-sort-asc";
var CONTEXT_MENU_SORT_DESC_ICON = "context-menu-sort-desc";
var CONTEXT_MENU_SORT_NONE_ICON = "context-menu-sort-none";
var CELL_FOCUS_DISABLED_CLASS = "dx-cell-focus-disabled";
var VISIBILITY_HIDDEN_CLASS = "dx-visibility-hidden";
var TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX = "dx-text-content-alignment-";
var SORT_INDICATOR_CLASS = "dx-sort-indicator";
var SORT_INDEX_INDICATOR_CLASS = "dx-sort-index-indicator";
var HEADER_FILTER_CLASS_SELECTOR = ".dx-header-filter";
var HEADER_FILTER_INDICATOR_CLASS = "dx-header-filter-indicator";
var MULTI_ROW_HEADER_CLASS = "dx-header-multi-row";
var LINK = "dx-link";
var columnHeadersModule = {
  defaultOptions: () => ({
    showColumnHeaders: true,
    cellHintEnabled: true
  }),
  views: {
    columnHeadersView: ColumnsView.inherit(/* @__PURE__ */ function() {
      var createCellContent = function(that, $cell, options2) {
        var $cellContent = renderer_default("<div>").addClass(that.addWidgetPrefix(CELL_CONTENT_CLASS));
        that.setAria("role", "presentation", $cellContent);
        addCssClassesToCellContent(that, $cell, options2.column, $cellContent);
        var showColumnLines = that.option("showColumnLines");
        var contentAlignment = that.getController("columns").getHeaderContentAlignment(options2.column.alignment);
        return $cellContent[showColumnLines || "right" === contentAlignment ? "appendTo" : "prependTo"]($cell);
      };
      function addCssClassesToCellContent(that, $cell, column, $cellContent) {
        var $indicatorElements = that._getIndicatorElements($cell, true);
        var $visibleIndicatorElements = that._getIndicatorElements($cell);
        var indicatorCount = $indicatorElements && $indicatorElements.length;
        var columnAlignment = that._getColumnAlignment(column.alignment);
        var sortIndicatorClassName = ".".concat(that._getIndicatorClassName("sort"));
        var sortIndexIndicatorClassName = ".".concat(that._getIndicatorClassName("sortIndex"));
        var $sortIndicator = $visibleIndicatorElements.filter(sortIndicatorClassName);
        var $sortIndexIndicator = $visibleIndicatorElements.children().filter(sortIndexIndicatorClassName);
        $cellContent = $cellContent || $cell.children(".".concat(that.addWidgetPrefix(CELL_CONTENT_CLASS)));
        $cellContent.toggleClass(TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX + columnAlignment, indicatorCount > 0).toggleClass(TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX + ("left" === columnAlignment ? "right" : "left"), indicatorCount > 0 && "center" === column.alignment).toggleClass(SORT_INDICATOR_CLASS, !!$sortIndicator.length).toggleClass(SORT_INDEX_INDICATOR_CLASS, !!$sortIndexIndicator.length).toggleClass(HEADER_FILTER_INDICATOR_CLASS, !!$visibleIndicatorElements.filter(".".concat(that._getIndicatorClassName("headerFilter"))).length);
      }
      var members = {
        _createTable() {
          var $table = this.callBase.apply(this, arguments);
          events_engine_default.on($table, "mousedown selectstart", this.createAction((e) => {
            var {
              event
            } = e;
            if (event.shiftKey) {
              event.preventDefault();
            }
          }));
          return $table;
        },
        _isLegacyKeyboardNavigation() {
          return this.option("useLegacyKeyboardNavigation");
        },
        _getDefaultTemplate(column) {
          var that = this;
          return function($container, options2) {
            var {
              caption
            } = column;
            var needCellContent = !column.command || caption && "expand" !== column.command;
            if ("empty" === column.command) {
              that._renderEmptyMessage($container, options2);
            } else if (needCellContent) {
              var $content = createCellContent(that, $container, options2);
              $content.text(caption);
            } else if (column.command) {
              $container.html("&nbsp;");
            }
          };
        },
        _renderEmptyMessage($container, options2) {
          var textEmpty = this._getEmptyHeaderText();
          if (!textEmpty) {
            $container.html("&nbsp;");
            return;
          }
          var $cellContent = createCellContent(this, $container, options2);
          var needSplit = textEmpty.includes("{0}");
          if (needSplit) {
            var [leftPart, rightPart] = textEmpty.split("{0}");
            var columnChooserTitle = message_default.format("dxDataGrid-emptyHeaderColumnChooserText");
            var columnChooserView = this.component.getView("columnChooserView");
            var $link = renderer_default("<a>").text(columnChooserTitle).addClass(LINK);
            events_engine_default.on($link, "click", this.createAction(() => columnChooserView.showColumnChooser()));
            $cellContent.append(dom_adapter_default.createTextNode(leftPart)).append($link).append(dom_adapter_default.createTextNode(rightPart));
          } else {
            $cellContent.text(textEmpty);
          }
        },
        _getEmptyHeaderText() {
          var hasHiddenColumns = !!this.component.getView("columnChooserView").hasHiddenColumns();
          var hasGroupedColumns = !!this.component.getView("headerPanel").hasGroupedColumns();
          switch (true) {
            case (hasHiddenColumns && hasGroupedColumns):
              return message_default.format("dxDataGrid-emptyHeaderWithColumnChooserAndGroupPanelText");
            case hasGroupedColumns:
              return message_default.format("dxDataGrid-emptyHeaderWithGroupPanelText");
            case hasHiddenColumns:
              return message_default.format("dxDataGrid-emptyHeaderWithColumnChooserText");
            default:
              return "";
          }
        },
        _getHeaderTemplate(column) {
          return column.headerCellTemplate || {
            allowRenderToDetachedContainer: true,
            render: this._getDefaultTemplate(column)
          };
        },
        _processTemplate(template, options2) {
          var that = this;
          var resultTemplate;
          var {
            column
          } = options2;
          var renderingTemplate = that.callBase(template);
          if ("header" === options2.rowType && renderingTemplate && column.headerCellTemplate && !column.command) {
            resultTemplate = {
              render(options3) {
                var $content = createCellContent(that, options3.container, options3.model);
                renderingTemplate.render(extend({}, options3, {
                  container: $content
                }));
              }
            };
          } else {
            resultTemplate = renderingTemplate;
          }
          return resultTemplate;
        },
        _handleDataChanged(e) {
          if ("refresh" !== e.changeType) {
            return;
          }
          if (this._isGroupingChanged || this._requireReady) {
            this._isGroupingChanged = false;
            this.render();
          }
        },
        _renderCell($row, options2) {
          var $cell = this.callBase($row, options2);
          if ("header" === options2.row.rowType) {
            $cell.addClass(CELL_FOCUS_DISABLED_CLASS);
            if (!this._isLegacyKeyboardNavigation()) {
              if (options2.column && !options2.column.type) {
                $cell.attr("tabindex", this.option("tabindex") || 0);
              }
            }
          }
          return $cell;
        },
        _setCellAriaAttributes($cell, cellOptions) {
          this.callBase($cell, cellOptions);
          if ("header" === cellOptions.rowType) {
            if (!cellOptions.column.type) {
              this.setAria("role", "columnheader", $cell);
            }
            if (cellOptions.column && !cellOptions.column.command && !cellOptions.column.isBand) {
              $cell.attr("id", cellOptions.column.headerId);
              this.setAria("label", "".concat(message_default.format("dxDataGrid-ariaColumn"), " ").concat(cellOptions.column.caption), $cell);
            }
          }
        },
        _createRow(row) {
          var $row = this.callBase.apply(this, arguments);
          $row.toggleClass(COLUMN_LINES_CLASS, this.option("showColumnLines"));
          if ("header" === row.rowType) {
            $row.addClass(HEADER_ROW_CLASS);
            if (!this._isLegacyKeyboardNavigation()) {
              registerKeyboardAction2("columnHeaders", this, $row, "td", this._handleActionKeyDown.bind(this));
            }
          }
          return $row;
        },
        _handleActionKeyDown(args) {
          var {
            event
          } = args;
          var $target = renderer_default(event.target);
          this._lastActionElement = event.target;
          if ($target.is(HEADER_FILTER_CLASS_SELECTOR)) {
            var headerFilterController = this.getController("headerFilter");
            var $column = $target.closest("td");
            var columnIndex = this.getColumnIndexByElement($column);
            if (columnIndex >= 0) {
              headerFilterController.showHeaderFilterMenu(columnIndex, false);
            }
          } else {
            var $row = $target.closest(ROW_CLASS_SELECTOR);
            this._processHeaderAction(event, $row);
          }
          event.preventDefault();
        },
        _renderCore() {
          var $container = this.element();
          var change = {};
          if (this._tableElement && !this._dataController.isLoaded() && !this._hasRowElements) {
            return;
          }
          $container.addClass(this.addWidgetPrefix(HEADERS_CLASS)).toggleClass(this.addWidgetPrefix(NOWRAP_CLASS), !this.option("wordWrapEnabled")).empty();
          this.setAria("role", "presentation", $container);
          var deferred = this._updateContent(this._renderTable({
            change
          }), change);
          if (this.getRowCount() > 1) {
            $container.addClass(MULTI_ROW_HEADER_CLASS);
          }
          this.callBase.apply(this, arguments);
          return deferred;
        },
        _renderRows() {
          if (this._dataController.isLoaded() || this._hasRowElements) {
            this.callBase.apply(this, arguments);
            this._hasRowElements = true;
          }
        },
        _renderRow($table, options2) {
          var rowIndex = 1 === this.getRowCount() ? null : options2.row.rowIndex;
          options2.columns = this.getColumns(rowIndex);
          this.callBase($table, options2);
        },
        _createCell(options2) {
          var {
            column
          } = options2;
          var $cellElement = this.callBase.apply(this, arguments);
          column.rowspan > 1 && "header" === options2.rowType && $cellElement.attr("rowSpan", column.rowspan);
          return $cellElement;
        },
        _getRows() {
          var result2 = [];
          var rowCount = this.getRowCount();
          if (this.option("showColumnHeaders")) {
            for (var i = 0; i < rowCount; i++) {
              result2.push({
                rowType: "header",
                rowIndex: i
              });
            }
          }
          return result2;
        },
        _getCellTemplate(options2) {
          if ("header" === options2.rowType) {
            return this._getHeaderTemplate(options2.column);
          }
        },
        _columnOptionChanged(e) {
          var {
            changeTypes
          } = e;
          var {
            optionNames
          } = e;
          if (changeTypes.grouping || changeTypes.groupExpanding) {
            if (changeTypes.grouping) {
              this._isGroupingChanged = true;
            }
            return;
          }
          this.callBase(e);
          if (optionNames.width || optionNames.visible) {
            this.resizeCompleted.fire();
          }
        },
        _isElementVisible: (elementOptions) => elementOptions && elementOptions.visible,
        _alignCaptionByCenter($cell) {
          var $indicatorsContainer = this._getIndicatorContainer($cell, true);
          if ($indicatorsContainer && $indicatorsContainer.length) {
            $indicatorsContainer.filter(".".concat(VISIBILITY_HIDDEN_CLASS)).remove();
            $indicatorsContainer = this._getIndicatorContainer($cell);
            $indicatorsContainer.clone().addClass(VISIBILITY_HIDDEN_CLASS).css("float", "").insertBefore($cell.children(".".concat(this.addWidgetPrefix(CELL_CONTENT_CLASS))));
          }
        },
        _updateCell($cell, options2) {
          if ("header" === options2.rowType && "center" === options2.column.alignment) {
            this._alignCaptionByCenter($cell);
          }
          this.callBase.apply(this, arguments);
        },
        _updateIndicator($cell, column, indicatorName) {
          var $indicatorElement = this.callBase.apply(this, arguments);
          if ("center" === column.alignment) {
            this._alignCaptionByCenter($cell);
          }
          addCssClassesToCellContent(this, $cell, column);
          return $indicatorElement;
        },
        _getIndicatorContainer($cell, returnAll) {
          var $indicatorsContainer = this.callBase($cell);
          return returnAll ? $indicatorsContainer : $indicatorsContainer.filter(":not(.".concat(VISIBILITY_HIDDEN_CLASS, ")"));
        },
        _isSortableElement: () => true,
        getHeadersRowHeight() {
          var $tableElement = this.getTableElement();
          var $headerRows = $tableElement && $tableElement.find(".".concat(HEADER_ROW_CLASS));
          return $headerRows && $headerRows.toArray().reduce((sum, headerRow) => sum + getHeight(headerRow), 0) || 0;
        },
        getHeaderElement(index2) {
          var columnElements = this.getColumnElements();
          return columnElements && columnElements.eq(index2);
        },
        getColumnElements(index2, bandColumnIndex) {
          var that = this;
          var $cellElement;
          var columnsController = that._columnsController;
          var rowCount = that.getRowCount();
          if (that.option("showColumnHeaders")) {
            if (rowCount > 1 && (!isDefined(index2) || isDefined(bandColumnIndex))) {
              var result2 = [];
              var visibleColumns = isDefined(bandColumnIndex) ? columnsController.getChildrenByBandColumn(bandColumnIndex, true) : columnsController.getVisibleColumns();
              each(visibleColumns, (_, column) => {
                var rowIndex = isDefined(index2) ? index2 : columnsController.getRowIndex(column.index);
                $cellElement = that._getCellElement(rowIndex, columnsController.getVisibleIndex(column.index, rowIndex));
                $cellElement && result2.push($cellElement.get(0));
              });
              return renderer_default(result2);
            }
            if (!index2 || index2 < rowCount) {
              return that.getCellElements(index2 || 0);
            }
          }
        },
        getColumnIndexByElement($cell) {
          var cellIndex = this.getCellIndex($cell);
          var $row = $cell.closest(".dx-row");
          var {
            rowIndex
          } = $row[0];
          var column = this.getColumns(rowIndex)[cellIndex];
          return column ? column.index : -1;
        },
        getVisibleColumnIndex(columnIndex, rowIndex) {
          var column = this.getColumns()[columnIndex];
          return column ? this._columnsController.getVisibleIndex(column.index, rowIndex) : -1;
        },
        getColumnWidths() {
          var $columnElements = this.getColumnElements();
          if ($columnElements && $columnElements.length) {
            return this._getWidths($columnElements);
          }
          return this.callBase.apply(this, arguments);
        },
        allowDragging(column) {
          var rowIndex = column && this._columnsController.getRowIndex(column.index);
          var columns2 = this.getColumns(rowIndex);
          var isReorderingEnabled = this.option("allowColumnReordering") || this._columnsController.isColumnOptionUsed("allowReordering");
          return isReorderingEnabled && column.allowReordering && columns2.length > 1;
        },
        getBoundingRect() {
          var $columnElements = this.getColumnElements();
          if ($columnElements && $columnElements.length) {
            var offset2 = this.getTableElement().offset();
            return {
              top: offset2.top
            };
          }
          return null;
        },
        getName: () => "headers",
        getColumnCount() {
          var $columnElements = this.getColumnElements();
          return $columnElements ? $columnElements.length : 0;
        },
        isVisible() {
          return this.option("showColumnHeaders");
        },
        optionChanged(args) {
          switch (args.name) {
            case "showColumnHeaders":
            case "wordWrapEnabled":
            case "showColumnLines":
              this._invalidate(true, true);
              args.handled = true;
              break;
            default:
              this.callBase(args);
          }
        },
        getHeight() {
          return this.getElementHeight();
        },
        getContextMenuItems(options2) {
          var that = this;
          var {
            column
          } = options2;
          if (options2.row && ("header" === options2.row.rowType || "detailAdaptive" === options2.row.rowType)) {
            var sortingOptions = that.option("sorting");
            if (sortingOptions && "none" !== sortingOptions.mode && column && column.allowSorting) {
              var onItemClick = function(params) {
                setTimeout(() => {
                  that._columnsController.changeSortOrder(column.index, params.itemData.value);
                });
              };
              return [{
                text: sortingOptions.ascendingText,
                value: "asc",
                disabled: "asc" === column.sortOrder,
                icon: CONTEXT_MENU_SORT_ASC_ICON,
                onItemClick
              }, {
                text: sortingOptions.descendingText,
                value: "desc",
                disabled: "desc" === column.sortOrder,
                icon: CONTEXT_MENU_SORT_DESC_ICON,
                onItemClick
              }, {
                text: sortingOptions.clearText,
                value: "none",
                disabled: !column.sortOrder,
                icon: CONTEXT_MENU_SORT_NONE_ICON,
                onItemClick
              }];
            }
          }
          return;
        },
        getRowCount() {
          return this._columnsController && this._columnsController.getRowCount();
        },
        setRowsOpacity(columnIndex, value2, rowIndex) {
          var i;
          var columnElements;
          var rowCount = this.getRowCount();
          var columns2 = this._columnsController.getColumns();
          var column = columns2 && columns2[columnIndex];
          var columnID = column && column.isBand && column.index;
          var setColumnOpacity = (column2, index2) => {
            if (column2.ownerBand === columnID) {
              columnElements.eq(index2).css({
                opacity: value2
              });
              if (column2.isBand) {
                this.setRowsOpacity(column2.index, value2, i + 1);
              }
            }
          };
          if (isDefined(columnID)) {
            rowIndex = rowIndex || 0;
            for (i = rowIndex; i < rowCount; i++) {
              columnElements = this.getCellElements(i);
              if (columnElements) {
                var rowColumns = this.getColumns(i);
                rowColumns.forEach(setColumnOpacity);
              }
            }
          }
        }
      };
      return members;
    }())
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/m_core.js
var m_core_default = _extends(_extends(_extends({}, m_modules_default), m_utils_default), {
  modules: []
});

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/column_headers.js
var ColumnHeadersView = columnHeadersModule.views.columnHeadersView;
m_core_default.registerModule("columnHeaders", columnHeadersModule);

// node_modules/devextreme/esm/__internal/grids/grid_core/columns_controller/const.js
var USER_STATE_FIELD_NAMES_15_1 = ["filterValues", "filterType", "fixed", "fixedPosition"];
var USER_STATE_FIELD_NAMES = ["visibleIndex", "dataField", "name", "dataType", "width", "visible", "sortOrder", "lastSortOrder", "sortIndex", "groupIndex", "filterValue", "bufferedFilterValue", "selectedFilterOperation", "bufferedSelectedFilterOperation", "added"].concat(USER_STATE_FIELD_NAMES_15_1);
var IGNORE_COLUMN_OPTION_NAMES = {
  visibleWidth: true,
  bestFitWidth: true,
  bufferedFilterValue: true
};
var COMMAND_EXPAND_CLASS = "dx-command-expand";
var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
var GROUP_COMMAND_COLUMN_NAME = "groupExpand";
var DETAIL_COMMAND_COLUMN_NAME = "detailExpand";
var COLUMN_OPTION_REGEXP = /columns\[(\d+)\]\.?/gi;
var DEFAULT_COLUMN_OPTIONS = {
  visible: true,
  showInColumnChooser: true
};
var DATATYPE_OPERATIONS = {
  number: ["=", "<>", "<", ">", "<=", ">=", "between"],
  string: ["contains", "notcontains", "startswith", "endswith", "=", "<>"],
  date: ["=", "<>", "<", ">", "<=", ">=", "between"],
  datetime: ["=", "<>", "<", ">", "<=", ">=", "between"]
};
var COLUMN_INDEX_OPTIONS = {
  visibleIndex: true,
  groupIndex: true,
  grouped: true,
  sortIndex: true,
  sortOrder: true
};
var GROUP_LOCATION = "group";
var COLUMN_CHOOSER_LOCATION = "columnChooser";

// node_modules/devextreme/esm/core/utils/date_serialization.js
var NUMBER_SERIALIZATION_FORMAT = "number";
var DATE_SERIALIZATION_FORMAT = "yyyy/MM/dd";
var DATETIME_SERIALIZATION_FORMAT = "yyyy/MM/dd HH:mm:ss";
var ISO8601_PATTERN = /^(\d{4,})(-)?(\d{2})(-)?(\d{2})(?:T(\d{2})(:)?(\d{2})?(:)?(\d{2}(?:\.(\d{1,3})\d*)?)?)?(Z|([+-])(\d{2})(:)?(\d{2})?)?$/;
var ISO8601_TIME_PATTERN = /^(\d{2}):(\d{2})(:(\d{2}))?$/;
var ISO8601_PATTERN_PARTS = ["", "yyyy", "", "MM", "", "dd", "THH", "", "mm", "", "ss", ".SSS"];
var DATE_SERIALIZATION_PATTERN = /^(\d{4})\/(\d{2})\/(\d{2})$/;
var MILLISECOND_LENGHT = 3;
var dateParser = function(text, skipISO8601Parsing) {
  var result2;
  if (isString(text) && !skipISO8601Parsing) {
    result2 = parseISO8601String(text);
  }
  return result2 || parseDate(text);
};
function getTimePart(part) {
  return +part || 0;
}
function parseDate(text) {
  var isDefaultSerializationFormat = getDateSerializationFormat(text) === DATE_SERIALIZATION_FORMAT;
  var parsedValue = !isDate(text) && Date.parse(text);
  if (!parsedValue && isDefaultSerializationFormat) {
    var parts = text.match(DATE_SERIALIZATION_PATTERN);
    if (parts) {
      var newDate = new Date(getTimePart(parts[1]), getTimePart(parts[2]), getTimePart(parts[3]));
      newDate.setFullYear(getTimePart(parts[1]));
      newDate.setMonth(getTimePart(parts[2]) - 1);
      newDate.setDate(getTimePart(parts[3]));
      return newDate;
    }
  }
  return isNumeric(parsedValue) ? new Date(parsedValue) : text;
}
function parseISO8601String(text) {
  var parts = text.match(ISO8601_PATTERN);
  if (!parts) {
    parts = text.match(ISO8601_TIME_PATTERN);
    if (parts) {
      return new Date(0, 0, 0, getTimePart(parts[1]), getTimePart(parts[2]), getTimePart(parts[4]));
    }
    return;
  }
  var year = getTimePart(parts[1]);
  var month = --parts[3];
  var day = parts[5];
  var timeZoneHour = 0;
  var timeZoneMinute = 0;
  var correctYear = (d) => {
    year < 100 && d.setFullYear(year);
    return d;
  };
  timeZoneHour = getTimePart(parts[14]);
  timeZoneMinute = getTimePart(parts[16]);
  if ("-" === parts[13]) {
    timeZoneHour = -timeZoneHour;
    timeZoneMinute = -timeZoneMinute;
  }
  var hour = getTimePart(parts[6]) - timeZoneHour;
  var minute = getTimePart(parts[8]) - timeZoneMinute;
  var second = getTimePart(parts[10]);
  var millisecond = function(part) {
    part = part || "";
    return getTimePart(part) * Math.pow(10, MILLISECOND_LENGHT - part.length);
  }(parts[11]);
  if (parts[12]) {
    return correctYear(new Date(Date.UTC(year, month, day, hour, minute, second, millisecond)));
  }
  return correctYear(new Date(year, month, day, hour, minute, second, millisecond));
}
var getIso8601Format = function(text, useUtc) {
  var parts = text.match(ISO8601_PATTERN);
  var result2 = "";
  if (!parts) {
    parts = text.match(ISO8601_TIME_PATTERN);
    if (parts) {
      return parts[3] ? "HH:mm:ss" : "HH:mm";
    }
    return;
  }
  for (var i = 1; i < ISO8601_PATTERN_PARTS.length; i++) {
    if (parts[i]) {
      result2 += ISO8601_PATTERN_PARTS[i] || parts[i];
    }
  }
  if ("Z" === parts[12]) {
    result2 += "'Z'";
  }
  if (parts[14]) {
    if (parts[15]) {
      result2 += "xxx";
    } else if (parts[16]) {
      result2 += "xx";
    } else {
      result2 += "x";
    }
  }
  return result2;
};
var deserializeDate = function(value2) {
  if ("number" === typeof value2) {
    return new Date(value2);
  }
  return dateParser(value2, !config_default().forceIsoDateParsing);
};
var serializeDate = function(value2, serializationFormat) {
  if (!serializationFormat) {
    return value2;
  }
  if (!isDate(value2)) {
    return null;
  }
  if (serializationFormat === NUMBER_SERIALIZATION_FORMAT) {
    return value2 && value2.valueOf ? value2.valueOf() : null;
  }
  return getFormatter3(serializationFormat, default_date_names_default)(value2);
};
var getDateSerializationFormat = function(value2) {
  if ("number" === typeof value2) {
    return NUMBER_SERIALIZATION_FORMAT;
  } else if (isString(value2)) {
    var format2;
    if (config_default().forceIsoDateParsing) {
      format2 = getIso8601Format(value2);
    }
    if (format2) {
      return format2;
    } else if (value2.indexOf(":") >= 0) {
      return DATETIME_SERIALIZATION_FORMAT;
    } else {
      return DATE_SERIALIZATION_FORMAT;
    }
  } else if (value2) {
    return null;
  }
};
var date_serialization_default = {
  dateParser,
  deserializeDate,
  serializeDate,
  getDateSerializationFormat
};

// node_modules/devextreme/esm/__internal/grids/grid_core/columns_controller/m_columns_controller_utils.js
var setFilterOperationsAsDefaultValues = function(column) {
  column.filterOperations = column.defaultFilterOperations;
};
var globalColumnId = 1;
var createColumn = function(that, columnOptions, userStateColumnOptions, bandColumn) {
  var commonColumnOptions = {};
  if (columnOptions) {
    if (isString(columnOptions)) {
      columnOptions = {
        dataField: columnOptions
      };
    }
    that.setName(columnOptions);
    var result2 = {};
    if (columnOptions.command) {
      result2 = deepExtendArraySafe(commonColumnOptions, columnOptions);
    } else {
      commonColumnOptions = that.getCommonSettings(columnOptions);
      if (userStateColumnOptions && userStateColumnOptions.name && userStateColumnOptions.dataField) {
        columnOptions = extend({}, columnOptions, {
          dataField: userStateColumnOptions.dataField
        });
      }
      var calculatedColumnOptions = that._createCalculatedColumnOptions(columnOptions, bandColumn);
      if (!columnOptions.type) {
        result2 = {
          headerId: "dx-col-".concat(globalColumnId++)
        };
      }
      result2 = deepExtendArraySafe(result2, DEFAULT_COLUMN_OPTIONS);
      deepExtendArraySafe(result2, commonColumnOptions);
      deepExtendArraySafe(result2, calculatedColumnOptions);
      deepExtendArraySafe(result2, columnOptions);
      deepExtendArraySafe(result2, {
        selector: null
      });
    }
    if (columnOptions.filterOperations === columnOptions.defaultFilterOperations) {
      setFilterOperationsAsDefaultValues(result2);
    }
    return result2;
  }
};
var createColumnsFromOptions = function createColumnsFromOptions2(that, columnsOptions, bandColumn) {
  var result2 = [];
  if (columnsOptions) {
    each(columnsOptions, (index2, columnOptions) => {
      var userStateColumnOptions = that._columnsUserState && checkUserStateColumn(columnOptions, that._columnsUserState[index2]) && that._columnsUserState[index2];
      var column = createColumn(that, columnOptions, userStateColumnOptions, bandColumn);
      if (column) {
        if (bandColumn) {
          column.ownerBand = bandColumn;
        }
        result2.push(column);
        if (column.columns) {
          result2 = result2.concat(createColumnsFromOptions2(that, column.columns, column));
          delete column.columns;
          column.hasColumns = true;
        }
      }
    });
  }
  return result2;
};
var getParentBandColumns = function(columnIndex, columnParentByIndex) {
  var result2 = [];
  var parent = columnParentByIndex[columnIndex];
  while (parent) {
    result2.unshift(parent);
    columnIndex = parent.index;
    parent = columnParentByIndex[columnIndex];
  }
  return result2;
};
var getChildrenByBandColumn = function getChildrenByBandColumn2(columnIndex, columnChildrenByIndex, recursive) {
  var result2 = [];
  var children = columnChildrenByIndex[columnIndex];
  if (children) {
    for (var i = 0; i < children.length; i++) {
      var column = children[i];
      if (!isDefined(column.groupIndex) || column.showWhenGrouped) {
        result2.push(column);
        if (recursive && column.isBand) {
          result2 = result2.concat(getChildrenByBandColumn2(column.index, columnChildrenByIndex, recursive));
        }
      }
    }
  }
  return result2;
};
var getColumnByIndexes = function(that, columnIndexes) {
  var result2;
  var columns2;
  var bandColumnsCache = that.getBandColumnsCache();
  var callbackFilter = function(column) {
    var ownerBand = result2 ? result2.index : void 0;
    return column.ownerBand === ownerBand;
  };
  if (bandColumnsCache.isPlain) {
    result2 = that._columns[columnIndexes[0]];
  } else {
    columns2 = that._columns.filter(callbackFilter);
    for (var i = 0; i < columnIndexes.length; i++) {
      result2 = columns2[columnIndexes[i]];
      if (result2) {
        columns2 = that._columns.filter(callbackFilter);
      }
    }
  }
  return result2;
};
var getColumnFullPath = function(that, column) {
  var result2 = [];
  var columns2;
  var bandColumnsCache = that.getBandColumnsCache();
  var callbackFilter = function(item) {
    return item.ownerBand === column.ownerBand;
  };
  if (bandColumnsCache.isPlain) {
    var columnIndex = that._columns.indexOf(column);
    if (columnIndex >= 0) {
      result2 = ["columns[".concat(columnIndex, "]")];
    }
  } else {
    columns2 = that._columns.filter(callbackFilter);
    while (columns2.length && -1 !== columns2.indexOf(column)) {
      result2.unshift("columns[".concat(columns2.indexOf(column), "]"));
      column = bandColumnsCache.columnParentByIndex[column.index];
      columns2 = column ? that._columns.filter(callbackFilter) : [];
    }
  }
  return result2.join(".");
};
var calculateColspan = function calculateColspan2(that, columnID) {
  var colspan = 0;
  var columns2 = that.getChildrenByBandColumn(columnID, true);
  each(columns2, (_, column) => {
    if (column.isBand) {
      column.colspan = column.colspan || calculateColspan2(that, column.index);
      colspan += column.colspan || 1;
    } else {
      colspan += 1;
    }
  });
  return colspan;
};
var processBandColumns = function(that, columns2, bandColumnsCache) {
  var rowspan;
  for (var i = 0; i < columns2.length; i++) {
    var column = columns2[i];
    if (column.visible || column.command) {
      if (column.isBand) {
        column.colspan = column.colspan || calculateColspan(that, column.index);
      }
      if (!column.isBand || !column.colspan) {
        rowspan = that.getRowCount();
        if (!column.command && (!isDefined(column.groupIndex) || column.showWhenGrouped)) {
          rowspan -= getParentBandColumns(column.index, bandColumnsCache.columnParentByIndex).length;
        }
        if (rowspan > 1) {
          column.rowspan = rowspan;
        }
      }
    }
  }
};
var getValueDataType = function(value2) {
  var dataType = type(value2);
  if ("string" !== dataType && "boolean" !== dataType && "number" !== dataType && "date" !== dataType && "object" !== dataType) {
    dataType = void 0;
  }
  return dataType;
};
var getSerializationFormat = function(dataType, value2) {
  switch (dataType) {
    case "date":
    case "datetime":
      return date_serialization_default.getDateSerializationFormat(value2);
    case "number":
      if (isString(value2)) {
        return "string";
      }
      if (isNumeric(value2)) {
        return null;
      }
  }
};
var updateSerializers = function(options2, dataType) {
  if (!options2.deserializeValue) {
    if (m_utils_default.isDateType(dataType)) {
      options2.deserializeValue = function(value2) {
        return date_serialization_default.deserializeDate(value2);
      };
      options2.serializeValue = function(value2) {
        return isString(value2) ? value2 : date_serialization_default.serializeDate(value2, this.serializationFormat);
      };
    }
    if ("number" === dataType) {
      options2.deserializeValue = function(value2) {
        var parsedValue = parseFloat(value2);
        return isNaN(parsedValue) ? value2 : parsedValue;
      };
      options2.serializeValue = function(value2, target) {
        if ("filter" === target) {
          return value2;
        }
        return isDefined(value2) && "string" === this.serializationFormat ? value2.toString() : value2;
      };
    }
  }
};
var getAlignmentByDataType = function(dataType, isRTL) {
  switch (dataType) {
    case "number":
      return "right";
    case "boolean":
      return "center";
    default:
      return getDefaultAlignment(isRTL);
  }
};
var customizeTextForBooleanDataType = function(e) {
  if (true === e.value) {
    return this.trueText || "true";
  }
  if (false === e.value) {
    return this.falseText || "false";
  }
  return e.valueText || "";
};
var getCustomizeTextByDataType = function(dataType) {
  if ("boolean" === dataType) {
    return customizeTextForBooleanDataType;
  }
};
var createColumnsFromDataSource = function(that, dataSource) {
  var firstItems = that._getFirstItems(dataSource);
  var fieldName;
  var processedFields = {};
  var result2 = [];
  for (var i = 0; i < firstItems.length; i++) {
    if (firstItems[i]) {
      for (fieldName in firstItems[i]) {
        if (!isFunction(firstItems[i][fieldName]) || variable_wrapper_default.isWrapped(firstItems[i][fieldName])) {
          processedFields[fieldName] = true;
        }
      }
    }
  }
  for (fieldName in processedFields) {
    if (0 !== fieldName.indexOf("__")) {
      var column = createColumn(that, fieldName);
      result2.push(column);
    }
  }
  return result2;
};
var updateColumnIndexes = function(that) {
  each(that._columns, (index2, column) => {
    column.index = index2;
  });
  each(that._columns, (index2, column) => {
    if (isObject(column.ownerBand)) {
      column.ownerBand = column.ownerBand.index;
    }
  });
  each(that._commandColumns, (index2, column) => {
    column.index = -(index2 + 1);
  });
};
var updateColumnGroupIndexes = function(that, currentColumn) {
  normalizeIndexes(that._columns, "groupIndex", currentColumn, (column) => {
    var {
      grouped
    } = column;
    delete column.grouped;
    return grouped;
  });
};
var updateColumnSortIndexes = function(that, currentColumn) {
  each(that._columns, (index2, column) => {
    if (isDefined(column.sortIndex) && !isSortOrderValid(column.sortOrder)) {
      delete column.sortIndex;
    }
  });
  normalizeIndexes(that._columns, "sortIndex", currentColumn, (column) => !isDefined(column.groupIndex) && isSortOrderValid(column.sortOrder));
};
var updateColumnVisibleIndexes = function(that, currentColumn) {
  var column;
  var result2 = [];
  var bandColumnsCache = that.getBandColumnsCache();
  var bandedColumns = [];
  var columns2 = that._columns.filter((column2) => !column2.command);
  for (var i = 0; i < columns2.length; i++) {
    column = columns2[i];
    var parentBandColumns = getParentBandColumns(i, bandColumnsCache.columnParentByIndex);
    if (parentBandColumns.length) {
      bandedColumns.push(column);
    } else {
      result2.push(column);
    }
  }
  normalizeIndexes(bandedColumns, "visibleIndex", currentColumn);
  normalizeIndexes(result2, "visibleIndex", currentColumn);
};
var getColumnIndexByVisibleIndex = function(that, visibleIndex, location) {
  var rowIndex = isObject(visibleIndex) ? visibleIndex.rowIndex : null;
  var columns2 = location === GROUP_LOCATION ? that.getGroupColumns() : location === COLUMN_CHOOSER_LOCATION ? that.getChooserColumns() : that.getVisibleColumns(rowIndex);
  var column;
  visibleIndex = isObject(visibleIndex) ? visibleIndex.columnIndex : visibleIndex;
  column = columns2[visibleIndex];
  if (column && column.type === GROUP_COMMAND_COLUMN_NAME) {
    column = that._columns.filter((col) => column.type === col.type)[0] || column;
  }
  return column && isDefined(column.index) ? column.index : -1;
};
var moveColumnToGroup = function(that, column, groupIndex) {
  var groupColumns = that.getGroupColumns();
  var i;
  if (groupIndex >= 0) {
    for (i = 0; i < groupColumns.length; i++) {
      if (groupColumns[i].groupIndex >= groupIndex) {
        groupColumns[i].groupIndex++;
      }
    }
  } else {
    groupIndex = 0;
    for (i = 0; i < groupColumns.length; i++) {
      groupIndex = Math.max(groupIndex, groupColumns[i].groupIndex + 1);
    }
  }
  return groupIndex;
};
function checkUserStateColumn(column, userStateColumn) {
  return column && userStateColumn && userStateColumn.name === (column.name || column.dataField) && (userStateColumn.dataField === column.dataField || column.name);
}
var applyUserState = function(that) {
  var columnsUserState = that._columnsUserState;
  var ignoreColumnOptionNames = that._ignoreColumnOptionNames || [];
  var columns2 = that._columns;
  var columnCountById = {};
  var resultColumns = [];
  var allColumnsHaveState = true;
  var userStateColumnIndexes = [];
  var column;
  var userStateColumnIndex;
  var i;
  function applyFieldsState(column2, userStateColumn) {
    if (!userStateColumn) {
      return;
    }
    for (var index2 = 0; index2 < USER_STATE_FIELD_NAMES.length; index2++) {
      var fieldName = USER_STATE_FIELD_NAMES[index2];
      if (ignoreColumnOptionNames.includes(fieldName)) {
        continue;
      }
      if ("dataType" === fieldName) {
        column2[fieldName] = column2[fieldName] || userStateColumn[fieldName];
      } else if (USER_STATE_FIELD_NAMES_15_1.includes(fieldName)) {
        if (fieldName in userStateColumn) {
          column2[fieldName] = userStateColumn[fieldName];
        }
      } else {
        if ("selectedFilterOperation" === fieldName && userStateColumn[fieldName]) {
          column2.defaultSelectedFilterOperation = column2[fieldName] || null;
        }
        column2[fieldName] = userStateColumn[fieldName];
      }
    }
  }
  function findUserStateColumn(columnsUserState2, column2) {
    var id = column2.name || column2.dataField;
    var count = columnCountById[id] || 0;
    for (var j = 0; j < columnsUserState2.length; j++) {
      if (checkUserStateColumn(column2, columnsUserState2[j])) {
        if (count) {
          count--;
        } else {
          columnCountById[id] = columnCountById[id] || 0;
          columnCountById[id]++;
          return j;
        }
      }
    }
    return -1;
  }
  if (columnsUserState) {
    for (i = 0; i < columns2.length; i++) {
      userStateColumnIndex = findUserStateColumn(columnsUserState, columns2[i]);
      allColumnsHaveState = allColumnsHaveState && userStateColumnIndex >= 0;
      userStateColumnIndexes.push(userStateColumnIndex);
    }
    for (i = 0; i < columns2.length; i++) {
      column = columns2[i];
      userStateColumnIndex = userStateColumnIndexes[i];
      if (that._hasUserState || allColumnsHaveState) {
        applyFieldsState(column, columnsUserState[userStateColumnIndex]);
      }
      if (userStateColumnIndex >= 0 && isDefined(columnsUserState[userStateColumnIndex].initialIndex)) {
        resultColumns[userStateColumnIndex] = column;
      } else {
        resultColumns.push(column);
      }
    }
    var hasAddedBands = false;
    for (i = 0; i < columnsUserState.length; i++) {
      var columnUserState = columnsUserState[i];
      if (columnUserState.added && findUserStateColumn(columns2, columnUserState) < 0) {
        column = createColumn(that, columnUserState.added);
        applyFieldsState(column, columnUserState);
        resultColumns.push(column);
        if (columnUserState.added.columns) {
          hasAddedBands = true;
        }
      }
    }
    if (hasAddedBands) {
      updateColumnIndexes(that);
      resultColumns = createColumnsFromOptions(that, resultColumns);
    }
    assignColumns(that, resultColumns);
  }
};
var updateIndexes = function(that, column) {
  updateColumnIndexes(that);
  updateColumnGroupIndexes(that, column);
  updateColumnSortIndexes(that, column);
  resetBandColumnsCache(that);
  updateColumnVisibleIndexes(that, column);
};
var resetColumnsCache = function(that) {
  that.resetColumnsCache();
};
function assignColumns(that, columns2) {
  that._previousColumns = that._columns;
  that._columns = columns2;
  resetColumnsCache(that);
  that.updateColumnDataTypes();
}
var updateColumnChanges = function(that, changeType, optionName, columnIndex) {
  var _a2;
  var columnChanges = that._columnChanges || {
    optionNames: {
      length: 0
    },
    changeTypes: {
      length: 0
    },
    columnIndex
  };
  optionName = optionName || "all";
  optionName = optionName.split(".")[0];
  var {
    changeTypes
  } = columnChanges;
  if (changeType && !changeTypes[changeType]) {
    changeTypes[changeType] = true;
    changeTypes.length++;
  }
  var {
    optionNames
  } = columnChanges;
  if (optionName && !optionNames[optionName]) {
    optionNames[optionName] = true;
    optionNames.length++;
  }
  if (void 0 === columnIndex || columnIndex !== columnChanges.columnIndex) {
    if (isDefined(columnIndex)) {
      null !== (_a2 = columnChanges.columnIndices) && void 0 !== _a2 ? _a2 : columnChanges.columnIndices = [];
      if (isDefined(columnChanges.columnIndex)) {
        columnChanges.columnIndices.push(columnChanges.columnIndex);
      }
      columnChanges.columnIndices.push(columnIndex);
    }
    delete columnChanges.columnIndex;
  }
  that._columnChanges = columnChanges;
  resetColumnsCache(that);
};
var fireColumnsChanged = function(that) {
  var onColumnsChanging = that.option("onColumnsChanging");
  var columnChanges = that._columnChanges;
  var reinitOptionNames = ["dataField", "lookup", "dataType", "columns"];
  if (that.isInitialized() && !that._updateLockCount && columnChanges) {
    if (onColumnsChanging) {
      that._updateLockCount++;
      onColumnsChanging(extend({
        component: that.component
      }, columnChanges));
      that._updateLockCount--;
    }
    that._columnChanges = void 0;
    if (options2 = columnChanges.optionNames, options2 && reinitOptionNames.some((name2) => options2[name2])) {
      that._reinitAfterLookupChanges = null === columnChanges || void 0 === columnChanges ? void 0 : columnChanges.optionNames.lookup;
      that.reinit();
      that._reinitAfterLookupChanges = void 0;
    } else {
      that.columnsChanged.fire(columnChanges);
    }
  }
  var options2;
};
var updateSortOrderWhenGrouping = function(that, column, groupIndex, prevGroupIndex) {
  var columnWasGrouped = prevGroupIndex >= 0;
  if (groupIndex >= 0) {
    if (!columnWasGrouped) {
      column.lastSortOrder = column.sortOrder;
    }
  } else {
    var sortMode = that.option("sorting.mode");
    var sortOrder = column.lastSortOrder;
    if ("single" === sortMode) {
      var sortedByAnotherColumn = that._columns.some((col) => col !== column && isDefined(col.sortIndex));
      if (sortedByAnotherColumn) {
        sortOrder = void 0;
      }
    }
    column.sortOrder = sortOrder;
  }
};
var fireOptionChanged = function(that, options2) {
  var {
    value: value2
  } = options2;
  var {
    optionName
  } = options2;
  var {
    prevValue
  } = options2;
  var {
    fullOptionName
  } = options2;
  var fullOptionPath = "".concat(fullOptionName, ".").concat(optionName);
  if (!IGNORE_COLUMN_OPTION_NAMES[optionName] && that._skipProcessingColumnsChange !== fullOptionPath) {
    that._skipProcessingColumnsChange = fullOptionPath;
    that.component._notifyOptionChanged(fullOptionPath, value2, prevValue);
    that._skipProcessingColumnsChange = false;
  }
};
var columnOptionCore = function(that, column, optionName, value2, notFireEvent) {
  var optionGetter = compileGetter(optionName);
  var columnIndex = column.index;
  var columns2;
  var changeType;
  var initialColumn;
  if (3 === arguments.length) {
    return optionGetter(column, {
      functionsAsIs: true
    });
  }
  var prevValue = optionGetter(column, {
    functionsAsIs: true
  });
  if (!equalByValue(prevValue, value2, {
    maxDepth: 5
  })) {
    if ("groupIndex" === optionName || "calculateGroupValue" === optionName) {
      changeType = "grouping";
      updateSortOrderWhenGrouping(that, column, value2, prevValue);
    } else if ("sortIndex" === optionName || "sortOrder" === optionName || "calculateSortValue" === optionName) {
      changeType = "sorting";
    } else {
      changeType = "columns";
    }
    var optionSetter = compileSetter(optionName);
    optionSetter(column, value2, {
      functionsAsIs: true
    });
    var fullOptionName = getColumnFullPath(that, column);
    if (COLUMN_INDEX_OPTIONS[optionName]) {
      updateIndexes(that, column);
      value2 = optionGetter(column);
    }
    if ("name" === optionName || "allowEditing" === optionName) {
      that._checkColumns();
    }
    if (!isDefined(prevValue) && !isDefined(value2) && 0 !== optionName.indexOf("buffer")) {
      notFireEvent = true;
    }
    if (!notFireEvent) {
      if (!USER_STATE_FIELD_NAMES.includes(optionName) && "visibleWidth" !== optionName) {
        columns2 = that.option("columns");
        initialColumn = that.getColumnByPath(fullOptionName, columns2);
        if (isString(initialColumn)) {
          initialColumn = columns2[columnIndex] = {
            dataField: initialColumn
          };
        }
        if (initialColumn && checkUserStateColumn(initialColumn, column)) {
          optionSetter(initialColumn, value2, {
            functionsAsIs: true
          });
        }
      }
      updateColumnChanges(that, changeType, optionName, columnIndex);
    } else {
      resetColumnsCache(that);
    }
    fullOptionName && fireOptionChanged(that, {
      fullOptionName,
      optionName,
      value: value2,
      prevValue
    });
  }
};
function isSortOrderValid(sortOrder) {
  return "asc" === sortOrder || "desc" === sortOrder;
}
var addExpandColumn = function(that) {
  var options2 = that._getExpandColumnOptions();
  that.addCommandColumn(options2);
};
var defaultSetCellValue = function(data3, value2) {
  if (!this.dataField) {
    return;
  }
  var path = this.dataField.split(".");
  var dotCount = path.length - 1;
  if (this.serializeValue) {
    value2 = this.serializeValue(value2);
  }
  for (var i = 0; i < dotCount; i++) {
    var name2 = path[i];
    data3 = data3[name2] = data3[name2] || {};
  }
  data3[path[dotCount]] = value2;
};
var getDataColumns = function getDataColumns2(columns2, rowIndex, bandColumnID) {
  var result2 = [];
  rowIndex = rowIndex || 0;
  columns2[rowIndex] && each(columns2[rowIndex], (_, column) => {
    if (column.ownerBand === bandColumnID || column.type === GROUP_COMMAND_COLUMN_NAME) {
      if (!column.isBand || !column.colspan) {
        if (!column.command || rowIndex < 1) {
          result2.push(column);
        }
      } else {
        result2.push.apply(result2, getDataColumns2(columns2, rowIndex + 1, column.index));
      }
    }
  });
  return result2;
};
var getRowCount = function(that) {
  var rowCount = 1;
  var bandColumnsCache = that.getBandColumnsCache();
  var {
    columnParentByIndex
  } = bandColumnsCache;
  that._columns.forEach((column) => {
    var parents = getParentBandColumns(column.index, columnParentByIndex);
    var invisibleParents = parents.filter((column2) => !column2.visible);
    if (column.visible && !invisibleParents.length) {
      rowCount = Math.max(rowCount, parents.length + 1);
    }
  });
  return rowCount;
};
var isCustomCommandColumn = (that, commandColumn) => {
  var customCommandColumns = that._columns.filter((column) => column.type === commandColumn.type);
  return !!customCommandColumns.length;
};
var getFixedPosition = function(that, column) {
  var rtlEnabled = that.option("rtlEnabled");
  if (column.command && !isCustomCommandColumn(that, column) || !column.fixedPosition) {
    return rtlEnabled ? "right" : "left";
  }
  return column.fixedPosition;
};
var processExpandColumns = function(columns2, expandColumns, type2, columnIndex) {
  var customColumnIndex;
  var rowCount = this.getRowCount();
  var rowspan = columns2[columnIndex] && columns2[columnIndex].rowspan;
  var expandColumnsByType = expandColumns.filter((column) => column.type === type2);
  columns2.forEach((column, index2) => {
    if (column.type === type2) {
      customColumnIndex = index2;
      rowspan = columns2[index2 + 1] ? columns2[index2 + 1].rowspan : rowCount;
    }
  });
  if (rowspan > 1) {
    expandColumnsByType = map(expandColumnsByType, (expandColumn) => extend({}, expandColumn, {
      rowspan
    }));
  }
  expandColumnsByType.unshift.apply(expandColumnsByType, isDefined(customColumnIndex) ? [customColumnIndex, 1] : [columnIndex, 0]);
  columns2.splice.apply(columns2, expandColumnsByType);
  return rowspan || 1;
};
var digitsCount = function(number) {
  var i;
  for (i = 0; number > 1; i++) {
    number /= 10;
  }
  return i;
};
var numberToString = function(number, digitsCount2) {
  var str = number ? number.toString() : "0";
  while (str.length < digitsCount2) {
    str = "0".concat(str);
  }
  return str;
};
var mergeColumns = (that, columns2, commandColumns, needToExtend) => {
  var column;
  var commandColumnIndex;
  var result2 = columns2.slice().map((column2) => extend({}, column2));
  var isColumnFixing = that._isColumnFixing();
  var defaultCommandColumns = commandColumns.slice().map((column2) => extend({
    fixed: isColumnFixing
  }, column2));
  var getCommandColumnIndex = (column2) => commandColumns.reduce((result3, commandColumn, index2) => {
    var columnType = needToExtend && column2.type === GROUP_COMMAND_COLUMN_NAME ? "expand" : column2.type;
    return commandColumn.type === columnType || commandColumn.command === column2.command ? index2 : result3;
  }, -1);
  var callbackFilter = (commandColumn) => commandColumn.command !== commandColumns[commandColumnIndex].command;
  for (var i = 0; i < columns2.length; i++) {
    column = columns2[i];
    commandColumnIndex = column && (column.type || column.command) ? getCommandColumnIndex(column) : -1;
    if (commandColumnIndex >= 0) {
      if (needToExtend) {
        result2[i] = extend({
          fixed: isColumnFixing
        }, commandColumns[commandColumnIndex], column);
        if (column.type !== GROUP_COMMAND_COLUMN_NAME) {
          defaultCommandColumns = defaultCommandColumns.filter(callbackFilter);
        }
      } else {
        var columnOptions = {
          visibleIndex: column.visibleIndex,
          index: column.index,
          headerId: column.headerId,
          allowFixing: 0 === column.groupIndex,
          allowReordering: 0 === column.groupIndex,
          groupIndex: column.groupIndex
        };
        result2[i] = extend({}, column, commandColumns[commandColumnIndex], column.type === GROUP_COMMAND_COLUMN_NAME && columnOptions);
      }
    }
  }
  if (columns2.length && needToExtend && defaultCommandColumns.length) {
    result2 = result2.concat(defaultCommandColumns);
  }
  return result2;
};
var isColumnFixed = (that, column) => isDefined(column.fixed) || !column.type ? column.fixed : that._isColumnFixing();
var convertOwnerBandToColumnReference = (columns2) => {
  columns2.forEach((column) => {
    if (isDefined(column.ownerBand)) {
      column.ownerBand = columns2[column.ownerBand];
    }
  });
};
var resetBandColumnsCache = (that) => {
  that._bandColumnsCache = void 0;
};
var findColumn = (columns2, identifier) => {
  var identifierOptionName = isString(identifier) && identifier.substr(0, identifier.indexOf(":"));
  var column;
  if (void 0 === identifier) {
    return;
  }
  if (identifierOptionName) {
    identifier = identifier.substr(identifierOptionName.length + 1);
  }
  if (identifierOptionName) {
    column = columns2.filter((column2) => "".concat(column2[identifierOptionName]) === identifier)[0];
  } else {
    ["index", "name", "dataField", "caption"].some((optionName) => {
      column = columns2.filter((column2) => column2[optionName] === identifier)[0];
      return !!column;
    });
  }
  return column;
};
var sortColumns = (columns2, sortOrder) => {
  if ("asc" !== sortOrder && "desc" !== sortOrder) {
    return columns2;
  }
  var sign2 = "asc" === sortOrder ? 1 : -1;
  columns2.sort((column1, column2) => {
    var caption1 = column1.caption || "";
    var caption2 = column2.caption || "";
    return sign2 * caption1.localeCompare(caption2);
  });
  return columns2;
};
var strictParseNumber = function(text, format2) {
  var parsedValue = number_default2.parse(text);
  if (isNumeric(parsedValue)) {
    var formattedValue = number_default2.format(parsedValue, format2);
    var formattedValueWithDefaultFormat = number_default2.format(parsedValue, "decimal");
    if (formattedValue === text || formattedValueWithDefaultFormat === text) {
      return parsedValue;
    }
  }
};

// node_modules/devextreme/esm/__internal/grids/grid_core/columns_controller/m_columns_controller.js
var ColumnsController = class extends m_modules_default.Controller {
  _getExpandColumnOptions() {
    return {
      type: "expand",
      command: "expand",
      width: "auto",
      cssClass: COMMAND_EXPAND_CLASS,
      allowEditing: false,
      allowGrouping: false,
      allowSorting: false,
      allowResizing: false,
      allowReordering: false,
      allowHiding: false
    };
  }
  _getFirstItems(dataSource) {
    var groupsCount;
    var items = [];
    if (dataSource && dataSource.items().length > 0) {
      groupsCount = m_utils_default.normalizeSortingInfo(dataSource.group()).length;
      items = function getFirstItemsCore(items2, groupsCount2) {
        if (!items2 || !groupsCount2) {
          return items2;
        }
        for (var i = 0; i < items2.length; i++) {
          var childItems = getFirstItemsCore(items2[i].items || items2[i].collapsedItems, groupsCount2 - 1);
          if (childItems && childItems.length) {
            return childItems;
          }
        }
      }(dataSource.items(), groupsCount) || [];
    }
    return items;
  }
  _endUpdateCore() {
    !this._skipProcessingColumnsChange && fireColumnsChanged(this);
  }
  init(isApplyingUserState) {
    var columns2 = this.option("columns");
    this._commandColumns = this._commandColumns || [];
    this._columns = this._columns || [];
    this._isColumnsFromOptions = !!columns2;
    if (this._isColumnsFromOptions) {
      assignColumns(this, columns2 ? createColumnsFromOptions(this, columns2) : []);
      applyUserState(this);
    } else {
      assignColumns(this, this._columnsUserState ? createColumnsFromOptions(this, this._columnsUserState) : this._columns);
    }
    addExpandColumn(this);
    if (this._dataSourceApplied) {
      this.applyDataSource(this._dataSource, true, isApplyingUserState);
    } else {
      updateIndexes(this);
    }
    this._checkColumns();
  }
  callbackNames() {
    return ["columnsChanged"];
  }
  getColumnByPath(path, columns2) {
    var column;
    var columnIndexes = [];
    path.replace(COLUMN_OPTION_REGEXP, (_, columnIndex) => {
      columnIndexes.push(parseInt(columnIndex));
      return "";
    });
    if (columnIndexes.length) {
      if (columns2) {
        column = columnIndexes.reduce((column2, index2) => column2 && column2.columns && column2.columns[index2], {
          columns: columns2
        });
      } else {
        column = getColumnByIndexes(this, columnIndexes);
      }
    }
    return column;
  }
  optionChanged(args) {
    var needUpdateRequireResize;
    switch (args.name) {
      case "adaptColumnWidthByRatio":
        args.handled = true;
        break;
      case "dataSource":
        if (args.value !== args.previousValue && !this.option("columns") && (!Array.isArray(args.value) || !Array.isArray(args.previousValue))) {
          this._columns = [];
        }
        break;
      case "columns":
        needUpdateRequireResize = this._skipProcessingColumnsChange;
        args.handled = true;
        if (!this._skipProcessingColumnsChange) {
          if (args.name === args.fullName) {
            this._columnsUserState = null;
            this._ignoreColumnOptionNames = null;
            this.init();
          } else {
            this._columnOptionChanged(args);
            needUpdateRequireResize = true;
          }
        }
        if (needUpdateRequireResize) {
          this._updateRequireResize(args);
        }
        break;
      case "commonColumnSettings":
      case "columnAutoWidth":
      case "allowColumnResizing":
      case "allowColumnReordering":
      case "columnFixing":
      case "grouping":
      case "groupPanel":
      case "regenerateColumnsByVisibleItems":
      case "customizeColumns":
      case "columnHidingEnabled":
      case "dateSerializationFormat":
      case "columnResizingMode":
      case "columnMinWidth":
      case "columnWidth":
        args.handled = true;
        var ignoreColumnOptionNames = "columnWidth" === args.fullName && ["width"];
        this.reinit(ignoreColumnOptionNames);
        break;
      case "rtlEnabled":
        this.reinit();
        break;
      default:
        super.optionChanged(args);
    }
  }
  _columnOptionChanged(args) {
    var columnOptionValue = {};
    var column = this.getColumnByPath(args.fullName);
    var columnOptionName = args.fullName.replace(COLUMN_OPTION_REGEXP, "");
    if (column) {
      if (columnOptionName) {
        columnOptionValue[columnOptionName] = args.value;
      } else {
        columnOptionValue = args.value;
      }
      this._skipProcessingColumnsChange = args.fullName;
      this.columnOption(column.index, columnOptionValue);
      this._skipProcessingColumnsChange = false;
    }
  }
  _updateRequireResize(args) {
    var {
      component
    } = this;
    if ("width" === args.fullName.replace(COLUMN_OPTION_REGEXP, "") && component._updateLockCount) {
      component._requireResize = true;
    }
  }
  publicMethods() {
    return ["addColumn", "deleteColumn", "columnOption", "columnCount", "clearSorting", "clearGrouping", "getVisibleColumns", "getVisibleColumnIndex"];
  }
  applyDataSource(dataSource, forceApplying, isApplyingUserState) {
    var isDataSourceLoaded = dataSource && dataSource.isLoaded();
    this._dataSource = dataSource;
    if (!this._dataSourceApplied || 0 === this._dataSourceColumnsCount || forceApplying || this.option("regenerateColumnsByVisibleItems")) {
      if (isDataSourceLoaded) {
        if (!this._isColumnsFromOptions) {
          var columnsFromDataSource = createColumnsFromDataSource(this, dataSource);
          if (columnsFromDataSource.length) {
            assignColumns(this, columnsFromDataSource);
            this._dataSourceColumnsCount = this._columns.length;
            applyUserState(this);
          }
        }
        return this.updateColumns(dataSource, forceApplying, isApplyingUserState);
      }
      this._dataSourceApplied = false;
      updateIndexes(this);
    } else if (isDataSourceLoaded && !this.isAllDataTypesDefined(true) && this.updateColumnDataTypes(dataSource)) {
      updateColumnChanges(this, "columns");
      fireColumnsChanged(this);
      return new Deferred().reject().promise();
    }
  }
  reset() {
    this._dataSource = null;
    this._dataSourceApplied = false;
    this._dataSourceColumnsCount = void 0;
    this.reinit();
  }
  resetColumnsCache() {
    this._visibleColumns = void 0;
    this._fixedColumns = void 0;
    this._rowCount = void 0;
    resetBandColumnsCache(this);
  }
  reinit(ignoreColumnOptionNames) {
    this._columnsUserState = this.getUserState();
    this._ignoreColumnOptionNames = ignoreColumnOptionNames || null;
    this.init();
    if (ignoreColumnOptionNames) {
      this._ignoreColumnOptionNames = null;
    }
  }
  isInitialized() {
    return !!this._columns.length || !!this.option("columns");
  }
  isDataSourceApplied() {
    return this._dataSourceApplied;
  }
  getCommonSettings(column) {
    var _a2, _b2;
    var commonColumnSettings = (!column || !column.type) && this.option("commonColumnSettings") || {};
    var groupingOptions = null !== (_a2 = this.option("grouping")) && void 0 !== _a2 ? _a2 : {};
    var groupPanelOptions = null !== (_b2 = this.option("groupPanel")) && void 0 !== _b2 ? _b2 : {};
    return extend({
      allowFixing: this.option("columnFixing.enabled"),
      allowResizing: this.option("allowColumnResizing") || void 0,
      allowReordering: this.option("allowColumnReordering"),
      minWidth: this.option("columnMinWidth"),
      width: this.option("columnWidth"),
      autoExpandGroup: groupingOptions.autoExpandAll,
      allowCollapsing: groupingOptions.allowCollapsing,
      allowGrouping: groupPanelOptions.allowColumnDragging && groupPanelOptions.visible || groupingOptions.contextMenuEnabled
    }, commonColumnSettings);
  }
  isColumnOptionUsed(optionName) {
    for (var i = 0; i < this._columns.length; i++) {
      if (this._columns[i][optionName]) {
        return true;
      }
    }
  }
  isAllDataTypesDefined(checkSerializers) {
    var columns2 = this._columns;
    if (!columns2.length) {
      return false;
    }
    for (var i = 0; i < columns2.length; i++) {
      if (!columns2[i].dataField && columns2[i].calculateCellValue === columns2[i].defaultCalculateCellValue) {
        continue;
      }
      if (!columns2[i].dataType || checkSerializers && columns2[i].deserializeValue && void 0 === columns2[i].serializationFormat) {
        return false;
      }
    }
    return true;
  }
  getColumns() {
    return this._columns;
  }
  isBandColumnsUsed() {
    return this.getColumns().some((column) => column.isBand);
  }
  getGroupColumns() {
    var result2 = [];
    each(this._columns, function() {
      if (isDefined(this.groupIndex)) {
        result2[this.groupIndex] = this;
      }
    });
    return result2;
  }
  _shouldReturnVisibleColumns() {
    return true;
  }
  _compileVisibleColumns(rowIndex) {
    this._visibleColumns = this._visibleColumns || this._compileVisibleColumnsCore();
    rowIndex = isDefined(rowIndex) ? rowIndex : this._visibleColumns.length - 1;
    return this._visibleColumns[rowIndex] || [];
  }
  getVisibleColumns(rowIndex, isBase) {
    if (!this._shouldReturnVisibleColumns()) {
      return [];
    }
    return this._compileVisibleColumns.apply(this, arguments);
  }
  getFixedColumns(rowIndex) {
    this._fixedColumns = this._fixedColumns || this._getFixedColumnsCore();
    rowIndex = isDefined(rowIndex) ? rowIndex : this._fixedColumns.length - 1;
    return this._fixedColumns[rowIndex] || [];
  }
  getFilteringColumns() {
    return this.getColumns().filter((item) => (item.dataField || item.name) && (item.allowFiltering || item.allowHeaderFiltering)).map((item) => {
      var field = extend(true, {}, item);
      if (!isDefined(field.dataField)) {
        field.dataField = field.name;
      }
      field.filterOperations = item.filterOperations !== item.defaultFilterOperations ? field.filterOperations : null;
      return field;
    });
  }
  getColumnIndexOffset() {
    return 0;
  }
  _getFixedColumnsCore() {
    var result2 = [];
    var rowCount = this.getRowCount();
    var isColumnFixing = this._isColumnFixing();
    var transparentColumn = {
      command: "transparent"
    };
    var transparentColspan = 0;
    var notFixedColumnCount;
    var transparentColumnIndex;
    var lastFixedPosition;
    if (isColumnFixing) {
      for (var i = 0; i <= rowCount; i++) {
        notFixedColumnCount = 0;
        lastFixedPosition = null;
        transparentColumnIndex = null;
        var visibleColumns = this.getVisibleColumns(i, true);
        for (var j = 0; j < visibleColumns.length; j++) {
          var prevColumn = visibleColumns[j - 1];
          var column = visibleColumns[j];
          if (!column.fixed) {
            if (0 === i) {
              if (column.isBand && column.colspan) {
                transparentColspan += column.colspan;
              } else {
                transparentColspan++;
              }
            }
            notFixedColumnCount++;
            if (!isDefined(transparentColumnIndex)) {
              transparentColumnIndex = j;
            }
          } else if (prevColumn && prevColumn.fixed && getFixedPosition(this, prevColumn) !== getFixedPosition(this, column)) {
            if (!isDefined(transparentColumnIndex)) {
              transparentColumnIndex = j;
            }
          } else {
            lastFixedPosition = column.fixedPosition;
          }
        }
        if (0 === i && (0 === notFixedColumnCount || notFixedColumnCount >= visibleColumns.length)) {
          return [];
        }
        if (!isDefined(transparentColumnIndex)) {
          transparentColumnIndex = "right" === lastFixedPosition ? 0 : visibleColumns.length;
        }
        result2[i] = visibleColumns.slice(0);
        if (!transparentColumn.colspan) {
          transparentColumn.colspan = transparentColspan;
        }
        result2[i].splice(transparentColumnIndex, notFixedColumnCount, transparentColumn);
      }
    }
    return result2.map((columns2) => columns2.map((column2) => {
      var newColumn = _extends({}, column2);
      if (newColumn.headerId) {
        newColumn.headerId += "-fixed";
      }
      return newColumn;
    }));
  }
  _isColumnFixing() {
    var isColumnFixing = this.option("columnFixing.enabled");
    !isColumnFixing && each(this._columns, (_, column) => {
      if (column.fixed) {
        isColumnFixing = true;
        return false;
      }
    });
    return isColumnFixing;
  }
  _getExpandColumnsCore() {
    return this.getGroupColumns();
  }
  getExpandColumns() {
    var expandColumns = this._getExpandColumnsCore();
    var expandColumn;
    var firstGroupColumn = expandColumns.filter((column) => 0 === column.groupIndex)[0];
    var isFixedFirstGroupColumn = firstGroupColumn && firstGroupColumn.fixed;
    var isColumnFixing = this._isColumnFixing();
    var rtlEnabled = this.option("rtlEnabled");
    if (expandColumns.length) {
      expandColumn = this.columnOption("command:expand");
    }
    expandColumns = map(expandColumns, (column) => extend({}, column, {
      visibleWidth: null,
      minWidth: null,
      cellTemplate: !isDefined(column.groupIndex) ? column.cellTemplate : null,
      headerCellTemplate: null,
      fixed: !isDefined(column.groupIndex) || !isFixedFirstGroupColumn ? isColumnFixing : true,
      fixedPosition: rtlEnabled ? "right" : "left"
    }, expandColumn, {
      index: column.index,
      type: column.type || GROUP_COMMAND_COLUMN_NAME
    }));
    return expandColumns;
  }
  getBandColumnsCache() {
    if (!this._bandColumnsCache) {
      var columns2 = this._columns;
      var columnChildrenByIndex = {};
      var columnParentByIndex = {};
      var isPlain = true;
      columns2.forEach((column) => {
        var {
          ownerBand
        } = column;
        var parentIndex = isObject(ownerBand) ? ownerBand.index : ownerBand;
        var parent = columns2[parentIndex];
        if (column.hasColumns) {
          isPlain = false;
        }
        if (column.colspan) {
          column.colspan = void 0;
        }
        if (column.rowspan) {
          column.rowspan = void 0;
        }
        if (parent) {
          columnParentByIndex[column.index] = parent;
        } else {
          parentIndex = -1;
        }
        columnChildrenByIndex[parentIndex] = columnChildrenByIndex[parentIndex] || [];
        columnChildrenByIndex[parentIndex].push(column);
      });
      this._bandColumnsCache = {
        isPlain,
        columnChildrenByIndex,
        columnParentByIndex
      };
    }
    return this._bandColumnsCache;
  }
  _isColumnVisible(column) {
    return column.visible && this.isParentColumnVisible(column.index);
  }
  _isColumnInGroupPanel(column) {
    return isDefined(column.groupIndex) && !column.showWhenGrouped;
  }
  hasVisibleDataColumns() {
    var columns2 = this._columns;
    return columns2.some((column) => {
      var isVisible2 = this._isColumnVisible(column);
      var isInGroupPanel = this._isColumnInGroupPanel(column);
      var isCommand = !!column.command;
      return isVisible2 && !isInGroupPanel && !isCommand;
    });
  }
  _compileVisibleColumnsCore() {
    var bandColumnsCache = this.getBandColumnsCache();
    var columns2 = mergeColumns(this, this._columns, this._commandColumns, true);
    processBandColumns(this, columns2, bandColumnsCache);
    var indexedColumns = this._getIndexedColumns(columns2);
    var visibleColumns = this._getVisibleColumnsFromIndexed(indexedColumns);
    var isDataColumnsInvisible = !this.hasVisibleDataColumns();
    if (isDataColumnsInvisible && this._columns.length) {
      visibleColumns[visibleColumns.length - 1].push({
        command: "empty"
      });
    }
    return visibleColumns;
  }
  _getIndexedColumns(columns2) {
    var rtlEnabled = this.option("rtlEnabled");
    var rowCount = this.getRowCount();
    var columnDigitsCount = digitsCount(columns2.length);
    var bandColumnsCache = this.getBandColumnsCache();
    var positiveIndexedColumns = [];
    var negativeIndexedColumns = [];
    for (var i = 0; i < rowCount; i += 1) {
      negativeIndexedColumns[i] = [{}];
      positiveIndexedColumns[i] = [{}, {}, {}];
    }
    columns2.forEach((column) => {
      var _a2, _b2, _c, _d;
      var {
        visibleIndex
      } = column;
      var indexedColumns;
      var parentBandColumns = getParentBandColumns(column.index, bandColumnsCache.columnParentByIndex);
      var isVisible2 = this._isColumnVisible(column);
      var isInGroupPanel = this._isColumnInGroupPanel(column);
      if (isVisible2 && !isInGroupPanel) {
        var rowIndex = parentBandColumns.length;
        if (visibleIndex < 0) {
          visibleIndex = -visibleIndex;
          indexedColumns = negativeIndexedColumns[rowIndex];
        } else {
          column.fixed = null !== (_b2 = null === (_a2 = parentBandColumns[0]) || void 0 === _a2 ? void 0 : _a2.fixed) && void 0 !== _b2 ? _b2 : column.fixed;
          column.fixedPosition = null !== (_d = null === (_c = parentBandColumns[0]) || void 0 === _c ? void 0 : _c.fixedPosition) && void 0 !== _d ? _d : column.fixedPosition;
          if (column.fixed) {
            var isDefaultCommandColumn = !!column.command && !isCustomCommandColumn(this, column);
            var isFixedToEnd = "right" === column.fixedPosition;
            if (rtlEnabled && !isDefaultCommandColumn) {
              isFixedToEnd = !isFixedToEnd;
            }
            indexedColumns = isFixedToEnd ? positiveIndexedColumns[rowIndex][2] : positiveIndexedColumns[rowIndex][0];
          } else {
            indexedColumns = positiveIndexedColumns[rowIndex][1];
          }
        }
        if (parentBandColumns.length) {
          visibleIndex = numberToString(visibleIndex, columnDigitsCount);
          for (var _i = parentBandColumns.length - 1; _i >= 0; _i -= 1) {
            visibleIndex = numberToString(parentBandColumns[_i].visibleIndex, columnDigitsCount) + visibleIndex;
          }
        }
        indexedColumns[visibleIndex] = indexedColumns[visibleIndex] || [];
        indexedColumns[visibleIndex].push(column);
      }
    });
    return {
      positiveIndexedColumns,
      negativeIndexedColumns
    };
  }
  _getVisibleColumnsFromIndexed(_ref) {
    var _this = this;
    var {
      positiveIndexedColumns,
      negativeIndexedColumns
    } = _ref;
    var result2 = [];
    var rowCount = this.getRowCount();
    var expandColumns = mergeColumns(this, this.getExpandColumns(), this._columns);
    var rowspanGroupColumns = 0;
    var rowspanExpandColumns = 0;
    var _loop = function(rowIndex2) {
      result2.push([]);
      orderEach(negativeIndexedColumns[rowIndex2], (_, columns2) => {
        result2[rowIndex2].unshift.apply(result2[rowIndex2], columns2);
      });
      var firstPositiveIndexColumn = result2[rowIndex2].length;
      var positiveIndexedRowColumns = positiveIndexedColumns[rowIndex2];
      positiveIndexedRowColumns.forEach((columnsByFixing) => {
        orderEach(columnsByFixing, (_, columnsByVisibleIndex) => {
          result2[rowIndex2].push.apply(result2[rowIndex2], columnsByVisibleIndex);
        });
      });
      if (rowspanExpandColumns <= rowIndex2) {
        rowspanExpandColumns += processExpandColumns.call(_this, result2[rowIndex2], expandColumns, DETAIL_COMMAND_COLUMN_NAME, firstPositiveIndexColumn);
      }
      if (rowspanGroupColumns <= rowIndex2) {
        rowspanGroupColumns += processExpandColumns.call(_this, result2[rowIndex2], expandColumns, GROUP_COMMAND_COLUMN_NAME, firstPositiveIndexColumn);
      }
    };
    for (var rowIndex = 0; rowIndex < rowCount; rowIndex += 1) {
      _loop(rowIndex);
    }
    result2.push(getDataColumns(result2));
    return result2;
  }
  getInvisibleColumns(columns2, bandColumnIndex) {
    var that = this;
    var result2 = [];
    var hiddenColumnsByBand;
    columns2 = columns2 || that._columns;
    each(columns2, (_, column) => {
      if (column.ownerBand !== bandColumnIndex) {
        return;
      }
      if (column.isBand) {
        if (!column.visible) {
          hiddenColumnsByBand = that.getChildrenByBandColumn(column.index);
        } else {
          hiddenColumnsByBand = that.getInvisibleColumns(that.getChildrenByBandColumn(column.index), column.index);
        }
        if (hiddenColumnsByBand.length) {
          result2.push(column);
          result2 = result2.concat(hiddenColumnsByBand);
        }
        return;
      }
      if (!column.visible) {
        result2.push(column);
      }
    });
    return result2;
  }
  getChooserColumns(getAllColumns) {
    var columns2 = getAllColumns ? this.getColumns() : this.getInvisibleColumns();
    var columnChooserColumns = columns2.filter((column) => column.showInColumnChooser);
    var sortOrder = this.option("columnChooser.sortOrder");
    return sortColumns(columnChooserColumns, sortOrder);
  }
  allowMoveColumn(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {
    var columnIndex = getColumnIndexByVisibleIndex(this, fromVisibleIndex, sourceLocation);
    var sourceColumn = this._columns[columnIndex];
    if (sourceColumn && (sourceColumn.allowReordering || sourceColumn.allowGrouping || sourceColumn.allowHiding)) {
      if (sourceLocation === targetLocation) {
        if (sourceLocation === COLUMN_CHOOSER_LOCATION) {
          return false;
        }
        fromVisibleIndex = isObject(fromVisibleIndex) ? fromVisibleIndex.columnIndex : fromVisibleIndex;
        toVisibleIndex = isObject(toVisibleIndex) ? toVisibleIndex.columnIndex : toVisibleIndex;
        return fromVisibleIndex !== toVisibleIndex && fromVisibleIndex + 1 !== toVisibleIndex;
      }
      if (sourceLocation === GROUP_LOCATION && targetLocation !== COLUMN_CHOOSER_LOCATION || targetLocation === GROUP_LOCATION) {
        return sourceColumn && sourceColumn.allowGrouping;
      }
      if (sourceLocation === COLUMN_CHOOSER_LOCATION || targetLocation === COLUMN_CHOOSER_LOCATION) {
        return sourceColumn && sourceColumn.allowHiding;
      }
      return true;
    }
    return false;
  }
  moveColumn(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {
    var options2 = {};
    var prevGroupIndex;
    var fromIndex = getColumnIndexByVisibleIndex(this, fromVisibleIndex, sourceLocation);
    var toIndex = getColumnIndexByVisibleIndex(this, toVisibleIndex, targetLocation);
    var targetGroupIndex;
    if (fromIndex >= 0) {
      var column = this._columns[fromIndex];
      toVisibleIndex = isObject(toVisibleIndex) ? toVisibleIndex.columnIndex : toVisibleIndex;
      targetGroupIndex = toIndex >= 0 ? this._columns[toIndex].groupIndex : -1;
      if (isDefined(column.groupIndex) && sourceLocation === GROUP_LOCATION) {
        if (targetGroupIndex > column.groupIndex) {
          targetGroupIndex--;
        }
        if (targetLocation !== GROUP_LOCATION) {
          options2.groupIndex = void 0;
        } else {
          prevGroupIndex = column.groupIndex;
          delete column.groupIndex;
          updateColumnGroupIndexes(this);
        }
      }
      if (targetLocation === GROUP_LOCATION) {
        options2.groupIndex = moveColumnToGroup(this, column, targetGroupIndex);
        column.groupIndex = prevGroupIndex;
      } else if (toVisibleIndex >= 0) {
        var targetColumn = this._columns[toIndex];
        if (!targetColumn || column.ownerBand !== targetColumn.ownerBand) {
          options2.visibleIndex = MAX_SAFE_INTEGER;
        } else if (isColumnFixed(this, column) ^ isColumnFixed(this, targetColumn)) {
          options2.visibleIndex = MAX_SAFE_INTEGER;
        } else {
          options2.visibleIndex = targetColumn.visibleIndex;
        }
      }
      var isVisible2 = targetLocation !== COLUMN_CHOOSER_LOCATION;
      if (column.visible !== isVisible2) {
        options2.visible = isVisible2;
      }
      this.columnOption(column.index, options2);
    }
  }
  changeSortOrder(columnIndex, sortOrder) {
    var options2 = {};
    var sortingOptions = this.option("sorting");
    var sortingMode = sortingOptions && sortingOptions.mode;
    var needResetSorting = "single" === sortingMode || !sortOrder;
    var allowSorting = "single" === sortingMode || "multiple" === sortingMode;
    var column = this._columns[columnIndex];
    if (allowSorting && column && column.allowSorting) {
      if (needResetSorting && !isDefined(column.groupIndex)) {
        each(this._columns, function(index2) {
          if (index2 !== columnIndex && this.sortOrder) {
            if (!isDefined(this.groupIndex)) {
              delete this.sortOrder;
            }
            delete this.sortIndex;
          }
        });
      }
      if (isSortOrderValid(sortOrder)) {
        if (column.sortOrder !== sortOrder) {
          options2.sortOrder = sortOrder;
        }
      } else if ("none" === sortOrder) {
        if (column.sortOrder) {
          options2.sortIndex = void 0;
          options2.sortOrder = void 0;
        }
      } else {
        !function(column2) {
          if ("ctrl" === sortOrder) {
            if (!("sortOrder" in column2 && "sortIndex" in column2)) {
              return false;
            }
            options2.sortOrder = void 0;
            options2.sortIndex = void 0;
          } else if (isDefined(column2.groupIndex) || isDefined(column2.sortIndex)) {
            options2.sortOrder = "desc" === column2.sortOrder ? "asc" : "desc";
          } else {
            options2.sortOrder = "asc";
          }
          return true;
        }(column);
      }
    }
    this.columnOption(column.index, options2);
  }
  getSortDataSourceParameters(useLocalSelector) {
    var sortColumns2 = [];
    var sort = [];
    each(this._columns, function() {
      if ((this.dataField || this.selector || this.calculateCellValue) && isDefined(this.sortIndex) && !isDefined(this.groupIndex)) {
        sortColumns2[this.sortIndex] = this;
      }
    });
    each(sortColumns2, function() {
      var sortOrder = this && this.sortOrder;
      if (isSortOrderValid(sortOrder)) {
        var sortItem = {
          selector: this.calculateSortValue || this.displayField || this.calculateDisplayValue || useLocalSelector && this.selector || this.dataField || this.calculateCellValue,
          desc: "desc" === this.sortOrder
        };
        if (this.sortingMethod) {
          sortItem.compare = this.sortingMethod.bind(this);
        }
        sort.push(sortItem);
      }
    });
    return sort.length > 0 ? sort : null;
  }
  getGroupDataSourceParameters(useLocalSelector) {
    var group = [];
    each(this.getGroupColumns(), function() {
      var selector = this.calculateGroupValue || this.displayField || this.calculateDisplayValue || useLocalSelector && this.selector || this.dataField || this.calculateCellValue;
      if (selector) {
        var groupItem = {
          selector,
          desc: "desc" === this.sortOrder,
          isExpanded: !!this.autoExpandGroup
        };
        if (this.sortingMethod) {
          groupItem.compare = this.sortingMethod.bind(this);
        }
        group.push(groupItem);
      }
    });
    return group.length > 0 ? group : null;
  }
  refresh(updateNewLookupsOnly) {
    var deferreds = [];
    each(this._columns, function() {
      var {
        lookup
      } = this;
      if (lookup && !this.calculateDisplayValue) {
        if (updateNewLookupsOnly && lookup.valueMap) {
          return;
        }
        if (lookup.update) {
          deferreds.push(lookup.update());
        }
      }
    });
    return when.apply(renderer_default, deferreds).done(resetColumnsCache.bind(null, this));
  }
  _updateColumnOptions(column, columnIndex) {
    column.selector = column.selector || function(data3) {
      return column.calculateCellValue(data3);
    };
    if (this._reinitAfterLookupChanges && this._previousColumns) {
      column.selector.columnIndex = columnIndex;
      column.selector.originalCallback = this._previousColumns[columnIndex].selector.originalCallback;
    } else {
      column.selector.columnIndex = columnIndex;
      column.selector.originalCallback = column.selector;
    }
    each(["calculateSortValue", "calculateGroupValue", "calculateDisplayValue"], (_, calculateCallbackName) => {
      var calculateCallback = column[calculateCallbackName];
      if (isFunction(calculateCallback)) {
        if (!calculateCallback.originalCallback) {
          var context2 = {
            column
          };
          column[calculateCallbackName] = function(data3) {
            return calculateCallback.call(context2.column, data3);
          };
          column[calculateCallbackName].originalCallback = calculateCallback;
          column[calculateCallbackName].columnIndex = columnIndex;
          column[calculateCallbackName].context = context2;
        } else {
          column[calculateCallbackName].context.column = column;
        }
      }
    });
    if (isString(column.calculateDisplayValue)) {
      column.displayField = column.calculateDisplayValue;
      column.calculateDisplayValue = compileGetter(column.displayField);
    }
    if (column.calculateDisplayValue) {
      column.displayValueMap = column.displayValueMap || {};
    }
    updateSerializers(column, column.dataType);
    var {
      lookup
    } = column;
    if (lookup) {
      updateSerializers(lookup, lookup.dataType);
    }
    var dataType = lookup ? lookup.dataType : column.dataType;
    if (dataType) {
      column.alignment = column.alignment || getAlignmentByDataType(dataType, this.option("rtlEnabled"));
      column.format = column.format || m_utils_default.getFormatByDataType(dataType);
      column.customizeText = column.customizeText || getCustomizeTextByDataType(dataType);
      column.defaultFilterOperations = column.defaultFilterOperations || !lookup && DATATYPE_OPERATIONS[dataType] || [];
      if (!isDefined(column.filterOperations)) {
        setFilterOperationsAsDefaultValues(column);
      }
      column.defaultFilterOperation = column.filterOperations && column.filterOperations[0] || "=";
      column.showEditorAlways = isDefined(column.showEditorAlways) ? column.showEditorAlways : "boolean" === dataType && !column.cellTemplate && !column.lookup;
    }
  }
  updateColumnDataTypes(dataSource) {
    var that = this;
    var dateSerializationFormat = that.option("dateSerializationFormat");
    var firstItems = that._getFirstItems(dataSource);
    var isColumnDataTypesUpdated = false;
    each(that._columns, (index2, column) => {
      var i;
      var value2;
      var dataType;
      var lookupDataType;
      var valueDataType;
      var {
        lookup
      } = column;
      if (m_utils_default.isDateType(column.dataType) && void 0 === column.serializationFormat) {
        column.serializationFormat = dateSerializationFormat;
      }
      if (lookup && m_utils_default.isDateType(lookup.dataType) && void 0 === column.serializationFormat) {
        lookup.serializationFormat = dateSerializationFormat;
      }
      if (column.calculateCellValue && firstItems.length) {
        if (!column.dataType || lookup && !lookup.dataType) {
          for (i = 0; i < firstItems.length; i++) {
            value2 = column.calculateCellValue(firstItems[i]);
            if (!column.dataType) {
              valueDataType = getValueDataType(value2);
              dataType = dataType || valueDataType;
              if (dataType && valueDataType && dataType !== valueDataType) {
                dataType = "string";
              }
            }
            if (lookup && !lookup.dataType) {
              valueDataType = getValueDataType(m_utils_default.getDisplayValue(column, value2, firstItems[i]));
              lookupDataType = lookupDataType || valueDataType;
              if (lookupDataType && valueDataType && lookupDataType !== valueDataType) {
                lookupDataType = "string";
              }
            }
          }
          if (dataType || lookupDataType) {
            if (dataType) {
              column.dataType = dataType;
            }
            if (lookup && lookupDataType) {
              lookup.dataType = lookupDataType;
            }
            isColumnDataTypesUpdated = true;
          }
        }
        if (void 0 === column.serializationFormat || lookup && void 0 === lookup.serializationFormat) {
          for (i = 0; i < firstItems.length; i++) {
            value2 = column.calculateCellValue(firstItems[i], true);
            if (void 0 === column.serializationFormat) {
              column.serializationFormat = getSerializationFormat(column.dataType, value2);
            }
            if (lookup && void 0 === lookup.serializationFormat) {
              lookup.serializationFormat = getSerializationFormat(lookup.dataType, lookup.calculateCellValue(value2, true));
            }
          }
        }
      }
      that._updateColumnOptions(column, index2);
    });
    return isColumnDataTypesUpdated;
  }
  _customizeColumns(columns2) {
    var customizeColumns = this.option("customizeColumns");
    if (customizeColumns) {
      var hasOwnerBand = columns2.some((column) => isObject(column.ownerBand));
      if (hasOwnerBand) {
        updateIndexes(this);
      }
      customizeColumns(columns2);
      assignColumns(this, createColumnsFromOptions(this, columns2));
    }
  }
  updateColumns(dataSource, forceApplying, isApplyingUserState) {
    if (!forceApplying) {
      this.updateSortingGrouping(dataSource);
    }
    if (!dataSource || dataSource.isLoaded()) {
      var sortParameters = dataSource ? dataSource.sort() || [] : this.getSortDataSourceParameters();
      var groupParameters = dataSource ? dataSource.group() || [] : this.getGroupDataSourceParameters();
      var filterParameters = null === dataSource || void 0 === dataSource ? void 0 : dataSource.lastLoadOptions().filter;
      if (!isApplyingUserState) {
        this._customizeColumns(this._columns);
      }
      updateIndexes(this);
      var columns2 = this._columns;
      return when(this.refresh(true)).always(() => {
        if (this._columns !== columns2) {
          return;
        }
        this._updateChanges(dataSource, {
          sorting: sortParameters,
          grouping: groupParameters,
          filtering: filterParameters
        });
        fireColumnsChanged(this);
      });
    }
  }
  _updateChanges(dataSource, parameters) {
    if (dataSource) {
      this.updateColumnDataTypes(dataSource);
      this._dataSourceApplied = true;
    }
    if (!m_utils_default.equalSortParameters(parameters.sorting, this.getSortDataSourceParameters())) {
      updateColumnChanges(this, "sorting");
    }
    if (!m_utils_default.equalSortParameters(parameters.grouping, this.getGroupDataSourceParameters())) {
      updateColumnChanges(this, "grouping");
    }
    var dataController2 = this.getController("data");
    if (dataController2 && !m_utils_default.equalFilterParameters(parameters.filtering, dataController2.getCombinedFilter())) {
      updateColumnChanges(this, "filtering");
    }
    updateColumnChanges(this, "columns");
  }
  updateSortingGrouping(dataSource, fromDataSource) {
    var that = this;
    var sortParameters;
    var isColumnsChanged;
    var updateSortGroupParameterIndexes = function(columns2, sortParameters2, indexParameterName) {
      each(columns2, (index2, column) => {
        delete column[indexParameterName];
        if (sortParameters2) {
          for (var i = 0; i < sortParameters2.length; i++) {
            var {
              selector
            } = sortParameters2[i];
            var {
              isExpanded
            } = sortParameters2[i];
            if (selector === column.dataField || selector === column.name || selector === column.selector || selector === column.calculateCellValue || selector === column.calculateGroupValue || selector === column.calculateDisplayValue) {
              if (fromDataSource) {
                column.sortOrder = "sortOrder" in column ? column.sortOrder : sortParameters2[i].desc ? "desc" : "asc";
              } else {
                column.sortOrder = column.sortOrder || (sortParameters2[i].desc ? "desc" : "asc");
              }
              if (void 0 !== isExpanded) {
                column.autoExpandGroup = isExpanded;
              }
              column[indexParameterName] = i;
              break;
            }
          }
        }
      });
    };
    if (dataSource) {
      sortParameters = m_utils_default.normalizeSortingInfo(dataSource.sort());
      var groupParameters = m_utils_default.normalizeSortingInfo(dataSource.group());
      var columnsGroupParameters = that.getGroupDataSourceParameters();
      var columnsSortParameters = that.getSortDataSourceParameters();
      var groupingChanged = !m_utils_default.equalSortParameters(groupParameters, columnsGroupParameters, true);
      var groupExpandingChanged = !groupingChanged && !m_utils_default.equalSortParameters(groupParameters, columnsGroupParameters);
      if (!that._columns.length) {
        each(groupParameters, (index2, group) => {
          that._columns.push(group.selector);
        });
        each(sortParameters, (index2, sort) => {
          if (!isFunction(sort.selector)) {
            that._columns.push(sort.selector);
          }
        });
        assignColumns(that, createColumnsFromOptions(that, that._columns));
      }
      if ((fromDataSource || !columnsGroupParameters && !that._hasUserState) && (groupingChanged || groupExpandingChanged)) {
        updateSortGroupParameterIndexes(that._columns, groupParameters, "groupIndex");
        if (fromDataSource) {
          groupingChanged && updateColumnChanges(that, "grouping");
          groupExpandingChanged && updateColumnChanges(that, "groupExpanding");
          isColumnsChanged = true;
        }
      }
      if ((fromDataSource || !columnsSortParameters && !that._hasUserState) && !m_utils_default.equalSortParameters(sortParameters, columnsSortParameters)) {
        updateSortGroupParameterIndexes(that._columns, sortParameters, "sortIndex");
        if (fromDataSource) {
          updateColumnChanges(that, "sorting");
          isColumnsChanged = true;
        }
      }
      if (isColumnsChanged) {
        fireColumnsChanged(that);
      }
    }
  }
  updateFilter(filter, remoteFiltering, columnIndex, filterValue) {
    if (!Array.isArray(filter)) {
      return filter;
    }
    filter = extend([], filter);
    columnIndex = void 0 !== filter.columnIndex ? filter.columnIndex : columnIndex;
    filterValue = void 0 !== filter.filterValue ? filter.filterValue : filterValue;
    if (isString(filter[0]) && "!" !== filter[0]) {
      var column = this.columnOption(filter[0]);
      if (remoteFiltering) {
        if (config_default().forceIsoDateParsing && column && column.serializeValue && filter.length > 1) {
          filter[filter.length - 1] = column.serializeValue(filter[filter.length - 1], "filter");
        }
      } else if (column && column.selector) {
        filter[0] = column.selector;
        filter[0].columnIndex = column.index;
      }
    } else if (isFunction(filter[0])) {
      filter[0].columnIndex = columnIndex;
      filter[0].filterValue = filterValue;
      filter[0].selectedFilterOperation = filter.selectedFilterOperation;
    }
    for (var i = 0; i < filter.length; i++) {
      filter[i] = this.updateFilter(filter[i], remoteFiltering, columnIndex, filterValue);
    }
    return filter;
  }
  columnCount() {
    return this._columns ? this._columns.length : 0;
  }
  columnOption(identifier, option, value2, notFireEvent) {
    var that = this;
    var columns2 = that._columns.concat(that._commandColumns);
    var column = findColumn(columns2, identifier);
    if (column) {
      if (1 === arguments.length) {
        return extend({}, column);
      }
      if (isString(option)) {
        if (2 === arguments.length) {
          return columnOptionCore(that, column, option);
        }
        columnOptionCore(that, column, option, value2, notFireEvent);
      } else if (isObject(option)) {
        each(option, (optionName, value3) => {
          columnOptionCore(that, column, optionName, value3, notFireEvent);
        });
      }
      fireColumnsChanged(that);
    }
  }
  clearSorting() {
    var columnCount = this.columnCount();
    this.beginUpdate();
    for (var i = 0; i < columnCount; i++) {
      this.columnOption(i, "sortOrder", void 0);
      delete findColumn(this._columns, i).sortOrder;
    }
    this.endUpdate();
  }
  clearGrouping() {
    var columnCount = this.columnCount();
    this.beginUpdate();
    for (var i = 0; i < columnCount; i++) {
      this.columnOption(i, "groupIndex", void 0);
    }
    this.endUpdate();
  }
  getVisibleIndex(index2, rowIndex) {
    var columns2 = this.getVisibleColumns(rowIndex);
    for (var i = columns2.length - 1; i >= 0; i--) {
      if (columns2[i].index === index2) {
        return i;
      }
    }
    return -1;
  }
  getVisibleIndexByColumn(column, rowIndex) {
    var visibleColumns = this.getVisibleColumns(rowIndex);
    var visibleColumn = visibleColumns.filter((col) => col.index === column.index && col.command === column.command)[0];
    return visibleColumns.indexOf(visibleColumn);
  }
  getVisibleColumnIndex(id, rowIndex) {
    var index2 = this.columnOption(id, "index");
    return this.getVisibleIndex(index2, rowIndex);
  }
  addColumn(options2) {
    var column = createColumn(this, options2);
    var index2 = this._columns.length;
    this._columns.push(column);
    if (column.isBand) {
      this._columns = createColumnsFromOptions(this, this._columns);
      column = this._columns[index2];
    }
    column.added = options2;
    updateIndexes(this, column);
    this.updateColumns(this._dataSource);
    this._checkColumns();
  }
  deleteColumn(id) {
    var column = this.columnOption(id);
    if (column && column.index >= 0) {
      convertOwnerBandToColumnReference(this._columns);
      this._columns.splice(column.index, 1);
      if (column.isBand) {
        var childIndexes = this.getChildrenByBandColumn(column.index).map((column2) => column2.index);
        this._columns = this._columns.filter((column2) => childIndexes.indexOf(column2.index) < 0);
      }
      updateIndexes(this);
      this.updateColumns(this._dataSource);
    }
  }
  addCommandColumn(options2) {
    var commandColumn = this._commandColumns.filter((column) => column.command === options2.command)[0];
    if (!commandColumn) {
      commandColumn = options2;
      this._commandColumns.push(commandColumn);
    }
  }
  getUserState() {
    var columns2 = this._columns;
    var result2 = [];
    var i;
    function handleStateField(index2, value2) {
      if (void 0 !== columns2[i][value2]) {
        result2[i][value2] = columns2[i][value2];
      }
    }
    for (i = 0; i < columns2.length; i++) {
      result2[i] = {};
      each(USER_STATE_FIELD_NAMES, handleStateField);
    }
    return result2;
  }
  setName(column) {
    column.name = column.name || column.dataField || column.type;
  }
  setUserState(state) {
    var dataSource = this._dataSource;
    var ignoreColumnOptionNames = this.option("stateStoring.ignoreColumnOptionNames");
    null === state || void 0 === state ? void 0 : state.forEach(this.setName);
    if (!ignoreColumnOptionNames) {
      ignoreColumnOptionNames = [];
      var commonColumnSettings = this.getCommonSettings();
      if (!this.option("columnChooser.enabled")) {
        ignoreColumnOptionNames.push("visible");
      }
      if ("none" === this.option("sorting.mode")) {
        ignoreColumnOptionNames.push("sortIndex", "sortOrder");
      }
      if (!commonColumnSettings.allowGrouping) {
        ignoreColumnOptionNames.push("groupIndex");
      }
      if (!commonColumnSettings.allowFixing) {
        ignoreColumnOptionNames.push("fixed", "fixedPosition");
      }
      if (!commonColumnSettings.allowResizing) {
        ignoreColumnOptionNames.push("width", "visibleWidth");
      }
      var isFilterPanelHidden = !this.option("filterPanel.visible");
      if (!this.option("filterRow.visible") && isFilterPanelHidden) {
        ignoreColumnOptionNames.push("filterValue", "selectedFilterOperation");
      }
      if (!this.option("headerFilter.visible") && isFilterPanelHidden) {
        ignoreColumnOptionNames.push("filterValues", "filterType");
      }
    }
    this._columnsUserState = state;
    this._ignoreColumnOptionNames = ignoreColumnOptionNames;
    this._hasUserState = !!state;
    updateColumnChanges(this, "filtering");
    this.init(true);
    if (dataSource) {
      dataSource.sort(this.getSortDataSourceParameters());
      dataSource.group(this.getGroupDataSourceParameters());
    }
  }
  _checkColumns() {
    var usedNames = {};
    var hasEditableColumnWithoutName = false;
    var duplicatedNames = [];
    this._columns.forEach((column) => {
      var _a2;
      var {
        name: name2
      } = column;
      var isBand = null === (_a2 = column.columns) || void 0 === _a2 ? void 0 : _a2.length;
      var isEditable2 = column.allowEditing && (column.dataField || column.setCellValue) && !isBand;
      if (name2) {
        if (usedNames[name2]) {
          duplicatedNames.push('"'.concat(name2, '"'));
        }
        usedNames[name2] = true;
      } else if (isEditable2) {
        hasEditableColumnWithoutName = true;
      }
    });
    if (duplicatedNames.length) {
      ui_errors_default.log("E1059", duplicatedNames.join(", "));
    }
    if (hasEditableColumnWithoutName) {
      ui_errors_default.log("E1060");
    }
  }
  _createCalculatedColumnOptions(columnOptions, bandColumn) {
    var calculatedColumnOptions = {};
    var {
      dataField
    } = columnOptions;
    if (Array.isArray(columnOptions.columns) && columnOptions.columns.length || columnOptions.isBand) {
      calculatedColumnOptions.isBand = true;
      dataField = null;
    }
    if (dataField) {
      if (isString(dataField)) {
        var getter = compileGetter(dataField);
        calculatedColumnOptions = {
          caption: captionize(dataField),
          calculateCellValue(data3, skipDeserialization) {
            var value2 = getter(data3);
            return this.deserializeValue && !skipDeserialization ? this.deserializeValue(value2) : value2;
          },
          setCellValue: defaultSetCellValue,
          parseValue(text) {
            var result2;
            var parsedValue;
            if ("number" === this.dataType) {
              if (isString(text) && this.format) {
                result2 = strictParseNumber(text.trim(), this.format);
              } else if (isDefined(text) && isNumeric(text)) {
                result2 = Number(text);
              }
            } else if ("boolean" === this.dataType) {
              if (text === this.trueText) {
                result2 = true;
              } else if (text === this.falseText) {
                result2 = false;
              }
            } else if (m_utils_default.isDateType(this.dataType)) {
              parsedValue = date_default3.parse(text, this.format);
              if (parsedValue) {
                result2 = parsedValue;
              }
            } else {
              result2 = text;
            }
            return result2;
          }
        };
      }
      calculatedColumnOptions.allowFiltering = true;
    } else {
      calculatedColumnOptions.allowFiltering = !!columnOptions.calculateFilterExpression;
    }
    calculatedColumnOptions.calculateFilterExpression = function() {
      return filtering_default.defaultCalculateFilterExpression.apply(this, arguments);
    };
    calculatedColumnOptions.defaultFilterOperation = "=";
    calculatedColumnOptions.createFilterExpression = function(filterValue, selectedFilterOperation) {
      var result2;
      if (this.calculateFilterExpression) {
        result2 = this.calculateFilterExpression.apply(this, arguments);
      }
      if (isFunction(result2)) {
        result2 = [result2, "=", true];
      }
      if (result2) {
        result2.columnIndex = this.index;
        result2.filterValue = filterValue;
        result2.selectedFilterOperation = selectedFilterOperation;
      }
      return result2;
    };
    if (!dataField || !isString(dataField)) {
      extend(true, calculatedColumnOptions, {
        allowSorting: false,
        allowGrouping: false,
        calculateCellValue: () => null
      });
    }
    if (bandColumn) {
      calculatedColumnOptions.allowFixing = false;
    }
    if (columnOptions.dataType) {
      calculatedColumnOptions.userDataType = columnOptions.dataType;
    }
    if (columnOptions.selectedFilterOperation && !("defaultSelectedFilterOperation" in calculatedColumnOptions)) {
      calculatedColumnOptions.defaultSelectedFilterOperation = columnOptions.selectedFilterOperation;
    }
    if (columnOptions.lookup) {
      calculatedColumnOptions.lookup = {
        calculateCellValue(value2, skipDeserialization) {
          if (this.valueExpr) {
            value2 = this.valueMap && this.valueMap[value2];
          }
          return this.deserializeValue && !skipDeserialization ? this.deserializeValue(value2) : value2;
        },
        updateValueMap() {
          this.valueMap = {};
          if (this.items) {
            var calculateValue = compileGetter(this.valueExpr);
            var calculateDisplayValue = compileGetter(this.displayExpr);
            for (var i = 0; i < this.items.length; i++) {
              var item = this.items[i];
              var displayValue = calculateDisplayValue(item);
              this.valueMap[calculateValue(item)] = displayValue;
              this.dataType = this.dataType || getValueDataType(displayValue);
            }
          }
        },
        update() {
          var that = this;
          var {
            dataSource
          } = that;
          if (dataSource) {
            if (isFunction(dataSource) && !variable_wrapper_default.isWrapped(dataSource)) {
              dataSource = dataSource({});
            }
            if (isPlainObject(dataSource) || dataSource instanceof abstract_store_default || Array.isArray(dataSource)) {
              if (that.valueExpr) {
                var dataSourceOptions = normalizeDataSourceOptions(dataSource);
                dataSourceOptions.paginate = false;
                dataSource = new DataSource(dataSourceOptions);
                return dataSource.load().done((data3) => {
                  that.items = data3;
                  that.updateValueMap && that.updateValueMap();
                });
              }
            } else {
              ui_errors_default.log("E1016");
            }
          } else {
            that.updateValueMap && that.updateValueMap();
          }
        }
      };
    }
    calculatedColumnOptions.resizedCallbacks = callbacks_default();
    if (columnOptions.resized) {
      calculatedColumnOptions.resizedCallbacks.add(columnOptions.resized.bind(columnOptions));
    }
    each(calculatedColumnOptions, (optionName) => {
      if (isFunction(calculatedColumnOptions[optionName]) && 0 !== optionName.indexOf("default")) {
        var defaultOptionName = "default".concat(optionName.charAt(0).toUpperCase()).concat(optionName.substr(1));
        calculatedColumnOptions[defaultOptionName] = calculatedColumnOptions[optionName];
      }
    });
    return calculatedColumnOptions;
  }
  getRowCount() {
    this._rowCount = this._rowCount || getRowCount(this);
    return this._rowCount;
  }
  getRowIndex(columnIndex, alwaysGetRowIndex) {
    var column = this._columns[columnIndex];
    var bandColumnsCache = this.getBandColumnsCache();
    return column && (alwaysGetRowIndex || column.visible && !(column.command || isDefined(column.groupIndex))) ? getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex).length : 0;
  }
  getChildrenByBandColumn(bandColumnIndex, onlyVisibleDirectChildren) {
    var bandColumnsCache = this.getBandColumnsCache();
    var result2 = getChildrenByBandColumn(bandColumnIndex, bandColumnsCache.columnChildrenByIndex, !onlyVisibleDirectChildren);
    if (onlyVisibleDirectChildren) {
      return result2.filter((column) => column.visible && !column.command).sort((column1, column2) => column1.visibleIndex - column2.visibleIndex);
    }
    return result2;
  }
  isParentBandColumn(columnIndex, bandColumnIndex) {
    var result2 = false;
    var column = this._columns[columnIndex];
    var bandColumnsCache = this.getBandColumnsCache();
    var parentBandColumns = column && getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex);
    if (parentBandColumns) {
      each(parentBandColumns, (_, bandColumn) => {
        if (bandColumn.index === bandColumnIndex) {
          result2 = true;
          return false;
        }
      });
    }
    return result2;
  }
  isParentColumnVisible(columnIndex) {
    var result2 = true;
    var bandColumnsCache = this.getBandColumnsCache();
    var bandColumns = columnIndex >= 0 && getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex);
    bandColumns && each(bandColumns, (_, bandColumn) => {
      result2 = result2 && bandColumn.visible;
      return result2;
    });
    return result2;
  }
  getColumnId(column) {
    if (column.command && column.type === GROUP_COMMAND_COLUMN_NAME) {
      if (isCustomCommandColumn(this, column)) {
        return "type:".concat(column.type);
      }
      return "command:".concat(column.command);
    }
    return column.index;
  }
  getCustomizeTextByDataType(dataType) {
    return getCustomizeTextByDataType(dataType);
  }
  getHeaderContentAlignment(columnAlignment) {
    var rtlEnabled = this.option("rtlEnabled");
    if (rtlEnabled) {
      return "left" === columnAlignment ? "right" : "left";
    }
    return columnAlignment;
  }
};
var columnsControllerModule = {
  defaultOptions: () => ({
    commonColumnSettings: {
      allowFiltering: true,
      allowHiding: true,
      allowSorting: true,
      allowEditing: true,
      encodeHtml: true,
      trueText: message_default.format("dxDataGrid-trueText"),
      falseText: message_default.format("dxDataGrid-falseText")
    },
    allowColumnReordering: false,
    allowColumnResizing: false,
    columnResizingMode: "nextColumn",
    columnMinWidth: void 0,
    columnWidth: void 0,
    adaptColumnWidthByRatio: true,
    columns: void 0,
    regenerateColumnsByVisibleItems: false,
    customizeColumns: null,
    dateSerializationFormat: void 0
  }),
  controllers: {
    columns: ColumnsController
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/m_columns_controller.js
m_core_default.registerModule("columns", {
  defaultOptions: () => extend(true, {}, columnsControllerModule.defaultOptions(), {
    commonColumnSettings: {
      allowExporting: true
    }
  }),
  controllers: columnsControllerModule.controllers
});

// node_modules/devextreme/esm/core/utils/array_compare.js
var getKeyWrapper = function(item, getKey) {
  var key = getKey(item);
  if (isObject(key)) {
    try {
      return JSON.stringify(key);
    } catch (e) {
      return key;
    }
  }
  return key;
};
var getSameNewByOld = function(oldItem, newItems, newIndexByKey, getKey) {
  var key = getKeyWrapper(oldItem, getKey);
  return newItems[newIndexByKey[key]];
};
var isKeysEqual = function(oldKeys, newKeys) {
  if (oldKeys.length !== newKeys.length) {
    return false;
  }
  for (var i = 0; i < newKeys.length; i++) {
    if (oldKeys[i] !== newKeys[i]) {
      return false;
    }
  }
  return true;
};
var findChanges = function(oldItems, newItems, getKey, isItemEquals) {
  var oldIndexByKey = {};
  var newIndexByKey = {};
  var addedCount = 0;
  var removeCount = 0;
  var result2 = [];
  oldItems.forEach(function(item, index3) {
    var key2 = getKeyWrapper(item, getKey);
    oldIndexByKey[key2] = index3;
  });
  newItems.forEach(function(item, index3) {
    var key2 = getKeyWrapper(item, getKey);
    newIndexByKey[key2] = index3;
  });
  var itemCount = Math.max(oldItems.length, newItems.length);
  for (var index2 = 0; index2 < itemCount + addedCount; index2++) {
    var newItem = newItems[index2];
    var oldNextIndex = index2 - addedCount + removeCount;
    var nextOldItem = oldItems[oldNextIndex];
    var isRemoved = !newItem || nextOldItem && !getSameNewByOld(nextOldItem, newItems, newIndexByKey, getKey);
    if (isRemoved) {
      if (nextOldItem) {
        result2.push({
          type: "remove",
          key: getKey(nextOldItem),
          index: index2,
          oldItem: nextOldItem
        });
        removeCount++;
        index2--;
      }
    } else {
      var key = getKeyWrapper(newItem, getKey);
      var oldIndex = oldIndexByKey[key];
      var oldItem = oldItems[oldIndex];
      if (!oldItem) {
        addedCount++;
        result2.push({
          type: "insert",
          data: newItem,
          index: index2
        });
      } else if (oldIndex === oldNextIndex) {
        if (!isItemEquals(oldItem, newItem)) {
          result2.push({
            type: "update",
            data: newItem,
            key: getKey(newItem),
            index: index2,
            oldItem
          });
        }
      } else {
        return;
      }
    }
  }
  return result2;
};

// node_modules/devextreme/esm/ui/collection/data_controller.js
var DataControllerMock = {
  load: () => Deferred().reject(),
  loadSingle: () => Deferred().reject(),
  loadFromStore: () => Deferred().reject(),
  loadNextPage: () => Deferred().reject(),
  loadOptions: noop2,
  userData: noop2,
  cancel: noop2,
  cancelAll: noop2,
  filter: noop2,
  addSearchFilter: noop2,
  group: noop2,
  paginate: noop2,
  pageSize: noop2,
  pageIndex: noop2,
  resetDataSourcePageIndex: noop2,
  totalCount: noop2,
  isLastPage: noop2,
  isLoading: noop2,
  isLoaded: noop2,
  searchValue: noop2,
  searchOperation: noop2,
  searchExpr: noop2,
  select: noop2,
  key: noop2,
  keyOf: noop2,
  store: noop2,
  items: noop2,
  applyMapFunction: noop2,
  getDataSource: noop2,
  reload: noop2,
  on: noop2,
  off: noop2
};
var DataController = class {
  constructor(dataSource) {
    if (!dataSource) {
      return DataControllerMock;
    }
    this._dataSource = dataSource;
  }
  load() {
    return this._dataSource.load();
  }
  loadSingle(propName, propValue) {
    if (arguments.length < 2) {
      propValue = propName;
      propName = this.key();
    }
    return this._dataSource.loadSingle(propName, propValue);
  }
  loadFromStore(loadOptions) {
    return this.store().load(loadOptions);
  }
  loadNextPage() {
    this.pageIndex(1 + this.pageIndex());
    return this.load();
  }
  loadOptions() {
    return this._dataSource.loadOptions();
  }
  userData() {
    return this._dataSource._userData;
  }
  cancel(operationId) {
    this._dataSource.cancel(operationId);
  }
  cancelAll() {
    this._dataSource.cancelAll();
  }
  filter(filter) {
    return this._dataSource.filter(filter);
  }
  addSearchFilter(storeLoadOptions) {
    this._dataSource._addSearchFilter(storeLoadOptions);
  }
  group(group) {
    return this._dataSource.group(group);
  }
  paginate() {
    return this._dataSource.paginate();
  }
  pageSize() {
    return this._dataSource._pageSize;
  }
  pageIndex(pageIndex) {
    return this._dataSource.pageIndex(pageIndex);
  }
  resetDataSourcePageIndex() {
    if (this.pageIndex()) {
      this.pageIndex(0);
      this.load();
    }
  }
  totalCount() {
    return this._dataSource.totalCount();
  }
  isLastPage() {
    return this._dataSource.isLastPage() || !this._dataSource._pageSize;
  }
  isLoading() {
    return this._dataSource.isLoading();
  }
  isLoaded() {
    return this._dataSource.isLoaded();
  }
  searchValue(value2) {
    if (!arguments.length) {
      return this._dataSource.searchValue();
    }
    return this._dataSource.searchValue(value2);
  }
  searchOperation(operation) {
    return this._dataSource.searchOperation(operation);
  }
  searchExpr(expr) {
    if (!arguments.length) {
      return this._dataSource.searchExpr();
    }
    return this._dataSource.searchExpr(expr);
  }
  select() {
    return this._dataSource.select(...arguments);
  }
  key() {
    return this._dataSource.key();
  }
  keyOf(item) {
    return this.store().keyOf(item);
  }
  store() {
    return this._dataSource.store();
  }
  items() {
    return this._dataSource.items();
  }
  applyMapFunction(data3) {
    return this._dataSource._applyMapFunction(data3);
  }
  getDataSource() {
    return this._dataSource || null;
  }
  reload() {
    return this._dataSource.reload();
  }
  on(event, handler) {
    this._dataSource.on(event, handler);
  }
  off(event, handler) {
    this._dataSource.off(event, handler);
  }
};
var data_controller_default = DataController;

// node_modules/devextreme/esm/data_helper.js
var DATA_SOURCE_OPTIONS_METHOD = "_dataSourceOptions";
var DATA_SOURCE_CHANGED_METHOD = "_dataSourceChangedHandler";
var DATA_SOURCE_LOAD_ERROR_METHOD = "_dataSourceLoadErrorHandler";
var DATA_SOURCE_LOADING_CHANGED_METHOD = "_dataSourceLoadingChangedHandler";
var DATA_SOURCE_FROM_URL_LOAD_MODE_METHOD = "_dataSourceFromUrlLoadMode";
var SPECIFIC_DATA_SOURCE_OPTION = "_getSpecificDataSourceOption";
var NORMALIZE_DATA_SOURCE = "_normalizeDataSource";
var DataHelperMixin = {
  postCtor: function() {
    this.on("disposing", (function() {
      this._disposeDataSource();
    }).bind(this));
  },
  _refreshDataSource: function() {
    this._initDataSource();
    this._loadDataSource();
  },
  _initDataSource: function() {
    var dataSourceOptions = SPECIFIC_DATA_SOURCE_OPTION in this ? this[SPECIFIC_DATA_SOURCE_OPTION]() : this.option("dataSource");
    var widgetDataSourceOptions;
    var dataSourceType;
    this._disposeDataSource();
    if (dataSourceOptions) {
      if (dataSourceOptions instanceof DataSource) {
        this._isSharedDataSource = true;
        this._dataSource = dataSourceOptions;
      } else {
        widgetDataSourceOptions = DATA_SOURCE_OPTIONS_METHOD in this ? this[DATA_SOURCE_OPTIONS_METHOD]() : {};
        dataSourceType = this._dataSourceType ? this._dataSourceType() : DataSource;
        dataSourceOptions = normalizeDataSourceOptions(dataSourceOptions, {
          fromUrlLoadMode: DATA_SOURCE_FROM_URL_LOAD_MODE_METHOD in this && this[DATA_SOURCE_FROM_URL_LOAD_MODE_METHOD]()
        });
        this._dataSource = new dataSourceType(extend(true, {}, widgetDataSourceOptions, dataSourceOptions));
      }
      if (NORMALIZE_DATA_SOURCE in this) {
        this._dataSource = this[NORMALIZE_DATA_SOURCE](this._dataSource);
      }
      this._addDataSourceHandlers();
      this._initDataController();
    }
  },
  _initDataController: function() {
    var _this$option;
    var dataController2 = null === (_this$option = this.option) || void 0 === _this$option ? void 0 : _this$option.call(this, "_dataController");
    var dataSource = this._dataSource;
    if (dataController2) {
      this._dataController = dataController2;
    } else {
      this._dataController = new data_controller_default(dataSource);
    }
  },
  _addDataSourceHandlers: function() {
    if (DATA_SOURCE_CHANGED_METHOD in this) {
      this._addDataSourceChangeHandler();
    }
    if (DATA_SOURCE_LOAD_ERROR_METHOD in this) {
      this._addDataSourceLoadErrorHandler();
    }
    if (DATA_SOURCE_LOADING_CHANGED_METHOD in this) {
      this._addDataSourceLoadingChangedHandler();
    }
    this._addReadyWatcher();
  },
  _addReadyWatcher: function() {
    this.readyWatcher = (function(isLoading) {
      this._ready && this._ready(!isLoading);
    }).bind(this);
    this._dataSource.on("loadingChanged", this.readyWatcher);
  },
  _addDataSourceChangeHandler: function() {
    var dataSource = this._dataSource;
    this._proxiedDataSourceChangedHandler = (function(e) {
      this[DATA_SOURCE_CHANGED_METHOD](dataSource.items(), e);
    }).bind(this);
    dataSource.on("changed", this._proxiedDataSourceChangedHandler);
  },
  _addDataSourceLoadErrorHandler: function() {
    this._proxiedDataSourceLoadErrorHandler = this[DATA_SOURCE_LOAD_ERROR_METHOD].bind(this);
    this._dataSource.on("loadError", this._proxiedDataSourceLoadErrorHandler);
  },
  _addDataSourceLoadingChangedHandler: function() {
    this._proxiedDataSourceLoadingChangedHandler = this[DATA_SOURCE_LOADING_CHANGED_METHOD].bind(this);
    this._dataSource.on("loadingChanged", this._proxiedDataSourceLoadingChangedHandler);
  },
  _loadDataSource: function() {
    var dataSource = this._dataSource;
    if (dataSource) {
      if (dataSource.isLoaded()) {
        this._proxiedDataSourceChangedHandler && this._proxiedDataSourceChangedHandler();
      } else {
        dataSource.load();
      }
    }
  },
  _loadSingle: function(key, value2) {
    key = "this" === key ? this._dataSource.key() || "this" : key;
    return this._dataSource.loadSingle(key, value2);
  },
  _isLastPage: function() {
    return !this._dataSource || this._dataSource.isLastPage() || !this._dataSource._pageSize;
  },
  _isDataSourceLoading: function() {
    return this._dataSource && this._dataSource.isLoading();
  },
  _disposeDataSource: function() {
    if (this._dataSource) {
      if (this._isSharedDataSource) {
        delete this._isSharedDataSource;
        this._proxiedDataSourceChangedHandler && this._dataSource.off("changed", this._proxiedDataSourceChangedHandler);
        this._proxiedDataSourceLoadErrorHandler && this._dataSource.off("loadError", this._proxiedDataSourceLoadErrorHandler);
        this._proxiedDataSourceLoadingChangedHandler && this._dataSource.off("loadingChanged", this._proxiedDataSourceLoadingChangedHandler);
        if (this._dataSource._eventsStrategy) {
          this._dataSource._eventsStrategy.off("loadingChanged", this.readyWatcher);
        }
      } else {
        this._dataSource.dispose();
      }
      delete this._dataSource;
      delete this._proxiedDataSourceChangedHandler;
      delete this._proxiedDataSourceLoadErrorHandler;
      delete this._proxiedDataSourceLoadingChangedHandler;
    }
  },
  getDataSource: function() {
    return this._dataSource || null;
  }
};
var data_helper_default = DataHelperMixin;

// node_modules/devextreme/esm/__internal/grids/grid_core/data_controller/m_data_controller.js
var changePaging = function(that, optionName, value2) {
  var dataSource = that._dataSource;
  if (dataSource) {
    if (void 0 !== value2) {
      var oldValue = that._getPagingOptionValue(optionName);
      if (oldValue !== value2) {
        if ("pageSize" === optionName) {
          dataSource.pageIndex(0);
        }
        dataSource[optionName](value2);
        that._skipProcessingPagingChange = true;
        that.option("paging.".concat(optionName), value2);
        that._skipProcessingPagingChange = false;
        var pageIndex = dataSource.pageIndex();
        that._isPaging = "pageIndex" === optionName;
        return dataSource["pageIndex" === optionName ? "load" : "reload"]().done(() => {
          that._isPaging = false;
          that.pageChanged.fire(pageIndex);
        });
      }
      return Deferred().resolve().promise();
    }
    return dataSource[optionName]();
  }
  return 0;
};
var ControllerWithDataMixin = m_modules_default.Controller.inherit(data_helper_default);
var DataController2 = class extends ControllerWithDataMixin {
  init() {
    var that = this;
    that._items = [];
    that._cachedProcessedItems = null;
    that._columnsController = this.getController("columns");
    that._isPaging = false;
    that._currentOperationTypes = null;
    that._dataChangedHandler = (e) => {
      that._currentOperationTypes = this._dataSource.operationTypes();
      that._handleDataChanged(e);
      that._currentOperationTypes = null;
    };
    that._columnsChangedHandler = that._handleColumnsChanged.bind(that);
    that._loadingChangedHandler = that._handleLoadingChanged.bind(that);
    that._loadErrorHandler = that._handleLoadError.bind(that);
    that._customizeStoreLoadOptionsHandler = that._handleCustomizeStoreLoadOptions.bind(that);
    that._changingHandler = that._handleChanging.bind(that);
    that._dataPushedHandler = that._handleDataPushed.bind(that);
    that._columnsController.columnsChanged.add(that._columnsChangedHandler);
    that._isLoading = false;
    that._isCustomLoading = false;
    that._repaintChangesOnly = void 0;
    that._changes = [];
    that.createAction("onDataErrorOccurred");
    that.dataErrorOccurred.add((error) => that.executeAction("onDataErrorOccurred", {
      error
    }));
    that._refreshDataSource();
    this.postCtor();
  }
  _getPagingOptionValue(optionName) {
    return this._dataSource[optionName]();
  }
  callbackNames() {
    return ["changed", "loadingChanged", "dataErrorOccurred", "pageChanged", "dataSourceChanged", "pushed"];
  }
  callbackFlags(name2) {
    if ("dataErrorOccurred" === name2) {
      return {
        stopOnFalse: true
      };
    }
    return;
  }
  publicMethods() {
    return ["beginCustomLoading", "endCustomLoading", "refresh", "filter", "clearFilter", "getCombinedFilter", "keyOf", "byKey", "getDataByKeys", "pageIndex", "pageSize", "pageCount", "totalCount", "_disposeDataSource", "getKeyByRowIndex", "getRowIndexByKey", "getDataSource", "getVisibleRows", "repaintRows"];
  }
  reset() {
    this._columnsController.reset();
    this._items = [];
    this._refreshDataSource();
  }
  _handleDataSourceChange(args) {
    if (args.value === args.previousValue || this.option("columns") && Array.isArray(args.value) && Array.isArray(args.previousValue)) {
      var isValueChanged = args.value !== args.previousValue;
      if (isValueChanged) {
        var store = this.store();
        if (store) {
          store._array = args.value;
        }
      }
      if (this.needToRefreshOnDataSourceChange(args)) {
        this.refresh(this.option("repaintChangesOnly"));
      }
      return true;
    }
    return false;
  }
  needToRefreshOnDataSourceChange(args) {
    return true;
  }
  optionChanged(args) {
    var that = this;
    var dataSource;
    var changedPagingOptions;
    function handled() {
      args.handled = true;
    }
    if ("dataSource" === args.name && args.name === args.fullName && this._handleDataSourceChange(args)) {
      handled();
      return;
    }
    switch (args.name) {
      case "cacheEnabled":
      case "repaintChangesOnly":
      case "highlightChanges":
      case "loadingTimeout":
        handled();
        break;
      case "remoteOperations":
      case "keyExpr":
      case "dataSource":
      case "scrolling":
        handled();
        that.reset();
        break;
      case "paging":
        dataSource = that.dataSource();
        if (dataSource) {
          changedPagingOptions = that._setPagingOptions(dataSource);
          if (changedPagingOptions) {
            var pageIndex = dataSource.pageIndex();
            this._isPaging = changedPagingOptions.isPageIndexChanged;
            dataSource.load().done(() => {
              this._isPaging = false;
              that.pageChanged.fire(pageIndex);
            });
          }
        }
        handled();
        break;
      case "rtlEnabled":
        that.reset();
        break;
      case "columns":
        dataSource = that.dataSource();
        if (dataSource && dataSource.isLoading() && args.name === args.fullName) {
          this._useSortingGroupingFromColumns = true;
          dataSource.load();
        }
        break;
      default:
        super.optionChanged(args);
    }
  }
  isReady() {
    return !this._isLoading;
  }
  getDataSource() {
    return this._dataSource && this._dataSource._dataSource;
  }
  getCombinedFilter(returnDataField) {
    return this.combinedFilter(void 0, returnDataField);
  }
  combinedFilter(filter, returnDataField) {
    if (!this._dataSource) {
      return filter;
    }
    var combined = null !== filter && void 0 !== filter ? filter : this._dataSource.filter();
    var isColumnsTypesDefined = this._columnsController.isDataSourceApplied() || this._columnsController.isAllDataTypesDefined();
    if (isColumnsTypesDefined) {
      var additionalFilter = this._calculateAdditionalFilter();
      combined = additionalFilter ? m_utils_default.combineFilters([additionalFilter, combined]) : combined;
    }
    var isRemoteFiltering = this._dataSource.remoteOperations().filtering || returnDataField;
    combined = this._columnsController.updateFilter(combined, isRemoteFiltering);
    return combined;
  }
  waitReady() {
    if (this._updateLockCount) {
      this._readyDeferred = new Deferred();
      return this._readyDeferred;
    }
    return when();
  }
  _endUpdateCore() {
    var changes = this._changes;
    if (changes.length) {
      this._changes = [];
      var repaintChangesOnly = changes.every((change) => change.repaintChangesOnly);
      this.updateItems(1 === changes.length ? changes[0] : {
        repaintChangesOnly
      });
    }
    if (this._readyDeferred) {
      this._readyDeferred.resolve();
      this._readyDeferred = null;
    }
  }
  _handleCustomizeStoreLoadOptions(e) {
    var _a2;
    var columnsController = this._columnsController;
    var dataSource = this._dataSource;
    var {
      storeLoadOptions
    } = e;
    if (e.isCustomLoading && !storeLoadOptions.isLoadingAll) {
      return;
    }
    storeLoadOptions.filter = this.combinedFilter(storeLoadOptions.filter);
    if (1 === (null === (_a2 = storeLoadOptions.filter) || void 0 === _a2 ? void 0 : _a2.length) && "!" === storeLoadOptions.filter[0]) {
      e.data = [];
      e.extra = e.extra || {};
      e.extra.totalCount = 0;
    }
    if (!columnsController.isDataSourceApplied()) {
      columnsController.updateColumnDataTypes(dataSource);
    }
    this._columnsUpdating = true;
    columnsController.updateSortingGrouping(dataSource, !this._useSortingGroupingFromColumns);
    this._columnsUpdating = false;
    storeLoadOptions.sort = columnsController.getSortDataSourceParameters();
    storeLoadOptions.group = columnsController.getGroupDataSourceParameters();
    dataSource.sort(storeLoadOptions.sort);
    dataSource.group(storeLoadOptions.group);
    storeLoadOptions.sort = columnsController.getSortDataSourceParameters(!dataSource.remoteOperations().sorting);
    e.group = columnsController.getGroupDataSourceParameters(!dataSource.remoteOperations().grouping);
  }
  _handleColumnsChanged(e) {
    var that = this;
    var {
      changeTypes
    } = e;
    var {
      optionNames
    } = e;
    var filterValue;
    var filterValues;
    var filterApplied;
    if (changeTypes.sorting || changeTypes.grouping) {
      if (that._dataSource && !that._columnsUpdating) {
        that._dataSource.group(that._columnsController.getGroupDataSourceParameters());
        that._dataSource.sort(that._columnsController.getSortDataSourceParameters());
        that.reload();
      }
    } else if (changeTypes.columns) {
      filterValues = that._columnsController.columnOption(e.columnIndex, "filterValues");
      if (optionNames.filterValues || optionNames.filterType && Array.isArray(filterValues) || optionNames.filterValue || optionNames.selectedFilterOperation || optionNames.allowFiltering) {
        filterValue = that._columnsController.columnOption(e.columnIndex, "filterValue");
        if (Array.isArray(filterValues) || void 0 === e.columnIndex || isDefined(filterValue) || !optionNames.selectedFilterOperation || optionNames.filterValue) {
          that._applyFilter();
          filterApplied = true;
        }
      }
      if (!that._needApplyFilter && !m_utils_default.checkChanges(optionNames, ["width", "visibleWidth", "filterValue", "bufferedFilterValue", "selectedFilterOperation", "filterValues", "filterType"])) {
        that._columnsController.columnsChanged.add(function updateItemsHandler(change) {
          var _a2;
          that._columnsController.columnsChanged.remove(updateItemsHandler);
          that.updateItems({
            repaintChangesOnly: false,
            virtualColumnsScrolling: null === (_a2 = null === change || void 0 === change ? void 0 : change.changeTypes) || void 0 === _a2 ? void 0 : _a2.virtualColumnsScrolling
          });
        });
      }
      if (isDefined(optionNames.visible)) {
        var column = that._columnsController.columnOption(e.columnIndex);
        if (column && (isDefined(column.filterValue) || isDefined(column.filterValues))) {
          that._applyFilter();
          filterApplied = true;
        }
      }
    }
    if (!filterApplied && changeTypes.filtering && !this._needApplyFilter) {
      that.reload();
    }
  }
  _handleDataChanged(e) {
    var that = this;
    var dataSource = that._dataSource;
    var columnsController = that._columnsController;
    var isAsyncDataSourceApplying = false;
    this._useSortingGroupingFromColumns = false;
    if (dataSource && !that._isDataSourceApplying) {
      that._isDataSourceApplying = true;
      when(that._columnsController.applyDataSource(dataSource)).done(() => {
        if (that._isLoading) {
          that._handleLoadingChanged(false);
        }
        if (isAsyncDataSourceApplying && e && e.isDelayed) {
          e.isDelayed = false;
        }
        that._isDataSourceApplying = false;
        var needApplyFilter = that._needApplyFilter;
        that._needApplyFilter = false;
        if (needApplyFilter && !that._isAllDataTypesDefined && (additionalFilter = that._calculateAdditionalFilter(), additionalFilter && additionalFilter.length)) {
          ui_errors_default.log("W1005", that.component.NAME);
          that._applyFilter();
        } else {
          that.updateItems(e, true);
        }
        var additionalFilter;
      }).fail(() => {
        that._isDataSourceApplying = false;
      });
      if (that._isDataSourceApplying) {
        isAsyncDataSourceApplying = true;
        that._handleLoadingChanged(true);
      }
      that._needApplyFilter = !that._columnsController.isDataSourceApplied();
      that._isAllDataTypesDefined = columnsController.isAllDataTypesDefined();
    }
  }
  _handleLoadingChanged(isLoading) {
    this._isLoading = isLoading;
    this._fireLoadingChanged();
  }
  _handleLoadError(e) {
    this.dataErrorOccurred.fire(e);
  }
  _handleDataPushed(changes) {
    this.pushed.fire(changes);
  }
  fireError() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    this.dataErrorOccurred.fire(ui_errors_default.Error.apply(ui_errors_default, args));
  }
  _setPagingOptions(dataSource) {
    var pageIndex = this.option("paging.pageIndex");
    var pageSize = this.option("paging.pageSize");
    var pagingEnabled = this.option("paging.enabled");
    var scrollingMode = this.option("scrolling.mode");
    var appendMode = "infinite" === scrollingMode;
    var virtualMode = "virtual" === scrollingMode;
    var paginate = pagingEnabled || virtualMode || appendMode;
    var isPaginateChanged = false;
    var isPageSizeChanged = false;
    var isPageIndexChanged = false;
    dataSource.requireTotalCount(!appendMode);
    if (void 0 !== pagingEnabled && dataSource.paginate() !== paginate) {
      dataSource.paginate(paginate);
      isPaginateChanged = true;
    }
    if (void 0 !== pageSize && dataSource.pageSize() !== pageSize) {
      dataSource.pageSize(pageSize);
      isPageSizeChanged = true;
    }
    if (void 0 !== pageIndex && dataSource.pageIndex() !== pageIndex) {
      dataSource.pageIndex(pageIndex);
      isPageIndexChanged = true;
    }
    if (isPaginateChanged || isPageSizeChanged || isPageIndexChanged) {
      return {
        isPaginateChanged,
        isPageSizeChanged,
        isPageIndexChanged
      };
    }
    return false;
  }
  _getSpecificDataSourceOption() {
    var dataSource = this.option("dataSource");
    if (Array.isArray(dataSource)) {
      return {
        store: {
          type: "array",
          data: dataSource,
          key: this.option("keyExpr")
        }
      };
    }
    return dataSource;
  }
  _initDataSource() {
    var oldDataSource = this._dataSource;
    super._initDataSource();
    var dataSource = this._dataSource;
    this._useSortingGroupingFromColumns = true;
    this._cachedProcessedItems = null;
    if (dataSource) {
      var changedPagingOptions = this._setPagingOptions(dataSource);
      this._isPaging = null === changedPagingOptions || void 0 === changedPagingOptions ? void 0 : changedPagingOptions.isPageIndexChanged;
      this.setDataSource(dataSource);
    } else if (oldDataSource) {
      this.updateItems();
    }
  }
  _loadDataSource() {
    var that = this;
    var dataSource = that._dataSource;
    var result2 = new Deferred();
    when(this._columnsController.refresh(true)).always(() => {
      if (dataSource) {
        dataSource.load().done(function() {
          that._isPaging = false;
          result2.resolve.apply(result2, arguments);
        }).fail(result2.reject);
      } else {
        result2.resolve();
      }
    });
    return result2.promise();
  }
  _beforeProcessItems(items) {
    return items.slice(0);
  }
  getRowIndexDelta() {
    return 0;
  }
  getDataIndex(change) {
    var visibleItems = this._items;
    var lastVisibleItem = "append" === change.changeType && visibleItems.length > 0 ? visibleItems[visibleItems.length - 1] : null;
    return isDefined(null === lastVisibleItem || void 0 === lastVisibleItem ? void 0 : lastVisibleItem.dataIndex) ? lastVisibleItem.dataIndex + 1 : 0;
  }
  _processItems(items, change) {
    var that = this;
    var rowIndexDelta = that.getRowIndexDelta();
    var {
      changeType
    } = change;
    var visibleColumns = that._columnsController.getVisibleColumns(null, "loadingAll" === changeType);
    var dataIndex = this.getDataIndex(change);
    var options2 = {
      visibleColumns,
      dataIndex
    };
    var result2 = [];
    each(items, (index2, item) => {
      if (isDefined(item)) {
        options2.rowIndex = index2 - rowIndexDelta;
        item = that._processItem(item, options2);
        result2.push(item);
      }
    });
    return result2;
  }
  _processItem(item, options2) {
    item = this._generateDataItem(item, options2);
    item = this._processDataItem(item, options2);
    item.dataIndex = options2.dataIndex++;
    return item;
  }
  _generateDataItem(data3, options2) {
    return {
      rowType: "data",
      data: data3,
      key: this.keyOf(data3)
    };
  }
  _processDataItem(dataItem, options2) {
    dataItem.values = this.generateDataValues(dataItem.data, options2.visibleColumns);
    return dataItem;
  }
  generateDataValues(data3, columns2, isModified) {
    var values = [];
    var value2;
    for (var i = 0; i < columns2.length; i++) {
      var column = columns2[i];
      value2 = isModified ? void 0 : null;
      if (!column.command) {
        if (column.calculateCellValue) {
          value2 = column.calculateCellValue(data3);
        } else if (column.dataField) {
          value2 = data3[column.dataField];
        }
      }
      values.push(value2);
    }
    return values;
  }
  _applyChange(change) {
    if ("update" === change.changeType) {
      this._applyChangeUpdate(change);
    } else if (this.items().length && change.repaintChangesOnly && "refresh" === change.changeType) {
      this._applyChangesOnly(change);
    } else if ("refresh" === change.changeType) {
      this._applyChangeFull(change);
    }
  }
  _applyChangeFull(change) {
    this._items = change.items.slice(0);
  }
  _getRowIndices(change) {
    var rowIndices = change.rowIndices.slice(0);
    var rowIndexDelta = this.getRowIndexDelta();
    rowIndices.sort((a, b) => a - b);
    for (var i = 0; i < rowIndices.length; i++) {
      var correctedRowIndex = rowIndices[i];
      if (change.allowInvisibleRowIndices) {
        correctedRowIndex += rowIndexDelta;
      }
      if (correctedRowIndex < 0) {
        rowIndices.splice(i, 1);
        i--;
      }
    }
    return rowIndices;
  }
  _applyChangeUpdate(change) {
    var that = this;
    var {
      items
    } = change;
    var rowIndices = that._getRowIndices(change);
    var rowIndexDelta = that.getRowIndexDelta();
    var repaintChangesOnly = that.option("repaintChangesOnly");
    var prevIndex = -1;
    var rowIndexCorrection = 0;
    var changeType;
    change.items = [];
    change.rowIndices = [];
    change.columnIndices = [];
    change.changeTypes = [];
    var equalItems = function(item1, item2, strict) {
      var result2 = item1 && item2 && equalByValue(item1.key, item2.key);
      if (result2 && strict) {
        result2 = item1.rowType === item2.rowType && ("detail" !== item2.rowType || item1.isEditing === item2.isEditing);
      }
      return result2;
    };
    each(rowIndices, (index2, rowIndex) => {
      var columnIndices;
      rowIndex += rowIndexCorrection + rowIndexDelta;
      if (prevIndex === rowIndex) {
        return;
      }
      prevIndex = rowIndex;
      var oldItem = that._items[rowIndex];
      var oldNextItem = that._items[rowIndex + 1];
      var newItem = items[rowIndex];
      var newNextItem = items[rowIndex + 1];
      var strict = equalItems(oldItem, oldNextItem) || equalItems(newItem, newNextItem);
      if (newItem) {
        newItem.rowIndex = rowIndex;
        change.items.push(newItem);
      }
      if (oldItem && newItem && equalItems(oldItem, newItem, strict)) {
        changeType = "update";
        that._items[rowIndex] = newItem;
        if (oldItem.visible !== newItem.visible) {
          change.items.splice(-1, 1, {
            visible: newItem.visible
          });
        } else if (repaintChangesOnly && !change.isFullUpdate) {
          columnIndices = that._partialUpdateRow(oldItem, newItem, rowIndex - rowIndexDelta);
        }
      } else if (newItem && !oldItem || newNextItem && equalItems(oldItem, newNextItem, strict)) {
        changeType = "insert";
        that._items.splice(rowIndex, 0, newItem);
        rowIndexCorrection++;
      } else if (oldItem && !newItem || oldNextItem && equalItems(newItem, oldNextItem, strict)) {
        changeType = "remove";
        that._items.splice(rowIndex, 1);
        rowIndexCorrection--;
        prevIndex = -1;
      } else if (newItem) {
        changeType = "update";
        that._items[rowIndex] = newItem;
      } else {
        return;
      }
      change.rowIndices.push(rowIndex - rowIndexDelta);
      change.changeTypes.push(changeType);
      change.columnIndices.push(columnIndices);
    });
  }
  _isCellChanged(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {
    if (JSON.stringify(oldRow.values[columnIndex]) !== JSON.stringify(newRow.values[columnIndex])) {
      return true;
    }
    function isCellModified(row, columnIndex2) {
      return row.modifiedValues ? void 0 !== row.modifiedValues[columnIndex2] : false;
    }
    if (isCellModified(oldRow, columnIndex) !== isCellModified(newRow, columnIndex)) {
      return true;
    }
    return false;
  }
  _getChangedColumnIndices(oldItem, newItem, visibleRowIndex, isLiveUpdate) {
    var columnIndices;
    if (oldItem.rowType === newItem.rowType) {
      if ("group" !== newItem.rowType && "groupFooter" !== newItem.rowType) {
        columnIndices = [];
        if ("detail" !== newItem.rowType) {
          for (var columnIndex = 0; columnIndex < oldItem.values.length; columnIndex++) {
            if (this._isCellChanged(oldItem, newItem, visibleRowIndex, columnIndex, isLiveUpdate)) {
              columnIndices.push(columnIndex);
            }
          }
        }
      }
      if ("group" === newItem.rowType && oldItem.cells) {
        var isRowStateEquals = newItem.isExpanded === oldItem.isExpanded && newItem.data.isContinuation === oldItem.data.isContinuation && newItem.data.isContinuationOnNextPage === oldItem.data.isContinuationOnNextPage;
        if (isRowStateEquals) {
          columnIndices = oldItem.cells.map((cell, index2) => {
            var _a2;
            return "groupExpand" !== (null === (_a2 = cell.column) || void 0 === _a2 ? void 0 : _a2.type) ? index2 : -1;
          }).filter((index2) => index2 >= 0);
        }
      }
    }
    return columnIndices;
  }
  _partialUpdateRow(oldItem, newItem, visibleRowIndex, isLiveUpdate) {
    var changedColumnIndices = this._getChangedColumnIndices(oldItem, newItem, visibleRowIndex, isLiveUpdate);
    if ((null === changedColumnIndices || void 0 === changedColumnIndices ? void 0 : changedColumnIndices.length) && this.option("dataRowTemplate")) {
      changedColumnIndices = void 0;
    }
    if (changedColumnIndices) {
      oldItem.cells && oldItem.cells.forEach((cell, columnIndex) => {
        var isCellChanged = changedColumnIndices.indexOf(columnIndex) >= 0;
        if (!isCellChanged && cell && cell.update) {
          cell.update(newItem);
        }
      });
      newItem.update = oldItem.update;
      newItem.watch = oldItem.watch;
      newItem.cells = oldItem.cells;
      if (isLiveUpdate) {
        newItem.oldValues = oldItem.values;
      }
      oldItem.update && oldItem.update(newItem);
    }
    return changedColumnIndices;
  }
  _isItemEquals(item1, item2) {
    var _a2, _b2, _c, _d;
    if (JSON.stringify(item1.values) !== JSON.stringify(item2.values)) {
      return false;
    }
    if (["modified", "isNewRow", "removed", "isEditing"].some((field) => item1[field] !== item2[field])) {
      return false;
    }
    if ("group" === item1.rowType || "groupFooter" === item1.rowType) {
      var expandedMatch = item1.isExpanded === item2.isExpanded;
      var summaryCellsMatch = JSON.stringify(item1.summaryCells) === JSON.stringify(item2.summaryCells);
      var continuationMatch = (null === (_a2 = item1.data) || void 0 === _a2 ? void 0 : _a2.isContinuation) === (null === (_b2 = item2.data) || void 0 === _b2 ? void 0 : _b2.isContinuation) && (null === (_c = item1.data) || void 0 === _c ? void 0 : _c.isContinuationOnNextPage) === (null === (_d = item2.data) || void 0 === _d ? void 0 : _d.isContinuationOnNextPage);
      if (!expandedMatch || !summaryCellsMatch || !continuationMatch) {
        return false;
      }
    }
    return true;
  }
  _applyChangesOnly(change) {
    var _a2;
    var rowIndices = [];
    var columnIndices = [];
    var changeTypes = [];
    var items = [];
    var newIndexByKey = {};
    var isLiveUpdate = null !== (_a2 = null === change || void 0 === change ? void 0 : change.isLiveUpdate) && void 0 !== _a2 ? _a2 : true;
    function getRowKey(row) {
      if (row) {
        return "".concat(row.rowType, ",").concat(JSON.stringify(row.key));
      }
      return;
    }
    var currentItems = this._items;
    var oldItems = currentItems.slice();
    change.items.forEach((item, index2) => {
      var key = getRowKey(item);
      newIndexByKey[key] = index2;
      item.rowIndex = index2;
    });
    var result2 = findChanges(oldItems, change.items, getRowKey, (item1, item2) => {
      if (!this._isItemEquals(item1, item2)) {
        return false;
      }
      if (item1.cells) {
        item1.update && item1.update(item2);
        item1.cells.forEach((cell) => {
          if (cell && cell.update) {
            cell.update(item2, true);
          }
        });
      }
      return true;
    });
    if (!result2) {
      this._applyChangeFull(change);
      return;
    }
    result2.forEach((change2) => {
      switch (change2.type) {
        case "update":
          var {
            index: index2
          } = change2;
          var newItem = change2.data;
          var {
            oldItem
          } = change2;
          var changedColumnIndices = this._partialUpdateRow(oldItem, newItem, index2, isLiveUpdate);
          rowIndices.push(index2);
          changeTypes.push("update");
          items.push(newItem);
          currentItems[index2] = newItem;
          columnIndices.push(changedColumnIndices);
          break;
        case "insert":
          rowIndices.push(change2.index);
          changeTypes.push("insert");
          items.push(change2.data);
          columnIndices.push(void 0);
          currentItems.splice(change2.index, 0, change2.data);
          break;
        case "remove":
          rowIndices.push(change2.index);
          changeTypes.push("remove");
          currentItems.splice(change2.index, 1);
          items.push(change2.oldItem);
          columnIndices.push(void 0);
      }
    });
    change.repaintChangesOnly = true;
    change.changeType = "update";
    change.rowIndices = rowIndices;
    change.columnIndices = columnIndices;
    change.changeTypes = changeTypes;
    change.items = items;
    if (oldItems.length) {
      change.isLiveUpdate = true;
    }
    this._correctRowIndices((rowIndex) => {
      var oldRowIndexOffset = this._rowIndexOffset || 0;
      var rowIndexOffset = this.getRowIndexOffset();
      var oldItem = oldItems[rowIndex - oldRowIndexOffset];
      var key = getRowKey(oldItem);
      var newVisibleRowIndex = newIndexByKey[key];
      return newVisibleRowIndex >= 0 ? newVisibleRowIndex + rowIndexOffset - rowIndex : 0;
    });
  }
  _correctRowIndices(rowIndex) {
  }
  _afterProcessItems(items, change) {
    return items;
  }
  _updateItemsCore(change) {
    var items;
    var dataSource = this._dataSource;
    var changeType = change.changeType || "refresh";
    change.changeType = changeType;
    if (dataSource) {
      var cachedProcessedItems = this._cachedProcessedItems;
      if (change.useProcessedItemsCache && cachedProcessedItems) {
        items = cachedProcessedItems;
      } else {
        items = change.items || dataSource.items();
        items = this._beforeProcessItems(items);
        items = this._processItems(items, change);
        this._cachedProcessedItems = items;
      }
      items = this._afterProcessItems(items, change);
      change.items = items;
      var oldItems = this._items.length === items.length && this._items;
      this._applyChange(change);
      var rowIndexDelta = this.getRowIndexDelta();
      each(this._items, (index2, item) => {
        var _a2;
        item.rowIndex = index2 - rowIndexDelta;
        if (oldItems) {
          item.cells = null !== (_a2 = oldItems[index2].cells) && void 0 !== _a2 ? _a2 : [];
        }
        var newItem = items[index2];
        if (newItem) {
          item.loadIndex = newItem.loadIndex;
        }
      });
      this._rowIndexOffset = this.getRowIndexOffset();
    } else {
      this._items = [];
    }
  }
  _handleChanging(e) {
    var rows = this.getVisibleRows();
    var dataSource = this.dataSource();
    if (dataSource) {
      e.changes.forEach((change) => {
        if ("insert" === change.type && change.index >= 0) {
          var dataIndex = 0;
          for (var i = 0; i < change.index; i++) {
            var row = rows[i];
            if (row && ("data" === row.rowType || "group" === row.rowType)) {
              dataIndex++;
            }
          }
          change.index = dataIndex;
        }
      });
    }
  }
  updateItems(change, isDataChanged) {
    var _a2;
    change = change || {};
    if (void 0 !== this._repaintChangesOnly) {
      change.repaintChangesOnly = null !== (_a2 = change.repaintChangesOnly) && void 0 !== _a2 ? _a2 : this._repaintChangesOnly;
      change.needUpdateDimensions = change.needUpdateDimensions || this._needUpdateDimensions;
    } else if (change.changes) {
      change.repaintChangesOnly = this.option("repaintChangesOnly");
    } else if (isDataChanged) {
      var operationTypes = this.dataSource().operationTypes();
      change.repaintChangesOnly = operationTypes && !operationTypes.grouping && !operationTypes.filtering && this.option("repaintChangesOnly");
      change.isDataChanged = true;
      if (operationTypes && (operationTypes.reload || operationTypes.paging || operationTypes.groupExpanding)) {
        change.needUpdateDimensions = true;
      }
    }
    if (this._updateLockCount && !change.cancel) {
      this._changes.push(change);
      return;
    }
    this._updateItemsCore(change);
    if (change.cancel) {
      return;
    }
    this._fireChanged(change);
  }
  loadingOperationTypes() {
    var dataSource = this.dataSource();
    return dataSource && dataSource.loadingOperationTypes() || {};
  }
  _fireChanged(change) {
    if (this._currentOperationTypes) {
      change.operationTypes = this._currentOperationTypes;
      this._currentOperationTypes = null;
    }
    deferRender(() => {
      this.changed.fire(change);
    });
  }
  isLoading() {
    return this._isLoading || this._isCustomLoading;
  }
  _fireLoadingChanged() {
    this.loadingChanged.fire(this.isLoading(), this._loadingText);
  }
  _calculateAdditionalFilter() {
    return null;
  }
  _applyFilter() {
    var dataSource = this._dataSource;
    if (dataSource) {
      dataSource.pageIndex(0);
      this._isFilterApplying = true;
      return this.reload().done(() => {
        if (this._isFilterApplying) {
          this.pageChanged.fire();
        }
      });
    }
    return new Deferred().resolve();
  }
  resetFilterApplying() {
    this._isFilterApplying = false;
  }
  filter(filterExpr) {
    var dataSource = this._dataSource;
    var filter = dataSource && dataSource.filter();
    if (0 === arguments.length) {
      return filter;
    }
    filterExpr = arguments.length > 1 ? Array.prototype.slice.call(arguments, 0) : filterExpr;
    if (m_utils_default.equalFilterParameters(filter, filterExpr)) {
      return;
    }
    if (dataSource) {
      dataSource.filter(filterExpr);
    }
    this._applyFilter();
  }
  clearFilter(filterName) {
    var columnsController = this._columnsController;
    var clearColumnOption = function(optionName) {
      var columnCount = columnsController.columnCount();
      for (var index2 = 0; index2 < columnCount; index2++) {
        columnsController.columnOption(index2, optionName, void 0);
      }
    };
    this.component.beginUpdate();
    if (arguments.length > 0) {
      switch (filterName) {
        case "dataSource":
          this.filter(null);
          break;
        case "search":
          this.searchByText("");
          break;
        case "header":
          clearColumnOption("filterValues");
          break;
        case "row":
          clearColumnOption("filterValue");
      }
    } else {
      this.filter(null);
      this.searchByText("");
      clearColumnOption("filterValue");
      clearColumnOption("bufferedFilterValue");
      clearColumnOption("filterValues");
    }
    this.component.endUpdate();
  }
  _fireDataSourceChanged() {
    var that = this;
    that.changed.add(function changedHandler() {
      that.changed.remove(changedHandler);
      that.dataSourceChanged.fire();
    });
  }
  _getDataSourceAdapter() {
  }
  _createDataSourceAdapterCore(dataSource, remoteOperations) {
    var dataSourceAdapterProvider = this._getDataSourceAdapter();
    var dataSourceAdapter = dataSourceAdapterProvider.create(this.component);
    dataSourceAdapter.init(dataSource, remoteOperations);
    return dataSourceAdapter;
  }
  isLocalStore() {
    var store = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.store();
    return store instanceof array_store_default;
  }
  isCustomStore(store) {
    store = store || this.store();
    return store instanceof custom_store_default;
  }
  _createDataSourceAdapter(dataSource) {
    var remoteOperations = this.option("remoteOperations");
    var store = dataSource.store();
    var enabledRemoteOperations = {
      filtering: true,
      sorting: true,
      paging: true,
      grouping: true,
      summary: true
    };
    if (isObject(remoteOperations) && remoteOperations.groupPaging) {
      remoteOperations = extend({}, enabledRemoteOperations, remoteOperations);
    }
    if ("auto" === remoteOperations) {
      remoteOperations = this.isLocalStore(store) || this.isCustomStore(store) ? {} : {
        filtering: true,
        sorting: true,
        paging: true
      };
    }
    if (true === remoteOperations) {
      remoteOperations = enabledRemoteOperations;
    }
    return this._createDataSourceAdapterCore(dataSource, remoteOperations);
  }
  setDataSource(dataSource) {
    var oldDataSource = this._dataSource;
    if (!dataSource && oldDataSource) {
      oldDataSource.cancelAll();
      oldDataSource.changed.remove(this._dataChangedHandler);
      oldDataSource.loadingChanged.remove(this._loadingChangedHandler);
      oldDataSource.loadError.remove(this._loadErrorHandler);
      oldDataSource.customizeStoreLoadOptions.remove(this._customizeStoreLoadOptionsHandler);
      oldDataSource.changing.remove(this._changingHandler);
      oldDataSource.pushed.remove(this._dataPushedHandler);
      oldDataSource.dispose(this._isSharedDataSource);
    }
    if (dataSource) {
      dataSource = this._createDataSourceAdapter(dataSource);
    }
    this._dataSource = dataSource;
    if (dataSource) {
      this._fireDataSourceChanged();
      this._isLoading = !dataSource.isLoaded();
      this._needApplyFilter = true;
      this._isAllDataTypesDefined = this._columnsController.isAllDataTypesDefined();
      dataSource.changed.add(this._dataChangedHandler);
      dataSource.loadingChanged.add(this._loadingChangedHandler);
      dataSource.loadError.add(this._loadErrorHandler);
      dataSource.customizeStoreLoadOptions.add(this._customizeStoreLoadOptionsHandler);
      dataSource.changing.add(this._changingHandler);
      dataSource.pushed.add(this._dataPushedHandler);
    }
  }
  items(byLoaded) {
    return this._items;
  }
  isEmpty() {
    return !this.items().length;
  }
  pageCount() {
    return this._dataSource ? this._dataSource.pageCount() : 1;
  }
  dataSource() {
    return this._dataSource;
  }
  store() {
    var dataSource = this._dataSource;
    return dataSource && dataSource.store();
  }
  loadAll(data3) {
    var skipFilter = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;
    var that = this;
    var d = new Deferred();
    var dataSource = that._dataSource;
    if (dataSource) {
      if (data3) {
        var options2 = {
          data: data3,
          isCustomLoading: true,
          storeLoadOptions: {
            isLoadingAll: true
          },
          loadOptions: {
            filter: skipFilter ? null : that.getCombinedFilter(),
            group: dataSource.group(),
            sort: dataSource.sort()
          }
        };
        dataSource._handleDataLoaded(options2);
        when(options2.data).done((data4) => {
          var _a2;
          data4 = that._beforeProcessItems(data4);
          d.resolve(that._processItems(data4, {
            changeType: "loadingAll"
          }), null === (_a2 = options2.extra) || void 0 === _a2 ? void 0 : _a2.summary);
        }).fail(d.reject);
      } else if (!dataSource.isLoading()) {
        var loadOptions = extend({}, dataSource.loadOptions(), {
          isLoadingAll: true,
          requireTotalCount: false
        });
        dataSource.load(loadOptions).done((items, extra) => {
          items = that._beforeProcessItems(items);
          items = that._processItems(items, {
            changeType: "loadingAll"
          });
          d.resolve(items, extra && extra.summary);
        }).fail(d.reject);
      } else {
        d.reject();
      }
    } else {
      d.resolve([]);
    }
    return d;
  }
  getKeyByRowIndex(rowIndex, byLoaded) {
    var item = this.items(byLoaded)[rowIndex];
    if (item) {
      return item.key;
    }
  }
  getRowIndexByKey(key, byLoaded) {
    return m_utils_default.getIndexByKey(key, this.items(byLoaded));
  }
  keyOf(data3) {
    var store = this.store();
    if (store) {
      return store.keyOf(data3);
    }
  }
  byKey(key) {
    var store = this.store();
    var rowIndex = this.getRowIndexByKey(key);
    var result2;
    if (!store) {
      return;
    }
    if (rowIndex >= 0) {
      result2 = new Deferred().resolve(this.items()[rowIndex].data);
    }
    return result2 || store.byKey(key);
  }
  key() {
    var store = this.store();
    if (store) {
      return store.key();
    }
  }
  getRowIndexOffset(byLoadedRows) {
    return 0;
  }
  getDataByKeys(rowKeys) {
    var that = this;
    var result2 = new Deferred();
    var deferreds = [];
    var data3 = [];
    each(rowKeys, (index2, key) => {
      deferreds.push(that.byKey(key).done((keyData) => {
        data3[index2] = keyData;
      }));
    });
    when.apply(renderer_default, deferreds).always(() => {
      result2.resolve(data3);
    });
    return result2;
  }
  pageIndex(value2) {
    return changePaging(this, "pageIndex", value2);
  }
  pageSize(value2) {
    return changePaging(this, "pageSize", value2);
  }
  beginCustomLoading(messageText) {
    this._isCustomLoading = true;
    this._loadingText = messageText || "";
    this._fireLoadingChanged();
  }
  endCustomLoading() {
    this._isCustomLoading = false;
    this._loadingText = void 0;
    this._fireLoadingChanged();
  }
  refresh(options2) {
    if (true === options2) {
      options2 = {
        reload: true,
        changesOnly: true
      };
    } else if (!options2) {
      options2 = {
        lookup: true,
        selection: true,
        reload: true
      };
    }
    var that = this;
    var dataSource = that.getDataSource();
    var {
      changesOnly
    } = options2;
    var d = new Deferred();
    var customizeLoadResult = function() {
      that._repaintChangesOnly = !!changesOnly;
    };
    when(!options2.lookup || that._columnsController.refresh()).always(() => {
      if (options2.load || options2.reload) {
        dataSource && dataSource.on("customizeLoadResult", customizeLoadResult);
        when(that.reload(options2.reload, changesOnly)).always(() => {
          dataSource && dataSource.off("customizeLoadResult", customizeLoadResult);
          that._repaintChangesOnly = void 0;
        }).done(d.resolve).fail(d.reject);
      } else {
        that.updateItems({
          repaintChangesOnly: options2.changesOnly
        });
        d.resolve();
      }
    });
    return d.promise();
  }
  getVisibleRows() {
    return this.items();
  }
  _disposeDataSource() {
    if (this._dataSource && this._dataSource._eventsStrategy) {
      this._dataSource._eventsStrategy.off("loadingChanged", this.readyWatcher);
    }
    this.setDataSource(null);
  }
  dispose() {
    this._disposeDataSource();
    super.dispose();
  }
  repaintRows(rowIndexes, changesOnly) {
    rowIndexes = Array.isArray(rowIndexes) ? rowIndexes : [rowIndexes];
    if (rowIndexes.length > 1 || isDefined(rowIndexes[0])) {
      this.updateItems({
        changeType: "update",
        rowIndices: rowIndexes,
        isFullUpdate: !changesOnly
      });
    }
  }
  skipProcessingPagingChange(fullName) {
    return this._skipProcessingPagingChange && ("paging.pageIndex" === fullName || "paging.pageSize" === fullName);
  }
  getUserState() {
    return {
      searchText: this.option("searchPanel.text"),
      pageIndex: this.pageIndex(),
      pageSize: this.pageSize()
    };
  }
  getCachedStoreData() {
    return this._dataSource && this._dataSource.getCachedStoreData();
  }
  isLastPageLoaded() {
    var pageIndex = this.pageIndex();
    var pageCount = this.pageCount();
    return pageIndex === pageCount - 1;
  }
  load() {
    var _a2;
    return null === (_a2 = this._dataSource) || void 0 === _a2 ? void 0 : _a2.load();
  }
  reload(reload, changesOnly) {
    var _a2;
    return null === (_a2 = this._dataSource) || void 0 === _a2 ? void 0 : _a2.reload(reload, changesOnly);
  }
  push() {
    var _a2;
    return null === (_a2 = this._dataSource) || void 0 === _a2 ? void 0 : _a2.push(...arguments);
  }
  itemsCount() {
    var _a2;
    return this._dataSource ? null === (_a2 = this._dataSource) || void 0 === _a2 ? void 0 : _a2.itemsCount() : 0;
  }
  totalItemsCount() {
    var _a2;
    return this._dataSource ? null === (_a2 = this._dataSource) || void 0 === _a2 ? void 0 : _a2.totalItemsCount() : 0;
  }
  hasKnownLastPage() {
    var _a2;
    return this._dataSource ? null === (_a2 = this._dataSource) || void 0 === _a2 ? void 0 : _a2.hasKnownLastPage() : true;
  }
  isLoaded() {
    var _a2;
    return this._dataSource ? null === (_a2 = this._dataSource) || void 0 === _a2 ? void 0 : _a2.isLoaded() : true;
  }
  totalCount() {
    var _a2;
    return this._dataSource ? null === (_a2 = this._dataSource) || void 0 === _a2 ? void 0 : _a2.totalCount() : 0;
  }
};
var dataControllerModule = {
  defaultOptions: () => ({
    loadingTimeout: 0,
    dataSource: null,
    cacheEnabled: true,
    repaintChangesOnly: false,
    highlightChanges: false,
    onDataErrorOccurred: null,
    remoteOperations: "auto",
    paging: {
      enabled: true,
      pageSize: void 0,
      pageIndex: void 0
    }
  }),
  controllers: {
    data: DataController2
  }
};

// node_modules/devextreme/esm/__internal/grids/grid_core/data_source_adapter/m_data_source_adapter.js
var m_data_source_adapter_default = m_modules_default.Controller.inherit(/* @__PURE__ */ function() {
  function cloneItems(items, groupCount) {
    if (items) {
      items = items.slice(0);
      if (groupCount) {
        for (var i = 0; i < items.length; i++) {
          items[i] = extend({
            key: items[i].key
          }, items[i]);
          items[i].items = cloneItems(items[i].items, groupCount - 1);
        }
      }
    }
    return items;
  }
  function calculateOperationTypes(loadOptions, lastLoadOptions, isFullReload) {
    var operationTypes = {
      reload: true,
      fullReload: true
    };
    if (lastLoadOptions) {
      operationTypes = {
        sorting: !m_utils_default.equalSortParameters(loadOptions.sort, lastLoadOptions.sort),
        grouping: !m_utils_default.equalSortParameters(loadOptions.group, lastLoadOptions.group, true),
        groupExpanding: !m_utils_default.equalSortParameters(loadOptions.group, lastLoadOptions.group) || lastLoadOptions.groupExpand,
        filtering: !m_utils_default.equalFilterParameters(loadOptions.filter, lastLoadOptions.filter),
        pageIndex: loadOptions.pageIndex !== lastLoadOptions.pageIndex,
        skip: loadOptions.skip !== lastLoadOptions.skip,
        take: loadOptions.take !== lastLoadOptions.take,
        pageSize: loadOptions.pageSize !== lastLoadOptions.pageSize,
        fullReload: isFullReload,
        reload: false,
        paging: false
      };
      operationTypes.reload = isFullReload || operationTypes.sorting || operationTypes.grouping || operationTypes.filtering;
      operationTypes.paging = operationTypes.pageIndex || operationTypes.pageSize || operationTypes.take;
    }
    return operationTypes;
  }
  function getPageDataFromCache(options2, updatePaging) {
    var groupCount = m_utils_default.normalizeSortingInfo(options2.group || options2.storeLoadOptions.group || options2.loadOptions.group).length;
    var items = [];
    if (fillItemsFromCache(items, options2, groupCount)) {
      return items;
    }
    if (updatePaging) {
      !function(cacheItemsFromBegin, options3, groupCount2) {
        var _a2, _b2;
        var cacheItemBeginCount = cacheItemsFromBegin.length;
        var {
          storeLoadOptions
        } = options3;
        if (void 0 !== storeLoadOptions.skip && storeLoadOptions.take && !groupCount2) {
          var cacheItemsFromEnd = [];
          fillItemsFromCache(cacheItemsFromEnd, options3, groupCount2, true);
          var cacheItemEndCount = cacheItemsFromEnd.length;
          if (cacheItemBeginCount || cacheItemEndCount) {
            options3.skip = null !== (_a2 = options3.skip) && void 0 !== _a2 ? _a2 : storeLoadOptions.skip;
            options3.take = null !== (_b2 = options3.take) && void 0 !== _b2 ? _b2 : storeLoadOptions.take;
          }
          if (cacheItemBeginCount) {
            storeLoadOptions.skip += cacheItemBeginCount;
            storeLoadOptions.take -= cacheItemBeginCount;
            options3.cachedDataPartBegin = cacheItemsFromBegin;
          }
          if (cacheItemEndCount) {
            storeLoadOptions.take -= cacheItemEndCount;
            options3.cachedDataPartEnd = cacheItemsFromEnd.reverse();
          }
        }
      }(items, options2, groupCount);
    }
  }
  function fillItemsFromCache(items, options2, groupCount, fromEnd) {
    var _a2, _b2, _c, _d, _e;
    var {
      storeLoadOptions
    } = options2;
    var take = null !== (_b2 = null !== (_a2 = options2.take) && void 0 !== _a2 ? _a2 : storeLoadOptions.take) && void 0 !== _b2 ? _b2 : 0;
    var cachedItems = null === (_c = options2.cachedData) || void 0 === _c ? void 0 : _c.items;
    if (take && cachedItems) {
      var skip = null !== (_e = null !== (_d = options2.skip) && void 0 !== _d ? _d : storeLoadOptions.skip) && void 0 !== _e ? _e : 0;
      for (var i = 0; i < take; i++) {
        var localIndex = fromEnd ? take - 1 - i : i;
        var cacheItemIndex = localIndex + skip;
        var cacheItem = cachedItems[cacheItemIndex];
        if (void 0 === cacheItem && cacheItemIndex in cachedItems) {
          return true;
        }
        var item = getItemFromCache(options2, cacheItem, groupCount, localIndex, take);
        if (item) {
          items.push(item);
        } else {
          return false;
        }
      }
      return true;
    }
    return false;
  }
  function getItemFromCache(options2, cacheItem, groupCount, index2, take) {
    if (groupCount && cacheItem) {
      var skips = 0 === index2 && options2.skips || [];
      var takes = index2 === take - 1 && options2.takes || [];
      return function getGroupItemFromCache(cacheItem2, groupCount2, skips2, takes2) {
        if (groupCount2 && cacheItem2) {
          var result2 = _extends({}, cacheItem2);
          var skip = skips2[0] || 0;
          var take2 = takes2[0];
          var {
            items
          } = cacheItem2;
          if (items) {
            if (void 0 === take2 && !items[skip]) {
              return;
            }
            result2.items = [];
            if (skips2.length) {
              result2.isContinuation = true;
            }
            if (take2) {
              result2.isContinuationOnNextPage = cacheItem2.count > take2;
            }
            for (var i = 0; void 0 === take2 ? items[i + skip] : i < take2; i++) {
              var childCacheItem = items[i + skip];
              var isLast = i + 1 === take2;
              var item = getGroupItemFromCache(childCacheItem, groupCount2 - 1, 0 === i ? skips2.slice(1) : [], isLast ? takes2.slice(1) : []);
              if (void 0 !== item) {
                result2.items.push(item);
              } else {
                return;
              }
            }
          }
          return result2;
        }
        return cacheItem2;
      }(cacheItem, groupCount, skips, takes);
    }
    return cacheItem;
  }
  function getCacheItem(cacheItem, loadedItem, groupCount, skips) {
    if (groupCount && loadedItem) {
      var result2 = _extends({}, loadedItem);
      delete result2.isContinuation;
      delete result2.isContinuationOnNextPage;
      var skip = skips[0] || 0;
      if (loadedItem.items) {
        result2.items = (null === cacheItem || void 0 === cacheItem ? void 0 : cacheItem.items) || {};
        loadedItem.items.forEach((item, index2) => {
          var globalIndex = index2 + skip;
          var childSkips = 0 === index2 ? skips.slice(1) : [];
          result2.items[globalIndex] = getCacheItem(result2.items[globalIndex], item, groupCount - 1, childSkips);
        });
      }
      return result2;
    }
    return loadedItem;
  }
  var members = {
    init(dataSource, remoteOperations) {
      var that = this;
      that._dataSource = dataSource;
      that._remoteOperations = remoteOperations || {};
      that._isLastPage = !dataSource.isLastPage();
      that._hasLastPage = false;
      that._currentTotalCount = 0;
      that._cachedData = {
        items: {}
      };
      that._lastOperationTypes = {};
      that._eventsStrategy = dataSource._eventsStrategy;
      that._totalCountCorrection = 0;
      that._isLoadingAll = false;
      that.changed = callbacks_default();
      that.loadingChanged = callbacks_default();
      that.loadError = callbacks_default();
      that.customizeStoreLoadOptions = callbacks_default();
      that.changing = callbacks_default();
      that.pushed = callbacks_default();
      that._dataChangedHandler = that._handleDataChanged.bind(that);
      that._customizeStoreLoadOptionsHandler = that._handleCustomizeStoreLoadOptions.bind(that);
      that._dataLoadedHandler = that._handleDataLoaded.bind(that);
      that._loadingChangedHandler = that._handleLoadingChanged.bind(that);
      that._loadErrorHandler = that._handleLoadError.bind(that);
      that._pushHandler = that._handlePush.bind(that);
      that._changingHandler = that._handleChanging.bind(that);
      dataSource.on("changed", that._dataChangedHandler);
      dataSource.on("customizeStoreLoadOptions", that._customizeStoreLoadOptionsHandler);
      dataSource.on("customizeLoadResult", that._dataLoadedHandler);
      dataSource.on("loadingChanged", that._loadingChangedHandler);
      dataSource.on("loadError", that._loadErrorHandler);
      dataSource.on("changing", that._changingHandler);
      dataSource.store().on("beforePush", that._pushHandler);
      each(dataSource, (memberName, member) => {
        if (!that[memberName] && isFunction(member)) {
          that[memberName] = function() {
            return this._dataSource[memberName].apply(this._dataSource, arguments);
          };
        }
      });
    },
    remoteOperations() {
      return this._remoteOperations;
    },
    dispose(isSharedDataSource) {
      var dataSource = this._dataSource;
      var store = dataSource.store();
      dataSource.off("changed", this._dataChangedHandler);
      dataSource.off("customizeStoreLoadOptions", this._customizeStoreLoadOptionsHandler);
      dataSource.off("customizeLoadResult", this._dataLoadedHandler);
      dataSource.off("loadingChanged", this._loadingChangedHandler);
      dataSource.off("loadError", this._loadErrorHandler);
      dataSource.off("changing", this._changingHandler);
      store && store.off("beforePush", this._pushHandler);
      if (!isSharedDataSource) {
        dataSource.dispose();
      }
    },
    refresh(options2, operationTypes) {
      var dataSource = this._dataSource;
      if (operationTypes.reload) {
        this.resetCurrentTotalCount();
        this._isLastPage = !dataSource.paginate();
        this._hasLastPage = this._isLastPage;
      }
    },
    resetCurrentTotalCount() {
      this._currentTotalCount = 0;
      this._totalCountCorrection = 0;
    },
    resetCache() {
      this._cachedStoreData = void 0;
      this._cachedPagingData = void 0;
    },
    resetPagesCache() {
      this._cachedData = {
        items: {}
      };
    },
    _needClearStoreDataCache() {
      var remoteOperations = this.remoteOperations();
      var operationTypes = calculateOperationTypes(this._lastLoadOptions || {}, {});
      var isLocalOperations = Object.keys(remoteOperations).every((operationName) => !operationTypes[operationName] || !remoteOperations[operationName]);
      return !isLocalOperations;
    },
    push(changes, fromStore) {
      var store = this.store();
      if (this._needClearStoreDataCache()) {
        this._cachedStoreData = void 0;
      }
      this._cachedPagingData = void 0;
      this.resetPagesCache(true);
      if (this._cachedStoreData) {
        applyBatch({
          keyInfo: store,
          data: this._cachedStoreData,
          changes
        });
      }
      if (!fromStore) {
        this._applyBatch(changes);
      }
      this.pushed.fire(changes);
    },
    getDataIndexGetter() {
      if (!this._dataIndexGetter) {
        var indexByKey2;
        var storeData;
        var store = this.store();
        this._dataIndexGetter = (data3) => {
          var isCacheUpdated = storeData && storeData !== this._cachedStoreData;
          if (!indexByKey2 || isCacheUpdated) {
            storeData = this._cachedStoreData || [];
            indexByKey2 = {};
            for (var i = 0; i < storeData.length; i++) {
              indexByKey2[getKeyHash(store.keyOf(storeData[i]))] = i;
            }
          }
          return indexByKey2[getKeyHash(store.keyOf(data3))];
        };
      }
      return this._dataIndexGetter;
    },
    _getKeyInfo() {
      return this.store();
    },
    _needToCopyDataObject: () => true,
    _applyBatch(changes, fromStore) {
      var keyInfo = this._getKeyInfo();
      var dataSource = this._dataSource;
      var groupCount = m_utils_default.normalizeSortingInfo(this.group()).length;
      var isReshapeMode = "reshape" === this.option("editing.refreshMode");
      var isVirtualMode3 = "virtual" === this.option("scrolling.mode");
      changes = changes.filter((change) => !dataSource.paginate() || "insert" !== change.type || void 0 !== change.index);
      var getItemCount = () => groupCount ? this.itemsCount() : this.items().length;
      var oldItemCount = getItemCount();
      applyBatch({
        keyInfo,
        data: this._items,
        changes,
        groupCount,
        useInsertIndex: true,
        skipCopying: !this._needToCopyDataObject()
      });
      applyBatch({
        keyInfo,
        data: dataSource.items(),
        changes,
        groupCount,
        useInsertIndex: true,
        skipCopying: !this._needToCopyDataObject()
      });
      var needUpdateTotalCountCorrection = this._currentTotalCount > 0 || (fromStore || !isReshapeMode) && isVirtualMode3;
      if (needUpdateTotalCountCorrection) {
        this._totalCountCorrection += getItemCount() - oldItemCount;
      }
      changes.splice(0, changes.length);
    },
    _handlePush(_ref) {
      var {
        changes
      } = _ref;
      this.push(changes, true);
    },
    _handleChanging(e) {
      this.changing.fire(e);
      this._applyBatch(e.changes, true);
    },
    _needCleanCacheByOperation(operationType, remoteOperations) {
      var operationTypesByOrder = ["filtering", "sorting", "paging"];
      var operationTypeIndex = operationTypesByOrder.indexOf(operationType);
      var currentOperationTypes = operationTypeIndex >= 0 ? operationTypesByOrder.slice(operationTypeIndex) : [operationType];
      return currentOperationTypes.some((operationType2) => remoteOperations[operationType2]);
    },
    _customizeRemoteOperations(options2, operationTypes) {
      var cachedStoreData = this._cachedStoreData;
      var cachedPagingData = this._cachedPagingData;
      var cachedData = this._cachedData;
      if (options2.storeLoadOptions.filter && !options2.remoteOperations.filtering || options2.storeLoadOptions.sort && !options2.remoteOperations.sorting) {
        options2.remoteOperations = {
          filtering: options2.remoteOperations.filtering,
          summary: options2.remoteOperations.summary
        };
      }
      if (operationTypes.fullReload) {
        cachedStoreData = void 0;
        cachedPagingData = void 0;
        cachedData = {
          items: {}
        };
      } else {
        if (operationTypes.reload) {
          cachedPagingData = void 0;
          cachedData = {
            items: {}
          };
        } else if (operationTypes.groupExpanding) {
          cachedData = {
            items: {}
          };
        }
        each(operationTypes, (operationType, value2) => {
          if (value2 && this._needCleanCacheByOperation(operationType, options2.remoteOperations)) {
            cachedStoreData = void 0;
            cachedPagingData = void 0;
          }
        });
      }
      if (cachedPagingData) {
        options2.remoteOperations.paging = false;
      }
      options2.cachedStoreData = cachedStoreData;
      options2.cachedPagingData = cachedPagingData;
      options2.cachedData = cachedData;
      if (!options2.isCustomLoading) {
        this._cachedStoreData = cachedStoreData;
        this._cachedPagingData = cachedPagingData;
        this._cachedData = cachedData;
      }
    },
    _handleCustomizeStoreLoadOptions(options2) {
      var _a2;
      this._handleDataLoading(options2);
      if (!(0 === (null === (_a2 = options2.data) || void 0 === _a2 ? void 0 : _a2.length))) {
        options2.data = getPageDataFromCache(options2, true) || options2.cachedStoreData;
      }
    },
    _handleDataLoading(options2) {
      var dataSource = this._dataSource;
      var lastLoadOptions = this._lastLoadOptions;
      this.customizeStoreLoadOptions.fire(options2);
      options2.delay = this.option("loadingTimeout");
      options2.originalStoreLoadOptions = options2.storeLoadOptions;
      options2.remoteOperations = extend({}, this.remoteOperations());
      var isFullReload = !this.isLoaded() && !this._isRefreshing;
      if (this.option("integrationOptions.renderedOnServer") && !this.isLoaded()) {
        options2.delay = void 0;
      }
      var loadOptions = extend({
        pageIndex: this.pageIndex(),
        pageSize: this.pageSize()
      }, options2.storeLoadOptions);
      var operationTypes = calculateOperationTypes(loadOptions, lastLoadOptions, isFullReload);
      this._customizeRemoteOperations(options2, operationTypes);
      if (!options2.isCustomLoading) {
        var isRefreshing = this._isRefreshing;
        options2.pageIndex = dataSource.pageIndex();
        options2.lastLoadOptions = loadOptions;
        options2.operationTypes = operationTypes;
        this._loadingOperationTypes = operationTypes;
        this._isRefreshing = true;
        when(isRefreshing || this._isRefreshed || this.refresh(options2, operationTypes)).done(() => {
          if (this._lastOperationId === options2.operationId) {
            this._isRefreshed = true;
            this.load().always(() => {
              this._isRefreshed = false;
            });
          }
        }).fail(() => {
          dataSource.cancel(options2.operationId);
        }).always(() => {
          this._isRefreshing = false;
        });
        dataSource.cancel(this._lastOperationId);
        this._lastOperationId = options2.operationId;
        if (this._isRefreshing) {
          dataSource.cancel(this._lastOperationId);
        }
      }
      this._handleDataLoadingCore(options2);
    },
    _handleDataLoadingCore(options2) {
      var {
        remoteOperations
      } = options2;
      options2.loadOptions = {};
      var cachedExtra = options2.cachedData.extra;
      var localLoadOptionNames = {
        filter: !remoteOperations.filtering,
        sort: !remoteOperations.sorting,
        group: !remoteOperations.grouping,
        summary: !remoteOperations.summary,
        skip: !remoteOperations.paging,
        take: !remoteOperations.paging,
        requireTotalCount: cachedExtra && "totalCount" in cachedExtra || !remoteOperations.paging,
        langParams: !remoteOperations.filtering || !remoteOperations.sorting
      };
      each(options2.storeLoadOptions, (optionName, optionValue) => {
        if (localLoadOptionNames[optionName]) {
          options2.loadOptions[optionName] = optionValue;
          delete options2.storeLoadOptions[optionName];
        }
      });
      if (cachedExtra) {
        options2.extra = cachedExtra;
      }
    },
    _handleDataLoaded(options2) {
      var _a2, _b2;
      var {
        loadOptions
      } = options2;
      var localPaging = options2.remoteOperations && !options2.remoteOperations.paging;
      var {
        cachedData
      } = options2;
      var {
        storeLoadOptions
      } = options2;
      var needCache = false !== this.option("cacheEnabled") && storeLoadOptions;
      var needPageCache = needCache && !options2.isCustomLoading && cachedData && (!localPaging || storeLoadOptions.group);
      var needPagingCache = needCache && localPaging;
      var needStoreCache = needPagingCache && !options2.isCustomLoading;
      if (!loadOptions) {
        this._dataSource.cancel(options2.operationId);
        return;
      }
      if (localPaging) {
        options2.skip = loadOptions.skip;
        options2.take = loadOptions.take;
        delete loadOptions.skip;
        delete loadOptions.take;
      }
      if (loadOptions.group) {
        loadOptions.group = options2.group || loadOptions.group;
      }
      var groupCount = m_utils_default.normalizeSortingInfo(options2.group || storeLoadOptions.group || loadOptions.group).length;
      if (options2.cachedDataPartBegin) {
        options2.data = options2.cachedDataPartBegin.concat(options2.data);
      }
      if (options2.cachedDataPartEnd) {
        options2.data = options2.data.concat(options2.cachedDataPartEnd);
      }
      if (!needPageCache || !getPageDataFromCache(options2)) {
        if (needPagingCache && options2.cachedPagingData) {
          options2.data = cloneItems(options2.cachedPagingData, groupCount);
        } else {
          if (needStoreCache) {
            if (!this._cachedStoreData) {
              this._cachedStoreData = cloneItems(options2.data, m_utils_default.normalizeSortingInfo(storeLoadOptions.group).length);
            } else if (options2.mergeStoreLoadData) {
              options2.data = this._cachedStoreData = this._cachedStoreData.concat(options2.data);
            }
          }
          new array_store_default(options2.data).load(loadOptions).done((data3) => {
            options2.data = data3;
            if (needStoreCache) {
              this._cachedPagingData = cloneItems(options2.data, groupCount);
            }
          }).fail((error) => {
            options2.data = new Deferred().reject(error);
          });
        }
        if (loadOptions.requireTotalCount && localPaging) {
          options2.extra = isPlainObject(options2.extra) ? options2.extra : {};
          options2.extra.totalCount = options2.data.length;
        }
        if (options2.extra && options2.extra.totalCount >= 0 && (false === storeLoadOptions.requireTotalCount || false === loadOptions.requireTotalCount)) {
          options2.extra.totalCount = -1;
        }
        if (!loadOptions.data && (storeLoadOptions.requireTotalCount || (null !== (_b2 = null === (_a2 = options2.extra) || void 0 === _a2 ? void 0 : _a2.totalCount) && void 0 !== _b2 ? _b2 : -1) >= 0)) {
          this._totalCountCorrection = 0;
        }
        this._handleDataLoadedCore(options2);
        if (needPageCache) {
          cachedData.extra = cachedData.extra || extend({}, options2.extra);
          when(options2.data).done((data3) => {
            !function(options3, data4, groupCount2) {
              var _a3, _b3, _c, _d;
              var {
                storeLoadOptions: storeLoadOptions2
              } = options3;
              var skip = null !== (_b3 = null !== (_a3 = options3.skip) && void 0 !== _a3 ? _a3 : storeLoadOptions2.skip) && void 0 !== _b3 ? _b3 : 0;
              var take = null !== (_d = null !== (_c = options3.take) && void 0 !== _c ? _c : storeLoadOptions2.take) && void 0 !== _d ? _d : 0;
              for (var i = 0; i < take; i++) {
                var globalIndex = i + skip;
                var cacheItems = options3.cachedData.items;
                var skips = 0 === i && options3.skips || [];
                cacheItems[globalIndex] = getCacheItem(cacheItems[globalIndex], data4[i], groupCount2, skips);
              }
            }(options2, data3, groupCount);
          });
        }
      }
      when(options2.data).done(() => {
        if (options2.lastLoadOptions) {
          this._lastLoadOptions = options2.lastLoadOptions;
          Object.keys(options2.operationTypes).forEach((operationType) => {
            this._lastOperationTypes[operationType] = this._lastOperationTypes[operationType] || options2.operationTypes[operationType];
          });
        }
      });
      options2.storeLoadOptions = options2.originalStoreLoadOptions;
    },
    _handleDataLoadedCore(options2) {
      if (options2.remoteOperations && !options2.remoteOperations.paging && Array.isArray(options2.data)) {
        if (void 0 !== options2.skip) {
          options2.data = options2.data.slice(options2.skip);
        }
        if (void 0 !== options2.take) {
          options2.data = options2.data.slice(0, options2.take);
        }
      }
    },
    _handleLoadingChanged(isLoading) {
      this.loadingChanged.fire(isLoading);
    },
    _handleLoadError(error) {
      this.loadError.fire(error);
      this.changed.fire({
        changeType: "loadError",
        error
      });
    },
    _loadPageSize() {
      return this.pageSize();
    },
    _handleDataChanged(args) {
      var currentTotalCount;
      var dataSource = this._dataSource;
      var isLoading = false;
      var isDataLoading = !args || isDefined(args.changeType);
      var itemsCount = this.itemsCount();
      if (isDataLoading) {
        this._isLastPage = !itemsCount || !this._loadPageSize() || itemsCount < this._loadPageSize();
        if (this._isLastPage) {
          this._hasLastPage = true;
        }
      }
      if (dataSource.totalCount() >= 0) {
        if (dataSource.pageIndex() >= this.pageCount()) {
          dataSource.pageIndex(this.pageCount() - 1);
          this.pageIndex(dataSource.pageIndex());
          this.resetPagesCache();
          dataSource.load();
          isLoading = true;
        }
      } else if (isDataLoading) {
        currentTotalCount = dataSource.pageIndex() * this.pageSize() + itemsCount;
        if (currentTotalCount > this._currentTotalCount) {
          this._currentTotalCount = currentTotalCount;
          if (0 === dataSource.pageIndex() || !this.option("scrolling.legacyMode")) {
            this._totalCountCorrection = 0;
          }
        }
        if (0 === itemsCount && dataSource.pageIndex() >= this.pageCount()) {
          dataSource.pageIndex(this.pageCount() - 1);
          if ("infinite" !== this.option("scrolling.mode")) {
            dataSource.load();
            isLoading = true;
          }
        }
      }
      if (!isLoading) {
        this._operationTypes = this._lastOperationTypes;
        this._lastOperationTypes = {};
        this.component._optionCache = {};
        this.changed.fire(args);
        this.component._optionCache = void 0;
      }
    },
    _scheduleCustomLoadCallbacks(deferred) {
      var that = this;
      that._isCustomLoading = true;
      deferred.always(() => {
        that._isCustomLoading = false;
      });
    },
    loadingOperationTypes() {
      return this._loadingOperationTypes;
    },
    operationTypes() {
      return this._operationTypes;
    },
    lastLoadOptions() {
      return this._lastLoadOptions || {};
    },
    isLastPage() {
      return this._isLastPage;
    },
    _dataSourceTotalCount() {
      return this._dataSource.totalCount();
    },
    totalCount() {
      return parseInt((this._currentTotalCount || this._dataSourceTotalCount()) + this._totalCountCorrection);
    },
    totalCountCorrection() {
      return this._totalCountCorrection;
    },
    itemsCount() {
      return this._dataSource.items().length;
    },
    totalItemsCount() {
      return this.totalCount();
    },
    pageSize() {
      var dataSource = this._dataSource;
      if (!arguments.length && !dataSource.paginate()) {
        return 0;
      }
      return dataSource.pageSize.apply(dataSource, arguments);
    },
    pageCount() {
      var count = this.totalItemsCount() - this._totalCountCorrection;
      var pageSize = this.pageSize();
      if (pageSize && count > 0) {
        return Math.max(1, Math.ceil(count / pageSize));
      }
      return 1;
    },
    hasKnownLastPage() {
      return this._hasLastPage || this._dataSource.totalCount() >= 0;
    },
    loadFromStore(loadOptions, store) {
      var dataSource = this._dataSource;
      var d = new Deferred();
      if (!dataSource) {
        return;
      }
      store = store || dataSource.store();
      store.load(loadOptions).done((data3, extra) => {
        if (data3 && !Array.isArray(data3) && Array.isArray(data3.data)) {
          extra = data3;
          data3 = data3.data;
        }
        d.resolve(data3, extra);
      }).fail(d.reject);
      return d;
    },
    isCustomLoading() {
      return !!this._isCustomLoading;
    },
    load(options2) {
      var that = this;
      var dataSource = that._dataSource;
      var d = new Deferred();
      if (options2) {
        var store = dataSource.store();
        var dataSourceLoadOptions = dataSource.loadOptions();
        var loadResult = {
          storeLoadOptions: extend({}, options2, {
            langParams: null === dataSourceLoadOptions || void 0 === dataSourceLoadOptions ? void 0 : dataSourceLoadOptions.langParams
          }),
          isCustomLoading: true
        };
        each(store._customLoadOptions() || [], (_, optionName) => {
          if (!(optionName in loadResult.storeLoadOptions)) {
            loadResult.storeLoadOptions[optionName] = dataSourceLoadOptions[optionName];
          }
        });
        this._isLoadingAll = options2.isLoadingAll;
        that._scheduleCustomLoadCallbacks(d);
        dataSource._scheduleLoadCallbacks(d);
        that._handleCustomizeStoreLoadOptions(loadResult);
        !function(action, timeout) {
          if (isDefined(timeout)) {
            executeAsync(action, timeout);
          } else {
            action();
          }
        }(() => {
          if (!dataSource.store()) {
            return d.reject("canceled");
          }
          when(loadResult.data || that.loadFromStore(loadResult.storeLoadOptions)).done((data3, extra) => {
            loadResult.data = data3;
            loadResult.extra = extra || {};
            that._handleDataLoaded(loadResult);
            if (options2.requireTotalCount && void 0 === loadResult.extra.totalCount) {
              loadResult.extra.totalCount = store.totalCount(loadResult.storeLoadOptions);
            }
            when(loadResult.data, loadResult.extra.totalCount).done((data4, totalCount) => {
              loadResult.extra.totalCount = totalCount;
              d.resolve(data4, loadResult.extra);
            }).fail(d.reject);
          }).fail(d.reject);
        }, that.option("loadingTimeout"));
        return d.fail(function() {
          that._eventsStrategy.fireEvent("loadError", arguments);
        }).always(() => {
          this._isLoadingAll = false;
        }).promise();
      }
      return dataSource.load();
    },
    reload(full) {
      return full ? this._dataSource.reload() : this._dataSource.load();
    },
    getCachedStoreData() {
      return this._cachedStoreData;
    }
  };
  return members;
}());

// node_modules/devextreme/esm/__internal/grids/data_grid/m_data_source_adapter.js
var dataSourceAdapterType = m_data_source_adapter_default;
var m_data_source_adapter_default2 = {
  extend(extender) {
    dataSourceAdapterType = dataSourceAdapterType.inherit(extender);
  },
  create: (component) => new dataSourceAdapterType(component)
};

// node_modules/devextreme/esm/__internal/grids/data_grid/m_data_controller.js
var _a;
var _b;
var DataController3 = null === (_b = null === (_a = dataControllerModule.controllers) || void 0 === _a ? void 0 : _a.data) || void 0 === _b ? void 0 : _b.inherit({
  _getDataSourceAdapter: () => m_data_source_adapter_default2,
  _getSpecificDataSourceOption() {
    var dataSource = this.option("dataSource");
    if (dataSource && !Array.isArray(dataSource) && this.option("keyExpr")) {
      ui_errors_default.log("W1011");
    }
    return this.callBase();
  }
});
m_core_default.registerModule("data", {
  defaultOptions: dataControllerModule.defaultOptions,
  controllers: {
    data: DataController3
  }
});

// node_modules/devextreme/esm/__internal/grids/grid_core/sorting/m_sorting_mixin.js
var SORT_CLASS = "dx-sort";
var SORT_NONE_CLASS = "dx-sort-none";
var SORTUP_CLASS = "dx-sort-up";
var SORTDOWN_CLASS = "dx-sort-down";
var SORT_INDEX_CLASS = "dx-sort-index";
var SORT_INDEX_ICON_CLASS = "dx-sort-index-icon";
var HEADERS_ACTION_CLASS = "action";
var m_sorting_mixin_default = {
  _applyColumnState(options2) {
    var ariaSortState;
    var $sortIndicator;
    var sortingMode = this.option("sorting.mode");
    var {
      rootElement
    } = options2;
    var {
      column
    } = options2;
    var $indicatorsContainer = this._getIndicatorContainer(rootElement);
    if ("sort" === options2.name) {
      rootElement.find(".".concat(SORT_CLASS)).remove();
      !$indicatorsContainer.children().length && $indicatorsContainer.remove();
      var isSortingAllowed = "none" !== sortingMode && column.allowSorting;
      var hasSeveralSortIndexes = this.getController && !!this.getController("columns").columnOption("sortIndex:1");
      if (!isDefined(column.groupIndex) && (isSortingAllowed || isDefined(column.sortOrder))) {
        ariaSortState = "asc" === column.sortOrder ? "ascending" : "descending";
        $sortIndicator = this.callBase(options2).toggleClass(SORTUP_CLASS, "asc" === column.sortOrder).toggleClass(SORTDOWN_CLASS, "desc" === column.sortOrder);
        if (hasSeveralSortIndexes && this.option("sorting.showSortIndexes") && column.sortIndex >= 0) {
          renderer_default("<span>").addClass(SORT_INDEX_ICON_CLASS).text(column.sortIndex + 1).appendTo($sortIndicator);
          $sortIndicator.addClass(SORT_INDEX_CLASS);
        }
        if (isSortingAllowed) {
          options2.rootElement.addClass(this.addWidgetPrefix(HEADERS_ACTION_CLASS));
        }
      }
      this._setAriaSortAttribute(column, ariaSortState, rootElement, hasSeveralSortIndexes);
      return $sortIndicator;
    }
    return this.callBase(options2);
  },
  _setAriaSortAttribute(column, ariaSortState, $rootElement, hasSeveralSortIndexes) {
    $rootElement.removeAttr("aria-roledescription");
    if (column.isGrouped) {
      var description = this.localize("dxDataGrid-ariaNotSortedColumn");
      if (isDefined(column.sortOrder)) {
        description = "asc" === column.sortOrder ? this.localize("dxDataGrid-ariaSortedAscendingColumn") : this.localize("dxDataGrid-ariaSortedDescendingColumn");
      }
      this.setAria("roledescription", description, $rootElement);
    } else if (!isDefined(column.sortOrder)) {
      this.setAria("sort", "none", $rootElement);
    } else {
      this.setAria("sort", ariaSortState, $rootElement);
      if (hasSeveralSortIndexes && column.sortIndex >= 0) {
        var ariaColumnHeader = message_default.format("dxDataGrid-ariaColumnHeader");
        var ariaSortIndex = message_default.format("dxDataGrid-ariaSortIndex", column.sortIndex + 1);
        var _description = "".concat(ariaColumnHeader, ", ").concat(ariaSortIndex);
        this.setAria("roledescription", _description, $rootElement);
      }
    }
  },
  _getIndicatorClassName(name2) {
    if ("sort" === name2) {
      return SORT_CLASS;
    }
    if ("sortIndex" === name2) {
      return SORT_INDEX_ICON_CLASS;
    }
    return this.callBase(name2);
  },
  _renderIndicator(options2) {
    var {
      column
    } = options2;
    var $container = options2.container;
    var $indicator = options2.indicator;
    if ("sort" === options2.name) {
      var rtlEnabled = this.option("rtlEnabled");
      if (!isDefined(column.sortOrder)) {
        $indicator && $indicator.addClass(SORT_NONE_CLASS);
      }
      if ($container.children().length && (!rtlEnabled && "left" === options2.columnAlignment || rtlEnabled && "right" === options2.columnAlignment)) {
        $container.prepend($indicator);
        return;
      }
    }
    this.callBase(options2);
  },
  _updateIndicator($cell, column, indicatorName) {
    if ("sort" === indicatorName && isDefined(column.groupIndex)) {
      return;
    }
    return this.callBase.apply(this, arguments);
  },
  _getIndicatorElements($cell, returnAll) {
    var $indicatorElements = this.callBase($cell);
    return returnAll ? $indicatorElements : $indicatorElements && $indicatorElements.not(".".concat(SORT_NONE_CLASS));
  }
};

// node_modules/devextreme/esm/__internal/grids/grid_core/sorting/m_sorting.js
var COLUMN_HEADERS_VIEW_NAMESPACE = "dxDataGridColumnHeadersView";
var ColumnHeadersViewSortingExtender = extend({}, m_sorting_mixin_default, {
  _createRow(row) {
    var $row = this.callBase(row);
    if ("header" === row.rowType) {
      events_engine_default.on($row, addNamespace2(CLICK_EVENT_NAME, COLUMN_HEADERS_VIEW_NAMESPACE), "td", this.createAction((e) => {
        this._processHeaderAction(e.event, $row);
      }));
    }
    return $row;
  },
  _processHeaderAction(event, $row) {
    if (renderer_default(event.currentTarget).parent().get(0) !== $row.get(0)) {
      return;
    }
    var that = this;
    var keyName = null;
    var $cellElementFromEvent = renderer_default(event.currentTarget);
    var rowIndex = $cellElementFromEvent.parent().index();
    var columnIndex = -1;
    [].slice.call(that.getCellElements(rowIndex)).some(($cellElement, index2) => {
      if ($cellElement === $cellElementFromEvent.get(0)) {
        columnIndex = index2;
        return true;
      }
      return;
    });
    var visibleColumns = that._columnsController.getVisibleColumns(rowIndex);
    var column = visibleColumns[columnIndex];
    var editingController = that.getController("editing");
    var editingMode = that.option("editing.mode");
    var isCellEditing = editingController && editingController.isEditing() && ("batch" === editingMode || "cell" === editingMode);
    if (isCellEditing || !that._isSortableElement(renderer_default(event.target))) {
      return;
    }
    if (column && !isDefined(column.groupIndex) && !column.command) {
      if (event.shiftKey) {
        keyName = "shift";
      } else if (isCommandKeyPressed(event)) {
        keyName = "ctrl";
      }
      setTimeout(() => {
        that._columnsController.changeSortOrder(column.index, keyName);
      });
    }
  },
  _renderCellContent($cell, options2) {
    var {
      column
    } = options2;
    if (!column.command && "header" === options2.rowType) {
      this._applyColumnState({
        name: "sort",
        rootElement: $cell,
        column,
        showColumnLines: this.option("showColumnLines")
      });
    }
    this.callBase.apply(this, arguments);
  },
  _columnOptionChanged(e) {
    var {
      changeTypes
    } = e;
    if (1 === changeTypes.length && changeTypes.sorting) {
      this._updateIndicators("sort");
      return;
    }
    this.callBase(e);
  },
  optionChanged(args) {
    switch (args.name) {
      case "sorting":
        this._invalidate();
        args.handled = true;
        break;
      default:
        this.callBase(args);
    }
  }
});
var HeaderPanelSortingExtender = extend({}, m_sorting_mixin_default, {
  _createGroupPanelItem($rootElement, groupColumn) {
    var that = this;
    var $item = that.callBase(...arguments);
    events_engine_default.on($item, addNamespace2(CLICK_EVENT_NAME, "dxDataGridHeaderPanel"), that.createAction(() => {
      that._processGroupItemAction(groupColumn.index);
    }));
    that._applyColumnState({
      name: "sort",
      rootElement: $item,
      column: {
        alignment: that.option("rtlEnabled") ? "right" : "left",
        allowSorting: groupColumn.allowSorting,
        sortOrder: "desc" === groupColumn.sortOrder ? "desc" : "asc",
        isGrouped: true
      },
      showColumnLines: true
    });
    return $item;
  },
  _processGroupItemAction(groupColumnIndex) {
    setTimeout(() => this.getController("columns").changeSortOrder(groupColumnIndex));
  },
  optionChanged(args) {
    switch (args.name) {
      case "sorting":
        this._invalidate();
        args.handled = true;
        break;
      default:
        this.callBase(args);
    }
  }
});
var sortingModule = {
  defaultOptions: () => ({
    sorting: {
      mode: "single",
      ascendingText: message_default.format("dxDataGrid-sortingAscendingText"),
      descendingText: message_default.format("dxDataGrid-sortingDescendingText"),
      clearText: message_default.format("dxDataGrid-sortingClearText"),
      showSortIndexes: true
    }
  }),
  extenders: {
    views: {
      columnHeadersView: ColumnHeadersViewSortingExtender,
      headerPanel: HeaderPanelSortingExtender
    }
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/sorting.js
m_core_default.registerModule("sorting", sortingModule);

// node_modules/devextreme/esm/events/gesture/emitter.gesture.scroll.js
var abstract4 = class_default.abstract;
var realDevice = devices_default.real();
var SCROLL_EVENT = "scroll";
var SCROLL_INIT_EVENT = "dxscrollinit";
var SCROLL_START_EVENT = "dxscrollstart";
var SCROLL_MOVE_EVENT = "dxscroll";
var SCROLL_END_EVENT = "dxscrollend";
var SCROLL_STOP_EVENT = "dxscrollstop";
var SCROLL_CANCEL_EVENT = "dxscrollcancel";
var Locker = class_default.inherit(function() {
  var NAMESPACED_SCROLL_EVENT = addNamespace2(SCROLL_EVENT, "dxScrollEmitter");
  return {
    ctor: function(element) {
      this._element = element;
      this._locked = false;
      this._proxiedScroll = (e) => {
        if (!this._disposed) {
          this._scroll(e);
        }
      };
      events_engine_default.on(this._element, NAMESPACED_SCROLL_EVENT, this._proxiedScroll);
    },
    _scroll: abstract4,
    check: function(e, callback) {
      if (this._locked) {
        callback();
      }
    },
    dispose: function() {
      this._disposed = true;
      events_engine_default.off(this._element, NAMESPACED_SCROLL_EVENT, this._proxiedScroll);
    }
  };
}());
var TimeoutLocker = Locker.inherit({
  ctor: function(element, timeout) {
    this.callBase(element);
    this._timeout = timeout;
  },
  _scroll: function() {
    this._prepare();
    this._forget();
  },
  _prepare: function() {
    if (this._timer) {
      this._clearTimer();
    }
    this._locked = true;
  },
  _clearTimer: function() {
    clearTimeout(this._timer);
    this._locked = false;
    this._timer = null;
  },
  _forget: function() {
    var that = this;
    this._timer = setTimeout(function() {
      that._clearTimer();
    }, this._timeout);
  },
  dispose: function() {
    this.callBase();
    this._clearTimer();
  }
});
var WheelLocker = TimeoutLocker.inherit({
  ctor: function(element) {
    this.callBase(element, 400);
    this._lastWheelDirection = null;
  },
  check: function(e, callback) {
    this._checkDirectionChanged(e);
    this.callBase(e, callback);
  },
  _checkDirectionChanged: function(e) {
    if (!isDxMouseWheelEvent(e)) {
      this._lastWheelDirection = null;
      return;
    }
    var direction = e.shiftKey || false;
    var directionChange = null !== this._lastWheelDirection && direction !== this._lastWheelDirection;
    this._lastWheelDirection = direction;
    this._locked = this._locked && !directionChange;
  }
});
var PointerLocker = TimeoutLocker.inherit({
  ctor: function(element) {
    this.callBase(element, 400);
  }
});
!function() {
  var {
    ios: isIos,
    android: isAndroid
  } = realDevice;
  if (!(isIos || isAndroid)) {
    return;
  }
  PointerLocker = Locker.inherit({
    _scroll: function() {
      this._locked = true;
      var that = this;
      cancelAnimationFrame(this._scrollFrame);
      this._scrollFrame = requestAnimationFrame(function() {
        that._locked = false;
      });
    },
    check: function(e, callback) {
      cancelAnimationFrame(this._scrollFrame);
      cancelAnimationFrame(this._checkFrame);
      var that = this;
      var callBase = this.callBase;
      this._checkFrame = requestAnimationFrame(function() {
        callBase.call(that, e, callback);
        that._locked = false;
      });
    },
    dispose: function() {
      this.callBase();
      cancelAnimationFrame(this._scrollFrame);
      cancelAnimationFrame(this._checkFrame);
    }
  });
}();
var ScrollEmitter = emitter_gesture_default.inherit(function() {
  var FRAME_DURATION2 = Math.round(1e3 / 60);
  return {
    ctor: function(element) {
      this.callBase.apply(this, arguments);
      this.direction = "both";
      this._pointerLocker = new PointerLocker(element);
      this._wheelLocker = new WheelLocker(element);
    },
    validate: function() {
      return true;
    },
    configure: function(data3) {
      if (data3.scrollTarget) {
        this._pointerLocker.dispose();
        this._wheelLocker.dispose();
        this._pointerLocker = new PointerLocker(data3.scrollTarget);
        this._wheelLocker = new WheelLocker(data3.scrollTarget);
      }
      this.callBase(data3);
    },
    _init: function(e) {
      this._wheelLocker.check(e, (function() {
        if (isDxMouseWheelEvent(e)) {
          this._accept(e);
        }
      }).bind(this));
      this._pointerLocker.check(e, (function() {
        var skipCheck = this.isNative && isMouseEvent(e);
        if (!isDxMouseWheelEvent(e) && !skipCheck) {
          this._accept(e);
        }
      }).bind(this));
      this._fireEvent(SCROLL_INIT_EVENT, e);
      this._prevEventData = eventData(e);
    },
    move: function(e) {
      this.callBase.apply(this, arguments);
      e.isScrollingEvent = this.isNative || e.isScrollingEvent;
    },
    _start: function(e) {
      this._savedEventData = eventData(e);
      this._fireEvent(SCROLL_START_EVENT, e);
      this._prevEventData = eventData(e);
    },
    _move: function(e) {
      var currentEventData = eventData(e);
      this._fireEvent(SCROLL_MOVE_EVENT, e, {
        delta: eventDelta(this._prevEventData, currentEventData)
      });
      var delta = eventDelta(this._savedEventData, currentEventData);
      if (delta.time > 200) {
        this._savedEventData = this._prevEventData;
      }
      this._prevEventData = eventData(e);
    },
    _end: function(e) {
      var endEventDelta = eventDelta(this._prevEventData, eventData(e));
      var velocity = {
        x: 0,
        y: 0
      };
      if (!isDxMouseWheelEvent(e) && endEventDelta.time < 100) {
        var delta = eventDelta(this._savedEventData, this._prevEventData);
        var velocityMultiplier = FRAME_DURATION2 / delta.time;
        velocity = {
          x: delta.x * velocityMultiplier,
          y: delta.y * velocityMultiplier
        };
      }
      this._fireEvent(SCROLL_END_EVENT, e, {
        velocity
      });
    },
    _stop: function(e) {
      this._fireEvent(SCROLL_STOP_EVENT, e);
    },
    cancel: function(e) {
      this.callBase.apply(this, arguments);
      this._fireEvent(SCROLL_CANCEL_EVENT, e);
    },
    dispose: function() {
      this.callBase.apply(this, arguments);
      this._pointerLocker.dispose();
      this._wheelLocker.dispose();
    },
    _clearSelection: function() {
      if (this.isNative) {
        return;
      }
      return this.callBase.apply(this, arguments);
    },
    _toggleGestureCover: function() {
      if (this.isNative) {
        return;
      }
      return this.callBase.apply(this, arguments);
    }
  };
}());
emitter_registrator_default({
  emitter: ScrollEmitter,
  events: [SCROLL_INIT_EVENT, SCROLL_START_EVENT, SCROLL_MOVE_EVENT, SCROLL_END_EVENT, SCROLL_STOP_EVENT, SCROLL_CANCEL_EVENT]
});
var emitter_gesture_scroll_default = {
  init: SCROLL_INIT_EVENT,
  start: SCROLL_START_EVENT,
  move: SCROLL_MOVE_EVENT,
  end: SCROLL_END_EVENT,
  stop: SCROLL_STOP_EVENT,
  cancel: SCROLL_CANCEL_EVENT,
  scroll: SCROLL_EVENT
};

// node_modules/devextreme/esm/ui/scroll_view/animator.js
var abstract5 = class_default.abstract;
var Animator = class_default.inherit({
  ctor: function() {
    this._finished = true;
    this._stopped = false;
    this._proxiedStepCore = this._stepCore.bind(this);
  },
  start: function() {
    this._stopped = false;
    this._finished = false;
    this._stepCore();
  },
  stop: function() {
    this._stopped = true;
    cancelAnimationFrame(this._stepAnimationFrame);
  },
  _stepCore: function() {
    if (this._isStopped()) {
      this._stop();
      return;
    }
    if (this._isFinished()) {
      this._finished = true;
      this._complete();
      return;
    }
    this._step();
    this._stepAnimationFrame = requestAnimationFrame(this._proxiedStepCore);
  },
  _step: abstract5,
  _isFinished: noop2,
  _stop: noop2,
  _complete: noop2,
  _isStopped: function() {
    return this._stopped;
  },
  inProgress: function() {
    return !(this._stopped || this._finished);
  }
});
var animator_default = Animator;

// node_modules/devextreme/esm/ui/scroll_view/ui.scrollbar.js
var SCROLLBAR = "dxScrollbar";
var SCROLLABLE_SCROLLBAR_CLASS = "dx-scrollable-scrollbar";
var SCROLLABLE_SCROLLBAR_ACTIVE_CLASS = "".concat(SCROLLABLE_SCROLLBAR_CLASS, "-active");
var SCROLLABLE_SCROLL_CLASS = "dx-scrollable-scroll";
var SCROLLABLE_SCROLL_CONTENT_CLASS = "dx-scrollable-scroll-content";
var HOVER_ENABLED_STATE = "dx-scrollbar-hoverable";
var HORIZONTAL = "horizontal";
var THUMB_MIN_SIZE = 15;
var SCROLLBAR_VISIBLE = {
  onScroll: "onScroll",
  onHover: "onHover",
  always: "always",
  never: "never"
};
var activeScrollbar = null;
var Scrollbar = ui_widget_default.inherit({
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      direction: null,
      visible: false,
      activeStateEnabled: false,
      visibilityMode: SCROLLBAR_VISIBLE.onScroll,
      containerSize: 0,
      contentSize: 0,
      expandable: true,
      scaleRatio: 1
    });
  },
  _init: function() {
    this.callBase();
    this._isHovered = false;
  },
  _initMarkup: function() {
    this._renderThumb();
    this.callBase();
  },
  _render: function() {
    this.callBase();
    this._renderDirection();
    this._update();
    this._attachPointerDownHandler();
    this.option("hoverStateEnabled", this._isHoverMode());
    this.$element().toggleClass(HOVER_ENABLED_STATE, this.option("hoverStateEnabled"));
  },
  _renderThumb: function() {
    this._$thumb = renderer_default("<div>").addClass(SCROLLABLE_SCROLL_CLASS);
    renderer_default("<div>").addClass(SCROLLABLE_SCROLL_CONTENT_CLASS).appendTo(this._$thumb);
    this.$element().addClass(SCROLLABLE_SCROLLBAR_CLASS).append(this._$thumb);
  },
  isThumb: function($element) {
    return !!this.$element().find($element).length;
  },
  _isHoverMode: function() {
    var visibilityMode = this.option("visibilityMode");
    return (visibilityMode === SCROLLBAR_VISIBLE.onHover || visibilityMode === SCROLLBAR_VISIBLE.always) && this.option("expandable");
  },
  _renderDirection: function() {
    var direction = this.option("direction");
    this.$element().addClass("dx-scrollbar-" + direction);
    this._dimension = direction === HORIZONTAL ? "width" : "height";
    this._prop = direction === HORIZONTAL ? "left" : "top";
  },
  _attachPointerDownHandler: function() {
    events_engine_default.on(this._$thumb, addNamespace2(pointer_default.down, SCROLLBAR), this.feedbackOn.bind(this));
  },
  feedbackOn: function() {
    this.$element().addClass(SCROLLABLE_SCROLLBAR_ACTIVE_CLASS);
    activeScrollbar = this;
  },
  feedbackOff: function() {
    this.$element().removeClass(SCROLLABLE_SCROLLBAR_ACTIVE_CLASS);
    activeScrollbar = null;
  },
  cursorEnter: function() {
    this._isHovered = true;
    if (this._needScrollbar()) {
      this.option("visible", true);
    }
  },
  cursorLeave: function() {
    this._isHovered = false;
    this.option("visible", false);
  },
  _renderDimensions: function() {
    this._$thumb.css({
      width: this.option("width"),
      height: this.option("height")
    });
  },
  _toggleVisibility: function(visible2) {
    if (this.option("visibilityMode") === SCROLLBAR_VISIBLE.onScroll) {
      this._$thumb.css("opacity");
    }
    visible2 = this._adjustVisibility(visible2);
    this.option().visible = visible2;
    this._$thumb.toggleClass("dx-state-invisible", !visible2);
  },
  _adjustVisibility: function(visible2) {
    if (this._baseContainerToContentRatio && !this._needScrollbar()) {
      return false;
    }
    switch (this.option("visibilityMode")) {
      case SCROLLBAR_VISIBLE.onScroll:
        break;
      case SCROLLBAR_VISIBLE.onHover:
        visible2 = visible2 || !!this._isHovered;
        break;
      case SCROLLBAR_VISIBLE.never:
        visible2 = false;
        break;
      case SCROLLBAR_VISIBLE.always:
        visible2 = true;
    }
    return visible2;
  },
  moveTo: function(location) {
    if (this._isHidden()) {
      return;
    }
    if (isPlainObject(location)) {
      location = location[this._prop] || 0;
    }
    var scrollBarLocation = {};
    scrollBarLocation[this._prop] = this._calculateScrollBarPosition(location);
    move(this._$thumb, scrollBarLocation);
  },
  _calculateScrollBarPosition: function(location) {
    return -location * this._thumbRatio;
  },
  _update: function() {
    var containerSize = Math.round(this.option("containerSize"));
    var contentSize = Math.round(this.option("contentSize"));
    var baseContainerSize = Math.round(this.option("baseContainerSize"));
    var baseContentSize = Math.round(this.option("baseContentSize"));
    if (isNaN(baseContainerSize)) {
      baseContainerSize = containerSize;
      baseContentSize = contentSize;
    }
    this._baseContainerToContentRatio = baseContentSize ? baseContainerSize / baseContentSize : baseContainerSize;
    this._realContainerToContentRatio = contentSize ? containerSize / contentSize : containerSize;
    var thumbSize = Math.round(Math.max(Math.round(containerSize * this._realContainerToContentRatio), THUMB_MIN_SIZE));
    this._thumbRatio = (containerSize - thumbSize) / (this.option("scaleRatio") * (contentSize - containerSize));
    this.option(this._dimension, thumbSize / this.option("scaleRatio"));
    this.$element().css("display", this._needScrollbar() ? "" : "none");
  },
  _isHidden: function() {
    return this.option("visibilityMode") === SCROLLBAR_VISIBLE.never;
  },
  _needScrollbar: function() {
    return !this._isHidden() && this._baseContainerToContentRatio < 1;
  },
  containerToContentRatio: function() {
    return this._realContainerToContentRatio;
  },
  _normalizeSize: function(size) {
    return isPlainObject(size) ? size[this._dimension] || 0 : size;
  },
  _clean: function() {
    this.callBase();
    if (this === activeScrollbar) {
      activeScrollbar = null;
    }
    events_engine_default.off(this._$thumb, "." + SCROLLBAR);
  },
  _optionChanged: function(args) {
    if (this._isHidden()) {
      return;
    }
    switch (args.name) {
      case "containerSize":
      case "contentSize":
        this.option()[args.name] = this._normalizeSize(args.value);
        this._update();
        break;
      case "baseContentSize":
      case "baseContainerSize":
        this._update();
        break;
      case "visibilityMode":
      case "direction":
        this._invalidate();
        break;
      case "scaleRatio":
        this._update();
        break;
      default:
        this.callBase.apply(this, arguments);
    }
  },
  update: deferRenderer(function() {
    this._adjustVisibility() && this.option("visible", true);
  })
});
ready_callbacks_default.add(function() {
  events_engine_default.subscribeGlobal(dom_adapter_default.getDocument(), addNamespace2(pointer_default.up, SCROLLBAR), function() {
    if (activeScrollbar) {
      activeScrollbar.feedbackOff();
    }
  });
});
var ui_scrollbar_default = Scrollbar;

// node_modules/devextreme/esm/ui/scroll_view/ui.scrollable.simulated.js
var SCROLLABLE_SIMULATED = "dxSimulatedScrollable";
var SCROLLABLE_STRATEGY = "dxScrollableStrategy";
var SCROLLABLE_SIMULATED_CURSOR = SCROLLABLE_SIMULATED + "Cursor";
var SCROLLABLE_SIMULATED_KEYBOARD = SCROLLABLE_SIMULATED + "Keyboard";
var SCROLLABLE_SIMULATED_CLASS2 = "dx-scrollable-simulated";
var SCROLLABLE_SCROLLBARS_ALWAYSVISIBLE = "dx-scrollable-scrollbars-alwaysvisible";
var SCROLLABLE_SCROLLBAR_CLASS2 = "dx-scrollable-scrollbar";
var VERTICAL = "vertical";
var HORIZONTAL2 = "horizontal";
var ACCELERATION = 0.92;
var OUT_BOUNDS_ACCELERATION = 0.5;
var MIN_VELOCITY_LIMIT = 1;
var FRAME_DURATION = Math.round(1e3 / 60);
var SCROLL_LINE_HEIGHT = 40;
var VALIDATE_WHEEL_TIMEOUT = 500;
var BOUNCE_MIN_VELOCITY_LIMIT = MIN_VELOCITY_LIMIT / 5;
var BOUNCE_DURATION = 400;
var BOUNCE_FRAMES = BOUNCE_DURATION / FRAME_DURATION;
var BOUNCE_ACCELERATION_SUM = (1 - Math.pow(ACCELERATION, BOUNCE_FRAMES)) / (1 - ACCELERATION);
var KEY_CODES = {
  PAGE_UP: "pageUp",
  PAGE_DOWN: "pageDown",
  END: "end",
  HOME: "home",
  LEFT: "leftArrow",
  UP: "upArrow",
  RIGHT: "rightArrow",
  DOWN: "downArrow",
  TAB: "tab"
};
var InertiaAnimator = animator_default.inherit({
  ctor: function(scroller) {
    this.callBase();
    this.scroller = scroller;
  },
  VELOCITY_LIMIT: MIN_VELOCITY_LIMIT,
  _isFinished: function() {
    return Math.abs(this.scroller._velocity) <= this.VELOCITY_LIMIT;
  },
  _step: function() {
    this.scroller._scrollStep(this.scroller._velocity);
    this.scroller._velocity *= this._acceleration();
  },
  _acceleration: function() {
    return this.scroller._inBounds() ? ACCELERATION : OUT_BOUNDS_ACCELERATION;
  },
  _complete: function() {
    this.scroller._scrollComplete();
  }
});
var BounceAnimator = InertiaAnimator.inherit({
  VELOCITY_LIMIT: BOUNCE_MIN_VELOCITY_LIMIT,
  _isFinished: function() {
    return this.scroller._crossBoundOnNextStep() || this.callBase();
  },
  _acceleration: function() {
    return ACCELERATION;
  },
  _complete: function() {
    this.scroller._move(this.scroller._bounceLocation);
    this.callBase();
  }
});
var Scroller = class_default.inherit({
  ctor: function(options2) {
    this._initOptions(options2);
    this._initAnimators();
    this._initScrollbar();
  },
  _initOptions: function(options2) {
    this._location = 0;
    this._topReached = false;
    this._bottomReached = false;
    this._axis = options2.direction === HORIZONTAL2 ? "x" : "y";
    this._prop = options2.direction === HORIZONTAL2 ? "left" : "top";
    this._dimension = options2.direction === HORIZONTAL2 ? "width" : "height";
    this._scrollProp = options2.direction === HORIZONTAL2 ? "scrollLeft" : "scrollTop";
    each(options2, (optionName, optionValue) => {
      this["_" + optionName] = optionValue;
    });
  },
  _initAnimators: function() {
    this._inertiaAnimator = new InertiaAnimator(this);
    this._bounceAnimator = new BounceAnimator(this);
  },
  _initScrollbar: function() {
    this._scrollbar = new ui_scrollbar_default(renderer_default("<div>").appendTo(this._$container), {
      direction: this._direction,
      visible: this._scrollByThumb,
      visibilityMode: this._visibilityModeNormalize(this._scrollbarVisible),
      expandable: this._scrollByThumb
    });
    this._$scrollbar = this._scrollbar.$element();
  },
  _visibilityModeNormalize: function(mode) {
    return true === mode ? "onScroll" : false === mode ? "never" : mode;
  },
  _scrollStep: function(delta) {
    var prevLocation = this._location;
    this._location += delta;
    this._suppressBounce();
    this._move();
    if (Math.abs(prevLocation - this._location) < 1) {
      return;
    }
    events_engine_default.triggerHandler(this._$container, {
      type: "scroll"
    });
  },
  _suppressBounce: function() {
    if (this._bounceEnabled || this._inBounds(this._location)) {
      return;
    }
    this._velocity = 0;
    this._location = this._boundLocation();
  },
  _boundLocation: function(location) {
    location = void 0 !== location ? location : this._location;
    return Math.max(Math.min(location, this._maxOffset), this._minOffset);
  },
  _move: function(location) {
    this._location = void 0 !== location ? location * this._getScaleRatio() : this._location;
    this._moveContent();
    this._moveScrollbar();
  },
  _moveContent: function() {
    var location = this._location;
    this._$container[this._scrollProp](-location / this._getScaleRatio());
    this._moveContentByTranslator(location);
  },
  _getScaleRatio: function() {
    if (hasWindow() && !this._scaleRatio) {
      var element = this._$element.get(0);
      var realDimension = this._getRealDimension(element, this._dimension);
      var baseDimension = this._getBaseDimension(element, this._dimension);
      this._scaleRatio = Math.round(realDimension / baseDimension * 100) / 100;
    }
    return this._scaleRatio || 1;
  },
  _getRealDimension: function(element, dimension) {
    return Math.round(getBoundingRect(element)[dimension]);
  },
  _getBaseDimension: function(element, dimension) {
    var dimensionName = "offset" + titleize(dimension);
    return element[dimensionName];
  },
  _moveContentByTranslator: function(location) {
    var translateOffset;
    var minOffset = -this._maxScrollPropValue;
    if (location > 0) {
      translateOffset = location;
    } else if (location <= minOffset) {
      translateOffset = location - minOffset;
    } else {
      translateOffset = location % 1;
    }
    if (this._translateOffset === translateOffset) {
      return;
    }
    var targetLocation = {};
    targetLocation[this._prop] = translateOffset;
    this._translateOffset = translateOffset;
    if (0 === translateOffset) {
      resetPosition(this._$content);
      return;
    }
    move(this._$content, targetLocation);
  },
  _moveScrollbar: function() {
    this._scrollbar.moveTo(this._location);
  },
  _scrollComplete: function() {
    if (this._inBounds()) {
      this._hideScrollbar();
      if (this._completeDeferred) {
        this._completeDeferred.resolve();
      }
    }
    this._scrollToBounds();
  },
  _scrollToBounds: function() {
    if (this._inBounds()) {
      return;
    }
    this._bounceAction();
    this._setupBounce();
    this._bounceAnimator.start();
  },
  _setupBounce: function() {
    var boundLocation = this._bounceLocation = this._boundLocation();
    var bounceDistance = boundLocation - this._location;
    this._velocity = bounceDistance / BOUNCE_ACCELERATION_SUM;
  },
  _inBounds: function(location) {
    location = void 0 !== location ? location : this._location;
    return this._boundLocation(location) === location;
  },
  _crossBoundOnNextStep: function() {
    var location = this._location;
    var nextLocation = location + this._velocity;
    return location < this._minOffset && nextLocation >= this._minOffset || location > this._maxOffset && nextLocation <= this._maxOffset;
  },
  _initHandler: function(e) {
    this._stopScrolling();
    this._prepareThumbScrolling(e);
  },
  _stopScrolling: deferRenderer(function() {
    this._hideScrollbar();
    this._inertiaAnimator.stop();
    this._bounceAnimator.stop();
  }),
  _prepareThumbScrolling: function(e) {
    if (isDxMouseWheelEvent(e.originalEvent)) {
      return;
    }
    var $target = renderer_default(e.originalEvent.target);
    var scrollbarClicked = this._isScrollbar($target);
    if (scrollbarClicked) {
      this._moveToMouseLocation(e);
    }
    this._thumbScrolling = scrollbarClicked || this._isThumb($target);
    this._crossThumbScrolling = !this._thumbScrolling && this._isAnyThumbScrolling($target);
    if (this._thumbScrolling) {
      this._scrollbar.feedbackOn();
    }
  },
  _isThumbScrollingHandler: function($target) {
    return this._isThumb($target);
  },
  _moveToMouseLocation: function(e) {
    var mouseLocation = e["page" + this._axis.toUpperCase()] - this._$element.offset()[this._prop];
    var location = this._location + mouseLocation / this._containerToContentRatio() - getHeight(this._$container) / 2;
    this._scrollStep(-Math.round(location));
  },
  _startHandler: function() {
    this._showScrollbar();
  },
  _moveHandler: function(delta) {
    if (this._crossThumbScrolling) {
      return;
    }
    if (this._thumbScrolling) {
      delta[this._axis] = -Math.round(delta[this._axis] / this._containerToContentRatio());
    }
    this._scrollBy(delta);
  },
  _scrollBy: function(delta) {
    delta = delta[this._axis];
    if (!this._inBounds()) {
      delta *= OUT_BOUNDS_ACCELERATION;
    }
    this._scrollStep(delta);
  },
  _scrollByHandler: function(delta) {
    this._scrollBy(delta);
    this._scrollComplete();
  },
  _containerToContentRatio: function() {
    return this._scrollbar.containerToContentRatio();
  },
  _endHandler: function(velocity) {
    this._completeDeferred = new Deferred();
    this._velocity = velocity[this._axis];
    this._inertiaHandler();
    this._resetThumbScrolling();
    return this._completeDeferred.promise();
  },
  _inertiaHandler: function() {
    this._suppressInertia();
    this._inertiaAnimator.start();
  },
  _suppressInertia: function() {
    if (!this._inertiaEnabled || this._thumbScrolling) {
      this._velocity = 0;
    }
  },
  _resetThumbScrolling: function() {
    this._thumbScrolling = false;
    this._crossThumbScrolling = false;
  },
  _stopHandler: function() {
    if (this._thumbScrolling) {
      this._scrollComplete();
    }
    this._resetThumbScrolling();
    this._scrollToBounds();
  },
  _disposeHandler: function() {
    this._stopScrolling();
    this._$scrollbar.remove();
  },
  _updateHandler: function() {
    this._update();
    this._moveToBounds();
  },
  _update: function() {
    this._stopScrolling();
    return deferUpdate(() => {
      this._resetScaleRatio();
      this._updateLocation();
      this._updateBounds();
      this._updateScrollbar();
      deferRender(() => {
        this._moveScrollbar();
        this._scrollbar.update();
      });
    });
  },
  _resetScaleRatio: function() {
    this._scaleRatio = null;
  },
  _updateLocation: function() {
    this._location = (locate(this._$content)[this._prop] - this._$container[this._scrollProp]()) * this._getScaleRatio();
  },
  _updateBounds: function() {
    this._maxOffset = this._getMaxOffset();
    this._minOffset = this._getMinOffset();
  },
  _getMaxOffset: function() {
    return 0;
  },
  _getMinOffset: function() {
    this._maxScrollPropValue = Math.max(this._contentSize() - this._containerSize(), 0);
    return -this._maxScrollPropValue;
  },
  _updateScrollbar: deferUpdater(function() {
    var containerSize = this._containerSize();
    var contentSize = this._contentSize();
    var baseContainerSize = this._getBaseDimension(this._$container.get(0), this._dimension);
    var baseContentSize = this._getBaseDimension(this._$content.get(0), this._dimension);
    deferRender(() => {
      this._scrollbar.option({
        containerSize,
        contentSize,
        baseContainerSize,
        baseContentSize,
        scaleRatio: this._getScaleRatio()
      });
    });
  }),
  _moveToBounds: deferRenderer(deferUpdater(deferRenderer(function() {
    var location = this._boundLocation();
    var locationChanged = location !== this._location;
    this._location = location;
    this._move();
    if (locationChanged) {
      this._scrollAction();
    }
  }))),
  _createActionsHandler: function(actions) {
    this._scrollAction = actions.scroll;
    this._bounceAction = actions.bounce;
  },
  _showScrollbar: function() {
    this._scrollbar.option("visible", true);
  },
  _hideScrollbar: function() {
    this._scrollbar.option("visible", false);
  },
  _containerSize: function() {
    return this._getRealDimension(this._$container.get(0), this._dimension);
  },
  _contentSize: function() {
    var isOverflowHidden = "hidden" === this._$content.css("overflow" + this._axis.toUpperCase());
    var contentSize = this._getRealDimension(this._$content.get(0), this._dimension);
    if (!isOverflowHidden) {
      var containerScrollSize = this._$content[0]["scroll" + titleize(this._dimension)] * this._getScaleRatio();
      contentSize = Math.max(containerScrollSize, contentSize);
    }
    return contentSize;
  },
  _validateEvent: function(e) {
    var $target = renderer_default(e.originalEvent.target);
    return this._isThumb($target) || this._isScrollbar($target);
  },
  _isThumb: function($element) {
    return this._scrollByThumb && this._scrollbar.isThumb($element);
  },
  _isScrollbar: function($element) {
    return this._scrollByThumb && $element && $element.is(this._$scrollbar);
  },
  _reachedMin: function() {
    return Math.round(this._location - this._minOffset) <= 0;
  },
  _reachedMax: function() {
    return Math.round(this._location - this._maxOffset) >= 0;
  },
  _cursorEnterHandler: function() {
    this._resetScaleRatio();
    this._updateScrollbar();
    this._scrollbar.cursorEnter();
  },
  _cursorLeaveHandler: function() {
    this._scrollbar.cursorLeave();
  },
  dispose: noop2
});
var hoveredScrollable;
var activeScrollable;
var SimulatedStrategy = class_default.inherit({
  ctor: function(scrollable) {
    this._init(scrollable);
  },
  _init: function(scrollable) {
    this._component = scrollable;
    this._$element = scrollable.$element();
    this._$container = renderer_default(scrollable.container());
    this._$wrapper = scrollable._$wrapper;
    this._$content = scrollable.$content();
    this.option = scrollable.option.bind(scrollable);
    this._createActionByOption = scrollable._createActionByOption.bind(scrollable);
    this._isLocked = scrollable._isLocked.bind(scrollable);
    this._isDirection = scrollable._isDirection.bind(scrollable);
    this._allowedDirection = scrollable._allowedDirection.bind(scrollable);
    this._getMaxOffset = scrollable._getMaxOffset.bind(scrollable);
  },
  render: function() {
    this._$element.addClass(SCROLLABLE_SIMULATED_CLASS2);
    this._createScrollers();
    if (this.option("useKeyboard")) {
      this._$container.prop("tabIndex", 0);
    }
    this._attachKeyboardHandler();
    this._attachCursorHandlers();
  },
  _createScrollers: function() {
    this._scrollers = {};
    if (this._isDirection(HORIZONTAL2)) {
      this._createScroller(HORIZONTAL2);
    }
    if (this._isDirection(VERTICAL)) {
      this._createScroller(VERTICAL);
    }
    this._$element.toggleClass(SCROLLABLE_SCROLLBARS_ALWAYSVISIBLE, "always" === this.option("showScrollbar"));
  },
  _createScroller: function(direction) {
    this._scrollers[direction] = new Scroller(this._scrollerOptions(direction));
  },
  _scrollerOptions: function(direction) {
    return {
      direction,
      $content: this._$content,
      $container: this._$container,
      $wrapper: this._$wrapper,
      $element: this._$element,
      scrollByThumb: this.option("scrollByThumb"),
      scrollbarVisible: this.option("showScrollbar"),
      bounceEnabled: this.option("bounceEnabled"),
      inertiaEnabled: this.option("inertiaEnabled"),
      isAnyThumbScrolling: this._isAnyThumbScrolling.bind(this)
    };
  },
  _applyScaleRatio: function(targetLocation) {
    for (var direction in this._scrollers) {
      var prop = this._getPropByDirection(direction);
      if (isDefined(targetLocation[prop])) {
        var scroller = this._scrollers[direction];
        targetLocation[prop] *= scroller._getScaleRatio();
      }
    }
    return targetLocation;
  },
  _isAnyThumbScrolling: function($target) {
    var result2 = false;
    this._eventHandler("isThumbScrolling", $target).done(function(isThumbScrollingVertical, isThumbScrollingHorizontal) {
      result2 = isThumbScrollingVertical || isThumbScrollingHorizontal;
    });
    return result2;
  },
  handleInit: function(e) {
    this._suppressDirections(e);
    this._eventForUserAction = e;
    this._eventHandler("init", e);
  },
  _suppressDirections: function(e) {
    if (isDxMouseWheelEvent(e.originalEvent)) {
      this._prepareDirections(true);
      return;
    }
    this._prepareDirections();
    this._eachScroller(function(scroller, direction) {
      var $target = renderer_default(e.originalEvent.target);
      var isValid = scroller._validateEvent(e) || this.option("scrollByContent") && this._isContent($target);
      this._validDirections[direction] = isValid;
    });
  },
  _isContent: function($element) {
    return !!$element.closest(this._$element).length;
  },
  _prepareDirections: function(value2) {
    value2 = value2 || false;
    this._validDirections = {};
    this._validDirections[HORIZONTAL2] = value2;
    this._validDirections[VERTICAL] = value2;
  },
  _eachScroller: function(callback) {
    callback = callback.bind(this);
    each(this._scrollers, function(direction, scroller) {
      callback(scroller, direction);
    });
  },
  handleStart: function(e) {
    this._eventForUserAction = e;
    this._eventHandler("start").done(this._startAction);
  },
  _saveActive: function() {
    activeScrollable = this;
  },
  _resetActive: function() {
    if (activeScrollable === this) {
      activeScrollable = null;
    }
  },
  handleMove: function(e) {
    if (this._isLocked()) {
      e.cancel = true;
      this._resetActive();
      return;
    }
    this._saveActive();
    e.preventDefault && e.preventDefault();
    this._adjustDistance(e, e.delta);
    this._eventForUserAction = e;
    this._eventHandler("move", e.delta);
  },
  _adjustDistance: function(e, distance) {
    distance.x *= this._validDirections[HORIZONTAL2];
    distance.y *= this._validDirections[VERTICAL];
    var devicePixelRatio = this._tryGetDevicePixelRatio();
    if (devicePixelRatio && isDxMouseWheelEvent(e.originalEvent)) {
      distance.x = Math.round(distance.x / devicePixelRatio * 100) / 100;
      distance.y = Math.round(distance.y / devicePixelRatio * 100) / 100;
    }
  },
  _tryGetDevicePixelRatio: function() {
    if (hasWindow()) {
      return getWindow().devicePixelRatio;
    }
  },
  handleEnd: function(e) {
    this._resetActive();
    this._refreshCursorState(e.originalEvent && e.originalEvent.target);
    this._adjustDistance(e, e.velocity);
    this._eventForUserAction = e;
    return this._eventHandler("end", e.velocity).done(this._endAction);
  },
  handleCancel: function(e) {
    this._resetActive();
    this._eventForUserAction = e;
    return this._eventHandler("end", {
      x: 0,
      y: 0
    });
  },
  handleStop: function() {
    this._resetActive();
    this._eventHandler("stop");
  },
  handleScroll: function() {
    this._updateRtlConfig();
    this._scrollAction();
  },
  _attachKeyboardHandler: function() {
    events_engine_default.off(this._$element, ".".concat(SCROLLABLE_SIMULATED_KEYBOARD));
    if (!this.option("disabled") && this.option("useKeyboard")) {
      events_engine_default.on(this._$element, addNamespace2("keydown", SCROLLABLE_SIMULATED_KEYBOARD), this._keyDownHandler.bind(this));
    }
  },
  _keyDownHandler: function(e) {
    clearTimeout(this._updateHandlerTimeout);
    this._updateHandlerTimeout = setTimeout(() => {
      if (normalizeKeyName(e) === KEY_CODES.TAB) {
        this._eachScroller((scroller) => {
          scroller._updateHandler();
        });
      }
    });
    if (!this._$container.is(dom_adapter_default.getActiveElement(this._$container.get(0)))) {
      return;
    }
    var handled = true;
    switch (normalizeKeyName(e)) {
      case KEY_CODES.DOWN:
        this._scrollByLine({
          y: 1
        });
        break;
      case KEY_CODES.UP:
        this._scrollByLine({
          y: -1
        });
        break;
      case KEY_CODES.RIGHT:
        this._scrollByLine({
          x: 1
        });
        break;
      case KEY_CODES.LEFT:
        this._scrollByLine({
          x: -1
        });
        break;
      case KEY_CODES.PAGE_DOWN:
        this._scrollByPage(1);
        break;
      case KEY_CODES.PAGE_UP:
        this._scrollByPage(-1);
        break;
      case KEY_CODES.HOME:
        this._scrollToHome();
        break;
      case KEY_CODES.END:
        this._scrollToEnd();
        break;
      default:
        handled = false;
    }
    if (handled) {
      e.stopPropagation();
      e.preventDefault();
    }
  },
  _scrollByLine: function(lines) {
    var devicePixelRatio = this._tryGetDevicePixelRatio();
    var scrollOffset = SCROLL_LINE_HEIGHT;
    if (devicePixelRatio) {
      scrollOffset = Math.abs(scrollOffset / devicePixelRatio * 100) / 100;
    }
    this.scrollBy({
      top: (lines.y || 0) * -scrollOffset,
      left: (lines.x || 0) * -scrollOffset
    });
  },
  _scrollByPage: function(page) {
    var prop = this._wheelProp();
    var dimension = this._dimensionByProp(prop);
    var distance = {};
    var getter = "width" === dimension ? getWidth : getHeight;
    distance[prop] = page * -getter(this._$container);
    this.scrollBy(distance);
  },
  _dimensionByProp: function(prop) {
    return "left" === prop ? "width" : "height";
  },
  _getPropByDirection: function(direction) {
    return direction === HORIZONTAL2 ? "left" : "top";
  },
  _scrollToHome: function() {
    var prop = this._wheelProp();
    var distance = {};
    distance[prop] = 0;
    this._component.scrollTo(distance);
  },
  _scrollToEnd: function() {
    var prop = this._wheelProp();
    var dimension = this._dimensionByProp(prop);
    var distance = {};
    var getter = "width" === dimension ? getWidth : getHeight;
    distance[prop] = getter(this._$content) - getter(this._$container);
    this._component.scrollTo(distance);
  },
  createActions: function() {
    this._startAction = this._createActionHandler("onStart");
    this._endAction = this._createActionHandler("onEnd");
    this._updateAction = this._createActionHandler("onUpdated");
    this._createScrollerActions();
  },
  _createScrollerActions: function() {
    this._scrollAction = this._createActionHandler("onScroll");
    this._bounceAction = this._createActionHandler("onBounce");
    this._eventHandler("createActions", {
      scroll: this._scrollAction,
      bounce: this._bounceAction
    });
  },
  _createActionHandler: function(optionName) {
    var actionHandler = this._createActionByOption(optionName);
    return () => {
      actionHandler(extend(this._createActionArgs(), arguments));
    };
  },
  _createActionArgs: function() {
    var {
      horizontal: scrollerX,
      vertical: scrollerY
    } = this._scrollers;
    var offset2 = this._getScrollOffset();
    this._scrollOffset = {
      top: scrollerY && offset2.top,
      left: scrollerX && offset2.left
    };
    return {
      event: this._eventForUserAction,
      scrollOffset: this._scrollOffset,
      reachedLeft: scrollerX && scrollerX._reachedMax(),
      reachedRight: scrollerX && scrollerX._reachedMin(),
      reachedTop: scrollerY && scrollerY._reachedMax(),
      reachedBottom: scrollerY && scrollerY._reachedMin()
    };
  },
  _getScrollOffset() {
    return {
      top: -this.location().top,
      left: -this.location().left
    };
  },
  _eventHandler: function(eventName) {
    var args = [].slice.call(arguments).slice(1);
    var deferreds = map(this._scrollers, (scroller) => scroller["_" + eventName + "Handler"].apply(scroller, args));
    return when.apply(renderer_default, deferreds).promise();
  },
  location: function() {
    var location = locate(this._$content);
    location.top -= this._$container.scrollTop();
    location.left -= this._$container.scrollLeft();
    return location;
  },
  disabledChanged: function() {
    this._attachCursorHandlers();
  },
  _attachCursorHandlers: function() {
    events_engine_default.off(this._$element, ".".concat(SCROLLABLE_SIMULATED_CURSOR));
    if (!this.option("disabled") && this._isHoverMode()) {
      events_engine_default.on(this._$element, addNamespace2("mouseenter", SCROLLABLE_SIMULATED_CURSOR), this._cursorEnterHandler.bind(this));
      events_engine_default.on(this._$element, addNamespace2("mouseleave", SCROLLABLE_SIMULATED_CURSOR), this._cursorLeaveHandler.bind(this));
    }
  },
  _isHoverMode: function() {
    return "onHover" === this.option("showScrollbar");
  },
  _cursorEnterHandler: function(e) {
    e = e || {};
    e.originalEvent = e.originalEvent || {};
    if (activeScrollable || e.originalEvent._hoverHandled) {
      return;
    }
    if (hoveredScrollable) {
      hoveredScrollable._cursorLeaveHandler();
    }
    hoveredScrollable = this;
    this._eventHandler("cursorEnter");
    e.originalEvent._hoverHandled = true;
  },
  _cursorLeaveHandler: function(e) {
    if (hoveredScrollable !== this || activeScrollable === hoveredScrollable) {
      return;
    }
    this._eventHandler("cursorLeave");
    hoveredScrollable = null;
    this._refreshCursorState(e && e.relatedTarget);
  },
  _refreshCursorState: function(target) {
    if (!this._isHoverMode() && (!target || activeScrollable)) {
      return;
    }
    var $target = renderer_default(target);
    var $scrollable = $target.closest(".".concat(SCROLLABLE_SIMULATED_CLASS2, ":not(.dx-state-disabled)"));
    var targetScrollable = $scrollable.length && $scrollable.data(SCROLLABLE_STRATEGY);
    if (hoveredScrollable && hoveredScrollable !== targetScrollable) {
      hoveredScrollable._cursorLeaveHandler();
    }
    if (targetScrollable) {
      targetScrollable._cursorEnterHandler();
    }
  },
  update: function() {
    var result2 = this._eventHandler("update").done(this._updateAction);
    return when(result2, deferUpdate(() => {
      var allowedDirections = this._allowedDirections();
      deferRender(() => {
        var touchDirection = allowedDirections.vertical ? "pan-x" : "";
        touchDirection = allowedDirections.horizontal ? "pan-y" : touchDirection;
        touchDirection = allowedDirections.vertical && allowedDirections.horizontal ? "none" : touchDirection;
        this._$container.css("touchAction", touchDirection);
      });
      return when().promise();
    }));
  },
  _allowedDirections: function() {
    var bounceEnabled = this.option("bounceEnabled");
    var verticalScroller = this._scrollers[VERTICAL];
    var horizontalScroller = this._scrollers[HORIZONTAL2];
    return {
      vertical: verticalScroller && (verticalScroller._minOffset < 0 || bounceEnabled),
      horizontal: horizontalScroller && (horizontalScroller._minOffset < 0 || bounceEnabled)
    };
  },
  _updateBounds: function() {
    this._scrollers[HORIZONTAL2] && this._scrollers[HORIZONTAL2]._updateBounds();
  },
  _isHorizontalAndRtlEnabled: function() {
    return this.option("rtlEnabled") && this.option("direction") !== VERTICAL;
  },
  updateRtlPosition: function(needInitializeRtlConfig) {
    if (needInitializeRtlConfig) {
      this._rtlConfig = {
        scrollRight: 0,
        clientWidth: this._$container.get(0).clientWidth,
        windowPixelRatio: this._getWindowDevicePixelRatio()
      };
    }
    this._updateBounds();
    if (this._isHorizontalAndRtlEnabled()) {
      var scrollLeft = this._getMaxOffset().left - this._rtlConfig.scrollRight;
      if (scrollLeft <= 0) {
        scrollLeft = 0;
        this._rtlConfig.scrollRight = this._getMaxOffset().left;
      }
      if (this._getScrollOffset().left !== scrollLeft) {
        this._rtlConfig.skipUpdating = true;
        this._component.scrollTo({
          left: scrollLeft
        });
        this._rtlConfig.skipUpdating = false;
      }
    }
  },
  _updateRtlConfig: function() {
    if (this._isHorizontalAndRtlEnabled() && !this._rtlConfig.skipUpdating) {
      var {
        clientWidth,
        scrollLeft
      } = this._$container.get(0);
      var windowPixelRatio = this._getWindowDevicePixelRatio();
      if (this._rtlConfig.windowPixelRatio === windowPixelRatio && this._rtlConfig.clientWidth === clientWidth) {
        this._rtlConfig.scrollRight = this._getMaxOffset().left - scrollLeft;
      }
      this._rtlConfig.clientWidth = clientWidth;
      this._rtlConfig.windowPixelRatio = windowPixelRatio;
    }
  },
  _getWindowDevicePixelRatio: function() {
    return hasWindow() ? getWindow().devicePixelRatio : 1;
  },
  scrollBy: function(distance) {
    var verticalScroller = this._scrollers[VERTICAL];
    var horizontalScroller = this._scrollers[HORIZONTAL2];
    if (verticalScroller) {
      distance.top = verticalScroller._boundLocation(distance.top + verticalScroller._location) - verticalScroller._location;
    }
    if (horizontalScroller) {
      distance.left = horizontalScroller._boundLocation(distance.left + horizontalScroller._location) - horizontalScroller._location;
    }
    this._prepareDirections(true);
    this._startAction();
    this._eventHandler("scrollBy", {
      x: distance.left,
      y: distance.top
    });
    this._endAction();
    this._updateRtlConfig();
  },
  validate: function(e) {
    if (isDxMouseWheelEvent(e) && isCommandKeyPressed(e)) {
      return false;
    }
    if (this.option("disabled")) {
      return false;
    }
    if (this.option("bounceEnabled")) {
      return true;
    }
    return isDxMouseWheelEvent(e) ? this._validateWheel(e) : this._validateMove(e);
  },
  _validateWheel: function(e) {
    var scroller = this._scrollers[this._wheelDirection(e)];
    var reachedMin = scroller._reachedMin();
    var reachedMax = scroller._reachedMax();
    var contentGreaterThanContainer = !reachedMin || !reachedMax;
    var locatedNotAtBound = !reachedMin && !reachedMax;
    var scrollFromMin = reachedMin && e.delta > 0;
    var scrollFromMax = reachedMax && e.delta < 0;
    var validated = contentGreaterThanContainer && (locatedNotAtBound || scrollFromMin || scrollFromMax);
    validated = validated || void 0 !== this._validateWheelTimer;
    if (validated) {
      clearTimeout(this._validateWheelTimer);
      this._validateWheelTimer = setTimeout(() => {
        this._validateWheelTimer = void 0;
      }, VALIDATE_WHEEL_TIMEOUT);
    }
    return validated;
  },
  _validateMove: function(e) {
    if (!this.option("scrollByContent") && !renderer_default(e.target).closest(".".concat(SCROLLABLE_SCROLLBAR_CLASS2)).length) {
      return false;
    }
    return this._allowedDirection();
  },
  getDirection: function(e) {
    return isDxMouseWheelEvent(e) ? this._wheelDirection(e) : this._allowedDirection();
  },
  _wheelProp: function() {
    return this._wheelDirection() === HORIZONTAL2 ? "left" : "top";
  },
  _wheelDirection: function(e) {
    switch (this.option("direction")) {
      case HORIZONTAL2:
        return HORIZONTAL2;
      case VERTICAL:
        return VERTICAL;
      default:
        return e && e.shiftKey ? HORIZONTAL2 : VERTICAL;
    }
  },
  dispose: function() {
    this._resetActive();
    if (hoveredScrollable === this) {
      hoveredScrollable = null;
    }
    this._eventHandler("dispose");
    this._detachEventHandlers();
    this._$element.removeClass(SCROLLABLE_SIMULATED_CLASS2);
    this._eventForUserAction = null;
    clearTimeout(this._validateWheelTimer);
    clearTimeout(this._updateHandlerTimeout);
  },
  _detachEventHandlers: function() {
    events_engine_default.off(this._$element, ".".concat(SCROLLABLE_SIMULATED_CURSOR));
    events_engine_default.off(this._$container, ".".concat(SCROLLABLE_SIMULATED_KEYBOARD));
  }
});

// node_modules/devextreme/esm/ui/scroll_view/ui.scrollable.native.js
var SCROLLABLE_NATIVE = "dxNativeScrollable";
var SCROLLABLE_NATIVE_CLASS = "dx-scrollable-native";
var SCROLLABLE_SCROLLBAR_SIMULATED = "dx-scrollable-scrollbar-simulated";
var SCROLLABLE_SCROLLBARS_HIDDEN = "dx-scrollable-scrollbars-hidden";
var VERTICAL2 = "vertical";
var HORIZONTAL3 = "horizontal";
var HIDE_SCROLLBAR_TIMEOUT = 500;
var NativeStrategy = class_default.inherit({
  ctor: function(scrollable) {
    this._init(scrollable);
  },
  _init: function(scrollable) {
    this._component = scrollable;
    this._$element = scrollable.$element();
    this._$container = renderer_default(scrollable.container());
    this._$content = scrollable.$content();
    this._direction = scrollable.option("direction");
    this._useSimulatedScrollbar = scrollable.option("useSimulatedScrollbar");
    this.option = scrollable.option.bind(scrollable);
    this._createActionByOption = scrollable._createActionByOption.bind(scrollable);
    this._isLocked = scrollable._isLocked.bind(scrollable);
    this._isDirection = scrollable._isDirection.bind(scrollable);
    this._allowedDirection = scrollable._allowedDirection.bind(scrollable);
    this._getMaxOffset = scrollable._getMaxOffset.bind(scrollable);
    this._isRtlNativeStrategy = scrollable._isRtlNativeStrategy.bind(scrollable);
  },
  render: function() {
    var device = devices_default.real();
    var deviceType = device.platform;
    this._$element.addClass(SCROLLABLE_NATIVE_CLASS).addClass(SCROLLABLE_NATIVE_CLASS + "-" + deviceType).toggleClass(SCROLLABLE_SCROLLBARS_HIDDEN, !this._isScrollbarVisible());
    if (this._isScrollbarVisible() && this._useSimulatedScrollbar) {
      this._renderScrollbars();
    }
  },
  updateRtlPosition: function(isFirstRender) {
    if (isFirstRender && this.option("rtlEnabled")) {
      if (this._isScrollbarVisible() && this._useSimulatedScrollbar) {
        this._moveScrollbars();
      }
    }
  },
  _renderScrollbars: function() {
    this._scrollbars = {};
    this._hideScrollbarTimeout = 0;
    this._$element.addClass(SCROLLABLE_SCROLLBAR_SIMULATED);
    this._renderScrollbar(VERTICAL2);
    this._renderScrollbar(HORIZONTAL3);
  },
  _renderScrollbar: function(direction) {
    if (!this._isDirection(direction)) {
      return;
    }
    this._scrollbars[direction] = new ui_scrollbar_default(renderer_default("<div>").appendTo(this._$element), {
      direction,
      expandable: this._component.option("scrollByThumb")
    });
  },
  handleInit: noop2,
  handleStart: noop2,
  handleMove: function(e) {
    if (this._isLocked()) {
      e.cancel = true;
      return;
    }
    if (this._allowedDirection()) {
      e.originalEvent.isScrollingEvent = true;
    }
  },
  handleEnd: noop2,
  handleCancel: noop2,
  handleStop: noop2,
  _eachScrollbar: function(callback) {
    callback = callback.bind(this);
    each(this._scrollbars || {}, function(direction, scrollbar) {
      callback(scrollbar, direction);
    });
  },
  createActions: function() {
    this._scrollAction = this._createActionByOption("onScroll");
    this._updateAction = this._createActionByOption("onUpdated");
  },
  _createActionArgs: function() {
    var {
      left,
      top
    } = this.location();
    return {
      event: this._eventForUserAction,
      scrollOffset: this._getScrollOffset(),
      reachedLeft: this._isRtlNativeStrategy() ? this._isReachedRight(-left) : this._isReachedLeft(left),
      reachedRight: this._isRtlNativeStrategy() ? this._isReachedLeft(-Math.abs(left)) : this._isReachedRight(left),
      reachedTop: this._isDirection(VERTICAL2) ? Math.round(top) >= 0 : void 0,
      reachedBottom: this._isDirection(VERTICAL2) ? Math.round(Math.abs(top) - this._getMaxOffset().top) >= 0 : void 0
    };
  },
  _getScrollOffset: function() {
    var {
      top,
      left
    } = this.location();
    return {
      top: -top,
      left: this._normalizeOffsetLeft(-left)
    };
  },
  _normalizeOffsetLeft(scrollLeft) {
    if (this._isRtlNativeStrategy()) {
      return this._getMaxOffset().left + scrollLeft;
    }
    return scrollLeft;
  },
  _isReachedLeft: function(left) {
    return this._isDirection(HORIZONTAL3) ? Math.round(left) >= 0 : void 0;
  },
  _isReachedRight: function(left) {
    return this._isDirection(HORIZONTAL3) ? Math.round(Math.abs(left) - this._getMaxOffset().left) >= 0 : void 0;
  },
  _isScrollbarVisible: function() {
    var {
      showScrollbar
    } = this.option();
    return "never" !== showScrollbar && false !== showScrollbar;
  },
  handleScroll: function(e) {
    this._eventForUserAction = e;
    this._moveScrollbars();
    this._scrollAction(this._createActionArgs());
  },
  _moveScrollbars: function() {
    var {
      top,
      left
    } = this._getScrollOffset();
    this._eachScrollbar(function(scrollbar) {
      scrollbar.moveTo({
        top: -top,
        left: -left
      });
      scrollbar.option("visible", true);
    });
    this._hideScrollbars();
  },
  _hideScrollbars: function() {
    clearTimeout(this._hideScrollbarTimeout);
    this._hideScrollbarTimeout = setTimeout((function() {
      this._eachScrollbar(function(scrollbar) {
        scrollbar.option("visible", false);
      });
    }).bind(this), HIDE_SCROLLBAR_TIMEOUT);
  },
  location: function() {
    return {
      left: -this._$container.scrollLeft(),
      top: -this._$container.scrollTop()
    };
  },
  disabledChanged: noop2,
  update: function() {
    this._update();
    this._updateAction(this._createActionArgs());
  },
  _update: function() {
    this._updateDimensions();
    this._updateScrollbars();
  },
  _updateDimensions: function() {
    this._containerSize = {
      height: getHeight(this._$container),
      width: getWidth(this._$container)
    };
    this._componentContentSize = {
      height: getHeight(this._component.$content()),
      width: getWidth(this._component.$content())
    };
    this._contentSize = {
      height: getHeight(this._$content),
      width: getWidth(this._$content)
    };
  },
  _updateScrollbars: function() {
    this._eachScrollbar(function(scrollbar, direction) {
      var dimension = direction === VERTICAL2 ? "height" : "width";
      scrollbar.option({
        containerSize: this._containerSize[dimension],
        contentSize: this._componentContentSize[dimension]
      });
      scrollbar.update();
    });
  },
  _allowedDirections: function() {
    return {
      vertical: this._isDirection(VERTICAL2) && this._contentSize.height > this._containerSize.height,
      horizontal: this._isDirection(HORIZONTAL3) && this._contentSize.width > this._containerSize.width
    };
  },
  dispose: function() {
    var className = this._$element.get(0).className;
    var scrollableNativeRegexp = new RegExp(SCROLLABLE_NATIVE_CLASS + "\\S*", "g");
    if (scrollableNativeRegexp.test(className)) {
      this._$element.removeClass(className.match(scrollableNativeRegexp).join(" "));
    }
    events_engine_default.off(this._$element, "." + SCROLLABLE_NATIVE);
    events_engine_default.off(this._$container, "." + SCROLLABLE_NATIVE);
    this._removeScrollbars();
    clearTimeout(this._hideScrollbarTimeout);
  },
  _removeScrollbars: function() {
    this._eachScrollbar(function(scrollbar) {
      scrollbar.$element().remove();
    });
  },
  scrollBy: function(distance) {
    var location = this.location();
    this._$container.scrollTop(Math.round(-location.top - distance.top));
    this._$container.scrollLeft(Math.round(-location.left - distance.left));
  },
  validate: function(e) {
    if (this.option("disabled")) {
      return false;
    }
    if (isDxMouseWheelEvent(e) && this._isScrolledInMaxDirection(e)) {
      return false;
    }
    return !!this._allowedDirection();
  },
  _isScrolledInMaxDirection(e) {
    var container = this._$container.get(0);
    var result2;
    if (e.delta > 0) {
      result2 = e.shiftKey ? !container.scrollLeft : !container.scrollTop;
    } else if (e.shiftKey) {
      result2 = container.scrollLeft >= this._getMaxOffset().left;
    } else {
      result2 = container.scrollTop >= this._getMaxOffset().top;
    }
    return result2;
  },
  getDirection: function() {
    return this._allowedDirection();
  }
});
var ui_scrollable_native_default = NativeStrategy;

// node_modules/devextreme/esm/ui/scroll_view/ui.scrollable.device.js
var deviceDependentOptions = function() {
  return [{
    device: function() {
      return !nativeScrolling;
    },
    options: {
      useNative: false
    }
  }, {
    device: function(_device) {
      return !devices_default.isSimulator() && "desktop" === devices_default.real().deviceType && "generic" === _device.platform;
    },
    options: {
      bounceEnabled: false,
      scrollByThumb: true,
      scrollByContent: touch,
      showScrollbar: "onHover"
    }
  }];
};

// node_modules/devextreme/esm/renovation/ui/scroll_view/utils/get_relative_offset.js
function getRelativeOffset(targetElementClass, sourceElement) {
  var offset2 = {
    left: 0,
    top: 0
  };
  var element = sourceElement;
  while (null !== (_element = element) && void 0 !== _element && _element.offsetParent && !element.classList.contains(targetElementClass)) {
    var _element;
    var parentElement = element.offsetParent;
    var elementRect = element.getBoundingClientRect();
    var parentElementRect = parentElement.getBoundingClientRect();
    offset2.left += elementRect.left - parentElementRect.left;
    offset2.top += elementRect.top - parentElementRect.top;
    element = element.offsetParent;
  }
  return offset2;
}

// node_modules/devextreme/esm/renovation/ui/scroll_view/common/consts.js
var DIRECTION_VERTICAL = "vertical";
var DIRECTION_HORIZONTAL = "horizontal";
var DIRECTION_BOTH = "both";
var SCROLLABLE_CONTENT_CLASS = "dx-scrollable-content";

// node_modules/devextreme/esm/renovation/ui/scroll_view/utils/get_element_location_internal.js
function getElementLocationInternal(targetElement, direction, containerElement, scrollOffset, offset2) {
  var additionalOffset = _extends({
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  }, offset2);
  var isVertical = direction === DIRECTION_VERTICAL;
  var prop = isVertical ? "top" : "left";
  var inverseProp = isVertical ? "bottom" : "right";
  var dimension = isVertical ? "height" : "width";
  var containerOffsetSize = containerElement["offset".concat(titleize(dimension))];
  var containerClientSize = containerElement["client".concat(titleize(dimension))];
  var containerSize = containerElement.getBoundingClientRect()[dimension];
  var elementSize3 = targetElement.getBoundingClientRect()[dimension];
  var scale = 1;
  if (Math.abs(containerSize - containerOffsetSize) > 1) {
    scale = containerSize / containerOffsetSize;
  }
  var relativeElementOffset = getRelativeOffset(SCROLLABLE_CONTENT_CLASS, targetElement)[prop] / scale;
  var containerScrollOffset = scrollOffset[prop];
  var relativeStartOffset = containerScrollOffset - relativeElementOffset + additionalOffset[prop];
  var relativeEndOffset = containerScrollOffset - relativeElementOffset - elementSize3 / scale + containerClientSize - additionalOffset[inverseProp];
  if (relativeStartOffset <= 0 && relativeEndOffset >= 0) {
    return containerScrollOffset;
  }
  return containerScrollOffset - (Math.abs(relativeStartOffset) > Math.abs(relativeEndOffset) ? relativeEndOffset : relativeStartOffset);
}

// node_modules/devextreme/esm/ui/scroll_view/ui.scrollable.old.js
var SCROLLABLE = "dxScrollable";
var SCROLLABLE_STRATEGY2 = "dxScrollableStrategy";
var SCROLLABLE_CLASS = "dx-scrollable";
var SCROLLABLE_DISABLED_CLASS = "dx-scrollable-disabled";
var SCROLLABLE_CONTAINER_CLASS = "dx-scrollable-container";
var SCROLLABLE_WRAPPER_CLASS = "dx-scrollable-wrapper";
var SCROLLABLE_CONTENT_CLASS2 = "dx-scrollable-content";
var VERTICAL3 = "vertical";
var HORIZONTAL4 = "horizontal";
var BOTH = "both";
var Scrollable = dom_component_default.inherit({
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      disabled: false,
      onScroll: null,
      direction: VERTICAL3,
      showScrollbar: "onScroll",
      useNative: true,
      bounceEnabled: true,
      scrollByContent: true,
      scrollByThumb: false,
      onUpdated: null,
      onStart: null,
      onEnd: null,
      onBounce: null,
      useSimulatedScrollbar: false,
      useKeyboard: true,
      inertiaEnabled: true,
      updateManually: false
    });
  },
  _defaultOptionsRules: function() {
    return this.callBase().concat(deviceDependentOptions(), [{
      device: function() {
        return nativeScrolling && "android" === devices_default.real().platform && !browser_default.mozilla;
      },
      options: {
        useSimulatedScrollbar: true
      }
    }]);
  },
  _initOptions: function(options2) {
    this.callBase(options2);
    if (!("useSimulatedScrollbar" in options2)) {
      this._setUseSimulatedScrollbar();
    }
  },
  _setUseSimulatedScrollbar: function() {
    if (!this.initialOption("useSimulatedScrollbar")) {
      this.option("useSimulatedScrollbar", !this.option("useNative"));
    }
  },
  _init: function() {
    this.callBase();
    this._initScrollableMarkup();
    this._locked = false;
  },
  _visibilityChanged: function(visible2) {
    if (visible2) {
      this.update();
      this._updateRtlPosition();
      this._savedScrollOffset && this.scrollTo(this._savedScrollOffset);
      delete this._savedScrollOffset;
    } else {
      this._savedScrollOffset = this.scrollOffset();
    }
  },
  _initScrollableMarkup: function() {
    var $element = this.$element().addClass(SCROLLABLE_CLASS);
    var $container = this._$container = renderer_default("<div>").addClass(SCROLLABLE_CONTAINER_CLASS);
    var $wrapper = this._$wrapper = renderer_default("<div>").addClass(SCROLLABLE_WRAPPER_CLASS);
    var $content = this._$content = renderer_default("<div>").addClass(SCROLLABLE_CONTENT_CLASS2);
    $content.append($element.contents()).appendTo($container);
    $container.appendTo($wrapper);
    $wrapper.appendTo($element);
  },
  _dimensionChanged: function() {
    this.update();
    this._updateRtlPosition();
  },
  _initMarkup: function() {
    this.callBase();
    this._renderDirection();
  },
  _render: function() {
    this._renderStrategy();
    this._attachEventHandlers();
    this._renderDisabledState();
    this._createActions();
    this.update();
    this.callBase();
    this._updateRtlPosition(true);
  },
  _updateRtlPosition: function(needInitializeRtlConfig) {
    this._strategy.updateRtlPosition(needInitializeRtlConfig);
  },
  _getMaxOffset: function() {
    var {
      scrollWidth,
      clientWidth,
      scrollHeight,
      clientHeight
    } = renderer_default(this.container()).get(0);
    return {
      left: scrollWidth - clientWidth,
      top: scrollHeight - clientHeight
    };
  },
  _attachEventHandlers: function() {
    var strategy4 = this._strategy;
    var initEventData = {
      getDirection: strategy4.getDirection.bind(strategy4),
      validate: this._validate.bind(this),
      isNative: this.option("useNative"),
      scrollTarget: this._$container
    };
    events_engine_default.off(this._$wrapper, "." + SCROLLABLE);
    events_engine_default.on(this._$wrapper, addNamespace2(emitter_gesture_scroll_default.init, SCROLLABLE), initEventData, this._initHandler.bind(this));
    events_engine_default.on(this._$wrapper, addNamespace2(emitter_gesture_scroll_default.start, SCROLLABLE), strategy4.handleStart.bind(strategy4));
    events_engine_default.on(this._$wrapper, addNamespace2(emitter_gesture_scroll_default.move, SCROLLABLE), strategy4.handleMove.bind(strategy4));
    events_engine_default.on(this._$wrapper, addNamespace2(emitter_gesture_scroll_default.end, SCROLLABLE), strategy4.handleEnd.bind(strategy4));
    events_engine_default.on(this._$wrapper, addNamespace2(emitter_gesture_scroll_default.cancel, SCROLLABLE), strategy4.handleCancel.bind(strategy4));
    events_engine_default.on(this._$wrapper, addNamespace2(emitter_gesture_scroll_default.stop, SCROLLABLE), strategy4.handleStop.bind(strategy4));
    events_engine_default.off(this._$container, "." + SCROLLABLE);
    events_engine_default.on(this._$container, addNamespace2("scroll", SCROLLABLE), strategy4.handleScroll.bind(strategy4));
  },
  _validate: function(e) {
    if (this._isLocked()) {
      return false;
    }
    this._updateIfNeed();
    return this._moveIsAllowed(e);
  },
  _moveIsAllowed(e) {
    return this._strategy.validate(e);
  },
  handleMove(e) {
    this._strategy.handleMove(e);
  },
  _prepareDirections(value2) {
    this._strategy._prepareDirections(value2);
  },
  _initHandler: function() {
    var strategy4 = this._strategy;
    strategy4.handleInit.apply(strategy4, arguments);
  },
  _renderDisabledState: function() {
    this.$element().toggleClass(SCROLLABLE_DISABLED_CLASS, this.option("disabled"));
    if (this.option("disabled")) {
      this._lock();
    } else {
      this._unlock();
    }
  },
  _renderDirection: function() {
    this.$element().removeClass("dx-scrollable-" + HORIZONTAL4).removeClass("dx-scrollable-" + VERTICAL3).removeClass("dx-scrollable-" + BOTH).addClass("dx-scrollable-" + this.option("direction"));
  },
  _renderStrategy: function() {
    this._createStrategy();
    this._strategy.render();
    this.$element().data(SCROLLABLE_STRATEGY2, this._strategy);
  },
  _createStrategy: function() {
    this._strategy = this.option("useNative") ? new ui_scrollable_native_default(this) : new SimulatedStrategy(this);
  },
  _createActions: function() {
    this._strategy && this._strategy.createActions();
  },
  _clean: function() {
    this._strategy && this._strategy.dispose();
  },
  _optionChanged: function(args) {
    switch (args.name) {
      case "onStart":
      case "onEnd":
      case "onUpdated":
      case "onScroll":
      case "onBounce":
        this._createActions();
        break;
      case "direction":
        this._resetInactiveDirection();
        this._invalidate();
        break;
      case "useNative":
        this._setUseSimulatedScrollbar();
        this._invalidate();
        break;
      case "inertiaEnabled":
      case "scrollByThumb":
      case "bounceEnabled":
      case "useKeyboard":
      case "showScrollbar":
      case "useSimulatedScrollbar":
        this._invalidate();
        break;
      case "disabled":
        this._renderDisabledState();
        this._strategy && this._strategy.disabledChanged();
        break;
      case "updateManually":
      case "scrollByContent":
        break;
      case "width":
        this.callBase(args);
        this._updateRtlPosition();
        break;
      default:
        this.callBase(args);
    }
  },
  _resetInactiveDirection: function() {
    var inactiveProp = this._getInactiveProp();
    if (!inactiveProp || !hasWindow()) {
      return;
    }
    var scrollOffset = this.scrollOffset();
    scrollOffset[inactiveProp] = 0;
    this.scrollTo(scrollOffset);
  },
  _getInactiveProp: function() {
    var direction = this.option("direction");
    if (direction === VERTICAL3) {
      return "left";
    }
    if (direction === HORIZONTAL4) {
      return "top";
    }
  },
  _location: function() {
    return this._strategy.location();
  },
  _normalizeLocation: function(location) {
    if (isPlainObject(location)) {
      var left = ensureDefined(location.left, location.x);
      var top = ensureDefined(location.top, location.y);
      return {
        left: isDefined(left) ? -left : void 0,
        top: isDefined(top) ? -top : void 0
      };
    } else {
      var direction = this.option("direction");
      return {
        left: direction !== VERTICAL3 ? -location : void 0,
        top: direction !== HORIZONTAL4 ? -location : void 0
      };
    }
  },
  _isLocked: function() {
    return this._locked;
  },
  _lock: function() {
    this._locked = true;
  },
  _unlock: function() {
    if (!this.option("disabled")) {
      this._locked = false;
    }
  },
  _isDirection: function(direction) {
    var current2 = this.option("direction");
    if (direction === VERTICAL3) {
      return current2 !== HORIZONTAL4;
    }
    if (direction === HORIZONTAL4) {
      return current2 !== VERTICAL3;
    }
    return current2 === direction;
  },
  _updateAllowedDirection: function() {
    var allowedDirections = this._strategy._allowedDirections();
    if (this._isDirection(BOTH) && allowedDirections.vertical && allowedDirections.horizontal) {
      this._allowedDirectionValue = BOTH;
    } else if (this._isDirection(HORIZONTAL4) && allowedDirections.horizontal) {
      this._allowedDirectionValue = HORIZONTAL4;
    } else if (this._isDirection(VERTICAL3) && allowedDirections.vertical) {
      this._allowedDirectionValue = VERTICAL3;
    } else {
      this._allowedDirectionValue = null;
    }
  },
  _allowedDirection: function() {
    return this._allowedDirectionValue;
  },
  $content: function() {
    return this._$content;
  },
  content: function() {
    return getPublicElement(this._$content);
  },
  container: function() {
    return getPublicElement(this._$container);
  },
  scrollOffset: function() {
    return this._strategy._getScrollOffset();
  },
  _isRtlNativeStrategy: function() {
    var {
      useNative,
      rtlEnabled
    } = this.option();
    return useNative && rtlEnabled;
  },
  scrollTop: function() {
    return this.scrollOffset().top;
  },
  scrollLeft: function() {
    return this.scrollOffset().left;
  },
  clientHeight: function() {
    return getHeight(this._$container);
  },
  scrollHeight: function() {
    return getOuterHeight(this.$content());
  },
  clientWidth: function() {
    return getWidth(this._$container);
  },
  scrollWidth: function() {
    return getOuterWidth(this.$content());
  },
  update: function() {
    if (!this._strategy) {
      return;
    }
    return when(this._strategy.update()).done((function() {
      this._updateAllowedDirection();
    }).bind(this));
  },
  scrollBy: function(distance) {
    distance = this._normalizeLocation(distance);
    if (!distance.top && !distance.left) {
      return;
    }
    this._updateIfNeed();
    this._strategy.scrollBy(distance);
  },
  scrollTo: function(targetLocation) {
    targetLocation = this._normalizeLocation(targetLocation);
    this._updateIfNeed();
    var location = this._location();
    if (!this.option("useNative")) {
      targetLocation = this._strategy._applyScaleRatio(targetLocation);
      location = this._strategy._applyScaleRatio(location);
    }
    if (this._isRtlNativeStrategy()) {
      location.left = location.left - this._getMaxOffset().left;
    }
    var distance = this._normalizeLocation({
      left: location.left - ensureDefined(targetLocation.left, location.left),
      top: location.top - ensureDefined(targetLocation.top, location.top)
    });
    if (!distance.top && !distance.left) {
      return;
    }
    this._strategy.scrollBy(distance);
  },
  scrollToElement: function(element, offset2) {
    var $element = renderer_default(element);
    var elementInsideContent = this.$content().find(element).length;
    var elementIsInsideContent = $element.parents("." + SCROLLABLE_CLASS).length - $element.parents("." + SCROLLABLE_CONTENT_CLASS2).length === 0;
    if (!elementInsideContent || !elementIsInsideContent) {
      return;
    }
    var scrollPosition = {
      top: 0,
      left: 0
    };
    var direction = this.option("direction");
    if (direction !== VERTICAL3) {
      scrollPosition.left = this.getScrollElementPosition($element, HORIZONTAL4, offset2);
    }
    if (direction !== HORIZONTAL4) {
      scrollPosition.top = this.getScrollElementPosition($element, VERTICAL3, offset2);
    }
    this.scrollTo(scrollPosition);
  },
  getScrollElementPosition: function($element, direction, offset2) {
    var scrollOffset = this.scrollOffset();
    return getElementLocationInternal($element.get(0), direction, renderer_default(this.container()).get(0), scrollOffset, offset2);
  },
  _updateIfNeed: function() {
    if (!this.option("updateManually")) {
      this.update();
    }
  },
  _useTemplates: function() {
    return false;
  },
  isRenovated: function() {
    return !!Scrollable.IS_RENOVATED_WIDGET;
  }
});
component_registrator_default(SCROLLABLE, Scrollable);
var ui_scrollable_old_default = Scrollable;

// node_modules/devextreme/esm/ui/scroll_view/ui.scrollable.js
var ui_scrollable_default = ui_scrollable_old_default;

// node_modules/devextreme/esm/__internal/grids/grid_core/views/m_rows_view.js
var ROWS_VIEW_CLASS = "rowsview";
var CONTENT_CLASS2 = "content";
var NOWRAP_CLASS2 = "nowrap";
var GROUP_ROW_CLASS2 = "dx-group-row";
var GROUP_CELL_CLASS2 = "dx-group-cell";
var DATA_ROW_CLASS = "dx-data-row";
var FREE_SPACE_CLASS = "dx-freespace-row";
var ROW_LINES_CLASS = "dx-row-lines";
var COLUMN_LINES_CLASS2 = "dx-column-lines";
var ROW_ALTERNATION_CLASS = "dx-row-alt";
var LAST_ROW_BORDER = "dx-last-row-border";
var EMPTY_CLASS = "dx-empty";
var ROW_INSERTED_ANIMATION_CLASS = "row-inserted-animation";
var LOADPANEL_HIDE_TIMEOUT = 200;
function getMaxHorizontalScrollOffset(scrollable) {
  return scrollable ? Math.round(scrollable.scrollWidth() - scrollable.clientWidth()) : 0;
}
function isGroupRow(_ref) {
  var {
    rowType,
    column
  } = _ref;
  return "group" === rowType && isDefined(column.groupIndex) && !column.showWhenGrouped && !column.command;
}
function setWatcher(_ref2) {
  var {
    element,
    watch,
    getter,
    callBack
  } = _ref2;
  if (watch) {
    var dispose = watch(getter, callBack);
    events_engine_default.on(element, removeEvent, dispose);
  }
}
var defaultCellTemplate = function($container, options2) {
  var isDataTextEmpty = isEmpty(options2.text) && "data" === options2.rowType;
  var {
    text
  } = options2;
  var container = $container.get(0);
  if (isDataTextEmpty) {
    m_utils_default.setEmptyText($container);
  } else if (options2.column.encodeHtml) {
    container.textContent = text;
  } else {
    container.innerHTML = text;
  }
};
var getScrollableBottomPadding = function(that) {
  var scrollable = that.getScrollable();
  return scrollable ? Math.ceil(parseFloat(renderer_default(scrollable.content()).css("paddingBottom"))) : 0;
};
var RowsView = class extends ColumnsView {
  _getDefaultTemplate(column) {
    switch (column.command) {
      case "empty":
        return function(container) {
          container.html("&nbsp;");
        };
      default:
        return defaultCellTemplate;
    }
  }
  _getDefaultGroupTemplate(column) {
    var summaryTexts = this.option("summary.texts");
    return function($container, options2) {
      var {
        data: data3
      } = options2;
      var text = "".concat(options2.column.caption, ": ").concat(options2.text);
      var container = $container.get(0);
      if (options2.summaryItems && options2.summaryItems.length) {
        text += " ".concat(m_utils_default.getGroupRowSummaryText(options2.summaryItems, summaryTexts));
      }
      if (data3) {
        if (options2.groupContinuedMessage && options2.groupContinuesMessage) {
          text += " (".concat(options2.groupContinuedMessage, ". ").concat(options2.groupContinuesMessage, ")");
        } else if (options2.groupContinuesMessage) {
          text += " (".concat(options2.groupContinuesMessage, ")");
        } else if (options2.groupContinuedMessage) {
          text += " (".concat(options2.groupContinuedMessage, ")");
        }
      }
      if (column.encodeHtml) {
        container.textContent = text;
      } else {
        container.innerHTML = text;
      }
    };
  }
  _update(change) {
  }
  _updateCell($cell, options2) {
    if (isGroupRow(options2)) {
      $cell.addClass(GROUP_CELL_CLASS2);
    }
    super._updateCell.apply(this, arguments);
  }
  _getCellTemplate(options2) {
    var {
      column
    } = options2;
    var template;
    if (isGroupRow(options2)) {
      template = column.groupCellTemplate || {
        allowRenderToDetachedContainer: true,
        render: this._getDefaultGroupTemplate(column)
      };
    } else if (("data" === options2.rowType || column.command) && column.cellTemplate) {
      template = column.cellTemplate;
    } else {
      template = {
        allowRenderToDetachedContainer: true,
        render: this._getDefaultTemplate(column)
      };
    }
    return template;
  }
  _createRow(row, tag) {
    var $row = super._createRow.apply(this, arguments);
    if (row) {
      var isGroup2 = "group" === row.rowType;
      var isDataRow2 = "data" === row.rowType;
      isDataRow2 && $row.addClass(DATA_ROW_CLASS);
      isDataRow2 && this.option("showRowLines") && $row.addClass(ROW_LINES_CLASS);
      this.option("showColumnLines") && $row.addClass(COLUMN_LINES_CLASS2);
      if (false === row.visible) {
        $row.hide();
      }
      if (isGroup2) {
        $row.addClass(GROUP_ROW_CLASS2);
        this.setAria("role", "row", $row);
        this.setAriaExpandedAttribute($row, row);
      }
    }
    return $row;
  }
  _rowPrepared($row, rowOptions, row) {
    if ("data" === rowOptions.rowType) {
      if (this.option("rowAlternationEnabled")) {
        this._isAltRow(row) && $row.addClass(ROW_ALTERNATION_CLASS);
        setWatcher({
          element: $row.get(0),
          watch: rowOptions.watch,
          getter: () => this._isAltRow(row),
          callBack: (value2) => {
            $row.toggleClass(ROW_ALTERNATION_CLASS, value2);
          }
        });
      }
      this._setAriaRowIndex(rowOptions, $row);
      setWatcher({
        element: $row.get(0),
        watch: rowOptions.watch,
        getter: () => rowOptions.rowIndex,
        callBack: () => this._setAriaRowIndex(rowOptions, $row)
      });
    }
    super._rowPrepared.apply(this, arguments);
  }
  _setAriaRowIndex(row, $row) {
    var {
      component
    } = this;
    var isPagerMode = "standard" === component.option("scrolling.mode") && !m_utils_default.isVirtualRowRendering(component);
    var rowIndex = row.rowIndex + 1;
    if (isPagerMode) {
      rowIndex = component.pageIndex() * component.pageSize() + rowIndex;
    } else {
      rowIndex += this._dataController.getRowIndexOffset();
    }
    this.setAria("rowindex", rowIndex, $row);
  }
  setAriaExpandedAttribute($row, row) {
    var description = row.isExpanded ? this.localize("dxDataGrid-ariaExpandedRow") : this.localize("dxDataGrid-ariaCollapsedRow");
    this.setAria("roledescription", description, $row);
  }
  _afterRowPrepared(e) {
    var arg = e.args[0];
    var dataController2 = this._dataController;
    var row = dataController2.getVisibleRows()[arg.rowIndex];
    var watch = this.option("integrationOptions.watchMethod");
    if (!arg.data || "data" !== arg.rowType || arg.isNewRow || !this.option("twoWayBindingEnabled") || !watch || !row) {
      return;
    }
    var dispose = watch(() => dataController2.generateDataValues(arg.data, arg.columns), () => {
      dataController2.repaintRows([row.rowIndex], this.option("repaintChangesOnly"));
    }, {
      deep: true,
      skipImmediate: true
    });
    events_engine_default.on(arg.rowElement, removeEvent, dispose);
  }
  _renderScrollable(force) {
    var $element = this.element();
    if (!$element.children().length) {
      $element.append("<div>");
    }
    if (force || !this._loadPanel) {
      this._renderLoadPanel($element, $element.parent(), this._dataController.isLocalStore());
    }
    if ((force || !this.getScrollable()) && this._dataController.isLoaded()) {
      var columns2 = this.getColumns();
      var allColumnsHasWidth = true;
      for (var i = 0; i < columns2.length; i++) {
        if (!columns2[i].width && !columns2[i].minWidth) {
          allColumnsHasWidth = false;
          break;
        }
      }
      if (this.option("columnAutoWidth") || this._hasHeight || allColumnsHasWidth || this._columnsController._isColumnFixing()) {
        this._renderScrollableCore($element);
      }
    }
  }
  _handleScroll(e) {
    var rtlEnabled = this.option("rtlEnabled");
    var isNativeScrolling = e.component.option("useNative");
    this._scrollTop = e.scrollOffset.top;
    this._scrollLeft = e.scrollOffset.left;
    var scrollLeft = e.scrollOffset.left;
    if (rtlEnabled) {
      this._scrollRight = getMaxHorizontalScrollOffset(e.component) - this._scrollLeft;
      if (isNativeScrolling) {
        scrollLeft = -this._scrollRight;
      }
      if (!this.isScrollbarVisible(true)) {
        this._scrollLeft = -1;
      }
    }
    this.scrollChanged.fire(_extends(_extends({}, e.scrollOffset), {
      left: scrollLeft
    }), this.name);
  }
  _renderScrollableCore($element) {
    var dxScrollableOptions = this._createScrollableOptions();
    var scrollHandler = this._handleScroll.bind(this);
    dxScrollableOptions.onScroll = scrollHandler;
    this._scrollable = this._createComponent($element, ui_scrollable_default, dxScrollableOptions);
    this._scrollableContainer = this._scrollable && renderer_default(this._scrollable.container());
  }
  _renderLoadPanel() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return m_utils_default.renderLoadPanel.apply(this, arguments);
  }
  _renderContent(contentElement, tableElement, isFixedTableRendering) {
    contentElement.empty().append(tableElement);
    return this._findContentElement();
  }
  _updateContent(newTableElement, change, isFixedTableRendering) {
    this._contentChanges.push({
      newTableElement,
      change,
      isFixedTableRendering
    });
    return this.waitAsyncTemplates().done(() => {
      var contentChanges = this._contentChanges;
      this._contentChanges = [];
      contentChanges.forEach((_ref3) => {
        var {
          newTableElement: newTableElement2,
          change: change2,
          isFixedTableRendering: isFixedTableRendering2
        } = _ref3;
        var tableElement = this.getTableElement(isFixedTableRendering2);
        var contentElement = this._findContentElement(isFixedTableRendering2);
        var changeType = null === change2 || void 0 === change2 ? void 0 : change2.changeType;
        var executors = [];
        var highlightChanges = this.option("highlightChanges");
        var rowInsertedClass = this.addWidgetPrefix(ROW_INSERTED_ANIMATION_CLASS);
        switch (changeType) {
          case "update":
            each(change2.rowIndices, (index2, rowIndex) => {
              var _a2;
              var $newRowElement = this._getRowElements(newTableElement2).eq(index2);
              var dataChangeType = null === (_a2 = change2.changeTypes) || void 0 === _a2 ? void 0 : _a2[index2];
              var item = change2.items && change2.items[index2];
              executors.push(() => {
                var _a3;
                var $rowElements = this._getRowElements(tableElement);
                var $rowElement = $rowElements.eq(rowIndex);
                switch (dataChangeType) {
                  case "update":
                    if (item) {
                      var columnIndices = null === (_a3 = change2.columnIndices) || void 0 === _a3 ? void 0 : _a3[index2];
                      if (isDefined(item.visible) && item.visible !== $rowElement.is(":visible")) {
                        $rowElement.toggle(item.visible);
                      } else if (columnIndices) {
                        this._updateCells($rowElement, $newRowElement, columnIndices);
                      } else {
                        $rowElement.replaceWith($newRowElement);
                      }
                    }
                    break;
                  case "insert":
                    if (!$rowElements.length) {
                      if (tableElement) {
                        var target = $newRowElement.is("tbody") ? tableElement : tableElement.children("tbody");
                        $newRowElement.prependTo(target);
                      }
                    } else if ($rowElement.length) {
                      $newRowElement.insertBefore($rowElement);
                    } else {
                      $newRowElement.insertAfter($rowElements.last());
                    }
                    if (highlightChanges && change2.isLiveUpdate) {
                      $newRowElement.addClass(rowInsertedClass);
                    }
                    break;
                  case "remove":
                    $rowElement.remove();
                }
              });
            });
            each(executors, function() {
              this();
            });
            newTableElement2.remove();
            break;
          default:
            this.setTableElement(newTableElement2, isFixedTableRendering2);
            contentElement.addClass(this.addWidgetPrefix(CONTENT_CLASS2));
            this._setGridRole(contentElement);
            this._renderContent(contentElement, newTableElement2, isFixedTableRendering2);
        }
      });
    }).fail(() => {
      this._contentChanges = [];
    });
  }
  _getGridRoleName() {
    return "grid";
  }
  _setGridRole($element) {
    var _a2;
    var hasData = !(null === (_a2 = this._dataController) || void 0 === _a2 ? void 0 : _a2.isEmpty());
    var gridRoleName = this._getGridRoleName();
    if ((null === $element || void 0 === $element ? void 0 : $element.length) && hasData) {
      this.setAria("role", gridRoleName, $element);
    }
  }
  _createEmptyRow(className, isFixed, height) {
    var $cell;
    var $row = this._createRow();
    var columns2 = isFixed ? this.getFixedColumns() : this.getColumns();
    $row.addClass(className).toggleClass(COLUMN_LINES_CLASS2, this.option("showColumnLines"));
    for (var i = 0; i < columns2.length; i++) {
      $cell = this._createCell({
        column: columns2[i],
        rowType: "freeSpace",
        columnIndex: i,
        columns: columns2
      });
      isNumeric(height) && $cell.css("height", height);
      $row.append($cell);
    }
    this.setAria("role", "presentation", $row);
    return $row;
  }
  getFixedColumns() {
    throw new Error("Method not implemented.");
  }
  _appendEmptyRow($table, $emptyRow, location) {
    var $tBodies = this._getBodies($table);
    var isTableContainer = !$tBodies.length || $emptyRow.is("tbody");
    var $container = isTableContainer ? $table : $tBodies;
    if ("top" === location) {
      $container.first().prepend($emptyRow);
      if (isTableContainer) {
        var $colgroup = $container.children("colgroup");
        $container.prepend($colgroup);
      }
    } else {
      $container.last().append($emptyRow);
    }
  }
  _renderFreeSpaceRow($tableElement, change) {
    var $freeSpaceRowElement = this._createEmptyRow(FREE_SPACE_CLASS);
    $freeSpaceRowElement = this._wrapRowIfNeed($tableElement, $freeSpaceRowElement, "refresh" === (null === change || void 0 === change ? void 0 : change.changeType));
    this._appendEmptyRow($tableElement, $freeSpaceRowElement);
  }
  _checkRowKeys(options2) {
    var that = this;
    var rows = that._getRows(options2);
    var keyExpr = that._dataController.store() && that._dataController.store().key();
    keyExpr && rows.some((row) => {
      if ("data" === row.rowType && void 0 === row.key) {
        that._dataController.fireError("E1046", keyExpr);
        return true;
      }
      return;
    });
  }
  _needUpdateRowHeight(itemsCount) {
    return itemsCount > 0 && !this._rowHeight;
  }
  _getRowsHeight($tableElement) {
    $tableElement = $tableElement || this._tableElement;
    var $rowElements = $tableElement.children("tbody").children().not(".dx-virtual-row").not(".".concat(FREE_SPACE_CLASS));
    return $rowElements.toArray().reduce((sum, row) => sum + getBoundingRect(row).height, 0);
  }
  _updateRowHeight() {
    var $tableElement = this.getTableElement();
    var itemsCount = this._dataController.items().length;
    if ($tableElement && this._needUpdateRowHeight(itemsCount)) {
      var rowsHeight = this._getRowsHeight($tableElement);
      this._rowHeight = rowsHeight / itemsCount;
    }
  }
  _findContentElement(isFixedTableRendering) {
    var $content = this.element();
    var scrollable = this.getScrollable();
    if ($content) {
      if (scrollable) {
        $content = renderer_default(scrollable.content());
      }
      return $content.children().first();
    }
  }
  _getRowElements(tableElement) {
    var $rows = super._getRowElements(tableElement);
    return $rows && $rows.not(".".concat(FREE_SPACE_CLASS));
  }
  _getFreeSpaceRowElements($table) {
    var tableElements = $table || this.getTableElements();
    return tableElements && tableElements.children("tbody").children(".".concat(FREE_SPACE_CLASS));
  }
  _getNoDataText() {
    return this.option("noDataText");
  }
  _rowClick(e) {
    var item = this._dataController.items()[e.rowIndex] || {};
    this.executeAction("onRowClick", extend({
      evaluate(expr) {
        var getter = compileGetter(expr);
        return getter(item.data);
      }
    }, e, item));
  }
  _rowDblClick(e) {
    var item = this._dataController.items()[e.rowIndex] || {};
    this.executeAction("onRowDblClick", extend({}, e, item));
  }
  _getColumnsCountBeforeGroups(columns2) {
    for (var i = 0; i < columns2.length; i++) {
      if ("groupExpand" === columns2[i].type) {
        return i;
      }
    }
    return 0;
  }
  _getGroupCellOptions(options2) {
    var columnsCountBeforeGroups = this._getColumnsCountBeforeGroups(options2.columns);
    var columnIndex = (options2.row.groupIndex || 0) + columnsCountBeforeGroups;
    return {
      columnIndex,
      colspan: options2.columns.length - columnIndex - 1
    };
  }
  _needWrapRow() {
    return super._needWrapRow.apply(this, arguments) || !!this.option("dataRowTemplate");
  }
  _renderCells($row, options2) {
    if ("group" === options2.row.rowType) {
      this._renderGroupedCells($row, options2);
    } else if (options2.row.values) {
      super._renderCells($row, options2);
    }
  }
  _renderGroupedCells($row, options2) {
    var {
      row
    } = options2;
    var expandColumn;
    var {
      columns: columns2
    } = options2;
    var {
      rowIndex
    } = row;
    var isExpanded;
    var groupCellOptions = this._getGroupCellOptions(options2);
    for (var i = 0; i <= groupCellOptions.columnIndex; i++) {
      if (i === groupCellOptions.columnIndex && columns2[i].allowCollapsing && "infinite" !== options2.scrollingMode) {
        isExpanded = !!row.isExpanded;
        expandColumn = columns2[i];
      } else {
        isExpanded = null;
        expandColumn = {
          command: "expand",
          cssClass: columns2[i].cssClass
        };
      }
      if (this._needRenderCell(i, options2.columnIndices)) {
        this._renderCell($row, {
          value: isExpanded,
          row,
          rowIndex,
          column: expandColumn,
          columnIndex: i,
          columnIndices: options2.columnIndices,
          change: options2.change
        });
      }
    }
    var groupColumnAlignment = getDefaultAlignment(this.option("rtlEnabled"));
    var groupColumn = extend({}, columns2[groupCellOptions.columnIndex], {
      command: null,
      type: null,
      cssClass: null,
      width: null,
      showWhenGrouped: false,
      alignment: groupColumnAlignment
    });
    if (groupCellOptions.colspan > 1) {
      groupColumn.colspan = groupCellOptions.colspan;
    }
    if (this._needRenderCell(groupCellOptions.columnIndex + 1, options2.columnIndices)) {
      this._renderCell($row, {
        value: row.values[row.groupIndex],
        row,
        rowIndex,
        column: groupColumn,
        columnIndex: groupCellOptions.columnIndex + 1,
        columnIndices: options2.columnIndices,
        change: options2.change
      });
    }
  }
  _renderRows($table, options2) {
    var scrollingMode = this.option("scrolling.mode");
    super._renderRows($table, extend({
      scrollingMode
    }, options2));
    this._checkRowKeys(options2.change);
    this._renderFreeSpaceRow($table, options2.change);
    if (!this._hasHeight) {
      this.updateFreeSpaceRowHeight($table);
    }
  }
  _renderDataRowByTemplate($table, options2, dataRowTemplate) {
    var {
      row
    } = options2;
    var rowOptions = extend({
      columns: options2.columns
    }, row);
    var $tbody = this._createRow(row, "tbody");
    $tbody.appendTo($table);
    this.renderTemplate($tbody, dataRowTemplate, rowOptions, true, options2.change);
    this._rowPrepared($tbody, rowOptions, options2.row);
  }
  _renderRow($table, options2) {
    var {
      row
    } = options2;
    var {
      rowTemplate
    } = this.option();
    var dataRowTemplate = this.option("dataRowTemplate");
    if ("data" === row.rowType && dataRowTemplate) {
      this._renderDataRowByTemplate($table, options2, dataRowTemplate);
    } else if (("data" === row.rowType || "group" === row.rowType) && !isDefined(row.groupIndex) && rowTemplate) {
      this.renderTemplate($table, rowTemplate, extend({
        columns: options2.columns
      }, row), true);
    } else {
      super._renderRow($table, options2);
    }
  }
  _renderTable(options2) {
    var that = this;
    var $table = super._renderTable(options2);
    if (!isDefined(that.getTableElement())) {
      that.setTableElement($table);
      that._renderScrollable(true);
      that.resizeCompleted.add(function resizeCompletedHandler() {
        var scrollableInstance = that.getScrollable();
        if (scrollableInstance && that.element().closest(getWindow().document).length) {
          that.resizeCompleted.remove(resizeCompletedHandler);
          scrollableInstance._visibilityChanged(true);
        }
      });
    } else {
      that._renderScrollable();
    }
    return $table;
  }
  _createTable() {
    var $table = super._createTable.apply(this, arguments);
    if (this.option().rowTemplate || this.option().dataRowTemplate) {
      $table.appendTo(this.component.$element());
    }
    return $table;
  }
  _renderCore(change) {
    var $element = this.element();
    $element.addClass(this.addWidgetPrefix(ROWS_VIEW_CLASS)).toggleClass(this.addWidgetPrefix(NOWRAP_CLASS2), !this.option("wordWrapEnabled"));
    $element.toggleClass(EMPTY_CLASS, this._dataController.isEmpty());
    this.setAria("role", "presentation", $element);
    var $table = this._renderTable({
      change
    });
    var deferred = this._updateContent($table, change);
    super._renderCore(change);
    this._lastColumnWidths = null;
    return deferred;
  }
  _getRows(change) {
    return change && change.items || this._dataController.items();
  }
  _getCellOptions(options2) {
    var {
      column
    } = options2;
    var {
      row
    } = options2;
    var {
      data: data3
    } = row;
    var summaryCells = row && row.summaryCells;
    var {
      value: value2
    } = options2;
    var displayValue = m_utils_default.getDisplayValue(column, value2, data3, row.rowType);
    var parameters = super._getCellOptions(options2);
    parameters.value = value2;
    parameters.oldValue = options2.oldValue;
    parameters.displayValue = displayValue;
    parameters.row = row;
    parameters.key = row.key;
    parameters.data = data3;
    parameters.rowType = row.rowType;
    parameters.values = row.values;
    parameters.text = !column.command ? m_utils_default.formatValue(displayValue, column) : "";
    parameters.rowIndex = row.rowIndex;
    parameters.summaryItems = summaryCells && summaryCells[options2.columnIndex];
    parameters.resized = column.resizedCallbacks;
    if (isDefined(column.groupIndex) && !column.command) {
      var groupingTextsOptions = this.option("grouping.texts");
      var scrollingMode = this.option("scrolling.mode");
      if ("virtual" !== scrollingMode && "infinite" !== scrollingMode) {
        parameters.groupContinuesMessage = data3 && data3.isContinuationOnNextPage && groupingTextsOptions && groupingTextsOptions.groupContinuesMessage;
        parameters.groupContinuedMessage = data3 && data3.isContinuation && groupingTextsOptions && groupingTextsOptions.groupContinuedMessage;
      }
    }
    return parameters;
  }
  _setRowsOpacityCore($rows, visibleColumns, columnIndex, value2) {
    var columnsController = this._columnsController;
    var columns2 = columnsController.getColumns();
    var column = columns2 && columns2[columnIndex];
    var columnID = column && column.isBand && column.index;
    each($rows, (rowIndex, row) => {
      if (!renderer_default(row).hasClass(GROUP_ROW_CLASS2)) {
        for (var i = 0; i < visibleColumns.length; i++) {
          if (isNumeric(columnID) && columnsController.isParentBandColumn(visibleColumns[i].index, columnID) || visibleColumns[i].index === columnIndex) {
            $rows.eq(rowIndex).children().eq(i).css({
              opacity: value2
            });
            if (!isNumeric(columnID)) {
              break;
            }
          }
        }
      }
    });
  }
  _getDevicePixelRatio() {
    return getWindow().devicePixelRatio;
  }
  renderNoDataText() {
    return m_utils_default.renderNoDataText.apply(this, arguments);
  }
  getCellOptions(rowIndex, columnIdentifier) {
    var rowOptions = this._dataController.items()[rowIndex];
    var cellOptions;
    var column;
    if (rowOptions) {
      if (isString(columnIdentifier)) {
        column = this._columnsController.columnOption(columnIdentifier);
      } else {
        column = this._columnsController.getVisibleColumns()[columnIdentifier];
      }
      if (column) {
        cellOptions = this._getCellOptions({
          value: column.calculateCellValue(rowOptions.data),
          rowIndex: rowOptions.rowIndex,
          row: rowOptions,
          column
        });
      }
    }
    return cellOptions;
  }
  getRow(index2) {
    if (index2 >= 0) {
      var rows = this._getRowElements();
      if (rows.length > index2) {
        return renderer_default(rows[index2]);
      }
    }
    return;
  }
  updateFreeSpaceRowHeight($table) {
    var dataController2 = this._dataController;
    var itemCount = dataController2.items(true).length;
    var contentElement = this._findContentElement();
    var freeSpaceRowElements = this._getFreeSpaceRowElements($table);
    if (freeSpaceRowElements && contentElement && dataController2.totalCount() >= 0) {
      var isFreeSpaceRowVisible = false;
      if (itemCount > 0) {
        if (!this._hasHeight) {
          var freeSpaceRowCount = dataController2.pageSize() - itemCount;
          var scrollingMode = this.option("scrolling.mode");
          if (freeSpaceRowCount > 0 && dataController2.pageCount() > 1 && "virtual" !== scrollingMode && "infinite" !== scrollingMode) {
            setHeight(freeSpaceRowElements, freeSpaceRowCount * this._rowHeight);
            isFreeSpaceRowVisible = true;
          }
          if (!isFreeSpaceRowVisible && $table) {
            setHeight(freeSpaceRowElements, 0);
          } else {
            freeSpaceRowElements.toggle(isFreeSpaceRowVisible);
          }
          this._updateLastRowBorder(isFreeSpaceRowVisible);
        } else {
          freeSpaceRowElements.hide();
          deferUpdate(() => {
            var scrollbarWidth2 = this.getScrollbarWidth(true);
            var elementHeightWithoutScrollbar = getHeight(this.element()) - scrollbarWidth2;
            var contentHeight = getOuterHeight(contentElement);
            var showFreeSpaceRow = elementHeightWithoutScrollbar - contentHeight > 0;
            var rowsHeight = this._getRowsHeight(contentElement.children().first());
            var $tableElement = $table || this.getTableElements();
            var borderTopWidth = Math.ceil(parseFloat($tableElement.css("borderTopWidth")));
            var heightCorrection = this._getHeightCorrection();
            var resultHeight = elementHeightWithoutScrollbar - rowsHeight - borderTopWidth - heightCorrection;
            if (showFreeSpaceRow) {
              deferRender(() => {
                freeSpaceRowElements.css("height", resultHeight);
                isFreeSpaceRowVisible = true;
                freeSpaceRowElements.show();
              });
            }
            deferRender(() => this._updateLastRowBorder(isFreeSpaceRowVisible));
          });
        }
      } else {
        freeSpaceRowElements.css("height", 0);
        freeSpaceRowElements.show();
        this._updateLastRowBorder(true);
      }
    }
  }
  _getHeightCorrection() {
    var isZoomedWebkit = browser_default.webkit && this._getDevicePixelRatio() >= 2;
    var isChromeLatest = browser_default.chrome && browser_default.version >= 91;
    var hasExtraBorderTop = browser_default.mozilla && browser_default.version >= 70 && !this.option("showRowLines");
    return isZoomedWebkit || hasExtraBorderTop || isChromeLatest ? 1 : 0;
  }
  _columnOptionChanged(e) {
    var {
      optionNames
    } = e;
    if (e.changeTypes.grouping) {
      return;
    }
    if (optionNames.width || optionNames.visibleWidth) {
      super._columnOptionChanged(e);
      this._fireColumnResizedCallbacks();
    }
  }
  getScrollable() {
    return this._scrollable;
  }
  init() {
    var that = this;
    var dataController2 = that.getController("data");
    super.init();
    that._editorFactoryController = that.getController("editorFactory");
    that._rowHeight = 0;
    that._scrollTop = 0;
    that._scrollLeft = -1;
    that._scrollRight = 0;
    that._hasHeight = void 0;
    that._contentChanges = [];
    dataController2.loadingChanged.add((isLoading, messageText) => {
      that.setLoading(isLoading, messageText);
    });
    dataController2.dataSourceChanged.add(() => {
      if (this._scrollLeft >= 0 && !this._dataController.isLoading()) {
        this._handleScroll({
          component: this.getScrollable(),
          forceUpdateScrollPosition: true,
          scrollOffset: {
            top: this._scrollTop,
            left: this._scrollLeft
          }
        });
      }
    });
  }
  _handleDataChanged(change) {
    switch (change.changeType) {
      case "refresh":
      case "prepend":
      case "append":
      case "update":
        this.render(null, change);
        break;
      default:
        this._update(change);
    }
  }
  publicMethods() {
    return ["isScrollbarVisible", "getTopVisibleRowData", "getScrollbarWidth", "getCellElement", "getRowElement", "getScrollable"];
  }
  contentWidth() {
    return getWidth(this.element()) - this.getScrollbarWidth();
  }
  getScrollbarWidth(isHorizontal) {
    var scrollableContainer = this._scrollableContainer && this._scrollableContainer.get(0);
    var scrollbarWidth2 = 0;
    if (scrollableContainer) {
      if (!isHorizontal) {
        scrollbarWidth2 = scrollableContainer.clientWidth ? scrollableContainer.offsetWidth - scrollableContainer.clientWidth : 0;
      } else {
        scrollbarWidth2 = scrollableContainer.clientHeight ? scrollableContainer.offsetHeight - scrollableContainer.clientHeight : 0;
        scrollbarWidth2 += getScrollableBottomPadding(this);
      }
    }
    return scrollbarWidth2 > 0 ? scrollbarWidth2 : 0;
  }
  _fireColumnResizedCallbacks() {
    var lastColumnWidths = this._lastColumnWidths || [];
    var columnWidths = [];
    var columns2 = this.getColumns();
    for (var i = 0; i < columns2.length; i++) {
      columnWidths[i] = columns2[i].visibleWidth;
      if (columns2[i].resizedCallbacks && !isDefined(columns2[i].groupIndex) && lastColumnWidths[i] !== columnWidths[i]) {
        columns2[i].resizedCallbacks.fire(columnWidths[i]);
      }
    }
    this._lastColumnWidths = columnWidths;
  }
  _updateLastRowBorder(isFreeSpaceRowVisible) {
    if (this.option("showBorders") && this.option("showRowLines") && !isFreeSpaceRowVisible) {
      this.element().addClass(LAST_ROW_BORDER);
    } else {
      this.element().removeClass(LAST_ROW_BORDER);
    }
  }
  _updateScrollable() {
    var scrollable = ui_scrollable_default.getInstance(this.element());
    if (scrollable) {
      scrollable.update();
      if (scrollable.option("useNative") || !(null === scrollable || void 0 === scrollable ? void 0 : scrollable.isRenovated())) {
        this._updateHorizontalScrollPosition();
      }
    }
  }
  _updateHorizontalScrollPosition() {
    var scrollable = this.getScrollable();
    var scrollLeft = scrollable && scrollable.scrollOffset().left;
    var rtlEnabled = this.option("rtlEnabled");
    if (rtlEnabled) {
      var maxHorizontalScrollOffset = getMaxHorizontalScrollOffset(scrollable);
      var scrollRight = maxHorizontalScrollOffset - scrollLeft;
      if (scrollRight !== this._scrollRight) {
        this._scrollLeft = maxHorizontalScrollOffset - this._scrollRight;
      }
    }
    if (this._scrollLeft >= 0 && scrollLeft !== this._scrollLeft) {
      scrollable.scrollTo({
        x: this._scrollLeft
      });
    }
  }
  _resizeCore() {
    var that = this;
    that._fireColumnResizedCallbacks();
    that._updateRowHeight();
    deferRender(() => {
      that._renderScrollable();
      that.renderNoDataText();
      that.updateFreeSpaceRowHeight();
      deferUpdate(() => {
        that._updateScrollable();
      });
    });
  }
  scrollTo(location) {
    var $element = this.element();
    var dxScrollable = $element && ui_scrollable_default.getInstance($element);
    if (dxScrollable) {
      dxScrollable.scrollTo(location);
    }
  }
  height(height) {
    var $element = this.element();
    if (0 === arguments.length) {
      return $element ? getOuterHeight($element, true) : 0;
    }
    if (isDefined(height) && $element) {
      this.hasHeight("auto" !== height);
      setHeight($element, height);
    }
  }
  hasHeight(hasHeight) {
    if (0 === arguments.length) {
      return !!this._hasHeight;
    }
    this._hasHeight = hasHeight;
    return;
  }
  setLoading(isLoading, messageText) {
    var loadPanel = this._loadPanel;
    var dataController2 = this._dataController;
    var loadPanelOptions = this.option("loadPanel") || {};
    var animation3 = dataController2.isLoaded() ? loadPanelOptions.animation : null;
    var $element = this.element();
    if (!hasWindow()) {
      return;
    }
    if (!loadPanel && void 0 !== messageText && dataController2.isLocalStore() && "auto" === loadPanelOptions.enabled && $element) {
      this._renderLoadPanel($element, $element.parent());
      loadPanel = this._loadPanel;
    }
    if (loadPanel) {
      var visibilityOptions = {
        message: messageText || loadPanelOptions.text,
        animation: animation3,
        visible: isLoading
      };
      if (isLoading) {
        visibilityOptions.position = m_utils_default.calculateLoadPanelPosition($element);
      }
      clearTimeout(this._hideLoadingTimeoutID);
      if (loadPanel.option("visible") && !isLoading) {
        this._hideLoadingTimeoutID = setTimeout(() => {
          loadPanel.option(visibilityOptions);
        }, LOADPANEL_HIDE_TIMEOUT);
      } else {
        loadPanel.option(visibilityOptions);
      }
    }
  }
  setRowsOpacity(columnIndex, value2) {
    var $rows = this._getRowElements().not(".".concat(GROUP_ROW_CLASS2)) || [];
    this._setRowsOpacityCore($rows, this.getColumns(), columnIndex, value2);
  }
  _getCellElementsCore(rowIndex) {
    var $cells = super._getCellElementsCore.apply(this, arguments);
    if ($cells) {
      var groupCellIndex = $cells.filter(".".concat(GROUP_CELL_CLASS2)).index();
      if (groupCellIndex >= 0 && $cells.length > groupCellIndex + 1) {
        return $cells.slice(0, groupCellIndex + 1);
      }
    }
    return $cells;
  }
  _getBoundaryVisibleItemIndex(isTop, isFloor) {
    var itemIndex = 0;
    var prevOffset = 0;
    var offset2 = 0;
    var viewportBoundary = this._scrollTop;
    var $contentElement = this._findContentElement();
    var contentElementOffsetTop = $contentElement && $contentElement.offset().top;
    var dataController2 = this.getController("data");
    var items = dataController2.items();
    var tableElement = this.getTableElement();
    if (items.length && tableElement) {
      var rowElements = this._getRowElements(tableElement).filter(":visible");
      if (!isTop) {
        var height = getOuterHeight(this._hasHeight ? this.element() : getWindow());
        viewportBoundary += height;
      }
      for (itemIndex = 0; itemIndex < items.length; itemIndex++) {
        prevOffset = offset2;
        var $rowElement = renderer_default(rowElements).eq(itemIndex);
        if ($rowElement.length) {
          offset2 = $rowElement.offset();
          offset2 = (isTop ? offset2.top : offset2.top + getOuterHeight($rowElement)) - contentElementOffsetTop;
          if (offset2 > viewportBoundary) {
            if (itemIndex) {
              if (isFloor || 2 * viewportBoundary < Math.round(offset2 + prevOffset)) {
                itemIndex--;
              }
            }
            break;
          }
        }
      }
      if (itemIndex && itemIndex === items.length) {
        itemIndex--;
      }
    }
    return itemIndex;
  }
  getTopVisibleItemIndex(isFloor) {
    return this._getBoundaryVisibleItemIndex(true, isFloor);
  }
  getBottomVisibleItemIndex(isFloor) {
    return this._getBoundaryVisibleItemIndex(false, isFloor);
  }
  getTopVisibleRowData() {
    var itemIndex = this.getTopVisibleItemIndex();
    var items = this._dataController.items();
    if (items[itemIndex]) {
      return items[itemIndex].data;
    }
    return;
  }
  _scrollToElement($element, offset2) {
    var scrollable = this.getScrollable();
    scrollable && scrollable.scrollToElement($element, offset2);
  }
  optionChanged(args) {
    super.optionChanged(args);
    switch (args.name) {
      case "wordWrapEnabled":
      case "showColumnLines":
      case "showRowLines":
      case "rowAlternationEnabled":
      case "rowTemplate":
      case "dataRowTemplate":
      case "twoWayBindingEnabled":
        this._invalidate(true, true);
        args.handled = true;
        break;
      case "scrolling":
        this._rowHeight = null;
        this._tableElement = null;
        args.handled = true;
        break;
      case "rtlEnabled":
        this._rowHeight = null;
        this._tableElement = null;
        break;
      case "loadPanel":
        this._tableElement = null;
        this._invalidate(true, "loadPanel.enabled" !== args.fullName);
        args.handled = true;
        break;
      case "noDataText":
        this.renderNoDataText();
        args.handled = true;
    }
  }
  setAriaOwns(headerTableId, footerTableId) {
    var _a2;
    var $contentElement = this._findContentElement();
    var $tableElement = this.getTableElement();
    if (null === $tableElement || void 0 === $tableElement ? void 0 : $tableElement.length) {
      this.setAria("owns", "".concat(null !== headerTableId && void 0 !== headerTableId ? headerTableId : "", " ").concat(null !== (_a2 = $tableElement.attr("id")) && void 0 !== _a2 ? _a2 : "", " ").concat(null !== footerTableId && void 0 !== footerTableId ? footerTableId : "").trim(), $contentElement);
    }
  }
  dispose() {
    super.dispose();
    clearTimeout(this._hideLoadingTimeoutID);
    this._scrollable && this._scrollable.dispose();
  }
  setScrollerSpacing() {
  }
  _restoreErrorRow() {
  }
};
var rowsModule = {
  defaultOptions: () => ({
    hoverStateEnabled: false,
    scrolling: {
      useNative: "auto"
    },
    loadPanel: {
      enabled: "auto",
      text: message_default.format("Loading"),
      width: 200,
      height: 90,
      showIndicator: true,
      indicatorSrc: "",
      showPane: true
    },
    dataRowTemplate: null,
    columnAutoWidth: false,
    noDataText: message_default.format("dxDataGrid-noDataText"),
    wordWrapEnabled: false,
    showColumnLines: true,
    showRowLines: false,
    rowAlternationEnabled: false,
    activeStateEnabled: false,
    twoWayBindingEnabled: true
  }),
  views: {
    rowsView: RowsView
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/rows.js
var RowsView2 = rowsModule.views.rowsView;
m_core_default.registerModule("rows", rowsModule);

// node_modules/devextreme/esm/ui/widget/utils.ink_ripple.js
var INKRIPPLE_CLASS = "dx-inkripple";
var INKRIPPLE_WAVE_CLASS = "dx-inkripple-wave";
var INKRIPPLE_SHOWING_CLASS = "dx-inkripple-showing";
var INKRIPPLE_HIDING_CLASS = "dx-inkripple-hiding";
var DEFAULT_WAVE_SIZE_COEFFICIENT = 2;
var MAX_WAVE_SIZE = 4e3;
var ANIMATION_DURATION = 300;
var HOLD_ANIMATION_DURATION = 1e3;
var DEFAULT_WAVE_INDEX = 0;
var initConfig = function() {
  var config3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
  var {
    useHoldAnimation,
    waveSizeCoefficient,
    isCentered,
    wavesNumber
  } = config3;
  return {
    waveSizeCoefficient: waveSizeCoefficient || DEFAULT_WAVE_SIZE_COEFFICIENT,
    isCentered: isCentered || false,
    wavesNumber: wavesNumber || 1,
    durations: getDurations(null !== useHoldAnimation && void 0 !== useHoldAnimation ? useHoldAnimation : true)
  };
};
var render = function(args) {
  var config3 = initConfig(args);
  return {
    showWave: showWave.bind(this, config3),
    hideWave: hideWave.bind(this, config3)
  };
};
var getInkRipple = function(element) {
  var result2 = element.children("." + INKRIPPLE_CLASS);
  if (0 === result2.length) {
    result2 = renderer_default("<div>").addClass(INKRIPPLE_CLASS).appendTo(element);
  }
  return result2;
};
var getWaves = function(element, wavesNumber) {
  var inkRipple = getInkRipple(renderer_default(element));
  var result2 = inkRipple.children("." + INKRIPPLE_WAVE_CLASS).toArray();
  for (var i = result2.length; i < wavesNumber; i++) {
    var $currentWave = renderer_default("<div>").appendTo(inkRipple).addClass(INKRIPPLE_WAVE_CLASS);
    result2.push($currentWave[0]);
  }
  return renderer_default(result2);
};
var getWaveStyleConfig = function(args, config3) {
  var element = renderer_default(config3.element);
  var elementWidth = getOuterWidth(element);
  var elementHeight = getOuterHeight(element);
  var elementDiagonal = parseInt(Math.sqrt(elementWidth * elementWidth + elementHeight * elementHeight));
  var waveSize = Math.min(MAX_WAVE_SIZE, parseInt(elementDiagonal * args.waveSizeCoefficient));
  var left;
  var top;
  if (args.isCentered) {
    left = (elementWidth - waveSize) / 2;
    top = (elementHeight - waveSize) / 2;
  } else {
    var event = config3.event;
    var position3 = element.offset();
    var x = event.pageX - position3.left;
    var y = event.pageY - position3.top;
    left = x - waveSize / 2;
    top = y - waveSize / 2;
  }
  return {
    left,
    top,
    height: waveSize,
    width: waveSize
  };
};
function showWave(args, config3) {
  var $wave = getWaves(config3.element, args.wavesNumber).eq(config3.wave || DEFAULT_WAVE_INDEX);
  args.hidingTimeout && clearTimeout(args.hidingTimeout);
  hideSelectedWave($wave);
  $wave.css(getWaveStyleConfig(args, config3));
  args.showingTimeout = setTimeout(showingWaveHandler.bind(this, args, $wave), 0);
}
function showingWaveHandler(args, $wave) {
  var durationCss = args.durations.showingScale + "ms";
  $wave.addClass(INKRIPPLE_SHOWING_CLASS).css("transitionDuration", durationCss);
}
function getDurations(useHoldAnimation) {
  return {
    showingScale: useHoldAnimation ? HOLD_ANIMATION_DURATION : ANIMATION_DURATION,
    hidingScale: ANIMATION_DURATION,
    hidingOpacity: ANIMATION_DURATION
  };
}
function hideSelectedWave($wave) {
  $wave.removeClass(INKRIPPLE_HIDING_CLASS).css("transitionDuration", "");
}
function hideWave(args, config3) {
  args.showingTimeout && clearTimeout(args.showingTimeout);
  var $wave = getWaves(config3.element, config3.wavesNumber).eq(config3.wave || DEFAULT_WAVE_INDEX);
  var durations = args.durations;
  var durationCss = durations.hidingScale + "ms, " + durations.hidingOpacity + "ms";
  $wave.addClass(INKRIPPLE_HIDING_CLASS).removeClass(INKRIPPLE_SHOWING_CLASS).css("transitionDuration", durationCss);
  var animationDuration = Math.max(durations.hidingScale, durations.hidingOpacity);
  args.hidingTimeout = setTimeout(hideSelectedWave.bind(this, $wave), animationDuration);
}

// node_modules/devextreme/esm/core/utils/icon.js
var ICON_CLASS = "dx-icon";
var SVG_ICON_CLASS = "dx-svg-icon";
var getImageSourceType = (source) => {
  if (!source || "string" !== typeof source) {
    return false;
  }
  if (/^\s*<svg[^>]*>(.|\r?\n)*?<\/svg>\s*$/i.test(source)) {
    return "svg";
  }
  if (/data:.*base64|\.|[^<\s]\/{1,1}/.test(source)) {
    return "image";
  }
  if (/^[\w-_]+$/.test(source)) {
    return "dxIcon";
  }
  if (/^\s?([\w-_:]\s?)+$/.test(source)) {
    return "fontIcon";
  }
  return false;
};
var getImageContainer = (source) => {
  switch (getImageSourceType(source)) {
    case "image":
      return renderer_default("<img>").attr("src", source).addClass(ICON_CLASS);
    case "fontIcon":
      return renderer_default("<i>").addClass("".concat(ICON_CLASS, " ").concat(source));
    case "dxIcon":
      return renderer_default("<i>").addClass("".concat(ICON_CLASS, " ").concat(ICON_CLASS, "-").concat(source));
    case "svg":
      return renderer_default("<i>").addClass("".concat(ICON_CLASS, " ").concat(SVG_ICON_CLASS)).append(source);
    default:
      return null;
  }
};

// node_modules/devextreme/esm/core/utils/stubs.js
function stubComponent(componentName) {
  return class {
    constructor() {
      throw new Error("Module '".concat(componentName, "' not found"));
    }
    static getInstance() {
    }
  };
}

// node_modules/devextreme/esm/ui/widget/ui.search_box_mixin.js
var EditorClass = stubComponent("TextBox");
var ui_search_box_mixin_default = {
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      searchMode: "",
      searchExpr: null,
      searchValue: "",
      searchEnabled: false,
      searchEditorOptions: {}
    });
  },
  _initMarkup: function() {
    this._renderSearch();
    this.callBase();
  },
  _renderSearch: function() {
    var $element = this.$element();
    var searchEnabled = this.option("searchEnabled");
    var searchBoxClassName = this._addWidgetPrefix("search");
    var rootElementClassName = this._addWidgetPrefix("with-search");
    if (!searchEnabled) {
      $element.removeClass(rootElementClassName);
      this._removeSearchBox();
      return;
    }
    var editorOptions = this._getSearchEditorOptions();
    if (this._searchEditor) {
      this._searchEditor.option(editorOptions);
    } else {
      $element.addClass(rootElementClassName);
      this._$searchEditorElement = renderer_default("<div>").addClass(searchBoxClassName).prependTo($element);
      this._searchEditor = this._createComponent(this._$searchEditorElement, EditorClass, editorOptions);
    }
  },
  _removeSearchBox: function() {
    this._$searchEditorElement && this._$searchEditorElement.remove();
    delete this._$searchEditorElement;
    delete this._searchEditor;
  },
  _getSearchEditorOptions: function() {
    var that = this;
    var userEditorOptions = that.option("searchEditorOptions");
    var searchText = message_default.format("Search");
    return extend({
      mode: "search",
      placeholder: searchText,
      tabIndex: that.option("tabIndex"),
      value: that.option("searchValue"),
      valueChangeEvent: "input",
      inputAttr: {
        "aria-label": searchText
      },
      onValueChanged: function(e) {
        var searchTimeout = that.option("searchTimeout");
        that._valueChangeDeferred = new Deferred();
        clearTimeout(that._valueChangeTimeout);
        that._valueChangeDeferred.done((function() {
          this.option("searchValue", e.value);
        }).bind(that));
        if (e.event && "input" === e.event.type && searchTimeout) {
          that._valueChangeTimeout = setTimeout(function() {
            that._valueChangeDeferred.resolve();
          }, searchTimeout);
        } else {
          that._valueChangeDeferred.resolve();
        }
      }
    }, userEditorOptions);
  },
  _getAriaTarget: function() {
    if (this.option("searchEnabled")) {
      return this._itemContainer(true);
    }
    return this.callBase();
  },
  _focusTarget: function() {
    if (this.option("searchEnabled")) {
      return this._itemContainer(true);
    }
    return this.callBase();
  },
  _updateFocusState: function(e, isFocused) {
    if (this.option("searchEnabled")) {
      this._toggleFocusClass(isFocused, this.$element());
    }
    this.callBase(e, isFocused);
  },
  getOperationBySearchMode: function(searchMode) {
    return "equals" === searchMode ? "=" : searchMode;
  },
  _optionChanged: function(args) {
    switch (args.name) {
      case "searchEnabled":
      case "searchEditorOptions":
        this._invalidate();
        break;
      case "searchExpr":
      case "searchMode":
      case "searchValue":
        if (!this._dataSource) {
          ui_errors_default.log("W1009");
          return;
        }
        if ("searchMode" === args.name) {
          this._dataSource.searchOperation(this.getOperationBySearchMode(args.value));
        } else {
          this._dataSource[args.name](args.value);
        }
        this._dataSource.load();
        break;
      case "searchTimeout":
        break;
      default:
        this.callBase(args);
    }
  },
  focus: function() {
    if (!this.option("focusedElement") && this.option("searchEnabled")) {
      this._searchEditor && this._searchEditor.focus();
      return;
    }
    this.callBase();
  },
  _cleanAria: function() {
    var $element = this.$element();
    this.setAria({
      role: null,
      activedescendant: null
    }, $element);
    $element.attr("tabIndex", null);
  },
  _clean() {
    this.callBase();
    this._cleanAria();
  },
  _refresh: function() {
    if (this._valueChangeDeferred) {
      this._valueChangeDeferred.resolve();
    }
    this.callBase();
  },
  setEditorClass: function(value2) {
    EditorClass = value2;
  }
};

// node_modules/devextreme/esm/ui/text_box/utils.caret.js
var {
  ios,
  mac
} = devices_default.real();
var isFocusingOnCaretChange = ios || mac;
var getCaret = function(input) {
  var range;
  try {
    range = {
      start: input.selectionStart,
      end: input.selectionEnd
    };
  } catch (e) {
    range = {
      start: 0,
      end: 0
    };
  }
  return range;
};
var setCaret = function(input, position3) {
  var body = dom_adapter_default.getBody();
  if (!body.contains(input) && !body.contains(input.getRootNode().host)) {
    return;
  }
  try {
    input.selectionStart = position3.start;
    input.selectionEnd = position3.end;
  } catch (e) {
  }
};
var caret = function(input, position3) {
  var force = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;
  input = renderer_default(input).get(0);
  if (!isDefined(position3)) {
    return getCaret(input);
  }
  if (!force && isFocusingOnCaretChange && dom_adapter_default.getActiveElement(input) !== input) {
    return;
  }
  setCaret(input, position3);
};
var utils_caret_default = caret;

// node_modules/devextreme/esm/ui/text_box/ui.text_editor.mask.rule.js
var EMPTY_CHAR = " ";
var BaseMaskRule = class_default.inherit({
  ctor: function(config3) {
    this._value = EMPTY_CHAR;
    extend(this, config3);
  },
  next: function(rule) {
    if (!arguments.length) {
      return this._next;
    }
    this._next = rule;
  },
  text: noop2,
  value: noop2,
  rawValue: noop2,
  handle: noop2,
  _prepareHandlingArgs: function(args, config3) {
    var _config$str, _config$start, _config$length;
    config3 = config3 || {};
    var handlingProperty = Object.prototype.hasOwnProperty.call(args, "value") ? "value" : "text";
    args[handlingProperty] = null !== (_config$str = config3.str) && void 0 !== _config$str ? _config$str : args[handlingProperty];
    args.start = null !== (_config$start = config3.start) && void 0 !== _config$start ? _config$start : args.start;
    args.length = null !== (_config$length = config3.length) && void 0 !== _config$length ? _config$length : args.length;
    args.index = args.index + 1;
    return args;
  },
  reset: noop2,
  clear: noop2,
  first: function(index2) {
    index2 = index2 || 0;
    return this.next().first(index2 + 1);
  },
  isAccepted: function() {
    return false;
  },
  adjustedCaret: function(caret3, isForwardDirection, char) {
    return isForwardDirection ? this._adjustedForward(caret3, 0, char) : this._adjustedBackward(caret3, 0, char);
  },
  _adjustedForward: noop2,
  _adjustedBackward: noop2,
  isValid: noop2
});
var EmptyMaskRule = BaseMaskRule.inherit({
  next: noop2,
  handle: function() {
    return 0;
  },
  text: function() {
    return "";
  },
  value: function() {
    return "";
  },
  first: function() {
    return 0;
  },
  rawValue: function() {
    return "";
  },
  adjustedCaret: function() {
    return 0;
  },
  isValid: function() {
    return true;
  }
});
var MaskRule = BaseMaskRule.inherit({
  text: function() {
    return (this._value !== EMPTY_CHAR ? this._value : this.maskChar) + this.next().text();
  },
  value: function() {
    return this._value + this.next().value();
  },
  rawValue: function() {
    return this._value + this.next().rawValue();
  },
  handle: function(args) {
    var str = Object.prototype.hasOwnProperty.call(args, "value") ? args.value : args.text;
    if (!str || !str.length || !args.length) {
      return 0;
    }
    if (args.start) {
      return this.next().handle(this._prepareHandlingArgs(args, {
        start: args.start - 1
      }));
    }
    var char = str[0];
    var rest = str.substring(1);
    this._tryAcceptChar(char, args);
    return this._accepted() ? this.next().handle(this._prepareHandlingArgs(args, {
      str: rest,
      length: args.length - 1
    })) + 1 : this.handle(this._prepareHandlingArgs(args, {
      str: rest,
      length: args.length - 1
    }));
  },
  clear: function(args) {
    this._tryAcceptChar(EMPTY_CHAR, args);
    this.next().clear(this._prepareHandlingArgs(args));
  },
  reset: function() {
    this._accepted(false);
    this.next().reset();
  },
  _tryAcceptChar: function(char, args) {
    this._accepted(false);
    if (!this._isAllowed(char, args)) {
      return;
    }
    var acceptedChar = char === EMPTY_CHAR ? this.maskChar : char;
    args.fullText = args.fullText.substring(0, args.index) + acceptedChar + args.fullText.substring(args.index + 1);
    this._accepted(true);
    this._value = char;
  },
  _accepted: function(value2) {
    if (!arguments.length) {
      return !!this._isAccepted;
    }
    this._isAccepted = !!value2;
  },
  first: function(index2) {
    return this._value === EMPTY_CHAR ? index2 || 0 : this.callBase(index2);
  },
  _isAllowed: function(char, args) {
    if (char === EMPTY_CHAR) {
      return true;
    }
    return this._isValid(char, args);
  },
  _isValid: function(char, args) {
    var allowedChars = this.allowedChars;
    if (allowedChars instanceof RegExp) {
      return allowedChars.test(char);
    }
    if (isFunction(allowedChars)) {
      return allowedChars(char, args.index, args.fullText);
    }
    if (Array.isArray(allowedChars)) {
      return allowedChars.includes(char);
    }
    return allowedChars === char;
  },
  isAccepted: function(caret3) {
    return 0 === caret3 ? this._accepted() : this.next().isAccepted(caret3 - 1);
  },
  _adjustedForward: function(caret3, index2, char) {
    if (index2 >= caret3) {
      return index2;
    }
    return this.next()._adjustedForward(caret3, index2 + 1, char) || index2 + 1;
  },
  _adjustedBackward: function(caret3, index2) {
    if (index2 >= caret3 - 1) {
      return caret3;
    }
    return this.next()._adjustedBackward(caret3, index2 + 1) || index2 + 1;
  },
  isValid: function(args) {
    return this._isValid(this._value, args) && this.next().isValid(this._prepareHandlingArgs(args));
  }
});
var StubMaskRule = MaskRule.inherit({
  value: function() {
    return this.next().value();
  },
  handle: function(args) {
    var hasValueProperty = Object.prototype.hasOwnProperty.call(args, "value");
    var str = hasValueProperty ? args.value : args.text;
    if (!str.length || !args.length) {
      return 0;
    }
    if (args.start || hasValueProperty) {
      return this.next().handle(this._prepareHandlingArgs(args, {
        start: args.start && args.start - 1
      }));
    }
    var char = str[0];
    var rest = str.substring(1);
    this._tryAcceptChar(char);
    var nextArgs = this._isAllowed(char) ? this._prepareHandlingArgs(args, {
      str: rest,
      length: args.length - 1
    }) : args;
    return this.next().handle(nextArgs) + 1;
  },
  clear: function(args) {
    this._accepted(false);
    this.next().clear(this._prepareHandlingArgs(args));
  },
  _tryAcceptChar: function(char) {
    this._accepted(this._isValid(char));
  },
  _isValid: function(char) {
    return char === this.maskChar;
  },
  first: function(index2) {
    index2 = index2 || 0;
    return this.next().first(index2 + 1);
  },
  _adjustedForward: function(caret3, index2, char) {
    if (index2 >= caret3 && char === this.maskChar) {
      return index2;
    }
    if (caret3 === index2 + 1 && this._accepted()) {
      return caret3;
    }
    return this.next()._adjustedForward(caret3, index2 + 1, char);
  },
  _adjustedBackward: function(caret3, index2) {
    if (index2 >= caret3 - 1) {
      return 0;
    }
    return this.next()._adjustedBackward(caret3, index2 + 1);
  },
  isValid: function(args) {
    return this.next().isValid(this._prepareHandlingArgs(args));
  }
});

// node_modules/devextreme/esm/ui/validation_engine.js
var EMAIL_VALIDATION_REGEX = /^[\d\w.+_-]+@[\d\w._-]+\.[\w]+$/i;
var STATUS = {
  valid: "valid",
  invalid: "invalid",
  pending: "pending"
};
var BaseRuleValidator = class {
  constructor() {
    this.NAME = "base";
  }
  defaultMessage(value2) {
    return message_default.getFormatter("validation-".concat(this.NAME))(value2);
  }
  defaultFormattedMessage(value2) {
    return message_default.getFormatter("validation-".concat(this.NAME, "-formatted"))(value2);
  }
  _isValueEmpty(value2) {
    return !rulesValidators.required.validate(value2, {});
  }
  validate(value2, rule) {
    var valueArray = Array.isArray(value2) ? value2 : [value2];
    var result2 = true;
    if (valueArray.length) {
      valueArray.every((itemValue) => {
        result2 = this._validate(itemValue, rule);
        return result2;
      });
    } else {
      result2 = this._validate(null, rule);
    }
    return result2;
  }
};
var RequiredRuleValidator = class extends BaseRuleValidator {
  constructor() {
    super();
    this.NAME = "required";
  }
  _validate(value2, rule) {
    if (!isDefined(value2)) {
      return false;
    }
    if (false === value2) {
      return false;
    }
    value2 = String(value2);
    if (rule.trim || !isDefined(rule.trim)) {
      value2 = value2.trim();
    }
    return "" !== value2;
  }
};
var NumericRuleValidator = class extends BaseRuleValidator {
  constructor() {
    super();
    this.NAME = "numeric";
  }
  _validate(value2, rule) {
    if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value2)) {
      return true;
    }
    if (rule.useCultureSettings && isString(value2)) {
      return !isNaN(number_default2.parse(value2));
    } else {
      return isNumeric(value2);
    }
  }
};
var RangeRuleValidator = class extends BaseRuleValidator {
  constructor() {
    super();
    this.NAME = "range";
  }
  _validate(value2, rule) {
    if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value2)) {
      return true;
    }
    var validNumber = rulesValidators.numeric.validate(value2, rule);
    var validValue = isDefined(value2) && "" !== value2;
    var number = validNumber ? parseFloat(value2) : validValue && value2.valueOf();
    var min = rule.min;
    var max = rule.max;
    if (!(validNumber || isDate(value2)) && !validValue) {
      return false;
    }
    if (isDefined(min)) {
      if (isDefined(max)) {
        return number >= min && number <= max;
      }
      return number >= min;
    } else if (isDefined(max)) {
      return number <= max;
    } else {
      throw errors_default.Error("E0101");
    }
  }
};
var StringLengthRuleValidator = class extends BaseRuleValidator {
  constructor() {
    super();
    this.NAME = "stringLength";
  }
  _validate(value2, rule) {
    var _value;
    value2 = String(null !== (_value = value2) && void 0 !== _value ? _value : "");
    if (rule.trim || !isDefined(rule.trim)) {
      value2 = value2.trim();
    }
    if (rule.ignoreEmptyValue && this._isValueEmpty(value2)) {
      return true;
    }
    return rulesValidators.range.validate(value2.length, extend({}, rule));
  }
};
var CustomRuleValidator = class extends BaseRuleValidator {
  constructor() {
    super();
    this.NAME = "custom";
  }
  validate(value2, rule) {
    if (rule.ignoreEmptyValue && this._isValueEmpty(value2)) {
      return true;
    }
    var validator = rule.validator;
    var dataGetter = validator && isFunction(validator.option) && validator.option("dataGetter");
    var extraParams = isFunction(dataGetter) && dataGetter();
    var params = {
      value: value2,
      validator,
      rule
    };
    if (extraParams) {
      extend(params, extraParams);
    }
    return rule.validationCallback(params);
  }
};
var AsyncRuleValidator = class extends CustomRuleValidator {
  constructor() {
    super();
    this.NAME = "async";
  }
  validate(value2, rule) {
    if (!isDefined(rule.reevaluate)) {
      extend(rule, {
        reevaluate: true
      });
    }
    if (rule.ignoreEmptyValue && this._isValueEmpty(value2)) {
      return true;
    }
    var validator = rule.validator;
    var dataGetter = validator && isFunction(validator.option) && validator.option("dataGetter");
    var extraParams = isFunction(dataGetter) && dataGetter();
    var params = {
      value: value2,
      validator,
      rule
    };
    if (extraParams) {
      extend(params, extraParams);
    }
    var callbackResult = rule.validationCallback(params);
    if (!isPromise(callbackResult)) {
      throw errors_default.Error("E0103");
    }
    return this._getWrappedPromise(fromPromise(callbackResult).promise());
  }
  _getWrappedPromise(promise) {
    var deferred = new Deferred();
    promise.then(function(res) {
      deferred.resolve(res);
    }, function(err) {
      var res = {
        isValid: false
      };
      if (isDefined(err)) {
        if (isString(err)) {
          res.message = err;
        } else if (isObject(err) && isDefined(err.message) && isString(err.message)) {
          res.message = err.message;
        }
      }
      deferred.resolve(res);
    });
    return deferred.promise();
  }
};
var CompareRuleValidator = class extends BaseRuleValidator {
  constructor() {
    super();
    this.NAME = "compare";
  }
  _validate(value2, rule) {
    if (!rule.comparisonTarget) {
      throw errors_default.Error("E0102");
    }
    if (rule.ignoreEmptyValue && this._isValueEmpty(value2)) {
      return true;
    }
    extend(rule, {
      reevaluate: true
    });
    var otherValue = rule.comparisonTarget();
    var type2 = rule.comparisonType || "==";
    switch (type2) {
      case "==":
        return value2 == otherValue;
      case "!=":
        return value2 != otherValue;
      case "===":
        return value2 === otherValue;
      case "!==":
        return value2 !== otherValue;
      case ">":
        return value2 > otherValue;
      case ">=":
        return value2 >= otherValue;
      case "<":
        return value2 < otherValue;
      case "<=":
        return value2 <= otherValue;
    }
  }
};
var PatternRuleValidator = class extends BaseRuleValidator {
  constructor() {
    super();
    this.NAME = "pattern";
  }
  _validate(value2, rule) {
    if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value2)) {
      return true;
    }
    var pattern = rule.pattern;
    if (isString(pattern)) {
      pattern = new RegExp(pattern);
    }
    return pattern.test(value2);
  }
};
var EmailRuleValidator = class extends BaseRuleValidator {
  constructor() {
    super();
    this.NAME = "email";
  }
  _validate(value2, rule) {
    if (false !== rule.ignoreEmptyValue && this._isValueEmpty(value2)) {
      return true;
    }
    return rulesValidators.pattern.validate(value2, extend({}, rule, {
      pattern: EMAIL_VALIDATION_REGEX
    }));
  }
};
var rulesValidators = {
  required: new RequiredRuleValidator(),
  numeric: new NumericRuleValidator(),
  range: new RangeRuleValidator(),
  stringLength: new StringLengthRuleValidator(),
  custom: new CustomRuleValidator(),
  async: new AsyncRuleValidator(),
  compare: new CompareRuleValidator(),
  pattern: new PatternRuleValidator(),
  email: new EmailRuleValidator()
};
var GroupConfig = class_default.inherit({
  ctor(group) {
    this.group = group;
    this.validators = [];
    this._pendingValidators = [];
    this._onValidatorStatusChanged = this._onValidatorStatusChanged.bind(this);
    this._resetValidationInfo();
    this._eventsStrategy = new EventsStrategy(this);
  },
  validate() {
    var result2 = {
      isValid: true,
      brokenRules: [],
      validators: [],
      status: STATUS.valid,
      complete: null
    };
    this._unsubscribeFromAllChangeEvents();
    this._pendingValidators = [];
    this._resetValidationInfo();
    each(this.validators, (_, validator) => {
      var validatorResult = validator.validate();
      result2.isValid = result2.isValid && validatorResult.isValid;
      if (validatorResult.brokenRules) {
        result2.brokenRules = result2.brokenRules.concat(validatorResult.brokenRules);
      }
      result2.validators.push(validator);
      if (validatorResult.status === STATUS.pending) {
        this._addPendingValidator(validator);
      }
      this._subscribeToChangeEvents(validator);
    });
    if (this._pendingValidators.length) {
      result2.status = STATUS.pending;
    } else {
      result2.status = result2.isValid ? STATUS.valid : STATUS.invalid;
      this._unsubscribeFromAllChangeEvents();
      this._raiseValidatedEvent(result2);
    }
    this._updateValidationInfo(result2);
    return extend({}, this._validationInfo.result);
  },
  _subscribeToChangeEvents(validator) {
    validator.on("validating", this._onValidatorStatusChanged);
    validator.on("validated", this._onValidatorStatusChanged);
  },
  _unsubscribeFromChangeEvents(validator) {
    validator.off("validating", this._onValidatorStatusChanged);
    validator.off("validated", this._onValidatorStatusChanged);
  },
  _unsubscribeFromAllChangeEvents() {
    each(this.validators, (_, validator) => {
      this._unsubscribeFromChangeEvents(validator);
    });
  },
  _updateValidationInfo(result2) {
    this._validationInfo.result = result2;
    if (result2.status !== STATUS.pending) {
      return;
    }
    if (!this._validationInfo.deferred) {
      this._validationInfo.deferred = new Deferred();
      this._validationInfo.result.complete = this._validationInfo.deferred.promise();
    }
  },
  _addPendingValidator(validator) {
    var foundValidator = grep(this._pendingValidators, function(val) {
      return val === validator;
    })[0];
    if (!foundValidator) {
      this._pendingValidators.push(validator);
    }
  },
  _removePendingValidator(validator) {
    var index2 = this._pendingValidators.indexOf(validator);
    if (index2 >= 0) {
      this._pendingValidators.splice(index2, 1);
    }
  },
  _orderBrokenRules(brokenRules) {
    var orderedRules = [];
    each(this.validators, function(_, validator) {
      var foundRules = grep(brokenRules, function(rule) {
        return rule.validator === validator;
      });
      if (foundRules.length) {
        orderedRules = orderedRules.concat(foundRules);
      }
    });
    return orderedRules;
  },
  _updateBrokenRules(result2) {
    if (!this._validationInfo.result) {
      return;
    }
    var brokenRules = this._validationInfo.result.brokenRules;
    var rules = grep(brokenRules, function(rule) {
      return rule.validator !== result2.validator;
    });
    if (result2.brokenRules) {
      brokenRules = rules.concat(result2.brokenRules);
    }
    this._validationInfo.result.brokenRules = this._orderBrokenRules(brokenRules);
  },
  _onValidatorStatusChanged(result2) {
    if (result2.status === STATUS.pending) {
      this._addPendingValidator(result2.validator);
      return;
    }
    this._resolveIfComplete(result2);
  },
  _resolveIfComplete(result2) {
    this._removePendingValidator(result2.validator);
    this._updateBrokenRules(result2);
    if (!this._pendingValidators.length) {
      this._unsubscribeFromAllChangeEvents();
      if (!this._validationInfo.result) {
        return;
      }
      this._validationInfo.result.status = 0 === this._validationInfo.result.brokenRules.length ? STATUS.valid : STATUS.invalid;
      this._validationInfo.result.isValid = this._validationInfo.result.status === STATUS.valid;
      var res = extend({}, this._validationInfo.result, {
        complete: null
      });
      var deferred = this._validationInfo.deferred;
      this._validationInfo.deferred = null;
      this._raiseValidatedEvent(res);
      deferred && setTimeout(() => {
        deferred.resolve(res);
      });
    }
  },
  _raiseValidatedEvent(result2) {
    this._eventsStrategy.fireEvent("validated", [result2]);
  },
  _resetValidationInfo() {
    this._validationInfo = {
      result: null,
      deferred: null
    };
  },
  _synchronizeValidationInfo() {
    if (this._validationInfo.result) {
      this._validationInfo.result.validators = this.validators;
    }
  },
  removeRegisteredValidator(validator) {
    var index2 = this.validators.indexOf(validator);
    if (index2 > -1) {
      this.validators.splice(index2, 1);
      this._synchronizeValidationInfo();
      this._resolveIfComplete({
        validator
      });
    }
  },
  registerValidator(validator) {
    if (!this.validators.includes(validator)) {
      this.validators.push(validator);
      this._synchronizeValidationInfo();
    }
  },
  reset() {
    each(this.validators, function(_, validator) {
      validator.reset();
    });
    this._pendingValidators = [];
    this._resetValidationInfo();
  },
  on(eventName, eventHandler) {
    this._eventsStrategy.on(eventName, eventHandler);
    return this;
  },
  off(eventName, eventHandler) {
    this._eventsStrategy.off(eventName, eventHandler);
    return this;
  }
});
var ValidationEngine = {
  groups: [],
  getGroupConfig(group) {
    var result2 = grep(this.groups, function(config3) {
      return config3.group === group;
    });
    if (result2.length) {
      return result2[0];
    }
  },
  findGroup($element, model) {
    var _$element$data, _$element$data$dxComp;
    var hasValidationGroup = null === (_$element$data = $element.data()) || void 0 === _$element$data ? void 0 : null === (_$element$data$dxComp = _$element$data.dxComponents) || void 0 === _$element$data$dxComp ? void 0 : _$element$data$dxComp.includes("dxValidationGroup");
    var validationGroup = hasValidationGroup && $element.dxValidationGroup("instance");
    if (validationGroup) {
      return validationGroup;
    }
    var $dxGroup = $element.parents(".dx-validationgroup").first();
    if ($dxGroup.length) {
      return $dxGroup.dxValidationGroup("instance");
    }
    return model;
  },
  initGroups() {
    this.groups = [];
    this.addGroup();
  },
  addGroup(group) {
    var config3 = this.getGroupConfig(group);
    if (!config3) {
      config3 = new GroupConfig(group);
      this.groups.push(config3);
    }
    return config3;
  },
  removeGroup(group) {
    var config3 = this.getGroupConfig(group);
    var index2 = this.groups.indexOf(config3);
    if (index2 > -1) {
      this.groups.splice(index2, 1);
    }
    return config3;
  },
  _setDefaultMessage(info) {
    var {
      rule,
      validator,
      name: name2
    } = info;
    if (!isDefined(rule.message)) {
      if (validator.defaultFormattedMessage && isDefined(name2)) {
        rule.message = validator.defaultFormattedMessage(name2);
      } else {
        rule.message = validator.defaultMessage();
      }
    }
  },
  _addBrokenRule(info) {
    var {
      result: result2,
      rule
    } = info;
    if (!result2.brokenRule) {
      result2.brokenRule = rule;
    }
    if (!result2.brokenRules) {
      result2.brokenRules = [];
    }
    result2.brokenRules.push(rule);
  },
  validate(value2, rules, name2) {
    var _rules$;
    var result2 = {
      name: name2,
      value: value2,
      brokenRule: null,
      brokenRules: null,
      isValid: true,
      validationRules: rules,
      pendingRules: null,
      status: STATUS.valid,
      complete: null
    };
    var validator = null === rules || void 0 === rules ? void 0 : null === (_rules$ = rules[0]) || void 0 === _rules$ ? void 0 : _rules$.validator;
    var asyncRuleItems = [];
    each(rules || [], (_, rule) => {
      var ruleValidator = rulesValidators[rule.type];
      var ruleValidationResult;
      if (ruleValidator) {
        if (isDefined(rule.isValid) && rule.value === value2 && !rule.reevaluate) {
          if (!rule.isValid) {
            result2.isValid = false;
            this._addBrokenRule({
              result: result2,
              rule
            });
            return false;
          }
          return true;
        }
        rule.value = value2;
        if ("async" === rule.type) {
          asyncRuleItems.push({
            rule,
            ruleValidator
          });
          return true;
        }
        ruleValidationResult = ruleValidator.validate(value2, rule);
        rule.isValid = ruleValidationResult;
        if (!ruleValidationResult) {
          result2.isValid = false;
          this._setDefaultMessage({
            rule,
            validator: ruleValidator,
            name: name2
          });
          this._addBrokenRule({
            result: result2,
            rule
          });
        }
        if (!rule.isValid) {
          return false;
        }
      } else {
        throw errors_default.Error("E0100");
      }
    });
    if (result2.isValid && !result2.brokenRules && asyncRuleItems.length) {
      result2 = this._validateAsyncRules({
        value: value2,
        items: asyncRuleItems,
        result: result2,
        name: name2
      });
    }
    this._synchronizeGroupValidationInfo(validator, result2);
    result2.status = result2.pendingRules ? STATUS.pending : result2.isValid ? STATUS.valid : STATUS.invalid;
    return result2;
  },
  _synchronizeGroupValidationInfo(validator, result2) {
    var _result$brokenRules;
    if (!validator) {
      return;
    }
    var groupConfig = ValidationEngine.getGroupConfig(validator._validationGroup);
    groupConfig._updateBrokenRules.call(groupConfig, {
      validator,
      brokenRules: null !== (_result$brokenRules = result2.brokenRules) && void 0 !== _result$brokenRules ? _result$brokenRules : []
    });
  },
  _validateAsyncRules(_ref) {
    var {
      result: result2,
      value: value2,
      items,
      name: name2
    } = _ref;
    var asyncResults = [];
    each(items, (_, item) => {
      var validateResult = item.ruleValidator.validate(value2, item.rule);
      if (!isPromise(validateResult)) {
        this._updateRuleConfig({
          rule: item.rule,
          ruleResult: this._getPatchedRuleResult(validateResult),
          validator: item.ruleValidator,
          name: name2
        });
      } else {
        if (!result2.pendingRules) {
          result2.pendingRules = [];
        }
        result2.pendingRules.push(item.rule);
        var asyncResult = validateResult.then((res) => {
          var ruleResult = this._getPatchedRuleResult(res);
          this._updateRuleConfig({
            rule: item.rule,
            ruleResult,
            validator: item.ruleValidator,
            name: name2
          });
          return ruleResult;
        });
        asyncResults.push(asyncResult);
      }
    });
    if (asyncResults.length) {
      result2.complete = Promise.all(asyncResults).then((values) => this._getAsyncRulesResult({
        result: result2,
        values
      }));
    }
    return result2;
  },
  _updateRuleConfig(_ref2) {
    var {
      rule,
      ruleResult,
      validator,
      name: name2
    } = _ref2;
    rule.isValid = ruleResult.isValid;
    if (!ruleResult.isValid) {
      if (isDefined(ruleResult.message) && isString(ruleResult.message) && ruleResult.message.length) {
        rule.message = ruleResult.message;
      } else {
        this._setDefaultMessage({
          rule,
          validator,
          name: name2
        });
      }
    }
  },
  _getPatchedRuleResult(ruleResult) {
    var result2;
    if (isObject(ruleResult)) {
      result2 = extend({}, ruleResult);
      if (!isDefined(result2.isValid)) {
        result2.isValid = true;
      }
    } else {
      result2 = {
        isValid: isBoolean(ruleResult) ? ruleResult : true
      };
    }
    return result2;
  },
  _getAsyncRulesResult(_ref3) {
    var {
      values,
      result: result2
    } = _ref3;
    each(values, (index2, val) => {
      if (false === val.isValid) {
        result2.isValid = val.isValid;
        var rule = result2.pendingRules[index2];
        this._addBrokenRule({
          result: result2,
          rule
        });
      }
    });
    result2.pendingRules = null;
    result2.complete = null;
    result2.status = result2.isValid ? STATUS.valid : STATUS.invalid;
    return result2;
  },
  registerValidatorInGroup(group, validator) {
    var groupConfig = ValidationEngine.addGroup(group);
    groupConfig.registerValidator.call(groupConfig, validator);
  },
  _shouldRemoveGroup(group, validatorsInGroup) {
    var isDefaultGroup = void 0 === group;
    var isValidationGroupInstance = group && "dxValidationGroup" === group.NAME;
    return !isDefaultGroup && !isValidationGroupInstance && !validatorsInGroup.length;
  },
  removeRegisteredValidator(group, validator) {
    var config3 = ValidationEngine.getGroupConfig(group);
    if (config3) {
      config3.removeRegisteredValidator.call(config3, validator);
      var validatorsInGroup = config3.validators;
      if (this._shouldRemoveGroup(group, validatorsInGroup)) {
        this.removeGroup(group);
      }
    }
  },
  initValidationOptions(options2) {
    var initedOptions = {};
    if (options2) {
      ["isValid", "validationStatus", "validationError", "validationErrors"].forEach((prop) => {
        if (prop in options2) {
          extend(initedOptions, this.synchronizeValidationOptions({
            name: prop,
            value: options2[prop]
          }, options2));
        }
      });
    }
    return initedOptions;
  },
  synchronizeValidationOptions(_ref4, options2) {
    var {
      name: name2,
      value: value2
    } = _ref4;
    switch (name2) {
      case "validationStatus":
        var isValid = value2 === STATUS.valid || value2 === STATUS.pending;
        return options2.isValid !== isValid ? {
          isValid
        } : {};
      case "isValid":
        var {
          validationStatus
        } = options2;
        var newStatus = validationStatus;
        if (value2 && validationStatus === STATUS.invalid) {
          newStatus = STATUS.valid;
        } else if (!value2 && validationStatus !== STATUS.invalid) {
          newStatus = STATUS.invalid;
        }
        return newStatus !== validationStatus ? {
          validationStatus: newStatus
        } : {};
      case "validationErrors":
        var validationError = !value2 || !value2.length ? null : value2[0];
        return options2.validationError !== validationError ? {
          validationError
        } : {};
      case "validationError":
        var {
          validationErrors
        } = options2;
        if (!value2 && validationErrors) {
          return {
            validationErrors: null
          };
        } else if (value2 && !validationErrors) {
          return {
            validationErrors: [value2]
          };
        } else if (value2 && validationErrors && value2 !== validationErrors[0]) {
          validationErrors[0] = value2;
          return {
            validationErrors: validationErrors.slice()
          };
        }
    }
    return {};
  },
  validateGroup(group) {
    var groupConfig = ValidationEngine.getGroupConfig(group);
    if (!groupConfig) {
      throw errors_default.Error("E0110");
    }
    return groupConfig.validate();
  },
  resetGroup(group) {
    var groupConfig = ValidationEngine.getGroupConfig(group);
    if (!groupConfig) {
      throw errors_default.Error("E0110");
    }
    return groupConfig.reset();
  }
};
ValidationEngine.initGroups();
var validation_engine_default = ValidationEngine;

// node_modules/devextreme/esm/ui/validation_message.js
var INVALID_MESSAGE = "dx-invalid-message";
var INVALID_MESSAGE_AUTO = "dx-invalid-message-auto";
var INVALID_MESSAGE_ALWAYS = "dx-invalid-message-always";
var INVALID_MESSAGE_CONTENT = "dx-invalid-message-content";
var VALIDATION_MESSAGE_MIN_WIDTH = 100;
var ValidationMessage = ui_overlay_default.inherit({
  _getDefaultOptions() {
    return extend(this.callBase(), {
      integrationOptions: {},
      templatesRenderAsynchronously: false,
      shading: false,
      width: "auto",
      height: "auto",
      hideOnOutsideClick: false,
      animation: null,
      visible: true,
      propagateOutsideClick: true,
      _checkParentVisibility: false,
      rtlEnabled: false,
      contentTemplate: this._renderInnerHtml,
      maxWidth: "100%",
      container: this.$element(),
      target: void 0,
      mode: "auto",
      validationErrors: void 0,
      preventScrollEvents: false,
      positionSide: "top",
      boundary: void 0,
      offset: {
        h: 0,
        v: 0
      },
      contentId: void 0
    });
  },
  _init() {
    this.callBase();
    this.updateMaxWidth();
    this._updatePosition();
  },
  _initMarkup() {
    this.callBase();
    this._ensureMessageNotEmpty();
    this._updatePositionByTarget();
    this._toggleModeClass();
    this._updateContentId();
  },
  _updatePositionByTarget: function() {
    var {
      target
    } = this.option();
    this.option("position.of", target);
  },
  _ensureMessageNotEmpty: function() {
    this._textMarkup = this._getTextMarkup();
    var shouldShowMessage = this.option("visible") && this._textMarkup;
    this._toggleVisibilityClasses(shouldShowMessage);
  },
  _toggleVisibilityClasses: function(visible2) {
    if (visible2) {
      this.$element().addClass(INVALID_MESSAGE);
      this.$wrapper().addClass(INVALID_MESSAGE);
    } else {
      this.$element().removeClass(INVALID_MESSAGE);
      this.$wrapper().removeClass(INVALID_MESSAGE);
    }
  },
  _updateContentId() {
    var {
      container,
      contentId
    } = this.option();
    var id = null !== contentId && void 0 !== contentId ? contentId : renderer_default(container).attr("aria-describedby");
    this.$content().addClass(INVALID_MESSAGE_CONTENT).attr("id", id);
  },
  _renderInnerHtml(element) {
    var $element = element && renderer_default(element);
    null === $element || void 0 === $element ? void 0 : $element.html(this._textMarkup);
  },
  _getTextMarkup() {
    var _this$option;
    var validationErrors = null !== (_this$option = this.option("validationErrors")) && void 0 !== _this$option ? _this$option : [];
    var validationErrorMessage = "";
    validationErrors.forEach((err) => {
      var _err$message;
      var separator = validationErrorMessage ? "<br />" : "";
      validationErrorMessage += separator + encodeHtml(null !== (_err$message = null === err || void 0 === err ? void 0 : err.message) && void 0 !== _err$message ? _err$message : "");
    });
    return validationErrorMessage;
  },
  _toggleModeClass() {
    var mode = this.option("mode");
    this.$wrapper().toggleClass(INVALID_MESSAGE_AUTO, "auto" === mode).toggleClass(INVALID_MESSAGE_ALWAYS, "always" === mode);
  },
  updateMaxWidth() {
    var target = this.option("target");
    var targetWidth = getOuterWidth(target);
    var maxWidth = "100%";
    if (targetWidth) {
      maxWidth = Math.max(targetWidth, VALIDATION_MESSAGE_MIN_WIDTH);
    }
    this.option({
      maxWidth
    });
  },
  _getPositionsArray: function(positionSide, rtlSide) {
    switch (positionSide) {
      case "top":
        return ["".concat(rtlSide, " bottom"), "".concat(rtlSide, " top")];
      case "left":
        return ["right", "left"];
      case "right":
        return ["left", "right"];
      default:
        return ["".concat(rtlSide, " top"), "".concat(rtlSide, " bottom")];
    }
  },
  _updatePosition: function() {
    var {
      positionSide,
      rtlEnabled,
      offset: componentOffset,
      boundary
    } = this.option();
    var rtlSide = getDefaultAlignment(rtlEnabled);
    var positions = this._getPositionsArray(positionSide, rtlSide);
    var offset2 = _extends({}, componentOffset);
    this.$element().addClass("dx-invalid-message-".concat(positionSide));
    if (rtlEnabled && "left" !== positionSide && "right" !== positionSide) {
      offset2.h = -offset2.h;
    }
    if ("top" === positionSide) {
      offset2.v = -offset2.v;
    }
    if ("left" === positionSide) {
      offset2.h = -offset2.h;
    }
    this.option("position", {
      offset: offset2,
      boundary,
      my: positions[0],
      at: positions[1],
      collision: "none flip"
    });
  },
  _optionChanged(args) {
    var {
      name: name2,
      value: value2,
      previousValue
    } = args;
    switch (name2) {
      case "target":
        this._updatePositionByTarget();
        this.updateMaxWidth();
        this.callBase(args);
        break;
      case "boundary":
        this.option("position.boundary", value2);
        break;
      case "mode":
        this._toggleModeClass(value2);
        break;
      case "rtlEnabled":
      case "offset":
      case "positionSide":
        this.$element().removeClass("dx-invalid-message-".concat(previousValue));
        this._updatePosition();
        break;
      case "container":
        this._updateContentId();
        this.callBase(args);
        break;
      case "contentId":
        this._updateContentId();
        break;
      case "validationErrors":
        this._ensureMessageNotEmpty();
        this._renderInnerHtml(this.$content());
        break;
      default:
        this.callBase(args);
    }
  }
});
component_registrator_default("dxValidationMessage", ValidationMessage);
var validation_message_default = ValidationMessage;

// node_modules/devextreme/esm/ui/editor/editor.js
var INVALID_MESSAGE_AUTO2 = "dx-invalid-message-auto";
var READONLY_STATE_CLASS = "dx-state-readonly";
var INVALID_CLASS = "dx-invalid";
var DX_INVALID_BADGE_CLASS = "dx-show-invalid-badge";
var VALIDATION_TARGET = "dx-validation-target";
var VALIDATION_STATUS_VALID = "valid";
var VALIDATION_STATUS_INVALID = "invalid";
var READONLY_NAMESPACE = "editorReadOnly";
var ALLOWED_STYLING_MODES = ["outlined", "filled", "underlined"];
var VALIDATION_MESSAGE_KEYS_MAP = {
  validationMessageMode: "mode",
  validationMessagePosition: "positionSide",
  validationMessageOffset: "offset",
  validationBoundary: "boundary"
};
var Editor = ui_widget_default.inherit({
  ctor: function() {
    this.showValidationMessageTimeout = null;
    this.validationRequest = callbacks_default();
    this.callBase.apply(this, arguments);
  },
  _createElement: function(element) {
    this.callBase(element);
    var $element = this.$element();
    if ($element) {
      data($element[0], VALIDATION_TARGET, this);
    }
  },
  _initOptions: function(options2) {
    this.callBase.apply(this, arguments);
    this.option(validation_engine_default.initValidationOptions(options2));
  },
  _init: function() {
    this._initialValue = this.option("value");
    this.callBase();
    this._options.cache("validationTooltipOptions", this.option("validationTooltipOptions"));
    var $element = this.$element();
    $element.addClass(DX_INVALID_BADGE_CLASS);
  },
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      value: null,
      name: "",
      onValueChanged: null,
      readOnly: false,
      isValid: true,
      validationError: null,
      validationErrors: null,
      validationStatus: VALIDATION_STATUS_VALID,
      validationMessageMode: "auto",
      validationMessagePosition: "bottom",
      validationBoundary: void 0,
      validationMessageOffset: {
        h: 0,
        v: 0
      },
      validationTooltipOptions: {},
      _showValidationMessage: true,
      isDirty: false
    });
  },
  _attachKeyboardEvents: function() {
    if (!this.option("readOnly")) {
      this.callBase();
    }
  },
  _setOptionsByReference: function() {
    this.callBase();
    extend(this._optionsByReference, {
      validationError: true
    });
  },
  _createValueChangeAction: function() {
    this._valueChangeAction = this._createActionByOption("onValueChanged", {
      excludeValidators: ["disabled", "readOnly"]
    });
  },
  _suppressValueChangeAction: function() {
    this._valueChangeActionSuppressed = true;
  },
  _resumeValueChangeAction: function() {
    this._valueChangeActionSuppressed = false;
  },
  _initMarkup: function() {
    var _this$option;
    this._toggleReadOnlyState();
    this._setSubmitElementName(this.option("name"));
    this.callBase();
    this._renderValidationState();
    null === (_this$option = this.option("_onMarkupRendered")) || void 0 === _this$option ? void 0 : _this$option();
  },
  _raiseValueChangeAction: function(value2, previousValue) {
    if (!this._valueChangeAction) {
      this._createValueChangeAction();
    }
    this._valueChangeAction(this._valueChangeArgs(value2, previousValue));
  },
  _valueChangeArgs: function(value2, previousValue) {
    return {
      value: value2,
      previousValue,
      event: this._valueChangeEventInstance
    };
  },
  _saveValueChangeEvent: function(e) {
    this._valueChangeEventInstance = e;
  },
  _focusInHandler: function(e) {
    var isValidationMessageShownOnFocus = "auto" === this.option("validationMessageMode");
    if (this._canValueBeChangedByClick() && isValidationMessageShownOnFocus) {
      var _this$_validationMess;
      var $validationMessageWrapper = null === (_this$_validationMess = this._validationMessage) || void 0 === _this$_validationMess ? void 0 : _this$_validationMess.$wrapper();
      null === $validationMessageWrapper || void 0 === $validationMessageWrapper ? void 0 : $validationMessageWrapper.removeClass(INVALID_MESSAGE_AUTO2);
      clearTimeout(this.showValidationMessageTimeout);
      this.showValidationMessageTimeout = setTimeout(() => null === $validationMessageWrapper || void 0 === $validationMessageWrapper ? void 0 : $validationMessageWrapper.addClass(INVALID_MESSAGE_AUTO2), 150);
    }
    return this.callBase(e);
  },
  _canValueBeChangedByClick: function() {
    return false;
  },
  _getStylingModePrefix: function() {
    return "dx-editor-";
  },
  _renderStylingMode: function() {
    var optionValue = this.option("stylingMode");
    var prefix = this._getStylingModePrefix();
    var allowedStylingClasses = ALLOWED_STYLING_MODES.map((mode) => prefix + mode);
    allowedStylingClasses.forEach((className) => this.$element().removeClass(className));
    var stylingModeClass = prefix + optionValue;
    if (-1 === allowedStylingClasses.indexOf(stylingModeClass)) {
      var defaultOptionValue = this._getDefaultOptions().stylingMode;
      var platformOptionValue = this._convertRulesToOptions(this._defaultOptionsRules()).stylingMode;
      stylingModeClass = prefix + (platformOptionValue || defaultOptionValue);
    }
    this.$element().addClass(stylingModeClass);
  },
  _getValidationErrors: function() {
    var validationErrors = this.option("validationErrors");
    if (!validationErrors && this.option("validationError")) {
      validationErrors = [this.option("validationError")];
    }
    return validationErrors;
  },
  _disposeValidationMessage: function() {
    if (this._$validationMessage) {
      this._$validationMessage.remove();
      this.setAria("describedby", null);
      this._$validationMessage = void 0;
      this._validationMessage = void 0;
    }
  },
  _toggleValidationClasses: function(isInvalid3) {
    this.$element().toggleClass(INVALID_CLASS, isInvalid3);
    this.setAria(VALIDATION_STATUS_INVALID, isInvalid3 || void 0);
  },
  _renderValidationState: function() {
    var isValid = this.option("isValid") && this.option("validationStatus") !== VALIDATION_STATUS_INVALID;
    var validationErrors = this._getValidationErrors();
    var $element = this.$element();
    this._toggleValidationClasses(!isValid);
    if (!hasWindow() || false === this.option("_showValidationMessage")) {
      return;
    }
    this._disposeValidationMessage();
    if (!isValid && validationErrors) {
      var {
        validationMessageMode,
        validationMessageOffset,
        validationBoundary,
        rtlEnabled
      } = this.option();
      this._$validationMessage = renderer_default("<div>").appendTo($element);
      var validationMessageContentId = "dx-".concat(new guid_default());
      this.setAria("describedby", validationMessageContentId);
      this._validationMessage = new validation_message_default(this._$validationMessage, extend({
        validationErrors,
        rtlEnabled,
        target: this._getValidationMessageTarget(),
        visualContainer: $element,
        mode: validationMessageMode,
        positionSide: this._getValidationMessagePosition(),
        offset: validationMessageOffset,
        boundary: validationBoundary,
        contentId: validationMessageContentId
      }, this._options.cache("validationTooltipOptions")));
      this._bindInnerWidgetOptions(this._validationMessage, "validationTooltipOptions");
    }
  },
  _getValidationMessagePosition: function() {
    return this.option("validationMessagePosition");
  },
  _getValidationMessageTarget: function() {
    return this.$element();
  },
  _toggleReadOnlyState: function() {
    var readOnly = this.option("readOnly");
    this._toggleBackspaceHandler(readOnly);
    this.$element().toggleClass(READONLY_STATE_CLASS, !!readOnly);
    this.setAria("readonly", readOnly || void 0);
  },
  _toggleBackspaceHandler: function(isReadOnly) {
    var $eventTarget = this._keyboardEventBindingTarget();
    var eventName = addNamespace2("keydown", READONLY_NAMESPACE);
    events_engine_default.off($eventTarget, eventName);
    if (isReadOnly) {
      events_engine_default.on($eventTarget, eventName, (e) => {
        if ("backspace" === normalizeKeyName(e)) {
          e.preventDefault();
        }
      });
    }
  },
  _dispose: function() {
    var element = this.$element()[0];
    data(element, VALIDATION_TARGET, null);
    clearTimeout(this.showValidationMessageTimeout);
    this._disposeValidationMessage();
    this.callBase();
  },
  _setSubmitElementName: function(name2) {
    var $submitElement = this._getSubmitElement();
    if (!$submitElement) {
      return;
    }
    if (name2.length > 0) {
      $submitElement.attr("name", name2);
    } else {
      $submitElement.removeAttr("name");
    }
  },
  _getSubmitElement: function() {
    return null;
  },
  _setValidationMessageOption: function(_ref) {
    var _this$_validationMess2;
    var {
      name: name2,
      value: value2
    } = _ref;
    var optionKey = VALIDATION_MESSAGE_KEYS_MAP[name2] ? VALIDATION_MESSAGE_KEYS_MAP[name2] : name2;
    null === (_this$_validationMess2 = this._validationMessage) || void 0 === _this$_validationMess2 ? void 0 : _this$_validationMess2.option(optionKey, value2);
  },
  _hasActiveElement: noop2,
  _optionChanged: function(args) {
    var _this$_validationMess3;
    switch (args.name) {
      case "onValueChanged":
        this._createValueChangeAction();
        break;
      case "readOnly":
        this._toggleReadOnlyState();
        this._refreshFocusState();
        break;
      case "value":
        if (args.value != args.previousValue) {
          this.option("isDirty", this._initialValue !== args.value);
          this.validationRequest.fire({
            value: args.value,
            editor: this
          });
        }
        if (!this._valueChangeActionSuppressed) {
          this._raiseValueChangeAction(args.value, args.previousValue);
          this._saveValueChangeEvent(void 0);
        }
        break;
      case "width":
        this.callBase(args);
        null === (_this$_validationMess3 = this._validationMessage) || void 0 === _this$_validationMess3 ? void 0 : _this$_validationMess3.updateMaxWidth();
        break;
      case "name":
        this._setSubmitElementName(args.value);
        break;
      case "isValid":
      case "validationError":
      case "validationErrors":
      case "validationStatus":
        this.option(validation_engine_default.synchronizeValidationOptions(args, this.option()));
        this._renderValidationState();
        break;
      case "validationBoundary":
      case "validationMessageMode":
      case "validationMessagePosition":
      case "validationMessageOffset":
        this._setValidationMessageOption(args);
        break;
      case "rtlEnabled":
        this._setValidationMessageOption(args);
        this.callBase(args);
        break;
      case "validationTooltipOptions":
        this._innerWidgetOptionChanged(this._validationMessage, args);
        break;
      case "_showValidationMessage":
      case "isDirty":
        break;
      default:
        this.callBase(args);
    }
  },
  _resetToInitialValue: function() {
    this.option("value", this._initialValue);
  },
  blur: function() {
    if (this._hasActiveElement()) {
      resetActiveElement();
    }
  },
  clear: function() {
    var defaultOptions3 = this._getDefaultOptions();
    this.option("value", defaultOptions3.value);
  },
  reset: function() {
    var value2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0;
    if (arguments.length) {
      this._initialValue = value2;
    }
    this._resetToInitialValue();
    this.option("isDirty", false);
    this.option("isValid", true);
  }
});
Editor.isEditor = (instance) => instance instanceof Editor;
var editor_default = Editor;

// node_modules/devextreme/esm/ui/text_box/texteditor_button_collection/button.js
var TextEditorButton = class {
  constructor(name2, editor, options2) {
    this.instance = null;
    this.$container = null;
    this.$placeMarker = null;
    this.editor = editor;
    this.name = name2;
    this.options = options2 || {};
  }
  _addPlaceMarker($container) {
    this.$placeMarker = renderer_default("<div>").appendTo($container);
  }
  _addToContainer($element) {
    var {
      $placeMarker,
      $container
    } = this;
    $placeMarker ? $placeMarker.replaceWith($element) : $element.appendTo($container);
  }
  _attachEvents() {
    throw "Not implemented";
  }
  _create() {
    throw "Not implemented";
  }
  _isRendered() {
    return !!this.instance;
  }
  _isVisible() {
    var {
      editor,
      options: options2
    } = this;
    return options2.visible || !editor.option("readOnly");
  }
  _isDisabled() {
    throw "Not implemented";
  }
  _shouldRender() {
    return this._isVisible() && !this._isRendered();
  }
  dispose() {
    var {
      instance,
      $placeMarker
    } = this;
    if (instance) {
      instance.dispose ? instance.dispose() : instance.remove();
      this.instance = null;
    }
    $placeMarker && $placeMarker.remove();
  }
  render() {
    var $container = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.$container;
    this.$container = $container;
    if (this._isVisible()) {
      var {
        instance,
        $element
      } = this._create();
      this.instance = instance;
      this._attachEvents(instance, $element);
    } else {
      this._addPlaceMarker($container);
    }
  }
  update() {
    if (this._shouldRender()) {
      this.render();
    }
    return !!this.instance;
  }
};

// node_modules/devextreme/esm/ui/text_box/ui.text_editor.clear.js
var pointerDown = pointer_default.down;
var STATE_INVISIBLE_CLASS = "dx-state-invisible";
var TEXTEDITOR_CLEAR_BUTTON_CLASS = "dx-clear-button-area";
var TEXTEDITOR_CLEAR_ICON_CLASS = "dx-icon-clear";
var TEXTEDITOR_ICON_CLASS = "dx-icon";
var TEXTEDITOR_SHOW_CLEAR_BUTTON_CLASS = "dx-show-clear-button";
var ClearButton = class extends TextEditorButton {
  _create() {
    var $element = renderer_default("<span>").addClass(TEXTEDITOR_CLEAR_BUTTON_CLASS).append(renderer_default("<span>").addClass(TEXTEDITOR_ICON_CLASS).addClass(TEXTEDITOR_CLEAR_ICON_CLASS));
    this._addToContainer($element);
    this.update(true);
    return {
      instance: $element,
      $element
    };
  }
  _isVisible() {
    var {
      editor
    } = this;
    return editor._isClearButtonVisible();
  }
  _attachEvents(instance, $button) {
    var {
      editor
    } = this;
    var editorName = editor.NAME;
    events_engine_default.on($button, addNamespace2(pointerDown, editorName), (e) => {
      e.preventDefault();
      if ("mouse" !== e.pointerType) {
        editor._clearValueHandler(e);
      }
    });
    events_engine_default.on($button, addNamespace2(CLICK_EVENT_NAME, editorName), (e) => editor._clearValueHandler(e));
  }
  _legacyRender($editor, isVisible2) {
    $editor.toggleClass(TEXTEDITOR_SHOW_CLEAR_BUTTON_CLASS, isVisible2);
  }
  update() {
    var rendered = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : false;
    !rendered && super.update();
    var {
      editor,
      instance
    } = this;
    var $editor = editor.$element();
    var isVisible2 = this._isVisible();
    instance && instance.toggleClass(STATE_INVISIBLE_CLASS, !isVisible2);
    this._legacyRender($editor, isVisible2);
  }
};

// node_modules/inferno/dist/index.esm.js
var isArray = Array.isArray;
function isStringOrNumber(o) {
  var type2 = typeof o;
  return type2 === "string" || type2 === "number";
}
function isNullOrUndef(o) {
  return o === void 0 || o === null;
}
function isInvalid(o) {
  return o === null || o === false || o === true || o === void 0;
}
function isFunction2(o) {
  return typeof o === "function";
}
function isString2(o) {
  return typeof o === "string";
}
function isNumber(o) {
  return typeof o === "number";
}
function isNull(o) {
  return o === null;
}
function isUndefined(o) {
  return o === void 0;
}
function combineFrom(first, second) {
  var out = {};
  if (first) {
    for (var key in first) {
      out[key] = first[key];
    }
  }
  if (second) {
    for (var key$1 in second) {
      out[key$1] = second[key$1];
    }
  }
  return out;
}
function isLinkEventObject(o) {
  return !isNull(o) && typeof o === "object";
}
var EMPTY_OBJ = {};
var Fragment = "$F";
function normalizeEventName(name2) {
  return name2.substr(2).toLowerCase();
}
function appendChild(parentDOM, dom) {
  parentDOM.appendChild(dom);
}
function insertOrAppend(parentDOM, newNode, nextNode) {
  if (isNull(nextNode)) {
    appendChild(parentDOM, newNode);
  } else {
    parentDOM.insertBefore(newNode, nextNode);
  }
}
function documentCreateElement(tag, isSVG) {
  if (isSVG) {
    return document.createElementNS("http://www.w3.org/2000/svg", tag);
  }
  return document.createElement(tag);
}
function replaceChild(parentDOM, newDom, lastDom) {
  parentDOM.replaceChild(newDom, lastDom);
}
function removeChild(parentDOM, childNode) {
  parentDOM.removeChild(childNode);
}
function callAll(arrayFn) {
  for (var i = 0; i < arrayFn.length; i++) {
    arrayFn[i]();
  }
}
function findChildVNode(vNode, startEdge, flags) {
  var children = vNode.children;
  if (flags & 4) {
    return children.$LI;
  }
  if (flags & 8192) {
    return vNode.childFlags === 2 ? children : children[startEdge ? 0 : children.length - 1];
  }
  return children;
}
function findDOMfromVNode(vNode, startEdge) {
  var flags;
  while (vNode) {
    flags = vNode.flags;
    if (flags & 2033) {
      return vNode.dom;
    }
    vNode = findChildVNode(vNode, startEdge, flags);
  }
  return null;
}
function removeVNodeDOM(vNode, parentDOM) {
  do {
    var flags = vNode.flags;
    if (flags & 2033) {
      removeChild(parentDOM, vNode.dom);
      return;
    }
    var children = vNode.children;
    if (flags & 4) {
      vNode = children.$LI;
    }
    if (flags & 8) {
      vNode = children;
    }
    if (flags & 8192) {
      if (vNode.childFlags === 2) {
        vNode = children;
      } else {
        for (var i = 0, len = children.length; i < len; ++i) {
          removeVNodeDOM(children[i], parentDOM);
        }
        return;
      }
    }
  } while (vNode);
}
function moveVNodeDOM(vNode, parentDOM, nextNode) {
  do {
    var flags = vNode.flags;
    if (flags & 2033) {
      insertOrAppend(parentDOM, vNode.dom, nextNode);
      return;
    }
    var children = vNode.children;
    if (flags & 4) {
      vNode = children.$LI;
    }
    if (flags & 8) {
      vNode = children;
    }
    if (flags & 8192) {
      if (vNode.childFlags === 2) {
        vNode = children;
      } else {
        for (var i = 0, len = children.length; i < len; ++i) {
          moveVNodeDOM(children[i], parentDOM, nextNode);
        }
        return;
      }
    }
  } while (vNode);
}
function createDerivedState(instance, nextProps, state) {
  if (instance.constructor.getDerivedStateFromProps) {
    return combineFrom(state, instance.constructor.getDerivedStateFromProps(nextProps, state));
  }
  return state;
}
var renderCheck = {
  v: false
};
var options = {
  componentComparator: null,
  createVNode: null,
  renderComplete: null
};
function setTextContent(dom, children) {
  dom.textContent = children;
}
function isLastValueSameLinkEvent(lastValue, nextValue) {
  return isLinkEventObject(lastValue) && lastValue.event === nextValue.event && lastValue.data === nextValue.data;
}
function mergeUnsetProperties(to, from) {
  for (var propName in from) {
    if (isUndefined(to[propName])) {
      to[propName] = from[propName];
    }
  }
  return to;
}
function safeCall1(method, arg1) {
  return !!isFunction2(method) && (method(arg1), true);
}
var keyPrefix = "$";
function V(childFlags, children, className, flags, key, props, ref, type2) {
  this.childFlags = childFlags;
  this.children = children;
  this.className = className;
  this.dom = null;
  this.flags = flags;
  this.key = key === void 0 ? null : key;
  this.props = props === void 0 ? null : props;
  this.ref = ref === void 0 ? null : ref;
  this.type = type2;
}
function createVNode(flags, type2, className, children, childFlags, props, key, ref) {
  var childFlag = childFlags === void 0 ? 1 : childFlags;
  var vNode = new V(childFlag, children, className, flags, key, props, ref, type2);
  if (options.createVNode) {
    options.createVNode(vNode);
  }
  if (childFlag === 0) {
    normalizeChildren(vNode, vNode.children);
  }
  return vNode;
}
function mergeDefaultHooks(flags, type2, ref) {
  if (flags & 4) {
    return ref;
  }
  var defaultHooks = (flags & 32768 ? type2.render : type2).defaultHooks;
  if (isNullOrUndef(defaultHooks)) {
    return ref;
  }
  if (isNullOrUndef(ref)) {
    return defaultHooks;
  }
  return mergeUnsetProperties(ref, defaultHooks);
}
function mergeDefaultProps(flags, type2, props) {
  var defaultProps = (flags & 32768 ? type2.render : type2).defaultProps;
  if (isNullOrUndef(defaultProps)) {
    return props;
  }
  if (isNullOrUndef(props)) {
    return combineFrom(defaultProps, null);
  }
  return mergeUnsetProperties(props, defaultProps);
}
function resolveComponentFlags(flags, type2) {
  if (flags & 12) {
    return flags;
  }
  if (type2.prototype && type2.prototype.render) {
    return 4;
  }
  if (type2.render) {
    return 32776;
  }
  return 8;
}
function createComponentVNode(flags, type2, props, key, ref) {
  flags = resolveComponentFlags(flags, type2);
  var vNode = new V(1, null, null, flags, key, mergeDefaultProps(flags, type2, props), mergeDefaultHooks(flags, type2, ref), type2);
  if (options.createVNode) {
    options.createVNode(vNode);
  }
  return vNode;
}
function createTextVNode(text, key) {
  return new V(1, isNullOrUndef(text) || text === true || text === false ? "" : text, null, 16, key, null, null, null);
}
function createFragment(children, childFlags, key) {
  var fragment = createVNode(8192, 8192, null, children, childFlags, null, key, null);
  switch (fragment.childFlags) {
    case 1:
      fragment.children = createVoidVNode();
      fragment.childFlags = 2;
      break;
    case 16:
      fragment.children = [createTextVNode(children)];
      fragment.childFlags = 4;
      break;
  }
  return fragment;
}
function normalizeProps(vNode) {
  var props = vNode.props;
  if (props) {
    var flags = vNode.flags;
    if (flags & 481) {
      if (props.children !== void 0 && isNullOrUndef(vNode.children)) {
        normalizeChildren(vNode, props.children);
      }
      if (props.className !== void 0) {
        if (isNullOrUndef(vNode.className)) {
          vNode.className = props.className || null;
        }
        props.className = void 0;
      }
    }
    if (props.key !== void 0) {
      vNode.key = props.key;
      props.key = void 0;
    }
    if (props.ref !== void 0) {
      if (flags & 8) {
        vNode.ref = combineFrom(vNode.ref, props.ref);
      } else {
        vNode.ref = props.ref;
      }
      props.ref = void 0;
    }
  }
  return vNode;
}
function cloneFragment(vNodeToClone) {
  var oldChildren = vNodeToClone.children;
  var childFlags = vNodeToClone.childFlags;
  return createFragment(childFlags === 2 ? directClone(oldChildren) : oldChildren.map(directClone), childFlags, vNodeToClone.key);
}
function directClone(vNodeToClone) {
  var flags = vNodeToClone.flags & -16385;
  var props = vNodeToClone.props;
  if (flags & 14) {
    if (!isNull(props)) {
      var propsToClone = props;
      props = {};
      for (var key in propsToClone) {
        props[key] = propsToClone[key];
      }
    }
  }
  if ((flags & 8192) === 0) {
    return new V(vNodeToClone.childFlags, vNodeToClone.children, vNodeToClone.className, flags, vNodeToClone.key, props, vNodeToClone.ref, vNodeToClone.type);
  }
  return cloneFragment(vNodeToClone);
}
function createVoidVNode() {
  return createTextVNode("", null);
}
function _normalizeVNodes(nodes, result2, index2, currentKey) {
  for (var len = nodes.length; index2 < len; index2++) {
    var n = nodes[index2];
    if (!isInvalid(n)) {
      var newKey = currentKey + keyPrefix + index2;
      if (isArray(n)) {
        _normalizeVNodes(n, result2, 0, newKey);
      } else {
        if (isStringOrNumber(n)) {
          n = createTextVNode(n, newKey);
        } else {
          var oldKey = n.key;
          var isPrefixedKey = isString2(oldKey) && oldKey[0] === keyPrefix;
          if (n.flags & 81920 || isPrefixedKey) {
            n = directClone(n);
          }
          n.flags |= 65536;
          if (!isPrefixedKey) {
            if (isNull(oldKey)) {
              n.key = newKey;
            } else {
              n.key = currentKey + oldKey;
            }
          } else if (oldKey.substring(0, currentKey.length) !== currentKey) {
            n.key = currentKey + oldKey;
          }
        }
        result2.push(n);
      }
    }
  }
}
function getFlagsForElementVnode(type2) {
  switch (type2) {
    case "svg":
      return 32;
    case "input":
      return 64;
    case "select":
      return 256;
    case "textarea":
      return 128;
    case Fragment:
      return 8192;
    default:
      return 1;
  }
}
function normalizeChildren(vNode, children) {
  var newChildren;
  var newChildFlags = 1;
  if (isInvalid(children)) {
    newChildren = children;
  } else if (isStringOrNumber(children)) {
    newChildFlags = 16;
    newChildren = children;
  } else if (isArray(children)) {
    var len = children.length;
    for (var i = 0; i < len; ++i) {
      var n = children[i];
      if (isInvalid(n) || isArray(n)) {
        newChildren = newChildren || children.slice(0, i);
        _normalizeVNodes(children, newChildren, i, "");
        break;
      } else if (isStringOrNumber(n)) {
        newChildren = newChildren || children.slice(0, i);
        newChildren.push(createTextVNode(n, keyPrefix + i));
      } else {
        var key = n.key;
        var needsCloning = (n.flags & 81920) > 0;
        var isNullKey = isNull(key);
        var isPrefixed = isString2(key) && key[0] === keyPrefix;
        if (needsCloning || isNullKey || isPrefixed) {
          newChildren = newChildren || children.slice(0, i);
          if (needsCloning || isPrefixed) {
            n = directClone(n);
          }
          if (isNullKey || isPrefixed) {
            n.key = keyPrefix + i;
          }
          newChildren.push(n);
        } else if (newChildren) {
          newChildren.push(n);
        }
        n.flags |= 65536;
      }
    }
    newChildren = newChildren || children;
    if (newChildren.length === 0) {
      newChildFlags = 1;
    } else {
      newChildFlags = 8;
    }
  } else {
    newChildren = children;
    newChildren.flags |= 65536;
    if (children.flags & 81920) {
      newChildren = directClone(children);
    }
    newChildFlags = 2;
  }
  vNode.children = newChildren;
  vNode.childFlags = newChildFlags;
  return vNode;
}
function normalizeRoot(input) {
  if (isInvalid(input) || isStringOrNumber(input)) {
    return createTextVNode(input, null);
  }
  if (isArray(input)) {
    return createFragment(input, 0, null);
  }
  return input.flags & 16384 ? directClone(input) : input;
}
var xlinkNS = "http://www.w3.org/1999/xlink";
var xmlNS = "http://www.w3.org/XML/1998/namespace";
var namespaces = {
  "xlink:actuate": xlinkNS,
  "xlink:arcrole": xlinkNS,
  "xlink:href": xlinkNS,
  "xlink:role": xlinkNS,
  "xlink:show": xlinkNS,
  "xlink:title": xlinkNS,
  "xlink:type": xlinkNS,
  "xml:base": xmlNS,
  "xml:lang": xmlNS,
  "xml:space": xmlNS
};
function getDelegatedEventObject(v) {
  return {
    onClick: v,
    onDblClick: v,
    onFocusIn: v,
    onFocusOut: v,
    onKeyDown: v,
    onKeyPress: v,
    onKeyUp: v,
    onMouseDown: v,
    onMouseMove: v,
    onMouseUp: v,
    onTouchEnd: v,
    onTouchMove: v,
    onTouchStart: v
  };
}
var attachedEventCounts = getDelegatedEventObject(0);
var attachedEvents = getDelegatedEventObject(null);
var syntheticEvents = getDelegatedEventObject(true);
function updateOrAddSyntheticEvent(name2, dom) {
  var eventsObject = dom.$EV;
  if (!eventsObject) {
    eventsObject = dom.$EV = getDelegatedEventObject(null);
  }
  if (!eventsObject[name2]) {
    if (++attachedEventCounts[name2] === 1) {
      attachedEvents[name2] = attachEventToDocument(name2);
    }
  }
  return eventsObject;
}
function unmountSyntheticEvent(name2, dom) {
  var eventsObject = dom.$EV;
  if (eventsObject && eventsObject[name2]) {
    if (--attachedEventCounts[name2] === 0) {
      document.removeEventListener(normalizeEventName(name2), attachedEvents[name2]);
      attachedEvents[name2] = null;
    }
    eventsObject[name2] = null;
  }
}
function handleSyntheticEvent(name2, lastEvent, nextEvent, dom) {
  if (isFunction2(nextEvent)) {
    updateOrAddSyntheticEvent(name2, dom)[name2] = nextEvent;
  } else if (isLinkEventObject(nextEvent)) {
    if (isLastValueSameLinkEvent(lastEvent, nextEvent)) {
      return;
    }
    updateOrAddSyntheticEvent(name2, dom)[name2] = nextEvent;
  } else {
    unmountSyntheticEvent(name2, dom);
  }
}
function getTargetNode(event) {
  return isFunction2(event.composedPath) ? event.composedPath()[0] : event.target;
}
function dispatchEvents(event, isClick, name2, eventData2) {
  var dom = getTargetNode(event);
  do {
    if (isClick && dom.disabled) {
      return;
    }
    var eventsObject = dom.$EV;
    if (eventsObject) {
      var currentEvent = eventsObject[name2];
      if (currentEvent) {
        eventData2.dom = dom;
        currentEvent.event ? currentEvent.event(currentEvent.data, event) : currentEvent(event);
        if (event.cancelBubble) {
          return;
        }
      }
    }
    dom = dom.parentNode;
  } while (!isNull(dom));
}
function stopPropagation() {
  this.cancelBubble = true;
  if (!this.immediatePropagationStopped) {
    this.stopImmediatePropagation();
  }
}
function isDefaultPrevented() {
  return this.defaultPrevented;
}
function isPropagationStopped() {
  return this.cancelBubble;
}
function extendEventProperties(event) {
  var eventData2 = {
    dom: document
  };
  event.isDefaultPrevented = isDefaultPrevented;
  event.isPropagationStopped = isPropagationStopped;
  event.stopPropagation = stopPropagation;
  Object.defineProperty(event, "currentTarget", {
    configurable: true,
    get: function get() {
      return eventData2.dom;
    }
  });
  return eventData2;
}
function rootClickEvent(name2) {
  return function(event) {
    if (event.button !== 0) {
      event.stopPropagation();
      return;
    }
    dispatchEvents(event, true, name2, extendEventProperties(event));
  };
}
function rootEvent(name2) {
  return function(event) {
    dispatchEvents(event, false, name2, extendEventProperties(event));
  };
}
function attachEventToDocument(name2) {
  var attachedEvent = name2 === "onClick" || name2 === "onDblClick" ? rootClickEvent(name2) : rootEvent(name2);
  document.addEventListener(normalizeEventName(name2), attachedEvent);
  return attachedEvent;
}
function isSameInnerHTML(dom, innerHTML) {
  var tempdom = document.createElement("i");
  tempdom.innerHTML = innerHTML;
  return tempdom.innerHTML === dom.innerHTML;
}
function triggerEventListener(props, methodName, e) {
  if (props[methodName]) {
    var listener = props[methodName];
    if (listener.event) {
      listener.event(listener.data, e);
    } else {
      listener(e);
    }
  } else {
    var nativeListenerName = methodName.toLowerCase();
    if (props[nativeListenerName]) {
      props[nativeListenerName](e);
    }
  }
}
function createWrappedFunction(methodName, applyValue) {
  var fnMethod = function(e) {
    var vNode = this.$V;
    if (!vNode) {
      return;
    }
    var props = vNode.props || EMPTY_OBJ;
    var dom = vNode.dom;
    if (isString2(methodName)) {
      triggerEventListener(props, methodName, e);
    } else {
      for (var i = 0; i < methodName.length; ++i) {
        triggerEventListener(props, methodName[i], e);
      }
    }
    if (isFunction2(applyValue)) {
      var newVNode = this.$V;
      var newProps = newVNode.props || EMPTY_OBJ;
      applyValue(newProps, dom, false, newVNode);
    }
  };
  Object.defineProperty(fnMethod, "wrapped", {
    configurable: false,
    enumerable: false,
    value: true,
    writable: false
  });
  return fnMethod;
}
function attachEvent(dom, eventName, handler) {
  var previousKey = "$" + eventName;
  var previousArgs = dom[previousKey];
  if (previousArgs) {
    if (previousArgs[1].wrapped) {
      return;
    }
    dom.removeEventListener(previousArgs[0], previousArgs[1]);
    dom[previousKey] = null;
  }
  if (isFunction2(handler)) {
    dom.addEventListener(eventName, handler);
    dom[previousKey] = [eventName, handler];
  }
}
function isCheckedType(type2) {
  return type2 === "checkbox" || type2 === "radio";
}
var onTextInputChange = createWrappedFunction("onInput", applyValueInput);
var wrappedOnChange = createWrappedFunction(["onClick", "onChange"], applyValueInput);
function emptywrapper(event) {
  event.stopPropagation();
}
emptywrapper.wrapped = true;
function inputEvents(dom, nextPropsOrEmpty) {
  if (isCheckedType(nextPropsOrEmpty.type)) {
    attachEvent(dom, "change", wrappedOnChange);
    attachEvent(dom, "click", emptywrapper);
  } else {
    attachEvent(dom, "input", onTextInputChange);
  }
}
function applyValueInput(nextPropsOrEmpty, dom) {
  var type2 = nextPropsOrEmpty.type;
  var value2 = nextPropsOrEmpty.value;
  var checked = nextPropsOrEmpty.checked;
  var multiple = nextPropsOrEmpty.multiple;
  var defaultValue = nextPropsOrEmpty.defaultValue;
  var hasValue = !isNullOrUndef(value2);
  if (type2 && type2 !== dom.type) {
    dom.setAttribute("type", type2);
  }
  if (!isNullOrUndef(multiple) && multiple !== dom.multiple) {
    dom.multiple = multiple;
  }
  if (!isNullOrUndef(defaultValue) && !hasValue) {
    dom.defaultValue = defaultValue + "";
  }
  if (isCheckedType(type2)) {
    if (hasValue) {
      dom.value = value2;
    }
    if (!isNullOrUndef(checked)) {
      dom.checked = checked;
    }
  } else {
    if (hasValue && dom.value !== value2) {
      dom.defaultValue = value2;
      dom.value = value2;
    } else if (!isNullOrUndef(checked)) {
      dom.checked = checked;
    }
  }
}
function updateChildOptions(vNode, value2) {
  if (vNode.type === "option") {
    updateChildOption(vNode, value2);
  } else {
    var children = vNode.children;
    var flags = vNode.flags;
    if (flags & 4) {
      updateChildOptions(children.$LI, value2);
    } else if (flags & 8) {
      updateChildOptions(children, value2);
    } else if (vNode.childFlags === 2) {
      updateChildOptions(children, value2);
    } else if (vNode.childFlags & 12) {
      for (var i = 0, len = children.length; i < len; ++i) {
        updateChildOptions(children[i], value2);
      }
    }
  }
}
function updateChildOption(vNode, value2) {
  var props = vNode.props || EMPTY_OBJ;
  var dom = vNode.dom;
  dom.value = props.value;
  if (props.value === value2 || isArray(value2) && value2.indexOf(props.value) !== -1) {
    dom.selected = true;
  } else if (!isNullOrUndef(value2) || !isNullOrUndef(props.selected)) {
    dom.selected = props.selected || false;
  }
}
var onSelectChange = createWrappedFunction("onChange", applyValueSelect);
function selectEvents(dom) {
  attachEvent(dom, "change", onSelectChange);
}
function applyValueSelect(nextPropsOrEmpty, dom, mounting, vNode) {
  var multiplePropInBoolean = Boolean(nextPropsOrEmpty.multiple);
  if (!isNullOrUndef(nextPropsOrEmpty.multiple) && multiplePropInBoolean !== dom.multiple) {
    dom.multiple = multiplePropInBoolean;
  }
  var index2 = nextPropsOrEmpty.selectedIndex;
  if (index2 === -1) {
    dom.selectedIndex = -1;
  }
  var childFlags = vNode.childFlags;
  if (childFlags !== 1) {
    var value2 = nextPropsOrEmpty.value;
    if (isNumber(index2) && index2 > -1 && dom.options[index2]) {
      value2 = dom.options[index2].value;
    }
    if (mounting && isNullOrUndef(value2)) {
      value2 = nextPropsOrEmpty.defaultValue;
    }
    updateChildOptions(vNode, value2);
  }
}
var onTextareaInputChange = createWrappedFunction("onInput", applyValueTextArea);
var wrappedOnChange$1 = createWrappedFunction("onChange");
function textAreaEvents(dom, nextPropsOrEmpty) {
  attachEvent(dom, "input", onTextareaInputChange);
  if (nextPropsOrEmpty.onChange) {
    attachEvent(dom, "change", wrappedOnChange$1);
  }
}
function applyValueTextArea(nextPropsOrEmpty, dom, mounting) {
  var value2 = nextPropsOrEmpty.value;
  var domValue = dom.value;
  if (isNullOrUndef(value2)) {
    if (mounting) {
      var defaultValue = nextPropsOrEmpty.defaultValue;
      if (!isNullOrUndef(defaultValue) && defaultValue !== domValue) {
        dom.defaultValue = defaultValue;
        dom.value = defaultValue;
      }
    }
  } else if (domValue !== value2) {
    dom.defaultValue = value2;
    dom.value = value2;
  }
}
function processElement(flags, vNode, dom, nextPropsOrEmpty, mounting, isControlled) {
  if (flags & 64) {
    applyValueInput(nextPropsOrEmpty, dom);
  } else if (flags & 256) {
    applyValueSelect(nextPropsOrEmpty, dom, mounting, vNode);
  } else if (flags & 128) {
    applyValueTextArea(nextPropsOrEmpty, dom, mounting);
  }
  if (isControlled) {
    dom.$V = vNode;
  }
}
function addFormElementEventHandlers(flags, dom, nextPropsOrEmpty) {
  if (flags & 64) {
    inputEvents(dom, nextPropsOrEmpty);
  } else if (flags & 256) {
    selectEvents(dom);
  } else if (flags & 128) {
    textAreaEvents(dom, nextPropsOrEmpty);
  }
}
function isControlledFormElement(nextPropsOrEmpty) {
  return nextPropsOrEmpty.type && isCheckedType(nextPropsOrEmpty.type) ? !isNullOrUndef(nextPropsOrEmpty.checked) : !isNullOrUndef(nextPropsOrEmpty.value);
}
function createRef() {
  return {
    current: null
  };
}
function unmountRef(ref) {
  if (ref) {
    if (!safeCall1(ref, null) && ref.current) {
      ref.current = null;
    }
  }
}
function mountRef(ref, value2, lifecycle) {
  if (ref && (isFunction2(ref) || ref.current !== void 0)) {
    lifecycle.push(function() {
      if (!safeCall1(ref, value2) && ref.current !== void 0) {
        ref.current = value2;
      }
    });
  }
}
function remove3(vNode, parentDOM) {
  unmount(vNode);
  removeVNodeDOM(vNode, parentDOM);
}
function unmount(vNode) {
  var flags = vNode.flags;
  var children = vNode.children;
  var ref;
  if (flags & 481) {
    ref = vNode.ref;
    var props = vNode.props;
    unmountRef(ref);
    var childFlags = vNode.childFlags;
    if (!isNull(props)) {
      var keys = Object.keys(props);
      for (var i = 0, len = keys.length; i < len; i++) {
        var key = keys[i];
        if (syntheticEvents[key]) {
          unmountSyntheticEvent(key, vNode.dom);
        }
      }
    }
    if (childFlags & 12) {
      unmountAllChildren(children);
    } else if (childFlags === 2) {
      unmount(children);
    }
  } else if (children) {
    if (flags & 4) {
      if (isFunction2(children.componentWillUnmount)) {
        children.componentWillUnmount();
      }
      unmountRef(vNode.ref);
      children.$UN = true;
      unmount(children.$LI);
    } else if (flags & 8) {
      ref = vNode.ref;
      if (!isNullOrUndef(ref) && isFunction2(ref.onComponentWillUnmount)) {
        ref.onComponentWillUnmount(findDOMfromVNode(vNode, true), vNode.props || EMPTY_OBJ);
      }
      unmount(children);
    } else if (flags & 1024) {
      remove3(children, vNode.ref);
    } else if (flags & 8192) {
      if (vNode.childFlags & 12) {
        unmountAllChildren(children);
      }
    }
  }
}
function unmountAllChildren(children) {
  for (var i = 0, len = children.length; i < len; ++i) {
    unmount(children[i]);
  }
}
function clearDOM(dom) {
  dom.textContent = "";
}
function removeAllChildren(dom, vNode, children) {
  unmountAllChildren(children);
  if (vNode.flags & 8192) {
    removeVNodeDOM(vNode, dom);
  } else {
    clearDOM(dom);
  }
}
function wrapLinkEvent(nextValue) {
  var ev = nextValue.event;
  return function(e) {
    ev(nextValue.data, e);
  };
}
function patchEvent(name2, lastValue, nextValue, dom) {
  if (isLinkEventObject(nextValue)) {
    if (isLastValueSameLinkEvent(lastValue, nextValue)) {
      return;
    }
    nextValue = wrapLinkEvent(nextValue);
  }
  attachEvent(dom, normalizeEventName(name2), nextValue);
}
function patchStyle(lastAttrValue, nextAttrValue, dom) {
  if (isNullOrUndef(nextAttrValue)) {
    dom.removeAttribute("style");
    return;
  }
  var domStyle = dom.style;
  var style;
  var value2;
  if (isString2(nextAttrValue)) {
    domStyle.cssText = nextAttrValue;
    return;
  }
  if (!isNullOrUndef(lastAttrValue) && !isString2(lastAttrValue)) {
    for (style in nextAttrValue) {
      value2 = nextAttrValue[style];
      if (value2 !== lastAttrValue[style]) {
        domStyle.setProperty(style, value2);
      }
    }
    for (style in lastAttrValue) {
      if (isNullOrUndef(nextAttrValue[style])) {
        domStyle.removeProperty(style);
      }
    }
  } else {
    for (style in nextAttrValue) {
      value2 = nextAttrValue[style];
      domStyle.setProperty(style, value2);
    }
  }
}
function patchDangerInnerHTML(lastValue, nextValue, lastVNode, dom) {
  var lastHtml = lastValue && lastValue.__html || "";
  var nextHtml = nextValue && nextValue.__html || "";
  if (lastHtml !== nextHtml) {
    if (!isNullOrUndef(nextHtml) && !isSameInnerHTML(dom, nextHtml)) {
      if (!isNull(lastVNode)) {
        if (lastVNode.childFlags & 12) {
          unmountAllChildren(lastVNode.children);
        } else if (lastVNode.childFlags === 2) {
          unmount(lastVNode.children);
        }
        lastVNode.children = null;
        lastVNode.childFlags = 1;
      }
      dom.innerHTML = nextHtml;
    }
  }
}
function patchProp(prop, lastValue, nextValue, dom, isSVG, hasControlledValue, lastVNode) {
  switch (prop) {
    case "children":
    case "childrenType":
    case "className":
    case "defaultValue":
    case "key":
    case "multiple":
    case "ref":
    case "selectedIndex":
      break;
    case "autoFocus":
      dom.autofocus = !!nextValue;
      break;
    case "allowfullscreen":
    case "autoplay":
    case "capture":
    case "checked":
    case "controls":
    case "default":
    case "disabled":
    case "hidden":
    case "indeterminate":
    case "loop":
    case "muted":
    case "novalidate":
    case "open":
    case "readOnly":
    case "required":
    case "reversed":
    case "scoped":
    case "seamless":
    case "selected":
      dom[prop] = !!nextValue;
      break;
    case "defaultChecked":
    case "value":
    case "volume":
      if (hasControlledValue && prop === "value") {
        break;
      }
      var value2 = isNullOrUndef(nextValue) ? "" : nextValue;
      if (dom[prop] !== value2) {
        dom[prop] = value2;
      }
      break;
    case "style":
      patchStyle(lastValue, nextValue, dom);
      break;
    case "dangerouslySetInnerHTML":
      patchDangerInnerHTML(lastValue, nextValue, lastVNode, dom);
      break;
    default:
      if (syntheticEvents[prop]) {
        handleSyntheticEvent(prop, lastValue, nextValue, dom);
      } else if (prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110) {
        patchEvent(prop, lastValue, nextValue, dom);
      } else if (isNullOrUndef(nextValue)) {
        dom.removeAttribute(prop);
      } else if (isSVG && namespaces[prop]) {
        dom.setAttributeNS(namespaces[prop], prop, nextValue);
      } else {
        dom.setAttribute(prop, nextValue);
      }
      break;
  }
}
function mountProps(vNode, flags, props, dom, isSVG) {
  var hasControlledValue = false;
  var isFormElement = (flags & 448) > 0;
  if (isFormElement) {
    hasControlledValue = isControlledFormElement(props);
    if (hasControlledValue) {
      addFormElementEventHandlers(flags, dom, props);
    }
  }
  for (var prop in props) {
    patchProp(prop, null, props[prop], dom, isSVG, hasControlledValue, null);
  }
  if (isFormElement) {
    processElement(flags, vNode, dom, props, true, hasControlledValue);
  }
}
function renderNewInput(instance, props, context2) {
  var nextInput = normalizeRoot(instance.render(props, instance.state, context2));
  var childContext = context2;
  if (isFunction2(instance.getChildContext)) {
    childContext = combineFrom(context2, instance.getChildContext());
  }
  instance.$CX = childContext;
  return nextInput;
}
function createClassComponentInstance(vNode, Component4, props, context2, isSVG, lifecycle) {
  var instance = new Component4(props, context2);
  var usesNewAPI = instance.$N = Boolean(Component4.getDerivedStateFromProps || instance.getSnapshotBeforeUpdate);
  instance.$SVG = isSVG;
  instance.$L = lifecycle;
  vNode.children = instance;
  instance.$BS = false;
  instance.context = context2;
  if (instance.props === EMPTY_OBJ) {
    instance.props = props;
  }
  if (!usesNewAPI) {
    if (isFunction2(instance.componentWillMount)) {
      instance.$BR = true;
      instance.componentWillMount();
      var pending = instance.$PS;
      if (!isNull(pending)) {
        var state = instance.state;
        if (isNull(state)) {
          instance.state = pending;
        } else {
          for (var key in pending) {
            state[key] = pending[key];
          }
        }
        instance.$PS = null;
      }
      instance.$BR = false;
    }
  } else {
    instance.state = createDerivedState(instance, props, instance.state);
  }
  instance.$LI = renderNewInput(instance, props, context2);
  return instance;
}
function renderFunctionalComponent(vNode, context2) {
  var props = vNode.props || EMPTY_OBJ;
  return vNode.flags & 32768 ? vNode.type.render(props, vNode.ref, context2) : vNode.type(props, context2);
}
function mount(vNode, parentDOM, context2, isSVG, nextNode, lifecycle) {
  var flags = vNode.flags |= 16384;
  if (flags & 481) {
    mountElement(vNode, parentDOM, context2, isSVG, nextNode, lifecycle);
  } else if (flags & 4) {
    mountClassComponent(vNode, parentDOM, context2, isSVG, nextNode, lifecycle);
  } else if (flags & 8) {
    mountFunctionalComponent(vNode, parentDOM, context2, isSVG, nextNode, lifecycle);
    mountFunctionalComponentCallbacks(vNode, lifecycle);
  } else if (flags & 512 || flags & 16) {
    mountText(vNode, parentDOM, nextNode);
  } else if (flags & 8192) {
    mountFragment(vNode, context2, parentDOM, isSVG, nextNode, lifecycle);
  } else if (flags & 1024) {
    mountPortal(vNode, context2, parentDOM, nextNode, lifecycle);
  } else
    ;
}
function mountPortal(vNode, context2, parentDOM, nextNode, lifecycle) {
  mount(vNode.children, vNode.ref, context2, false, null, lifecycle);
  var placeHolderVNode = createVoidVNode();
  mountText(placeHolderVNode, parentDOM, nextNode);
  vNode.dom = placeHolderVNode.dom;
}
function mountFragment(vNode, context2, parentDOM, isSVG, nextNode, lifecycle) {
  var children = vNode.children;
  var childFlags = vNode.childFlags;
  if (childFlags & 12 && children.length === 0) {
    childFlags = vNode.childFlags = 2;
    children = vNode.children = createVoidVNode();
  }
  if (childFlags === 2) {
    mount(children, parentDOM, context2, isSVG, nextNode, lifecycle);
  } else {
    mountArrayChildren(children, parentDOM, context2, isSVG, nextNode, lifecycle);
  }
}
function mountText(vNode, parentDOM, nextNode) {
  var dom = vNode.dom = document.createTextNode(vNode.children);
  if (!isNull(parentDOM)) {
    insertOrAppend(parentDOM, dom, nextNode);
  }
}
function mountElement(vNode, parentDOM, context2, isSVG, nextNode, lifecycle) {
  var flags = vNode.flags;
  var props = vNode.props;
  var className = vNode.className;
  var childFlags = vNode.childFlags;
  var dom = vNode.dom = documentCreateElement(vNode.type, isSVG = isSVG || (flags & 32) > 0);
  var children = vNode.children;
  if (!isNullOrUndef(className) && className !== "") {
    if (isSVG) {
      dom.setAttribute("class", className);
    } else {
      dom.className = className;
    }
  }
  if (childFlags === 16) {
    setTextContent(dom, children);
  } else if (childFlags !== 1) {
    var childrenIsSVG = isSVG && vNode.type !== "foreignObject";
    if (childFlags === 2) {
      if (children.flags & 16384) {
        vNode.children = children = directClone(children);
      }
      mount(children, dom, context2, childrenIsSVG, null, lifecycle);
    } else if (childFlags === 8 || childFlags === 4) {
      mountArrayChildren(children, dom, context2, childrenIsSVG, null, lifecycle);
    }
  }
  if (!isNull(parentDOM)) {
    insertOrAppend(parentDOM, dom, nextNode);
  }
  if (!isNull(props)) {
    mountProps(vNode, flags, props, dom, isSVG);
  }
  mountRef(vNode.ref, dom, lifecycle);
}
function mountArrayChildren(children, dom, context2, isSVG, nextNode, lifecycle) {
  for (var i = 0; i < children.length; ++i) {
    var child = children[i];
    if (child.flags & 16384) {
      children[i] = child = directClone(child);
    }
    mount(child, dom, context2, isSVG, nextNode, lifecycle);
  }
}
function mountClassComponent(vNode, parentDOM, context2, isSVG, nextNode, lifecycle) {
  var instance = createClassComponentInstance(vNode, vNode.type, vNode.props || EMPTY_OBJ, context2, isSVG, lifecycle);
  mount(instance.$LI, parentDOM, instance.$CX, isSVG, nextNode, lifecycle);
  mountClassComponentCallbacks(vNode.ref, instance, lifecycle);
}
function mountFunctionalComponent(vNode, parentDOM, context2, isSVG, nextNode, lifecycle) {
  mount(vNode.children = normalizeRoot(renderFunctionalComponent(vNode, context2)), parentDOM, context2, isSVG, nextNode, lifecycle);
}
function createClassMountCallback(instance) {
  return function() {
    instance.componentDidMount();
  };
}
function mountClassComponentCallbacks(ref, instance, lifecycle) {
  mountRef(ref, instance, lifecycle);
  if (isFunction2(instance.componentDidMount)) {
    lifecycle.push(createClassMountCallback(instance));
  }
}
function createOnMountCallback(ref, vNode) {
  return function() {
    ref.onComponentDidMount(findDOMfromVNode(vNode, true), vNode.props || EMPTY_OBJ);
  };
}
function mountFunctionalComponentCallbacks(vNode, lifecycle) {
  var ref = vNode.ref;
  if (!isNullOrUndef(ref)) {
    safeCall1(ref.onComponentWillMount, vNode.props || EMPTY_OBJ);
    if (isFunction2(ref.onComponentDidMount)) {
      lifecycle.push(createOnMountCallback(ref, vNode));
    }
  }
}
function replaceWithNewNode(lastVNode, nextVNode, parentDOM, context2, isSVG, lifecycle) {
  unmount(lastVNode);
  if ((nextVNode.flags & lastVNode.flags & 2033) !== 0) {
    mount(nextVNode, null, context2, isSVG, null, lifecycle);
    replaceChild(parentDOM, nextVNode.dom, lastVNode.dom);
  } else {
    mount(nextVNode, parentDOM, context2, isSVG, findDOMfromVNode(lastVNode, true), lifecycle);
    removeVNodeDOM(lastVNode, parentDOM);
  }
}
function patch(lastVNode, nextVNode, parentDOM, context2, isSVG, nextNode, lifecycle) {
  var nextFlags = nextVNode.flags |= 16384;
  if (lastVNode.flags !== nextFlags || lastVNode.type !== nextVNode.type || lastVNode.key !== nextVNode.key || nextFlags & 2048) {
    if (lastVNode.flags & 16384) {
      replaceWithNewNode(lastVNode, nextVNode, parentDOM, context2, isSVG, lifecycle);
    } else {
      mount(nextVNode, parentDOM, context2, isSVG, nextNode, lifecycle);
    }
  } else if (nextFlags & 481) {
    patchElement(lastVNode, nextVNode, context2, isSVG, nextFlags, lifecycle);
  } else if (nextFlags & 4) {
    patchClassComponent(lastVNode, nextVNode, parentDOM, context2, isSVG, nextNode, lifecycle);
  } else if (nextFlags & 8) {
    patchFunctionalComponent(lastVNode, nextVNode, parentDOM, context2, isSVG, nextNode, lifecycle);
  } else if (nextFlags & 16) {
    patchText(lastVNode, nextVNode);
  } else if (nextFlags & 512) {
    nextVNode.dom = lastVNode.dom;
  } else if (nextFlags & 8192) {
    patchFragment(lastVNode, nextVNode, parentDOM, context2, isSVG, lifecycle);
  } else {
    patchPortal(lastVNode, nextVNode, context2, lifecycle);
  }
}
function patchSingleTextChild(lastChildren, nextChildren, parentDOM) {
  if (lastChildren !== nextChildren) {
    if (lastChildren !== "") {
      parentDOM.firstChild.nodeValue = nextChildren;
    } else {
      setTextContent(parentDOM, nextChildren);
    }
  }
}
function patchContentEditableChildren(dom, nextChildren) {
  if (dom.textContent !== nextChildren) {
    dom.textContent = nextChildren;
  }
}
function patchFragment(lastVNode, nextVNode, parentDOM, context2, isSVG, lifecycle) {
  var lastChildren = lastVNode.children;
  var nextChildren = nextVNode.children;
  var lastChildFlags = lastVNode.childFlags;
  var nextChildFlags = nextVNode.childFlags;
  var nextNode = null;
  if (nextChildFlags & 12 && nextChildren.length === 0) {
    nextChildFlags = nextVNode.childFlags = 2;
    nextChildren = nextVNode.children = createVoidVNode();
  }
  var nextIsSingle = (nextChildFlags & 2) !== 0;
  if (lastChildFlags & 12) {
    var lastLen = lastChildren.length;
    if (
      // It uses keyed algorithm
      lastChildFlags & 8 && nextChildFlags & 8 || // It transforms from many to single
      nextIsSingle || // It will append more nodes
      !nextIsSingle && nextChildren.length > lastLen
    ) {
      nextNode = findDOMfromVNode(lastChildren[lastLen - 1], false).nextSibling;
    }
  }
  patchChildren(lastChildFlags, nextChildFlags, lastChildren, nextChildren, parentDOM, context2, isSVG, nextNode, lastVNode, lifecycle);
}
function patchPortal(lastVNode, nextVNode, context2, lifecycle) {
  var lastContainer = lastVNode.ref;
  var nextContainer = nextVNode.ref;
  var nextChildren = nextVNode.children;
  patchChildren(lastVNode.childFlags, nextVNode.childFlags, lastVNode.children, nextChildren, lastContainer, context2, false, null, lastVNode, lifecycle);
  nextVNode.dom = lastVNode.dom;
  if (lastContainer !== nextContainer && !isInvalid(nextChildren)) {
    var node = nextChildren.dom;
    removeChild(lastContainer, node);
    appendChild(nextContainer, node);
  }
}
function patchElement(lastVNode, nextVNode, context2, isSVG, nextFlags, lifecycle) {
  var dom = nextVNode.dom = lastVNode.dom;
  var lastProps = lastVNode.props;
  var nextProps = nextVNode.props;
  var isFormElement = false;
  var hasControlledValue = false;
  var nextPropsOrEmpty;
  isSVG = isSVG || (nextFlags & 32) > 0;
  if (lastProps !== nextProps) {
    var lastPropsOrEmpty = lastProps || EMPTY_OBJ;
    nextPropsOrEmpty = nextProps || EMPTY_OBJ;
    if (nextPropsOrEmpty !== EMPTY_OBJ) {
      isFormElement = (nextFlags & 448) > 0;
      if (isFormElement) {
        hasControlledValue = isControlledFormElement(nextPropsOrEmpty);
      }
      for (var prop in nextPropsOrEmpty) {
        var lastValue = lastPropsOrEmpty[prop];
        var nextValue = nextPropsOrEmpty[prop];
        if (lastValue !== nextValue) {
          patchProp(prop, lastValue, nextValue, dom, isSVG, hasControlledValue, lastVNode);
        }
      }
    }
    if (lastPropsOrEmpty !== EMPTY_OBJ) {
      for (var prop$1 in lastPropsOrEmpty) {
        if (isNullOrUndef(nextPropsOrEmpty[prop$1]) && !isNullOrUndef(lastPropsOrEmpty[prop$1])) {
          patchProp(prop$1, lastPropsOrEmpty[prop$1], null, dom, isSVG, hasControlledValue, lastVNode);
        }
      }
    }
  }
  var nextChildren = nextVNode.children;
  var nextClassName = nextVNode.className;
  if (lastVNode.className !== nextClassName) {
    if (isNullOrUndef(nextClassName)) {
      dom.removeAttribute("class");
    } else if (isSVG) {
      dom.setAttribute("class", nextClassName);
    } else {
      dom.className = nextClassName;
    }
  }
  if (nextFlags & 4096) {
    patchContentEditableChildren(dom, nextChildren);
  } else {
    patchChildren(lastVNode.childFlags, nextVNode.childFlags, lastVNode.children, nextChildren, dom, context2, isSVG && nextVNode.type !== "foreignObject", null, lastVNode, lifecycle);
  }
  if (isFormElement) {
    processElement(nextFlags, nextVNode, dom, nextPropsOrEmpty, false, hasControlledValue);
  }
  var nextRef = nextVNode.ref;
  var lastRef = lastVNode.ref;
  if (lastRef !== nextRef) {
    unmountRef(lastRef);
    mountRef(nextRef, dom, lifecycle);
  }
}
function replaceOneVNodeWithMultipleVNodes(lastChildren, nextChildren, parentDOM, context2, isSVG, lifecycle) {
  unmount(lastChildren);
  mountArrayChildren(nextChildren, parentDOM, context2, isSVG, findDOMfromVNode(lastChildren, true), lifecycle);
  removeVNodeDOM(lastChildren, parentDOM);
}
function patchChildren(lastChildFlags, nextChildFlags, lastChildren, nextChildren, parentDOM, context2, isSVG, nextNode, parentVNode, lifecycle) {
  switch (lastChildFlags) {
    case 2:
      switch (nextChildFlags) {
        case 2:
          patch(lastChildren, nextChildren, parentDOM, context2, isSVG, nextNode, lifecycle);
          break;
        case 1:
          remove3(lastChildren, parentDOM);
          break;
        case 16:
          unmount(lastChildren);
          setTextContent(parentDOM, nextChildren);
          break;
        default:
          replaceOneVNodeWithMultipleVNodes(lastChildren, nextChildren, parentDOM, context2, isSVG, lifecycle);
          break;
      }
      break;
    case 1:
      switch (nextChildFlags) {
        case 2:
          mount(nextChildren, parentDOM, context2, isSVG, nextNode, lifecycle);
          break;
        case 1:
          break;
        case 16:
          setTextContent(parentDOM, nextChildren);
          break;
        default:
          mountArrayChildren(nextChildren, parentDOM, context2, isSVG, nextNode, lifecycle);
          break;
      }
      break;
    case 16:
      switch (nextChildFlags) {
        case 16:
          patchSingleTextChild(lastChildren, nextChildren, parentDOM);
          break;
        case 2:
          clearDOM(parentDOM);
          mount(nextChildren, parentDOM, context2, isSVG, nextNode, lifecycle);
          break;
        case 1:
          clearDOM(parentDOM);
          break;
        default:
          clearDOM(parentDOM);
          mountArrayChildren(nextChildren, parentDOM, context2, isSVG, nextNode, lifecycle);
          break;
      }
      break;
    default:
      switch (nextChildFlags) {
        case 16:
          unmountAllChildren(lastChildren);
          setTextContent(parentDOM, nextChildren);
          break;
        case 2:
          removeAllChildren(parentDOM, parentVNode, lastChildren);
          mount(nextChildren, parentDOM, context2, isSVG, nextNode, lifecycle);
          break;
        case 1:
          removeAllChildren(parentDOM, parentVNode, lastChildren);
          break;
        default:
          var lastLength = lastChildren.length | 0;
          var nextLength = nextChildren.length | 0;
          if (lastLength === 0) {
            if (nextLength > 0) {
              mountArrayChildren(nextChildren, parentDOM, context2, isSVG, nextNode, lifecycle);
            }
          } else if (nextLength === 0) {
            removeAllChildren(parentDOM, parentVNode, lastChildren);
          } else if (nextChildFlags === 8 && lastChildFlags === 8) {
            patchKeyedChildren(lastChildren, nextChildren, parentDOM, context2, isSVG, lastLength, nextLength, nextNode, parentVNode, lifecycle);
          } else {
            patchNonKeyedChildren(lastChildren, nextChildren, parentDOM, context2, isSVG, lastLength, nextLength, nextNode, lifecycle);
          }
          break;
      }
      break;
  }
}
function createDidUpdate(instance, lastProps, lastState, snapshot, lifecycle) {
  lifecycle.push(function() {
    instance.componentDidUpdate(lastProps, lastState, snapshot);
  });
}
function updateClassComponent(instance, nextState, nextProps, parentDOM, context2, isSVG, force, nextNode, lifecycle) {
  var lastState = instance.state;
  var lastProps = instance.props;
  var usesNewAPI = Boolean(instance.$N);
  var hasSCU = isFunction2(instance.shouldComponentUpdate);
  if (usesNewAPI) {
    nextState = createDerivedState(instance, nextProps, nextState !== lastState ? combineFrom(lastState, nextState) : nextState);
  }
  if (force || !hasSCU || hasSCU && instance.shouldComponentUpdate(nextProps, nextState, context2)) {
    if (!usesNewAPI && isFunction2(instance.componentWillUpdate)) {
      instance.componentWillUpdate(nextProps, nextState, context2);
    }
    instance.props = nextProps;
    instance.state = nextState;
    instance.context = context2;
    var snapshot = null;
    var nextInput = renderNewInput(instance, nextProps, context2);
    if (usesNewAPI && isFunction2(instance.getSnapshotBeforeUpdate)) {
      snapshot = instance.getSnapshotBeforeUpdate(lastProps, lastState);
    }
    patch(instance.$LI, nextInput, parentDOM, instance.$CX, isSVG, nextNode, lifecycle);
    instance.$LI = nextInput;
    if (isFunction2(instance.componentDidUpdate)) {
      createDidUpdate(instance, lastProps, lastState, snapshot, lifecycle);
    }
  } else {
    instance.props = nextProps;
    instance.state = nextState;
    instance.context = context2;
  }
}
function patchClassComponent(lastVNode, nextVNode, parentDOM, context2, isSVG, nextNode, lifecycle) {
  var instance = nextVNode.children = lastVNode.children;
  if (isNull(instance)) {
    return;
  }
  instance.$L = lifecycle;
  var nextProps = nextVNode.props || EMPTY_OBJ;
  var nextRef = nextVNode.ref;
  var lastRef = lastVNode.ref;
  var nextState = instance.state;
  if (!instance.$N) {
    if (isFunction2(instance.componentWillReceiveProps)) {
      instance.$BR = true;
      instance.componentWillReceiveProps(nextProps, context2);
      if (instance.$UN) {
        return;
      }
      instance.$BR = false;
    }
    if (!isNull(instance.$PS)) {
      nextState = combineFrom(nextState, instance.$PS);
      instance.$PS = null;
    }
  }
  updateClassComponent(instance, nextState, nextProps, parentDOM, context2, isSVG, false, nextNode, lifecycle);
  if (lastRef !== nextRef) {
    unmountRef(lastRef);
    mountRef(nextRef, instance, lifecycle);
  }
}
function patchFunctionalComponent(lastVNode, nextVNode, parentDOM, context2, isSVG, nextNode, lifecycle) {
  var shouldUpdate = true;
  var nextProps = nextVNode.props || EMPTY_OBJ;
  var nextRef = nextVNode.ref;
  var lastProps = lastVNode.props;
  var nextHooksDefined = !isNullOrUndef(nextRef);
  var lastInput = lastVNode.children;
  if (nextHooksDefined && isFunction2(nextRef.onComponentShouldUpdate)) {
    shouldUpdate = nextRef.onComponentShouldUpdate(lastProps, nextProps);
  }
  if (shouldUpdate !== false) {
    if (nextHooksDefined && isFunction2(nextRef.onComponentWillUpdate)) {
      nextRef.onComponentWillUpdate(lastProps, nextProps);
    }
    var nextInput = normalizeRoot(renderFunctionalComponent(nextVNode, context2));
    patch(lastInput, nextInput, parentDOM, context2, isSVG, nextNode, lifecycle);
    nextVNode.children = nextInput;
    if (nextHooksDefined && isFunction2(nextRef.onComponentDidUpdate)) {
      nextRef.onComponentDidUpdate(lastProps, nextProps);
    }
  } else {
    nextVNode.children = lastInput;
  }
}
function patchText(lastVNode, nextVNode) {
  var nextText = nextVNode.children;
  var dom = nextVNode.dom = lastVNode.dom;
  if (nextText !== lastVNode.children) {
    dom.nodeValue = nextText;
  }
}
function patchNonKeyedChildren(lastChildren, nextChildren, dom, context2, isSVG, lastChildrenLength, nextChildrenLength, nextNode, lifecycle) {
  var commonLength = lastChildrenLength > nextChildrenLength ? nextChildrenLength : lastChildrenLength;
  var i = 0;
  var nextChild;
  var lastChild;
  for (; i < commonLength; ++i) {
    nextChild = nextChildren[i];
    lastChild = lastChildren[i];
    if (nextChild.flags & 16384) {
      nextChild = nextChildren[i] = directClone(nextChild);
    }
    patch(lastChild, nextChild, dom, context2, isSVG, nextNode, lifecycle);
    lastChildren[i] = nextChild;
  }
  if (lastChildrenLength < nextChildrenLength) {
    for (i = commonLength; i < nextChildrenLength; ++i) {
      nextChild = nextChildren[i];
      if (nextChild.flags & 16384) {
        nextChild = nextChildren[i] = directClone(nextChild);
      }
      mount(nextChild, dom, context2, isSVG, nextNode, lifecycle);
    }
  } else if (lastChildrenLength > nextChildrenLength) {
    for (i = commonLength; i < lastChildrenLength; ++i) {
      remove3(lastChildren[i], dom);
    }
  }
}
function patchKeyedChildren(a, b, dom, context2, isSVG, aLength, bLength, outerEdge, parentVNode, lifecycle) {
  var aEnd = aLength - 1;
  var bEnd = bLength - 1;
  var j = 0;
  var aNode = a[j];
  var bNode = b[j];
  var nextPos;
  var nextNode;
  outer: {
    while (aNode.key === bNode.key) {
      if (bNode.flags & 16384) {
        b[j] = bNode = directClone(bNode);
      }
      patch(aNode, bNode, dom, context2, isSVG, outerEdge, lifecycle);
      a[j] = bNode;
      ++j;
      if (j > aEnd || j > bEnd) {
        break outer;
      }
      aNode = a[j];
      bNode = b[j];
    }
    aNode = a[aEnd];
    bNode = b[bEnd];
    while (aNode.key === bNode.key) {
      if (bNode.flags & 16384) {
        b[bEnd] = bNode = directClone(bNode);
      }
      patch(aNode, bNode, dom, context2, isSVG, outerEdge, lifecycle);
      a[aEnd] = bNode;
      aEnd--;
      bEnd--;
      if (j > aEnd || j > bEnd) {
        break outer;
      }
      aNode = a[aEnd];
      bNode = b[bEnd];
    }
  }
  if (j > aEnd) {
    if (j <= bEnd) {
      nextPos = bEnd + 1;
      nextNode = nextPos < bLength ? findDOMfromVNode(b[nextPos], true) : outerEdge;
      while (j <= bEnd) {
        bNode = b[j];
        if (bNode.flags & 16384) {
          b[j] = bNode = directClone(bNode);
        }
        ++j;
        mount(bNode, dom, context2, isSVG, nextNode, lifecycle);
      }
    }
  } else if (j > bEnd) {
    while (j <= aEnd) {
      remove3(a[j++], dom);
    }
  } else {
    patchKeyedChildrenComplex(a, b, context2, aLength, bLength, aEnd, bEnd, j, dom, isSVG, outerEdge, parentVNode, lifecycle);
  }
}
function patchKeyedChildrenComplex(a, b, context2, aLength, bLength, aEnd, bEnd, j, dom, isSVG, outerEdge, parentVNode, lifecycle) {
  var aNode;
  var bNode;
  var nextPos;
  var i = 0;
  var aStart = j;
  var bStart = j;
  var aLeft = aEnd - j + 1;
  var bLeft = bEnd - j + 1;
  var sources = new Int32Array(bLeft + 1);
  var canRemoveWholeContent = aLeft === aLength;
  var moved = false;
  var pos = 0;
  var patched = 0;
  if (bLength < 4 || (aLeft | bLeft) < 32) {
    for (i = aStart; i <= aEnd; ++i) {
      aNode = a[i];
      if (patched < bLeft) {
        for (j = bStart; j <= bEnd; j++) {
          bNode = b[j];
          if (aNode.key === bNode.key) {
            sources[j - bStart] = i + 1;
            if (canRemoveWholeContent) {
              canRemoveWholeContent = false;
              while (aStart < i) {
                remove3(a[aStart++], dom);
              }
            }
            if (pos > j) {
              moved = true;
            } else {
              pos = j;
            }
            if (bNode.flags & 16384) {
              b[j] = bNode = directClone(bNode);
            }
            patch(aNode, bNode, dom, context2, isSVG, outerEdge, lifecycle);
            ++patched;
            break;
          }
        }
        if (!canRemoveWholeContent && j > bEnd) {
          remove3(aNode, dom);
        }
      } else if (!canRemoveWholeContent) {
        remove3(aNode, dom);
      }
    }
  } else {
    var keyIndex = {};
    for (i = bStart; i <= bEnd; ++i) {
      keyIndex[b[i].key] = i;
    }
    for (i = aStart; i <= aEnd; ++i) {
      aNode = a[i];
      if (patched < bLeft) {
        j = keyIndex[aNode.key];
        if (j !== void 0) {
          if (canRemoveWholeContent) {
            canRemoveWholeContent = false;
            while (i > aStart) {
              remove3(a[aStart++], dom);
            }
          }
          sources[j - bStart] = i + 1;
          if (pos > j) {
            moved = true;
          } else {
            pos = j;
          }
          bNode = b[j];
          if (bNode.flags & 16384) {
            b[j] = bNode = directClone(bNode);
          }
          patch(aNode, bNode, dom, context2, isSVG, outerEdge, lifecycle);
          ++patched;
        } else if (!canRemoveWholeContent) {
          remove3(aNode, dom);
        }
      } else if (!canRemoveWholeContent) {
        remove3(aNode, dom);
      }
    }
  }
  if (canRemoveWholeContent) {
    removeAllChildren(dom, parentVNode, a);
    mountArrayChildren(b, dom, context2, isSVG, outerEdge, lifecycle);
  } else if (moved) {
    var seq = lis_algorithm(sources);
    j = seq.length - 1;
    for (i = bLeft - 1; i >= 0; i--) {
      if (sources[i] === 0) {
        pos = i + bStart;
        bNode = b[pos];
        if (bNode.flags & 16384) {
          b[pos] = bNode = directClone(bNode);
        }
        nextPos = pos + 1;
        mount(bNode, dom, context2, isSVG, nextPos < bLength ? findDOMfromVNode(b[nextPos], true) : outerEdge, lifecycle);
      } else if (j < 0 || i !== seq[j]) {
        pos = i + bStart;
        bNode = b[pos];
        nextPos = pos + 1;
        moveVNodeDOM(bNode, dom, nextPos < bLength ? findDOMfromVNode(b[nextPos], true) : outerEdge);
      } else {
        j--;
      }
    }
  } else if (patched !== bLeft) {
    for (i = bLeft - 1; i >= 0; i--) {
      if (sources[i] === 0) {
        pos = i + bStart;
        bNode = b[pos];
        if (bNode.flags & 16384) {
          b[pos] = bNode = directClone(bNode);
        }
        nextPos = pos + 1;
        mount(bNode, dom, context2, isSVG, nextPos < bLength ? findDOMfromVNode(b[nextPos], true) : outerEdge, lifecycle);
      }
    }
  }
}
var result;
var p;
var maxLen = 0;
function lis_algorithm(arr) {
  var arrI = 0;
  var i = 0;
  var j = 0;
  var k = 0;
  var u = 0;
  var v = 0;
  var c = 0;
  var len = arr.length;
  if (len > maxLen) {
    maxLen = len;
    result = new Int32Array(len);
    p = new Int32Array(len);
  }
  for (; i < len; ++i) {
    arrI = arr[i];
    if (arrI !== 0) {
      j = result[k];
      if (arr[j] < arrI) {
        p[i] = j;
        result[++k] = i;
        continue;
      }
      u = 0;
      v = k;
      while (u < v) {
        c = u + v >> 1;
        if (arr[result[c]] < arrI) {
          u = c + 1;
        } else {
          v = c;
        }
      }
      if (arrI < arr[result[u]]) {
        if (u > 0) {
          p[i] = result[u - 1];
        }
        result[u] = i;
      }
    }
  }
  u = k + 1;
  var seq = new Int32Array(u);
  v = result[u - 1];
  while (u-- > 0) {
    seq[u] = v;
    v = p[v];
    result[u] = 0;
  }
  return seq;
}
var hasDocumentAvailable = typeof document !== "undefined";
if (hasDocumentAvailable) {
  if (window.Node) {
    Node.prototype.$EV = null;
    Node.prototype.$V = null;
  }
}
function __render(input, parentDOM, callback, context2) {
  var lifecycle = [];
  var rootInput = parentDOM.$V;
  renderCheck.v = true;
  if (isNullOrUndef(rootInput)) {
    if (!isNullOrUndef(input)) {
      if (input.flags & 16384) {
        input = directClone(input);
      }
      mount(input, parentDOM, context2, false, null, lifecycle);
      parentDOM.$V = input;
      rootInput = input;
    }
  } else {
    if (isNullOrUndef(input)) {
      remove3(rootInput, parentDOM);
      parentDOM.$V = null;
    } else {
      if (input.flags & 16384) {
        input = directClone(input);
      }
      patch(rootInput, input, parentDOM, context2, false, null, lifecycle);
      rootInput = parentDOM.$V = input;
    }
  }
  callAll(lifecycle);
  renderCheck.v = false;
  if (isFunction2(callback)) {
    callback();
  }
  if (isFunction2(options.renderComplete)) {
    options.renderComplete(rootInput, parentDOM);
  }
}
function render2(input, parentDOM, callback, context2) {
  if (callback === void 0)
    callback = null;
  if (context2 === void 0)
    context2 = EMPTY_OBJ;
  __render(input, parentDOM, callback, context2);
}
var QUEUE = [];
var nextTick = typeof Promise !== "undefined" ? Promise.resolve().then.bind(Promise.resolve()) : function(a) {
  window.setTimeout(a, 0);
};
var microTaskPending = false;
function queueStateChanges(component, newState, callback, force) {
  var pending = component.$PS;
  if (isFunction2(newState)) {
    newState = newState(pending ? combineFrom(component.state, pending) : component.state, component.props, component.context);
  }
  if (isNullOrUndef(pending)) {
    component.$PS = newState;
  } else {
    for (var stateKey in newState) {
      pending[stateKey] = newState[stateKey];
    }
  }
  if (!component.$BR) {
    if (!renderCheck.v) {
      if (QUEUE.length === 0) {
        applyState(component, force);
        if (isFunction2(callback)) {
          callback.call(component);
        }
        return;
      }
    }
    if (QUEUE.indexOf(component) === -1) {
      QUEUE.push(component);
    }
    if (force) {
      component.$F = true;
    }
    if (!microTaskPending) {
      microTaskPending = true;
      nextTick(rerender);
    }
    if (isFunction2(callback)) {
      var QU = component.$QU;
      if (!QU) {
        QU = component.$QU = [];
      }
      QU.push(callback);
    }
  } else if (isFunction2(callback)) {
    component.$L.push(callback.bind(component));
  }
}
function callSetStateCallbacks(component) {
  var queue = component.$QU;
  for (var i = 0; i < queue.length; ++i) {
    queue[i].call(component);
  }
  component.$QU = null;
}
function rerender() {
  var component;
  microTaskPending = false;
  while (component = QUEUE.shift()) {
    if (!component.$UN) {
      var force = component.$F;
      component.$F = false;
      applyState(component, force);
      if (component.$QU) {
        callSetStateCallbacks(component);
      }
    }
  }
}
function applyState(component, force) {
  if (force || !component.$BR) {
    var pendingState = component.$PS;
    component.$PS = null;
    var lifecycle = [];
    renderCheck.v = true;
    updateClassComponent(component, combineFrom(component.state, pendingState), component.props, findDOMfromVNode(component.$LI, true).parentNode, component.context, component.$SVG, force, null, lifecycle);
    callAll(lifecycle);
    renderCheck.v = false;
  } else {
    component.state = component.$PS;
    component.$PS = null;
  }
}
var Component2 = function Component3(props, context2) {
  this.state = null;
  this.$BR = false;
  this.$BS = true;
  this.$PS = null;
  this.$LI = null;
  this.$UN = false;
  this.$CX = null;
  this.$QU = null;
  this.$N = false;
  this.$L = null;
  this.$SVG = false;
  this.$F = false;
  this.props = props || EMPTY_OBJ;
  this.context = context2 || EMPTY_OBJ;
};
Component2.prototype.forceUpdate = function forceUpdate(callback) {
  if (this.$UN) {
    return;
  }
  queueStateChanges(this, {}, callback, true);
};
Component2.prototype.setState = function setState(newState, callback) {
  if (this.$UN) {
    return;
  }
  if (!this.$BS) {
    queueStateChanges(this, newState, callback, false);
  }
};
Component2.prototype.render = function render3(_nextProps, _nextState, _nextContext) {
  return null;
};

// node_modules/inferno/index.esm.js
if (true) {
  console.warn("You are running production build of Inferno in development mode. Use dev:module entry point.");
}

// node_modules/@devextreme/runtime/esm/inferno/effect_host.js
var InfernoEffectHost = {
  lockCount: 0,
  lock() {
    this.lockCount++;
  },
  callbacks: [],
  callEffects() {
    this.lockCount--;
    if (this.lockCount < 0) {
      throw new Error("Unexpected Effect Call");
    }
    if (this.lockCount === 0) {
      const effects = this.callbacks;
      this.callbacks = [];
      effects.forEach((callback) => callback());
    }
  }
};

// node_modules/@devextreme/runtime/esm/inferno/base_component.js
var areObjectsEqual = (firstObject, secondObject) => {
  const bothAreObjects = firstObject instanceof Object && secondObject instanceof Object;
  if (!bothAreObjects) {
    return firstObject === secondObject;
  }
  const firstObjectKeys = Object.keys(firstObject);
  const secondObjectKeys = Object.keys(secondObject);
  if (firstObjectKeys.length !== secondObjectKeys.length) {
    return false;
  }
  const hasDifferentElement = firstObjectKeys.some((key) => firstObject[key] !== secondObject[key]);
  return !hasDifferentElement;
};
var BaseInfernoComponent = class extends Component2 {
  constructor() {
    super(...arguments);
    this._pendingContext = this.context;
  }
  componentWillReceiveProps(_, context2) {
    this._pendingContext = context2 !== null && context2 !== void 0 ? context2 : {};
  }
  shouldComponentUpdate(nextProps, nextState) {
    return !areObjectsEqual(this.props, nextProps) || !areObjectsEqual(this.state, nextState) || !areObjectsEqual(this.context, this._pendingContext);
  }
};
var InfernoComponent = class extends BaseInfernoComponent {
  constructor() {
    super(...arguments);
    this._effects = [];
  }
  createEffects() {
    return [];
  }
  updateEffects() {
  }
  componentWillMount() {
    InfernoEffectHost.lock();
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  componentWillUpdate(_nextProps, _nextState, _context) {
    InfernoEffectHost.lock();
  }
  componentDidMount() {
    InfernoEffectHost.callbacks.push(() => {
      this._effects = this.createEffects();
    });
    InfernoEffectHost.callEffects();
  }
  componentDidUpdate() {
    InfernoEffectHost.callbacks.push(() => this.updateEffects());
    InfernoEffectHost.callEffects();
  }
  destroyEffects() {
    this._effects.forEach((e) => e.dispose());
  }
  componentWillUnmount() {
    this.destroyEffects();
  }
};
var InfernoWrapperComponent = class extends InfernoComponent {
  constructor() {
    super(...arguments);
    this.vDomElement = null;
  }
  vDomUpdateClasses() {
    const el = this.vDomElement;
    const currentClasses = el.className.length ? el.className.split(" ") : [];
    const addedClasses = currentClasses.filter((className) => el.dxClasses.previous.indexOf(className) < 0);
    const removedClasses = el.dxClasses.previous.filter((className) => currentClasses.indexOf(className) < 0);
    addedClasses.forEach((value2) => {
      const indexInRemoved = el.dxClasses.removed.indexOf(value2);
      if (indexInRemoved > -1) {
        el.dxClasses.removed.splice(indexInRemoved, 1);
      } else {
        el.dxClasses.added.push(value2);
      }
    });
    removedClasses.forEach((value2) => {
      const indexInAdded = el.dxClasses.added.indexOf(value2);
      if (indexInAdded > -1) {
        el.dxClasses.added.splice(indexInAdded, 1);
      } else {
        el.dxClasses.removed.push(value2);
      }
    });
  }
  componentDidMount() {
    const el = findDOMfromVNode(this.$LI, true);
    this.vDomElement = el;
    super.componentDidMount();
    el.dxClasses = el.dxClasses || {
      removed: [],
      added: [],
      previous: []
    };
    el.dxClasses.previous = (el === null || el === void 0 ? void 0 : el.className.length) ? el.className.split(" ") : [];
  }
  componentDidUpdate() {
    super.componentDidUpdate();
    const el = this.vDomElement;
    if (el !== null) {
      el.dxClasses.added.forEach((className) => el.classList.add(className));
      el.dxClasses.removed.forEach((className) => el.classList.remove(className));
      el.dxClasses.previous = el.className.length ? el.className.split(" ") : [];
    }
  }
  shouldComponentUpdate(nextProps, nextState) {
    const shouldUpdate = super.shouldComponentUpdate(nextProps, nextState);
    if (shouldUpdate) {
      this.vDomUpdateClasses();
    }
    return shouldUpdate;
  }
};

// node_modules/@devextreme/runtime/esm/inferno/create_context.js
var contextId = 0;
var createContext = function(defaultValue) {
  const id = contextId++;
  return {
    id,
    defaultValue,
    Provider: class extends Component2 {
      getChildContext() {
        return Object.assign(Object.assign({}, this.context), { [id]: this.props.value || defaultValue });
      }
      render() {
        return this.props.children;
      }
    }
  };
};

// node_modules/@devextreme/runtime/esm/inferno/effect.js
var InfernoEffect = class {
  constructor(effect, dependency) {
    this.dependency = dependency;
    this.effect = effect;
    this.destroy = effect();
  }
  update(dependency) {
    const currentDependency = this.dependency;
    if (dependency) {
      this.dependency = dependency;
    }
    if (!dependency || dependency.some((d, i) => currentDependency[i] !== d)) {
      this.dispose();
      this.destroy = this.effect();
    }
  }
  dispose() {
    if (this.destroy) {
      this.destroy();
    }
  }
};

// node_modules/@devextreme/runtime/esm/inferno/re_render_effect.js
var createReRenderEffect = () => new InfernoEffect(() => {
  rerender();
}, []);

// node_modules/@devextreme/runtime/esm/inferno/mocked/shared.js
var ERROR_MSG = "a runtime error occured! Use Inferno in development environment to find the error.";
function isNullOrUndef2(o) {
  return o === void 0 || o === null;
}
function isInvalid2(o) {
  return o === null || o === false || o === true || o === void 0;
}
function isFunction3(o) {
  return typeof o === "function";
}
function isNull2(o) {
  return o === null;
}
function throwError(message) {
  if (!message) {
    message = ERROR_MSG;
  }
  throw new Error(`Inferno Error: ${message}`);
}

// node_modules/@devextreme/runtime/esm/inferno/mocked/hydrate.js
function isSameInnerHTML2(dom, innerHTML) {
  const tempdom = document.createElement("i");
  tempdom.innerHTML = innerHTML;
  return tempdom.innerHTML === dom.innerHTML;
}
function findLastDOMFromVNode(vNode) {
  let flags;
  let children;
  while (vNode) {
    flags = vNode.flags;
    if (flags & 2033) {
      return vNode.dom;
    }
    children = vNode.children;
    if (flags & 8192) {
      vNode = vNode.childFlags === 2 ? children : children[children.length - 1];
    } else if (flags & 4) {
      vNode = children.$LI;
    } else {
      vNode = children;
    }
  }
  return null;
}
function isSamePropsInnerHTML(dom, props) {
  return Boolean(props && props.dangerouslySetInnerHTML && props.dangerouslySetInnerHTML.__html && isSameInnerHTML2(dom, props.dangerouslySetInnerHTML.__html));
}
function hydrateComponent(vNode, parentDOM, dom, context2, isSVG, isClass, lifecycle) {
  const type2 = vNode.type;
  const ref = vNode.ref;
  const props = vNode.props || EMPTY_OBJ;
  let currentNode;
  if (isClass) {
    const instance = createClassComponentInstance(vNode, type2, props, context2, isSVG, lifecycle);
    const input = instance.$LI;
    currentNode = hydrateVNode(input, parentDOM, dom, instance.$CX, isSVG, lifecycle);
    mountClassComponentCallbacks(ref, instance, lifecycle);
  } else {
    const input = normalizeRoot(renderFunctionalComponent(vNode, context2));
    currentNode = hydrateVNode(input, parentDOM, dom, context2, isSVG, lifecycle);
    vNode.children = input;
    mountFunctionalComponentCallbacks(vNode, lifecycle);
  }
  return currentNode;
}
function hydrateChildren(parentVNode, parentNode, currentNode, context2, isSVG, lifecycle) {
  const childFlags = parentVNode.childFlags;
  const children = parentVNode.children;
  const props = parentVNode.props;
  const flags = parentVNode.flags;
  if (childFlags !== 1) {
    if (childFlags === 2) {
      if (isNull2(currentNode)) {
        mount(children, parentNode, context2, isSVG, null, lifecycle);
      } else {
        currentNode = hydrateVNode(children, parentNode, currentNode, context2, isSVG, lifecycle);
        currentNode = currentNode ? currentNode.nextSibling : null;
      }
    } else if (childFlags === 16) {
      if (isNull2(currentNode)) {
        parentNode.appendChild(document.createTextNode(children));
      } else if (parentNode.childNodes.length !== 1 || currentNode.nodeType !== 3) {
        parentNode.textContent = children;
      } else if (currentNode.nodeValue !== children) {
        currentNode.nodeValue = children;
      }
      currentNode = null;
    } else if (childFlags & 12) {
      let prevVNodeIsTextNode = false;
      for (let i = 0, len = children.length; i < len; ++i) {
        const child = children[i];
        if (isNull2(currentNode) || prevVNodeIsTextNode && (child.flags & 16) > 0) {
          mount(child, parentNode, context2, isSVG, currentNode, lifecycle);
        } else {
          currentNode = hydrateVNode(child, parentNode, currentNode, context2, isSVG, lifecycle);
          currentNode = currentNode ? currentNode.nextSibling : null;
        }
        prevVNodeIsTextNode = (child.flags & 16) > 0;
      }
    }
    if ((flags & 8192) === 0) {
      let nextSibling = null;
      while (currentNode) {
        nextSibling = currentNode.nextSibling;
        parentNode.removeChild(currentNode);
        currentNode = nextSibling;
      }
    }
  } else if (!isNull2(parentNode.firstChild) && !isSamePropsInnerHTML(parentNode, props)) {
    parentNode.textContent = "";
    if (flags & 448) {
      parentNode.defaultValue = "";
    }
  }
}
function hydrateElement(vNode, parentDOM, dom, context2, isSVG, lifecycle) {
  const props = vNode.props;
  const className = vNode.className;
  const flags = vNode.flags;
  const ref = vNode.ref;
  isSVG = isSVG || (flags & 32) > 0;
  if (dom.nodeType !== 1) {
    mountElement(vNode, null, context2, isSVG, null, lifecycle);
    parentDOM.replaceChild(vNode.dom, dom);
  } else {
    vNode.dom = dom;
    hydrateChildren(vNode, dom, dom.firstChild, context2, isSVG, lifecycle);
    if (!isNull2(props)) {
      mountProps(vNode, flags, props, dom, isSVG);
    }
    if (isNullOrUndef2(className)) {
      if (dom.className !== "") {
        dom.removeAttribute("class");
      }
    } else if (isSVG) {
      dom.setAttribute("class", className);
    } else {
      dom.className = className;
    }
    mountRef(ref, dom, lifecycle);
  }
  return vNode.dom;
}
function hydrateText(vNode, parentDOM, dom) {
  if (dom.nodeType !== 3) {
    parentDOM.replaceChild(vNode.dom = document.createTextNode(vNode.children), dom);
  } else {
    const text = vNode.children;
    if (dom.nodeValue !== text) {
      dom.nodeValue = text;
    }
    vNode.dom = dom;
  }
  return vNode.dom;
}
function hydrateFragment(vNode, parentDOM, dom, context2, isSVG, lifecycle) {
  const children = vNode.children;
  if (vNode.childFlags === 2) {
    hydrateText(children, parentDOM, dom);
    return children.dom;
  }
  hydrateChildren(vNode, parentDOM, dom, context2, isSVG, lifecycle);
  return findLastDOMFromVNode(children[children.length - 1]);
}
function hydrateVNode(vNode, parentDOM, currentDom, context2, isSVG, lifecycle) {
  const flags = vNode.flags |= 16384;
  if (flags & 14) {
    return hydrateComponent(vNode, parentDOM, currentDom, context2, isSVG, (flags & 4) > 0, lifecycle);
  }
  if (flags & 481) {
    return hydrateElement(vNode, parentDOM, currentDom, context2, isSVG, lifecycle);
  }
  if (flags & 16) {
    return hydrateText(vNode, parentDOM, currentDom);
  }
  if (flags & 512) {
    return vNode.dom = currentDom;
  }
  if (flags & 8192) {
    return hydrateFragment(vNode, parentDOM, currentDom, context2, isSVG, lifecycle);
  }
  throwError();
  return null;
}
function hydrate(input, parentDOM, callback) {
  let dom = parentDOM.firstChild;
  if (isNull2(dom)) {
    render2(input, parentDOM, callback);
  } else {
    const lifecycle = [];
    if (!isInvalid2(input)) {
      dom = hydrateVNode(input, parentDOM, dom, {}, false, lifecycle);
    }
    while (dom && (dom = dom.nextSibling)) {
      parentDOM.removeChild(dom);
    }
    if (lifecycle.length > 0) {
      let listener;
      while ((listener = lifecycle.shift()) !== void 0) {
        listener();
      }
    }
  }
  parentDOM.$V = input;
  if (isFunction3(callback)) {
    callback();
  }
}

// node_modules/inferno-create-element/dist/index.esm.js
function isNullOrUndef3(o) {
  return o === void 0 || o === null;
}
function isString3(o) {
  return typeof o === "string";
}
function isUndefined2(o) {
  return o === void 0;
}
var componentHooks = {
  onComponentDidMount: 1,
  onComponentDidUpdate: 1,
  onComponentShouldUpdate: 1,
  onComponentWillMount: 1,
  onComponentWillUnmount: 1,
  onComponentWillUpdate: 1
};
function createElement(type2, props, _children) {
  var arguments$1 = arguments;
  var children;
  var ref = null;
  var key = null;
  var className = null;
  var flags = 0;
  var newProps;
  var childLen = arguments.length - 2;
  if (childLen === 1) {
    children = _children;
  } else if (childLen > 1) {
    children = [];
    while (childLen-- > 0) {
      children[childLen] = arguments$1[childLen + 2];
    }
  }
  if (isString3(type2)) {
    flags = getFlagsForElementVnode(type2);
    if (!isNullOrUndef3(props)) {
      newProps = {};
      for (var prop in props) {
        if (prop === "className" || prop === "class") {
          className = props[prop];
        } else if (prop === "key") {
          key = props.key;
        } else if (prop === "children" && isUndefined2(children)) {
          children = props.children;
        } else if (prop === "ref") {
          ref = props.ref;
        } else {
          if (prop === "contenteditable") {
            flags |= 4096;
          }
          newProps[prop] = props[prop];
        }
      }
    }
  } else {
    flags = 2;
    if (!isUndefined2(children)) {
      if (!props) {
        props = {};
      }
      props.children = children;
    }
    if (!isNullOrUndef3(props)) {
      newProps = {};
      for (var prop$1 in props) {
        if (prop$1 === "key") {
          key = props.key;
        } else if (prop$1 === "ref") {
          ref = props.ref;
        } else if (componentHooks[prop$1] === 1) {
          if (!ref) {
            ref = {};
          }
          ref[prop$1] = props[prop$1];
        } else {
          newProps[prop$1] = props[prop$1];
        }
      }
    }
    return createComponentVNode(flags, type2, newProps, key, ref);
  }
  if (flags & 8192) {
    return createFragment(childLen === 1 ? [children] : children, 0, key);
  }
  return createVNode(flags, type2, className, children, 0, newProps, key, ref);
}

// node_modules/@devextreme/runtime/esm/inferno/render_template.js
var getContainer = (props) => {
  var _a2, _b2;
  return ((_a2 = props.container) === null || _a2 === void 0 ? void 0 : _a2.get(0)) || ((_b2 = props.item) === null || _b2 === void 0 ? void 0 : _b2.get(0));
};
function renderTemplate(template, props, _component) {
  setTimeout(() => {
    render2(createElement(template, props), getContainer(props));
  }, 0);
}
var hasTemplate = (name2, properties, _component) => {
  const value2 = properties[name2];
  return !!value2 && typeof value2 !== "string";
};

// node_modules/@devextreme/runtime/esm/inferno/normalize_styles.js
var NUMBER_STYLES = /* @__PURE__ */ new Set([
  "animationIterationCount",
  "borderImageOutset",
  "borderImageSlice",
  "border-imageWidth",
  "boxFlex",
  "boxFlexGroup",
  "boxOrdinalGroup",
  "columnCount",
  "fillOpacity",
  "flex",
  "flexGrow",
  "flexNegative",
  "flexOrder",
  "flexPositive",
  "flexShrink",
  "floodOpacity",
  "fontWeight",
  "gridColumn",
  "gridRow",
  "lineClamp",
  "lineHeight",
  "opacity",
  "order",
  "orphans",
  "stopOpacity",
  "strokeDasharray",
  "strokeDashoffset",
  "strokeMiterlimit",
  "strokeOpacity",
  "strokeWidth",
  "tabSize",
  "widows",
  "zIndex",
  "zoom"
]);
var isNumeric2 = (value2) => {
  if (typeof value2 === "number")
    return true;
  return !Number.isNaN(Number(value2));
};
var getNumberStyleValue = (style, value2) => NUMBER_STYLES.has(style) ? value2 : `${value2}px`;
var uppercasePattern = /[A-Z]/g;
var kebabCase = (str) => str.replace(uppercasePattern, "-$&").toLowerCase();
function normalizeStyles(styles) {
  if (!(styles instanceof Object)) {
    return void 0;
  }
  return Object.entries(styles).reduce((acc, [key, value2]) => {
    acc[kebabCase(key)] = isNumeric2(value2) ? getNumberStyleValue(key, value2) : value2;
    return acc;
  }, {});
}

// node_modules/devextreme/esm/core/inferno_renderer.js
var remove4 = (element) => {
  var {
    parentNode
  } = element;
  if (parentNode) {
    var nextSibling = element.nextSibling;
    cleanDataRecursive(element);
    parentNode.$V = element.$V;
    render2(null, parentNode);
    parentNode.insertBefore(element, nextSibling);
    element.innerHTML = "";
    delete parentNode.$V;
  }
  delete element.$V;
};
var inferno_renderer_default = dependency_injector_default({
  createElement: (component, props) => createElement(component, props),
  remove: remove4,
  onAfterRender: () => {
    InfernoEffectHost.callEffects();
  },
  onPreRender: () => {
    InfernoEffectHost.lock();
  },
  render: (component, props, container, replace) => {
    if (!replace) {
      var {
        parentNode
      } = container;
      var nextNode = null === container || void 0 === container ? void 0 : container.nextSibling;
      var rootNode = dom_adapter_default.createElement("div");
      rootNode.appendChild(container);
      var mountNode = dom_adapter_default.createDocumentFragment().appendChild(rootNode);
      var vNodeAlreadyExists = !!container.$V;
      vNodeAlreadyExists && remove4(container);
      hydrate(createElement(component, props), mountNode);
      container.$V = mountNode.$V;
      if (parentNode) {
        parentNode.insertBefore(container, nextNode);
      }
    } else {
      render2(createElement(component, props), container);
    }
  }
});

// node_modules/devextreme/esm/renovation/utils/shallow_equals.js
var shallowEquals = (firstObject, secondObject) => {
  if (Object.keys(firstObject).length !== Object.keys(secondObject).length) {
    return false;
  }
  return Object.keys(firstObject).every((key) => firstObject[key] === secondObject[key]);
};

// node_modules/devextreme/esm/renovation/component_wrapper/common/template_wrapper.js
var _excluded2 = ["isEqual"];
function isDxElementWrapper(element) {
  return !!element.toArray;
}
function buildTemplateArgs(model, template) {
  var _model$data;
  var args = {
    template,
    model: _extends({}, model)
  };
  var _ref = null !== (_model$data = model.data) && void 0 !== _model$data ? _model$data : {}, {
    isEqual: isEqual2
  } = _ref, data3 = _objectWithoutPropertiesLoose(_ref, _excluded2);
  if (isEqual2) {
    args.model.data = data3;
    args.isEqual = isEqual2;
  }
  return args;
}
function renderTemplateContent(props, container) {
  var _props$model;
  var {
    data: data3,
    index: index2
  } = null !== (_props$model = props.model) && void 0 !== _props$model ? _props$model : {
    data: {}
  };
  if (data3) {
    Object.keys(data3).forEach((name2) => {
      if (data3[name2] && dom_adapter_default.isNode(data3[name2])) {
        data3[name2] = getPublicElement(renderer_default(data3[name2]));
      }
    });
  }
  var rendered = props.template.render(_extends({
    container,
    transclude: props.transclude
  }, {
    renovated: props.renovated
  }, !props.transclude ? {
    model: data3
  } : {}, !props.transclude && Number.isFinite(index2) ? {
    index: index2
  } : {}));
  if (void 0 === rendered) {
    return [];
  }
  return isDxElementWrapper(rendered) ? rendered.toArray() : [renderer_default(rendered).get(0)];
}
function removeDifferentElements(oldChildren, newChildren) {
  newChildren.forEach((newElement) => {
    var hasOldChild = !!oldChildren.find((oldElement) => newElement === oldElement);
    if (!hasOldChild && newElement.parentNode) {
      renderer_default(newElement).remove();
    }
  });
}
var TemplateWrapper = class extends InfernoComponent {
  constructor(props) {
    super(props);
    this.renderTemplate = this.renderTemplate.bind(this);
  }
  renderTemplate() {
    var node = findDOMfromVNode(this.$LI, true);
    if (!(null !== node && void 0 !== node && node.parentNode)) {
      return () => {
      };
    }
    var container = node.parentNode;
    var $container = renderer_default(container);
    var $oldContainerContent = $container.contents().toArray();
    var content = renderTemplateContent(this.props, getPublicElement($container));
    replaceWith(renderer_default(node), renderer_default(content));
    return () => {
      var $actualContainerContent = renderer_default(container).contents().toArray();
      removeDifferentElements($oldContainerContent, $actualContainerContent);
      container.appendChild(node);
    };
  }
  shouldComponentUpdate(nextProps) {
    var {
      model,
      template
    } = this.props;
    var {
      isEqual: isEqual2,
      model: nextModel,
      template: nextTemplate
    } = nextProps;
    var equalityComparer = null !== isEqual2 && void 0 !== isEqual2 ? isEqual2 : shallowEquals;
    if (template !== nextTemplate) {
      return true;
    }
    if (!isDefined(model) || !isDefined(nextModel)) {
      return model !== nextModel;
    }
    var {
      data: data3,
      index: index2
    } = model;
    var {
      data: nextData,
      index: nextIndex
    } = nextModel;
    if (index2 !== nextIndex) {
      return true;
    }
    return !equalityComparer(data3, nextData);
  }
  createEffects() {
    return [new InfernoEffect(this.renderTemplate, [this.props.template, this.props.model])];
  }
  updateEffects() {
    this._effects[0].update([this.props.template, this.props.model]);
  }
  componentWillUnmount() {
  }
  render() {
    return null;
  }
};

// node_modules/devextreme/esm/renovation/component_wrapper/utils/update_props_immutable.js
function cloneObjectValue(value2) {
  return Array.isArray(value2) ? [...value2] : _extends({}, value2);
}
function cloneObjectProp(value2, prevValue, fullNameParts) {
  var result2 = fullNameParts.length > 0 && prevValue && value2 !== prevValue ? cloneObjectValue(prevValue) : cloneObjectValue(value2);
  var name2 = fullNameParts[0];
  if (fullNameParts.length > 1) {
    result2[name2] = cloneObjectProp(value2[name2], null === prevValue || void 0 === prevValue ? void 0 : prevValue[name2], fullNameParts.slice(1));
  } else if (name2) {
    if (isPlainObject(value2[name2])) {
      result2[name2] = cloneObjectValue(value2[name2]);
    } else {
      result2[name2] = value2[name2];
    }
  }
  return result2;
}
function updatePropsImmutable(props, option, name2, fullName) {
  var currentPropsValue = option[name2];
  var prevPropsValue = props[name2];
  var result2 = props;
  if (isPlainObject(currentPropsValue) || name2 !== fullName && Array.isArray(currentPropsValue)) {
    result2[name2] = cloneObjectProp(currentPropsValue, prevPropsValue, getPathParts(fullName).slice(1));
  } else {
    result2[name2] = currentPropsValue;
  }
}

// node_modules/devextreme/esm/renovation/component_wrapper/common/component.js
var setDefaultOptionValue = (options2, defaultValueGetter) => (name2) => {
  if (Object.prototype.hasOwnProperty.call(options2, name2) && void 0 === options2[name2]) {
    options2[name2] = defaultValueGetter(name2);
  }
};
var ComponentWrapper = class extends dom_component_default {
  constructor(element, options2) {
    super(element, options2);
    this._shouldRaiseContentReady = false;
    this.validateKeyDownHandler();
  }
  get _propsInfo() {
    return {
      allowNull: [],
      twoWay: [],
      elements: [],
      templates: [],
      props: []
    };
  }
  validateKeyDownHandler() {
    var supportedKeyNames = this.getSupportedKeyNames();
    var hasComponentDefaultKeyHandlers = supportedKeyNames.length > 0;
    var hasComponentKeyDownMethod = "function" === typeof this._viewComponent.prototype.keyDown;
    if (hasComponentDefaultKeyHandlers && !hasComponentKeyDownMethod) {
      throw Error("Component's declaration must have 'keyDown' method.");
    }
  }
  get viewRef() {
    var _this$_viewRef;
    return null === (_this$_viewRef = this._viewRef) || void 0 === _this$_viewRef ? void 0 : _this$_viewRef.current;
  }
  _checkContentReadyOption(fullName) {
    var contentReadyOptions = this._getContentReadyOptions().reduce((options2, name2) => {
      options2[name2] = true;
      return options2;
    }, {});
    this._checkContentReadyOption = (optionName) => !!contentReadyOptions[optionName];
    return this._checkContentReadyOption(fullName);
  }
  _getContentReadyOptions() {
    return ["rtlEnabled"];
  }
  _fireContentReady() {
    this._actionsMap.onContentReady({});
  }
  _getDefaultOptions() {
    var viewDefaultProps = this._getViewComponentDefaultProps();
    return extend(true, super._getDefaultOptions(), viewDefaultProps, this._propsInfo.twoWay.reduce((options2, _ref) => {
      var [name2, defaultName, eventName] = _ref;
      return _extends({}, options2, {
        [name2]: viewDefaultProps[defaultName],
        [eventName]: (value2) => this.option(name2, value2)
      });
    }, {}), this._propsInfo.templates.reduce((options2, name2) => _extends({}, options2, {
      [name2]: null
    }), {}));
  }
  _getUnwrappedOption() {
    var unwrappedProps = {};
    Object.keys(this.option()).forEach((key) => {
      unwrappedProps[key] = this.option(key);
    });
    return unwrappedProps;
  }
  _initializeComponent() {
    var _this$_templateManage;
    super._initializeComponent();
    null === (_this$_templateManage = this._templateManager) || void 0 === _this$_templateManage ? void 0 : _this$_templateManage.addDefaultTemplates(this.getDefaultTemplates());
    var optionProxy = this._getUnwrappedOption();
    this._props = this._optionsWithDefaultTemplates(optionProxy);
    this._propsInfo.templates.forEach((template) => {
      this._componentTemplates[template] = this._createTemplateComponent(this._props[template]);
    });
    Object.keys(this._getActionConfigsFull()).forEach((name2) => this._addAction(name2));
    this._viewRef = createRef();
    this.defaultKeyHandlers = this._createDefaultKeyHandlers();
  }
  _initMarkup() {
    var props = this.getProps();
    this._renderWrapper(props);
  }
  _renderWrapper(props) {
    var containerNode = this.$element()[0];
    if (!this._isNodeReplaced) {
      inferno_renderer_default.onPreRender();
    }
    inferno_renderer_default.render(this._viewComponent, props, containerNode, this._isNodeReplaced);
    if (!this._isNodeReplaced) {
      this._isNodeReplaced = true;
      inferno_renderer_default.onAfterRender();
      this._shouldRaiseContentReady = true;
    }
    if (this._shouldRaiseContentReady) {
      this._fireContentReady();
      this._shouldRaiseContentReady = false;
    }
  }
  _silent(name2, value2) {
    this._options.silent(name2, value2);
  }
  _render() {
  }
  _removeWidget() {
    inferno_renderer_default.remove(this.$element()[0]);
  }
  _dispose() {
    this._removeWidget();
    super._dispose();
  }
  get elementAttr() {
    var element = this.$element()[0];
    if (!this._elementAttr) {
      var {
        attributes
      } = element;
      var attrs = Array.from(attributes).filter((attr) => {
        var _attributes$attr$name;
        return !this._propsInfo.templates.includes(attr.name) && (null === (_attributes$attr$name = attributes[attr.name]) || void 0 === _attributes$attr$name ? void 0 : _attributes$attr$name.specified);
      }).reduce((result2, _ref2) => {
        var {
          name: name2,
          value: value2
        } = _ref2;
        var updatedAttributes = result2;
        var isDomAttr = name2 in element;
        updatedAttributes[name2] = "" === value2 && isDomAttr ? element[name2] : value2;
        return updatedAttributes;
      }, {});
      this._elementAttr = attrs;
      this._storedClasses = element.getAttribute("class") || "";
    }
    var elemStyle = element.style;
    var style = {};
    for (var i = 0; i < elemStyle.length; i += 1) {
      style[elemStyle[i]] = elemStyle.getPropertyValue(elemStyle[i]);
    }
    this._elementAttr.style = style;
    this._elementAttr.class = this._storedClasses;
    return this._elementAttr;
  }
  _getAdditionalActionConfigs() {
    return {
      onContentReady: {
        excludeValidators: ["disabled", "readOnly"]
      }
    };
  }
  _getAdditionalProps() {
    return [];
  }
  _patchOptionValues(options2) {
    var {
      allowNull,
      elements,
      props,
      twoWay
    } = this._propsInfo;
    var viewDefaultProps = this._getViewComponentDefaultProps();
    var defaultWidgetPropsKeys = Object.keys(viewDefaultProps);
    var defaultOptions3 = this._getDefaultOptions();
    var {
      children,
      onKeyboardHandled,
      ref
    } = options2;
    var onKeyDown = onKeyboardHandled ? (_, event_options) => {
      onKeyboardHandled(event_options);
    } : void 0;
    var widgetProps = {
      ref,
      children,
      onKeyDown
    };
    [...props, ...this._getAdditionalProps()].forEach((propName) => {
      if (Object.prototype.hasOwnProperty.call(options2, propName)) {
        widgetProps[propName] = options2[propName];
      }
    });
    allowNull.forEach(setDefaultOptionValue(widgetProps, () => null));
    defaultWidgetPropsKeys.forEach(setDefaultOptionValue(widgetProps, (name2) => defaultOptions3[name2]));
    twoWay.forEach((_ref3) => {
      var [name2, defaultName] = _ref3;
      setDefaultOptionValue(widgetProps, () => defaultOptions3[defaultName])(name2);
    });
    elements.forEach((name2) => {
      if (name2 in widgetProps) {
        var value2 = widgetProps[name2];
        if (isRenderer(value2)) {
          widgetProps[name2] = this._patchElementParam(value2);
        }
      }
    });
    return widgetProps;
  }
  getSupportedKeyNames() {
    return [];
  }
  prepareStyleProp(props) {
    if ("string" === typeof props.style) {
      return _extends({}, props, {
        style: {},
        cssText: props.style
      });
    }
    return props;
  }
  getProps() {
    var _this$elementAttr$cla, _elementAttr$class;
    var {
      elementAttr
    } = this.option();
    var options2 = this._patchOptionValues(_extends({}, this._props, {
      ref: this._viewRef,
      children: this._extractDefaultSlot(),
      aria: this._aria
    }));
    this._propsInfo.templates.forEach((template) => {
      options2[template] = this._componentTemplates[template];
    });
    return this.prepareStyleProp(_extends({}, options2, this.elementAttr, elementAttr, {
      className: [...(null !== (_this$elementAttr$cla = this.elementAttr.class) && void 0 !== _this$elementAttr$cla ? _this$elementAttr$cla : "").split(" "), ...(null !== (_elementAttr$class = null === elementAttr || void 0 === elementAttr ? void 0 : elementAttr.class) && void 0 !== _elementAttr$class ? _elementAttr$class : "").split(" ")].filter((c, i, a) => c && a.indexOf(c) === i).join(" ").trim(),
      class: ""
    }, this._actionsMap));
  }
  _getActionConfigs() {
    return {};
  }
  _getActionConfigsFull() {
    return _extends({}, this._getActionConfigs(), this._getAdditionalActionConfigs());
  }
  getDefaultTemplates() {
    var defaultTemplates = Object.values(this._templatesInfo);
    var result2 = {};
    defaultTemplates.forEach((template) => {
      result2[template] = "dx-renovation-template-mock";
    });
    return result2;
  }
  get _templatesInfo() {
    return {};
  }
  _optionsWithDefaultTemplates(options2) {
    var templateOptions = Object.entries(this._templatesInfo).reduce((result2, _ref4) => {
      var _options$templateName;
      var [templateName, templateValue] = _ref4;
      return _extends({}, result2, {
        [templateName]: null !== (_options$templateName = options2[templateName]) && void 0 !== _options$templateName ? _options$templateName : templateValue
      });
    }, {});
    return _extends({}, options2, templateOptions);
  }
  _init() {
    super._init();
    this.customKeyHandlers = {};
    this._actionsMap = {};
    this._aria = {};
    this._componentTemplates = {};
  }
  _createDefaultKeyHandlers() {
    var result2 = {};
    var keys = this.getSupportedKeyNames();
    keys.forEach((key) => {
      result2[key] = (e) => this.viewRef.keyDown(keyboard_processor_default.createKeyDownOptions(e));
    });
    return result2;
  }
  _addAction(event, actionToAdd) {
    var action = actionToAdd;
    if (!action) {
      var actionByOption = this._createActionByOption(event, this._getActionConfigsFull()[event]);
      action = (actArgs) => {
        Object.keys(actArgs).forEach((name2) => {
          if (isDefined(actArgs[name2]) && dom_adapter_default.isNode(actArgs[name2])) {
            actArgs[name2] = getPublicElement(renderer_default(actArgs[name2]));
          }
        });
        return actionByOption(actArgs);
      };
    }
    this._actionsMap[event] = action;
  }
  _optionChanged(option) {
    var {
      fullName,
      name: name2,
      previousValue,
      value: value2
    } = option;
    updatePropsImmutable(this._props, this.option(), name2, fullName);
    if (this._propsInfo.templates.includes(name2) && value2 !== previousValue) {
      this._componentTemplates[name2] = this._createTemplateComponent(value2);
    }
    if (name2 && this._getActionConfigsFull()[name2]) {
      this._addAction(name2);
    }
    this._shouldRaiseContentReady = this._shouldRaiseContentReady || this._checkContentReadyOption(fullName);
    super._optionChanged(option);
    this._invalidate();
  }
  _extractDefaultSlot() {
    if (this.option("_hasAnonymousTemplateContent")) {
      return inferno_renderer_default.createElement(TemplateWrapper, {
        template: this._getTemplate(this._templateManager.anonymousTemplateName),
        transclude: true,
        renovated: true
      });
    }
    return null;
  }
  _createTemplateComponent(templateOption) {
    if (!templateOption) {
      return;
    }
    var template = this._getTemplate(templateOption);
    if (isString(template) && "dx-renovation-template-mock" === template) {
      return;
    }
    return (model) => inferno_renderer_default.createElement(TemplateWrapper, buildTemplateArgs(model, template));
  }
  _wrapKeyDownHandler(initialHandler) {
    return (options2) => {
      var {
        keyName,
        originalEvent,
        which
      } = options2;
      var keys = this.customKeyHandlers;
      var func = keys[keyName] || keys[which];
      if (void 0 !== func) {
        var handler = func.bind(this);
        var result2 = handler(originalEvent, options2);
        if (!result2) {
          originalEvent.cancel = true;
          return originalEvent;
        }
      }
      return null === initialHandler || void 0 === initialHandler ? void 0 : initialHandler(originalEvent, options2);
    };
  }
  _toPublicElement(element) {
    return getPublicElement(renderer_default(element));
  }
  _patchElementParam(value2) {
    try {
      var result2 = renderer_default(value2);
      var element = null === result2 || void 0 === result2 ? void 0 : result2.get(0);
      return null !== element && void 0 !== element && element.nodeType ? element : value2;
    } catch (error) {
      return value2;
    }
  }
  repaint() {
    this._isNodeReplaced = false;
    this._shouldRaiseContentReady = true;
    this._removeWidget();
    this._refresh();
  }
  _supportedKeys() {
    return _extends({}, this.defaultKeyHandlers, this.customKeyHandlers);
  }
  registerKeyHandler(key, handler) {
    this.customKeyHandlers[key] = handler;
  }
  setAria(name2, value2) {
    this._aria[name2] = value2;
    this._initMarkup();
  }
  _getViewComponentDefaultProps() {
    return this._viewComponent.defaultProps || {};
  }
};
ComponentWrapper.IS_RENOVATED_WIDGET = false;
ComponentWrapper.IS_RENOVATED_WIDGET = true;

// node_modules/devextreme/esm/renovation/component_wrapper/button.js
var ButtonWrapper = class extends ComponentWrapper {
  get _validationGroupConfig() {
    return validation_engine_default.getGroupConfig(this._findGroup());
  }
  getDefaultTemplateNames() {
    return ["content"];
  }
  getSupportedKeyNames() {
    return ["space", "enter"];
  }
  getProps() {
    var props = super.getProps();
    props.onClick = (_ref) => {
      var {
        event
      } = _ref;
      this._clickAction({
        event,
        validationGroup: this._validationGroupConfig
      });
    };
    var iconType = getImageSourceType(props.icon);
    if ("svg" === iconType) {
      props.iconTemplate = this._createTemplateComponent(() => props.icon);
    }
    return props;
  }
  get _templatesInfo() {
    return {
      template: "content"
    };
  }
  _toggleActiveState(_, value2) {
    var button = this.viewRef;
    value2 ? button.activate() : button.deactivate();
  }
  _getSubmitAction() {
    var needValidate = true;
    var validationStatus = "valid";
    return this._createAction((_ref2) => {
      var {
        event,
        submitInput
      } = _ref2;
      if (needValidate) {
        var validationGroup = this._validationGroupConfig;
        if (void 0 !== validationGroup && "" !== validationGroup) {
          var validationResult = validationGroup.validate();
          validationStatus = validationResult.status;
          if ("pending" === validationResult.status) {
            needValidate = false;
            this.option("disabled", true);
            validationResult.complete.then((_ref3) => {
              var {
                status
              } = _ref3;
              this.option("disabled", false);
              validationStatus = status;
              "valid" === validationStatus && submitInput.click();
              needValidate = true;
            });
          }
        }
      }
      "valid" !== validationStatus && event.preventDefault();
      event.stopPropagation();
    });
  }
  _initializeComponent() {
    super._initializeComponent();
    this._addAction("onSubmit", this._getSubmitAction());
    this._clickAction = this._createClickAction();
  }
  _initMarkup() {
    super._initMarkup();
    var $content = this.$element().find(".dx-button-content");
    var $template = $content.children().filter(".dx-template-wrapper");
    var $input = $content.children().filter(".dx-button-submit-input");
    if ($template.length) {
      $template.addClass("dx-button-content");
      $template.append($input);
      $content.replaceWith($template);
    }
  }
  _patchOptionValues(options2) {
    return super._patchOptionValues(_extends({}, options2, {
      templateData: options2._templateData
    }));
  }
  _findGroup() {
    var $element = this.$element();
    var validationGroup = this.option("validationGroup");
    return void 0 !== validationGroup && "" !== validationGroup ? validationGroup : validation_engine_default.findGroup($element, this._modelByElement($element));
  }
  _createClickAction() {
    return this._createActionByOption("onClick", {
      excludeValidators: ["readOnly"]
    });
  }
  _optionChanged(option) {
    switch (option.name) {
      case "onClick":
        this._clickAction = this._createClickAction();
    }
    super._optionChanged(option);
  }
};

// node_modules/devextreme/esm/renovation/utils/combine_classes.js
function combineClasses(classesMap) {
  return Object.keys(classesMap).filter((p2) => classesMap[p2]).join(" ");
}

// node_modules/devextreme/esm/renovation/ui/common/icon.js
var _excluded3 = ["iconTemplate", "position", "source"];
var viewFunction = (_ref) => {
  var {
    iconClassName,
    props: {
      iconTemplate: IconTemplate,
      source
    },
    sourceType
  } = _ref;
  return createFragment(["dxIcon" === sourceType && createVNode(1, "i", iconClassName), "fontIcon" === sourceType && createVNode(1, "i", iconClassName), "image" === sourceType && createVNode(1, "img", iconClassName, null, 1, {
    alt: "",
    src: source
  }), IconTemplate && createVNode(1, "i", iconClassName, IconTemplate({}), 0)], 0);
};
var IconProps = {
  position: "left",
  source: ""
};
var getTemplate = (TemplateProp) => TemplateProp && (TemplateProp.defaultProps ? (props) => normalizeProps(createComponentVNode(2, TemplateProp, _extends({}, props))) : TemplateProp);
var Icon = class extends BaseInfernoComponent {
  constructor(props) {
    super(props);
    this.state = {};
  }
  get sourceType() {
    return getImageSourceType(this.props.source);
  }
  get cssClass() {
    return "left" !== this.props.position ? "dx-icon-right" : "";
  }
  get iconClassName() {
    var generalClasses = {
      "dx-icon": true,
      [this.cssClass]: !!this.cssClass
    };
    var {
      source
    } = this.props;
    if ("dxIcon" === this.sourceType) {
      return combineClasses(_extends({}, generalClasses, {
        ["dx-icon-".concat(source)]: true
      }));
    }
    if ("fontIcon" === this.sourceType) {
      return combineClasses(_extends({}, generalClasses, {
        [String(source)]: !!source
      }));
    }
    if ("image" === this.sourceType) {
      return combineClasses(generalClasses);
    }
    if ("svg" === this.sourceType) {
      return combineClasses(_extends({}, generalClasses, {
        "dx-svg-icon": true
      }));
    }
    return "";
  }
  get restAttributes() {
    var _this$props = this.props, restProps = _objectWithoutPropertiesLoose(_this$props, _excluded3);
    return restProps;
  }
  render() {
    var props = this.props;
    return viewFunction({
      props: _extends({}, props, {
        iconTemplate: getTemplate(props.iconTemplate)
      }),
      sourceType: this.sourceType,
      cssClass: this.cssClass,
      iconClassName: this.iconClassName,
      restAttributes: this.restAttributes
    });
  }
};
Icon.defaultProps = IconProps;

// node_modules/devextreme/esm/renovation/ui/common/ink_ripple.js
var _excluded4 = ["config"];
var viewFunction2 = (model) => normalizeProps(createVNode(1, "div", "dx-inkripple", null, 1, _extends({}, model.restAttributes)));
var InkRippleProps = {
  config: Object.freeze({})
};
var InkRipple = class extends BaseInfernoComponent {
  constructor(props) {
    super(props);
    this.state = {};
    this.__getterCache = {};
    this.hideWave = this.hideWave.bind(this);
    this.showWave = this.showWave.bind(this);
  }
  get getConfig() {
    if (void 0 !== this.__getterCache.getConfig) {
      return this.__getterCache.getConfig;
    }
    return this.__getterCache.getConfig = (() => {
      var {
        config: config3
      } = this.props;
      return initConfig(config3);
    })();
  }
  get restAttributes() {
    var _this$props = this.props, restProps = _objectWithoutPropertiesLoose(_this$props, _excluded4);
    return restProps;
  }
  hideWave(opts) {
    hideWave(this.getConfig, opts);
  }
  showWave(opts) {
    showWave(this.getConfig, opts);
  }
  componentWillUpdate(nextProps, nextState, context2) {
    if (this.props.config !== nextProps.config) {
      this.__getterCache.getConfig = void 0;
    }
  }
  render() {
    var props = this.props;
    return viewFunction2({
      props: _extends({}, props),
      getConfig: this.getConfig,
      restAttributes: this.restAttributes
    });
  }
};
InkRipple.defaultProps = InkRippleProps;

// node_modules/devextreme/esm/renovation/utils/subscribe_to_event.js
function subscribeToEvent(eventName) {
  return (element, handler, eventData2, namespace) => {
    var event = namespace ? addNamespace2(eventName, namespace) : eventName;
    if (handler) {
      events_engine_default.on(element, event, eventData2, handler);
      return () => {
        events_engine_default.off(element, event, handler);
      };
    }
    return;
  };
}
var subscribeToClickEvent = subscribeToEvent(CLICK_EVENT_NAME);
var subscribeToScrollEvent = subscribeToEvent(emitter_gesture_scroll_default.scroll);
var subscribeToScrollInitEvent = subscribeToEvent(emitter_gesture_scroll_default.init);
var subscribeToDXScrollStartEvent = subscribeToEvent(emitter_gesture_scroll_default.start);
var subscribeToDXScrollMoveEvent = subscribeToEvent(emitter_gesture_scroll_default.move);
var subscribeToDXScrollEndEvent = subscribeToEvent(emitter_gesture_scroll_default.end);
var subscribeToDXScrollStopEvent = subscribeToEvent(emitter_gesture_scroll_default.stop);
var subscribeToDXScrollCancelEvent = subscribeToEvent(emitter_gesture_scroll_default.cancel);
var subscribeToDXPointerDownEvent = subscribeToEvent(pointer_default.down);
var subscribeToDXPointerUpEvent = subscribeToEvent(pointer_default.up);
var subscribeToDXPointerMoveEvent = subscribeToEvent(pointer_default.move);
var subscribeToMouseEnterEvent = subscribeToEvent("mouseenter");
var subscribeToMouseLeaveEvent = subscribeToEvent("mouseleave");
var subscribeToKeyDownEvent = subscribeToEvent("keydown");
var subscribeToDxActiveEvent = subscribeToEvent("dxactive");
var subscribeToDxInactiveEvent = subscribeToEvent("dxinactive");
var subscribeToDxHoverStartEvent = subscribeToEvent("dxhoverstart");
var subscribeToDxHoverEndEvent = subscribeToEvent("dxhoverend");
var subscribeToDxFocusInEvent = subscribeToEvent("focusin");
var subscribeToDxFocusOutEvent = subscribeToEvent("focusout");

// node_modules/devextreme/esm/renovation/ui/common/base_props.js
var BaseWidgetProps = {
  className: "",
  activeStateEnabled: false,
  disabled: false,
  focusStateEnabled: false,
  hoverStateEnabled: false,
  tabIndex: 0,
  visible: true
};

// node_modules/devextreme/esm/renovation/common/config_context.js
var ConfigContext = createContext(void 0);

// node_modules/devextreme/esm/renovation/common/config_provider.js
var _excluded5 = ["children", "rtlEnabled"];
var viewFunction3 = (viewModel) => viewModel.props.children;
var ConfigProviderProps = {};
var ConfigProvider = class extends BaseInfernoComponent {
  constructor(props) {
    super(props);
    this.state = {};
    this.__getterCache = {};
  }
  getChildContext() {
    return _extends({}, this.context, {
      [ConfigContext.id]: this.config || ConfigContext.defaultValue
    });
  }
  get config() {
    if (void 0 !== this.__getterCache.config) {
      return this.__getterCache.config;
    }
    return this.__getterCache.config = (() => ({
      rtlEnabled: this.props.rtlEnabled
    }))();
  }
  get restAttributes() {
    var _this$props = this.props, restProps = _objectWithoutPropertiesLoose(_this$props, _excluded5);
    return restProps;
  }
  componentWillUpdate(nextProps, nextState, context2) {
    if (this.props.rtlEnabled !== nextProps.rtlEnabled) {
      this.__getterCache.config = void 0;
    }
  }
  render() {
    var props = this.props;
    return viewFunction3({
      props: _extends({}, props),
      config: this.config,
      restAttributes: this.restAttributes
    });
  }
};
ConfigProvider.defaultProps = ConfigProviderProps;

// node_modules/devextreme/esm/renovation/utils/resolve_rtl.js
function resolveRtlEnabled(rtlProp, config3) {
  if (void 0 !== rtlProp) {
    return rtlProp;
  }
  if (void 0 !== (null === config3 || void 0 === config3 ? void 0 : config3.rtlEnabled)) {
    return config3.rtlEnabled;
  }
  return config_default().rtlEnabled;
}
function resolveRtlEnabledDefinition(rtlProp, config3) {
  var isPropDefined = isDefined(rtlProp);
  var onlyGlobalDefined = isDefined(config_default().rtlEnabled) && !isPropDefined && !isDefined(null === config3 || void 0 === config3 ? void 0 : config3.rtlEnabled);
  return isPropDefined && rtlProp !== (null === config3 || void 0 === config3 ? void 0 : config3.rtlEnabled) || onlyGlobalDefined;
}

// node_modules/devextreme/esm/renovation/ui/common/widget.js
var _excluded6 = ["_feedbackHideTimeout", "_feedbackShowTimeout", "accessKey", "activeStateEnabled", "activeStateUnit", "addWidgetClass", "aria", "children", "className", "classes", "cssText", "disabled", "focusStateEnabled", "height", "hint", "hoverStateEnabled", "name", "onActive", "onClick", "onDimensionChanged", "onFocusIn", "onFocusOut", "onHoverEnd", "onHoverStart", "onInactive", "onKeyDown", "onRootElementRendered", "onVisibilityChange", "rootElementRef", "rtlEnabled", "tabIndex", "visible", "width"];
var DEFAULT_FEEDBACK_HIDE_TIMEOUT = 400;
var DEFAULT_FEEDBACK_SHOW_TIMEOUT = 30;
var getAria = (args) => Object.keys(args).reduce((r, key) => {
  if (args[key]) {
    return _extends({}, r, {
      ["role" === key || "id" === key ? key : "aria-".concat(key)]: String(args[key])
    });
  }
  return r;
}, {});
var viewFunction4 = (viewModel) => {
  var widget = normalizeProps(createVNode(1, "div", viewModel.cssClasses, viewModel.props.children, 0, _extends({}, viewModel.attributes, {
    tabIndex: viewModel.tabIndex,
    title: viewModel.props.hint,
    style: normalizeStyles(viewModel.styles)
  }), null, viewModel.widgetElementRef));
  return viewModel.shouldRenderConfigProvider ? createComponentVNode(2, ConfigProvider, {
    rtlEnabled: viewModel.rtlEnabled,
    children: widget
  }) : widget;
};
var WidgetProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(BaseWidgetProps), Object.getOwnPropertyDescriptors({
  _feedbackHideTimeout: DEFAULT_FEEDBACK_HIDE_TIMEOUT,
  _feedbackShowTimeout: DEFAULT_FEEDBACK_SHOW_TIMEOUT,
  cssText: "",
  aria: Object.freeze({}),
  classes: "",
  name: "",
  addWidgetClass: true
})));
var Widget2 = class extends InfernoWrapperComponent {
  constructor(props) {
    super(props);
    this.widgetElementRef = createRef();
    this.state = {
      active: false,
      focused: false,
      hovered: false
    };
    this.setRootElementRef = this.setRootElementRef.bind(this);
    this.activeEffect = this.activeEffect.bind(this);
    this.inactiveEffect = this.inactiveEffect.bind(this);
    this.clickEffect = this.clickEffect.bind(this);
    this.focus = this.focus.bind(this);
    this.blur = this.blur.bind(this);
    this.activate = this.activate.bind(this);
    this.deactivate = this.deactivate.bind(this);
    this.focusInEffect = this.focusInEffect.bind(this);
    this.focusOutEffect = this.focusOutEffect.bind(this);
    this.hoverStartEffect = this.hoverStartEffect.bind(this);
    this.hoverEndEffect = this.hoverEndEffect.bind(this);
    this.keyboardEffect = this.keyboardEffect.bind(this);
    this.resizeEffect = this.resizeEffect.bind(this);
    this.windowResizeEffect = this.windowResizeEffect.bind(this);
    this.visibilityEffect = this.visibilityEffect.bind(this);
    this.checkDeprecation = this.checkDeprecation.bind(this);
    this.applyCssTextEffect = this.applyCssTextEffect.bind(this);
  }
  get config() {
    if (this.context[ConfigContext.id]) {
      return this.context[ConfigContext.id];
    }
    return ConfigContext.defaultValue;
  }
  createEffects() {
    return [new InfernoEffect(this.setRootElementRef, []), new InfernoEffect(this.activeEffect, [this.props._feedbackShowTimeout, this.props.activeStateEnabled, this.props.activeStateUnit, this.props.disabled, this.props.onActive]), new InfernoEffect(this.inactiveEffect, [this.props._feedbackHideTimeout, this.props.activeStateEnabled, this.props.activeStateUnit, this.props.onInactive, this.state.active]), new InfernoEffect(this.clickEffect, [this.props.disabled, this.props.name, this.props.onClick]), new InfernoEffect(this.focusInEffect, [this.props.disabled, this.props.focusStateEnabled, this.props.name, this.props.onFocusIn]), new InfernoEffect(this.focusOutEffect, [this.props.focusStateEnabled, this.props.name, this.props.onFocusOut, this.state.focused]), new InfernoEffect(this.hoverStartEffect, [this.props.activeStateUnit, this.props.disabled, this.props.hoverStateEnabled, this.props.onHoverStart, this.state.active]), new InfernoEffect(this.hoverEndEffect, [this.props.activeStateUnit, this.props.hoverStateEnabled, this.props.onHoverEnd, this.state.hovered]), new InfernoEffect(this.keyboardEffect, [this.props.focusStateEnabled, this.props.onKeyDown]), new InfernoEffect(this.resizeEffect, [this.props.name, this.props.onDimensionChanged]), new InfernoEffect(this.windowResizeEffect, [this.props.onDimensionChanged]), new InfernoEffect(this.visibilityEffect, [this.props.name, this.props.onVisibilityChange]), new InfernoEffect(this.checkDeprecation, [this.props.height, this.props.width]), new InfernoEffect(this.applyCssTextEffect, [this.props.cssText]), createReRenderEffect()];
  }
  updateEffects() {
    var _this$_effects$, _this$_effects$2, _this$_effects$3, _this$_effects$4, _this$_effects$5, _this$_effects$6, _this$_effects$7, _this$_effects$8, _this$_effects$9, _this$_effects$10, _this$_effects$11, _this$_effects$12, _this$_effects$13;
    null === (_this$_effects$ = this._effects[1]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.props._feedbackShowTimeout, this.props.activeStateEnabled, this.props.activeStateUnit, this.props.disabled, this.props.onActive]);
    null === (_this$_effects$2 = this._effects[2]) || void 0 === _this$_effects$2 ? void 0 : _this$_effects$2.update([this.props._feedbackHideTimeout, this.props.activeStateEnabled, this.props.activeStateUnit, this.props.onInactive, this.state.active]);
    null === (_this$_effects$3 = this._effects[3]) || void 0 === _this$_effects$3 ? void 0 : _this$_effects$3.update([this.props.disabled, this.props.name, this.props.onClick]);
    null === (_this$_effects$4 = this._effects[4]) || void 0 === _this$_effects$4 ? void 0 : _this$_effects$4.update([this.props.disabled, this.props.focusStateEnabled, this.props.name, this.props.onFocusIn]);
    null === (_this$_effects$5 = this._effects[5]) || void 0 === _this$_effects$5 ? void 0 : _this$_effects$5.update([this.props.focusStateEnabled, this.props.name, this.props.onFocusOut, this.state.focused]);
    null === (_this$_effects$6 = this._effects[6]) || void 0 === _this$_effects$6 ? void 0 : _this$_effects$6.update([this.props.activeStateUnit, this.props.disabled, this.props.hoverStateEnabled, this.props.onHoverStart, this.state.active]);
    null === (_this$_effects$7 = this._effects[7]) || void 0 === _this$_effects$7 ? void 0 : _this$_effects$7.update([this.props.activeStateUnit, this.props.hoverStateEnabled, this.props.onHoverEnd, this.state.hovered]);
    null === (_this$_effects$8 = this._effects[8]) || void 0 === _this$_effects$8 ? void 0 : _this$_effects$8.update([this.props.focusStateEnabled, this.props.onKeyDown]);
    null === (_this$_effects$9 = this._effects[9]) || void 0 === _this$_effects$9 ? void 0 : _this$_effects$9.update([this.props.name, this.props.onDimensionChanged]);
    null === (_this$_effects$10 = this._effects[10]) || void 0 === _this$_effects$10 ? void 0 : _this$_effects$10.update([this.props.onDimensionChanged]);
    null === (_this$_effects$11 = this._effects[11]) || void 0 === _this$_effects$11 ? void 0 : _this$_effects$11.update([this.props.name, this.props.onVisibilityChange]);
    null === (_this$_effects$12 = this._effects[12]) || void 0 === _this$_effects$12 ? void 0 : _this$_effects$12.update([this.props.height, this.props.width]);
    null === (_this$_effects$13 = this._effects[13]) || void 0 === _this$_effects$13 ? void 0 : _this$_effects$13.update([this.props.cssText]);
  }
  setRootElementRef() {
    var {
      onRootElementRendered,
      rootElementRef
    } = this.props;
    if (rootElementRef) {
      rootElementRef.current = this.widgetElementRef.current;
    }
    null === onRootElementRendered || void 0 === onRootElementRendered ? void 0 : onRootElementRendered(this.widgetElementRef.current);
  }
  activeEffect() {
    var {
      _feedbackShowTimeout,
      activeStateEnabled,
      activeStateUnit,
      disabled,
      onActive
    } = this.props;
    var selector = activeStateUnit;
    if (activeStateEnabled) {
      if (!disabled) {
        return subscribeToDxActiveEvent(this.widgetElementRef.current, (event) => {
          this.setState((__state_argument) => ({
            active: true
          }));
          null === onActive || void 0 === onActive ? void 0 : onActive(event);
        }, {
          timeout: _feedbackShowTimeout,
          selector
        }, "UIFeedback");
      }
    }
    return;
  }
  inactiveEffect() {
    var {
      _feedbackHideTimeout,
      activeStateEnabled,
      activeStateUnit,
      onInactive
    } = this.props;
    var selector = activeStateUnit;
    if (activeStateEnabled) {
      return subscribeToDxInactiveEvent(this.widgetElementRef.current, (event) => {
        if (this.state.active) {
          this.setState((__state_argument) => ({
            active: false
          }));
          null === onInactive || void 0 === onInactive ? void 0 : onInactive(event);
        }
      }, {
        timeout: _feedbackHideTimeout,
        selector
      }, "UIFeedback");
    }
    return;
  }
  clickEffect() {
    var {
      disabled,
      name: name2,
      onClick
    } = this.props;
    var namespace = name2;
    if (onClick && !disabled) {
      dxClick.on(this.widgetElementRef.current, onClick, {
        namespace
      });
      return () => dxClick.off(this.widgetElementRef.current, {
        namespace
      });
    }
    return;
  }
  focusInEffect() {
    var {
      disabled,
      focusStateEnabled,
      name: name2,
      onFocusIn
    } = this.props;
    var namespace = "".concat(name2, "Focus");
    if (focusStateEnabled) {
      if (!disabled) {
        return subscribeToDxFocusInEvent(this.widgetElementRef.current, (event) => {
          if (!event.isDefaultPrevented()) {
            this.setState((__state_argument) => ({
              focused: true
            }));
            null === onFocusIn || void 0 === onFocusIn ? void 0 : onFocusIn(event);
          }
        }, null, namespace);
      }
    }
    return;
  }
  focusOutEffect() {
    var {
      focusStateEnabled,
      name: name2,
      onFocusOut
    } = this.props;
    var namespace = "".concat(name2, "Focus");
    if (focusStateEnabled) {
      return subscribeToDxFocusOutEvent(this.widgetElementRef.current, (event) => {
        if (!event.isDefaultPrevented() && this.state.focused) {
          this.setState((__state_argument) => ({
            focused: false
          }));
          null === onFocusOut || void 0 === onFocusOut ? void 0 : onFocusOut(event);
        }
      }, null, namespace);
    }
    return;
  }
  hoverStartEffect() {
    var {
      activeStateUnit,
      disabled,
      hoverStateEnabled,
      onHoverStart
    } = this.props;
    var selector = activeStateUnit;
    if (hoverStateEnabled) {
      if (!disabled) {
        return subscribeToDxHoverStartEvent(this.widgetElementRef.current, (event) => {
          !this.state.active && this.setState((__state_argument) => ({
            hovered: true
          }));
          null === onHoverStart || void 0 === onHoverStart ? void 0 : onHoverStart(event);
        }, {
          selector
        }, "UIFeedback");
      }
    }
    return;
  }
  hoverEndEffect() {
    var {
      activeStateUnit,
      hoverStateEnabled,
      onHoverEnd
    } = this.props;
    var selector = activeStateUnit;
    if (hoverStateEnabled) {
      return subscribeToDxHoverEndEvent(this.widgetElementRef.current, (event) => {
        if (this.state.hovered) {
          this.setState((__state_argument) => ({
            hovered: false
          }));
          null === onHoverEnd || void 0 === onHoverEnd ? void 0 : onHoverEnd(event);
        }
      }, {
        selector
      }, "UIFeedback");
    }
    return;
  }
  keyboardEffect() {
    var {
      focusStateEnabled,
      onKeyDown
    } = this.props;
    if (focusStateEnabled && onKeyDown) {
      var id = keyboard.on(this.widgetElementRef.current, this.widgetElementRef.current, (e) => onKeyDown(e));
      return () => keyboard.off(id);
    }
    return;
  }
  resizeEffect() {
    var namespace = "".concat(this.props.name, "VisibilityChange");
    var {
      onDimensionChanged
    } = this.props;
    if (onDimensionChanged) {
      resize.on(this.widgetElementRef.current, onDimensionChanged, {
        namespace
      });
      return () => resize.off(this.widgetElementRef.current, {
        namespace
      });
    }
    return;
  }
  windowResizeEffect() {
    var {
      onDimensionChanged
    } = this.props;
    if (onDimensionChanged) {
      resize_callbacks_default.add(onDimensionChanged);
      return () => {
        resize_callbacks_default.remove(onDimensionChanged);
      };
    }
    return;
  }
  visibilityEffect() {
    var {
      name: name2,
      onVisibilityChange
    } = this.props;
    var namespace = "".concat(name2, "VisibilityChange");
    if (onVisibilityChange) {
      visibility.on(this.widgetElementRef.current, () => onVisibilityChange(true), () => onVisibilityChange(false), {
        namespace
      });
      return () => visibility.off(this.widgetElementRef.current, {
        namespace
      });
    }
    return;
  }
  checkDeprecation() {
    var {
      height,
      width
    } = this.props;
    if (isFunction(width)) {
      errors_default.log("W0017", "width");
    }
    if (isFunction(height)) {
      errors_default.log("W0017", "height");
    }
  }
  applyCssTextEffect() {
    var {
      cssText
    } = this.props;
    if ("" !== cssText) {
      this.widgetElementRef.current.style.cssText = cssText;
    }
  }
  get shouldRenderConfigProvider() {
    var {
      rtlEnabled
    } = this.props;
    return resolveRtlEnabledDefinition(rtlEnabled, this.config);
  }
  get rtlEnabled() {
    var {
      rtlEnabled
    } = this.props;
    return resolveRtlEnabled(rtlEnabled, this.config);
  }
  get attributes() {
    var {
      aria,
      disabled,
      focusStateEnabled,
      visible: visible2
    } = this.props;
    var accessKey = focusStateEnabled && !disabled && this.props.accessKey;
    return _extends({}, extend({}, accessKey && {
      accessKey
    }), getAria(_extends({}, aria, {
      disabled,
      hidden: !visible2
    })), extend({}, this.restAttributes));
  }
  get styles() {
    var {
      height,
      width
    } = this.props;
    var style = this.restAttributes.style || {};
    var computedWidth = normalizeStyleProp("width", isFunction(width) ? width() : width);
    var computedHeight = normalizeStyleProp("height", isFunction(height) ? height() : height);
    return _extends({}, style, {
      height: null !== computedHeight && void 0 !== computedHeight ? computedHeight : style.height,
      width: null !== computedWidth && void 0 !== computedWidth ? computedWidth : style.width
    });
  }
  get cssClasses() {
    var {
      activeStateEnabled,
      addWidgetClass,
      className,
      classes,
      disabled,
      focusStateEnabled,
      hoverStateEnabled,
      onVisibilityChange,
      visible: visible2
    } = this.props;
    var isFocusable = !!focusStateEnabled && !disabled;
    var isHoverable = !!hoverStateEnabled && !disabled;
    var canBeActive = !!activeStateEnabled && !disabled;
    var classesMap = {
      "dx-widget": !!addWidgetClass,
      [String(classes)]: !!classes,
      [String(className)]: !!className,
      "dx-state-disabled": !!disabled,
      "dx-state-invisible": !visible2,
      "dx-state-focused": !!this.state.focused && isFocusable,
      "dx-state-active": !!this.state.active && canBeActive,
      "dx-state-hover": !!this.state.hovered && isHoverable && !this.state.active,
      "dx-rtl": !!this.rtlEnabled,
      "dx-visibility-change-handler": !!onVisibilityChange
    };
    return combineClasses(classesMap);
  }
  get tabIndex() {
    var {
      disabled,
      focusStateEnabled,
      tabIndex
    } = this.props;
    var isFocusable = focusStateEnabled && !disabled;
    return isFocusable ? tabIndex : void 0;
  }
  get restAttributes() {
    var _this$props = this.props, restProps = _objectWithoutPropertiesLoose(_this$props, _excluded6);
    return restProps;
  }
  focus() {
    focus.trigger(this.widgetElementRef.current);
  }
  blur() {
    var activeElement = dom_adapter_default.getActiveElement(this.widgetElementRef.current);
    if (this.widgetElementRef.current === activeElement) {
      activeElement.blur();
    }
  }
  activate() {
    this.setState((__state_argument) => ({
      active: true
    }));
  }
  deactivate() {
    this.setState((__state_argument) => ({
      active: false
    }));
  }
  render() {
    var props = this.props;
    return viewFunction4({
      props: _extends({}, props),
      active: this.state.active,
      focused: this.state.focused,
      hovered: this.state.hovered,
      widgetElementRef: this.widgetElementRef,
      config: this.config,
      shouldRenderConfigProvider: this.shouldRenderConfigProvider,
      rtlEnabled: this.rtlEnabled,
      attributes: this.attributes,
      styles: this.styles,
      cssClasses: this.cssClasses,
      tabIndex: this.tabIndex,
      restAttributes: this.restAttributes
    });
  }
};
Widget2.defaultProps = WidgetProps;

// node_modules/devextreme/esm/renovation/ui/button.js
var _excluded7 = ["accessKey", "activeStateEnabled", "children", "className", "disabled", "focusStateEnabled", "height", "hint", "hoverStateEnabled", "icon", "iconPosition", "iconTemplate", "onClick", "onKeyDown", "onSubmit", "pressed", "rtlEnabled", "stylingMode", "tabIndex", "template", "templateData", "text", "type", "useInkRipple", "useSubmitBehavior", "visible", "width"];
var stylingModes = ["outlined", "text", "contained"];
var getCssClasses2 = (model) => {
  var {
    icon,
    iconPosition,
    stylingMode,
    text,
    type: type2
  } = model;
  var isValidStylingMode = stylingMode && stylingModes.includes(stylingMode);
  var classesMap = {
    "dx-button": true,
    ["dx-button-mode-".concat(isValidStylingMode ? stylingMode : "contained")]: true,
    ["dx-button-".concat(null !== type2 && void 0 !== type2 ? type2 : "normal")]: true,
    "dx-button-has-text": !!text,
    "dx-button-has-icon": !!icon,
    "dx-button-icon-right": "left" !== iconPosition
  };
  return combineClasses(classesMap);
};
var viewFunction5 = (viewModel) => {
  var {
    children,
    iconPosition,
    iconTemplate: IconTemplate,
    template: ButtonTemplate,
    text
  } = viewModel.props;
  var renderText = !viewModel.props.template && !children && "" !== text;
  var isIconLeft = "left" === iconPosition;
  var iconComponent = !viewModel.props.template && !children && (viewModel.iconSource || viewModel.props.iconTemplate) && createComponentVNode(2, Icon, {
    source: viewModel.iconSource,
    position: iconPosition,
    iconTemplate: IconTemplate
  });
  return normalizeProps(createComponentVNode(2, Widget2, _extends({
    accessKey: viewModel.props.accessKey,
    activeStateEnabled: viewModel.props.activeStateEnabled,
    aria: viewModel.aria,
    className: viewModel.props.className,
    classes: viewModel.cssClasses,
    disabled: viewModel.props.disabled,
    focusStateEnabled: viewModel.props.focusStateEnabled,
    height: viewModel.props.height,
    hint: viewModel.props.hint,
    hoverStateEnabled: viewModel.props.hoverStateEnabled,
    onActive: viewModel.onActive,
    onClick: viewModel.onWidgetClick,
    onInactive: viewModel.onInactive,
    onKeyDown: viewModel.keyDown,
    rtlEnabled: viewModel.props.rtlEnabled,
    tabIndex: viewModel.props.tabIndex,
    visible: viewModel.props.visible,
    width: viewModel.props.width
  }, viewModel.restAttributes, {
    children: createVNode(1, "div", "dx-button-content", [viewModel.props.template && ButtonTemplate({
      data: viewModel.buttonTemplateData
    }), !viewModel.props.template && children, isIconLeft && iconComponent, renderText && createVNode(1, "span", "dx-button-text", text, 0), !isIconLeft && iconComponent, viewModel.props.useSubmitBehavior && createVNode(64, "input", "dx-button-submit-input", null, 1, {
      type: "submit",
      tabIndex: -1
    }, null, viewModel.submitInputRef), viewModel.props.useInkRipple && createComponentVNode(2, InkRipple, {
      config: viewModel.inkRippleConfig
    }, null, viewModel.inkRippleRef)], 0, null, null, viewModel.contentRef)
  }), null, viewModel.widgetRef));
};
var ButtonProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(BaseWidgetProps), Object.getOwnPropertyDescriptors({
  activeStateEnabled: true,
  hoverStateEnabled: true,
  icon: "",
  iconPosition: "left",
  stylingMode: "contained",
  text: "",
  type: "normal",
  useInkRipple: false,
  useSubmitBehavior: false,
  templateData: Object.freeze({})
})));
var defaultOptionRules = createDefaultOptionRules([{
  device: () => "desktop" === devices_default.real().deviceType && !devices_default.isSimulator(),
  options: {
    focusStateEnabled: true
  }
}, {
  device: () => isMaterial(current()),
  options: {
    useInkRipple: true
  }
}]);
var getTemplate2 = (TemplateProp) => TemplateProp && (TemplateProp.defaultProps ? (props) => normalizeProps(createComponentVNode(2, TemplateProp, _extends({}, props))) : TemplateProp);
var Button = class extends InfernoWrapperComponent {
  constructor(props) {
    super(props);
    this.state = {};
    this.contentRef = createRef();
    this.inkRippleRef = createRef();
    this.submitInputRef = createRef();
    this.widgetRef = createRef();
    this.__getterCache = {};
    this.focus = this.focus.bind(this);
    this.activate = this.activate.bind(this);
    this.deactivate = this.deactivate.bind(this);
    this.submitEffect = this.submitEffect.bind(this);
    this.onActive = this.onActive.bind(this);
    this.onInactive = this.onInactive.bind(this);
    this.onWidgetClick = this.onWidgetClick.bind(this);
    this.keyDown = this.keyDown.bind(this);
    this.emitClickEvent = this.emitClickEvent.bind(this);
  }
  createEffects() {
    return [new InfernoEffect(this.submitEffect, [this.props.onSubmit, this.props.useSubmitBehavior]), createReRenderEffect()];
  }
  updateEffects() {
    var _this$_effects$;
    null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.props.onSubmit, this.props.useSubmitBehavior]);
  }
  submitEffect() {
    var {
      onSubmit,
      useSubmitBehavior
    } = this.props;
    if (useSubmitBehavior && onSubmit) {
      click.on(this.submitInputRef.current, (event) => onSubmit({
        event,
        submitInput: this.submitInputRef.current
      }), {
        namespace: "UIFeedback"
      });
      return () => click.off(this.submitInputRef.current, {
        namespace: "UIFeedback"
      });
    }
    return;
  }
  onActive(event) {
    var {
      useInkRipple
    } = this.props;
    useInkRipple && this.inkRippleRef.current.showWave({
      element: this.contentRef.current,
      event
    });
  }
  onInactive(event) {
    var {
      useInkRipple
    } = this.props;
    useInkRipple && this.inkRippleRef.current.hideWave({
      element: this.contentRef.current,
      event
    });
  }
  onWidgetClick(event) {
    var {
      onClick,
      useSubmitBehavior
    } = this.props;
    null === onClick || void 0 === onClick ? void 0 : onClick({
      event
    });
    useSubmitBehavior && this.submitInputRef.current.click();
  }
  keyDown(e) {
    var {
      onKeyDown
    } = this.props;
    var {
      keyName,
      originalEvent,
      which
    } = e;
    var result2 = null === onKeyDown || void 0 === onKeyDown ? void 0 : onKeyDown(e);
    if (null !== result2 && void 0 !== result2 && result2.cancel) {
      return result2;
    }
    if ("space" === keyName || "space" === which || "enter" === keyName || "enter" === which) {
      originalEvent.preventDefault();
      this.emitClickEvent();
    }
    return;
  }
  emitClickEvent() {
    this.contentRef.current.click();
  }
  get aria() {
    var {
      icon,
      text
    } = this.props;
    var label = null !== text && void 0 !== text ? text : "";
    if (!text && icon) {
      var iconSource = getImageSourceType(icon);
      switch (iconSource) {
        case "image":
          var isPathToImage = !icon.includes("base64") && /^(?!(?:https?:\/\/)|(?:ftp:\/\/)|(?:www\.))[^\s]+$/.test(icon);
          label = isPathToImage ? icon.replace(/.+\/([^.]+)\..+$/, "$1") : "";
          break;
        case "dxIcon":
          label = message_default.format(camelize(icon, true)) || icon;
          break;
        case "fontIcon":
          label = icon;
          break;
        case "svg":
          var _titleRegexp$exec$, _titleRegexp$exec;
          var title = null !== (_titleRegexp$exec$ = null === (_titleRegexp$exec = /<title>(.*?)<\/title>/.exec(icon)) || void 0 === _titleRegexp$exec ? void 0 : _titleRegexp$exec[1]) && void 0 !== _titleRegexp$exec$ ? _titleRegexp$exec$ : "";
          label = title;
      }
    }
    return _extends({
      role: "button"
    }, label ? {
      label
    } : {});
  }
  get cssClasses() {
    return getCssClasses2(this.props);
  }
  get iconSource() {
    var {
      icon
    } = this.props;
    return null !== icon && void 0 !== icon ? icon : "";
  }
  get inkRippleConfig() {
    if (void 0 !== this.__getterCache.inkRippleConfig) {
      return this.__getterCache.inkRippleConfig;
    }
    return this.__getterCache.inkRippleConfig = (() => {
      var {
        icon,
        text
      } = this.props;
      return !text && icon ? {
        isCentered: true,
        useHoldAnimation: false,
        waveSizeCoefficient: 1
      } : {};
    })();
  }
  get buttonTemplateData() {
    var {
      icon,
      templateData,
      text
    } = this.props;
    return _extends({
      icon,
      text
    }, templateData);
  }
  get restAttributes() {
    var _this$props = this.props, restProps = _objectWithoutPropertiesLoose(_this$props, _excluded7);
    return restProps;
  }
  focus() {
    this.widgetRef.current.focus();
  }
  activate() {
    this.widgetRef.current.activate();
  }
  deactivate() {
    this.widgetRef.current.deactivate();
  }
  componentWillUpdate(nextProps, nextState, context2) {
    super.componentWillUpdate();
    if (this.props.icon !== nextProps.icon || this.props.text !== nextProps.text) {
      this.__getterCache.inkRippleConfig = void 0;
    }
  }
  render() {
    var props = this.props;
    return viewFunction5({
      props: _extends({}, props, {
        template: getTemplate2(props.template),
        iconTemplate: getTemplate2(props.iconTemplate)
      }),
      contentRef: this.contentRef,
      submitInputRef: this.submitInputRef,
      inkRippleRef: this.inkRippleRef,
      widgetRef: this.widgetRef,
      onActive: this.onActive,
      onInactive: this.onInactive,
      onWidgetClick: this.onWidgetClick,
      keyDown: this.keyDown,
      emitClickEvent: this.emitClickEvent,
      aria: this.aria,
      cssClasses: this.cssClasses,
      iconSource: this.iconSource,
      inkRippleConfig: this.inkRippleConfig,
      buttonTemplateData: this.buttonTemplateData,
      restAttributes: this.restAttributes
    });
  }
};
Button.defaultProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(ButtonProps), Object.getOwnPropertyDescriptors(_extends({}, convertRulesToOptions(defaultOptionRules)))));
var __defaultOptionRules = [];
function defaultOptions(rule) {
  __defaultOptionRules.push(rule);
  Button.defaultProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(Button.defaultProps), Object.getOwnPropertyDescriptors(convertRulesToOptions(defaultOptionRules)), Object.getOwnPropertyDescriptors(convertRulesToOptions(__defaultOptionRules))));
}

// node_modules/devextreme/esm/renovation/ui/button.j.js
var Button2 = class extends ButtonWrapper {
  getProps() {
    var props = super.getProps();
    props.onKeyDown = this._wrapKeyDownHandler(props.onKeyDown);
    return props;
  }
  focus() {
    var _this$viewRef;
    return null === (_this$viewRef = this.viewRef) || void 0 === _this$viewRef ? void 0 : _this$viewRef.focus(...arguments);
  }
  activate() {
    var _this$viewRef2;
    return null === (_this$viewRef2 = this.viewRef) || void 0 === _this$viewRef2 ? void 0 : _this$viewRef2.activate(...arguments);
  }
  deactivate() {
    var _this$viewRef3;
    return null === (_this$viewRef3 = this.viewRef) || void 0 === _this$viewRef3 ? void 0 : _this$viewRef3.deactivate(...arguments);
  }
  _getActionConfigs() {
    return {
      onClick: {
        excludeValidators: ["readOnly"]
      },
      onSubmit: {}
    };
  }
  get _propsInfo() {
    return {
      twoWay: [],
      allowNull: [],
      elements: ["onSubmit"],
      templates: ["template", "iconTemplate"],
      props: ["activeStateEnabled", "hoverStateEnabled", "icon", "iconPosition", "onClick", "onSubmit", "pressed", "stylingMode", "template", "iconTemplate", "text", "type", "useInkRipple", "useSubmitBehavior", "templateData", "className", "accessKey", "disabled", "focusStateEnabled", "height", "hint", "onKeyDown", "rtlEnabled", "tabIndex", "visible", "width"]
    };
  }
  get _viewComponent() {
    return Button;
  }
};
component_registrator_default("dxButton", Button2);
Button2.defaultOptions = defaultOptions;

// node_modules/devextreme/esm/ui/button.js
var button_default = Button2;

// node_modules/devextreme/esm/ui/text_box/texteditor_button_collection/custom.js
var CUSTOM_BUTTON_HOVERED_CLASS = "dx-custom-button-hovered";
var CustomButton = class extends TextEditorButton {
  _attachEvents(instance, $element) {
    var {
      editor
    } = this;
    events_engine_default.on($element, HOVERSTART, () => {
      editor.$element().addClass(CUSTOM_BUTTON_HOVERED_CLASS);
    });
    events_engine_default.on($element, HOVEREND, () => {
      editor.$element().removeClass(CUSTOM_BUTTON_HOVERED_CLASS);
    });
    events_engine_default.on($element, CLICK_EVENT_NAME, (e) => {
      e.stopPropagation();
    });
  }
  _create() {
    var {
      editor
    } = this;
    var $element = renderer_default("<div>");
    this._addToContainer($element);
    var instance = editor._createComponent($element, button_default, extend({}, this.options, {
      ignoreParentReadOnly: true,
      disabled: this._isDisabled(),
      integrationOptions: this._prepareIntegrationOptions(editor)
    }));
    return {
      $element,
      instance
    };
  }
  _prepareIntegrationOptions(editor) {
    return extend({}, editor.option("integrationOptions"), {
      skipTemplates: ["content"]
    });
  }
  update() {
    var isUpdated = super.update();
    if (this.instance) {
      this.instance.option("disabled", this._isDisabled());
    }
    return isUpdated;
  }
  _isVisible() {
    var {
      editor
    } = this;
    return editor.option("visible");
  }
  _isDisabled() {
    var isDefinedByUser = void 0 !== this.options.disabled;
    if (isDefinedByUser) {
      return this.instance ? this.instance.option("disabled") : this.options.disabled;
    } else {
      return this.editor.option("readOnly");
    }
  }
};

// node_modules/devextreme/esm/ui/text_box/texteditor_button_collection/index.js
var TEXTEDITOR_BUTTONS_CONTAINER_CLASS = "dx-texteditor-buttons-container";
function checkButtonInfo(buttonInfo) {
  (() => {
    if (!buttonInfo || "object" !== typeof buttonInfo || Array.isArray(buttonInfo)) {
      throw ui_errors_default.Error("E1053");
    }
  })();
  (() => {
    if (!("name" in buttonInfo)) {
      throw ui_errors_default.Error("E1054");
    }
  })();
  (() => {
    var {
      name: name2
    } = buttonInfo;
    if ("string" !== typeof name2) {
      throw ui_errors_default.Error("E1055");
    }
  })();
  (() => {
    var {
      location
    } = buttonInfo;
    if ("location" in buttonInfo && "after" !== location && "before" !== location) {
      buttonInfo.location = "after";
    }
  })();
}
function checkNamesUniqueness(existingNames, newName) {
  if (-1 !== existingNames.indexOf(newName)) {
    throw ui_errors_default.Error("E1055", newName);
  }
  existingNames.push(newName);
}
function isPredefinedButtonName(name2, predefinedButtonsInfo) {
  return !!predefinedButtonsInfo.find((info) => info.name === name2);
}
var TextEditorButtonCollection = class {
  constructor(editor, defaultButtonsInfo) {
    this.buttons = [];
    this.defaultButtonsInfo = defaultButtonsInfo;
    this.editor = editor;
  }
  _compileButtonInfo(buttons) {
    var names = [];
    return buttons.map((button) => {
      var isStringButton = "string" === typeof button;
      if (!isStringButton) {
        checkButtonInfo(button);
      }
      var isDefaultButton = isStringButton || isPredefinedButtonName(button.name, this.defaultButtonsInfo);
      if (isDefaultButton) {
        var defaultButtonInfo = this.defaultButtonsInfo.find((_ref) => {
          var {
            name: name3
          } = _ref;
          return name3 === button || name3 === button.name;
        });
        if (!defaultButtonInfo) {
          throw ui_errors_default.Error("E1056", this.editor.NAME, button);
        }
        checkNamesUniqueness(names, button);
        return defaultButtonInfo;
      } else {
        var {
          name: name2
        } = button;
        checkNamesUniqueness(names, name2);
        return extend(button, {
          Ctor: CustomButton
        });
      }
    });
  }
  _createButton(buttonsInfo) {
    var {
      Ctor,
      options: options2,
      name: name2
    } = buttonsInfo;
    var button = new Ctor(name2, this.editor, options2);
    this.buttons.push(button);
    return button;
  }
  _renderButtons(buttons, $container, targetLocation) {
    var $buttonsContainer = null;
    var buttonsInfo = buttons ? this._compileButtonInfo(buttons) : this.defaultButtonsInfo;
    buttonsInfo.forEach((buttonsInfo2) => {
      var {
        location = "after"
      } = buttonsInfo2;
      if (location === targetLocation) {
        this._createButton(buttonsInfo2).render((() => {
          $buttonsContainer = $buttonsContainer || renderer_default("<div>").addClass(TEXTEDITOR_BUTTONS_CONTAINER_CLASS);
          "before" === targetLocation ? $container.prepend($buttonsContainer) : $container.append($buttonsContainer);
          return $buttonsContainer;
        })());
      }
    });
    return $buttonsContainer;
  }
  clean() {
    this.buttons.forEach((button) => button.dispose());
    this.buttons = [];
  }
  getButton(buttonName) {
    var button = this.buttons.find((_ref2) => {
      var {
        name: name2
      } = _ref2;
      return name2 === buttonName;
    });
    return button && button.instance;
  }
  renderAfterButtons(buttons, $container) {
    return this._renderButtons(buttons, $container, "after");
  }
  renderBeforeButtons(buttons, $container) {
    return this._renderButtons(buttons, $container, "before");
  }
  updateButtons(names) {
    this.buttons.forEach((button) => {
      if (!names || -1 !== names.indexOf(button.name)) {
        button.update();
      }
    });
  }
};

// node_modules/devextreme/esm/ui/text_box/ui.text_editor.label.js
var TEXTEDITOR_LABEL_CLASS = "dx-texteditor-label";
var TEXTEDITOR_WITH_LABEL_CLASS = "dx-texteditor-with-label";
var TEXTEDITOR_LABEL_OUTSIDE_CLASS = "dx-texteditor-label-outside";
var TEXTEDITOR_WITH_FLOATING_LABEL_CLASS = "dx-texteditor-with-floating-label";
var TEXTEDITOR_WITH_BEFORE_BUTTONS_CLASS = "dx-texteditor-with-before-buttons";
var LABEL_BEFORE_CLASS = "dx-label-before";
var LABEL_CLASS = "dx-label";
var LABEL_AFTER_CLASS = "dx-label-after";
var TextEditorLabel = class {
  constructor(props) {
    this.NAME = "dxLabel";
    this._props = props;
    this._id = "".concat(TEXTEDITOR_LABEL_CLASS, "-").concat(new guid_default());
    this._render();
    this._toggleMarkupVisibility();
  }
  _isVisible() {
    return !!this._props.text && "hidden" !== this._props.mode;
  }
  _render() {
    this._$before = renderer_default("<div>").addClass(LABEL_BEFORE_CLASS);
    this._$labelSpan = renderer_default("<span>");
    this._$label = renderer_default("<div>").addClass(LABEL_CLASS).append(this._$labelSpan);
    this._$after = renderer_default("<div>").addClass(LABEL_AFTER_CLASS);
    this._$root = renderer_default("<div>").addClass(TEXTEDITOR_LABEL_CLASS).attr("id", this._id).append(this._$before).append(this._$label).append(this._$after);
    this._updateMark();
    this._updateText();
    this._updateBeforeWidth();
    this._updateMaxWidth();
  }
  _toggleMarkupVisibility() {
    var visible2 = this._isVisible();
    this._updateEditorBeforeButtonsClass(visible2);
    this._updateEditorLabelClass(visible2);
    visible2 ? this._$root.appendTo(this._props.$editor) : this._$root.detach();
    this._attachEvents();
  }
  _attachEvents() {
    var clickEventName = addNamespace2(CLICK_EVENT_NAME, this.NAME);
    var hoverStartEventName = addNamespace2(HOVERSTART, this.NAME);
    var activeEventName = addNamespace2(ACTIVE_EVENT_NAME, this.NAME);
    events_engine_default.off(this._$labelSpan, clickEventName);
    events_engine_default.off(this._$labelSpan, hoverStartEventName);
    events_engine_default.off(this._$labelSpan, activeEventName);
    if (this._isVisible() && this._isOutsideMode()) {
      events_engine_default.on(this._$labelSpan, clickEventName, (e) => {
        var selectedText = getWindow().getSelection().toString();
        if ("" === selectedText) {
          this._props.onClickHandler();
          e.preventDefault();
        }
      });
      events_engine_default.on(this._$labelSpan, hoverStartEventName, (e) => {
        this._props.onHoverHandler(e);
      });
      events_engine_default.on(this._$labelSpan, activeEventName, (e) => {
        this._props.onActiveHandler(e);
      });
    }
  }
  _updateEditorLabelClass(visible2) {
    this._props.$editor.removeClass(TEXTEDITOR_WITH_FLOATING_LABEL_CLASS).removeClass(TEXTEDITOR_LABEL_OUTSIDE_CLASS).removeClass(TEXTEDITOR_WITH_LABEL_CLASS);
    if (visible2) {
      var labelClass = "floating" === this._props.mode ? TEXTEDITOR_WITH_FLOATING_LABEL_CLASS : TEXTEDITOR_WITH_LABEL_CLASS;
      this._props.$editor.addClass(labelClass);
      if (this._isOutsideMode()) {
        this._props.$editor.addClass(TEXTEDITOR_LABEL_OUTSIDE_CLASS);
      }
    }
  }
  _isOutsideMode() {
    return "outside" === this._props.mode;
  }
  _updateEditorBeforeButtonsClass() {
    var visible2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this._isVisible();
    this._props.$editor.removeClass(TEXTEDITOR_WITH_BEFORE_BUTTONS_CLASS);
    if (visible2) {
      var beforeButtonsClass = this._props.containsButtonsBefore ? TEXTEDITOR_WITH_BEFORE_BUTTONS_CLASS : "";
      this._props.$editor.addClass(beforeButtonsClass);
    }
  }
  _updateMark() {
    this._$labelSpan.attr("data-mark", this._props.mark);
  }
  _updateText() {
    this._$labelSpan.text(this._props.text);
  }
  _updateBeforeWidth() {
    if (this._isVisible()) {
      var _this$_props$beforeWi;
      var width = null !== (_this$_props$beforeWi = this._props.beforeWidth) && void 0 !== _this$_props$beforeWi ? _this$_props$beforeWi : this._props.getBeforeWidth();
      this._$before.css({
        width
      });
      this._updateLabelTransform();
    }
  }
  _updateLabelTransform() {
    var offset2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
    this._$labelSpan.css("transform", "");
    if (this._isVisible() && this._isOutsideMode()) {
      var sign2 = this._props.rtlEnabled ? 1 : -1;
      var labelTranslateX = sign2 * (getWidth(this._$before) + offset2);
      this._$labelSpan.css("transform", "translateX(".concat(labelTranslateX, "px)"));
    }
  }
  _updateMaxWidth() {
    if (this._isVisible() && !this._isOutsideMode()) {
      var _this$_props$containe;
      var maxWidth = null !== (_this$_props$containe = this._props.containerWidth) && void 0 !== _this$_props$containe ? _this$_props$containe : this._props.getContainerWidth();
      this._$label.css({
        maxWidth
      });
    }
  }
  $element() {
    return this._$root;
  }
  isVisible() {
    return this._isVisible();
  }
  getId() {
    if (this._isVisible()) {
      return this._id;
    }
  }
  updateMode(mode) {
    this._props.mode = mode;
    this._toggleMarkupVisibility();
    this._updateBeforeWidth();
    this._updateMaxWidth();
  }
  updateText(text) {
    this._props.text = text;
    this._updateText();
    this._toggleMarkupVisibility();
    this._updateBeforeWidth();
    this._updateMaxWidth();
  }
  updateMark(mark) {
    this._props.mark = mark;
    this._updateMark();
  }
  updateContainsButtonsBefore(containsButtonsBefore) {
    this._props.containsButtonsBefore = containsButtonsBefore;
    this._updateEditorBeforeButtonsClass();
  }
  updateBeforeWidth(beforeWidth) {
    this._props.beforeWidth = beforeWidth;
    this._updateBeforeWidth();
  }
  updateMaxWidth(containerWidth) {
    this._props.containerWidth = containerWidth;
    this._updateMaxWidth();
  }
};

// node_modules/devextreme/esm/core/resize_observer.js
var window16 = getWindow();
var ResizeObserverMock = {
  observe: noop2,
  unobserve: noop2,
  disconnect: noop2
};
var ResizeObserverSingleton = class {
  constructor() {
    if (!hasWindow() || !window16.ResizeObserver) {
      return ResizeObserverMock;
    }
    this._callbacksMap = /* @__PURE__ */ new Map();
    this._observer = new window16.ResizeObserver((entries) => {
      entries.forEach((entry) => {
        var _this$_callbacksMap$g;
        null === (_this$_callbacksMap$g = this._callbacksMap.get(entry.target)) || void 0 === _this$_callbacksMap$g ? void 0 : _this$_callbacksMap$g(entry);
      });
    });
  }
  observe(element, callback) {
    this._callbacksMap.set(element, callback);
    this._observer.observe(element);
  }
  unobserve(element) {
    this._callbacksMap.delete(element);
    this._observer.unobserve(element);
  }
  disconnect() {
    this._callbacksMap.clear();
    this._observer.disconnect();
  }
};
var resizeObserverSingleton = new ResizeObserverSingleton();
var resize_observer_default = resizeObserverSingleton;

// node_modules/devextreme/esm/ui/text_box/ui.text_editor.base.js
var TEXTEDITOR_CLASS = "dx-texteditor";
var TEXTEDITOR_INPUT_CONTAINER_CLASS = "dx-texteditor-input-container";
var TEXTEDITOR_INPUT_CLASS = "dx-texteditor-input";
var TEXTEDITOR_INPUT_SELECTOR = "." + TEXTEDITOR_INPUT_CLASS;
var TEXTEDITOR_CONTAINER_CLASS = "dx-texteditor-container";
var TEXTEDITOR_BUTTONS_CONTAINER_CLASS2 = "dx-texteditor-buttons-container";
var TEXTEDITOR_PLACEHOLDER_CLASS = "dx-placeholder";
var TEXTEDITOR_EMPTY_INPUT_CLASS = "dx-texteditor-empty";
var STATE_INVISIBLE_CLASS2 = "dx-state-invisible";
var TEXTEDITOR_PENDING_INDICATOR_CLASS = "dx-pending-indicator";
var TEXTEDITOR_VALIDATION_PENDING_CLASS = "dx-validation-pending";
var TEXTEDITOR_VALID_CLASS = "dx-valid";
var EVENTS_LIST = ["KeyDown", "KeyPress", "KeyUp", "Change", "Cut", "Copy", "Paste", "Input"];
var CONTROL_KEYS = ["tab", "enter", "shift", "control", "alt", "escape", "pageUp", "pageDown", "end", "home", "leftArrow", "upArrow", "rightArrow", "downArrow"];
var TextEditorLabelCreator = TextEditorLabel;
function checkButtonsOptionType(buttons) {
  if (isDefined(buttons) && !Array.isArray(buttons)) {
    throw ui_errors_default.Error("E1053");
  }
}
var TextEditorBase = editor_default.inherit({
  ctor: function(_, options2) {
    if (options2) {
      checkButtonsOptionType(options2.buttons);
    }
    this._buttonCollection = new TextEditorButtonCollection(this, this._getDefaultButtons());
    this._$beforeButtonsContainer = null;
    this._$afterButtonsContainer = null;
    this._labelContainerElement = null;
    this.callBase.apply(this, arguments);
  },
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      buttons: void 0,
      value: "",
      spellcheck: false,
      showClearButton: false,
      valueChangeEvent: "change",
      placeholder: "",
      inputAttr: {},
      onFocusIn: null,
      onFocusOut: null,
      onKeyDown: null,
      onKeyUp: null,
      onChange: null,
      onInput: null,
      onCut: null,
      onCopy: null,
      onPaste: null,
      onEnterKey: null,
      mode: "text",
      hoverStateEnabled: true,
      focusStateEnabled: true,
      text: void 0,
      displayValueFormatter: function(value2) {
        return isDefined(value2) && false !== value2 ? value2 : "";
      },
      stylingMode: config_default().editorStylingMode || "outlined",
      showValidationMark: true,
      label: "",
      labelMode: "static",
      labelMark: ""
    });
  },
  _defaultOptionsRules: function() {
    return this.callBase().concat([{
      device: function() {
        var themeName = current();
        return isMaterial(themeName);
      },
      options: {
        labelMode: "floating",
        stylingMode: config_default().editorStylingMode || "filled"
      }
    }, {
      device: function() {
        var themeName = current();
        return isFluent(themeName);
      },
      options: {
        labelMode: "outside"
      }
    }]);
  },
  _getDefaultButtons: function() {
    return [{
      name: "clear",
      Ctor: ClearButton
    }];
  },
  _isClearButtonVisible: function() {
    return this.option("showClearButton") && !this.option("readOnly");
  },
  _input: function() {
    return this.$element().find(TEXTEDITOR_INPUT_SELECTOR).first();
  },
  _isFocused: function() {
    return focused(this._input()) || this.callBase();
  },
  _inputWrapper: function() {
    return this.$element();
  },
  _buttonsContainer: function() {
    return this._inputWrapper().find("." + TEXTEDITOR_BUTTONS_CONTAINER_CLASS2).eq(0);
  },
  _isControlKey: function(key) {
    return -1 !== CONTROL_KEYS.indexOf(key);
  },
  _renderStylingMode: function() {
    this.callBase();
    this._updateButtonsStyling(this.option("stylingMode"));
  },
  _initMarkup: function() {
    this.$element().addClass(TEXTEDITOR_CLASS);
    this._renderInput();
    this._renderStylingMode();
    this._renderInputType();
    this._renderPlaceholder();
    this._renderProps();
    this.callBase();
    this._renderValue();
    this._renderLabel();
  },
  _render: function() {
    this.callBase();
    this._refreshValueChangeEvent();
    this._renderEvents();
    this._renderEnterKeyAction();
    this._renderEmptinessEvent();
  },
  _renderInput: function() {
    this._$buttonsContainer = this._$textEditorContainer = renderer_default("<div>").addClass(TEXTEDITOR_CONTAINER_CLASS).appendTo(this.$element());
    this._$textEditorInputContainer = renderer_default("<div>").addClass(TEXTEDITOR_INPUT_CONTAINER_CLASS).appendTo(this._$textEditorContainer);
    this._$textEditorInputContainer.append(this._createInput());
    this._renderButtonContainers();
  },
  _getInputContainer() {
    return this._$textEditorInputContainer;
  },
  _renderPendingIndicator: function() {
    this.$element().addClass(TEXTEDITOR_VALIDATION_PENDING_CLASS);
    var $inputContainer = this._getInputContainer();
    var $indicatorElement = renderer_default("<div>").addClass(TEXTEDITOR_PENDING_INDICATOR_CLASS).appendTo($inputContainer);
    this._pendingIndicator = this._createComponent($indicatorElement, load_indicator_default);
  },
  _disposePendingIndicator: function() {
    if (!this._pendingIndicator) {
      return;
    }
    this._pendingIndicator.dispose();
    this._pendingIndicator.$element().remove();
    this._pendingIndicator = null;
    this.$element().removeClass(TEXTEDITOR_VALIDATION_PENDING_CLASS);
  },
  _renderValidationState: function() {
    this.callBase();
    var isPending2 = "pending" === this.option("validationStatus");
    if (isPending2) {
      !this._pendingIndicator && this._renderPendingIndicator();
      this._showValidMark = false;
    } else {
      if ("invalid" === this.option("validationStatus")) {
        this._showValidMark = false;
      }
      if (!this._showValidMark && true === this.option("showValidationMark")) {
        this._showValidMark = "valid" === this.option("validationStatus") && !!this._pendingIndicator;
      }
      this._disposePendingIndicator();
    }
    this._toggleValidMark();
  },
  _renderButtonContainers: function() {
    var buttons = this.option("buttons");
    this._$beforeButtonsContainer = this._buttonCollection.renderBeforeButtons(buttons, this._$buttonsContainer);
    this._$afterButtonsContainer = this._buttonCollection.renderAfterButtons(buttons, this._$buttonsContainer);
  },
  _cleanButtonContainers: function() {
    var _this$_$beforeButtons, _this$_$afterButtonsC;
    null === (_this$_$beforeButtons = this._$beforeButtonsContainer) || void 0 === _this$_$beforeButtons ? void 0 : _this$_$beforeButtons.remove();
    null === (_this$_$afterButtonsC = this._$afterButtonsContainer) || void 0 === _this$_$afterButtonsC ? void 0 : _this$_$afterButtonsC.remove();
    this._buttonCollection.clean();
  },
  _clean() {
    this._buttonCollection.clean();
    this._disposePendingIndicator();
    this._unobserveLabelContainerResize();
    this._$beforeButtonsContainer = null;
    this._$afterButtonsContainer = null;
    this._$textEditorContainer = null;
    this._$buttonsContainer = null;
    this.callBase();
  },
  _createInput: function() {
    var $input = renderer_default("<input>");
    this._applyInputAttributes($input, this.option("inputAttr"));
    return $input;
  },
  _setSubmitElementName: function(name2) {
    var inputAttrName = this.option("inputAttr.name");
    return this.callBase(name2 || inputAttrName || "");
  },
  _applyInputAttributes: function($input, customAttributes) {
    var inputAttributes = extend(this._getDefaultAttributes(), customAttributes);
    $input.attr(inputAttributes).addClass(TEXTEDITOR_INPUT_CLASS);
    this._setInputMinHeight($input);
  },
  _setInputMinHeight: function($input) {
    $input.css("minHeight", this.option("height") ? "0" : "");
  },
  _getPlaceholderAttr() {
    var {
      ios: ios2,
      mac: mac2
    } = devices_default.real();
    var {
      placeholder
    } = this.option();
    var value2 = placeholder || (ios2 || mac2 ? " " : null);
    return value2;
  },
  _getDefaultAttributes() {
    var defaultAttributes = {
      autocomplete: "off",
      placeholder: this._getPlaceholderAttr()
    };
    return defaultAttributes;
  },
  _updateButtons: function(names) {
    this._buttonCollection.updateButtons(names);
  },
  _updateButtonsStyling: function(editorStylingMode) {
    each(this.option("buttons"), (_, _ref) => {
      var {
        options: options2,
        name: buttonName
      } = _ref;
      if (options2 && !options2.stylingMode && this.option("visible")) {
        var buttonInstance = this.getButton(buttonName);
        buttonInstance.option && buttonInstance.option("stylingMode", "underlined" === editorStylingMode ? "text" : "contained");
      }
    });
  },
  _renderValue: function() {
    var renderInputPromise = this._renderInputValue();
    return renderInputPromise.promise();
  },
  _renderInputValue: function(value2) {
    var _value;
    value2 = null !== (_value = value2) && void 0 !== _value ? _value : this.option("value");
    var text = this.option("text");
    var displayValue = this.option("displayValue");
    var displayValueFormatter = this.option("displayValueFormatter");
    if (void 0 !== displayValue && null !== value2) {
      text = displayValueFormatter(displayValue);
    } else if (!isDefined(text)) {
      text = displayValueFormatter(value2);
    }
    this.option("text", text);
    if (this._input().val() !== (isDefined(text) ? text : "")) {
      this._renderDisplayText(text);
    } else {
      this._toggleEmptinessEventHandler();
    }
    return new Deferred().resolve();
  },
  _renderDisplayText: function(text) {
    this._input().val(text);
    this._toggleEmptinessEventHandler();
  },
  _isValueValid: function() {
    if (this._input().length) {
      var validity = this._input().get(0).validity;
      if (validity) {
        return validity.valid;
      }
    }
    return true;
  },
  _toggleEmptiness: function(isEmpty3) {
    this.$element().toggleClass(TEXTEDITOR_EMPTY_INPUT_CLASS, isEmpty3);
    this._togglePlaceholder(isEmpty3);
  },
  _togglePlaceholder: function(isEmpty3) {
    this.$element().find(".".concat(TEXTEDITOR_PLACEHOLDER_CLASS)).eq(0).toggleClass(STATE_INVISIBLE_CLASS2, !isEmpty3);
  },
  _renderProps: function() {
    this._toggleReadOnlyState();
    this._toggleSpellcheckState();
    this._toggleTabIndex();
  },
  _toggleDisabledState: function(value2) {
    this.callBase.apply(this, arguments);
    var $input = this._input();
    $input.prop("disabled", value2);
  },
  _toggleTabIndex: function() {
    var $input = this._input();
    var disabled = this.option("disabled");
    var focusStateEnabled = this.option("focusStateEnabled");
    if (disabled || !focusStateEnabled) {
      $input.attr("tabIndex", -1);
    } else {
      $input.removeAttr("tabIndex");
    }
  },
  _toggleReadOnlyState: function() {
    this._input().prop("readOnly", this._readOnlyPropValue());
    this.callBase();
  },
  _readOnlyPropValue: function() {
    return this.option("readOnly");
  },
  _toggleSpellcheckState: function() {
    this._input().prop("spellcheck", this.option("spellcheck"));
  },
  _unobserveLabelContainerResize: function() {
    if (this._labelContainerElement) {
      resize_observer_default.unobserve(this._labelContainerElement);
      this._labelContainerElement = null;
    }
  },
  _getLabelContainer: function() {
    return this._input();
  },
  _getLabelContainerWidth: function() {
    return getWidth(this._getLabelContainer());
  },
  _getLabelBeforeWidth: function() {
    var buttonsBeforeWidth = this._$beforeButtonsContainer && getWidth(this._$beforeButtonsContainer);
    return null !== buttonsBeforeWidth && void 0 !== buttonsBeforeWidth ? buttonsBeforeWidth : 0;
  },
  _updateLabelWidth: function() {
    this._label.updateBeforeWidth(this._getLabelBeforeWidth());
    this._label.updateMaxWidth(this._getLabelContainerWidth());
  },
  _getFieldElement() {
    return this._getLabelContainer();
  },
  _setFieldAria(force) {
    var {
      "aria-label": ariaLabel
    } = this.option("inputAttr");
    var labelId = this._label.getId();
    var value2 = ariaLabel ? void 0 : labelId;
    if (value2 || force) {
      var aria = {
        labelledby: value2,
        label: ariaLabel
      };
      this.setAria(aria, this._getFieldElement());
    }
  },
  _renderLabel: function() {
    this._unobserveLabelContainerResize();
    this._labelContainerElement = renderer_default(this._getLabelContainer()).get(0);
    var {
      label,
      labelMode,
      labelMark,
      rtlEnabled
    } = this.option();
    var labelConfig = {
      onClickHandler: () => {
        this.focus();
      },
      onHoverHandler: (e) => {
        e.stopPropagation();
      },
      onActiveHandler: (e) => {
        e.stopPropagation();
      },
      $editor: this.$element(),
      text: label,
      mark: labelMark,
      mode: labelMode,
      rtlEnabled,
      containsButtonsBefore: !!this._$beforeButtonsContainer,
      getContainerWidth: () => this._getLabelContainerWidth(),
      getBeforeWidth: () => this._getLabelBeforeWidth()
    };
    this._label = new TextEditorLabelCreator(labelConfig);
    this._setFieldAria();
    if (this._labelContainerElement) {
      resize_observer_default.observe(this._labelContainerElement, this._updateLabelWidth.bind(this));
    }
  },
  _renderPlaceholder: function() {
    this._renderPlaceholderMarkup();
    this._attachPlaceholderEvents();
  },
  _renderPlaceholderMarkup: function() {
    if (this._$placeholder) {
      this._$placeholder.remove();
      this._$placeholder = null;
    }
    var $input = this._input();
    var placeholder = this.option("placeholder");
    var placeholderAttributes = {
      id: placeholder ? "dx-".concat(new guid_default()) : void 0,
      "data-dx_placeholder": placeholder
    };
    var $placeholder = this._$placeholder = renderer_default("<div>").attr(placeholderAttributes);
    $placeholder.insertAfter($input);
    $placeholder.addClass(TEXTEDITOR_PLACEHOLDER_CLASS);
  },
  _attachPlaceholderEvents: function() {
    var startEvent = addNamespace2(pointer_default.up, this.NAME);
    events_engine_default.on(this._$placeholder, startEvent, () => {
      events_engine_default.trigger(this._input(), "focus");
    });
    this._toggleEmptinessEventHandler();
  },
  _placeholder: function() {
    return this._$placeholder || renderer_default();
  },
  _clearValueHandler: function(e) {
    var $input = this._input();
    e.stopPropagation();
    this._saveValueChangeEvent(e);
    this._clearValue();
    !this._isFocused() && events_engine_default.trigger($input, "focus");
    events_engine_default.trigger($input, "input");
  },
  _clearValue: function() {
    this.clear();
  },
  _renderEvents: function() {
    var $input = this._input();
    each(EVENTS_LIST, (_, event) => {
      if (this.hasActionSubscription("on" + event)) {
        var action = this._createActionByOption("on" + event, {
          excludeValidators: ["readOnly"]
        });
        events_engine_default.on($input, addNamespace2(event.toLowerCase(), this.NAME), (e) => {
          if (this._disposed) {
            return;
          }
          action({
            event: e
          });
        });
      }
    });
  },
  _refreshEvents: function() {
    var $input = this._input();
    each(EVENTS_LIST, (_, event) => {
      events_engine_default.off($input, addNamespace2(event.toLowerCase(), this.NAME));
    });
    this._renderEvents();
  },
  _keyPressHandler: function() {
    this.option("text", this._input().val());
  },
  _keyDownHandler: function(e) {
    var $input = this._input();
    var isCtrlEnter = e.ctrlKey && "enter" === normalizeKeyName(e);
    var isNewValue = $input.val() !== this.option("value");
    if (isCtrlEnter && isNewValue) {
      events_engine_default.trigger($input, "change");
    }
  },
  _getValueChangeEventOptionName: function() {
    return "valueChangeEvent";
  },
  _renderValueChangeEvent: function() {
    var keyPressEvent = addNamespace2(this._renderValueEventName(), "".concat(this.NAME, "TextChange"));
    var valueChangeEvent = addNamespace2(this.option(this._getValueChangeEventOptionName()), "".concat(this.NAME, "ValueChange"));
    var keyDownEvent = addNamespace2("keydown", "".concat(this.NAME, "TextChange"));
    var $input = this._input();
    events_engine_default.on($input, keyPressEvent, this._keyPressHandler.bind(this));
    events_engine_default.on($input, valueChangeEvent, this._valueChangeEventHandler.bind(this));
    events_engine_default.on($input, keyDownEvent, this._keyDownHandler.bind(this));
  },
  _cleanValueChangeEvent: function() {
    var valueChangeNamespace = ".".concat(this.NAME, "ValueChange");
    var textChangeNamespace = ".".concat(this.NAME, "TextChange");
    events_engine_default.off(this._input(), valueChangeNamespace);
    events_engine_default.off(this._input(), textChangeNamespace);
  },
  _refreshValueChangeEvent: function() {
    this._cleanValueChangeEvent();
    this._renderValueChangeEvent();
  },
  _renderValueEventName: function() {
    return "input change keypress";
  },
  _focusTarget: function() {
    return this._input();
  },
  _focusEventTarget: function() {
    return this.element();
  },
  _isInput: function(element) {
    return element === this._input().get(0);
  },
  _preventNestedFocusEvent: function(event) {
    if (event.isDefaultPrevented()) {
      return true;
    }
    var shouldPrevent = this._isNestedTarget(event.relatedTarget);
    if ("focusin" === event.type) {
      shouldPrevent = shouldPrevent && this._isNestedTarget(event.target) && !this._isInput(event.target);
    } else if (!shouldPrevent) {
      this._toggleFocusClass(false, this.$element());
    }
    shouldPrevent && event.preventDefault();
    return shouldPrevent;
  },
  _isNestedTarget: function(target) {
    return !!this.$element().find(target).length;
  },
  _focusClassTarget: function() {
    return this.$element();
  },
  _focusInHandler: function(event) {
    this._preventNestedFocusEvent(event);
    this.callBase.apply(this, arguments);
  },
  _focusOutHandler: function(event) {
    this._preventNestedFocusEvent(event);
    this.callBase.apply(this, arguments);
  },
  _toggleFocusClass: function(isFocused, $element) {
    this.callBase(isFocused, this._focusClassTarget($element));
  },
  _hasFocusClass: function(element) {
    return this.callBase(renderer_default(element || this.$element()));
  },
  _renderEmptinessEvent: function() {
    var $input = this._input();
    events_engine_default.on($input, "input blur", this._toggleEmptinessEventHandler.bind(this));
  },
  _toggleEmptinessEventHandler: function() {
    var text = this._input().val();
    var isEmpty3 = ("" === text || null === text) && this._isValueValid();
    this._toggleEmptiness(isEmpty3);
  },
  _valueChangeEventHandler: function(e, formattedValue) {
    if (this.option("readOnly")) {
      return;
    }
    this._saveValueChangeEvent(e);
    this.option("value", arguments.length > 1 ? formattedValue : this._input().val());
    this._saveValueChangeEvent(void 0);
  },
  _renderEnterKeyAction: function() {
    this._enterKeyAction = this._createActionByOption("onEnterKey", {
      excludeValidators: ["readOnly"]
    });
    events_engine_default.off(this._input(), "keyup.onEnterKey.dxTextEditor");
    events_engine_default.on(this._input(), "keyup.onEnterKey.dxTextEditor", this._enterKeyHandlerUp.bind(this));
  },
  _enterKeyHandlerUp: function(e) {
    if (this._disposed) {
      return;
    }
    if ("enter" === normalizeKeyName(e)) {
      this._enterKeyAction({
        event: e
      });
    }
  },
  _updateValue: function() {
    this._options.silent("text", null);
    this._renderValue();
  },
  _dispose: function() {
    this._enterKeyAction = void 0;
    this.callBase();
  },
  _getSubmitElement: function() {
    return this._input();
  },
  _hasActiveElement: function() {
    return this._input().is(dom_adapter_default.getActiveElement(this._input()[0]));
  },
  _optionChanged: function(args) {
    var {
      name: name2,
      fullName,
      value: value2
    } = args;
    var eventName = name2.replace("on", "");
    if (EVENTS_LIST.includes(eventName)) {
      this._refreshEvents();
      return;
    }
    switch (name2) {
      case "valueChangeEvent":
        this._refreshValueChangeEvent();
        this._refreshFocusEvent();
        this._refreshEvents();
        break;
      case "onValueChanged":
        this._createValueChangeAction();
        break;
      case "focusStateEnabled":
        this.callBase(args);
        this._toggleTabIndex();
        break;
      case "spellcheck":
        this._toggleSpellcheckState();
        break;
      case "mode":
        this._renderInputType();
        break;
      case "onEnterKey":
        this._renderEnterKeyAction();
        break;
      case "placeholder":
        this._renderPlaceholder();
        this._setFieldAria(true);
        this._input().attr({
          placeholder: this._getPlaceholderAttr()
        });
        break;
      case "label":
        this._label.updateText(value2);
        this._setFieldAria(true);
        break;
      case "labelMark":
        this._label.updateMark(value2);
        break;
      case "labelMode":
        this._label.updateMode(value2);
        this._setFieldAria();
        break;
      case "width":
        this.callBase(args);
        this._label.updateMaxWidth(this._getLabelContainerWidth());
        break;
      case "readOnly":
      case "disabled":
        this._updateButtons();
        this.callBase(args);
        break;
      case "showClearButton":
        this._updateButtons(["clear"]);
        break;
      case "text":
        break;
      case "value":
        this._updateValue();
        this.callBase(args);
        break;
      case "inputAttr":
        this._applyInputAttributes(this._input(), this.option(name2));
        break;
      case "stylingMode":
        this._renderStylingMode();
        this._updateLabelWidth();
        break;
      case "buttons":
        if (fullName === name2) {
          checkButtonsOptionType(value2);
        }
        this._cleanButtonContainers();
        this._renderButtonContainers();
        this._updateButtonsStyling(this.option("stylingMode"));
        this._updateLabelWidth();
        this._label.updateContainsButtonsBefore(!!this._$beforeButtonsContainer);
        break;
      case "visible":
        this.callBase(args);
        if (value2 && this.option("buttons")) {
          this._cleanButtonContainers();
          this._renderButtonContainers();
          this._updateButtonsStyling(this.option("stylingMode"));
        }
        break;
      case "displayValueFormatter":
        this._invalidate();
        break;
      case "showValidationMark":
        break;
      default:
        this.callBase(args);
    }
  },
  _renderInputType: function() {
    this._setInputType(this.option("mode"));
  },
  _setInputType: function(type2) {
    var input = this._input();
    if ("search" === type2) {
      type2 = "text";
    }
    try {
      input.prop("type", type2);
    } catch (e) {
      input.prop("type", "text");
    }
  },
  getButton(name2) {
    return this._buttonCollection.getButton(name2);
  },
  focus: function() {
    events_engine_default.trigger(this._input(), "focus");
  },
  clear: function() {
    if (this._showValidMark) {
      this._showValidMark = false;
      this._renderValidationState();
    }
    var defaultOptions3 = this._getDefaultOptions();
    if (this.option("value") === defaultOptions3.value) {
      this._options.silent("text", "");
      this._renderValue();
    } else {
      this.option("value", defaultOptions3.value);
    }
  },
  _resetToInitialValue() {
    if (this.option("value") === this._initialValue) {
      this._options.silent("text", this._initialValue);
      this._renderValue();
    } else {
      this.callBase();
    }
    this._disposePendingIndicator();
    this._showValidMark = false;
    this._toggleValidMark();
  },
  _toggleValidMark() {
    this.$element().toggleClass(TEXTEDITOR_VALID_CLASS, !!this._showValidMark);
  },
  reset: function() {
    var value2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0;
    if (arguments.length) {
      this.callBase(value2);
    } else {
      this.callBase();
    }
  },
  on: function(eventName, eventHandler) {
    var result2 = this.callBase(eventName, eventHandler);
    var event = eventName.charAt(0).toUpperCase() + eventName.substr(1);
    if (EVENTS_LIST.indexOf(event) >= 0) {
      this._refreshEvents();
    }
    return result2;
  }
});
var ui_text_editor_base_default = TextEditorBase;

// node_modules/devextreme/esm/ui/text_box/ui.text_editor.mask.strategy.js
var MASK_EVENT_NAMESPACE = "dxMask";
var BLUR_EVENT = "blur beforedeactivate";
var EMPTY_CHAR2 = " ";
var DELETE_INPUT_TYPES = ["deleteContentBackward", "deleteSoftLineBackward", "deleteContent", "deleteHardLineBackward"];
var HISTORY_INPUT_TYPES = ["historyUndo", "historyRedo"];
var EVENT_NAMES = ["focusIn", "focusOut", "input", "paste", "cut", "drop", "beforeInput"];
function getEmptyString(length) {
  return EMPTY_CHAR2.repeat(length);
}
var MaskStrategy = class {
  constructor(editor) {
    this.editor = editor;
  }
  _editorOption() {
    return this.editor.option(...arguments);
  }
  _editorInput() {
    return this.editor._input();
  }
  _editorCaret(newCaret) {
    if (!newCaret) {
      return this.editor._caret();
    }
    this.editor._caret(newCaret);
  }
  _attachChangeEventHandler() {
    if (!this._editorOption("valueChangeEvent").split(" ").includes("change")) {
      return;
    }
    var $input = this._editorInput();
    var namespace = addNamespace2(BLUR_EVENT, MASK_EVENT_NAMESPACE);
    events_engine_default.on($input, namespace, (e) => {
      this.editor._changeHandler(e);
    });
  }
  _beforeInputHandler() {
    this._previousText = this._editorOption("text");
    this._prevCaret = this._editorCaret();
  }
  _inputHandler(event) {
    var {
      originalEvent
    } = event;
    if (!originalEvent) {
      return;
    }
    var {
      inputType: inputType2
    } = originalEvent;
    if (HISTORY_INPUT_TYPES.includes(inputType2)) {
      this._handleHistoryInputEvent();
    } else if (DELETE_INPUT_TYPES.includes(inputType2)) {
      this._handleBackwardDeleteInputEvent();
    } else {
      var currentCaret = this._editorCaret();
      if (!currentCaret.end) {
        return;
      }
      this._clearSelectedText();
      this._autoFillHandler(originalEvent);
      this._editorCaret(currentCaret);
      this._handleInsertTextInputEvent(originalEvent.data);
    }
    if (this._editorOption("text") === this._previousText) {
      event.stopImmediatePropagation();
    }
  }
  _handleHistoryInputEvent() {
    var caret3 = this._editorCaret();
    this._updateEditorMask({
      start: caret3.start,
      length: caret3.end - caret3.start,
      text: ""
    });
    this._editorCaret(this._prevCaret);
  }
  _handleBackwardDeleteInputEvent() {
    this._clearSelectedText();
    var caret3 = this._editorCaret();
    this.editor.setForwardDirection();
    this.editor._adjustCaret();
    var adjustedForwardCaret = this._editorCaret();
    if (adjustedForwardCaret.start !== caret3.start) {
      this.editor.setBackwardDirection();
      this.editor._adjustCaret();
    }
  }
  _clearSelectedText() {
    var _this$_prevCaret, _this$_prevCaret2;
    var length = (null === (_this$_prevCaret = this._prevCaret) || void 0 === _this$_prevCaret ? void 0 : _this$_prevCaret.end) - (null === (_this$_prevCaret2 = this._prevCaret) || void 0 === _this$_prevCaret2 ? void 0 : _this$_prevCaret2.start) || 1;
    var caret3 = this._editorCaret();
    if (!this._isAutoFill()) {
      this.editor.setBackwardDirection();
      this._updateEditorMask({
        start: caret3.start,
        length,
        text: getEmptyString(length)
      });
    }
  }
  _handleInsertTextInputEvent(data3) {
    var _this$_prevCaret$star, _this$_prevCaret3;
    var text = null !== data3 && void 0 !== data3 ? data3 : "";
    this.editor.setForwardDirection();
    var hasValidChars = this._updateEditorMask({
      start: null !== (_this$_prevCaret$star = null === (_this$_prevCaret3 = this._prevCaret) || void 0 === _this$_prevCaret3 ? void 0 : _this$_prevCaret3.start) && void 0 !== _this$_prevCaret$star ? _this$_prevCaret$star : 0,
      length: text.length || 1,
      text
    });
    if (!hasValidChars) {
      this._editorCaret(this._prevCaret);
    }
  }
  _updateEditorMask(args) {
    var textLength = args.text.length;
    var processedCharsCount = this.editor._handleChain(args);
    this.editor._displayMask();
    if (this.editor.isForwardDirection()) {
      var {
        start,
        end
      } = this._editorCaret();
      var correction = processedCharsCount - textLength;
      var hasSkippedStub = processedCharsCount > 1;
      if (hasSkippedStub && 1 === textLength) {
        this._editorCaret({
          start: start + correction,
          end: end + correction
        });
      }
      this.editor._adjustCaret();
    }
    return !!processedCharsCount;
  }
  _focusInHandler() {
    this.editor._showMaskPlaceholder();
    this.editor.setForwardDirection();
    if (!this.editor._isValueEmpty() && this._editorOption("isValid")) {
      this.editor._adjustCaret();
    } else {
      var caret3 = this.editor._maskRulesChain.first();
      this._caretTimeout = setTimeout(() => {
        this._editorCaret({
          start: caret3,
          end: caret3
        });
      }, 0);
    }
  }
  _focusOutHandler(event) {
    this.editor._changeHandler(event);
    if ("onFocus" === this._editorOption("showMaskMode") && this.editor._isValueEmpty()) {
      this._editorOption("text", "");
      this.editor._renderDisplayText("");
    }
  }
  _delHandler(event) {
    var {
      editor
    } = this;
    editor._maskKeyHandler(event, () => {
      if (!editor._hasSelection()) {
        editor._handleKey(EMPTY_CHAR2);
      }
    });
  }
  _cutHandler(event) {
    var caret3 = this._editorCaret();
    var selectedText = this._editorInput().val().substring(caret3.start, caret3.end);
    this.editor._maskKeyHandler(event, () => clipboardText(event, selectedText));
  }
  _dropHandler() {
    this._clearDragTimer();
    this._dragTimer = setTimeout(() => {
      var value2 = this.editor._convertToValue(this._editorInput().val());
      this._editorOption("value", value2);
    });
  }
  _pasteHandler(event) {
    var {
      editor
    } = this;
    if (this._editorOption("disabled")) {
      return;
    }
    var caret3 = this._editorCaret();
    editor._maskKeyHandler(event, () => {
      var pastedText = clipboardText(event);
      var restText = editor._maskRulesChain.text().substring(caret3.end);
      var accepted = editor._handleChain({
        text: pastedText,
        start: caret3.start,
        length: pastedText.length
      });
      var newCaret = caret3.start + accepted;
      editor._handleChain({
        text: restText,
        start: newCaret,
        length: restText.length
      });
      editor._caret({
        start: newCaret,
        end: newCaret
      });
    });
  }
  _autoFillHandler(event) {
    var {
      editor
    } = this;
    var inputVal = this._editorInput().val();
    this._inputHandlerTimer = setTimeout(() => {
      if (this._isAutoFill()) {
        editor._maskKeyHandler(event, () => {
          editor._handleChain({
            text: inputVal,
            start: 0,
            length: inputVal.length
          });
        });
        editor._validateMask();
      }
    });
  }
  _isAutoFill() {
    var $input = this._editorInput();
    if (browser_default.webkit) {
      var _input$matches;
      var input = $input.get(0);
      return null !== (_input$matches = null === input || void 0 === input ? void 0 : input.matches(":-webkit-autofill")) && void 0 !== _input$matches ? _input$matches : false;
    }
    return false;
  }
  _clearDragTimer() {
    clearTimeout(this._dragTimer);
  }
  getHandler(handlerName) {
    return (args) => {
      var _this;
      null === (_this = this["_".concat(handlerName, "Handler")]) || void 0 === _this ? void 0 : _this.call(this, args);
    };
  }
  attachEvents() {
    var $input = this._editorInput();
    EVENT_NAMES.forEach((eventName) => {
      var namespace = addNamespace2(eventName.toLowerCase(), MASK_EVENT_NAMESPACE);
      events_engine_default.on($input, namespace, this.getHandler(eventName));
    });
    this._attachChangeEventHandler();
  }
  detachEvents() {
    events_engine_default.off(this._editorInput(), ".".concat(MASK_EVENT_NAMESPACE));
  }
  clean() {
    this._clearDragTimer();
    clearTimeout(this._caretTimeout);
    clearTimeout(this._inputHandlerTimer);
  }
};

// node_modules/devextreme/esm/ui/text_box/ui.text_editor.mask.js
var caret2 = utils_caret_default;
var EMPTY_CHAR3 = " ";
var ESCAPED_CHAR = "\\";
var TEXTEDITOR_MASKED_CLASS = "dx-texteditor-masked";
var FORWARD_DIRECTION = "forward";
var BACKWARD_DIRECTION = "backward";
var DROP_EVENT_NAME = "drop";
var buildInMaskRules = {
  0: /[0-9]/,
  9: /[0-9\s]/,
  "#": /[-+0-9\s]/,
  L: function(char) {
    return isLiteralChar(char);
  },
  l: function(char) {
    return isLiteralChar(char) || isSpaceChar(char);
  },
  C: /\S/,
  c: /./,
  A: function(char) {
    return isLiteralChar(char) || isNumericChar(char);
  },
  a: function(char) {
    return isLiteralChar(char) || isNumericChar(char) || isSpaceChar(char);
  }
};
function isNumericChar(char) {
  return /[0-9]/.test(char);
}
function isLiteralChar(char) {
  var code = char.charCodeAt();
  return 64 < code && code < 91 || 96 < code && code < 123 || code > 127;
}
function isSpaceChar(char) {
  return " " === char;
}
var TextEditorMask = ui_text_editor_base_default.inherit({
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      mask: "",
      maskChar: "_",
      maskRules: {},
      maskInvalidMessage: message_default.format("validation-mask"),
      useMaskedValue: false,
      showMaskMode: "always"
    });
  },
  _supportedKeys: function() {
    var that = this;
    var keyHandlerMap = {
      del: that._maskStrategy.getHandler("del"),
      enter: that._changeHandler
    };
    var result2 = that.callBase();
    each(keyHandlerMap, function(key, callback) {
      var parentHandler = result2[key];
      result2[key] = function(e) {
        that.option("mask") && callback.call(that, e);
        parentHandler && parentHandler(e);
      };
    });
    return result2;
  },
  _getSubmitElement: function() {
    return !this.option("mask") ? this.callBase() : this._$hiddenElement;
  },
  _init: function() {
    this.callBase();
    this._initMaskStrategy();
  },
  _initMaskStrategy: function() {
    this._maskStrategy = new MaskStrategy(this);
  },
  _initMarkup: function() {
    this._renderHiddenElement();
    this.callBase();
  },
  _attachMouseWheelEventHandlers: function() {
    var hasMouseWheelHandler = this._onMouseWheel !== noop2;
    if (!hasMouseWheelHandler) {
      return;
    }
    var input = this._input();
    var eventName = addNamespace2(EVENT_NAME, this.NAME);
    var mouseWheelAction = this._createAction((function(e) {
      var {
        event
      } = e;
      if (focused(input) && !isCommandKeyPressed(event)) {
        this._onMouseWheel(event);
        event.preventDefault();
        event.stopPropagation();
      }
    }).bind(this));
    events_engine_default.off(input, eventName);
    events_engine_default.on(input, eventName, function(e) {
      mouseWheelAction({
        event: e
      });
    });
  },
  _onMouseWheel: noop2,
  _useMaskBehavior() {
    return Boolean(this.option("mask"));
  },
  _attachDropEventHandler() {
    var useMaskBehavior = this._useMaskBehavior();
    if (!useMaskBehavior) {
      return;
    }
    var eventName = addNamespace2(DROP_EVENT_NAME, this.NAME);
    var input = this._input();
    events_engine_default.off(input, eventName);
    events_engine_default.on(input, eventName, (e) => e.preventDefault());
  },
  _render() {
    this._renderMask();
    this.callBase();
    this._attachDropEventHandler();
    this._attachMouseWheelEventHandlers();
  },
  _renderHiddenElement: function() {
    if (this.option("mask")) {
      this._$hiddenElement = renderer_default("<input>").attr("type", "hidden").appendTo(this._inputWrapper());
    }
  },
  _removeHiddenElement: function() {
    this._$hiddenElement && this._$hiddenElement.remove();
  },
  _renderMask: function() {
    this.$element().removeClass(TEXTEDITOR_MASKED_CLASS);
    this._maskRulesChain = null;
    this._maskStrategy.detachEvents();
    if (!this.option("mask")) {
      return;
    }
    this.$element().addClass(TEXTEDITOR_MASKED_CLASS);
    this._maskStrategy.attachEvents();
    this._parseMask();
    this._renderMaskedValue();
  },
  _changeHandler: function(e) {
    var $input = this._input();
    var inputValue = $input.val();
    if (inputValue === this._changedValue) {
      return;
    }
    this._changedValue = inputValue;
    var changeEvent = createEvent(e, {
      type: "change"
    });
    events_engine_default.trigger($input, changeEvent);
  },
  _parseMask: function() {
    this._maskRules = extend({}, buildInMaskRules, this.option("maskRules"));
    this._maskRulesChain = this._parseMaskRule(0);
  },
  _parseMaskRule: function(index2) {
    var mask = this.option("mask");
    if (index2 >= mask.length) {
      return new EmptyMaskRule();
    }
    var currentMaskChar = mask[index2];
    var isEscapedChar = currentMaskChar === ESCAPED_CHAR;
    var result2 = isEscapedChar ? new StubMaskRule({
      maskChar: mask[index2 + 1]
    }) : this._getMaskRule(currentMaskChar);
    result2.next(this._parseMaskRule(index2 + 1 + isEscapedChar));
    return result2;
  },
  _getMaskRule: function(pattern) {
    var ruleConfig;
    each(this._maskRules, function(rulePattern, allowedChars) {
      if (rulePattern === pattern) {
        ruleConfig = {
          pattern: rulePattern,
          allowedChars
        };
        return false;
      }
    });
    return isDefined(ruleConfig) ? new MaskRule(extend({
      maskChar: this.option("maskChar") || " "
    }, ruleConfig)) : new StubMaskRule({
      maskChar: pattern
    });
  },
  _renderMaskedValue: function() {
    if (!this._maskRulesChain) {
      return;
    }
    var value2 = this.option("value") || "";
    this._maskRulesChain.clear(this._normalizeChainArguments());
    var chainArgs = {
      length: value2.length
    };
    chainArgs[this._isMaskedValueMode() ? "text" : "value"] = value2;
    this._handleChain(chainArgs);
    this._displayMask();
  },
  _replaceSelectedText: function(text, selection, char) {
    if (void 0 === char) {
      return text;
    }
    var textBefore = text.slice(0, selection.start);
    var textAfter = text.slice(selection.end);
    var edited = textBefore + char + textAfter;
    return edited;
  },
  _isMaskedValueMode: function() {
    return this.option("useMaskedValue");
  },
  _displayMask: function(caret3) {
    caret3 = caret3 || this._caret();
    this._renderValue();
    this._caret(caret3);
  },
  _isValueEmpty: function() {
    return isEmpty(this._value);
  },
  _shouldShowMask: function() {
    var showMaskMode = this.option("showMaskMode");
    if ("onFocus" === showMaskMode) {
      return focused(this._input()) || !this._isValueEmpty();
    }
    return true;
  },
  _showMaskPlaceholder: function() {
    if (this._shouldShowMask()) {
      var text = this._maskRulesChain.text();
      this.option("text", text);
      if ("onFocus" === this.option("showMaskMode")) {
        this._renderDisplayText(text);
      }
    }
  },
  _renderValue: function() {
    if (this._maskRulesChain) {
      this._showMaskPlaceholder();
      if (this._$hiddenElement) {
        var value2 = this._maskRulesChain.value();
        var submitElementValue = !isEmpty(value2) ? this._getPreparedValue() : "";
        this._$hiddenElement.val(submitElementValue);
      }
    }
    return this.callBase();
  },
  _getPreparedValue: function() {
    return this._convertToValue().replace(/\s+$/, "");
  },
  _valueChangeEventHandler: function(e) {
    if (!this._maskRulesChain) {
      this.callBase.apply(this, arguments);
      return;
    }
    this._saveValueChangeEvent(e);
    this.option("value", this._getPreparedValue());
  },
  _isControlKeyFired: function(e) {
    return this._isControlKey(normalizeKeyName(e)) || isCommandKeyPressed(e);
  },
  _handleChain: function(args) {
    var handledCount = this._maskRulesChain.handle(this._normalizeChainArguments(args));
    this._updateMaskInfo();
    return handledCount;
  },
  _normalizeChainArguments: function(args) {
    args = args || {};
    args.index = 0;
    args.fullText = this._maskRulesChain.text();
    return args;
  },
  _convertToValue: function(text) {
    if (this._isMaskedValueMode()) {
      text = this._replaceMaskCharWithEmpty(text || this._textValue || "");
    } else {
      text = text || this._value || "";
    }
    return text;
  },
  _replaceMaskCharWithEmpty: function(text) {
    return text.replace(new RegExp(this.option("maskChar"), "g"), EMPTY_CHAR3);
  },
  _maskKeyHandler: function(e, keyHandler) {
    if (this.option("readOnly")) {
      return;
    }
    this.setForwardDirection();
    e.preventDefault();
    this._handleSelection();
    var previousText = this._input().val();
    var raiseInputEvent = () => {
      if (previousText !== this._input().val()) {
        events_engine_default.trigger(this._input(), "input");
      }
    };
    var handled = keyHandler();
    if (handled) {
      handled.then(raiseInputEvent);
    } else {
      this.setForwardDirection();
      this._adjustCaret();
      this._displayMask();
      this._maskRulesChain.reset();
      raiseInputEvent();
    }
  },
  _handleKey: function(key, direction) {
    this._direction(direction || FORWARD_DIRECTION);
    this._adjustCaret(key);
    this._handleKeyChain(key);
    this._moveCaret();
  },
  _handleSelection: function() {
    if (!this._hasSelection()) {
      return;
    }
    var caret3 = this._caret();
    var emptyChars = new Array(caret3.end - caret3.start + 1).join(EMPTY_CHAR3);
    this._handleKeyChain(emptyChars);
  },
  _handleKeyChain: function(chars) {
    var caret3 = this._caret();
    var start = this.isForwardDirection() ? caret3.start : caret3.start - 1;
    var end = this.isForwardDirection() ? caret3.end : caret3.end - 1;
    var length = start === end ? 1 : end - start;
    this._handleChain({
      text: chars,
      start,
      length
    });
  },
  _tryMoveCaretBackward: function() {
    this.setBackwardDirection();
    var currentCaret = this._caret().start;
    this._adjustCaret();
    return !currentCaret || currentCaret !== this._caret().start;
  },
  _adjustCaret: function(char) {
    var caretStart = this._caret().start;
    var isForwardDirection = this.isForwardDirection();
    var caret3 = this._maskRulesChain.adjustedCaret(caretStart, isForwardDirection, char);
    this._caret({
      start: caret3,
      end: caret3
    });
  },
  _moveCaret: function() {
    var currentCaret = this._caret().start;
    var maskRuleIndex = currentCaret + (this.isForwardDirection() ? 0 : -1);
    var caret3 = this._maskRulesChain.isAccepted(maskRuleIndex) ? currentCaret + (this.isForwardDirection() ? 1 : -1) : currentCaret;
    this._caret({
      start: caret3,
      end: caret3
    });
  },
  _caret: function(position3, force) {
    var $input = this._input();
    if (!$input.length) {
      return;
    }
    if (!arguments.length) {
      return caret2($input);
    }
    caret2($input, position3, force);
  },
  _hasSelection: function() {
    var caret3 = this._caret();
    return caret3.start !== caret3.end;
  },
  _direction: function(direction) {
    if (!arguments.length) {
      return this._typingDirection;
    }
    this._typingDirection = direction;
  },
  setForwardDirection: function() {
    this._direction(FORWARD_DIRECTION);
  },
  setBackwardDirection: function() {
    this._direction(BACKWARD_DIRECTION);
  },
  isForwardDirection: function() {
    return this._direction() === FORWARD_DIRECTION;
  },
  _updateMaskInfo() {
    this._textValue = this._maskRulesChain.text();
    this._value = this._maskRulesChain.value();
  },
  _clean: function() {
    this._maskStrategy && this._maskStrategy.clean();
    this.callBase();
  },
  _validateMask: function() {
    if (!this._maskRulesChain) {
      return;
    }
    var isValid = isEmpty(this.option("value")) || this._maskRulesChain.isValid(this._normalizeChainArguments());
    this.option({
      isValid,
      validationError: isValid ? null : {
        editorSpecific: true,
        message: this.option("maskInvalidMessage")
      }
    });
  },
  _updateHiddenElement: function() {
    this._removeHiddenElement();
    if (this.option("mask")) {
      this._input().removeAttr("name");
      this._renderHiddenElement();
    }
    this._setSubmitElementName(this.option("name"));
  },
  _updateMaskOption: function() {
    this._updateHiddenElement();
    this._renderMask();
    this._validateMask();
  },
  _processEmptyMask: function(mask) {
    if (mask) {
      return;
    }
    var value2 = this.option("value");
    this.option({
      text: value2,
      isValid: true
    });
    this.validationRequest.fire({
      value: value2,
      editor: this
    });
    this._renderValue();
  },
  _optionChanged: function(args) {
    switch (args.name) {
      case "mask":
        this._updateMaskOption();
        this._processEmptyMask(args.value);
        break;
      case "maskChar":
      case "maskRules":
      case "useMaskedValue":
        this._updateMaskOption();
        break;
      case "value":
        this._renderMaskedValue();
        this._validateMask();
        this.callBase(args);
        this._changedValue = this._input().val();
        break;
      case "maskInvalidMessage":
        break;
      case "showMaskMode":
        this.option("text", "");
        this._renderValue();
        break;
      default:
        this.callBase(args);
    }
  },
  clear: function() {
    var {
      value: defaultValue
    } = this._getDefaultOptions();
    if (this.option("value") === defaultValue) {
      this._renderMaskedValue();
    }
    this.callBase();
  }
});
var ui_text_editor_mask_default = TextEditorMask;

// node_modules/devextreme/esm/ui/text_box/ui.text_editor.js
component_registrator_default("dxTextEditor", ui_text_editor_mask_default);
var ui_text_editor_default = ui_text_editor_mask_default;

// node_modules/devextreme/esm/ui/text_box/text_box.js
var window17 = getWindow();
var ignoreKeys = ["backspace", "tab", "enter", "pageUp", "pageDown", "end", "home", "leftArrow", "rightArrow", "downArrow", "upArrow", "del"];
var TEXTBOX_CLASS = "dx-textbox";
var SEARCHBOX_CLASS = "dx-searchbox";
var ICON_CLASS2 = "dx-icon";
var SEARCH_ICON_CLASS = "dx-icon-search";
var TextBox = ui_text_editor_default.inherit({
  ctor: function(element, options2) {
    if (options2) {
      this._showClearButton = options2.showClearButton;
    }
    this.callBase.apply(this, arguments);
  },
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      value: "",
      mode: "text",
      maxLength: null
    });
  },
  _initMarkup: function() {
    this.$element().addClass(TEXTBOX_CLASS);
    this.callBase();
    this.setAria("role", "textbox");
  },
  _renderInputType: function() {
    this.callBase();
    this._renderSearchMode();
  },
  _useTemplates: function() {
    return false;
  },
  _renderProps: function() {
    this.callBase();
    this._toggleMaxLengthProp();
  },
  _toggleMaxLengthProp: function() {
    var maxLength = this._getMaxLength();
    if (maxLength && maxLength > 0) {
      this._input().attr("maxLength", maxLength);
    } else {
      this._input().removeAttr("maxLength");
    }
  },
  _renderSearchMode: function() {
    var $element = this._$element;
    if ("search" === this.option("mode")) {
      $element.addClass(SEARCHBOX_CLASS);
      this._renderSearchIcon();
      if (void 0 === this._showClearButton) {
        this._showClearButton = this.option("showClearButton");
        this.option("showClearButton", true);
      }
    } else {
      $element.removeClass(SEARCHBOX_CLASS);
      this._$searchIcon && this._$searchIcon.remove();
      this.option("showClearButton", void 0 === this._showClearButton ? this.option("showClearButton") : this._showClearButton);
      delete this._showClearButton;
    }
  },
  _renderSearchIcon: function() {
    var $searchIcon = renderer_default("<div>").addClass(ICON_CLASS2).addClass(SEARCH_ICON_CLASS);
    $searchIcon.prependTo(this._input().parent());
    this._$searchIcon = $searchIcon;
  },
  _getLabelContainerWidth: function() {
    if (this._$searchIcon) {
      var $inputContainer = this._input().parent();
      return getWidth($inputContainer) - this._getLabelBeforeWidth();
    }
    return this.callBase();
  },
  _getLabelBeforeWidth: function() {
    var labelBeforeWidth = this.callBase();
    if (this._$searchIcon) {
      labelBeforeWidth += getOuterWidth(this._$searchIcon);
    }
    return labelBeforeWidth;
  },
  _optionChanged: function(args) {
    switch (args.name) {
      case "maxLength":
        this._toggleMaxLengthProp();
        break;
      case "mode":
        this.callBase(args);
        this._updateLabelWidth();
        break;
      case "mask":
        this.callBase(args);
        this._toggleMaxLengthProp();
        break;
      default:
        this.callBase(args);
    }
  },
  _onKeyDownCutOffHandler: function(e) {
    var actualMaxLength = this._getMaxLength();
    if (actualMaxLength && !e.ctrlKey && !this._hasSelection()) {
      var $input = renderer_default(e.target);
      var key = normalizeKeyName(e);
      this._cutOffExtraChar($input);
      return $input.val().length < actualMaxLength || ignoreKeys.includes(key) || "" !== window17.getSelection().toString();
    } else {
      return true;
    }
  },
  _onChangeCutOffHandler: function(e) {
    var $input = renderer_default(e.target);
    if (this.option("maxLength")) {
      this._cutOffExtraChar($input);
    }
  },
  _cutOffExtraChar: function($input) {
    var actualMaxLength = this._getMaxLength();
    var textInput = $input.val();
    if (actualMaxLength && textInput.length > actualMaxLength) {
      $input.val(textInput.substr(0, actualMaxLength));
    }
  },
  _getMaxLength: function() {
    var isMaskSpecified = !!this.option("mask");
    return isMaskSpecified ? null : this.option("maxLength");
  }
});
component_registrator_default("dxTextBox", TextBox);
var text_box_default = TextBox;

// node_modules/devextreme/esm/ui/text_box.js
var text_box_default2 = text_box_default;

// node_modules/devextreme/esm/ui/hierarchical_collection/ui.data_converter.js
var DataConverter = class_default.inherit({
  ctor: function() {
    this._dataStructure = [];
    this._itemsCount = 0;
    this._visibleItemsCount = 0;
  },
  _indexByKey: {},
  _convertItemsToNodes: function(items, parentKey) {
    var that = this;
    each(items, function(_, item) {
      var parentId = isDefined(parentKey) ? parentKey : that._getParentId(item);
      var node = that._convertItemToNode(item, parentId);
      that._dataStructure.push(node);
      that._checkForDuplicateId(node.internalFields.key);
      that._indexByKey[node.internalFields.key] = that._dataStructure.length - 1;
      if (that._itemHasChildren(item)) {
        that._convertItemsToNodes(that._dataAccessors.getters.items(item), node.internalFields.key);
      }
    });
  },
  _checkForDuplicateId: function(key) {
    if (isDefined(this._indexByKey[key])) {
      throw ui_errors_default.Error("E1040", key);
    }
  },
  _getParentId: function(item) {
    return "plain" === this._dataType ? this._dataAccessors.getters.parentKey(item) : void 0;
  },
  _itemHasChildren: function(item) {
    if ("plain" === this._dataType) {
      return;
    }
    var items = this._dataAccessors.getters.items(item);
    return items && items.length;
  },
  _getUniqueKey: function(item) {
    var keyGetter = this._dataAccessors.getters.key;
    var itemKey = keyGetter(item);
    var isCorrectKey = keyGetter && (itemKey || 0 === itemKey) && isPrimitive(itemKey);
    return isCorrectKey ? itemKey : this.getItemsCount();
  },
  _convertItemToNode: function(item, parentKey) {
    this._itemsCount++;
    false !== item.visible && this._visibleItemsCount++;
    var node = {
      internalFields: {
        disabled: this._dataAccessors.getters.disabled(item, {
          defaultValue: false
        }),
        expanded: this._dataAccessors.getters.expanded(item, {
          defaultValue: false
        }),
        selected: this._dataAccessors.getters.selected(item, {
          defaultValue: false
        }),
        key: this._getUniqueKey(item),
        parentKey: isDefined(parentKey) ? parentKey : this._rootValue,
        item: this._makeObjectFromPrimitive(item),
        childrenKeys: []
      }
    };
    extend(node, item);
    delete node.items;
    return node;
  },
  setChildrenKeys: function() {
    var that = this;
    each(this._dataStructure, function(_, node) {
      if (node.internalFields.parentKey === that._rootValue) {
        return;
      }
      var parent = that.getParentNode(node);
      parent && parent.internalFields.childrenKeys.push(node.internalFields.key);
    });
  },
  _makeObjectFromPrimitive: function(item) {
    if (isPrimitive(item)) {
      var key = item;
      item = {};
      this._dataAccessors.setters.key(item, key);
    }
    return item;
  },
  _convertToPublicNode: function(node, parent) {
    if (!node) {
      return null;
    }
    var publicNode = {
      text: this._dataAccessors.getters.display(node),
      key: node.internalFields.key,
      selected: node.internalFields.selected,
      expanded: node.internalFields.expanded,
      disabled: node.internalFields.disabled,
      parent: parent || null,
      itemData: node.internalFields.item,
      children: [],
      items: []
    };
    if (publicNode.parent) {
      publicNode.parent.children.push(publicNode);
      publicNode.parent.items.push(publicNode);
    }
    return publicNode;
  },
  convertToPublicNodes: function(data3, parent) {
    if (!data3.length) {
      return [];
    }
    var that = this;
    var publicNodes = [];
    each(data3, function(_, node) {
      node = isPrimitive(node) ? that._getByKey(node) : node;
      var publicNode = that._convertToPublicNode(node, parent);
      publicNode.children = that.convertToPublicNodes(node.internalFields.childrenKeys, publicNode);
      publicNodes.push(publicNode);
      node.internalFields.publicNode = publicNode;
    });
    return publicNodes;
  },
  setDataAccessors: function(accessors) {
    this._dataAccessors = accessors;
  },
  _getByKey: function(key) {
    return this._dataStructure[this.getIndexByKey(key)] || null;
  },
  getParentNode: function(node) {
    return this._getByKey(node.internalFields.parentKey);
  },
  getByKey: function(data3, key) {
    if (null === key || void 0 === key) {
      return null;
    }
    var result2 = null;
    var that = this;
    var getByKey = function(data4, key2) {
      each(data4, function(_, element) {
        var currentElementKey = element.internalFields && element.internalFields.key || that._dataAccessors.getters.key(element);
        if (currentElementKey.toString() === key2.toString()) {
          result2 = element;
          return false;
        }
      });
      return result2;
    };
    return getByKey(data3, key);
  },
  getItemsCount: function() {
    return this._itemsCount;
  },
  getVisibleItemsCount: function() {
    return this._visibleItemsCount;
  },
  updateIndexByKey: function() {
    var that = this;
    this._indexByKey = {};
    each(this._dataStructure, function(index2, node) {
      that._checkForDuplicateId(node.internalFields.key);
      that._indexByKey[node.internalFields.key] = index2;
    });
  },
  updateChildrenKeys: function() {
    this._indexByKey = {};
    this.removeChildrenKeys();
    this.updateIndexByKey();
    this.setChildrenKeys();
  },
  removeChildrenKeys: function() {
    this._indexByKey = {};
    each(this._dataStructure, function(index2, node) {
      node.internalFields.childrenKeys = [];
    });
  },
  getIndexByKey: function(key) {
    return this._indexByKey[key];
  },
  createPlainStructure: function(items, rootValue, dataType) {
    this._itemsCount = 0;
    this._visibleItemsCount = 0;
    this._rootValue = rootValue;
    this._dataType = dataType;
    this._indexByKey = {};
    this._convertItemsToNodes(items);
    this.setChildrenKeys();
    return this._dataStructure;
  }
});
var ui_data_converter_default = DataConverter;

// node_modules/devextreme/esm/ui/hierarchical_collection/ui.data_adapter.js
var EXPANDED = "expanded";
var SELECTED = "selected";
var DISABLED = "disabled";
ui_search_box_mixin_default.setEditorClass(text_box_default2);
var DataAdapter = class_default.inherit({
  ctor: function(options2) {
    this.options = {};
    extend(this.options, this._defaultOptions(), options2);
    this.options.dataConverter.setDataAccessors(this.options.dataAccessors);
    this._selectedNodesKeys = [];
    this._expandedNodesKeys = [];
    this._dataStructure = [];
    this._createInternalDataStructure();
    this.getTreeNodes();
  },
  setOption: function(name2, value2) {
    this.options[name2] = value2;
    if ("recursiveSelection" === name2) {
      this._updateSelection();
    }
  },
  _defaultOptions: function() {
    return {
      dataAccessors: void 0,
      items: [],
      multipleSelection: true,
      recursiveSelection: false,
      recursiveExpansion: false,
      rootValue: 0,
      searchValue: "",
      dataType: "tree",
      searchMode: "contains",
      dataConverter: new ui_data_converter_default(),
      onNodeChanged: noop2,
      sort: null
    };
  },
  _createInternalDataStructure: function() {
    this._initialDataStructure = this.options.dataConverter.createPlainStructure(this.options.items, this.options.rootValue, this.options.dataType);
    this._dataStructure = this.options.searchValue.length ? this.search(this.options.searchValue) : this._initialDataStructure;
    this.options.dataConverter._dataStructure = this._dataStructure;
    this._updateSelection();
    this._updateExpansion();
  },
  _updateSelection: function() {
    if (this.options.recursiveSelection) {
      this._setChildrenSelection();
      this._setParentSelection();
    }
    this._selectedNodesKeys = this._updateNodesKeysArray(SELECTED);
  },
  _updateExpansion: function(key) {
    if (this.options.recursiveExpansion) {
      key ? this._updateOneBranch(key) : this._setParentExpansion();
    }
    this._expandedNodesKeys = this._updateNodesKeysArray(EXPANDED);
  },
  _updateNodesKeysArray: function(property) {
    var that = this;
    var array = [];
    each(that._getDataBySelectionMode(), function(_, node) {
      if (!that._isNodeVisible(node)) {
        return;
      }
      if (node.internalFields[property]) {
        if (property === EXPANDED || that.options.multipleSelection) {
          array.push(node.internalFields.key);
        } else {
          array.length && that.toggleSelection(array[0], false, true);
          array = [node.internalFields.key];
        }
      }
    });
    return array;
  },
  _getDataBySelectionMode: function() {
    return this.options.multipleSelection ? this.getData() : this.getFullData();
  },
  _isNodeVisible: function(node) {
    return false !== node.internalFields.item.visible;
  },
  _getByKey: function(data3, key) {
    return data3 === this._dataStructure ? this.options.dataConverter._getByKey(key) : this.options.dataConverter.getByKey(data3, key);
  },
  _setChildrenSelection: function() {
    var that = this;
    each(this._dataStructure, function(_, node) {
      if (!node.internalFields.childrenKeys.length) {
        return;
      }
      var isSelected = node.internalFields.selected;
      true === isSelected && that._toggleChildrenSelection(node, isSelected);
    });
  },
  _setParentSelection: function() {
    var that = this;
    each(this._dataStructure, function(_, node) {
      var parent = that.options.dataConverter.getParentNode(node);
      if (parent && node.internalFields.parentKey !== that.options.rootValue) {
        that._iterateParents(node, function(parent2) {
          var newParentState = that._calculateSelectedState(parent2);
          that._setFieldState(parent2, SELECTED, newParentState);
        });
      }
    });
  },
  _setParentExpansion: function() {
    var that = this;
    each(this._dataStructure, function(_, node) {
      if (!node.internalFields.expanded) {
        return;
      }
      that._updateOneBranch(node.internalFields.key);
    });
  },
  _updateOneBranch: function(key) {
    var that = this;
    var node = this.getNodeByKey(key);
    that._iterateParents(node, function(parent) {
      that._setFieldState(parent, EXPANDED, true);
    });
  },
  _iterateChildren: function(node, recursive, callback, processedKeys) {
    if (!isFunction(callback)) {
      return;
    }
    var that = this;
    var nodeKey = node.internalFields.key;
    processedKeys = processedKeys || [];
    if (-1 === processedKeys.indexOf(nodeKey)) {
      processedKeys.push(nodeKey);
      each(node.internalFields.childrenKeys, function(_, key) {
        var child = that.getNodeByKey(key);
        callback(child);
        if (child.internalFields.childrenKeys.length && recursive) {
          that._iterateChildren(child, recursive, callback, processedKeys);
        }
      });
    }
  },
  _iterateParents: function(node, callback, processedKeys) {
    if (node.internalFields.parentKey === this.options.rootValue || !isFunction(callback)) {
      return;
    }
    processedKeys = processedKeys || [];
    var key = node.internalFields.key;
    if (-1 === processedKeys.indexOf(key)) {
      processedKeys.push(key);
      var parent = this.options.dataConverter.getParentNode(node);
      if (parent) {
        callback(parent);
        if (parent.internalFields.parentKey !== this.options.rootValue) {
          this._iterateParents(parent, callback, processedKeys);
        }
      }
    }
  },
  _calculateSelectedState: function(node) {
    var itemsCount = node.internalFields.childrenKeys.length;
    var selectedItemsCount = 0;
    var invisibleItemsCount = 0;
    var result2 = false;
    for (var i = 0; i <= itemsCount - 1; i++) {
      var childNode = this.getNodeByKey(node.internalFields.childrenKeys[i]);
      var isChildInvisible = false === childNode.internalFields.item.visible;
      var childState = childNode.internalFields.selected;
      if (isChildInvisible) {
        invisibleItemsCount++;
        continue;
      }
      if (childState) {
        selectedItemsCount++;
      } else if (void 0 === childState) {
        selectedItemsCount += 0.5;
      }
    }
    if (selectedItemsCount) {
      result2 = selectedItemsCount === itemsCount - invisibleItemsCount ? true : void 0;
    }
    return result2;
  },
  _toggleChildrenSelection: function(node, state) {
    var that = this;
    this._iterateChildren(node, true, function(child) {
      if (that._isNodeVisible(child)) {
        that._setFieldState(child, SELECTED, state);
      }
    });
  },
  _setFieldState: function(node, field, state) {
    if (node.internalFields[field] === state) {
      return;
    }
    node.internalFields[field] = state;
    if (node.internalFields.publicNode) {
      node.internalFields.publicNode[field] = state;
    }
    this.options.dataAccessors.setters[field](node.internalFields.item, state);
    this.options.onNodeChanged(node);
  },
  _markChildren: function(keys) {
    var that = this;
    each(keys, function(_, key) {
      var index2 = that.getIndexByKey(key);
      var node = that.getNodeByKey(key);
      that._dataStructure[index2] = 0;
      node.internalFields.childrenKeys.length && that._markChildren(node.internalFields.childrenKeys);
    });
  },
  _removeNode: function(key) {
    var node = this.getNodeByKey(key);
    this._dataStructure[this.getIndexByKey(key)] = 0;
    this._markChildren(node.internalFields.childrenKeys);
    var that = this;
    var counter = 0;
    var items = extend([], this._dataStructure);
    each(items, function(index2, item) {
      if (!item) {
        that._dataStructure.splice(index2 - counter, 1);
        counter++;
      }
    });
  },
  _addNode: function(item) {
    var dataConverter = this.options.dataConverter;
    var node = dataConverter._convertItemToNode(item, this.options.dataAccessors.getters.parentKey(item));
    this._dataStructure = this._dataStructure.concat(node);
    this._initialDataStructure = this._initialDataStructure.concat(node);
    dataConverter._dataStructure = dataConverter._dataStructure.concat(node);
  },
  _updateFields: function() {
    this.options.dataConverter.updateChildrenKeys();
    this._updateSelection();
    this._updateExpansion();
  },
  getSelectedNodesKeys: function() {
    return this._selectedNodesKeys;
  },
  getExpandedNodesKeys: function() {
    return this._expandedNodesKeys;
  },
  getData: function() {
    return this._dataStructure;
  },
  getFullData: function() {
    return this._initialDataStructure;
  },
  getNodeByItem: function(item) {
    var result2 = null;
    each(this._dataStructure, function(_, node) {
      if (node.internalFields.item === item) {
        result2 = node;
        return false;
      }
    });
    return result2;
  },
  getNodesByItems: function(items) {
    var that = this;
    var nodes = [];
    each(items, function(_, item) {
      var node = that.getNodeByItem(item);
      node && nodes.push(node);
    });
    return nodes;
  },
  getNodeByKey: function(key, data3) {
    return this._getByKey(data3 || this._getDataBySelectionMode(), key);
  },
  getTreeNodes: function() {
    return this.options.dataConverter.convertToPublicNodes(this.getRootNodes());
  },
  getItemsCount: function() {
    return this.options.dataConverter.getItemsCount();
  },
  getVisibleItemsCount: function() {
    return this.options.dataConverter.getVisibleItemsCount();
  },
  getPublicNode: function(node) {
    return node.internalFields.publicNode;
  },
  getRootNodes: function() {
    return this.getChildrenNodes(this.options.rootValue);
  },
  getChildrenNodes: function(parentKey) {
    return query_default(this._dataStructure, {
      langParams: this.options.langParams
    }).filter(["internalFields.parentKey", parentKey]).toArray();
  },
  getIndexByKey: function(key) {
    return this.options.dataConverter.getIndexByKey(key);
  },
  addItem: function(item) {
    this._addNode(item);
    this._updateFields();
  },
  removeItem: function(key) {
    this._removeNode(key);
    this._updateFields();
  },
  toggleSelection: function(key, state, selectRecursive) {
    var isSingleModeUnselect = this._isSingleModeUnselect(state);
    var node = this._getByKey(selectRecursive || isSingleModeUnselect ? this._initialDataStructure : this._dataStructure, key);
    this._setFieldState(node, SELECTED, state);
    if (this.options.recursiveSelection && !selectRecursive) {
      state ? this._setChildrenSelection() : this._toggleChildrenSelection(node, state);
      this._setParentSelection();
    }
    this._selectedNodesKeys = this._updateNodesKeysArray(SELECTED);
  },
  _isSingleModeUnselect: function(selectionState) {
    return !this.options.multipleSelection && !selectionState;
  },
  toggleNodeDisabledState: function(key, state) {
    var node = this.getNodeByKey(key);
    this._setFieldState(node, DISABLED, state);
  },
  toggleSelectAll: function(state) {
    if (!isDefined(state)) {
      return;
    }
    var that = this;
    var lastSelectedKey = that._selectedNodesKeys[that._selectedNodesKeys.length - 1];
    var dataStructure = that._isSingleModeUnselect(state) ? this._initialDataStructure : this._dataStructure;
    each(dataStructure, function(index2, node) {
      if (!that._isNodeVisible(node)) {
        return;
      }
      that._setFieldState(node, SELECTED, state);
    });
    that._selectedNodesKeys = that._updateNodesKeysArray(SELECTED);
    if (!state && that.options.selectionRequired) {
      that.toggleSelection(lastSelectedKey, true);
    }
  },
  isAllSelected: function() {
    if (this.getSelectedNodesKeys().length) {
      return this.getSelectedNodesKeys().length === this.getVisibleItemsCount() ? true : void 0;
    } else {
      return false;
    }
  },
  toggleExpansion: function(key, state) {
    var node = this.getNodeByKey(key);
    this._setFieldState(node, EXPANDED, state);
    if (state) {
      this._updateExpansion(key);
    }
    this._expandedNodesKeys = this._updateNodesKeysArray(EXPANDED);
  },
  isFiltered: function(item) {
    return !this.options.searchValue.length || !!this._filterDataStructure(this.options.searchValue, [item]).length;
  },
  _createCriteria: function(selector, value2, operation) {
    var searchFilter = [];
    if (!Array.isArray(selector)) {
      return [selector, operation, value2];
    }
    each(selector, function(i, item) {
      searchFilter.push([item, operation, value2], "or");
    });
    searchFilter.pop();
    return searchFilter;
  },
  _filterDataStructure: function(filterValue, dataStructure) {
    var selector = this.options.searchExpr || this.options.dataAccessors.getters.display;
    var operation = ui_search_box_mixin_default.getOperationBySearchMode(this.options.searchMode);
    var criteria = this._createCriteria(selector, filterValue, operation);
    dataStructure = dataStructure || this._initialDataStructure;
    return query_default(dataStructure, {
      langParams: this.options.langParams
    }).filter(criteria).toArray();
  },
  search: function(searchValue) {
    var that = this;
    var matches = this._filterDataStructure(searchValue);
    var dataConverter = this.options.dataConverter;
    !function lookForParents(matches2, index2) {
      var length = matches2.length;
      while (index2 < length) {
        var node = matches2[index2];
        if (node.internalFields.parentKey === that.options.rootValue) {
          index2++;
          continue;
        }
        var parent = dataConverter.getParentNode(node);
        if (!parent) {
          ui_errors_default.log("W1007", node.internalFields.parentKey, node.internalFields.key);
          index2++;
          continue;
        }
        if (!parent.internalFields.expanded) {
          that._setFieldState(parent, EXPANDED, true);
        }
        if (matches2.includes(parent)) {
          index2++;
          continue;
        }
        matches2.splice(index2, 0, parent);
        lookForParents(matches2, index2);
      }
    }(matches, 0);
    if (this.options.sort) {
      matches = store_helper_default.queryByOptions(query_default(matches), {
        sort: this.options.sort,
        langParams: this.options.langParams
      }).toArray();
    }
    dataConverter._indexByKey = {};
    each(matches, function(index2, node) {
      node.internalFields.childrenKeys = [];
      dataConverter._indexByKey[node.internalFields.key] = index2;
    });
    dataConverter._dataStructure = matches;
    dataConverter.setChildrenKeys();
    return dataConverter._dataStructure;
  }
});
var ui_data_adapter_default = DataAdapter;

// node_modules/devextreme/esm/ui/collection/item.js
var INVISIBLE_STATE_CLASS2 = "dx-state-invisible";
var DISABLED_STATE_CLASS = "dx-state-disabled";
var ITEM_CONTENT_PLACEHOLDER_CLASS = "dx-item-content-placeholder";
var forcibleWatcher = function(watchMethod, fn, callback) {
  var filteredCallback = function(value2) {
    if (oldValue !== value2) {
      callback(value2, oldValue);
      oldValue = value2;
    }
  };
  var oldValue;
  return {
    dispose: watchMethod(fn, filteredCallback),
    force: function() {
      filteredCallback(fn());
    }
  };
};
var CollectionItem = class_default.inherit({
  ctor: function($element, options2, rawData) {
    this._$element = $element;
    this._options = options2;
    this._rawData = rawData;
    attachInstanceToElement($element, this, this._dispose);
    this._render();
  },
  _render: function() {
    var $placeholder = renderer_default("<div>").addClass(ITEM_CONTENT_PLACEHOLDER_CLASS);
    this._$element.append($placeholder);
    this._watchers = [];
    this._renderWatchers();
  },
  _renderWatchers: function() {
    this._startWatcher("disabled", this._renderDisabled.bind(this));
    this._startWatcher("visible", this._renderVisible.bind(this));
  },
  _startWatcher: function(field, render4) {
    var rawData = this._rawData;
    var exprGetter = this._options.fieldGetter(field);
    var watcher = forcibleWatcher(this._options.watchMethod(), function() {
      return exprGetter(rawData);
    }, (function(value2, oldValue) {
      this._dirty = true;
      render4(value2, oldValue);
    }).bind(this));
    this._watchers.push(watcher);
  },
  setDataField: function() {
    this._dirty = false;
    each(this._watchers, function(_, watcher) {
      watcher.force();
    });
    if (this._dirty) {
      return true;
    }
  },
  _renderDisabled: function(value2, oldValue) {
    this._$element.toggleClass(DISABLED_STATE_CLASS, !!value2);
    this._$element.attr("aria-disabled", !!value2);
    this._updateOwnerFocus(value2);
  },
  _updateOwnerFocus: function(isDisabled) {
    var ownerComponent = this._options.owner;
    if (ownerComponent && isDisabled) {
      ownerComponent._resetItemFocus(this._$element);
    }
  },
  _renderVisible: function(value2, oldValue) {
    this._$element.toggleClass(INVISIBLE_STATE_CLASS2, void 0 !== value2 && !value2);
  },
  _dispose: function() {
    each(this._watchers, function(_, watcher) {
      watcher.dispose();
    });
  }
});
CollectionItem.getInstance = function($element) {
  return getInstanceByElement($element, this);
};
var item_default = CollectionItem;

// node_modules/devextreme/esm/events/hold.js
var abs2 = Math.abs;
var HOLD_EVENT_NAME = "dxhold";
var HOLD_TIMEOUT = 750;
var TOUCH_BOUNDARY2 = 5;
var HoldEmitter = emitter_default.inherit({
  start: function(e) {
    this._startEventData = eventData(e);
    this._startTimer(e);
  },
  _startTimer: function(e) {
    var holdTimeout = "timeout" in this ? this.timeout : HOLD_TIMEOUT;
    this._holdTimer = setTimeout((function() {
      this._requestAccept(e);
      this._fireEvent(HOLD_EVENT_NAME, e, {
        target: e.target
      });
      this._forgetAccept();
    }).bind(this), holdTimeout);
  },
  move: function(e) {
    if (this._touchWasMoved(e)) {
      this._cancel(e);
    }
  },
  _touchWasMoved: function(e) {
    var delta = eventDelta(this._startEventData, eventData(e));
    return abs2(delta.x) > TOUCH_BOUNDARY2 || abs2(delta.y) > TOUCH_BOUNDARY2;
  },
  end: function() {
    this._stopTimer();
  },
  _stopTimer: function() {
    clearTimeout(this._holdTimer);
  },
  cancel: function() {
    this._stopTimer();
  },
  dispose: function() {
    this._stopTimer();
  }
});
emitter_registrator_default({
  emitter: HoldEmitter,
  bubble: true,
  events: [HOLD_EVENT_NAME]
});
var hold_default = {
  name: HOLD_EVENT_NAME
};

// node_modules/devextreme/esm/events/contextmenu.js
var CONTEXTMENU_NAMESPACE = "dxContexMenu";
var CONTEXTMENU_NAMESPACED_EVENT_NAME = addNamespace2("contextmenu", CONTEXTMENU_NAMESPACE);
var HOLD_NAMESPACED_EVENT_NAME = addNamespace2(hold_default.name, CONTEXTMENU_NAMESPACE);
var CONTEXTMENU_EVENT_NAME = "dxcontextmenu";
var ContextMenu = class_default.inherit({
  setup: function(element) {
    var $element = renderer_default(element);
    events_engine_default.on($element, CONTEXTMENU_NAMESPACED_EVENT_NAME, this._contextMenuHandler.bind(this));
    if (touch || devices_default.isSimulator()) {
      events_engine_default.on($element, HOLD_NAMESPACED_EVENT_NAME, this._holdHandler.bind(this));
    }
  },
  _holdHandler: function(e) {
    if (isMouseEvent(e) && !devices_default.isSimulator()) {
      return;
    }
    this._fireContextMenu(e);
  },
  _contextMenuHandler: function(e) {
    this._fireContextMenu(e);
  },
  _fireContextMenu: function(e) {
    return fireEvent({
      type: CONTEXTMENU_EVENT_NAME,
      originalEvent: e
    });
  },
  teardown: function(element) {
    events_engine_default.off(element, "." + CONTEXTMENU_NAMESPACE);
  }
});
event_registrator_default(CONTEXTMENU_EVENT_NAME, new ContextMenu());
var name = CONTEXTMENU_EVENT_NAME;

// node_modules/devextreme/esm/core/templates/bindable_template.js
var watchChanges = function(rawData, watchMethod, fields, fieldsMap, callback) {
  var fieldsDispose;
  var globalDispose = ((data3, watchMethod2, callback2) => watchMethod2(() => data3, callback2))(rawData, watchMethod, function(dataWithRawFields) {
    fieldsDispose && fieldsDispose();
    if (isPrimitive(dataWithRawFields)) {
      callback(dataWithRawFields);
      return;
    }
    fieldsDispose = function(data3, watchMethod2, fields2, fieldsMap2, callback2) {
      var resolvedData = {};
      var missedFields = fields2.slice();
      var watchHandlers = fields2.map(function(name2) {
        var fieldGetter = fieldsMap2[name2];
        return watchMethod2(fieldGetter ? () => fieldGetter(data3) : () => data3[name2], function(value2) {
          resolvedData[name2] = value2;
          if (missedFields.length) {
            var index2 = missedFields.indexOf(name2);
            if (index2 >= 0) {
              missedFields.splice(index2, 1);
            }
          }
          if (!missedFields.length) {
            callback2(resolvedData);
          }
        });
      });
      return function() {
        watchHandlers.forEach((dispose) => dispose());
      };
    }(dataWithRawFields, watchMethod, fields, fieldsMap, callback);
  });
  return function() {
    fieldsDispose && fieldsDispose();
    globalDispose && globalDispose();
  };
};
var BindableTemplate = class extends TemplateBase {
  constructor(render4, fields, watchMethod, fieldsMap) {
    super();
    this._render = render4;
    this._fields = fields;
    this._fieldsMap = fieldsMap || {};
    this._watchMethod = watchMethod;
  }
  _renderCore(options2) {
    var $container = renderer_default(options2.container);
    var dispose = watchChanges(options2.model, this._watchMethod, this._fields, this._fieldsMap, (data3) => {
      $container.empty();
      this._render($container, data3, options2.model);
    });
    events_engine_default.on($container, removeEvent, dispose);
    return $container.contents();
  }
};

// node_modules/devextreme/esm/ui/collection/ui.collection_widget.base.js
var COLLECTION_CLASS = "dx-collection";
var ITEM_CLASS = "dx-item";
var CONTENT_CLASS_POSTFIX = "-content";
var ITEM_CONTENT_PLACEHOLDER_CLASS2 = "dx-item-content-placeholder";
var ITEM_DATA_KEY = "dxItemData";
var ITEM_INDEX_KEY = "dxItemIndex";
var ITEM_TEMPLATE_ID_PREFIX = "tmpl-";
var ITEMS_OPTIONS_NAME = "dxItem";
var SELECTED_ITEM_CLASS = "dx-item-selected";
var ITEM_RESPONSE_WAIT_CLASS = "dx-item-response-wait";
var EMPTY_COLLECTION = "dx-empty-collection";
var TEMPLATE_WRAPPER_CLASS2 = "dx-template-wrapper";
var ITEM_PATH_REGEX = /^([^.]+\[\d+\]\.)+([\w.]+)$/;
var ANONYMOUS_TEMPLATE_NAME3 = "item";
var FOCUS_UP = "up";
var FOCUS_DOWN = "down";
var FOCUS_LEFT = "left";
var FOCUS_RIGHT = "right";
var FOCUS_PAGE_UP = "pageup";
var FOCUS_PAGE_DOWN = "pagedown";
var FOCUS_LAST = "last";
var FOCUS_FIRST = "first";
var CollectionWidget = ui_widget_default.inherit({
  _activeStateUnit: "." + ITEM_CLASS,
  _supportedKeys: function() {
    var move2 = function(location, e) {
      if (!isCommandKeyPressed(e)) {
        e.preventDefault();
        e.stopPropagation();
        this._moveFocus(location, e);
      }
    };
    return extend(this.callBase(), {
      space: function(e) {
        e.preventDefault();
        this._enterKeyHandler(e);
      },
      enter: this._enterKeyHandler,
      leftArrow: move2.bind(this, FOCUS_LEFT),
      rightArrow: move2.bind(this, FOCUS_RIGHT),
      upArrow: move2.bind(this, FOCUS_UP),
      downArrow: move2.bind(this, FOCUS_DOWN),
      pageUp: move2.bind(this, FOCUS_UP),
      pageDown: move2.bind(this, FOCUS_DOWN),
      home: move2.bind(this, FOCUS_FIRST),
      end: move2.bind(this, FOCUS_LAST)
    });
  },
  _enterKeyHandler: function(e) {
    var $itemElement = renderer_default(this.option("focusedElement"));
    if (!$itemElement.length) {
      return;
    }
    var itemData = this._getItemData($itemElement);
    if (null !== itemData && void 0 !== itemData && itemData.onClick) {
      this._itemEventHandlerByHandler($itemElement, itemData.onClick, {
        event: e
      });
    }
    this._itemClickHandler(extend({}, e, {
      target: $itemElement.get(0),
      currentTarget: $itemElement.get(0)
    }));
  },
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      selectOnFocus: false,
      loopItemFocus: true,
      items: [],
      itemTemplate: "item",
      onItemRendered: null,
      onItemClick: null,
      onItemHold: null,
      itemHoldTimeout: 750,
      onItemContextMenu: null,
      onFocusedItemChanged: null,
      noDataText: message_default.format("dxCollectionWidget-noDataText"),
      encodeNoDataText: false,
      dataSource: null,
      _dataController: null,
      _itemAttributes: {},
      itemTemplateProperty: "template",
      focusOnSelectedItem: true,
      focusedElement: null,
      displayExpr: void 0,
      disabledExpr: function(data3) {
        return data3 ? data3.disabled : void 0;
      },
      visibleExpr: function(data3) {
        return data3 ? data3.visible : void 0;
      }
    });
  },
  _init: function() {
    this._compileDisplayGetter();
    this._initDataController();
    this.callBase();
    this._cleanRenderedItems();
    this._refreshDataSource();
  },
  _compileDisplayGetter: function() {
    var displayExpr = this.option("displayExpr");
    this._displayGetter = displayExpr ? compileGetter(this.option("displayExpr")) : void 0;
  },
  _initTemplates: function() {
    this._initItemsFromMarkup();
    this._initDefaultItemTemplate();
    this.callBase();
  },
  _getAnonymousTemplateName: function() {
    return ANONYMOUS_TEMPLATE_NAME3;
  },
  _initDefaultItemTemplate: function() {
    var fieldsMap = this._getFieldsMap();
    this._templateManager.addDefaultTemplates({
      item: new BindableTemplate((function($container, data3) {
        if (isPlainObject(data3)) {
          this._prepareDefaultItemTemplate(data3, $container);
        } else {
          if (fieldsMap && isFunction(fieldsMap.text)) {
            data3 = fieldsMap.text(data3);
          }
          $container.text(String(ensureDefined(data3, "")));
        }
      }).bind(this), this._getBindableFields(), this.option("integrationOptions.watchMethod"), fieldsMap)
    });
  },
  _getBindableFields: function() {
    return ["text", "html"];
  },
  _getFieldsMap: function() {
    if (this._displayGetter) {
      return {
        text: this._displayGetter
      };
    }
  },
  _prepareDefaultItemTemplate: function(data3, $container) {
    if (isDefined(data3.text)) {
      $container.text(data3.text);
    }
    if (isDefined(data3.html)) {
      $container.html(data3.html);
    }
  },
  _initItemsFromMarkup: function() {
    var rawItems = findTemplates(this.$element(), ITEMS_OPTIONS_NAME);
    if (!rawItems.length || this.option("items").length) {
      return;
    }
    var items = rawItems.map((_ref) => {
      var {
        element,
        options: options2
      } = _ref;
      var isTemplateRequired = /\S/.test(element.innerHTML) && !options2.template;
      if (isTemplateRequired) {
        options2.template = this._prepareItemTemplate(element);
      } else {
        renderer_default(element).remove();
      }
      return options2;
    });
    this.option("items", items);
  },
  _prepareItemTemplate: function(item) {
    var templateId = ITEM_TEMPLATE_ID_PREFIX + new guid_default();
    var $template = renderer_default(item).detach().clone().removeAttr("data-options").addClass(TEMPLATE_WRAPPER_CLASS2);
    this._saveTemplate(templateId, $template);
    return templateId;
  },
  _dataSourceOptions: function() {
    return {
      paginate: false
    };
  },
  _cleanRenderedItems: function() {
    this._renderedItemsCount = 0;
  },
  _focusTarget: function() {
    return this.$element();
  },
  _focusInHandler: function(e) {
    this.callBase.apply(this, arguments);
    if (!this._isFocusTarget(e.target)) {
      return;
    }
    var $focusedElement = renderer_default(this.option("focusedElement"));
    if ($focusedElement.length) {
      this._setFocusedItem($focusedElement);
    } else {
      var $activeItem = this._getActiveItem();
      if ($activeItem.length) {
        this.option("focusedElement", getPublicElement($activeItem));
      }
    }
  },
  _focusOutHandler: function() {
    this.callBase.apply(this, arguments);
    var $target = renderer_default(this.option("focusedElement"));
    this._updateFocusedItemState($target, false);
  },
  _findActiveTarget($element) {
    return $element.find(this._activeStateUnit);
  },
  _getActiveItem: function(last) {
    var $focusedElement = renderer_default(this.option("focusedElement"));
    if ($focusedElement.length) {
      return $focusedElement;
    }
    var index2 = this.option("focusOnSelectedItem") ? this.option("selectedIndex") : 0;
    var activeElements = this._getActiveElement();
    var lastIndex = activeElements.length - 1;
    if (index2 < 0) {
      index2 = last ? lastIndex : 0;
    }
    return activeElements.eq(index2);
  },
  _moveFocus: function(location) {
    var $items = this._getAvailableItems();
    var $newTarget;
    switch (location) {
      case FOCUS_PAGE_UP:
      case FOCUS_UP:
        $newTarget = this._prevItem($items);
        break;
      case FOCUS_PAGE_DOWN:
      case FOCUS_DOWN:
        $newTarget = this._nextItem($items);
        break;
      case FOCUS_RIGHT:
        $newTarget = this.option("rtlEnabled") ? this._prevItem($items) : this._nextItem($items);
        break;
      case FOCUS_LEFT:
        $newTarget = this.option("rtlEnabled") ? this._nextItem($items) : this._prevItem($items);
        break;
      case FOCUS_FIRST:
        $newTarget = $items.first();
        break;
      case FOCUS_LAST:
        $newTarget = $items.last();
        break;
      default:
        return false;
    }
    if (0 !== $newTarget.length) {
      this.option("focusedElement", getPublicElement($newTarget));
    }
  },
  _getVisibleItems: function($itemElements) {
    $itemElements = $itemElements || this._itemElements();
    return $itemElements.filter(":visible");
  },
  _getAvailableItems: function($itemElements) {
    return this._getVisibleItems($itemElements);
  },
  _prevItem: function($items) {
    var $target = this._getActiveItem();
    var targetIndex = $items.index($target);
    var $last = $items.last();
    var $item = renderer_default($items[targetIndex - 1]);
    var loop = this.option("loopItemFocus");
    if (0 === $item.length && loop) {
      $item = $last;
    }
    return $item;
  },
  _nextItem: function($items) {
    var $target = this._getActiveItem(true);
    var targetIndex = $items.index($target);
    var $first = $items.first();
    var $item = renderer_default($items[targetIndex + 1]);
    var loop = this.option("loopItemFocus");
    if (0 === $item.length && loop) {
      $item = $first;
    }
    return $item;
  },
  _selectFocusedItem: function($target) {
    this.selectItem($target);
  },
  _updateFocusedItemState: function(target, isFocused, needCleanItemId) {
    var $target = renderer_default(target);
    if ($target.length) {
      this._refreshActiveDescendant();
      this._refreshItemId($target, needCleanItemId);
      this._toggleFocusClass(isFocused, $target);
    }
    this._updateParentActiveDescendant();
  },
  _refreshActiveDescendant: function($target) {
    this.setAria("activedescendant", isDefined(this.option("focusedElement")) ? this.getFocusedItemId() : null, $target);
  },
  _refreshItemId: function($target, needCleanItemId) {
    if (!needCleanItemId && this.option("focusedElement")) {
      this.setAria("id", this.getFocusedItemId(), $target);
    } else {
      this.setAria("id", null, $target);
    }
  },
  _isDisabled: ($element) => $element && "true" === renderer_default($element).attr("aria-disabled"),
  _setFocusedItem: function($target) {
    if (!$target || !$target.length) {
      return;
    }
    this._updateFocusedItemState($target, true);
    this.onFocusedItemChanged(this.getFocusedItemId());
    var {
      selectOnFocus
    } = this.option();
    var isTargetDisabled = this._isDisabled($target);
    if (selectOnFocus && !isTargetDisabled) {
      this._selectFocusedItem($target);
    }
  },
  _findItemElementByItem: function(item) {
    var result2 = renderer_default();
    var that = this;
    this.itemElements().each(function() {
      var $item = renderer_default(this);
      if ($item.data(that._itemDataKey()) === item) {
        result2 = $item;
        return false;
      }
    });
    return result2;
  },
  _getIndexByItem: function(item) {
    return this.option("items").indexOf(item);
  },
  _itemOptionChanged: function(item, property, value2, oldValue) {
    var $item = this._findItemElementByItem(item);
    if (!$item.length) {
      return;
    }
    if (!this.constructor.ItemClass.getInstance($item).setDataField(property, value2)) {
      this._refreshItem($item, item);
    }
    var isDisabling = "disabled" === property && value2;
    if (isDisabling) {
      this._resetItemFocus($item);
    }
  },
  _resetItemFocus($item) {
    if ($item.is(this.option("focusedElement"))) {
      this.option("focusedElement", null);
    }
  },
  _refreshItem: function($item) {
    var itemData = this._getItemData($item);
    var index2 = $item.data(this._itemIndexKey());
    this._renderItem(this._renderedItemsCount + index2, itemData, null, $item);
  },
  _updateParentActiveDescendant: noop2,
  _optionChanged: function(args) {
    if ("items" === args.name) {
      var matches = args.fullName.match(ITEM_PATH_REGEX);
      if (matches && matches.length) {
        var property = matches[matches.length - 1];
        var itemPath = args.fullName.replace("." + property, "");
        var item = this.option(itemPath);
        this._itemOptionChanged(item, property, args.value, args.previousValue);
        return;
      }
    }
    switch (args.name) {
      case "items":
      case "_itemAttributes":
      case "itemTemplateProperty":
      case "useItemTextAsTitle":
        this._cleanRenderedItems();
        this._invalidate();
        break;
      case "dataSource":
        this._refreshDataSource();
        this._renderEmptyMessage();
        break;
      case "noDataText":
      case "encodeNoDataText":
        this._renderEmptyMessage();
        break;
      case "itemTemplate":
        this._invalidate();
        break;
      case "onItemRendered":
        this._createItemRenderAction();
        break;
      case "onItemClick":
        break;
      case "onItemHold":
      case "itemHoldTimeout":
        this._attachHoldEvent();
        break;
      case "onItemContextMenu":
        this._attachContextMenuEvent();
        break;
      case "onFocusedItemChanged":
        this.onFocusedItemChanged = this._createActionByOption("onFocusedItemChanged");
        break;
      case "selectOnFocus":
      case "loopItemFocus":
      case "focusOnSelectedItem":
        break;
      case "focusedElement":
        this._updateFocusedItemState(args.previousValue, false, true);
        this._setFocusedItem(renderer_default(args.value));
        break;
      case "displayExpr":
        this._compileDisplayGetter();
        this._initDefaultItemTemplate();
        this._invalidate();
        break;
      case "visibleExpr":
      case "disabledExpr":
        this._invalidate();
        break;
      default:
        this.callBase(args);
    }
  },
  _invalidate: function() {
    this.option("focusedElement", null);
    return this.callBase.apply(this, arguments);
  },
  _loadNextPage: function() {
    this._expectNextPageLoading();
    return this._dataController.loadNextPage();
  },
  _expectNextPageLoading: function() {
    this._startIndexForAppendedItems = 0;
  },
  _expectLastItemLoading: function() {
    this._startIndexForAppendedItems = -1;
  },
  _forgetNextPageLoading: function() {
    this._startIndexForAppendedItems = null;
  },
  _dataSourceChangedHandler: function(newItems) {
    var items = this.option("items");
    if (this._initialized && items && this._shouldAppendItems()) {
      this._renderedItemsCount = items.length;
      if (!this._isLastPage() || -1 !== this._startIndexForAppendedItems) {
        this.option().items = items.concat(newItems.slice(this._startIndexForAppendedItems));
      }
      this._forgetNextPageLoading();
      this._refreshContent();
    } else {
      this.option("items", newItems.slice());
    }
  },
  _refreshContent: function() {
    this._prepareContent();
    this._renderContent();
  },
  _dataSourceLoadErrorHandler: function() {
    this._forgetNextPageLoading();
    this.option("items", this.option("items"));
  },
  _shouldAppendItems: function() {
    return null != this._startIndexForAppendedItems && this._allowDynamicItemsAppend();
  },
  _allowDynamicItemsAppend: function() {
    return false;
  },
  _clean: function() {
    this._cleanFocusState();
    this._cleanItemContainer();
    this._inkRipple && delete this._inkRipple;
    this._resetActiveState();
  },
  _cleanItemContainer: function() {
    renderer_default(this._itemContainer()).empty();
  },
  _dispose: function() {
    this.callBase();
    clearTimeout(this._itemFocusTimeout);
  },
  _refresh: function() {
    this._cleanRenderedItems();
    this.callBase.apply(this, arguments);
  },
  _itemContainer: function() {
    return this.$element();
  },
  _itemClass: function() {
    return ITEM_CLASS;
  },
  _itemContentClass: function() {
    return this._itemClass() + CONTENT_CLASS_POSTFIX;
  },
  _selectedItemClass: function() {
    return SELECTED_ITEM_CLASS;
  },
  _itemResponseWaitClass: function() {
    return ITEM_RESPONSE_WAIT_CLASS;
  },
  _itemSelector: function() {
    return "." + this._itemClass();
  },
  _itemDataKey: function() {
    return ITEM_DATA_KEY;
  },
  _itemIndexKey: function() {
    return ITEM_INDEX_KEY;
  },
  _itemElements: function() {
    return this._itemContainer().find(this._itemSelector());
  },
  _initMarkup: function() {
    this.callBase();
    this.onFocusedItemChanged = this._createActionByOption("onFocusedItemChanged");
    this.$element().addClass(COLLECTION_CLASS);
    this._prepareContent();
  },
  _prepareContent: deferRenderer(function() {
    this._renderContentImpl();
  }),
  _renderContent: function() {
    this._fireContentReadyAction();
  },
  _render: function() {
    this.callBase();
    this._attachClickEvent();
    this._attachHoldEvent();
    this._attachContextMenuEvent();
  },
  _getPointerEvent: () => pointer_default.down,
  _attachClickEvent() {
    var itemSelector = this._itemSelector();
    var pointerEvent = this._getPointerEvent();
    var clickEventNamespace = addNamespace2(CLICK_EVENT_NAME, this.NAME);
    var pointerEventNamespace = addNamespace2(pointerEvent, this.NAME);
    var pointerAction = new Action((args) => {
      var {
        event
      } = args;
      this._itemPointerDownHandler(event);
    });
    events_engine_default.off(this._itemContainer(), clickEventNamespace, itemSelector);
    events_engine_default.off(this._itemContainer(), pointerEventNamespace, itemSelector);
    events_engine_default.on(this._itemContainer(), clickEventNamespace, itemSelector, (e) => this._itemClickHandler(e));
    events_engine_default.on(this._itemContainer(), pointerEventNamespace, itemSelector, (e) => {
      pointerAction.execute({
        element: renderer_default(e.target),
        event: e
      });
    });
  },
  _itemClickHandler: function(e, args, config3) {
    this._itemDXEventHandler(e, "onItemClick", args, config3);
  },
  _itemPointerDownHandler: function(e) {
    if (!this.option("focusStateEnabled")) {
      return;
    }
    this._itemFocusHandler = (function() {
      clearTimeout(this._itemFocusTimeout);
      this._itemFocusHandler = null;
      if (e.isDefaultPrevented()) {
        return;
      }
      var $target = renderer_default(e.target);
      var $closestItem = $target.closest(this._itemElements());
      var $closestFocusable = this._closestFocusable($target);
      if ($closestItem.length && this._isFocusTarget(null === $closestFocusable || void 0 === $closestFocusable ? void 0 : $closestFocusable.get(0))) {
        this.option("focusedElement", getPublicElement($closestItem));
      }
    }).bind(this);
    this._itemFocusTimeout = setTimeout(this._forcePointerDownFocus.bind(this));
  },
  _closestFocusable: function($target) {
    if ($target.is(focusable)) {
      return $target;
    } else {
      $target = $target.parent();
      while ($target.length && !dom_adapter_default.isDocument($target.get(0)) && !dom_adapter_default.isDocumentFragment($target.get(0))) {
        if ($target.is(focusable)) {
          return $target;
        }
        $target = $target.parent();
      }
    }
  },
  _forcePointerDownFocus: function() {
    this._itemFocusHandler && this._itemFocusHandler();
  },
  _updateFocusState: function() {
    this.callBase.apply(this, arguments);
    this._forcePointerDownFocus();
  },
  _attachHoldEvent: function() {
    var $itemContainer = this._itemContainer();
    var itemSelector = this._itemSelector();
    var eventName = addNamespace2(hold_default.name, this.NAME);
    events_engine_default.off($itemContainer, eventName, itemSelector);
    events_engine_default.on($itemContainer, eventName, itemSelector, {
      timeout: this._getHoldTimeout()
    }, this._itemHoldHandler.bind(this));
  },
  _getHoldTimeout: function() {
    return this.option("itemHoldTimeout");
  },
  _shouldFireHoldEvent: function() {
    return this.hasActionSubscription("onItemHold");
  },
  _itemHoldHandler: function(e) {
    if (this._shouldFireHoldEvent()) {
      this._itemDXEventHandler(e, "onItemHold");
    } else {
      e.cancel = true;
    }
  },
  _attachContextMenuEvent: function() {
    var $itemContainer = this._itemContainer();
    var itemSelector = this._itemSelector();
    var eventName = addNamespace2(name, this.NAME);
    events_engine_default.off($itemContainer, eventName, itemSelector);
    events_engine_default.on($itemContainer, eventName, itemSelector, this._itemContextMenuHandler.bind(this));
  },
  _shouldFireContextMenuEvent: function() {
    return this.hasActionSubscription("onItemContextMenu");
  },
  _itemContextMenuHandler: function(e) {
    if (this._shouldFireContextMenuEvent()) {
      this._itemDXEventHandler(e, "onItemContextMenu");
    } else {
      e.cancel = true;
    }
  },
  _renderContentImpl: function() {
    var items = this.option("items") || [];
    if (this._renderedItemsCount) {
      this._renderItems(items.slice(this._renderedItemsCount));
    } else {
      this._renderItems(items);
    }
  },
  _renderItems: function(items) {
    if (items.length) {
      each(items, (function(index2, itemData) {
        this._renderItem(this._renderedItemsCount + index2, itemData);
      }).bind(this));
    }
    this._renderEmptyMessage();
  },
  _getItemsContainer: function() {
    return this._itemContainer();
  },
  _setAttributes($element) {
    var attributes = _extends({}, this.option("_itemAttributes"));
    var {
      class: customClassValue
    } = attributes;
    if (customClassValue) {
      var currentClassValue = $element.get(0).className;
      attributes.class = [currentClassValue, customClassValue].join(" ");
    }
    $element.attr(attributes);
  },
  _renderItem: function(index2, itemData, $container, $itemToReplace) {
    var _index$item;
    var itemIndex = null !== (_index$item = null === index2 || void 0 === index2 ? void 0 : index2.item) && void 0 !== _index$item ? _index$item : index2;
    $container = $container || this._getItemsContainer();
    var $itemFrame = this._renderItemFrame(itemIndex, itemData, $container, $itemToReplace);
    this._setElementData($itemFrame, itemData, itemIndex);
    this._setAttributes($itemFrame);
    this._attachItemClickEvent(itemData, $itemFrame);
    var $itemContent = this._getItemContent($itemFrame);
    var renderContentPromise = this._renderItemContent({
      index: itemIndex,
      itemData,
      container: getPublicElement($itemContent),
      contentClass: this._itemContentClass(),
      defaultTemplateName: this.option("itemTemplate")
    });
    var that = this;
    when(renderContentPromise).done(function($itemContent2) {
      that._postprocessRenderItem({
        itemElement: $itemFrame,
        itemContent: $itemContent2,
        itemData,
        itemIndex
      });
      that._executeItemRenderAction(index2, itemData, getPublicElement($itemFrame));
    });
    return $itemFrame;
  },
  _getItemContent: function($itemFrame) {
    var $itemContent = $itemFrame.find("." + ITEM_CONTENT_PLACEHOLDER_CLASS2);
    $itemContent.removeClass(ITEM_CONTENT_PLACEHOLDER_CLASS2);
    return $itemContent;
  },
  _attachItemClickEvent: function(itemData, $itemElement) {
    if (!itemData || !itemData.onClick) {
      return;
    }
    events_engine_default.on($itemElement, CLICK_EVENT_NAME, (function(e) {
      this._itemEventHandlerByHandler($itemElement, itemData.onClick, {
        event: e
      });
    }).bind(this));
  },
  _renderItemContent: function(args) {
    var itemTemplateName = this._getItemTemplateName(args);
    var itemTemplate = this._getTemplate(itemTemplateName);
    this._addItemContentClasses(args);
    var $templateResult = renderer_default(this._createItemByTemplate(itemTemplate, args));
    if (!$templateResult.hasClass(TEMPLATE_WRAPPER_CLASS2)) {
      return args.container;
    }
    return this._renderItemContentByNode(args, $templateResult);
  },
  _renderItemContentByNode: function(args, $node) {
    renderer_default(args.container).replaceWith($node);
    args.container = getPublicElement($node);
    this._addItemContentClasses(args);
    return $node;
  },
  _addItemContentClasses: function(args) {
    var classes = [ITEM_CLASS + CONTENT_CLASS_POSTFIX, args.contentClass];
    renderer_default(args.container).addClass(classes.join(" "));
  },
  _appendItemToContainer: function($container, $itemFrame, index2) {
    $itemFrame.appendTo($container);
  },
  _renderItemFrame: function(index2, itemData, $container, $itemToReplace) {
    var $itemFrame = renderer_default("<div>");
    new this.constructor.ItemClass($itemFrame, this._itemOptions(), itemData || {});
    if ($itemToReplace && $itemToReplace.length) {
      $itemToReplace.replaceWith($itemFrame);
    } else {
      this._appendItemToContainer.call(this, $container, $itemFrame, index2);
    }
    if (this.option("useItemTextAsTitle")) {
      var displayValue = this._displayGetter ? this._displayGetter(itemData) : itemData;
      $itemFrame.attr("title", displayValue);
    }
    return $itemFrame;
  },
  _itemOptions: function() {
    var that = this;
    return {
      watchMethod: function() {
        return that.option("integrationOptions.watchMethod");
      },
      owner: that,
      fieldGetter: function(field) {
        var expr = that.option(field + "Expr");
        var getter = compileGetter(expr);
        return getter;
      }
    };
  },
  _postprocessRenderItem: noop2,
  _executeItemRenderAction: function(index2, itemData, itemElement) {
    this._getItemRenderAction()({
      itemElement,
      itemIndex: index2,
      itemData
    });
  },
  _setElementData: function(element, data3, index2) {
    element.addClass([ITEM_CLASS, this._itemClass()].join(" ")).data(this._itemDataKey(), data3).data(this._itemIndexKey(), index2);
  },
  _createItemRenderAction: function() {
    return this._itemRenderAction = this._createActionByOption("onItemRendered", {
      element: this.element(),
      excludeValidators: ["disabled", "readOnly"],
      category: "rendering"
    });
  },
  _getItemRenderAction: function() {
    return this._itemRenderAction || this._createItemRenderAction();
  },
  _getItemTemplateName: function(args) {
    var data3 = args.itemData;
    var templateProperty = args.templateProperty || this.option("itemTemplateProperty");
    var template = data3 && data3[templateProperty];
    return template || args.defaultTemplateName;
  },
  _createItemByTemplate: function(itemTemplate, renderArgs) {
    return itemTemplate.render({
      model: renderArgs.itemData,
      container: renderArgs.container,
      index: renderArgs.index,
      onRendered: this._onItemTemplateRendered(itemTemplate, renderArgs)
    });
  },
  _onItemTemplateRendered: function() {
    return noop2;
  },
  _emptyMessageContainer: function() {
    return this._itemContainer();
  },
  _renderEmptyMessage: function(items) {
    items = items || this.option("items");
    var noDataText = this.option("noDataText");
    var hideNoData = !noDataText || items && items.length || this._dataController.isLoading();
    if (hideNoData && this._$noData) {
      this._$noData.remove();
      this._$noData = null;
      this.setAria("label", void 0);
    }
    if (!hideNoData) {
      this._$noData = this._$noData || renderer_default("<div>").addClass("dx-empty-message");
      this._$noData.appendTo(this._emptyMessageContainer());
      if (this.option("encodeNoDataText")) {
        this._$noData.text(noDataText);
      } else {
        this._$noData.html(noDataText);
      }
    }
    this.$element().toggleClass(EMPTY_COLLECTION, !hideNoData);
  },
  _itemDXEventHandler: function(dxEvent, handlerOptionName, actionArgs, actionConfig) {
    this._itemEventHandler(dxEvent.target, handlerOptionName, extend(actionArgs, {
      event: dxEvent
    }), actionConfig);
  },
  _itemEventHandler: function(initiator, handlerOptionName, actionArgs, actionConfig) {
    var action = this._createActionByOption(handlerOptionName, extend({
      validatingTargetName: "itemElement"
    }, actionConfig));
    return this._itemEventHandlerImpl(initiator, action, actionArgs);
  },
  _itemEventHandlerByHandler: function(initiator, handler, actionArgs, actionConfig) {
    var action = this._createAction(handler, extend({
      validatingTargetName: "itemElement"
    }, actionConfig));
    return this._itemEventHandlerImpl(initiator, action, actionArgs);
  },
  _itemEventHandlerImpl: function(initiator, action, actionArgs) {
    var $itemElement = this._closestItemElement(renderer_default(initiator));
    var args = extend({}, actionArgs);
    return action(extend(actionArgs, this._extendActionArgs($itemElement), args));
  },
  _extendActionArgs: function($itemElement) {
    return {
      itemElement: getPublicElement($itemElement),
      itemIndex: this._itemElements().index($itemElement),
      itemData: this._getItemData($itemElement)
    };
  },
  _closestItemElement: function($element) {
    return renderer_default($element).closest(this._itemSelector());
  },
  _getItemData: function(itemElement) {
    return renderer_default(itemElement).data(this._itemDataKey());
  },
  _getSummaryItemsSize(dimension, items, includeMargin) {
    var result2 = 0;
    if (items) {
      each(items, function(_, item) {
        if ("width" === dimension) {
          result2 += getOuterWidth(item, includeMargin || false);
        } else if ("height" === dimension) {
          result2 += getOuterHeight(item, includeMargin || false);
        }
      });
    }
    return result2;
  },
  getFocusedItemId: function() {
    if (!this._focusedItemId) {
      this._focusedItemId = "dx-" + new guid_default();
    }
    return this._focusedItemId;
  },
  itemElements: function() {
    return this._itemElements();
  },
  itemsContainer: function() {
    return this._itemContainer();
  }
}).include(data_helper_default);
CollectionWidget.ItemClass = item_default;
var ui_collection_widget_base_default = CollectionWidget;

// node_modules/devextreme/esm/ui/collection/ui.collection_widget.edit.strategy.js
var abstract6 = class_default.abstract;
var EditStrategy = class_default.inherit({
  ctor: function(collectionWidget) {
    this._collectionWidget = collectionWidget;
  },
  getIndexByItemData: abstract6,
  getItemDataByIndex: abstract6,
  getKeysByItems: abstract6,
  getItemsByKeys: abstract6,
  itemsGetter: abstract6,
  getKeyByIndex: function(index2) {
    var resultIndex = this._denormalizeItemIndex(index2);
    return this.getKeysByItems([this.getItemDataByIndex(resultIndex)])[0];
  },
  _equalKeys: function(key1, key2) {
    if (this._collectionWidget._isKeySpecified()) {
      return equalByValue(key1, key2);
    } else {
      return key1 === key2;
    }
  },
  beginCache: function() {
    this._cache = {};
  },
  endCache: function() {
    this._cache = null;
  },
  getIndexByKey: abstract6,
  getNormalizedIndex: function(value2) {
    if (this._isNormalizedItemIndex(value2)) {
      return value2;
    }
    if (this._isItemIndex(value2)) {
      return this._normalizeItemIndex(value2);
    }
    if (this._isNode(value2)) {
      return this._getNormalizedItemIndex(value2);
    }
    return this._normalizeItemIndex(this.getIndexByItemData(value2));
  },
  getIndex: function(value2) {
    if (this._isNormalizedItemIndex(value2)) {
      return this._denormalizeItemIndex(value2);
    }
    if (this._isItemIndex(value2)) {
      return value2;
    }
    if (this._isNode(value2)) {
      return this._denormalizeItemIndex(this._getNormalizedItemIndex(value2));
    }
    return this.getIndexByItemData(value2);
  },
  getItemElement: function(value2) {
    if (this._isNormalizedItemIndex(value2)) {
      return this._getItemByNormalizedIndex(value2);
    }
    if (this._isItemIndex(value2)) {
      return this._getItemByNormalizedIndex(this._normalizeItemIndex(value2));
    }
    if (this._isNode(value2)) {
      return renderer_default(value2);
    }
    var normalizedItemIndex = this._normalizeItemIndex(this.getIndexByItemData(value2));
    return this._getItemByNormalizedIndex(normalizedItemIndex);
  },
  _isNode: (el) => dom_adapter_default.isNode(el && isRenderer(el) ? el.get(0) : el),
  deleteItemAtIndex: abstract6,
  itemPlacementFunc: function(movingIndex, destinationIndex) {
    return this._itemsFromSameParent(movingIndex, destinationIndex) && movingIndex < destinationIndex ? "after" : "before";
  },
  moveItemAtIndexToIndex: abstract6,
  _isNormalizedItemIndex: function(index2) {
    return "number" === typeof index2 && Math.round(index2) === index2;
  },
  _isItemIndex: abstract6,
  _getNormalizedItemIndex: abstract6,
  _normalizeItemIndex: abstract6,
  _denormalizeItemIndex: abstract6,
  _getItemByNormalizedIndex: abstract6,
  _itemsFromSameParent: abstract6
});
var ui_collection_widget_edit_strategy_default = EditStrategy;

// node_modules/devextreme/esm/ui/collection/ui.collection_widget.edit.strategy.plain.js
var PlainEditStrategy = ui_collection_widget_edit_strategy_default.inherit({
  _getPlainItems: function() {
    return this._collectionWidget.option("items") || [];
  },
  getIndexByItemData: function(itemData) {
    var keyOf = this._collectionWidget.keyOf.bind(this._collectionWidget);
    if (keyOf) {
      return this.getIndexByKey(keyOf(itemData));
    } else {
      return this._getPlainItems().indexOf(itemData);
    }
  },
  getItemDataByIndex: function(index2) {
    return this._getPlainItems()[index2];
  },
  deleteItemAtIndex: function(index2) {
    this._getPlainItems().splice(index2, 1);
  },
  itemsGetter: function() {
    return this._getPlainItems();
  },
  getKeysByItems: function(items) {
    var keyOf = this._collectionWidget.keyOf.bind(this._collectionWidget);
    var result2 = items;
    if (keyOf) {
      result2 = [];
      for (var i = 0; i < items.length; i++) {
        result2.push(keyOf(items[i]));
      }
    }
    return result2;
  },
  getIndexByKey: function(key) {
    var cache = this._cache;
    var keys = cache && cache.keys || this.getKeysByItems(this._getPlainItems());
    if (cache && !cache.keys) {
      cache.keys = keys;
    }
    if ("object" === typeof key) {
      for (var i = 0, length = keys.length; i < length; i++) {
        if (this._equalKeys(key, keys[i])) {
          return i;
        }
      }
    } else {
      return keys.indexOf(key);
    }
    return -1;
  },
  getItemsByKeys: function(keys, items) {
    return (items || keys).slice();
  },
  moveItemAtIndexToIndex: function(movingIndex, destinationIndex) {
    var items = this._getPlainItems();
    var movedItemData = items[movingIndex];
    items.splice(movingIndex, 1);
    items.splice(destinationIndex, 0, movedItemData);
  },
  _isItemIndex: function(index2) {
    return "number" === typeof index2 && Math.round(index2) === index2;
  },
  _getNormalizedItemIndex: function(itemElement) {
    return this._collectionWidget._itemElements().index(itemElement);
  },
  _normalizeItemIndex: function(index2) {
    return index2;
  },
  _denormalizeItemIndex: function(index2) {
    return index2;
  },
  _getItemByNormalizedIndex: function(index2) {
    return index2 > -1 ? this._collectionWidget._itemElements().eq(index2) : null;
  },
  _itemsFromSameParent: function() {
    return true;
  }
});
var ui_collection_widget_edit_strategy_plain_default = PlainEditStrategy;

// node_modules/devextreme/esm/ui/selection/selection.strategy.js
var SelectionStrategy = class {
  constructor(options2) {
    this.options = options2;
    this._setOption("disabledItemKeys", []);
    this._clearItemKeys();
  }
  _clearItemKeys() {
    this._setOption("addedItemKeys", []);
    this._setOption("removedItemKeys", []);
    this._setOption("removedItems", []);
    this._setOption("addedItems", []);
  }
  validate() {
  }
  _setOption(name2, value2) {
    this.options[name2] = value2;
  }
  onSelectionChanged() {
    var addedItemKeys = this.options.addedItemKeys;
    var removedItemKeys = this.options.removedItemKeys;
    var addedItems = this.options.addedItems;
    var removedItems = this.options.removedItems;
    var selectedItems = this.options.selectedItems;
    var selectedItemKeys = this.options.selectedItemKeys;
    var onSelectionChanged = this.options.onSelectionChanged || noop2;
    this._clearItemKeys();
    onSelectionChanged({
      selectedItems,
      selectedItemKeys,
      addedItemKeys,
      removedItemKeys,
      addedItems,
      removedItems
    });
  }
  equalKeys(key1, key2) {
    if (this.options.equalByReference) {
      if (isObject(key1) && isObject(key2)) {
        return key1 === key2;
      }
    }
    return equalByValue(key1, key2);
  }
  getSelectableItems(items) {
    return items.filter(function(item) {
      return !(null !== item && void 0 !== item && item.disabled);
    });
  }
  _clearSelection(keys, preserve, isDeselect, isSelectAll) {
    keys = keys || [];
    keys = Array.isArray(keys) ? keys : [keys];
    this.validate();
    return this.selectedItemKeys(keys, preserve, isDeselect, isSelectAll);
  }
  _removeTemplateProperty(remoteFilter) {
    if (Array.isArray(remoteFilter)) {
      return remoteFilter.map((f) => this._removeTemplateProperty(f));
    }
    if (isObject(remoteFilter)) {
      delete remoteFilter.template;
    }
    return remoteFilter;
  }
  _loadFilteredData(remoteFilter, localFilter, select, isSelectAll) {
    var filterLength = encodeURI(JSON.stringify(this._removeTemplateProperty(remoteFilter))).length;
    var needLoadAllData = this.options.maxFilterLengthInRequest && filterLength > this.options.maxFilterLengthInRequest;
    var deferred = new Deferred();
    var loadOptions = {
      filter: needLoadAllData ? void 0 : remoteFilter,
      select: needLoadAllData ? this.options.dataFields() : select || this.options.dataFields()
    };
    if (remoteFilter && 0 === remoteFilter.length) {
      deferred.resolve([]);
    } else {
      this.options.load(loadOptions).done(function(items) {
        var filteredItems = isPlainObject(items) ? items.data : items;
        if (localFilter && !isSelectAll) {
          filteredItems = filteredItems.filter(localFilter);
        } else if (needLoadAllData) {
          filteredItems = query_default(filteredItems).filter(remoteFilter).toArray();
        }
        deferred.resolve(filteredItems);
      }).fail(deferred.reject.bind(deferred));
    }
    return deferred;
  }
  updateSelectedItemKeyHash(keys) {
    for (var i = 0; i < keys.length; i++) {
      var keyHash = getKeyHash(keys[i]);
      if (!isObject(keyHash)) {
        this.options.keyHashIndices[keyHash] = this.options.keyHashIndices[keyHash] || [];
        var keyIndices = this.options.keyHashIndices[keyHash];
        keyIndices.push(i);
      }
    }
  }
  _isAnyItemSelected(items) {
    for (var i = 0; i < items.length; i++) {
      if (this.options.isItemSelected(items[i])) {
        return;
      }
    }
    return false;
  }
  _getFullSelectAllState() {
    var items = this.options.plainItems();
    var dataFilter = this.options.filter();
    var selectedItems = this.options.ignoreDisabledItems ? this.options.selectedItems : this.options.selectedItems.filter((item) => !(null !== item && void 0 !== item && item.disabled));
    if (dataFilter) {
      selectedItems = query_default(selectedItems).filter(dataFilter).toArray();
    }
    var selectedItemsLength = selectedItems.length;
    var disabledItemsLength = items.length - this.getSelectableItems(items).length;
    if (!selectedItemsLength) {
      return this._isAnyItemSelected(items);
    }
    if (selectedItemsLength >= this.options.totalCount() - disabledItemsLength) {
      return true;
    }
    return;
  }
  _getVisibleSelectAllState() {
    var items = this.getSelectableItems(this.options.plainItems());
    var hasSelectedItems = false;
    var hasUnselectedItems = false;
    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      var itemData = this.options.getItemData(item);
      var key = this.options.keyOf(itemData);
      if (this.options.isSelectableItem(item)) {
        if (this.isItemKeySelected(key)) {
          hasSelectedItems = true;
        } else {
          hasUnselectedItems = true;
        }
      }
    }
    if (hasSelectedItems) {
      return !hasUnselectedItems ? true : void 0;
    } else {
      return false;
    }
  }
};

// node_modules/devextreme/esm/ui/selection/selection.strategy.deferred.js
var DeferredStrategy = class extends SelectionStrategy {
  getSelectedItems() {
    return this._loadFilteredData(this.options.selectionFilter);
  }
  getSelectedItemKeys() {
    var d = new Deferred();
    var that = this;
    var key = this.options.key();
    var select = isString(key) ? [key] : key;
    this._loadFilteredData(this.options.selectionFilter, null, select).done(function(items) {
      var keys = items.map(function(item) {
        return that.options.keyOf(item);
      });
      d.resolve(keys);
    }).fail(d.reject);
    return d.promise();
  }
  selectedItemKeys(keys, preserve, isDeselect, isSelectAll) {
    if (isSelectAll) {
      var filter = this.options.filter();
      var needResetSelectionFilter = !filter || JSON.stringify(filter) === JSON.stringify(this.options.selectionFilter) && isDeselect;
      if (needResetSelectionFilter) {
        this._setOption("selectionFilter", isDeselect ? [] : null);
      } else {
        this._addSelectionFilter(isDeselect, filter, isSelectAll);
      }
    } else {
      if (!preserve) {
        this._setOption("selectionFilter", []);
      }
      for (var i = 0; i < keys.length; i++) {
        if (isDeselect) {
          this.removeSelectedItem(keys[i]);
        } else {
          this.addSelectedItem(keys[i], isSelectAll, !preserve);
        }
      }
    }
    this.onSelectionChanged();
    return new Deferred().resolve();
  }
  setSelectedItems(keys) {
    this._setOption("selectionFilter", null);
    for (var i = 0; i < keys.length; i++) {
      this.addSelectedItem(keys[i]);
    }
  }
  isItemDataSelected(itemData) {
    return this.isItemKeySelected(itemData);
  }
  isItemKeySelected(itemData) {
    var selectionFilter = this.options.selectionFilter;
    if (!selectionFilter) {
      return true;
    }
    return !!query_default([itemData]).filter(selectionFilter).toArray().length;
  }
  _getKeyExpr() {
    var keyField = this.options.key();
    if (Array.isArray(keyField) && 1 === keyField.length) {
      return keyField[0];
    }
    return keyField;
  }
  _normalizeKey(key) {
    var keyExpr = this.options.key();
    if (Array.isArray(keyExpr) && 1 === keyExpr.length) {
      return key[keyExpr[0]];
    }
    return key;
  }
  _getFilterByKey(key) {
    var keyField = this._getKeyExpr();
    var filter = [keyField, "=", this._normalizeKey(key)];
    if (Array.isArray(keyField)) {
      filter = [];
      for (var i = 0; i < keyField.length; i++) {
        filter.push([keyField[i], "=", key[keyField[i]]]);
        if (i !== keyField.length - 1) {
          filter.push("and");
        }
      }
    }
    return filter;
  }
  addSelectedItem(key, isSelectAll, skipFilter) {
    var filter = this._getFilterByKey(key);
    this._addSelectionFilter(false, filter, isSelectAll, skipFilter);
  }
  removeSelectedItem(key) {
    var filter = this._getFilterByKey(key);
    this._addSelectionFilter(true, filter);
  }
  validate() {
    var key = this.options.key;
    if (key && void 0 === key()) {
      throw ui_errors_default.Error("E1042", "Deferred selection");
    }
  }
  _findSubFilter(selectionFilter, filter) {
    if (!selectionFilter) {
      return -1;
    }
    var filterString = JSON.stringify(filter);
    for (var index2 = 0; index2 < selectionFilter.length; index2++) {
      var subFilter = selectionFilter[index2];
      if (subFilter && JSON.stringify(subFilter) === filterString) {
        return index2;
      }
    }
    return -1;
  }
  _isLastSubFilter(selectionFilter, filter) {
    if (selectionFilter && filter) {
      return this._findSubFilter(selectionFilter, filter) === selectionFilter.length - 1 || 0 === this._findSubFilter([selectionFilter], filter);
    }
    return false;
  }
  _addFilterOperator(selectionFilter, filterOperator) {
    if (selectionFilter.length > 1 && isString(selectionFilter[1]) && selectionFilter[1] !== filterOperator) {
      selectionFilter = [selectionFilter];
    }
    if (selectionFilter.length) {
      selectionFilter.push(filterOperator);
    }
    return selectionFilter;
  }
  _denormalizeFilter(filter) {
    if (filter && isString(filter[0])) {
      filter = [filter];
    }
    return filter;
  }
  _isOnlyNegativeFiltersLeft(filters) {
    return filters.every((filterItem, i) => {
      if (i % 2 === 0) {
        return Array.isArray(filterItem) && "!" === filterItem[0];
      } else {
        return "and" === filterItem;
      }
    });
  }
  _addSelectionFilter(isDeselect, filter, isSelectAll, skipFilter) {
    var _selectionFilter;
    var currentFilter = isDeselect ? ["!", filter] : filter;
    var currentOperation = isDeselect ? "and" : "or";
    var needAddFilter = true;
    var selectionFilter = this.options.selectionFilter || [];
    selectionFilter = this._denormalizeFilter(selectionFilter);
    if (null !== (_selectionFilter = selectionFilter) && void 0 !== _selectionFilter && _selectionFilter.length && !skipFilter) {
      var removedIndex = this._removeSameFilter(selectionFilter, filter, isDeselect, isSelectAll);
      var filterIndex = this._removeSameFilter(selectionFilter, filter, !isDeselect);
      var shouldCleanFilter = isDeselect && (-1 !== removedIndex || -1 !== filterIndex) && this._isOnlyNegativeFiltersLeft(selectionFilter);
      if (shouldCleanFilter) {
        selectionFilter = [];
      }
      var isKeyOperatorsAfterRemoved = this._isKeyFilter(filter) && this._hasKeyFiltersOnlyStartingFromIndex(selectionFilter, filterIndex);
      needAddFilter = filter.length && !isKeyOperatorsAfterRemoved;
    }
    if (needAddFilter) {
      selectionFilter = this._addFilterOperator(selectionFilter, currentOperation);
      selectionFilter.push(currentFilter);
    }
    selectionFilter = this._normalizeFilter(selectionFilter);
    this._setOption("selectionFilter", !isDeselect && !selectionFilter.length ? null : selectionFilter);
  }
  _normalizeFilter(filter) {
    if (filter && 1 === filter.length) {
      filter = filter[0];
    }
    return filter;
  }
  _removeFilterByIndex(filter, filterIndex, isSelectAll) {
    var operation = filter[1];
    if (filterIndex > 0) {
      filter.splice(filterIndex - 1, 2);
    } else {
      filter.splice(filterIndex, 2);
    }
    if (isSelectAll && "and" === operation) {
      filter.splice(0, filter.length);
    }
  }
  _isSimpleKeyFilter(filter, key) {
    return 3 === filter.length && filter[0] === key && "=" === filter[1];
  }
  _isKeyFilter(filter) {
    if (2 === filter.length && "!" === filter[0]) {
      return this._isKeyFilter(filter[1]);
    }
    var keyField = this._getKeyExpr();
    if (Array.isArray(keyField)) {
      if (filter.length !== 2 * keyField.length - 1) {
        return false;
      }
      for (var i = 0; i < keyField.length; i++) {
        if (i > 0 && "and" !== filter[2 * i - 1]) {
          return false;
        }
        if (!this._isSimpleKeyFilter(filter[2 * i], keyField[i])) {
          return false;
        }
      }
      return true;
    }
    return this._isSimpleKeyFilter(filter, keyField);
  }
  _hasKeyFiltersOnlyStartingFromIndex(selectionFilter, filterIndex) {
    if (filterIndex >= 0) {
      for (var i = filterIndex; i < selectionFilter.length; i++) {
        if ("string" !== typeof selectionFilter[i] && !this._isKeyFilter(selectionFilter[i])) {
          return false;
        }
      }
      return true;
    }
    return false;
  }
  _removeSameFilter(selectionFilter, filter, inverted, isSelectAll) {
    filter = inverted ? ["!", filter] : filter;
    if (JSON.stringify(filter) === JSON.stringify(selectionFilter)) {
      selectionFilter.splice(0, selectionFilter.length);
      return 0;
    }
    var filterIndex = this._findSubFilter(selectionFilter, filter);
    if (filterIndex >= 0) {
      this._removeFilterByIndex(selectionFilter, filterIndex, isSelectAll);
      return filterIndex;
    } else {
      for (var i = 0; i < selectionFilter.length; i++) {
        if (Array.isArray(selectionFilter[i]) && selectionFilter[i].length > 2) {
          var _filterIndex = this._removeSameFilter(selectionFilter[i], filter, false, isSelectAll);
          if (_filterIndex >= 0) {
            if (!selectionFilter[i].length) {
              this._removeFilterByIndex(selectionFilter, i, isSelectAll);
            } else if (1 === selectionFilter[i].length) {
              selectionFilter[i] = selectionFilter[i][0];
            }
            return _filterIndex;
          }
        }
      }
      return -1;
    }
  }
  getSelectAllState() {
    var filter = this.options.filter();
    var selectionFilter = this.options.selectionFilter;
    if (!selectionFilter) {
      return true;
    }
    if (!selectionFilter.length) {
      return false;
    }
    if (!filter || !filter.length) {
      return;
    }
    selectionFilter = this._denormalizeFilter(selectionFilter);
    if (this._isLastSubFilter(selectionFilter, filter)) {
      return true;
    }
    if (this._isLastSubFilter(selectionFilter, ["!", filter])) {
      return false;
    }
    return;
  }
  loadSelectedItemsWithFilter() {
    var componentFilter = this.options.filter();
    var selectionFilter = this.options.selectionFilter;
    var filter = componentFilter ? [componentFilter, "and", selectionFilter] : selectionFilter;
    return this._loadFilteredData(filter);
  }
};

// node_modules/devextreme/esm/core/utils/selection_filter.js
var SelectionFilterCreator = function(selectedItemKeys, isSelectAll) {
  this.getLocalFilter = function(keyGetter, equalKeys, equalByReference, keyExpr) {
    equalKeys = void 0 === equalKeys ? equalByValue : equalKeys;
    return functionFilter.bind(this, equalKeys, keyGetter, equalByReference, keyExpr);
  };
  this.getExpr = function(keyExpr) {
    if (!keyExpr) {
      return;
    }
    var filterExpr;
    selectedItemKeys.forEach(function(key, index2) {
      filterExpr = filterExpr || [];
      var filterExprPart;
      if (index2 > 0) {
        filterExpr.push(isSelectAll ? "and" : "or");
      }
      if (isString(keyExpr)) {
        filterExprPart = getFilterForPlainKey(keyExpr, key);
      } else {
        filterExprPart = function(keyExpr2, itemKeyValue) {
          var filterExpr2 = [];
          for (var i = 0, length = keyExpr2.length; i < length; i++) {
            var currentKeyExpr = keyExpr2[i];
            var currentKeyValue = itemKeyValue && itemKeyValue[currentKeyExpr];
            var filterExprPart2 = getFilterForPlainKey(currentKeyExpr, currentKeyValue);
            if (!filterExprPart2) {
              break;
            }
            if (i > 0) {
              filterExpr2.push(isSelectAll ? "or" : "and");
            }
            filterExpr2.push(filterExprPart2);
          }
          return filterExpr2;
        }(keyExpr, key);
      }
      filterExpr.push(filterExprPart);
    });
    if (filterExpr && 1 === filterExpr.length) {
      filterExpr = filterExpr[0];
    }
    return filterExpr;
  };
  this.getCombinedFilter = function(keyExpr, dataSourceFilter) {
    var forceCombinedFilter = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;
    var filterExpr = this.getExpr(keyExpr);
    var combinedFilter = filterExpr;
    if ((forceCombinedFilter || isSelectAll) && dataSourceFilter) {
      if (filterExpr) {
        combinedFilter = [];
        combinedFilter.push(filterExpr);
        combinedFilter.push(dataSourceFilter);
      } else {
        combinedFilter = dataSourceFilter;
      }
    }
    return combinedFilter;
  };
  var selectedItemKeyHashesMap;
  var normalizeKeys = function(keys, keyOf, keyExpr) {
    return Array.isArray(keyExpr) ? keys.map((key) => keyOf(key)) : keys;
  };
  function functionFilter(equalKeys, keyOf, equalByReference, keyExpr, item) {
    var key = keyOf(item);
    var keyHash;
    var i;
    if (!equalByReference) {
      keyHash = getKeyHash(key);
      if (!isObject(keyHash)) {
        var selectedKeyHashesMap = function(keyOf2, keyExpr2) {
          if (!selectedItemKeyHashesMap) {
            selectedItemKeyHashesMap = {};
            var normalizedKeys = normalizeKeys(selectedItemKeys, keyOf2, keyExpr2);
            for (var i2 = 0; i2 < normalizedKeys.length; i2++) {
              selectedItemKeyHashesMap[getKeyHash(normalizedKeys[i2])] = true;
            }
          }
          return selectedItemKeyHashesMap;
        }(keyOf, keyExpr);
        if (selectedKeyHashesMap[keyHash]) {
          return !isSelectAll;
        }
        return !!isSelectAll;
      }
    }
    for (i = 0; i < selectedItemKeys.length; i++) {
      if (equalKeys(selectedItemKeys[i], key)) {
        return !isSelectAll;
      }
    }
    return !!isSelectAll;
  }
  function getFilterForPlainKey(keyExpr, keyValue) {
    if (void 0 === keyValue) {
      return;
    }
    return [keyExpr, isSelectAll ? "<>" : "=", keyValue];
  }
};

// node_modules/devextreme/esm/ui/selection/selection.strategy.standard.js
var StandardStrategy = class extends SelectionStrategy {
  constructor(options2) {
    super(options2);
    this._initSelectedItemKeyHash();
  }
  _initSelectedItemKeyHash() {
    this._setOption("keyHashIndices", this.options.equalByReference ? null : {});
  }
  getSelectedItemKeys() {
    return this.options.selectedItemKeys.slice(0);
  }
  getSelectedItems() {
    return this.options.selectedItems.slice(0);
  }
  _preserveSelectionUpdate(items, isDeselect) {
    var keyOf = this.options.keyOf;
    var keyIndicesToRemoveMap;
    var keyIndex;
    var i;
    if (!keyOf) {
      return;
    }
    var isBatchDeselect = isDeselect && items.length > 1 && !this.options.equalByReference;
    if (isBatchDeselect) {
      keyIndicesToRemoveMap = {};
    }
    for (i = 0; i < items.length; i++) {
      var item = items[i];
      var key = keyOf(item);
      if (isDeselect) {
        keyIndex = this.removeSelectedItem(key, keyIndicesToRemoveMap, null === item || void 0 === item ? void 0 : item.disabled);
        if (keyIndicesToRemoveMap && keyIndex >= 0) {
          keyIndicesToRemoveMap[keyIndex] = true;
        }
      } else {
        this.addSelectedItem(key, item);
      }
    }
    if (isBatchDeselect) {
      this._batchRemoveSelectedItems(keyIndicesToRemoveMap);
    }
  }
  _batchRemoveSelectedItems(keyIndicesToRemoveMap) {
    var selectedItemKeys = this.options.selectedItemKeys.slice(0);
    var selectedItems = this.options.selectedItems.slice(0);
    this.options.selectedItemKeys.length = 0;
    this.options.selectedItems.length = 0;
    for (var i = 0; i < selectedItemKeys.length; i++) {
      if (!keyIndicesToRemoveMap[i]) {
        this.options.selectedItemKeys.push(selectedItemKeys[i]);
        this.options.selectedItems.push(selectedItems[i]);
      }
    }
    this._initSelectedItemKeyHash();
    this.updateSelectedItemKeyHash(this.options.selectedItemKeys);
  }
  _loadSelectedItemsCore(keys, isDeselect, isSelectAll, filter) {
    var forceCombinedFilter = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : false;
    var deferred = new Deferred();
    var key = this.options.key();
    if (!keys.length && !isSelectAll) {
      deferred.resolve([]);
      return deferred;
    }
    if (isSelectAll && isDeselect && !filter) {
      deferred.resolve(this.getSelectedItems());
      return deferred;
    }
    var selectionFilterCreator = new SelectionFilterCreator(keys, isSelectAll);
    var combinedFilter = selectionFilterCreator.getCombinedFilter(key, filter, forceCombinedFilter);
    var deselectedItems = [];
    if (isDeselect) {
      var selectedItems = this.options.selectedItems;
      deselectedItems = combinedFilter && keys.length !== selectedItems.length ? query_default(selectedItems).filter(combinedFilter).toArray() : selectedItems.slice(0);
    }
    var filteredItems = deselectedItems.length ? deselectedItems : this.options.plainItems(true).filter(this.options.isSelectableItem).map(this.options.getItemData);
    var localFilter = selectionFilterCreator.getLocalFilter(this.options.keyOf, this.equalKeys.bind(this), this.options.equalByReference, key);
    filteredItems = filteredItems.filter(localFilter);
    if (deselectedItems.length || !isSelectAll && filteredItems.length === keys.length) {
      deferred.resolve(filteredItems);
    } else {
      deferred = this._loadFilteredData(combinedFilter, localFilter, null, isSelectAll);
    }
    return deferred;
  }
  _replaceSelectionUpdate(items) {
    var internalKeys = [];
    var keyOf = this.options.keyOf;
    if (!keyOf) {
      return;
    }
    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      var key = keyOf(item);
      internalKeys.push(key);
    }
    this.setSelectedItems(internalKeys, items);
  }
  _warnOnIncorrectKeys(keys) {
    var allowNullValue = this.options.allowNullValue;
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if ((!allowNullValue || null !== key) && !this.isItemKeySelected(key)) {
        ui_errors_default.log("W1002", key);
      }
    }
  }
  _isMultiSelectEnabled() {
    var mode = this.options.mode;
    return "all" === mode || "multiple" === mode;
  }
  _requestInProgress() {
    var _this$_lastLoadDeferr;
    return "pending" === (null === (_this$_lastLoadDeferr = this._lastLoadDeferred) || void 0 === _this$_lastLoadDeferr ? void 0 : _this$_lastLoadDeferr.state());
  }
  _concatRequestsItems(keys, isDeselect, oldRequestItems, updatedKeys) {
    var selectedItems;
    var deselectedItems = isDeselect ? keys : [];
    if (updatedKeys) {
      selectedItems = updatedKeys;
    } else {
      selectedItems = removeDuplicates(keys, this.options.selectedItemKeys);
    }
    return {
      addedItems: oldRequestItems.added.concat(selectedItems),
      removedItems: oldRequestItems.removed.concat(deselectedItems),
      keys
    };
  }
  _collectLastRequestData(keys, isDeselect, isSelectAll, updatedKeys) {
    var isDeselectAll = isDeselect && isSelectAll;
    var oldRequestItems = {
      added: [],
      removed: []
    };
    var multiSelectEnabled = this._isMultiSelectEnabled();
    var lastRequestData = multiSelectEnabled ? this._lastRequestData : {};
    if (multiSelectEnabled) {
      if (this._shouldMergeWithLastRequest) {
        if (isDeselectAll) {
          this._lastLoadDeferred.reject();
          lastRequestData = {};
        } else if (!isKeysEqual(keys, this.options.selectedItemKeys)) {
          oldRequestItems.added = lastRequestData.addedItems;
          oldRequestItems.removed = lastRequestData.removedItems;
          if (!isDeselect) {
            this._lastLoadDeferred.reject();
          }
        }
      }
      lastRequestData = this._concatRequestsItems(keys, isDeselect, oldRequestItems, this._shouldMergeWithLastRequest ? void 0 : updatedKeys);
    }
    return lastRequestData;
  }
  _updateKeysByLastRequestData(keys, isDeselect, isSelectAll) {
    var currentKeys = keys;
    if (this._isMultiSelectEnabled() && this._shouldMergeWithLastRequest && !isDeselect && !isSelectAll) {
      var _this$_lastRequestDat, _this$_lastRequestDat2;
      currentKeys = removeDuplicates(keys.concat(null === (_this$_lastRequestDat = this._lastRequestData) || void 0 === _this$_lastRequestDat ? void 0 : _this$_lastRequestDat.addedItems), null === (_this$_lastRequestDat2 = this._lastRequestData) || void 0 === _this$_lastRequestDat2 ? void 0 : _this$_lastRequestDat2.removedItems);
      currentKeys = getUniqueValues(currentKeys);
    }
    return currentKeys;
  }
  _loadSelectedItems(keys, isDeselect, isSelectAll, updatedKeys) {
    var forceCombinedFilter = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : false;
    var that = this;
    var deferred = new Deferred();
    var filter = that.options.filter();
    this._shouldMergeWithLastRequest = this._requestInProgress();
    this._lastRequestData = this._collectLastRequestData(keys, isDeselect, isSelectAll, updatedKeys);
    when(that._lastLoadDeferred).always(function() {
      var currentKeys = that._updateKeysByLastRequestData(keys, isDeselect, isSelectAll);
      that._shouldMergeWithLastRequest = false;
      that._loadSelectedItemsCore(currentKeys, isDeselect, isSelectAll, filter, forceCombinedFilter).done(deferred.resolve).fail(deferred.reject);
    });
    that._lastLoadDeferred = deferred;
    return deferred;
  }
  selectedItemKeys(keys, preserve, isDeselect, isSelectAll, updatedKeys) {
    var forceCombinedFilter = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : false;
    var that = this;
    var deferred = that._loadSelectedItems(keys, isDeselect, isSelectAll, updatedKeys, forceCombinedFilter);
    deferred.done(function(items) {
      if (preserve) {
        that._preserveSelectionUpdate(items, isDeselect);
      } else {
        that._replaceSelectionUpdate(items);
      }
      that.onSelectionChanged();
    });
    return deferred;
  }
  addSelectedItem(key, itemData) {
    if (isDefined(itemData) && !this.options.ignoreDisabledItems && itemData.disabled) {
      if (-1 === this.options.disabledItemKeys.indexOf(key)) {
        this.options.disabledItemKeys.push(key);
      }
      return;
    }
    var keyHash = this._getKeyHash(key);
    if (-1 === this._indexOfSelectedItemKey(keyHash)) {
      if (!isObject(keyHash) && this.options.keyHashIndices) {
        this.options.keyHashIndices[keyHash] = [this.options.selectedItemKeys.length];
      }
      this.options.selectedItemKeys.push(key);
      this.options.addedItemKeys.push(key);
      this.options.addedItems.push(itemData);
      this.options.selectedItems.push(itemData);
    }
  }
  _getSelectedIndexByKey(key, ignoreIndicesMap) {
    var selectedItemKeys = this.options.selectedItemKeys;
    for (var index2 = 0; index2 < selectedItemKeys.length; index2++) {
      if ((!ignoreIndicesMap || !ignoreIndicesMap[index2]) && this.equalKeys(selectedItemKeys[index2], key)) {
        return index2;
      }
    }
    return -1;
  }
  _getSelectedIndexByHash(key, ignoreIndicesMap) {
    var indices = this.options.keyHashIndices[key];
    if (indices && indices.length > 1 && ignoreIndicesMap) {
      indices = indices.filter(function(index2) {
        return !ignoreIndicesMap[index2];
      });
    }
    return indices && indices[0] >= 0 ? indices[0] : -1;
  }
  _indexOfSelectedItemKey(key, ignoreIndicesMap) {
    var selectedIndex;
    if (this.options.equalByReference) {
      selectedIndex = this.options.selectedItemKeys.indexOf(key);
    } else if (isObject(key)) {
      selectedIndex = this._getSelectedIndexByKey(key, ignoreIndicesMap);
    } else {
      selectedIndex = this._getSelectedIndexByHash(key, ignoreIndicesMap);
    }
    return selectedIndex;
  }
  _shiftSelectedKeyIndices(keyIndex) {
    for (var currentKeyIndex = keyIndex; currentKeyIndex < this.options.selectedItemKeys.length; currentKeyIndex++) {
      var currentKey = this.options.selectedItemKeys[currentKeyIndex];
      var currentKeyHash = getKeyHash(currentKey);
      var currentKeyIndices = this.options.keyHashIndices[currentKeyHash];
      if (!currentKeyIndices) {
        continue;
      }
      for (var i = 0; i < currentKeyIndices.length; i++) {
        if (currentKeyIndices[i] > keyIndex) {
          currentKeyIndices[i]--;
        }
      }
    }
  }
  removeSelectedItem(key, keyIndicesToRemoveMap, isDisabled) {
    if (!this.options.ignoreDisabledItems && isDisabled) {
      return;
    }
    var keyHash = this._getKeyHash(key);
    var isBatchDeselect = !!keyIndicesToRemoveMap;
    var keyIndex = this._indexOfSelectedItemKey(keyHash, keyIndicesToRemoveMap);
    if (keyIndex < 0) {
      return keyIndex;
    }
    this.options.removedItemKeys.push(key);
    this.options.removedItems.push(this.options.selectedItems[keyIndex]);
    if (isBatchDeselect) {
      return keyIndex;
    }
    this.options.selectedItemKeys.splice(keyIndex, 1);
    this.options.selectedItems.splice(keyIndex, 1);
    if (isObject(keyHash) || !this.options.keyHashIndices) {
      return keyIndex;
    }
    var keyIndices = this.options.keyHashIndices[keyHash];
    if (!keyIndices) {
      return keyIndex;
    }
    keyIndices.shift();
    if (!keyIndices.length) {
      delete this.options.keyHashIndices[keyHash];
    }
    this._shiftSelectedKeyIndices(keyIndex);
    return keyIndex;
  }
  _updateAddedItemKeys(keys, items) {
    for (var i = 0; i < keys.length; i++) {
      if (!this.isItemKeySelected(keys[i])) {
        this.options.addedItemKeys.push(keys[i]);
        this.options.addedItems.push(items[i]);
      }
    }
  }
  _updateRemovedItemKeys(keys, oldSelectedKeys, oldSelectedItems) {
    for (var i = 0; i < oldSelectedKeys.length; i++) {
      if (!this.isItemKeySelected(oldSelectedKeys[i])) {
        this.options.removedItemKeys.push(oldSelectedKeys[i]);
        this.options.removedItems.push(oldSelectedItems[i]);
      }
    }
  }
  _isItemSelectionInProgress(key, checkPending) {
    var shouldCheckPending = checkPending && this._lastRequestData && this._requestInProgress();
    if (shouldCheckPending) {
      var _this$_lastRequestDat3;
      var addedItems = null !== (_this$_lastRequestDat3 = this._lastRequestData.addedItems) && void 0 !== _this$_lastRequestDat3 ? _this$_lastRequestDat3 : [];
      return addedItems.includes(key);
    } else {
      return false;
    }
  }
  _getKeyHash(key) {
    return this.options.equalByReference ? key : getKeyHash(key);
  }
  setSelectedItems(keys, items) {
    this._updateAddedItemKeys(keys, items);
    var oldSelectedKeys = this.options.selectedItemKeys;
    var oldSelectedItems = this.options.selectedItems;
    if (!this.options.equalByReference) {
      this._initSelectedItemKeyHash();
      this.updateSelectedItemKeyHash(keys);
    }
    this._setOption("selectedItemKeys", keys);
    this._setOption("selectedItems", items);
    this._updateRemovedItemKeys(keys, oldSelectedKeys, oldSelectedItems);
  }
  isItemDataSelected(itemData) {
    var options2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    var key = this.options.keyOf(itemData);
    return this.isItemKeySelected(key, options2);
  }
  isItemKeySelected(key) {
    var options2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    var result2 = this._isItemSelectionInProgress(key, options2.checkPending);
    if (!result2) {
      var keyHash = this._getKeyHash(key);
      var index2 = this._indexOfSelectedItemKey(keyHash);
      result2 = -1 !== index2;
    }
    return result2;
  }
  getSelectAllState(visibleOnly) {
    if (visibleOnly) {
      return this._getVisibleSelectAllState();
    } else {
      return this._getFullSelectAllState();
    }
  }
  loadSelectedItemsWithFilter() {
    var keyExpr = this.options.key();
    var keys = this.getSelectedItemKeys();
    var filter = this.options.filter();
    if (!keys.length) {
      return Deferred().resolve([]);
    }
    var selectionFilterCreator = new SelectionFilterCreator(keys);
    var combinedFilter = selectionFilterCreator.getCombinedFilter(keyExpr, filter, true);
    return this._loadFilteredData(combinedFilter);
  }
};

// node_modules/devextreme/esm/ui/selection/selection.js
var Selection = class {
  constructor(options2) {
    this.options = extend(this._getDefaultOptions(), options2, {
      selectedItemKeys: options2.selectedKeys || []
    });
    this._selectionStrategy = this.options.deferred ? new DeferredStrategy(this.options) : new StandardStrategy(this.options);
    this._focusedItemIndex = -1;
    if (!this.options.equalByReference) {
      this._selectionStrategy.updateSelectedItemKeyHash(this.options.selectedItemKeys);
    }
  }
  _getDefaultOptions() {
    return {
      allowNullValue: false,
      deferred: false,
      equalByReference: false,
      mode: "multiple",
      selectedItems: [],
      selectionFilter: [],
      maxFilterLengthInRequest: 0,
      onSelectionChanged: noop2,
      key: noop2,
      keyOf: function(item) {
        return item;
      },
      load: function() {
        return new Deferred().resolve([]);
      },
      totalCount: function() {
        return -1;
      },
      isSelectableItem: function() {
        return true;
      },
      isItemSelected: function() {
        return false;
      },
      getItemData: function(item) {
        return item;
      },
      dataFields: noop2,
      filter: noop2
    };
  }
  validate() {
    this._selectionStrategy.validate();
  }
  getSelectedItemKeys() {
    return this._selectionStrategy.getSelectedItemKeys();
  }
  getSelectedItems() {
    return this._selectionStrategy.getSelectedItems();
  }
  selectionFilter(value2) {
    if (void 0 === value2) {
      return this.options.selectionFilter;
    }
    var filterIsChanged = this.options.selectionFilter !== value2 && JSON.stringify(this.options.selectionFilter) !== JSON.stringify(value2);
    this.options.selectionFilter = value2;
    filterIsChanged && this.onSelectionChanged();
  }
  setSelection(keys, updatedKeys) {
    return this.selectedItemKeys(keys, false, false, false, updatedKeys);
  }
  select(keys) {
    return this.selectedItemKeys(keys, true);
  }
  deselect(keys) {
    return this.selectedItemKeys(keys, true, true);
  }
  selectedItemKeys(keys, preserve, isDeselect, isSelectAll, updatedKeys) {
    var _keys;
    keys = null !== (_keys = keys) && void 0 !== _keys ? _keys : [];
    keys = Array.isArray(keys) ? keys : [keys];
    this.validate();
    return this._selectionStrategy.selectedItemKeys(keys, preserve, isDeselect, isSelectAll, updatedKeys);
  }
  clearSelection() {
    return this.selectedItemKeys([]);
  }
  _addSelectedItem(itemData, key) {
    this._selectionStrategy.addSelectedItem(key, itemData);
  }
  _removeSelectedItem(key) {
    this._selectionStrategy.removeSelectedItem(key);
  }
  _setSelectedItems(keys, items) {
    this._selectionStrategy.setSelectedItems(keys, items);
  }
  onSelectionChanged() {
    this._selectionStrategy.onSelectionChanged();
  }
  changeItemSelection(itemIndex, keys, setFocusOnly) {
    var _this$options$allowLo, _this$options;
    var isSelectedItemsChanged;
    var items = this.options.plainItems();
    var item = items[itemIndex];
    var deferred;
    var allowLoadByRange = null === (_this$options$allowLo = (_this$options = this.options).allowLoadByRange) || void 0 === _this$options$allowLo ? void 0 : _this$options$allowLo.call(_this$options);
    var indexOffset;
    var focusedItemNotInLoadedRange = false;
    var shiftFocusedItemNotInLoadedRange = false;
    var itemIsNotInLoadedRange = (index2) => index2 >= 0 && !items.filter((it) => it.loadIndex === index2).length;
    if (allowLoadByRange && isDefined(item)) {
      indexOffset = item.loadIndex - itemIndex;
      itemIndex = item.loadIndex;
      focusedItemNotInLoadedRange = itemIsNotInLoadedRange(this._focusedItemIndex);
      if (isDefined(this._shiftFocusedItemIndex)) {
        shiftFocusedItemNotInLoadedRange = itemIsNotInLoadedRange(this._shiftFocusedItemIndex);
      }
    }
    if (!this.isSelectable() || !this.isDataItem(item)) {
      return false;
    }
    var itemData = this.options.getItemData(item);
    var itemKey = this.options.keyOf(itemData);
    keys = keys || {};
    if (keys.shift && "multiple" === this.options.mode && this._focusedItemIndex >= 0) {
      if (focusedItemNotInLoadedRange || shiftFocusedItemNotInLoadedRange) {
        isSelectedItemsChanged = itemIndex !== this._shiftFocusedItemIndex || this._focusedItemIndex !== this._shiftFocusedItemIndex;
        if (isSelectedItemsChanged) {
          deferred = this.changeItemSelectionWhenShiftKeyInVirtualPaging(itemIndex);
        }
      } else {
        isSelectedItemsChanged = this.changeItemSelectionWhenShiftKeyPressed(itemIndex, items, indexOffset);
      }
    } else if (keys.control) {
      this._resetItemSelectionWhenShiftKeyPressed();
      if (!setFocusOnly) {
        var isSelected = this._selectionStrategy.isItemDataSelected(itemData);
        if ("single" === this.options.mode) {
          this.clearSelectedItems();
        }
        if (isSelected) {
          this._removeSelectedItem(itemKey);
        } else {
          this._addSelectedItem(itemData, itemKey);
        }
      }
      isSelectedItemsChanged = true;
    } else {
      this._resetItemSelectionWhenShiftKeyPressed();
      var isKeysEqual2 = this._selectionStrategy.equalKeys(this.options.selectedItemKeys[0], itemKey);
      if (1 !== this.options.selectedItemKeys.length || !isKeysEqual2) {
        this._setSelectedItems([itemKey], [itemData]);
        isSelectedItemsChanged = true;
      }
    }
    if (isSelectedItemsChanged) {
      when(deferred).done(() => {
        this._focusedItemIndex = itemIndex;
        !setFocusOnly && this.onSelectionChanged();
      });
      return true;
    }
  }
  isDataItem(item) {
    return this.options.isSelectableItem(item);
  }
  isSelectable() {
    return "single" === this.options.mode || "multiple" === this.options.mode;
  }
  isItemDataSelected(data3) {
    return this._selectionStrategy.isItemDataSelected(data3, {
      checkPending: true
    });
  }
  isItemSelected(arg, options2) {
    return this._selectionStrategy.isItemKeySelected(arg, options2);
  }
  _resetItemSelectionWhenShiftKeyPressed() {
    delete this._shiftFocusedItemIndex;
  }
  _resetFocusedItemIndex() {
    this._focusedItemIndex = -1;
  }
  changeItemSelectionWhenShiftKeyInVirtualPaging(loadIndex) {
    var loadOptions = this.options.getLoadOptions(loadIndex, this._focusedItemIndex, this._shiftFocusedItemIndex);
    var deferred = new Deferred();
    var indexOffset = loadOptions.skip;
    this.options.load(loadOptions).done((items) => {
      this.changeItemSelectionWhenShiftKeyPressed(loadIndex, items, indexOffset);
      deferred.resolve();
    });
    return deferred.promise();
  }
  changeItemSelectionWhenShiftKeyPressed(itemIndex, items, indexOffset) {
    var isSelectedItemsChanged = false;
    var itemIndexStep;
    var indexOffsetDefined = isDefined(indexOffset);
    var index2 = indexOffsetDefined ? this._focusedItemIndex - indexOffset : this._focusedItemIndex;
    var keyOf = this.options.keyOf;
    var focusedItem = items[index2];
    var focusedData = this.options.getItemData(focusedItem);
    var focusedKey = keyOf(focusedData);
    var isFocusedItemSelected = focusedItem && this.isItemDataSelected(focusedData);
    if (!isDefined(this._shiftFocusedItemIndex)) {
      this._shiftFocusedItemIndex = this._focusedItemIndex;
    }
    var data3;
    var itemKey;
    var startIndex;
    var endIndex;
    if (this._shiftFocusedItemIndex !== this._focusedItemIndex) {
      itemIndexStep = this._focusedItemIndex < this._shiftFocusedItemIndex ? 1 : -1;
      startIndex = indexOffsetDefined ? this._focusedItemIndex - indexOffset : this._focusedItemIndex;
      endIndex = indexOffsetDefined ? this._shiftFocusedItemIndex - indexOffset : this._shiftFocusedItemIndex;
      for (index2 = startIndex; index2 !== endIndex; index2 += itemIndexStep) {
        if (indexOffsetDefined || this.isDataItem(items[index2])) {
          itemKey = keyOf(this.options.getItemData(items[index2]));
          this._removeSelectedItem(itemKey);
          isSelectedItemsChanged = true;
        }
      }
    }
    if (itemIndex !== this._shiftFocusedItemIndex) {
      itemIndexStep = itemIndex < this._shiftFocusedItemIndex ? 1 : -1;
      startIndex = indexOffsetDefined ? itemIndex - indexOffset : itemIndex;
      endIndex = indexOffsetDefined ? this._shiftFocusedItemIndex - indexOffset : this._shiftFocusedItemIndex;
      for (index2 = startIndex; index2 !== endIndex; index2 += itemIndexStep) {
        if (indexOffsetDefined || this.isDataItem(items[index2])) {
          data3 = this.options.getItemData(items[index2]);
          itemKey = keyOf(data3);
          this._addSelectedItem(data3, itemKey);
          isSelectedItemsChanged = true;
        }
      }
    }
    if ((indexOffsetDefined || this.isDataItem(focusedItem)) && !isFocusedItemSelected) {
      this._addSelectedItem(focusedData, focusedKey);
      isSelectedItemsChanged = true;
    }
    return isSelectedItemsChanged;
  }
  clearSelectedItems() {
    this._setSelectedItems([], []);
  }
  selectAll(isOnePage) {
    this._resetFocusedItemIndex();
    if (isOnePage) {
      return this._onePageSelectAll(false);
    } else {
      return this.selectedItemKeys([], true, false, true);
    }
  }
  deselectAll(isOnePage) {
    this._resetFocusedItemIndex();
    if (isOnePage) {
      return this._onePageSelectAll(true);
    } else {
      return this.selectedItemKeys([], true, true, true);
    }
  }
  _onePageSelectAll(isDeselect) {
    var items = this._selectionStrategy.getSelectableItems(this.options.plainItems());
    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      if (this.isDataItem(item)) {
        var itemData = this.options.getItemData(item);
        var itemKey = this.options.keyOf(itemData);
        var isSelected = this.isItemSelected(itemKey);
        if (!isSelected && !isDeselect) {
          this._addSelectedItem(itemData, itemKey);
        }
        if (isSelected && isDeselect) {
          this._removeSelectedItem(itemKey);
        }
      }
    }
    this.onSelectionChanged();
    return new Deferred().resolve();
  }
  getSelectAllState(visibleOnly) {
    return this._selectionStrategy.getSelectAllState(visibleOnly);
  }
  loadSelectedItemsWithFilter() {
    return this._selectionStrategy.loadSelectedItemsWithFilter();
  }
};

// node_modules/devextreme/esm/ui/collection/ui.collection_widget.edit.js
var ITEM_DELETING_DATA_KEY = "dxItemDeleting";
var NOT_EXISTING_INDEX = -1;
var indexExists = function(index2) {
  return index2 !== NOT_EXISTING_INDEX;
};
var CollectionWidget2 = ui_collection_widget_base_default.inherit({
  _setOptionsByReference: function() {
    this.callBase();
    extend(this._optionsByReference, {
      selectedItem: true
    });
  },
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      selectionMode: "none",
      selectionRequired: false,
      selectByClick: true,
      selectedItems: [],
      selectedItemKeys: [],
      maxFilterLengthInRequest: 1500,
      keyExpr: null,
      selectedIndex: NOT_EXISTING_INDEX,
      selectedItem: null,
      onSelectionChanged: null,
      onItemReordered: null,
      onItemDeleting: null,
      onItemDeleted: null
    });
  },
  ctor: function(element, options2) {
    this._userOptions = options2 || {};
    this.callBase(element, options2);
  },
  _init: function() {
    this._initEditStrategy();
    this.callBase();
    this._initKeyGetter();
    this._initSelectionModule();
  },
  _initKeyGetter: function() {
    this._keyGetter = compileGetter(this.option("keyExpr"));
  },
  _getKeysByItems: function(selectedItems) {
    return this._editStrategy.getKeysByItems(selectedItems);
  },
  _getItemsByKeys: function(selectedItemKeys, selectedItems) {
    return this._editStrategy.getItemsByKeys(selectedItemKeys, selectedItems);
  },
  _getKeyByIndex: function(index2) {
    return this._editStrategy.getKeyByIndex(index2);
  },
  _getIndexByKey: function(key) {
    return this._editStrategy.getIndexByKey(key);
  },
  _getIndexByItemData: function(itemData) {
    return this._editStrategy.getIndexByItemData(itemData);
  },
  _isKeySpecified: function() {
    return !!this._dataController.key();
  },
  _getCombinedFilter: function() {
    return this._dataController.filter();
  },
  key: function() {
    if (this.option("keyExpr")) {
      return this.option("keyExpr");
    }
    return this._dataController.key();
  },
  keyOf: function(item) {
    var key = item;
    if (this.option("keyExpr")) {
      key = this._keyGetter(item);
    } else if (this._dataController.store()) {
      key = this._dataController.keyOf(item);
    }
    return key;
  },
  _nullValueSelectionSupported: function() {
    return false;
  },
  _initSelectionModule: function() {
    var that = this;
    var itemsGetter = that._editStrategy.itemsGetter;
    this._selection = new Selection({
      allowNullValue: this._nullValueSelectionSupported(),
      mode: this.option("selectionMode"),
      maxFilterLengthInRequest: this.option("maxFilterLengthInRequest"),
      equalByReference: !this._isKeySpecified(),
      onSelectionChanged: function(args) {
        if (args.addedItemKeys.length || args.removedItemKeys.length) {
          that.option("selectedItems", that._getItemsByKeys(args.selectedItemKeys, args.selectedItems));
          that._updateSelectedItems(args);
        }
      },
      filter: that._getCombinedFilter.bind(that),
      totalCount: function() {
        var items = that.option("items");
        var totalCount = that._dataController.totalCount();
        return totalCount >= 0 ? totalCount : that._getItemsCount(items);
      },
      key: that.key.bind(that),
      keyOf: that.keyOf.bind(that),
      load: function(options2) {
        var _dataController$loadO;
        var dataController2 = that._dataController;
        options2.customQueryParams = null === (_dataController$loadO = dataController2.loadOptions()) || void 0 === _dataController$loadO ? void 0 : _dataController$loadO.customQueryParams;
        options2.userData = dataController2.userData();
        if (dataController2.store()) {
          return dataController2.loadFromStore(options2).done(function(loadResult) {
            if (that._disposed) {
              return;
            }
            var items = normalizeLoadResult(loadResult).data;
            dataController2.applyMapFunction(items);
          });
        } else {
          return new Deferred().resolve(this.plainItems());
        }
      },
      dataFields: function() {
        return that._dataController.select();
      },
      plainItems: itemsGetter.bind(that._editStrategy)
    });
  },
  _getItemsCount: function(items) {
    return items.reduce((itemsCount, item) => itemsCount + (item.items ? this._getItemsCount(item.items) : 1), 0);
  },
  _initEditStrategy: function() {
    var Strategy = ui_collection_widget_edit_strategy_plain_default;
    this._editStrategy = new Strategy(this);
  },
  _getSelectedItemIndices: function(keys) {
    var that = this;
    var indices = [];
    keys = keys || this._selection.getSelectedItemKeys();
    that._editStrategy.beginCache();
    each(keys, function(_, key) {
      var selectedIndex = that._getIndexByKey(key);
      if (indexExists(selectedIndex)) {
        indices.push(selectedIndex);
      }
    });
    that._editStrategy.endCache();
    return indices;
  },
  _initMarkup: function() {
    this._rendering = true;
    if (!this._dataController.isLoading()) {
      this._syncSelectionOptions().done(() => this._normalizeSelectedItems());
    }
    this.callBase();
  },
  _render: function() {
    this.callBase();
    this._rendering = false;
  },
  _fireContentReadyAction: function() {
    this._rendering = false;
    this._rendered = true;
    this.callBase.apply(this, arguments);
  },
  _syncSelectionOptions: function(byOption) {
    byOption = byOption || this._chooseSelectOption();
    var selectedItem;
    var selectedIndex;
    var selectedItemKeys;
    var selectedItems;
    switch (byOption) {
      case "selectedIndex":
        selectedItem = this._editStrategy.getItemDataByIndex(this.option("selectedIndex"));
        if (isDefined(selectedItem)) {
          this._setOptionWithoutOptionChange("selectedItems", [selectedItem]);
          this._setOptionWithoutOptionChange("selectedItem", selectedItem);
          this._setOptionWithoutOptionChange("selectedItemKeys", this._editStrategy.getKeysByItems([selectedItem]));
        } else {
          this._setOptionWithoutOptionChange("selectedItems", []);
          this._setOptionWithoutOptionChange("selectedItemKeys", []);
          this._setOptionWithoutOptionChange("selectedItem", null);
        }
        break;
      case "selectedItems":
        selectedItems = this.option("selectedItems") || [];
        selectedIndex = selectedItems.length ? this._editStrategy.getIndexByItemData(selectedItems[0]) : NOT_EXISTING_INDEX;
        if (this.option("selectionRequired") && !indexExists(selectedIndex)) {
          return this._syncSelectionOptions("selectedIndex");
        }
        this._setOptionWithoutOptionChange("selectedItem", selectedItems[0]);
        this._setOptionWithoutOptionChange("selectedIndex", selectedIndex);
        this._setOptionWithoutOptionChange("selectedItemKeys", this._editStrategy.getKeysByItems(selectedItems));
        break;
      case "selectedItem":
        selectedItem = this.option("selectedItem");
        selectedIndex = this._editStrategy.getIndexByItemData(selectedItem);
        if (this.option("selectionRequired") && !indexExists(selectedIndex)) {
          return this._syncSelectionOptions("selectedIndex");
        }
        if (isDefined(selectedItem)) {
          this._setOptionWithoutOptionChange("selectedItems", [selectedItem]);
          this._setOptionWithoutOptionChange("selectedIndex", selectedIndex);
          this._setOptionWithoutOptionChange("selectedItemKeys", this._editStrategy.getKeysByItems([selectedItem]));
        } else {
          this._setOptionWithoutOptionChange("selectedItems", []);
          this._setOptionWithoutOptionChange("selectedItemKeys", []);
          this._setOptionWithoutOptionChange("selectedIndex", NOT_EXISTING_INDEX);
        }
        break;
      case "selectedItemKeys":
        selectedItemKeys = this.option("selectedItemKeys");
        if (this.option("selectionRequired")) {
          var selectedItemIndex = this._getIndexByKey(selectedItemKeys[0]);
          if (!indexExists(selectedItemIndex)) {
            return this._syncSelectionOptions("selectedIndex");
          }
        }
        return this._selection.setSelection(selectedItemKeys);
    }
    return new Deferred().resolve().promise();
  },
  _chooseSelectOption: function() {
    var optionName = "selectedIndex";
    var isOptionDefined = (function(optionName2) {
      var optionValue = this.option(optionName2);
      var length = isDefined(optionValue) && optionValue.length;
      return length || optionName2 in this._userOptions;
    }).bind(this);
    if (isOptionDefined("selectedItems")) {
      optionName = "selectedItems";
    } else if (isOptionDefined("selectedItem")) {
      optionName = "selectedItem";
    } else if (isOptionDefined("selectedItemKeys")) {
      optionName = "selectedItemKeys";
    }
    return optionName;
  },
  _compareKeys: function(oldKeys, newKeys) {
    if (oldKeys.length !== newKeys.length) {
      return false;
    }
    for (var i = 0; i < newKeys.length; i++) {
      if (oldKeys[i] !== newKeys[i]) {
        return false;
      }
    }
    return true;
  },
  _normalizeSelectedItems: function() {
    if ("none" === this.option("selectionMode")) {
      this._setOptionWithoutOptionChange("selectedItems", []);
      this._syncSelectionOptions("selectedItems");
    } else if ("single" === this.option("selectionMode")) {
      var newSelection = this.option("selectedItems");
      if (newSelection.length > 1 || !newSelection.length && this.option("selectionRequired") && this.option("items") && this.option("items").length) {
        var currentSelection = this._selection.getSelectedItems();
        var normalizedSelection = void 0 === newSelection[0] ? currentSelection[0] : newSelection[0];
        if (void 0 === normalizedSelection) {
          normalizedSelection = this._editStrategy.itemsGetter()[0];
        }
        if (this.option("grouped") && normalizedSelection && normalizedSelection.items) {
          normalizedSelection.items = [normalizedSelection.items[0]];
        }
        this._selection.setSelection(this._getKeysByItems([normalizedSelection]));
        this._setOptionWithoutOptionChange("selectedItems", [normalizedSelection]);
        return this._syncSelectionOptions("selectedItems");
      } else {
        this._selection.setSelection(this._getKeysByItems(newSelection));
      }
    } else {
      var newKeys = this._getKeysByItems(this.option("selectedItems"));
      var oldKeys = this._selection.getSelectedItemKeys();
      if (!this._compareKeys(oldKeys, newKeys)) {
        this._selection.setSelection(newKeys);
      }
    }
    return new Deferred().resolve().promise();
  },
  _itemClickHandler: function(e) {
    var itemSelectPromise = new Deferred().resolve();
    var callBase = this.callBase;
    this._createAction((function(e2) {
      var _this$_itemSelectHand;
      itemSelectPromise = null !== (_this$_itemSelectHand = this._itemSelectHandler(e2.event)) && void 0 !== _this$_itemSelectHand ? _this$_itemSelectHand : itemSelectPromise;
    }).bind(this), {
      validatingTargetName: "itemElement"
    })({
      itemElement: renderer_default(e.currentTarget),
      event: e
    });
    itemSelectPromise.always(() => {
      callBase.apply(this, arguments);
    });
  },
  _itemSelectHandler: function(e) {
    var _itemSelectPromise;
    var itemSelectPromise;
    if (!this.option("selectByClick")) {
      return;
    }
    var $itemElement = e.currentTarget;
    if (this.isItemSelected($itemElement)) {
      this.unselectItem(e.currentTarget);
    } else {
      itemSelectPromise = this.selectItem(e.currentTarget);
    }
    return null === (_itemSelectPromise = itemSelectPromise) || void 0 === _itemSelectPromise ? void 0 : _itemSelectPromise.promise();
  },
  _selectedItemElement: function(index2) {
    return this._itemElements().eq(index2);
  },
  _postprocessRenderItem: function(args) {
    if ("none" !== this.option("selectionMode")) {
      var $itemElement = renderer_default(args.itemElement);
      var normalizedItemIndex = this._editStrategy.getNormalizedIndex($itemElement);
      var isItemSelected = this._isItemSelected(normalizedItemIndex);
      this._processSelectableItem($itemElement, isItemSelected);
    }
  },
  _processSelectableItem: function($itemElement, isSelected) {
    $itemElement.toggleClass(this._selectedItemClass(), isSelected);
    this._setAriaSelectionAttribute($itemElement, String(isSelected));
  },
  _updateSelectedItems: function(args) {
    var that = this;
    var addedItemKeys = args.addedItemKeys;
    var removedItemKeys = args.removedItemKeys;
    if (that._rendered && (addedItemKeys.length || removedItemKeys.length)) {
      var selectionChangePromise = that._selectionChangePromise;
      if (!that._rendering) {
        var addedSelection = [];
        var normalizedIndex;
        var removedSelection = [];
        that._editStrategy.beginCache();
        for (var i = 0; i < addedItemKeys.length; i++) {
          normalizedIndex = that._getIndexByKey(addedItemKeys[i]);
          addedSelection.push(normalizedIndex);
          that._addSelection(normalizedIndex);
        }
        for (var _i = 0; _i < removedItemKeys.length; _i++) {
          normalizedIndex = that._getIndexByKey(removedItemKeys[_i]);
          removedSelection.push(normalizedIndex);
          that._removeSelection(normalizedIndex);
        }
        that._editStrategy.endCache();
        that._updateSelection(addedSelection, removedSelection);
      }
      when(selectionChangePromise).done(function() {
        that._fireSelectionChangeEvent(args.addedItems, args.removedItems);
      });
    }
  },
  _fireSelectionChangeEvent: function(addedItems, removedItems) {
    this._createActionByOption("onSelectionChanged", {
      excludeValidators: ["disabled", "readOnly"]
    })({
      addedItems,
      removedItems
    });
  },
  _updateSelection: noop2,
  _setAriaSelectionAttribute: function($target, value2) {
    this.setAria("selected", value2, $target);
  },
  _removeSelection: function(normalizedIndex) {
    var $itemElement = this._editStrategy.getItemElement(normalizedIndex);
    if (indexExists(normalizedIndex)) {
      this._processSelectableItem($itemElement, false);
      events_engine_default.triggerHandler($itemElement, "stateChanged", false);
    }
  },
  _addSelection: function(normalizedIndex) {
    var $itemElement = this._editStrategy.getItemElement(normalizedIndex);
    if (indexExists(normalizedIndex)) {
      this._processSelectableItem($itemElement, true);
      events_engine_default.triggerHandler($itemElement, "stateChanged", true);
    }
  },
  _isItemSelected: function(index2) {
    var key = this._getKeyByIndex(index2);
    return this._selection.isItemSelected(key, {
      checkPending: true
    });
  },
  _optionChanged: function(args) {
    switch (args.name) {
      case "selectionMode":
        this._invalidate();
        break;
      case "dataSource":
        if (!args.value || Array.isArray(args.value) && !args.value.length) {
          this.option("selectedItemKeys", []);
        }
        this.callBase(args);
        break;
      case "selectedIndex":
      case "selectedItem":
      case "selectedItems":
      case "selectedItemKeys":
        this._syncSelectionOptions(args.name).done(() => this._normalizeSelectedItems());
        break;
      case "keyExpr":
        this._initKeyGetter();
        break;
      case "selectionRequired":
        this._normalizeSelectedItems();
        break;
      case "selectByClick":
      case "onSelectionChanged":
      case "onItemDeleting":
      case "onItemDeleted":
      case "onItemReordered":
      case "maxFilterLengthInRequest":
        break;
      default:
        this.callBase(args);
    }
  },
  _clearSelectedItems: function() {
    this._setOptionWithoutOptionChange("selectedItems", []);
    this._syncSelectionOptions("selectedItems");
  },
  _waitDeletingPrepare: function($itemElement) {
    if ($itemElement.data(ITEM_DELETING_DATA_KEY)) {
      return new Deferred().resolve().promise();
    }
    $itemElement.data(ITEM_DELETING_DATA_KEY, true);
    var deferred = new Deferred();
    var deletingActionArgs = {
      cancel: false
    };
    var deletePromise = this._itemEventHandler($itemElement, "onItemDeleting", deletingActionArgs, {
      excludeValidators: ["disabled", "readOnly"]
    });
    when(deletePromise).always((function(value2) {
      var deletePromiseExists = !deletePromise;
      var deletePromiseResolved = !deletePromiseExists && "resolved" === deletePromise.state();
      var argumentsSpecified = !!arguments.length;
      var shouldDelete = deletePromiseExists || deletePromiseResolved && !argumentsSpecified || deletePromiseResolved && value2;
      when(fromPromise(deletingActionArgs.cancel)).always(function() {
        $itemElement.data(ITEM_DELETING_DATA_KEY, false);
      }).done(function(cancel2) {
        shouldDelete && !cancel2 ? deferred.resolve() : deferred.reject();
      }).fail(deferred.reject);
    }).bind(this));
    return deferred.promise();
  },
  _deleteItemFromDS: function($item) {
    var dataController2 = this._dataController;
    var deferred = new Deferred();
    var disabledState = this.option("disabled");
    var dataStore = dataController2.store();
    if (!dataStore) {
      return new Deferred().resolve().promise();
    }
    if (!dataStore.remove) {
      throw ui_errors_default.Error("E1011");
    }
    this.option("disabled", true);
    dataStore.remove(dataController2.keyOf(this._getItemData($item))).done(function(key) {
      if (void 0 !== key) {
        deferred.resolve();
      } else {
        deferred.reject();
      }
    }).fail(function() {
      deferred.reject();
    });
    deferred.always((function() {
      this.option("disabled", disabledState);
    }).bind(this));
    return deferred;
  },
  _tryRefreshLastPage: function() {
    var deferred = new Deferred();
    if (this._isLastPage() || this.option("grouped")) {
      deferred.resolve();
    } else {
      this._refreshLastPage().done(function() {
        deferred.resolve();
      });
    }
    return deferred.promise();
  },
  _refreshLastPage: function() {
    this._expectLastItemLoading();
    return this._dataController.load();
  },
  _updateSelectionAfterDelete: function(index2) {
    var key = this._getKeyByIndex(index2);
    this._selection.deselect([key]);
  },
  _updateIndicesAfterIndex: function(index2) {
    var itemElements = this._itemElements();
    for (var i = index2 + 1; i < itemElements.length; i++) {
      renderer_default(itemElements[i]).data(this._itemIndexKey(), i - 1);
    }
  },
  _simulateOptionChange: function(optionName) {
    var optionValue = this.option(optionName);
    if (optionValue instanceof DataSource) {
      return;
    }
    this._optionChangedAction({
      name: optionName,
      fullName: optionName,
      value: optionValue
    });
  },
  isItemSelected: function(itemElement) {
    return this._isItemSelected(this._editStrategy.getNormalizedIndex(itemElement));
  },
  selectItem: function(itemElement) {
    if ("none" === this.option("selectionMode")) {
      return;
    }
    var itemIndex = this._editStrategy.getNormalizedIndex(itemElement);
    if (!indexExists(itemIndex)) {
      return;
    }
    var key = this._getKeyByIndex(itemIndex);
    if (this._selection.isItemSelected(key)) {
      return;
    }
    if ("single" === this.option("selectionMode")) {
      return this._selection.setSelection([key]);
    } else {
      var selectedItemKeys = this.option("selectedItemKeys") || [];
      return this._selection.setSelection([...selectedItemKeys, key], [key]);
    }
  },
  unselectItem: function(itemElement) {
    var itemIndex = this._editStrategy.getNormalizedIndex(itemElement);
    if (!indexExists(itemIndex)) {
      return;
    }
    var selectedItemKeys = this._selection.getSelectedItemKeys();
    if (this.option("selectionRequired") && selectedItemKeys.length <= 1) {
      return;
    }
    var key = this._getKeyByIndex(itemIndex);
    if (!this._selection.isItemSelected(key, {
      checkPending: true
    })) {
      return;
    }
    this._selection.deselect([key]);
  },
  _deleteItemElementByIndex: function(index2) {
    this._updateSelectionAfterDelete(index2);
    this._updateIndicesAfterIndex(index2);
    this._editStrategy.deleteItemAtIndex(index2);
  },
  _afterItemElementDeleted: function($item, deletedActionArgs) {
    var changingOption = this._dataController.getDataSource() ? "dataSource" : "items";
    this._simulateOptionChange(changingOption);
    this._itemEventHandler($item, "onItemDeleted", deletedActionArgs, {
      beforeExecute: function() {
        $item.remove();
      },
      excludeValidators: ["disabled", "readOnly"]
    });
    this._renderEmptyMessage();
  },
  deleteItem: function(itemElement) {
    var that = this;
    var deferred = new Deferred();
    var $item = this._editStrategy.getItemElement(itemElement);
    var index2 = this._editStrategy.getNormalizedIndex(itemElement);
    var itemResponseWaitClass = this._itemResponseWaitClass();
    if (indexExists(index2)) {
      this._waitDeletingPrepare($item).done(function() {
        $item.addClass(itemResponseWaitClass);
        var deletedActionArgs = that._extendActionArgs($item);
        that._deleteItemFromDS($item).done(function() {
          that._deleteItemElementByIndex(index2);
          that._afterItemElementDeleted($item, deletedActionArgs);
          that._tryRefreshLastPage().done(function() {
            deferred.resolveWith(that);
          });
        }).fail(function() {
          $item.removeClass(itemResponseWaitClass);
          deferred.rejectWith(that);
        });
      }).fail(function() {
        deferred.rejectWith(that);
      });
    } else {
      deferred.rejectWith(that);
    }
    return deferred.promise();
  },
  reorderItem: function(itemElement, toItemElement) {
    var deferred = new Deferred();
    var that = this;
    var strategy4 = this._editStrategy;
    var $movingItem = strategy4.getItemElement(itemElement);
    var $destinationItem = strategy4.getItemElement(toItemElement);
    var movingIndex = strategy4.getNormalizedIndex(itemElement);
    var destinationIndex = strategy4.getNormalizedIndex(toItemElement);
    var changingOption = this._dataController.getDataSource() ? "dataSource" : "items";
    var canMoveItems = indexExists(movingIndex) && indexExists(destinationIndex) && movingIndex !== destinationIndex;
    if (canMoveItems) {
      deferred.resolveWith(this);
    } else {
      deferred.rejectWith(this);
    }
    return deferred.promise().done(function() {
      $destinationItem[strategy4.itemPlacementFunc(movingIndex, destinationIndex)]($movingItem);
      strategy4.moveItemAtIndexToIndex(movingIndex, destinationIndex);
      this._updateIndicesAfterIndex(movingIndex);
      that.option("selectedItems", that._getItemsByKeys(that._selection.getSelectedItemKeys(), that._selection.getSelectedItems()));
      if ("items" === changingOption) {
        that._simulateOptionChange(changingOption);
      }
      that._itemEventHandler($movingItem, "onItemReordered", {
        fromIndex: strategy4.getIndex(movingIndex),
        toIndex: strategy4.getIndex(destinationIndex)
      }, {
        excludeValidators: ["disabled", "readOnly"]
      });
    });
  }
});
var ui_collection_widget_edit_default = CollectionWidget2;

// node_modules/devextreme/esm/ui/hierarchical_collection/ui.hierarchical_collection_widget.js
var DISABLED_STATE_CLASS2 = "dx-state-disabled";
var ITEM_URL_CLASS = "dx-item-url";
var HierarchicalCollectionWidget = ui_collection_widget_edit_default.inherit({
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      keyExpr: "id",
      displayExpr: "text",
      selectedExpr: "selected",
      disabledExpr: "disabled",
      itemsExpr: "items",
      hoverStateEnabled: true,
      parentIdExpr: "parentId",
      expandedExpr: "expanded"
    });
  },
  _defaultOptionsRules: function() {
    return this.callBase().concat([{
      device: function() {
        return "desktop" === devices_default.real().deviceType && !devices_default.isSimulator();
      },
      options: {
        focusStateEnabled: true
      }
    }]);
  },
  _init: function() {
    this.callBase();
    this._initAccessors();
    this._initDataAdapter();
    this._initDynamicTemplates();
  },
  _initDataSource: function() {
    this.callBase();
    this._dataSource && this._dataSource.paginate(false);
  },
  _initDataAdapter: function() {
    var accessors = this._createDataAdapterAccessors();
    this._dataAdapter = new ui_data_adapter_default(extend({
      dataAccessors: {
        getters: accessors.getters,
        setters: accessors.setters
      },
      items: this.option("items")
    }, this._getDataAdapterOptions()));
  },
  _getDataAdapterOptions: noop2,
  _getItemExtraPropNames: noop2,
  _initDynamicTemplates: function() {
    var fields = ["text", "html", "items", "icon"].concat(this._getItemExtraPropNames());
    this._templateManager.addDefaultTemplates({
      item: new BindableTemplate(this._addContent.bind(this), fields, this.option("integrationOptions.watchMethod"), {
        text: this._displayGetter,
        items: this._itemsGetter
      })
    });
  },
  _addContent: function($container, itemData) {
    $container.html(itemData.html).append(this._getIconContainer(itemData)).append(this._getTextContainer(itemData));
  },
  _getLinkContainer: function(iconContainer, textContainer, _ref) {
    var {
      linkAttr,
      url
    } = _ref;
    var linkAttributes = isObject(linkAttr) ? linkAttr : {};
    return renderer_default("<a>").addClass(ITEM_URL_CLASS).attr(_extends({}, linkAttributes, {
      href: url
    })).append(iconContainer).append(textContainer);
  },
  _getIconContainer: function(itemData) {
    if (!itemData.icon) {
      return;
    }
    var $imageContainer = getImageContainer(itemData.icon);
    if ($imageContainer.is("img")) {
      $imageContainer.attr("alt", "".concat(this.NAME, " item icon"));
    }
    return $imageContainer;
  },
  _getTextContainer: function(itemData) {
    return renderer_default("<span>").text(itemData.text);
  },
  _initAccessors: function() {
    var that = this;
    each(this._getAccessors(), function(_, accessor) {
      that._compileAccessor(accessor);
    });
    this._compileDisplayGetter();
  },
  _getAccessors: function() {
    return ["key", "selected", "items", "disabled", "parentId", "expanded"];
  },
  _getChildNodes: function(node) {
    var that = this;
    var arr = [];
    each(node.internalFields.childrenKeys, function(_, key) {
      var childNode = that._dataAdapter.getNodeByKey(key);
      arr.push(childNode);
    });
    return arr;
  },
  _hasChildren: function(node) {
    return node && node.internalFields.childrenKeys.length;
  },
  _compileAccessor: function(optionName) {
    var getter = "_" + optionName + "Getter";
    var setter = "_" + optionName + "Setter";
    var optionExpr = this.option(optionName + "Expr");
    if (!optionExpr) {
      this[getter] = noop2;
      this[setter] = noop2;
      return;
    } else if (isFunction(optionExpr)) {
      this[setter] = function(obj, value2) {
        obj[optionExpr()] = value2;
      };
      this[getter] = function(obj) {
        return obj[optionExpr()];
      };
      return;
    }
    this[getter] = compileGetter(optionExpr);
    this[setter] = compileSetter(optionExpr);
  },
  _createDataAdapterAccessors: function() {
    var that = this;
    var accessors = {
      getters: {},
      setters: {}
    };
    each(this._getAccessors(), function(_, accessor) {
      var getterName = "_" + accessor + "Getter";
      var setterName = "_" + accessor + "Setter";
      var newAccessor = "parentId" === accessor ? "parentKey" : accessor;
      accessors.getters[newAccessor] = that[getterName];
      accessors.setters[newAccessor] = that[setterName];
    });
    accessors.getters.display = !this._displayGetter ? (itemData) => itemData.text : this._displayGetter;
    return accessors;
  },
  _initMarkup: function() {
    this.callBase();
    this._addWidgetClass();
  },
  _addWidgetClass: function() {
    this._focusTarget().addClass(this._widgetClass());
  },
  _widgetClass: noop2,
  _renderItemFrame: function(index2, itemData) {
    var $itemFrame = this.callBase.apply(this, arguments);
    $itemFrame.toggleClass(DISABLED_STATE_CLASS2, !!this._disabledGetter(itemData));
    return $itemFrame;
  },
  _optionChanged: function(args) {
    switch (args.name) {
      case "displayExpr":
      case "keyExpr":
        this._initAccessors();
        this._initDynamicTemplates();
        this.repaint();
        break;
      case "itemsExpr":
      case "selectedExpr":
      case "disabledExpr":
      case "expandedExpr":
      case "parentIdExpr":
        this._initAccessors();
        this._initDataAdapter();
        this.repaint();
        break;
      case "items":
        this._initDataAdapter();
        this.callBase(args);
        break;
      default:
        this.callBase(args);
    }
  }
});
var ui_hierarchical_collection_widget_default = HierarchicalCollectionWidget;

// node_modules/devextreme/esm/ui/context_menu/ui.menu_base.edit.strategy.js
var MenuBaseEditStrategy = class extends ui_collection_widget_edit_strategy_plain_default {
  _getPlainItems() {
    return map(this._collectionWidget.option("items"), function getMenuItems(item) {
      return item.items ? [item].concat(map(item.items, getMenuItems)) : item;
    });
  }
  _stringifyItem(item) {
    return JSON.stringify(item, (key, value2) => {
      if ("template" === key) {
        return this._getTemplateString(value2);
      }
      return value2;
    });
  }
  _getTemplateString(template) {
    var result2;
    if ("object" === typeof template) {
      result2 = renderer_default(template).text();
    } else {
      result2 = template.toString();
    }
    return result2;
  }
};
var ui_menu_base_edit_strategy_default = MenuBaseEditStrategy;

// node_modules/devextreme/esm/ui/context_menu/ui.menu_base.js
var DX_MENU_CLASS = "dx-menu";
var DX_MENU_NO_ICONS_CLASS = DX_MENU_CLASS + "-no-icons";
var DX_MENU_BASE_CLASS = "dx-menu-base";
var ITEM_CLASS2 = DX_MENU_CLASS + "-item";
var DX_ITEM_CONTENT_CLASS = ITEM_CLASS2 + "-content";
var DX_MENU_SELECTED_ITEM_CLASS = ITEM_CLASS2 + "-selected";
var DX_MENU_ITEM_WRAPPER_CLASS = ITEM_CLASS2 + "-wrapper";
var DX_MENU_ITEMS_CONTAINER_CLASS = DX_MENU_CLASS + "-items-container";
var DX_MENU_ITEM_EXPANDED_CLASS = ITEM_CLASS2 + "-expanded";
var DX_MENU_SEPARATOR_CLASS = DX_MENU_CLASS + "-separator";
var DX_MENU_ITEM_LAST_GROUP_ITEM = DX_MENU_CLASS + "-last-group-item";
var DX_ITEM_HAS_TEXT = ITEM_CLASS2 + "-has-text";
var DX_ITEM_HAS_ICON = ITEM_CLASS2 + "-has-icon";
var DX_ITEM_HAS_SUBMENU = ITEM_CLASS2 + "-has-submenu";
var DX_MENU_ITEM_POPOUT_CLASS = ITEM_CLASS2 + "-popout";
var DX_MENU_ITEM_POPOUT_CONTAINER_CLASS = DX_MENU_ITEM_POPOUT_CLASS + "-container";
var DX_MENU_ITEM_CAPTION_CLASS = ITEM_CLASS2 + "-text";
var SINGLE_SELECTION_MODE = "single";
var DEFAULT_DELAY = {
  show: 50,
  hide: 300
};
var DX_MENU_ITEM_CAPTION_URL_CLASS = "".concat(DX_MENU_ITEM_CAPTION_CLASS, "-with-url");
var DX_ICON_WITH_URL_CLASS = "dx-icon-with-url";
var ITEM_URL_CLASS2 = "dx-item-url";
var MenuBase = class extends ui_hierarchical_collection_widget_default {
  _getDefaultOptions() {
    return extend(super._getDefaultOptions(), {
      items: [],
      cssClass: "",
      activeStateEnabled: true,
      showSubmenuMode: {
        name: "onHover",
        delay: {
          show: 50,
          hide: 300
        }
      },
      animation: {
        show: {
          type: "fade",
          from: 0,
          to: 1,
          duration: 100
        },
        hide: {
          type: "fade",
          from: 1,
          to: 0,
          duration: 100
        }
      },
      selectByClick: false,
      focusOnSelectedItem: false,
      keyExpr: null,
      _itemAttributes: {
        role: "menuitem"
      },
      useInkRipple: false
    });
  }
  _itemDataKey() {
    return "dxMenuItemDataKey";
  }
  _itemClass() {
    return ITEM_CLASS2;
  }
  _setAriaSelectionAttribute() {
  }
  _selectedItemClass() {
    return DX_MENU_SELECTED_ITEM_CLASS;
  }
  _widgetClass() {
    return DX_MENU_BASE_CLASS;
  }
  _focusTarget() {
    return this._itemContainer();
  }
  _clean() {
    this.option("focusedElement", null);
    super._clean();
  }
  _supportedKeys() {
    return extend(super._supportedKeys(), {
      space: () => {
        var $item = renderer_default(this.option("focusedElement"));
        if (!$item.length || !this._isSelectionEnabled()) {
          return;
        }
        this.selectItem($item[0]);
      },
      pageUp: noop2,
      pageDown: noop2
    });
  }
  _isSelectionEnabled() {
    return this.option("selectionMode") === SINGLE_SELECTION_MODE;
  }
  _init() {
    this._activeStateUnit = ".".concat(ITEM_CLASS2);
    super._init();
    this._renderSelectedItem();
    this._initActions();
  }
  _getLinkContainer(iconContainer, textContainer, _ref) {
    var {
      linkAttr,
      url
    } = _ref;
    null === iconContainer || void 0 === iconContainer ? void 0 : iconContainer.addClass(DX_ICON_WITH_URL_CLASS);
    null === textContainer || void 0 === textContainer ? void 0 : textContainer.addClass(DX_MENU_ITEM_CAPTION_URL_CLASS);
    return super._getLinkContainer(iconContainer, textContainer, {
      linkAttr,
      url
    });
  }
  _addContent($container, itemData) {
    var {
      html,
      url
    } = itemData;
    if (url) {
      $container.html(html);
      var link = this._getLinkContainer(this._getIconContainer(itemData), this._getTextContainer(itemData), itemData);
      $container.append(link);
    } else {
      super._addContent($container, itemData);
    }
    $container.append(this._getPopoutContainer(itemData));
    this._addContentClasses(itemData, $container.parent());
  }
  _getTextContainer(itemData) {
    var {
      text
    } = itemData;
    if (!text) {
      return;
    }
    var $itemContainer = renderer_default("<span>").addClass(DX_MENU_ITEM_CAPTION_CLASS);
    var itemText = isPlainObject(itemData) ? text : String(itemData);
    return $itemContainer.text(itemText);
  }
  _getItemExtraPropNames() {
    return ["url", "linkAttr"];
  }
  _getPopoutContainer(itemData) {
    var items = itemData.items;
    var $popOutContainer;
    if (items && items.length) {
      var $popOutImage = renderer_default("<div>").addClass(DX_MENU_ITEM_POPOUT_CLASS);
      $popOutContainer = renderer_default("<span>").addClass(DX_MENU_ITEM_POPOUT_CONTAINER_CLASS).append($popOutImage);
    }
    return $popOutContainer;
  }
  _getDataAdapterOptions() {
    return {
      rootValue: 0,
      multipleSelection: false,
      recursiveSelection: false,
      recursiveExpansion: false,
      searchValue: ""
    };
  }
  _selectByItem(selectedItem) {
    if (!selectedItem) {
      return;
    }
    var nodeToSelect = this._dataAdapter.getNodeByItem(selectedItem);
    this._dataAdapter.toggleSelection(nodeToSelect.internalFields.key, true);
  }
  _renderSelectedItem() {
    var selectedKeys = this._dataAdapter.getSelectedNodesKeys();
    var selectedKey = selectedKeys.length && selectedKeys[0];
    var selectedItem = this.option("selectedItem");
    if (!selectedKey) {
      this._selectByItem(selectedItem);
      return;
    }
    var node = this._dataAdapter.getNodeByKey(selectedKey);
    if (false === node.selectable) {
      return;
    }
    if (!selectedItem) {
      this.option("selectedItem", node.internalFields.item);
      return;
    }
    if (selectedItem !== node.internalFields.item) {
      this._dataAdapter.toggleSelection(selectedKey, false);
      this._selectByItem(selectedItem);
    }
  }
  _initActions() {
  }
  _initMarkup() {
    super._initMarkup();
    this.option("useInkRipple") && this._renderInkRipple();
  }
  _renderInkRipple() {
    this._inkRipple = render();
  }
  _toggleActiveState($element, value2, e) {
    super._toggleActiveState.apply(this, arguments);
    if (!this._inkRipple) {
      return;
    }
    var config3 = {
      element: $element,
      event: e
    };
    if (value2) {
      this._inkRipple.showWave(config3);
    } else {
      this._inkRipple.hideWave(config3);
    }
  }
  _getShowSubmenuMode() {
    var optionValue = this.option("showSubmenuMode");
    optionValue = isObject(optionValue) ? optionValue.name : optionValue;
    return this._isDesktopDevice() ? optionValue : "onClick";
  }
  _initSelectedItems() {
  }
  _isDesktopDevice() {
    return "desktop" === devices_default.real().deviceType;
  }
  _initEditStrategy() {
    var Strategy = ui_menu_base_edit_strategy_default;
    this._editStrategy = new Strategy(this);
  }
  _addCustomCssClass($element) {
    $element.addClass(this.option("cssClass"));
  }
  _itemWrapperSelector() {
    return ".".concat(DX_MENU_ITEM_WRAPPER_CLASS);
  }
  _hoverStartHandler(e) {
    var $itemElement = this._getItemElementByEventArgs(e);
    if (!$itemElement || this._isItemDisabled($itemElement)) {
      return;
    }
    e.stopPropagation();
    if ("onHover" === this._getShowSubmenuMode()) {
      clearTimeout(this._showSubmenusTimeout);
      this._showSubmenusTimeout = setTimeout(this._showSubmenu.bind(this, $itemElement), this._getSubmenuDelay("show"));
    }
  }
  _getAvailableItems($itemElements) {
    return super._getAvailableItems($itemElements).filter(function() {
      return "hidden" !== renderer_default(this).css("visibility");
    });
  }
  _isItemDisabled($item) {
    return this._disabledGetter($item.data(this._itemDataKey()));
  }
  _showSubmenu($itemElement) {
    this._addExpandedClass($itemElement);
  }
  _addExpandedClass(itemElement) {
    renderer_default(itemElement).addClass(DX_MENU_ITEM_EXPANDED_CLASS);
  }
  _getSubmenuDelay(action) {
    var {
      delay
    } = this.option("showSubmenuMode");
    if (!isDefined(delay)) {
      return DEFAULT_DELAY[action];
    }
    return isObject(delay) ? delay[action] : delay;
  }
  _getItemElementByEventArgs(eventArgs) {
    var $target = renderer_default(eventArgs.target);
    if ($target.hasClass(this._itemClass()) || $target.get(0) === eventArgs.currentTarget) {
      return $target;
    }
    while (!$target.hasClass(this._itemClass())) {
      $target = $target.parent();
      if ($target.hasClass("dx-submenu")) {
        return null;
      }
    }
    return $target;
  }
  _hoverEndHandler() {
    clearTimeout(this._showSubmenusTimeout);
  }
  _hasSubmenu(node) {
    return node && node.internalFields.childrenKeys.length;
  }
  _renderContentImpl() {
    this._renderItems(this._dataAdapter.getRootNodes());
  }
  _renderItems(nodes, submenuContainer) {
    if (nodes.length) {
      this.hasIcons = false;
      var $nodeContainer = this._renderContainer(this.$element(), submenuContainer);
      var firstVisibleIndex = -1;
      var nextGroupFirstIndex = -1;
      each(nodes, (index2, node) => {
        var isVisibleNode = false !== node.visible;
        if (isVisibleNode && firstVisibleIndex < 0) {
          firstVisibleIndex = index2;
        }
        var isBeginGroup = firstVisibleIndex < index2 && (node.beginGroup || index2 === nextGroupFirstIndex);
        if (isBeginGroup) {
          nextGroupFirstIndex = isVisibleNode ? index2 : index2 + 1;
        }
        if (index2 === nextGroupFirstIndex && firstVisibleIndex < index2) {
          this._renderSeparator($nodeContainer);
        }
        this._renderItem(index2, node, $nodeContainer);
      });
      if (!this.hasIcons) {
        $nodeContainer.addClass(DX_MENU_NO_ICONS_CLASS);
      }
    }
  }
  _renderContainer($wrapper) {
    var $container = renderer_default("<ul>");
    this.setAria("role", "none", $container);
    return $container.appendTo($wrapper).addClass(DX_MENU_ITEMS_CONTAINER_CLASS);
  }
  _createDOMElement($nodeContainer) {
    var $node = renderer_default("<li>");
    this.setAria("role", "none", $node);
    return $node.appendTo($nodeContainer).addClass(DX_MENU_ITEM_WRAPPER_CLASS);
  }
  _renderItem(index2, node, $nodeContainer, $nodeElement) {
    var items = this.option("items");
    var $node = $nodeElement || this._createDOMElement($nodeContainer);
    if (items[index2 + 1] && items[index2 + 1].beginGroup) {
      $node.addClass(DX_MENU_ITEM_LAST_GROUP_ITEM);
    }
    var $itemFrame = super._renderItem(index2, node.internalFields.item, $node);
    if (node.internalFields.item === this.option("selectedItem")) {
      $itemFrame.addClass(DX_MENU_SELECTED_ITEM_CLASS);
    }
    $itemFrame.attr("tabIndex", -1);
    if (this._hasSubmenu(node)) {
      this.setAria("haspopup", "true", $itemFrame);
    }
  }
  _renderItemFrame(index2, itemData, $itemContainer) {
    var $itemFrame = $itemContainer.children(".".concat(ITEM_CLASS2));
    return $itemFrame.length ? $itemFrame : super._renderItemFrame.apply(this, arguments);
  }
  _refreshItem($item, item) {
    var node = this._dataAdapter.getNodeByItem(item);
    var index2 = $item.data(this._itemIndexKey());
    var $nodeContainer = $item.closest("ul");
    var $nodeElement = $item.closest("li");
    this._renderItem(index2, node, $nodeContainer, $nodeElement);
  }
  _addContentClasses(itemData, $itemFrame) {
    var hasText = itemData.text ? !!itemData.text.length : false;
    var hasIcon = !!itemData.icon;
    var hasSubmenu = itemData.items ? !!itemData.items.length : false;
    $itemFrame.toggleClass(DX_ITEM_HAS_TEXT, hasText);
    $itemFrame.toggleClass(DX_ITEM_HAS_ICON, hasIcon);
    if (!this.hasIcons) {
      this.hasIcons = hasIcon;
    }
    $itemFrame.toggleClass(DX_ITEM_HAS_SUBMENU, hasSubmenu);
  }
  _getItemContent($itemFrame) {
    var $itemContent = super._getItemContent($itemFrame);
    if (!$itemContent.length) {
      $itemContent = $itemFrame.children(".".concat(DX_ITEM_CONTENT_CLASS));
    }
    return $itemContent;
  }
  _postprocessRenderItem(args) {
    var $itemElement = renderer_default(args.itemElement);
    var selectedIndex = this._dataAdapter.getSelectedNodesKeys();
    if (!selectedIndex.length || !this._selectedGetter(args.itemData) || !this._isItemSelectable(args.itemData)) {
      this._setAriaSelectionAttribute($itemElement, "false");
      return;
    }
    var node = this._dataAdapter.getNodeByItem(args.itemData);
    if (node.internalFields.key === selectedIndex[0]) {
      $itemElement.addClass(this._selectedItemClass());
      this._setAriaSelectionAttribute($itemElement, "true");
    } else {
      this._setAriaSelectionAttribute($itemElement, "false");
    }
  }
  _isItemSelectable(item) {
    return false !== item.selectable;
  }
  _renderSeparator($itemsContainer) {
    renderer_default("<li>").appendTo($itemsContainer).addClass(DX_MENU_SEPARATOR_CLASS);
  }
  _itemClickHandler(e) {
    if (e._skipHandling) {
      return;
    }
    var itemClickActionHandler = this._createAction(this._updateSubmenuVisibilityOnClick.bind(this));
    this._itemDXEventHandler(e, "onItemClick", {}, {
      beforeExecute: this._itemClick,
      afterExecute: itemClickActionHandler.bind(this)
    });
    e._skipHandling = true;
  }
  _itemClick(actionArgs) {
    var {
      event,
      itemData
    } = actionArgs.args[0];
    var $itemElement = this._getItemElementByEventArgs(event);
    var link = $itemElement.find(".".concat(ITEM_URL_CLASS2)).get(0);
    if (itemData.url && link) {
      link.click();
    }
  }
  _updateSubmenuVisibilityOnClick(actionArgs) {
    this._updateSelectedItemOnClick(actionArgs);
    if ("onClick" === this._getShowSubmenuMode()) {
      this._addExpandedClass(actionArgs.args[0].itemElement);
    }
  }
  _updateSelectedItemOnClick(actionArgs) {
    var args = actionArgs.args ? actionArgs.args[0] : actionArgs;
    if (!this._isItemSelectAllowed(args.itemData)) {
      return;
    }
    var selectedItemKey = this._dataAdapter.getSelectedNodesKeys();
    var selectedNode = selectedItemKey.length && this._dataAdapter.getNodeByKey(selectedItemKey[0]);
    if (selectedNode) {
      this._toggleItemSelection(selectedNode, false);
    }
    if (!selectedNode || selectedNode.internalFields.item !== args.itemData) {
      this.selectItem(args.itemData);
    } else {
      this._fireSelectionChangeEvent(null, this.option("selectedItem"));
      this._setOptionWithoutOptionChange("selectedItem", null);
    }
  }
  _isItemSelectAllowed(item) {
    var isSelectByClickEnabled = this._isSelectionEnabled() && this.option("selectByClick");
    return !this._isContainerEmpty() && isSelectByClickEnabled && this._isItemSelectable(item) && !this._itemsGetter(item);
  }
  _isContainerEmpty() {
    return this._itemContainer().is(":empty");
  }
  _syncSelectionOptions() {
    return asyncNoop();
  }
  _optionChanged(args) {
    switch (args.name) {
      case "showSubmenuMode":
        break;
      case "selectedItem":
        var node = this._dataAdapter.getNodeByItem(args.value);
        var selectedKey = this._dataAdapter.getSelectedNodesKeys()[0];
        if (node && node.internalFields.key !== selectedKey) {
          if (false === node.selectable) {
            break;
          }
          if (selectedKey) {
            this._toggleItemSelection(this._dataAdapter.getNodeByKey(selectedKey), false);
          }
          this._toggleItemSelection(node, true);
          this._updateSelectedItems();
        }
        break;
      case "cssClass":
      case "position":
      case "selectByClick":
      case "animation":
      case "useInkRipple":
        this._invalidate();
        break;
      default:
        super._optionChanged(args);
    }
  }
  _toggleItemSelection(node, value2) {
    var itemElement = this._getElementByItem(node.internalFields.item);
    itemElement && renderer_default(itemElement).toggleClass(DX_MENU_SELECTED_ITEM_CLASS);
    this._dataAdapter.toggleSelection(node.internalFields.key, value2);
  }
  _getElementByItem(itemData) {
    var result2;
    each(this._itemElements(), (_, itemElement) => {
      if (renderer_default(itemElement).data(this._itemDataKey()) !== itemData) {
        return true;
      }
      result2 = itemElement;
      return false;
    });
    return result2;
  }
  _updateSelectedItems(oldSelection, newSelection) {
    if (oldSelection || newSelection) {
      this._fireSelectionChangeEvent(newSelection, oldSelection);
    }
  }
  _fireSelectionChangeEvent(addedSelection, removedSelection) {
    this._createActionByOption("onSelectionChanged", {
      excludeValidators: ["disabled", "readOnly"]
    })({
      addedItems: [addedSelection],
      removedItems: [removedSelection]
    });
  }
  selectItem(itemElement) {
    var itemData = itemElement.nodeType ? this._getItemData(itemElement) : itemElement;
    var selectedKey = this._dataAdapter.getSelectedNodesKeys()[0];
    var selectedItem = this.option("selectedItem");
    var node = this._dataAdapter.getNodeByItem(itemData);
    if (node.internalFields.key !== selectedKey) {
      if (selectedKey) {
        this._toggleItemSelection(this._dataAdapter.getNodeByKey(selectedKey), false);
      }
      this._toggleItemSelection(node, true);
      this._updateSelectedItems(selectedItem, itemData);
      this._setOptionWithoutOptionChange("selectedItem", itemData);
    }
  }
  unselectItem(itemElement) {
    var itemData = itemElement.nodeType ? this._getItemData(itemElement) : itemElement;
    var node = this._dataAdapter.getNodeByItem(itemData);
    var selectedItem = this.option("selectedItem");
    if (node.internalFields.selected) {
      this._toggleItemSelection(node, false);
      this._updateSelectedItems(selectedItem, null);
      this._setOptionWithoutOptionChange("selectedItem", null);
    }
  }
};
MenuBase.ItemClass = item_default;
var ui_menu_base_default = MenuBase;

// node_modules/devextreme/esm/ui/context_menu/ui.context_menu.js
var DX_MENU_CLASS2 = "dx-menu";
var DX_MENU_ITEM_CLASS = DX_MENU_CLASS2 + "-item";
var DX_MENU_ITEM_EXPANDED_CLASS2 = DX_MENU_ITEM_CLASS + "-expanded";
var DX_MENU_PHONE_CLASS = "dx-menu-phone-overlay";
var DX_MENU_ITEMS_CONTAINER_CLASS2 = DX_MENU_CLASS2 + "-items-container";
var DX_MENU_ITEM_WRAPPER_CLASS2 = DX_MENU_ITEM_CLASS + "-wrapper";
var DX_SUBMENU_CLASS = "dx-submenu";
var DX_CONTEXT_MENU_CLASS = "dx-context-menu";
var DX_HAS_CONTEXT_MENU_CLASS = "dx-has-context-menu";
var DX_STATE_DISABLED_CLASS = "dx-state-disabled";
var DX_STATE_FOCUSED_CLASS = "dx-state-focused";
var DX_STATE_HOVER_CLASS = "dx-state-hover";
var OVERLAY_CONTENT_CLASS2 = "dx-overlay-content";
var FOCUS_UP2 = "up";
var FOCUS_DOWN2 = "down";
var FOCUS_LEFT2 = "left";
var FOCUS_RIGHT2 = "right";
var FOCUS_FIRST2 = "first";
var FOCUS_LAST2 = "last";
var ACTIONS = ["onShowing", "onShown", "onSubmenuCreated", "onHiding", "onHidden", "onPositioning", "onLeftFirstItem", "onLeftLastItem", "onCloseRootSubmenu", "onExpandLastSubmenu"];
var LOCAL_SUBMENU_DIRECTIONS = [FOCUS_UP2, FOCUS_DOWN2, FOCUS_FIRST2, FOCUS_LAST2];
var DEFAULT_SHOW_EVENT = "dxcontextmenu";
var window18 = getWindow();
var ContextMenu2 = class extends ui_menu_base_default {
  getShowEvent(showEventOption) {
    var result2 = null;
    if (isObject(showEventOption)) {
      if (null !== showEventOption.name) {
        result2 = showEventOption.name || DEFAULT_SHOW_EVENT;
      }
    } else {
      result2 = showEventOption;
    }
    return result2;
  }
  getShowDelay(showEventOption) {
    return isObject(showEventOption) && showEventOption.delay;
  }
  _getDefaultOptions() {
    return extend(super._getDefaultOptions(), {
      showEvent: DEFAULT_SHOW_EVENT,
      hideOnOutsideClick: true,
      position: {
        at: "top left",
        my: "top left"
      },
      onShowing: null,
      onShown: null,
      onSubmenuCreated: null,
      onHiding: null,
      onHidden: null,
      onPositioning: null,
      submenuDirection: "auto",
      visible: false,
      target: void 0,
      onLeftFirstItem: null,
      onLeftLastItem: null,
      onCloseRootSubmenu: null,
      onExpandLastSubmenu: null
    });
  }
  _defaultOptionsRules() {
    return super._defaultOptionsRules().concat([{
      device: () => !hasWindow(),
      options: {
        animation: null
      }
    }]);
  }
  _setDeprecatedOptions() {
    super._setDeprecatedOptions();
    extend(this._deprecatedOptions, {
      closeOnOutsideClick: {
        since: "22.2",
        alias: "hideOnOutsideClick"
      }
    });
  }
  _initActions() {
    this._actions = {};
    each(ACTIONS, (index2, action) => {
      this._actions[action] = this._createActionByOption(action) || noop2;
    });
  }
  _setOptionsByReference() {
    super._setOptionsByReference();
    extend(this._optionsByReference, {
      animation: true,
      selectedItem: true
    });
  }
  _focusInHandler() {
  }
  _itemContainer() {
    return this._overlay ? this._overlay.$content() : renderer_default();
  }
  _eventBindingTarget() {
    return this._itemContainer();
  }
  itemsContainer() {
    return this._overlay ? this._overlay.$content() : void 0;
  }
  _supportedKeys() {
    return extend(super._supportedKeys(), {
      space: () => {
        var $item = renderer_default(this.option("focusedElement"));
        this.hide();
        if (!$item.length || !this._isSelectionEnabled()) {
          return;
        }
        this.selectItem($item[0]);
      },
      escape: this.hide
    });
  }
  _getActiveItem() {
    var $availableItems = this._getAvailableItems();
    var $focusedItem = $availableItems.filter(".".concat(DX_STATE_FOCUSED_CLASS));
    var $hoveredItem = $availableItems.filter(".".concat(DX_STATE_HOVER_CLASS));
    var $hoveredItemContainer = $hoveredItem.closest(".".concat(DX_MENU_ITEMS_CONTAINER_CLASS2));
    if ($hoveredItemContainer.find(".".concat(DX_MENU_ITEM_CLASS)).index($focusedItem) >= 0) {
      return $focusedItem;
    }
    if ($hoveredItem.length) {
      return $hoveredItem;
    }
    return super._getActiveItem();
  }
  _moveFocus(location) {
    var $items = this._getItemsByLocation(location);
    var $oldTarget = this._getActiveItem(true);
    var $hoveredItem = this.itemsContainer().find(".".concat(DX_STATE_HOVER_CLASS));
    var $focusedItem = renderer_default(this.option("focusedElement"));
    var $activeItemHighlighted = !!($focusedItem.length || $hoveredItem.length);
    var $newTarget;
    switch (location) {
      case FOCUS_UP2:
        $newTarget = $activeItemHighlighted ? this._prevItem($items) : $oldTarget;
        this._setFocusedElement($newTarget);
        if ($oldTarget.is($items.first())) {
          this._actions.onLeftFirstItem($oldTarget);
        }
        break;
      case FOCUS_DOWN2:
        $newTarget = $activeItemHighlighted ? this._nextItem($items) : $oldTarget;
        this._setFocusedElement($newTarget);
        if ($oldTarget.is($items.last())) {
          this._actions.onLeftLastItem($oldTarget);
        }
        break;
      case FOCUS_RIGHT2:
        $newTarget = this.option("rtlEnabled") ? this._hideSubmenuHandler() : this._expandSubmenuHandler($items, location);
        this._setFocusedElement($newTarget);
        break;
      case FOCUS_LEFT2:
        $newTarget = this.option("rtlEnabled") ? this._expandSubmenuHandler($items, location) : this._hideSubmenuHandler();
        this._setFocusedElement($newTarget);
        break;
      case FOCUS_FIRST2:
        $newTarget = $items.first();
        this._setFocusedElement($newTarget);
        break;
      case FOCUS_LAST2:
        $newTarget = $items.last();
        this._setFocusedElement($newTarget);
        break;
      default:
        return super._moveFocus(location);
    }
  }
  _setFocusedElement($element) {
    if ($element && 0 !== $element.length) {
      this.option("focusedElement", getPublicElement($element));
    }
  }
  _getItemsByLocation(location) {
    var $activeItem = this._getActiveItem(true);
    var $items;
    if (LOCAL_SUBMENU_DIRECTIONS.includes(location)) {
      $items = $activeItem.closest(".".concat(DX_MENU_ITEMS_CONTAINER_CLASS2)).children().children();
    }
    $items = this._getAvailableItems($items);
    return $items;
  }
  _getAriaTarget() {
    return this.$element();
  }
  _refreshActiveDescendant() {
    if (isDefined(this._overlay)) {
      var $target = this._overlay.$content();
      super._refreshActiveDescendant($target);
    }
  }
  _hideSubmenuHandler() {
    var $curItem = this._getActiveItem(true);
    var $parentItem = $curItem.parents(".".concat(DX_MENU_ITEM_EXPANDED_CLASS2)).first();
    if ($parentItem.length) {
      this._hideSubmenusOnSameLevel($parentItem);
      this._hideSubmenu($curItem.closest(".".concat(DX_SUBMENU_CLASS)));
      return $parentItem;
    }
    this._actions.onCloseRootSubmenu($curItem);
    return $curItem;
  }
  _expandSubmenuHandler($items, location) {
    var $curItem = this._getActiveItem(true);
    var itemData = this._getItemData($curItem);
    var node = this._dataAdapter.getNodeByItem(itemData);
    var isItemHasSubmenu = this._hasSubmenu(node);
    var $submenu = $curItem.children(".".concat(DX_SUBMENU_CLASS));
    if (isItemHasSubmenu && !$curItem.hasClass(DX_STATE_DISABLED_CLASS)) {
      if (!$submenu.length || "hidden" === $submenu.css("visibility")) {
        this._showSubmenu($curItem);
      }
      return this._nextItem(this._getItemsByLocation(location));
    }
    this._actions.onExpandLastSubmenu($curItem);
    return;
  }
  _clean() {
    if (this._overlay) {
      this._overlay.$element().remove();
      this._overlay = null;
    }
    this._detachShowContextMenuEvents(this._getTarget());
    super._clean();
  }
  _initMarkup() {
    this.$element().addClass(DX_HAS_CONTEXT_MENU_CLASS);
    super._initMarkup();
  }
  _render() {
    super._render();
    this._renderVisibility(this.option("visible"));
    this._addWidgetClass();
  }
  _renderContentImpl() {
    this._detachShowContextMenuEvents(this._getTarget());
    this._attachShowContextMenuEvents();
  }
  _attachKeyboardEvents() {
    !this._keyboardListenerId && this._focusTarget().length && super._attachKeyboardEvents();
  }
  _renderContextMenuOverlay() {
    if (this._overlay) {
      return;
    }
    var overlayOptions = this._getOverlayOptions();
    this._overlay = this._createComponent(renderer_default("<div>").appendTo(this._$element), ui_overlay_default, overlayOptions);
    var $overlayContent = this._overlay.$content();
    $overlayContent.addClass(DX_CONTEXT_MENU_CLASS);
    this._addCustomCssClass($overlayContent);
    this._addPlatformDependentClass($overlayContent);
    this._attachContextMenuEvent();
  }
  preventShowingDefaultContextMenuAboveOverlay() {
    var $itemContainer = this._itemContainer();
    var eventName = addNamespace2(name, this.NAME);
    events_engine_default.off($itemContainer, eventName, ".".concat(DX_SUBMENU_CLASS));
    events_engine_default.on($itemContainer, eventName, ".".concat(DX_SUBMENU_CLASS), ((e) => {
      e.stopPropagation();
      e.preventDefault();
      events_engine_default.off($itemContainer, eventName, ".".concat(DX_SUBMENU_CLASS));
    }).bind(this));
  }
  _itemContextMenuHandler(e) {
    super._itemContextMenuHandler(e);
    e.stopPropagation();
  }
  _addPlatformDependentClass($element) {
    if (devices_default.current().phone) {
      $element.addClass(DX_MENU_PHONE_CLASS);
    }
  }
  _detachShowContextMenuEvents(target) {
    var showEvent = this.getShowEvent(this.option("showEvent"));
    if (!showEvent) {
      return;
    }
    var eventName = addNamespace2(showEvent, this.NAME);
    if (this._showContextMenuEventHandler) {
      events_engine_default.off(dom_adapter_default.getDocument(), eventName, target, this._showContextMenuEventHandler);
    } else {
      events_engine_default.off(renderer_default(target), eventName);
    }
  }
  _attachShowContextMenuEvents() {
    var target = this._getTarget();
    var showEvent = this.getShowEvent(this.option("showEvent"));
    if (!showEvent) {
      return;
    }
    var eventName = addNamespace2(showEvent, this.NAME);
    var contextMenuAction = this._createAction((e) => {
      var delay = this.getShowDelay(this.option("showEvent"));
      if (delay) {
        setTimeout(() => this._show(e.event), delay);
      } else {
        this._show(e.event);
      }
    }, {
      validatingTargetName: "target"
    });
    var handler = (e) => contextMenuAction({
      event: e,
      target: renderer_default(e.currentTarget)
    });
    contextMenuAction = this._createAction(contextMenuAction);
    if (isRenderer(target) || target.nodeType || isWindow(target)) {
      this._showContextMenuEventHandler = void 0;
      events_engine_default.on(target, eventName, handler);
    } else {
      this._showContextMenuEventHandler = handler;
      events_engine_default.on(dom_adapter_default.getDocument(), eventName, target, this._showContextMenuEventHandler);
    }
  }
  _hoverEndHandler(e) {
    super._hoverEndHandler(e);
    e.stopPropagation();
  }
  _renderDimensions() {
  }
  _renderContainer($wrapper, submenuContainer) {
    var $holder = submenuContainer || this._itemContainer();
    $wrapper = renderer_default("<div>");
    $wrapper.appendTo($holder).addClass(DX_SUBMENU_CLASS).css("visibility", submenuContainer ? "hidden" : "visible");
    if (!$wrapper.parent().hasClass(OVERLAY_CONTENT_CLASS2)) {
      this._addCustomCssClass($wrapper);
    }
    var $itemsContainer = super._renderContainer($wrapper);
    if (submenuContainer) {
      return $itemsContainer;
    }
    if (this.option("width")) {
      return $itemsContainer.css("minWidth", this.option("width"));
    }
    if (this.option("height")) {
      return $itemsContainer.css("minHeight", this.option("height"));
    }
    return $itemsContainer;
  }
  _renderSubmenuItems(node, $itemFrame) {
    this._renderItems(this._getChildNodes(node), $itemFrame);
    this._actions.onSubmenuCreated({
      itemElement: getPublicElement($itemFrame),
      itemData: node.internalFields.item,
      submenuElement: getPublicElement($itemFrame.children(".".concat(DX_SUBMENU_CLASS)))
    });
  }
  _getOverlayOptions() {
    var position3 = this.option("position");
    var overlayOptions = {
      focusStateEnabled: this.option("focusStateEnabled"),
      animation: this.option("animation"),
      innerOverlay: true,
      hideOnOutsideClick: (e) => this._hideOnOutsideClickHandler(e),
      propagateOutsideClick: true,
      hideOnParentScroll: true,
      deferRendering: false,
      position: {
        at: position3.at,
        my: position3.my,
        of: this._getTarget(),
        collision: "flipfit"
      },
      shading: false,
      showTitle: false,
      height: "auto",
      width: "auto",
      onShown: this._overlayShownActionHandler.bind(this),
      onHiding: this._overlayHidingActionHandler.bind(this),
      onHidden: this._overlayHiddenActionHandler.bind(this),
      visualContainer: window18
    };
    return overlayOptions;
  }
  _overlayShownActionHandler(arg) {
    this._actions.onShown(arg);
  }
  _overlayHidingActionHandler(arg) {
    this._actions.onHiding(arg);
    if (!arg.cancel) {
      this._hideAllShownSubmenus();
      this._setOptionWithoutOptionChange("visible", false);
    }
  }
  _overlayHiddenActionHandler(arg) {
    this._actions.onHidden(arg);
  }
  _shouldHideOnOutsideClick(e) {
    var {
      closeOnOutsideClick,
      hideOnOutsideClick
    } = this.option();
    if (isFunction(hideOnOutsideClick)) {
      return hideOnOutsideClick(e);
    } else if (isFunction(closeOnOutsideClick)) {
      return closeOnOutsideClick(e);
    } else {
      return hideOnOutsideClick || closeOnOutsideClick;
    }
  }
  _hideOnOutsideClickHandler(e) {
    if (!this._shouldHideOnOutsideClick(e)) {
      return false;
    }
    if (dom_adapter_default.isDocument(e.target)) {
      return true;
    }
    var $activeItemContainer = this._getActiveItemsContainer(e.target);
    var $itemContainers = this._getItemsContainers();
    var $clickedItem = this._searchActiveItem(e.target);
    var $rootItem = this.$element().parents(".".concat(DX_MENU_ITEM_CLASS));
    var isRootItemClicked = $clickedItem[0] === $rootItem[0] && $clickedItem.length && $rootItem.length;
    var isInnerOverlayClicked = this._isIncludeOverlay($activeItemContainer, $itemContainers) && $clickedItem.length;
    if (isInnerOverlayClicked || isRootItemClicked) {
      if ("onClick" === this._getShowSubmenuMode()) {
        this._hideAllShownChildSubmenus($clickedItem);
      }
      return false;
    }
    return true;
  }
  _getActiveItemsContainer(target) {
    return renderer_default(target).closest(".".concat(DX_MENU_ITEMS_CONTAINER_CLASS2));
  }
  _getItemsContainers() {
    return this._overlay.$content().find(".".concat(DX_MENU_ITEMS_CONTAINER_CLASS2));
  }
  _searchActiveItem(target) {
    return renderer_default(target).closest(".".concat(DX_MENU_ITEM_CLASS)).eq(0);
  }
  _isIncludeOverlay($activeOverlay, $allOverlays) {
    var isSame = false;
    each($allOverlays, (index2, $overlay) => {
      if ($activeOverlay.is($overlay) && !isSame) {
        isSame = true;
      }
    });
    return isSame;
  }
  _hideAllShownChildSubmenus($clickedItem) {
    var $submenuElements = $clickedItem.find(".".concat(DX_SUBMENU_CLASS));
    var shownSubmenus = extend([], this._shownSubmenus);
    if ($submenuElements.length > 0) {
      each(shownSubmenus, (index2, $submenu) => {
        var $context = this._searchActiveItem($submenu.context).parent();
        if ($context.parent().is($clickedItem.parent().parent()) && !$context.is($clickedItem.parent())) {
          this._hideSubmenu($submenu);
        }
      });
    }
  }
  _showSubmenu($item) {
    var node = this._dataAdapter.getNodeByItem(this._getItemData($item));
    this._hideSubmenusOnSameLevel($item);
    if (!this._hasSubmenu(node)) {
      return;
    }
    var $submenu = $item.children(".".concat(DX_SUBMENU_CLASS));
    var isSubmenuRendered = $submenu.length;
    super._showSubmenu($item);
    if (!isSubmenuRendered) {
      this._renderSubmenuItems(node, $item);
    }
    if (!this._isSubmenuVisible($submenu)) {
      this._drawSubmenu($item);
    }
  }
  _hideSubmenusOnSameLevel($item) {
    var $expandedItems = $item.parent(".".concat(DX_MENU_ITEM_WRAPPER_CLASS2)).siblings().find(".".concat(DX_MENU_ITEM_EXPANDED_CLASS2));
    if ($expandedItems.length) {
      $expandedItems.removeClass(DX_MENU_ITEM_EXPANDED_CLASS2);
      this._hideSubmenu($expandedItems.find(".".concat(DX_SUBMENU_CLASS)));
    }
  }
  _hideSubmenuGroup($submenu) {
    if (this._isSubmenuVisible($submenu)) {
      this._hideSubmenuCore($submenu);
    }
  }
  _isSubmenuVisible($submenu) {
    return "visible" === $submenu.css("visibility");
  }
  _drawSubmenu($itemElement) {
    var animation3 = this.option("animation") ? this.option("animation").show : {};
    var $submenu = $itemElement.children(".".concat(DX_SUBMENU_CLASS));
    var submenuPosition = this._getSubmenuPosition($itemElement);
    if (this._overlay && this._overlay.option("visible")) {
      if (!isDefined(this._shownSubmenus)) {
        this._shownSubmenus = [];
      }
      if (!this._shownSubmenus.includes($submenu)) {
        this._shownSubmenus.push($submenu);
      }
      if (animation3) {
        fx_default.stop($submenu);
      }
      position_default.setup($submenu, submenuPosition);
      if (animation3) {
        if (isPlainObject(animation3.to)) {
          animation3.to.position = submenuPosition;
        }
        this._animate($submenu, animation3);
      }
      $submenu.css("visibility", "visible");
    }
  }
  _animate($container, options2) {
    fx_default.animate($container, options2);
  }
  _getSubmenuPosition($rootItem) {
    var submenuDirection = this.option("submenuDirection").toLowerCase();
    var $rootItemWrapper = $rootItem.parent(".".concat(DX_MENU_ITEM_WRAPPER_CLASS2));
    var position3 = {
      collision: "flip",
      of: $rootItemWrapper,
      offset: {
        h: 0,
        v: -1
      }
    };
    switch (submenuDirection) {
      case "left":
        position3.at = "left top";
        position3.my = "right top";
        break;
      case "right":
        position3.at = "right top";
        position3.my = "left top";
        break;
      default:
        if (this.option("rtlEnabled")) {
          position3.at = "left top";
          position3.my = "right top";
        } else {
          position3.at = "right top";
          position3.my = "left top";
        }
    }
    return position3;
  }
  _updateSubmenuVisibilityOnClick(actionArgs) {
    if (!actionArgs.args.length) {
      return;
    }
    var itemData = actionArgs.args[0].itemData;
    var node = this._dataAdapter.getNodeByItem(itemData);
    if (!node) {
      return;
    }
    var $itemElement = renderer_default(actionArgs.args[0].itemElement);
    var $submenu = $itemElement.find(".".concat(DX_SUBMENU_CLASS));
    var shouldRenderSubmenu = this._hasSubmenu(node) && !$submenu.length;
    if (shouldRenderSubmenu) {
      this._renderSubmenuItems(node, $itemElement);
      $submenu = $itemElement.find(".".concat(DX_SUBMENU_CLASS));
    }
    if ($itemElement.context === $submenu.context && "visible" === $submenu.css("visibility")) {
      return;
    }
    this._updateSelectedItemOnClick(actionArgs);
    var notCloseMenuOnItemClick = itemData && false === itemData.closeMenuOnClick;
    if (!itemData || itemData.disabled || notCloseMenuOnItemClick) {
      return;
    }
    if (0 === $submenu.length) {
      var $prevSubmenu = renderer_default($itemElement.parents(".".concat(DX_SUBMENU_CLASS))[0]);
      this._hideSubmenu($prevSubmenu);
      if (!actionArgs.canceled && this._overlay && this._overlay.option("visible")) {
        this.option("visible", false);
      }
    } else {
      if (this._shownSubmenus && this._shownSubmenus.length > 0) {
        if (this._shownSubmenus[0].is($submenu)) {
          this._hideSubmenu($submenu);
        }
      }
      this._showSubmenu($itemElement);
    }
  }
  _hideSubmenu($curSubmenu) {
    var shownSubmenus = extend([], this._shownSubmenus);
    each(shownSubmenus, (index2, $submenu) => {
      if ($curSubmenu.is($submenu) || contains2($curSubmenu[0], $submenu[0])) {
        $submenu.parent().removeClass(DX_MENU_ITEM_EXPANDED_CLASS2);
        this._hideSubmenuCore($submenu);
      }
    });
  }
  _hideSubmenuCore($submenu) {
    var index2 = this._shownSubmenus.indexOf($submenu);
    var animation3 = this.option("animation") ? this.option("animation").hide : null;
    if (index2 >= 0) {
      this._shownSubmenus.splice(index2, 1);
    }
    this._stopAnimate($submenu);
    animation3 && this._animate($submenu, animation3);
    $submenu.css("visibility", "hidden");
  }
  _stopAnimate($container) {
    fx_default.stop($container, true);
  }
  _hideAllShownSubmenus() {
    var shownSubmenus = extend([], this._shownSubmenus);
    var $expandedItems = this._overlay.$content().find(".".concat(DX_MENU_ITEM_EXPANDED_CLASS2));
    $expandedItems.removeClass(DX_MENU_ITEM_EXPANDED_CLASS2);
    each(shownSubmenus, (_, $submenu) => {
      this._hideSubmenu($submenu);
    });
  }
  _visibilityChanged(visible2) {
    if (visible2) {
      this._renderContentImpl();
    }
  }
  _optionChanged(args) {
    if (ACTIONS.includes(args.name)) {
      this._initActions();
      return;
    }
    switch (args.name) {
      case "visible":
        this._renderVisibility(args.value);
        break;
      case "showEvent":
      case "position":
      case "submenuDirection":
        this._invalidate();
        break;
      case "target":
        args.previousValue && this._detachShowContextMenuEvents(args.previousValue);
        this._invalidate();
        break;
      case "closeOnOutsideClick":
      case "hideOnOutsideClick":
        break;
      default:
        super._optionChanged(args);
    }
  }
  _renderVisibility(showing) {
    return showing ? this._show() : this._hide();
  }
  _toggleVisibility() {
  }
  _show(event) {
    var args = {
      jQEvent: event
    };
    var promise = new Deferred().reject().promise();
    this._actions.onShowing(args);
    if (args.cancel) {
      return promise;
    }
    var position3 = this._positionContextMenu(event);
    if (position3) {
      var _event$originalEvent;
      if (!this._overlay) {
        this._renderContextMenuOverlay();
        this._overlay.$content().addClass(this._widgetClass());
        this._renderFocusState();
        this._attachHoverEvents();
        this._attachClickEvent();
        this._renderItems(this._dataAdapter.getRootNodes());
      }
      this._setOptionWithoutOptionChange("visible", true);
      this._overlay.option("position", position3);
      promise = this._overlay.show();
      event && event.stopPropagation();
      this._setAriaAttributes();
      if ((null === event || void 0 === event ? void 0 : null === (_event$originalEvent = event.originalEvent) || void 0 === _event$originalEvent ? void 0 : _event$originalEvent.type) === hold_default.name) {
        this.preventShowingDefaultContextMenuAboveOverlay();
      }
    }
    return promise;
  }
  _setAriaAttributes() {
    this._overlayContentId = "dx-".concat(new guid_default());
    this.setAria("owns", this._overlayContentId);
    this.setAria({
      id: this._overlayContentId,
      role: "menu"
    }, this._overlay.$content());
  }
  _cleanAriaAttributes() {
    this._overlay && this.setAria("id", null, this._overlay.$content());
    this.setAria("owns", void 0);
  }
  _getTarget() {
    return this.option("target") || this.option("position").of || renderer_default(dom_adapter_default.getDocument());
  }
  _getContextMenuPosition() {
    return extend({}, this.option("position"), {
      of: this._getTarget()
    });
  }
  _positionContextMenu(jQEvent) {
    var position3 = this._getContextMenuPosition();
    var isInitialPosition = this._isInitialOptionValue("position");
    var positioningAction = this._createActionByOption("onPositioning");
    if (jQEvent && jQEvent.preventDefault && isInitialPosition) {
      position3.of = jQEvent;
    }
    var actionArgs = {
      position: position3,
      event: jQEvent
    };
    positioningAction(actionArgs);
    if (actionArgs.cancel) {
      position3 = null;
    } else if (actionArgs.event) {
      actionArgs.event.cancel = true;
      jQEvent.preventDefault();
    }
    return position3;
  }
  _refresh() {
    if (!hasWindow()) {
      super._refresh();
    } else if (this._overlay) {
      var lastPosition = this._overlay.option("position");
      super._refresh();
      this._overlay && this._overlay.option("position", lastPosition);
    } else {
      super._refresh();
    }
  }
  _hide() {
    var promise;
    if (this._overlay) {
      promise = this._overlay.hide();
      this._setOptionWithoutOptionChange("visible", false);
    }
    this._cleanAriaAttributes();
    this.option("focusedElement", null);
    return promise || new Deferred().reject().promise();
  }
  toggle(showing) {
    var visible2 = this.option("visible");
    showing = void 0 === showing ? !visible2 : showing;
    return this._renderVisibility(showing);
  }
  show() {
    return this.toggle(true);
  }
  hide() {
    return this.toggle(false);
  }
};
component_registrator_default("dxContextMenu", ContextMenu2);
var ui_context_menu_default = ContextMenu2;

// node_modules/devextreme/esm/ui/context_menu.js
var context_menu_default = ui_context_menu_default;

// node_modules/devextreme/esm/__internal/grids/grid_core/context_menu/m_context_menu.js
var CONTEXT_MENU = "dx-context-menu";
var viewName = {
  columnHeadersView: "header",
  rowsView: "content",
  footerView: "footer",
  headerPanel: "headerPanel"
};
var VIEW_NAMES = ["columnHeadersView", "rowsView", "footerView", "headerPanel"];
var ContextMenuController = m_modules_default.ViewController.inherit({
  init() {
    this.createAction("onContextMenuPreparing");
  },
  getContextMenuItems(dxEvent) {
    if (!dxEvent) {
      return false;
    }
    var that = this;
    var $targetElement = renderer_default(dxEvent.target);
    var $element;
    var $targetRowElement;
    var $targetCellElement;
    var menuItems;
    each(VIEW_NAMES, function() {
      var _a2, _b2;
      var view = that.getView(this);
      $element = view && view.element();
      if ($element && ($element.is($targetElement) || $element.find($targetElement).length)) {
        $targetCellElement = $targetElement.closest(".dx-row > td, .dx-row > tr");
        $targetRowElement = $targetCellElement.parent();
        var rowIndex = view.getRowIndex($targetRowElement);
        var columnIndex = $targetCellElement[0] && $targetCellElement[0].cellIndex;
        var rowOptions = $targetRowElement.data("options");
        var options2 = {
          event: dxEvent,
          targetElement: getPublicElement($targetElement),
          target: viewName[this],
          rowIndex,
          row: view._getRows()[rowIndex],
          columnIndex,
          column: null === (_b2 = null === (_a2 = null === rowOptions || void 0 === rowOptions ? void 0 : rowOptions.cells) || void 0 === _a2 ? void 0 : _a2[columnIndex]) || void 0 === _b2 ? void 0 : _b2.column
        };
        options2.items = view.getContextMenuItems && view.getContextMenuItems(options2);
        that.executeAction("onContextMenuPreparing", options2);
        that._contextMenuPrepared(options2);
        menuItems = options2.items;
        if (menuItems) {
          return false;
        }
      }
      return;
    });
    return menuItems;
  },
  _contextMenuPrepared: noop2
});
var ContextMenuView = m_modules_default.View.inherit({
  _renderCore() {
    var that = this;
    var $element = that.element().addClass(CONTEXT_MENU);
    this.setAria("role", "presentation", $element);
    this._createComponent($element, context_menu_default, {
      onPositioning(actionArgs) {
        var {
          event
        } = actionArgs;
        var contextMenuInstance = actionArgs.component;
        var items = that.getController("contextMenu").getContextMenuItems(event);
        if (items) {
          contextMenuInstance.option("items", items);
          event.stopPropagation();
        } else {
          actionArgs.cancel = true;
        }
      },
      onItemClick(params) {
        params.itemData.onItemClick && params.itemData.onItemClick(params);
      },
      cssClass: that.getWidgetContainerClass(),
      target: that.component.$element()
    });
  }
});
var contextMenuModule = {
  defaultOptions: () => ({
    onContextMenuPreparing: null
  }),
  controllers: {
    contextMenu: ContextMenuController
  },
  views: {
    contextMenuView: ContextMenuView
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/context_menu.js
m_core_default.registerModule("contextMenu", contextMenuModule);

// node_modules/devextreme/esm/__internal/grids/grid_core/error_handling/m_error_handling.js
var ERROR_ROW_CLASS2 = "dx-error-row";
var ERROR_MESSAGE_CLASS = "dx-error-message";
var ERROR_CLOSEBUTTON_CLASS = "dx-closebutton";
var ACTION_CLASS = "action";
var ErrorHandlingController = m_modules_default.ViewController.inherit({
  init() {
    this._columnHeadersView = this.getView("columnHeadersView");
    this._rowsView = this.getView("rowsView");
  },
  _createErrorRow(error, $tableElements) {
    var that = this;
    var $errorRow;
    var $closeButton;
    var $errorMessage = this._renderErrorMessage(error);
    if ($tableElements) {
      $errorRow = renderer_default("<tr>").attr("role", "row").addClass(ERROR_ROW_CLASS2);
      $closeButton = renderer_default("<div>").addClass(ERROR_CLOSEBUTTON_CLASS).addClass(that.addWidgetPrefix(ACTION_CLASS));
      events_engine_default.on($closeButton, CLICK_EVENT_NAME, that.createAction((args) => {
        var e = args.event;
        var $errorRow2;
        var errorRowIndex = renderer_default(e.currentTarget).closest(".".concat(ERROR_ROW_CLASS2)).index();
        e.stopPropagation();
        each($tableElements, (_, tableElement) => {
          $errorRow2 = renderer_default(tableElement).children("tbody").children("tr").eq(errorRowIndex);
          that.removeErrorRow($errorRow2);
        });
        that.getController("resizing") && that.getController("resizing").fireContentReadyAction();
      }));
      renderer_default("<td>").attr({
        colSpan: that.getController("columns").getVisibleColumns().length,
        role: "gridcell"
      }).prepend($closeButton).append($errorMessage).appendTo($errorRow);
      return $errorRow;
    }
    return $errorMessage;
  },
  _renderErrorMessage(error) {
    var message = error.url ? error.message.replace(error.url, "") : error.message || error;
    var $message = renderer_default("<div>").attr("role", "alert").attr("aria-roledescription", message_default.format("dxDataGrid-ariaError")).addClass(ERROR_MESSAGE_CLASS).text(message);
    if (error.url) {
      renderer_default("<a>").attr("href", error.url).text(error.url).appendTo($message);
    }
    return $message;
  },
  renderErrorRow(error, rowIndex, $popupContent) {
    var that = this;
    var $errorMessageElement;
    var $firstErrorRow;
    if ($popupContent) {
      $popupContent.find(".".concat(ERROR_MESSAGE_CLASS)).remove();
      $errorMessageElement = that._createErrorRow(error);
      $popupContent.prepend($errorMessageElement);
      return $errorMessageElement;
    }
    var viewElement = rowIndex >= 0 || !that._columnHeadersView.isVisible() ? that._rowsView : that._columnHeadersView;
    var $tableElements = viewElement.getTableElements();
    each($tableElements, (_, tableElement) => {
      $errorMessageElement = that._createErrorRow(error, $tableElements);
      $firstErrorRow = $firstErrorRow || $errorMessageElement;
      if (rowIndex >= 0) {
        var $row = viewElement._getRowElements(renderer_default(tableElement)).eq(rowIndex);
        that.removeErrorRow($row.next());
        $errorMessageElement.insertAfter($row);
      } else {
        var $tbody = renderer_default(tableElement).children("tbody");
        var rowElements = $tbody.children("tr");
        if (that._columnHeadersView.isVisible()) {
          that.removeErrorRow(rowElements.last());
          renderer_default(tableElement).append($errorMessageElement);
        } else {
          that.removeErrorRow(rowElements.first());
          $tbody.first().prepend($errorMessageElement);
        }
      }
    });
    var resizingController = that.getController("resizing");
    resizingController && resizingController.fireContentReadyAction();
    return $firstErrorRow;
  },
  removeErrorRow($row) {
    if (!$row) {
      var $columnHeaders = this._columnHeadersView && this._columnHeadersView.element();
      $row = $columnHeaders && $columnHeaders.find(".".concat(ERROR_ROW_CLASS2));
      if (!$row || !$row.length) {
        var $rowsViewElement = this._rowsView.element();
        $row = $rowsViewElement && $rowsViewElement.find(".".concat(ERROR_ROW_CLASS2));
      }
    }
    $row && $row.hasClass(ERROR_ROW_CLASS2) && $row.remove();
  },
  optionChanged(args) {
    switch (args.name) {
      case "errorRowEnabled":
        args.handled = true;
        break;
      default:
        this.callBase(args);
    }
  }
});
var errorHandlingModule = {
  defaultOptions: () => ({
    errorRowEnabled: true
  }),
  controllers: {
    errorHandling: ErrorHandlingController
  },
  extenders: {
    controllers: {
      data: {
        init() {
          var that = this;
          var errorHandlingController = that.getController("errorHandling");
          that.callBase();
          that.dataErrorOccurred.add((error, $popupContent) => {
            if (that.option("errorRowEnabled")) {
              errorHandlingController.renderErrorRow(error, void 0, $popupContent);
            }
          });
          that.changed.add((e) => {
            if (e && "loadError" === e.changeType) {
              return;
            }
            var errorHandlingController2 = that.getController("errorHandling");
            var editingController = that.getController("editing");
            if (editingController && !editingController.hasChanges()) {
              errorHandlingController2 && errorHandlingController2.removeErrorRow();
            }
          });
        }
      }
    }
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/error_handling.js
m_core_default.registerModule("errorHandling", errorHandlingModule);

// node_modules/devextreme/esm/__internal/grids/grid_core/views/m_grid_view.js
var BORDERS_CLASS = "borders";
var TABLE_FIXED_CLASS2 = "table-fixed";
var IMPORTANT_MARGIN_CLASS = "important-margin";
var GRIDBASE_CONTAINER_CLASS = "dx-gridbase-container";
var GROUP_ROW_SELECTOR = "tr.dx-group-row";
var HIDDEN_COLUMNS_WIDTH2 = "adaptiveHidden";
var VIEW_NAMES2 = ["columnsSeparatorView", "blockSeparatorView", "trackerView", "headerPanel", "columnHeadersView", "rowsView", "footerView", "columnChooserView", "filterPanelView", "pagerView", "draggingHeaderView", "contextMenuView", "errorView", "headerFilterView", "filterBuilderView"];
var isPercentWidth = function(width) {
  return isString(width) && width.endsWith("%");
};
var isPixelWidth = function(width) {
  return isString(width) && width.endsWith("px");
};
var calculateFreeWidth = function(that, widths) {
  var contentWidth = that._rowsView.contentWidth();
  var totalWidth = that._getTotalWidth(widths, contentWidth);
  return contentWidth - totalWidth;
};
var calculateFreeWidthWithCurrentMinWidth = function(that, columnIndex, currentMinWidth, widths) {
  return calculateFreeWidth(that, widths.map((width, index2) => index2 === columnIndex ? currentMinWidth : width));
};
var restoreFocus2 = function(focusedElement, selectionRange) {
  hiddenFocus(focusedElement, true);
  m_utils_default.setSelectionRange(focusedElement, selectionRange);
};
var resizingControllerMembers = {
  _initPostRenderHandlers() {
    if (!this._refreshSizesHandler) {
      this._refreshSizesHandler = (e) => {
        var resizeDeferred = new Deferred().resolve(null);
        var changeType = null === e || void 0 === e ? void 0 : e.changeType;
        var isDelayed = null === e || void 0 === e ? void 0 : e.isDelayed;
        var needFireContentReady = changeType && "updateSelection" !== changeType && "updateFocusedRow" !== changeType && "pageIndex" !== changeType && !isDelayed;
        this._dataController.changed.remove(this._refreshSizesHandler);
        if (this._checkSize()) {
          resizeDeferred = this._refreshSizes(e);
        }
        if (needFireContentReady) {
          when(resizeDeferred).done(() => {
            this._setAriaLabel();
            this.fireContentReadyAction();
          });
        }
      };
      this._dataController.changed.add(() => {
        this._dataController.changed.add(this._refreshSizesHandler);
      });
    }
  },
  _refreshSizes(e) {
    var _a2;
    var resizeDeferred = new Deferred().resolve(null);
    var changeType = null === e || void 0 === e ? void 0 : e.changeType;
    var isDelayed = null === e || void 0 === e ? void 0 : e.isDelayed;
    var items = this._dataController.items();
    if (!e || "refresh" === changeType || "prepend" === changeType || "append" === changeType) {
      if (!isDelayed) {
        resizeDeferred = this.resize();
      }
    } else if ("update" === changeType) {
      if (0 === (null === (_a2 = e.changeTypes) || void 0 === _a2 ? void 0 : _a2.length)) {
        return resizeDeferred;
      }
      if ((items.length > 1 || "insert" !== e.changeTypes[0]) && !(0 === items.length && "remove" === e.changeTypes[0]) && !e.needUpdateDimensions) {
        resizeDeferred = new Deferred();
        this._waitAsyncTemplates().done(() => {
          deferUpdate(() => deferRender(() => deferUpdate(() => {
            this._setScrollerSpacing();
            this._rowsView.resize();
            resizeDeferred.resolve();
          })));
        }).fail(resizeDeferred.reject);
      } else {
        resizeDeferred = this.resize();
      }
    }
    return resizeDeferred;
  },
  fireContentReadyAction() {
    this.component._fireContentReadyAction();
  },
  _getWidgetAriaLabel: () => "dxDataGrid-ariaDataGrid",
  _setAriaLabel() {
    var totalItemsCount = Math.max(0, this._dataController.totalItemsCount());
    this.component.setAria("label", message_default.format(this._getWidgetAriaLabel(), totalItemsCount, this.component.columnCount()), this.component.$element().children(".".concat(GRIDBASE_CONTAINER_CLASS)));
  },
  _getBestFitWidths() {
    var _a2;
    var rowsView3 = this._rowsView;
    var columnHeadersView = this._columnHeadersView;
    var widths = rowsView3.getColumnWidths();
    if (!(null === widths || void 0 === widths ? void 0 : widths.length)) {
      var headersTableElement = columnHeadersView.getTableElement();
      columnHeadersView.setTableElement(null === (_a2 = rowsView3.getTableElement()) || void 0 === _a2 ? void 0 : _a2.children(".dx-header"));
      widths = columnHeadersView.getColumnWidths();
      columnHeadersView.setTableElement(headersTableElement);
    }
    return widths;
  },
  _setVisibleWidths(visibleColumns, widths) {
    var columnsController = this._columnsController;
    columnsController.beginUpdate();
    each(visibleColumns, (index2, column) => {
      var columnId = columnsController.getColumnId(column);
      columnsController.columnOption(columnId, "visibleWidth", widths[index2]);
    });
    columnsController.endUpdate();
  },
  _toggleBestFitModeForView(view, className, isBestFit) {
    if (!view || !view.isVisible()) {
      return;
    }
    var $rowsTables = this._rowsView.getTableElements();
    var $viewTables = view.getTableElements();
    each($rowsTables, (index2, tableElement) => {
      var $tableBody;
      var $rowsTable = renderer_default(tableElement);
      var $viewTable = $viewTables.eq(index2);
      if ($viewTable && $viewTable.length) {
        if (isBestFit) {
          $tableBody = $viewTable.children("tbody").appendTo($rowsTable);
        } else {
          $tableBody = $rowsTable.children(".".concat(className)).appendTo($viewTable);
        }
        $tableBody.toggleClass(className, isBestFit);
        $tableBody.toggleClass(this.addWidgetPrefix("best-fit"), isBestFit);
      }
    });
  },
  _toggleBestFitMode(isBestFit) {
    var $rowsTable = this._rowsView.getTableElement();
    var $rowsFixedTable = this._rowsView.getTableElements().eq(1);
    if (!$rowsTable) {
      return;
    }
    $rowsTable.css("tableLayout", isBestFit ? "auto" : "fixed");
    $rowsTable.children("colgroup").css("display", isBestFit ? "none" : "");
    each($rowsFixedTable.find(GROUP_ROW_SELECTOR), (idx, item) => {
      renderer_default(item).css("display", isBestFit ? "none" : "");
    });
    $rowsFixedTable.toggleClass(this.addWidgetPrefix(TABLE_FIXED_CLASS2), !isBestFit);
    this._toggleBestFitModeForView(this._columnHeadersView, "dx-header", isBestFit);
    this._toggleBestFitModeForView(this._footerView, "dx-footer", isBestFit);
    if (this._needStretch()) {
      $rowsTable.get(0).style.width = isBestFit ? "auto" : "";
    }
  },
  _toggleContentMinHeight(value2) {
    var scrollable = this._rowsView.getScrollable();
    var $contentElement = this._rowsView._findContentElement();
    if (false === (null === scrollable || void 0 === scrollable ? void 0 : scrollable.option("useNative"))) {
      if (true === value2) {
        this._prevContentMinHeight = $contentElement.get(0).style.minHeight;
      }
      if (isDefined(this._prevContentMinHeight)) {
        $contentElement.css({
          minHeight: value2 ? m_utils_default.getContentHeightLimit(browser_default) : this._prevContentMinHeight
        });
      }
    }
  },
  _synchronizeColumns() {
    var columnsController = this._columnsController;
    var visibleColumns = columnsController.getVisibleColumns();
    var columnAutoWidth = this.option("columnAutoWidth");
    var wordWrapEnabled = this.option("wordWrapEnabled");
    var hasUndefinedColumnWidth = visibleColumns.some((column) => !isDefined(column.width));
    var needBestFit = this._needBestFit();
    var hasMinWidth = false;
    var resetBestFitMode;
    var isColumnWidthsCorrected = false;
    var resultWidths = [];
    var focusedElement;
    var selectionRange;
    !needBestFit && each(visibleColumns, (index2, column) => {
      if ("auto" === column.width) {
        needBestFit = true;
        return false;
      }
      return;
    });
    each(visibleColumns, (index2, column) => {
      if (column.minWidth) {
        hasMinWidth = true;
        return false;
      }
      return;
    });
    this._setVisibleWidths(visibleColumns, []);
    var $element = this.component.$element();
    if (needBestFit) {
      focusedElement = dom_adapter_default.getActiveElement($element.get(0));
      selectionRange = m_utils_default.getSelectionRange(focusedElement);
      this._toggleBestFitMode(true);
      resetBestFitMode = true;
    }
    this._toggleContentMinHeight(wordWrapEnabled);
    if ($element && $element.get(0) && this._maxWidth) {
      delete this._maxWidth;
      $element[0].style.maxWidth = "";
    }
    deferUpdate(() => {
      if (needBestFit) {
        resultWidths = this._getBestFitWidths();
        each(visibleColumns, (index2, column) => {
          var columnId = columnsController.getColumnId(column);
          columnsController.columnOption(columnId, "bestFitWidth", resultWidths[index2], true);
        });
      } else if (hasMinWidth) {
        resultWidths = this._getBestFitWidths();
      }
      each(visibleColumns, function(index2) {
        var {
          width
        } = this;
        if ("auto" !== width) {
          if (isDefined(width)) {
            resultWidths[index2] = isNumeric(width) || isPixelWidth(width) ? parseFloat(width) : width;
          } else if (!columnAutoWidth) {
            resultWidths[index2] = void 0;
          }
        }
      });
      if (resetBestFitMode) {
        this._toggleBestFitMode(false);
        resetBestFitMode = false;
        if (focusedElement && focusedElement !== dom_adapter_default.getActiveElement()) {
          var isFocusOutsideWindow = getBoundingRect(focusedElement).bottom < 0;
          if (!isFocusOutsideWindow) {
            restoreFocus2(focusedElement, selectionRange);
          }
        }
      }
      isColumnWidthsCorrected = this._correctColumnWidths(resultWidths, visibleColumns);
      if (columnAutoWidth) {
        !function() {
          var expandColumnWidth;
          each(visibleColumns, (index2, column) => {
            if ("groupExpand" === column.type) {
              expandColumnWidth = resultWidths[index2];
            }
          });
          each(visibleColumns, (index2, column) => {
            if ("groupExpand" === column.type && expandColumnWidth) {
              resultWidths[index2] = expandColumnWidth;
            }
          });
        }();
        if (this._needStretch()) {
          this._processStretch(resultWidths, visibleColumns);
        }
      }
      deferRender(() => {
        if (needBestFit || isColumnWidthsCorrected || hasUndefinedColumnWidth) {
          this._setVisibleWidths(visibleColumns, resultWidths);
        }
        if (wordWrapEnabled) {
          this._toggleContentMinHeight(false);
        }
      });
    });
  },
  _needBestFit() {
    return this.option("columnAutoWidth");
  },
  _needStretch() {
    return this._columnsController.getVisibleColumns().some((c) => "auto" === c.width && !c.command);
  },
  _getAverageColumnsWidth(resultWidths) {
    var freeWidth = calculateFreeWidth(this, resultWidths);
    var columnCountWithoutWidth = resultWidths.filter((width) => void 0 === width).length;
    return freeWidth / columnCountWithoutWidth;
  },
  _correctColumnWidths(resultWidths, visibleColumns) {
    var that = this;
    var i;
    var hasPercentWidth = false;
    var hasAutoWidth = false;
    var isColumnWidthsCorrected = false;
    var $element = that.component.$element();
    var hasWidth = that._hasWidth;
    var _loop = function() {
      var index2 = i;
      var column = visibleColumns[index2];
      var isHiddenColumn = resultWidths[index2] === HIDDEN_COLUMNS_WIDTH2;
      var width = resultWidths[index2];
      var {
        minWidth
      } = column;
      if (minWidth) {
        if (void 0 === width) {
          var averageColumnsWidth = that._getAverageColumnsWidth(resultWidths);
          width = averageColumnsWidth;
        } else if (isPercentWidth(width)) {
          var freeWidth = calculateFreeWidthWithCurrentMinWidth(that, index2, minWidth, resultWidths);
          if (freeWidth < 0) {
            width = -1;
          }
        }
      }
      var realColumnWidth = that._getRealColumnWidth(index2, resultWidths.map((columnWidth, columnIndex) => index2 === columnIndex ? width : columnWidth));
      if (minWidth && !isHiddenColumn && realColumnWidth < minWidth) {
        resultWidths[index2] = minWidth;
        isColumnWidthsCorrected = true;
        i = -1;
      }
      if (!isDefined(column.width)) {
        hasAutoWidth = true;
      }
      if (isPercentWidth(column.width)) {
        hasPercentWidth = true;
      }
    };
    for (i = 0; i < visibleColumns.length; i++) {
      _loop();
    }
    if (!hasAutoWidth && resultWidths.length) {
      var $rowsViewElement = that._rowsView.element();
      var contentWidth = that._rowsView.contentWidth();
      var scrollbarWidth2 = that._rowsView.getScrollbarWidth();
      var totalWidth = that._getTotalWidth(resultWidths, contentWidth);
      if (totalWidth < contentWidth) {
        var lastColumnIndex = m_utils_default.getLastResizableColumnIndex(visibleColumns, resultWidths);
        if (lastColumnIndex >= 0) {
          resultWidths[lastColumnIndex] = "auto";
          isColumnWidthsCorrected = true;
          if (false === hasWidth && !hasPercentWidth) {
            var borderWidth = that.option("showBorders") ? Math.ceil(getOuterWidth($rowsViewElement) - getInnerWidth($rowsViewElement)) : 0;
            that._maxWidth = totalWidth + scrollbarWidth2 + borderWidth;
            $element.css("maxWidth", that._maxWidth);
          }
        }
      }
    }
    return isColumnWidthsCorrected;
  },
  _processStretch(resultSizes, visibleColumns) {
    var groupSize = this._rowsView.contentWidth();
    var tableSize = this._getTotalWidth(resultSizes, groupSize);
    var unusedIndexes = {
      length: 0
    };
    if (!resultSizes.length) {
      return;
    }
    each(visibleColumns, function(index2) {
      if (this.width || resultSizes[index2] === HIDDEN_COLUMNS_WIDTH2) {
        unusedIndexes[index2] = true;
        unusedIndexes.length++;
      }
    });
    var diff = groupSize - tableSize;
    var diffElement = Math.floor(diff / (resultSizes.length - unusedIndexes.length));
    var onePixelElementsCount = diff - diffElement * (resultSizes.length - unusedIndexes.length);
    if (diff >= 0) {
      for (var i = 0; i < resultSizes.length; i++) {
        if (unusedIndexes[i]) {
          continue;
        }
        resultSizes[i] += diffElement;
        if (onePixelElementsCount > 0) {
          if (onePixelElementsCount < 1) {
            resultSizes[i] += onePixelElementsCount;
            onePixelElementsCount = 0;
          } else {
            resultSizes[i]++;
            onePixelElementsCount--;
          }
        }
      }
    }
  },
  _getRealColumnWidth(columnIndex, columnWidths, groupWidth) {
    var ratio = 1;
    var width = columnWidths[columnIndex];
    if (!isPercentWidth(width)) {
      return parseFloat(width);
    }
    var percentTotalWidth = columnWidths.reduce((sum, width2, index2) => {
      if (!isPercentWidth(width2)) {
        return sum;
      }
      return sum + parseFloat(width2);
    }, 0);
    var pixelTotalWidth = columnWidths.reduce((sum, width2) => {
      if (!width2 || width2 === HIDDEN_COLUMNS_WIDTH2 || isPercentWidth(width2)) {
        return sum;
      }
      return sum + parseFloat(width2);
    }, 0);
    groupWidth = groupWidth || this._rowsView.contentWidth();
    var freeSpace = groupWidth - pixelTotalWidth;
    var percentTotalWidthInPixel = percentTotalWidth * groupWidth / 100;
    if (pixelTotalWidth > 0 && percentTotalWidthInPixel + pixelTotalWidth >= groupWidth) {
      ratio = percentTotalWidthInPixel > freeSpace ? freeSpace / percentTotalWidthInPixel : 1;
    }
    return parseFloat(width) * groupWidth * ratio / 100;
  },
  _getTotalWidth(widths, groupWidth) {
    var result2 = 0;
    for (var i = 0; i < widths.length; i++) {
      var width = widths[i];
      if (width && width !== HIDDEN_COLUMNS_WIDTH2) {
        result2 += this._getRealColumnWidth(i, widths, groupWidth);
      }
    }
    return Math.ceil(result2);
  },
  _getGroupElement() {
    return this.component.$element().children().get(0);
  },
  updateSize(rootElement) {
    var $rootElement = renderer_default(rootElement);
    var importantMarginClass = this.addWidgetPrefix(IMPORTANT_MARGIN_CLASS);
    if (void 0 === this._hasHeight && $rootElement && $rootElement.is(":visible") && getWidth($rootElement)) {
      var $groupElement = $rootElement.children(".".concat(this.getWidgetContainerClass()));
      if ($groupElement.length) {
        $groupElement.detach();
      }
      this._hasHeight = !!getHeight($rootElement);
      var width = getWidth($rootElement);
      $rootElement.addClass(importantMarginClass);
      this._hasWidth = getWidth($rootElement) === width;
      $rootElement.removeClass(importantMarginClass);
      if ($groupElement.length) {
        $groupElement.appendTo($rootElement);
      }
    }
  },
  publicMethods: () => ["resize", "updateDimensions"],
  _waitAsyncTemplates() {
    var _a2, _b2, _c;
    return when(null === (_a2 = this._columnHeadersView) || void 0 === _a2 ? void 0 : _a2.waitAsyncTemplates(true), null === (_b2 = this._rowsView) || void 0 === _b2 ? void 0 : _b2.waitAsyncTemplates(true), null === (_c = this._footerView) || void 0 === _c ? void 0 : _c.waitAsyncTemplates(true));
  },
  resize() {
    if (this.component._requireResize) {
      return;
    }
    var d = new Deferred();
    this._waitAsyncTemplates().done(() => {
      when(this.updateDimensions()).done(d.resolve).fail(d.reject);
    }).fail(d.reject);
    return d.promise();
  },
  updateDimensions(checkSize) {
    var that = this;
    that._initPostRenderHandlers();
    if (!that._checkSize(checkSize)) {
      return;
    }
    var prevResult = that._resizeDeferred;
    var result2 = that._resizeDeferred = new Deferred();
    when(prevResult).always(() => {
      deferRender(() => {
        if (that._dataController.isLoaded()) {
          that._synchronizeColumns();
        }
        that._resetGroupElementHeight();
        deferUpdate(() => {
          deferRender(() => {
            deferUpdate(() => {
              that._updateDimensionsCore();
            });
          });
        });
      }).done(result2.resolve).fail(result2.reject);
    });
    return result2.promise();
  },
  _resetGroupElementHeight() {
    var groupElement = this._getGroupElement();
    var scrollable = this._rowsView.getScrollable();
    if (groupElement && groupElement.style.height && (!scrollable || !scrollable.scrollTop())) {
      groupElement.style.height = "";
    }
  },
  _checkSize(checkSize) {
    var $rootElement = this.component.$element();
    var isWidgetVisible = $rootElement.is(":visible");
    var isGridSizeChanged = this._lastWidth !== getWidth($rootElement) || this._lastHeight !== getHeight($rootElement) || this._devicePixelRatio !== getWindow().devicePixelRatio;
    return isWidgetVisible && (!checkSize || isGridSizeChanged);
  },
  _setScrollerSpacingCore() {
    var that = this;
    var vScrollbarWidth = that._rowsView.getScrollbarWidth();
    var hScrollbarWidth = that._rowsView.getScrollbarWidth(true);
    deferRender(() => {
      that._columnHeadersView && that._columnHeadersView.setScrollerSpacing(vScrollbarWidth);
      that._footerView && that._footerView.setScrollerSpacing(vScrollbarWidth);
      that._rowsView.setScrollerSpacing(vScrollbarWidth, hScrollbarWidth);
    });
  },
  _setScrollerSpacing() {
    var scrollable = this._rowsView.getScrollable();
    var isNativeScrolling = true === this.option("scrolling.useNative");
    if (!scrollable || isNativeScrolling) {
      deferRender(() => {
        deferUpdate(() => {
          this._setScrollerSpacingCore();
        });
      });
    } else {
      this._setScrollerSpacingCore();
    }
  },
  _setAriaOwns() {
    var _a2, _b2, _c;
    var headerTable = null === (_a2 = this._columnHeadersView) || void 0 === _a2 ? void 0 : _a2.getTableElement();
    var footerTable = null === (_b2 = this._footerView) || void 0 === _b2 ? void 0 : _b2.getTableElement();
    null === (_c = this._rowsView) || void 0 === _c ? void 0 : _c.setAriaOwns(null === headerTable || void 0 === headerTable ? void 0 : headerTable.attr("id"), null === footerTable || void 0 === footerTable ? void 0 : footerTable.attr("id"));
  },
  _updateDimensionsCore() {
    var that = this;
    var dataController2 = that._dataController;
    var editorFactory2 = that.getController("editorFactory");
    var rowsView3 = that._rowsView;
    var $rootElement = that.component.$element();
    var groupElement = this._getGroupElement();
    var rootElementHeight = getHeight($rootElement);
    var height = that.option("height") || $rootElement.get(0).style.height;
    var isHeightSpecified = !!height && "auto" !== height;
    var maxHeight = parseInt($rootElement.css("maxHeight"));
    var maxHeightHappened = maxHeight && rootElementHeight >= maxHeight;
    var isMaxHeightApplied = groupElement && groupElement.scrollHeight === groupElement.offsetHeight;
    that.updateSize($rootElement);
    deferRender(() => {
      var hasHeight = that._hasHeight || !!maxHeight || isHeightSpecified;
      rowsView3.hasHeight(hasHeight);
      this._setAriaOwns();
      if (maxHeightHappened && !isMaxHeightApplied) {
        renderer_default(groupElement).css("height", maxHeight);
      }
      if (!dataController2.isLoaded()) {
        rowsView3.setLoading(dataController2.isLoading());
        return;
      }
      deferUpdate(() => {
        that._updateLastSizes($rootElement);
        that._setScrollerSpacing();
        each(VIEW_NAMES2, (index2, viewName2) => {
          var view = that.getView(viewName2);
          if (view) {
            view.resize();
          }
        });
        editorFactory2 && editorFactory2.resize();
      });
    });
  },
  _updateLastSizes($rootElement) {
    this._lastWidth = getWidth($rootElement);
    this._lastHeight = getHeight($rootElement);
    this._devicePixelRatio = getWindow().devicePixelRatio;
  },
  optionChanged(args) {
    switch (args.name) {
      case "width":
      case "height":
        this.component._renderDimensions();
        this.resize();
      case "renderAsync":
        args.handled = true;
        return;
      default:
        this.callBase(args);
    }
  },
  init() {
    this._prevContentMinHeight = null;
    this._dataController = this.getController("data");
    this._columnsController = this.getController("columns");
    this._columnHeadersView = this.getView("columnHeadersView");
    this._footerView = this.getView("footerView");
    this._rowsView = this.getView("rowsView");
  }
};
var ResizingController = m_modules_default.ViewController.inherit(resizingControllerMembers);
var SynchronizeScrollingController = m_modules_default.ViewController.inherit({
  _scrollChangedHandler(views, pos, viewName2) {
    for (var j = 0; j < views.length; j++) {
      if (views[j] && views[j].name !== viewName2) {
        views[j].scrollTo({
          left: pos.left,
          top: pos.top
        });
      }
    }
  },
  init() {
    var views = [this.getView("columnHeadersView"), this.getView("footerView"), this.getView("rowsView")];
    for (var i = 0; i < views.length; i++) {
      var view = views[i];
      if (view) {
        view.scrollChanged.add(this._scrollChangedHandler.bind(this, views));
      }
    }
  }
});
var GridView = m_modules_default.View.inherit({
  _endUpdateCore() {
    if (this.component._requireResize) {
      this.component._requireResize = false;
      this._resizingController.resize();
    }
  },
  init() {
    this._resizingController = this.getController("resizing");
    this._dataController = this.getController("data");
  },
  getView(name2) {
    return this.component._views[name2];
  },
  element() {
    return this._groupElement;
  },
  optionChanged(args) {
    if (isDefined(this._groupElement) && "showBorders" === args.name) {
      this._groupElement.toggleClass(this.addWidgetPrefix(BORDERS_CLASS), !!args.value);
      args.handled = true;
    } else {
      this.callBase(args);
    }
  },
  _renderViews($groupElement) {
    var that = this;
    each(VIEW_NAMES2, (index2, viewName2) => {
      var view = that.getView(viewName2);
      if (view) {
        view.render($groupElement);
      }
    });
  },
  _getTableRoleName: () => "group",
  render($rootElement) {
    var isFirstRender = !this._groupElement;
    var $groupElement = this._groupElement || renderer_default("<div>").addClass(this.getWidgetContainerClass());
    $groupElement.addClass(GRIDBASE_CONTAINER_CLASS);
    $groupElement.toggleClass(this.addWidgetPrefix(BORDERS_CLASS), !!this.option("showBorders"));
    this.setAria("role", "presentation", $rootElement);
    this.component.setAria("role", this._getTableRoleName(), $groupElement);
    this._rootElement = $rootElement || this._rootElement;
    if (isFirstRender) {
      this._groupElement = $groupElement;
      hasWindow() && this.getController("resizing").updateSize($rootElement);
      $groupElement.appendTo($rootElement);
    }
    this._renderViews($groupElement);
  },
  update() {
    var $rootElement = this._rootElement;
    var $groupElement = this._groupElement;
    var resizingController = this.getController("resizing");
    if ($rootElement && $groupElement) {
      resizingController.resize();
      if (this._dataController.isLoaded()) {
        this._resizingController.fireContentReadyAction();
      }
    }
  }
});
var gridViewModule = {
  defaultOptions: () => ({
    showBorders: false,
    renderAsync: false
  }),
  controllers: {
    resizing: ResizingController,
    synchronizeScrolling: SynchronizeScrollingController
  },
  views: {
    gridView: GridView
  },
  VIEW_NAMES: VIEW_NAMES2
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/grid_view.js
m_core_default.registerModule("gridView", gridViewModule);

// node_modules/devextreme/esm/ui/collection/ui.collection_widget.async.js
var AsyncCollectionWidget = ui_collection_widget_edit_default.inherit({
  _initMarkup() {
    this._deferredItems = [];
    this.callBase();
  },
  _renderItemContent(args) {
    var renderContentDeferred = new Deferred();
    var itemDeferred = new Deferred();
    this._deferredItems[args.index] = itemDeferred;
    var $itemContent = this.callBase.call(this, args);
    itemDeferred.done(() => {
      renderContentDeferred.resolve($itemContent);
    });
    return renderContentDeferred.promise();
  },
  _onItemTemplateRendered: function(itemTemplate, renderArgs) {
    return () => {
      this._deferredItems[renderArgs.index].resolve();
    };
  },
  _postProcessRenderItems: noop2,
  _renderItemsAsync() {
    var d = new Deferred();
    when.apply(this, this._deferredItems).done(() => {
      this._postProcessRenderItems();
      d.resolve();
    });
    return d.promise();
  },
  _clean() {
    this.callBase();
    this._deferredItems = [];
  }
});
var ui_collection_widget_async_default = AsyncCollectionWidget;

// node_modules/devextreme/esm/ui/toolbar/constants.js
var TOOLBAR_CLASS = "dx-toolbar";

// node_modules/devextreme/esm/ui/toolbar/ui.toolbar.base.js
var TOOLBAR_BEFORE_CLASS = "dx-toolbar-before";
var TOOLBAR_CENTER_CLASS = "dx-toolbar-center";
var TOOLBAR_AFTER_CLASS = "dx-toolbar-after";
var TOOLBAR_MINI_CLASS = "dx-toolbar-mini";
var TOOLBAR_ITEM_CLASS = "dx-toolbar-item";
var TOOLBAR_LABEL_CLASS = "dx-toolbar-label";
var TOOLBAR_BUTTON_CLASS = "dx-toolbar-button";
var TOOLBAR_ITEMS_CONTAINER_CLASS = "dx-toolbar-items-container";
var TOOLBAR_GROUP_CLASS = "dx-toolbar-group";
var TOOLBAR_COMPACT_CLASS = "dx-toolbar-compact";
var TEXT_BUTTON_MODE = "text";
var DEFAULT_BUTTON_TYPE = "default";
var DEFAULT_DROPDOWNBUTTON_STYLING_MODE = "contained";
var TOOLBAR_ITEM_DATA_KEY = "dxToolbarItemDataKey";
var ANIMATION_TIMEOUT = 15;
var ToolbarBase = class extends ui_collection_widget_async_default {
  _getSynchronizableOptionsForCreateComponent() {
    return super._getSynchronizableOptionsForCreateComponent().filter((item) => "disabled" !== item);
  }
  _initTemplates() {
    super._initTemplates();
    var template = new BindableTemplate((function($container, data3, rawModel) {
      if (isPlainObject(data3)) {
        var {
          text,
          html,
          widget
        } = data3;
        if (text) {
          $container.text(text).wrapInner("<div>");
        }
        if (html) {
          $container.html(html);
        }
        if ("dxDropDownButton" === widget) {
          var _data$options;
          data3.options = null !== (_data$options = data3.options) && void 0 !== _data$options ? _data$options : {};
          if (!isDefined(data3.options.stylingMode)) {
            data3.options.stylingMode = this.option("useFlatButtons") ? TEXT_BUTTON_MODE : DEFAULT_DROPDOWNBUTTON_STYLING_MODE;
          }
        }
        if ("dxButton" === widget) {
          if (this.option("useFlatButtons")) {
            var _data$options2, _data$options$styling;
            data3.options = null !== (_data$options2 = data3.options) && void 0 !== _data$options2 ? _data$options2 : {};
            data3.options.stylingMode = null !== (_data$options$styling = data3.options.stylingMode) && void 0 !== _data$options$styling ? _data$options$styling : TEXT_BUTTON_MODE;
          }
          if (this.option("useDefaultButtons")) {
            var _data$options3, _data$options$type;
            data3.options = null !== (_data$options3 = data3.options) && void 0 !== _data$options3 ? _data$options3 : {};
            data3.options.type = null !== (_data$options$type = data3.options.type) && void 0 !== _data$options$type ? _data$options$type : DEFAULT_BUTTON_TYPE;
          }
        }
      } else {
        $container.text(String(data3));
      }
      this._getTemplate("dx-polymorph-widget").render({
        container: $container,
        model: rawModel,
        parent: this
      });
    }).bind(this), ["text", "html", "widget", "options"], this.option("integrationOptions.watchMethod"));
    this._templateManager.addDefaultTemplates({
      item: template,
      menuItem: template
    });
  }
  _getDefaultOptions() {
    return extend(super._getDefaultOptions(), {
      renderAs: "topToolbar",
      grouped: false,
      useFlatButtons: false,
      useDefaultButtons: false
    });
  }
  _defaultOptionsRules() {
    return super._defaultOptionsRules().concat([{
      device: function() {
        return isMaterialBased();
      },
      options: {
        useFlatButtons: true
      }
    }]);
  }
  _itemContainer() {
    return this._$toolbarItemsContainer.find([".".concat(TOOLBAR_BEFORE_CLASS), ".".concat(TOOLBAR_CENTER_CLASS), ".".concat(TOOLBAR_AFTER_CLASS)].join(","));
  }
  _itemClass() {
    return TOOLBAR_ITEM_CLASS;
  }
  _itemDataKey() {
    return TOOLBAR_ITEM_DATA_KEY;
  }
  _dimensionChanged() {
    if (this._disposed) {
      return;
    }
    this._arrangeItems();
    this._applyCompactMode();
  }
  _initMarkup() {
    this._renderToolbar();
    this._renderSections();
    super._initMarkup();
  }
  _render() {
    super._render();
    this._renderItemsAsync();
    this._updateDimensionsInMaterial();
  }
  _postProcessRenderItems() {
    this._arrangeItems();
  }
  _renderToolbar() {
    this.$element().addClass(TOOLBAR_CLASS);
    this._$toolbarItemsContainer = renderer_default("<div>").addClass(TOOLBAR_ITEMS_CONTAINER_CLASS).appendTo(this.$element());
    this.setAria("role", "toolbar");
  }
  _renderSections() {
    var $container = this._$toolbarItemsContainer;
    each(["before", "center", "after"], (_, section) => {
      var sectionClass = "dx-toolbar-".concat(section);
      var $section = $container.find(".".concat(sectionClass));
      if (!$section.length) {
        this["_$".concat(section, "Section")] = renderer_default("<div>").addClass(sectionClass).attr("role", "presentation").appendTo($container);
      }
    });
  }
  _arrangeItems(elementWidth) {
    var _elementWidth;
    elementWidth = null !== (_elementWidth = elementWidth) && void 0 !== _elementWidth ? _elementWidth : getWidth(this.$element());
    this._$centerSection.css({
      margin: "0 auto",
      float: "none"
    });
    var beforeRect = getBoundingRect(this._$beforeSection.get(0));
    var afterRect = getBoundingRect(this._$afterSection.get(0));
    this._alignCenterSection(beforeRect, afterRect, elementWidth);
    var $label = this._$toolbarItemsContainer.find(".".concat(TOOLBAR_LABEL_CLASS)).eq(0);
    var $section = $label.parent();
    if (!$label.length) {
      return;
    }
    var labelOffset = beforeRect.width ? beforeRect.width : $label.position().left;
    var widthBeforeSection = $section.hasClass(TOOLBAR_BEFORE_CLASS) ? 0 : labelOffset;
    var widthAfterSection = $section.hasClass(TOOLBAR_AFTER_CLASS) ? 0 : afterRect.width;
    var elemsAtSectionWidth = 0;
    $section.children().not(".".concat(TOOLBAR_LABEL_CLASS)).each(function() {
      elemsAtSectionWidth += getOuterWidth(this);
    });
    var freeSpace = elementWidth - elemsAtSectionWidth;
    var sectionMaxWidth = Math.max(freeSpace - widthBeforeSection - widthAfterSection, 0);
    if ($section.hasClass(TOOLBAR_BEFORE_CLASS)) {
      this._alignSection(this._$beforeSection, sectionMaxWidth);
    } else {
      var labelPaddings = getOuterWidth($label) - getWidth($label);
      $label.css("maxWidth", sectionMaxWidth - labelPaddings);
    }
  }
  _alignCenterSection(beforeRect, afterRect, elementWidth) {
    this._alignSection(this._$centerSection, elementWidth - beforeRect.width - afterRect.width);
    var isRTL = this.option("rtlEnabled");
    var leftRect = isRTL ? afterRect : beforeRect;
    var rightRect = isRTL ? beforeRect : afterRect;
    var centerRect = getBoundingRect(this._$centerSection.get(0));
    if (leftRect.right > centerRect.left || centerRect.right > rightRect.left) {
      this._$centerSection.css({
        marginLeft: leftRect.width,
        marginRight: rightRect.width,
        float: leftRect.width > rightRect.width ? "none" : "right"
      });
    }
  }
  _alignSection($section, maxWidth) {
    var $labels = $section.find(".".concat(TOOLBAR_LABEL_CLASS));
    var labels = $labels.toArray();
    maxWidth -= this._getCurrentLabelsPaddings(labels);
    var currentWidth = this._getCurrentLabelsWidth(labels);
    var difference = Math.abs(currentWidth - maxWidth);
    if (maxWidth < currentWidth) {
      labels = labels.reverse();
      this._alignSectionLabels(labels, difference, false);
    } else {
      this._alignSectionLabels(labels, difference, true);
    }
  }
  _alignSectionLabels(labels, difference, expanding) {
    var getRealLabelWidth = function(label) {
      return getBoundingRect(label).width;
    };
    for (var i = 0; i < labels.length; i++) {
      var $label = renderer_default(labels[i]);
      var currentLabelWidth = Math.ceil(getRealLabelWidth(labels[i]));
      var labelMaxWidth = void 0;
      if (expanding) {
        $label.css("maxWidth", "inherit");
      }
      var possibleLabelWidth = Math.ceil(expanding ? getRealLabelWidth(labels[i]) : currentLabelWidth);
      if (possibleLabelWidth < difference) {
        labelMaxWidth = expanding ? possibleLabelWidth : 0;
        difference -= possibleLabelWidth;
      } else {
        labelMaxWidth = expanding ? currentLabelWidth + difference : currentLabelWidth - difference;
        $label.css("maxWidth", labelMaxWidth);
        break;
      }
      $label.css("maxWidth", labelMaxWidth);
    }
  }
  _applyCompactMode() {
    var $element = this.$element();
    $element.removeClass(TOOLBAR_COMPACT_CLASS);
    if (this.option("compactMode") && this._getSummaryItemsSize("width", this.itemElements(), true) > getWidth($element)) {
      $element.addClass(TOOLBAR_COMPACT_CLASS);
    }
  }
  _getCurrentLabelsWidth(labels) {
    var width = 0;
    labels.forEach(function(label, index2) {
      width += getOuterWidth(label);
    });
    return width;
  }
  _getCurrentLabelsPaddings(labels) {
    var padding = 0;
    labels.forEach(function(label, index2) {
      padding += getOuterWidth(label) - getWidth(label);
    });
    return padding;
  }
  _renderItem(index2, item, itemContainer, $after) {
    var _item$location, _item$text;
    var location = null !== (_item$location = item.location) && void 0 !== _item$location ? _item$location : "center";
    var container = null !== itemContainer && void 0 !== itemContainer ? itemContainer : this["_$".concat(location, "Section")];
    var itemHasText = !!(null !== (_item$text = item.text) && void 0 !== _item$text ? _item$text : item.html);
    var itemElement = super._renderItem(index2, item, container, $after);
    itemElement.toggleClass(TOOLBAR_BUTTON_CLASS, !itemHasText).toggleClass(TOOLBAR_LABEL_CLASS, itemHasText).addClass(item.cssClass);
    return itemElement;
  }
  _renderGroupedItems() {
    each(this.option("items"), (groupIndex, group) => {
      var _group$location;
      var groupItems = group.items;
      var $container = renderer_default("<div>").addClass(TOOLBAR_GROUP_CLASS);
      var location = null !== (_group$location = group.location) && void 0 !== _group$location ? _group$location : "center";
      if (!groupItems || !groupItems.length) {
        return;
      }
      each(groupItems, (itemIndex, item) => {
        this._renderItem(itemIndex, item, $container, null);
      });
      this._$toolbarItemsContainer.find(".dx-toolbar-".concat(location)).append($container);
    });
  }
  _renderItems(items) {
    var grouped = this.option("grouped") && items.length && items[0].items;
    grouped ? this._renderGroupedItems() : super._renderItems(items);
  }
  _getToolbarItems() {
    var _this$option;
    return null !== (_this$option = this.option("items")) && void 0 !== _this$option ? _this$option : [];
  }
  _renderContentImpl() {
    var items = this._getToolbarItems();
    this.$element().toggleClass(TOOLBAR_MINI_CLASS, 0 === items.length);
    if (this._renderedItemsCount) {
      this._renderItems(items.slice(this._renderedItemsCount));
    } else {
      this._renderItems(items);
    }
    this._applyCompactMode();
  }
  _renderEmptyMessage() {
  }
  _clean() {
    this._$toolbarItemsContainer.children().empty();
    this.$element().empty();
    delete this._$beforeSection;
    delete this._$centerSection;
    delete this._$afterSection;
  }
  _visibilityChanged(visible2) {
    if (visible2) {
      this._arrangeItems();
    }
  }
  _isVisible() {
    return getWidth(this.$element()) > 0 && getHeight(this.$element()) > 0;
  }
  _getIndexByItem(item) {
    return this._getToolbarItems().indexOf(item);
  }
  _itemOptionChanged(item, property, value2) {
    super._itemOptionChanged.apply(this, [item, property, value2]);
    this._arrangeItems();
  }
  _optionChanged(_ref) {
    var {
      name: name2,
      value: value2
    } = _ref;
    switch (name2) {
      case "width":
        super._optionChanged.apply(this, arguments);
        this._dimensionChanged();
        break;
      case "renderAs":
      case "useFlatButtons":
      case "useDefaultButtons":
        this._invalidate();
        break;
      case "compactMode":
        this._applyCompactMode();
        break;
      case "grouped":
        break;
      default:
        super._optionChanged.apply(this, arguments);
    }
  }
  _dispose() {
    super._dispose();
    clearTimeout(this._waitParentAnimationTimeout);
  }
  _updateDimensionsInMaterial() {
    if (isMaterial()) {
      Promise.all([(() => new Promise((resolve) => {
        var check = () => {
          var readyToResolve = true;
          this.$element().parents().each((_, parent) => {
            if (fx_default.isAnimating(renderer_default(parent))) {
              readyToResolve = false;
              return false;
            }
          });
          if (readyToResolve) {
            resolve();
          }
          return readyToResolve;
        };
        var runCheck = () => {
          clearTimeout(this._waitParentAnimationTimeout);
          this._waitParentAnimationTimeout = setTimeout(() => check() || runCheck(), ANIMATION_TIMEOUT);
        };
        runCheck();
      }))(), (() => {
        var $labels = this.$element().find(".".concat(TOOLBAR_LABEL_CLASS));
        var promises = [];
        $labels.each((_, label) => {
          var text = renderer_default(label).text();
          var fontWeight = renderer_default(label).css("fontWeight");
          promises.push(waitWebFont(text, fontWeight));
        });
        return Promise.all(promises);
      })()]).then(() => {
        this._dimensionChanged();
      });
    }
  }
};
component_registrator_default("dxToolbarBase", ToolbarBase);
var ui_toolbar_base_default = ToolbarBase;

// node_modules/devextreme/esm/ui/toolbar/ui.toolbar.utils.js
var BUTTON_GROUP_CLASS = "dx-buttongroup";
var TOOLBAR_ITEMS = ["dxAutocomplete", "dxButton", "dxCheckBox", "dxDateBox", "dxMenu", "dxSelectBox", "dxTabs", "dxTextBox", "dxButtonGroup", "dxDropDownButton"];
var getItemInstance = function($element) {
  var itemData = $element.data && $element.data();
  var dxComponents = itemData && itemData.dxComponents;
  var widgetName = dxComponents && dxComponents[0];
  return widgetName && itemData[widgetName];
};
function toggleItemFocusableElementTabIndex(context2, item) {
  var _itemData$options;
  if (!context2) {
    return;
  }
  var $item = context2._findItemElementByItem(item);
  if (!$item.length) {
    return;
  }
  var itemData = context2._getItemData($item);
  var isItemNotFocusable = !!(null !== (_itemData$options = itemData.options) && void 0 !== _itemData$options && _itemData$options.disabled || itemData.disabled || context2.option("disabled"));
  var {
    widget
  } = itemData;
  if (widget && -1 !== TOOLBAR_ITEMS.indexOf(widget)) {
    var $widget = $item.find(widget.toLowerCase().replace("dx", ".dx-"));
    if ($widget.length) {
      var _itemInstance$_focusT, _itemData$options2;
      var itemInstance = getItemInstance($widget);
      if (!itemInstance) {
        return;
      }
      var $focusTarget = null === (_itemInstance$_focusT = itemInstance._focusTarget) || void 0 === _itemInstance$_focusT ? void 0 : _itemInstance$_focusT.call(itemInstance);
      if ("dxDropDownButton" === widget) {
        $focusTarget = $focusTarget && $focusTarget.find(".".concat(BUTTON_GROUP_CLASS));
      } else {
        var _$focusTarget;
        $focusTarget = null !== (_$focusTarget = $focusTarget) && void 0 !== _$focusTarget ? _$focusTarget : renderer_default(itemInstance.element());
      }
      var tabIndex = null === (_itemData$options2 = itemData.options) || void 0 === _itemData$options2 ? void 0 : _itemData$options2.tabIndex;
      if (isItemNotFocusable) {
        $focusTarget.attr("tabIndex", -1);
      } else {
        $focusTarget.attr("tabIndex", null !== tabIndex && void 0 !== tabIndex ? tabIndex : 0);
      }
    }
  }
}

// node_modules/devextreme/esm/ui/toolbar/strategy/toolbar.multiline.js
var TOOLBAR_LABEL_CLASS2 = "dx-toolbar-label";
var MultiLineStrategy = class {
  constructor(toolbar) {
    this._toolbar = toolbar;
  }
  _initMarkup() {
  }
  _updateMenuVisibility() {
  }
  _renderMenuItems() {
  }
  _renderItem() {
  }
  _getMenuItems() {
  }
  _getToolbarItems() {
    var _this$_toolbar$option;
    return null !== (_this$_toolbar$option = this._toolbar.option("items")) && void 0 !== _this$_toolbar$option ? _this$_toolbar$option : [];
  }
  _getItemsWidth() {
    return this._toolbar._getSummaryItemsSize("width", this._toolbar.itemElements(), true);
  }
  _arrangeItems() {
    var $label = this._toolbar._$toolbarItemsContainer.find(".".concat(TOOLBAR_LABEL_CLASS2)).eq(0);
    if (!$label.length) {
      return;
    }
    var elementWidth = getWidth(this._toolbar.$element());
    var labelPaddings = getOuterWidth($label) - getWidth($label);
    $label.css("maxWidth", elementWidth - labelPaddings);
  }
  _hideOverflowItems() {
  }
  _dimensionChanged() {
  }
  _itemOptionChanged() {
  }
  _optionChanged() {
  }
};

// node_modules/devextreme/esm/events/swipe.js
var SWIPE_START_EVENT = "dxswipestart";
var SWIPE_EVENT = "dxswipe";
var SWIPE_END_EVENT = "dxswipeend";
var HorizontalStrategy = {
  defaultItemSizeFunc: function() {
    return getWidth(this.getElement());
  },
  getBounds: function() {
    return [this._maxLeftOffset, this._maxRightOffset];
  },
  calcOffsetRatio: function(e) {
    var endEventData = eventData(e);
    return (endEventData.x - (this._savedEventData && this._savedEventData.x || 0)) / this._itemSizeFunc().call(this, e);
  },
  isFastSwipe: function(e) {
    var endEventData = eventData(e);
    return this.FAST_SWIPE_SPEED_LIMIT * Math.abs(endEventData.x - this._tickData.x) >= endEventData.time - this._tickData.time;
  }
};
var VerticalStrategy = {
  defaultItemSizeFunc: function() {
    return getHeight(this.getElement());
  },
  getBounds: function() {
    return [this._maxTopOffset, this._maxBottomOffset];
  },
  calcOffsetRatio: function(e) {
    var endEventData = eventData(e);
    return (endEventData.y - (this._savedEventData && this._savedEventData.y || 0)) / this._itemSizeFunc().call(this, e);
  },
  isFastSwipe: function(e) {
    var endEventData = eventData(e);
    return this.FAST_SWIPE_SPEED_LIMIT * Math.abs(endEventData.y - this._tickData.y) >= endEventData.time - this._tickData.time;
  }
};
var STRATEGIES = {
  horizontal: HorizontalStrategy,
  vertical: VerticalStrategy
};
var SwipeEmitter = emitter_gesture_default.inherit({
  TICK_INTERVAL: 300,
  FAST_SWIPE_SPEED_LIMIT: 10,
  ctor: function(element) {
    this.callBase(element);
    this.direction = "horizontal";
    this.elastic = true;
  },
  _getStrategy: function() {
    return STRATEGIES[this.direction];
  },
  _defaultItemSizeFunc: function() {
    return this._getStrategy().defaultItemSizeFunc.call(this);
  },
  _itemSizeFunc: function() {
    return this.itemSizeFunc || this._defaultItemSizeFunc;
  },
  _init: function(e) {
    this._tickData = eventData(e);
  },
  _start: function(e) {
    this._savedEventData = eventData(e);
    e = this._fireEvent(SWIPE_START_EVENT, e);
    if (!e.cancel) {
      this._maxLeftOffset = e.maxLeftOffset;
      this._maxRightOffset = e.maxRightOffset;
      this._maxTopOffset = e.maxTopOffset;
      this._maxBottomOffset = e.maxBottomOffset;
    }
  },
  _move: function(e) {
    var strategy4 = this._getStrategy();
    var moveEventData = eventData(e);
    var offset2 = strategy4.calcOffsetRatio.call(this, e);
    offset2 = this._fitOffset(offset2, this.elastic);
    if (moveEventData.time - this._tickData.time > this.TICK_INTERVAL) {
      this._tickData = moveEventData;
    }
    this._fireEvent(SWIPE_EVENT, e, {
      offset: offset2
    });
    if (false !== e.cancelable) {
      e.preventDefault();
    }
  },
  _end: function(e) {
    var strategy4 = this._getStrategy();
    var offsetRatio = strategy4.calcOffsetRatio.call(this, e);
    var isFast = strategy4.isFastSwipe.call(this, e);
    var startOffset = offsetRatio;
    var targetOffset = this._calcTargetOffset(offsetRatio, isFast);
    startOffset = this._fitOffset(startOffset, this.elastic);
    targetOffset = this._fitOffset(targetOffset, false);
    this._fireEvent(SWIPE_END_EVENT, e, {
      offset: startOffset,
      targetOffset
    });
  },
  _fitOffset: function(offset2, elastic) {
    var strategy4 = this._getStrategy();
    var bounds = strategy4.getBounds.call(this);
    if (offset2 < -bounds[0]) {
      return elastic ? (-2 * bounds[0] + offset2) / 3 : -bounds[0];
    }
    if (offset2 > bounds[1]) {
      return elastic ? (2 * bounds[1] + offset2) / 3 : bounds[1];
    }
    return offset2;
  },
  _calcTargetOffset: function(offsetRatio, isFast) {
    var result2;
    if (isFast) {
      result2 = Math.ceil(Math.abs(offsetRatio));
      if (offsetRatio < 0) {
        result2 = -result2;
      }
    } else {
      result2 = Math.round(offsetRatio);
    }
    return result2;
  }
});
emitter_registrator_default({
  emitter: SwipeEmitter,
  events: [SWIPE_START_EVENT, SWIPE_EVENT, SWIPE_END_EVENT]
});

// node_modules/devextreme/esm/ui/list/item.js
var LIST_ITEM_BADGE_CONTAINER_CLASS = "dx-list-item-badge-container";
var LIST_ITEM_BADGE_CLASS = "dx-list-item-badge";
var BADGE_CLASS = "dx-badge";
var LIST_ITEM_CHEVRON_CONTAINER_CLASS = "dx-list-item-chevron-container";
var LIST_ITEM_CHEVRON_CLASS = "dx-list-item-chevron";
var ListItem = item_default.inherit({
  _renderWatchers: function() {
    this.callBase();
    this._startWatcher("badge", this._renderBadge.bind(this));
    this._startWatcher("showChevron", this._renderShowChevron.bind(this));
  },
  _renderBadge: function(badge) {
    this._$element.children("." + LIST_ITEM_BADGE_CONTAINER_CLASS).remove();
    if (!badge) {
      return;
    }
    var $badge = renderer_default("<div>").addClass(LIST_ITEM_BADGE_CONTAINER_CLASS).append(renderer_default("<div>").addClass(LIST_ITEM_BADGE_CLASS).addClass(BADGE_CLASS).text(badge));
    var $chevron = this._$element.children("." + LIST_ITEM_CHEVRON_CONTAINER_CLASS).first();
    $chevron.length > 0 ? $badge.insertBefore($chevron) : $badge.appendTo(this._$element);
  },
  _renderShowChevron: function(showChevron) {
    this._$element.children("." + LIST_ITEM_CHEVRON_CONTAINER_CLASS).remove();
    if (!showChevron) {
      return;
    }
    var $chevronContainer = renderer_default("<div>").addClass(LIST_ITEM_CHEVRON_CONTAINER_CLASS);
    var $chevron = renderer_default("<div>").addClass(LIST_ITEM_CHEVRON_CLASS);
    $chevronContainer.append($chevron).appendTo(this._$element);
  }
});
var item_default2 = ListItem;

// node_modules/devextreme/esm/ui/scroll_view/ui.scroll_view.native.pull_down.js
var SCROLLVIEW_PULLDOWN_REFRESHING_CLASS = "dx-scrollview-pull-down-loading";
var SCROLLVIEW_PULLDOWN_READY_CLASS = "dx-scrollview-pull-down-ready";
var SCROLLVIEW_PULLDOWN_IMAGE_CLASS = "dx-scrollview-pull-down-image";
var SCROLLVIEW_PULLDOWN_INDICATOR_CLASS = "dx-scrollview-pull-down-indicator";
var SCROLLVIEW_PULLDOWN_TEXT_CLASS = "dx-scrollview-pull-down-text";
var SCROLLVIEW_PULLDOWN_VISIBLE_TEXT_CLASS = "dx-scrollview-pull-down-text-visible";
var STATE_RELEASED = 0;
var STATE_READY = 1;
var STATE_REFRESHING = 2;
var STATE_LOADING = 3;
var PULLDOWN_RELEASE_TIME = 400;
var PullDownNativeScrollViewStrategy = ui_scrollable_native_default.inherit({
  _init: function(scrollView) {
    this.callBase(scrollView);
    this._$topPocket = scrollView._$topPocket;
    this._$pullDown = scrollView._$pullDown;
    this._$refreshingText = scrollView._$refreshingText;
    this._$scrollViewContent = renderer_default(scrollView.content());
    this._$container = renderer_default(scrollView.container());
    this._initCallbacks();
  },
  _initCallbacks: function() {
    this.pullDownCallbacks = callbacks_default();
    this.releaseCallbacks = callbacks_default();
    this.reachBottomCallbacks = callbacks_default();
  },
  render: function() {
    this.callBase();
    this._renderPullDown();
    this._releaseState();
  },
  _renderPullDown: function() {
    var $image = renderer_default("<div>").addClass(SCROLLVIEW_PULLDOWN_IMAGE_CLASS);
    var $loadContainer = renderer_default("<div>").addClass(SCROLLVIEW_PULLDOWN_INDICATOR_CLASS);
    var $loadIndicator = new load_indicator_default(renderer_default("<div>")).$element();
    var $text = this._$pullDownText = renderer_default("<div>").addClass(SCROLLVIEW_PULLDOWN_TEXT_CLASS);
    this._$pullingDownText = renderer_default("<div>").text(this.option("pullingDownText")).appendTo($text);
    this._$pulledDownText = renderer_default("<div>").text(this.option("pulledDownText")).appendTo($text);
    this._$refreshingText = renderer_default("<div>").text(this.option("refreshingText")).appendTo($text);
    this._$pullDown.empty().append($image).append($loadContainer.append($loadIndicator)).append($text);
  },
  _releaseState: function() {
    this._state = STATE_RELEASED;
    this._refreshPullDownText();
  },
  _refreshPullDownText: function() {
    var that = this;
    var pullDownTextItems = [{
      element: this._$pullingDownText,
      visibleState: STATE_RELEASED
    }, {
      element: this._$pulledDownText,
      visibleState: STATE_READY
    }, {
      element: this._$refreshingText,
      visibleState: STATE_REFRESHING
    }];
    each(pullDownTextItems, function(_, item) {
      var action = that._state === item.visibleState ? "addClass" : "removeClass";
      item.element[action](SCROLLVIEW_PULLDOWN_VISIBLE_TEXT_CLASS);
    });
  },
  update: function() {
    this.callBase();
    this._setTopPocketOffset();
  },
  _updateDimensions: function() {
    this.callBase();
    this._topPocketSize = this._$topPocket.get(0).clientHeight;
    var contentEl = this._$scrollViewContent.get(0);
    var containerEl = this._$container.get(0);
    this._bottomBoundary = Math.max(contentEl.clientHeight - containerEl.clientHeight, 0);
  },
  _allowedDirections: function() {
    var allowedDirections = this.callBase();
    allowedDirections.vertical = allowedDirections.vertical || this._pullDownEnabled;
    return allowedDirections;
  },
  _setTopPocketOffset: function() {
    this._$topPocket.css({
      top: -this._topPocketSize
    });
  },
  handleEnd: function() {
    this.callBase();
    this._complete();
  },
  handleStop: function() {
    this.callBase();
    this._complete();
  },
  _complete: function() {
    if (this._state === STATE_READY) {
      this._setPullDownOffset(this._topPocketSize);
      clearTimeout(this._pullDownRefreshTimeout);
      this._pullDownRefreshTimeout = setTimeout((function() {
        this._pullDownRefreshing();
      }).bind(this), 400);
    }
  },
  _setPullDownOffset: function(offset2) {
    move(this._$topPocket, {
      top: offset2
    });
    move(this._$scrollViewContent, {
      top: offset2
    });
  },
  handleScroll: function(e) {
    this.callBase(e);
    if (this._state === STATE_REFRESHING) {
      return;
    }
    var currentLocation = this.location().top;
    var scrollDelta = (this._location || 0) - currentLocation;
    this._location = currentLocation;
    if (this._isPullDown()) {
      this._pullDownReady();
    } else if (scrollDelta > 0 && this._isReachBottom()) {
      this._reachBottom();
    } else {
      this._stateReleased();
    }
  },
  _isPullDown: function() {
    return this._pullDownEnabled && this._location >= this._topPocketSize;
  },
  _isReachBottom: function() {
    return this._reachBottomEnabled && Math.round(this._bottomBoundary + Math.floor(this._location)) <= 1;
  },
  _reachBottom: function() {
    if (this._state === STATE_LOADING) {
      return;
    }
    this._state = STATE_LOADING;
    this.reachBottomCallbacks.fire();
  },
  _pullDownReady: function() {
    if (this._state === STATE_READY) {
      return;
    }
    this._state = STATE_READY;
    this._$pullDown.addClass(SCROLLVIEW_PULLDOWN_READY_CLASS);
    this._refreshPullDownText();
  },
  _stateReleased: function() {
    if (this._state === STATE_RELEASED) {
      return;
    }
    this._$pullDown.removeClass(SCROLLVIEW_PULLDOWN_REFRESHING_CLASS).removeClass(SCROLLVIEW_PULLDOWN_READY_CLASS);
    this._releaseState();
  },
  _pullDownRefreshing: function() {
    if (this._state === STATE_REFRESHING) {
      return;
    }
    this._state = STATE_REFRESHING;
    this._$pullDown.addClass(SCROLLVIEW_PULLDOWN_REFRESHING_CLASS).removeClass(SCROLLVIEW_PULLDOWN_READY_CLASS);
    this._refreshPullDownText();
    this.pullDownCallbacks.fire();
  },
  pullDownEnable: function(enabled) {
    if (enabled) {
      this._updateDimensions();
      this._setTopPocketOffset();
    }
    this._pullDownEnabled = enabled;
  },
  reachBottomEnable: function(enabled) {
    this._reachBottomEnabled = enabled;
  },
  pendingRelease: function() {
    this._state = STATE_READY;
  },
  release: function() {
    var deferred = new Deferred();
    this._updateDimensions();
    clearTimeout(this._releaseTimeout);
    if (this._state === STATE_LOADING) {
      this._state = STATE_RELEASED;
    }
    this._releaseTimeout = setTimeout((function() {
      this._setPullDownOffset(0);
      this._stateReleased();
      this.releaseCallbacks.fire();
      this._updateAction();
      deferred.resolve();
    }).bind(this), PULLDOWN_RELEASE_TIME);
    return deferred.promise();
  },
  dispose: function() {
    clearTimeout(this._pullDownRefreshTimeout);
    clearTimeout(this._releaseTimeout);
    this.callBase();
  }
});
var ui_scroll_view_native_pull_down_default = PullDownNativeScrollViewStrategy;

// node_modules/devextreme/esm/ui/scroll_view/ui.scroll_view.native.swipe_down.js
var SCROLLVIEW_PULLDOWN_DOWN_LOADING_CLASS = "dx-scrollview-pull-down-loading";
var SCROLLVIEW_PULLDOWN_INDICATOR_CLASS2 = "dx-scrollview-pull-down-indicator";
var SCROLLVIEW_PULLDOWN_REFRESHING_CLASS2 = "dx-scrollview-pull-down-refreshing";
var PULLDOWN_ICON_CLASS = "dx-icon-pulldown";
var STATE_RELEASED2 = 0;
var STATE_READY2 = 1;
var STATE_REFRESHING2 = 2;
var STATE_TOUCHED = 4;
var STATE_PULLED = 5;
var SwipeDownNativeScrollViewStrategy = ui_scrollable_native_default.inherit({
  _init: function(scrollView) {
    this.callBase(scrollView);
    this._$topPocket = scrollView._$topPocket;
    this._$pullDown = scrollView._$pullDown;
    this._$scrollViewContent = renderer_default(scrollView.content());
    this._$container = renderer_default(scrollView.container());
    this._initCallbacks();
    this._location = 0;
  },
  _initCallbacks: function() {
    this.pullDownCallbacks = callbacks_default();
    this.releaseCallbacks = callbacks_default();
    this.reachBottomCallbacks = callbacks_default();
  },
  render: function() {
    this.callBase();
    this._renderPullDown();
    this._releaseState();
  },
  _renderPullDown: function() {
    var $loadContainer = renderer_default("<div>").addClass(SCROLLVIEW_PULLDOWN_INDICATOR_CLASS2);
    var $loadIndicator = new load_indicator_default(renderer_default("<div>")).$element();
    this._$icon = renderer_default("<div>").addClass(PULLDOWN_ICON_CLASS);
    this._$pullDown.empty().append(this._$icon).append($loadContainer.append($loadIndicator));
  },
  _releaseState: function() {
    this._state = STATE_RELEASED2;
    this._releasePullDown();
    this._updateDimensions();
  },
  _releasePullDown: function() {
    this._$pullDown.css({
      opacity: 0
    });
  },
  _updateDimensions: function() {
    this.callBase();
    this._topPocketSize = this._$topPocket.get(0).clientHeight;
    var contentEl = this._$scrollViewContent.get(0);
    var containerEl = this._$container.get(0);
    this._bottomBoundary = Math.max(contentEl.clientHeight - containerEl.clientHeight, 0);
  },
  _allowedDirections: function() {
    var allowedDirections = this.callBase();
    allowedDirections.vertical = allowedDirections.vertical || this._pullDownEnabled;
    return allowedDirections;
  },
  handleInit: function(e) {
    this.callBase(e);
    if (this._state === STATE_RELEASED2 && 0 === this._location) {
      this._startClientY = eventData(e.originalEvent).y;
      this._state = STATE_TOUCHED;
    }
  },
  handleMove: function(e) {
    this.callBase(e);
    this._deltaY = eventData(e.originalEvent).y - this._startClientY;
    if (this._state === STATE_TOUCHED) {
      if (this._pullDownEnabled && this._deltaY > 0) {
        this._state = STATE_PULLED;
      } else {
        this._complete();
      }
    }
    if (this._state === STATE_PULLED) {
      e.preventDefault();
      this._movePullDown();
    }
  },
  _movePullDown: function() {
    var pullDownHeight = this._getPullDownHeight();
    var top = Math.min(3 * pullDownHeight, this._deltaY + this._getPullDownStartPosition());
    var angle = 180 * top / pullDownHeight / 3;
    this._$pullDown.css({
      opacity: 1
    }).toggleClass(SCROLLVIEW_PULLDOWN_REFRESHING_CLASS2, top < pullDownHeight);
    move(this._$pullDown, {
      top
    });
    this._$icon.css({
      transform: "rotate(" + angle + "deg)"
    });
  },
  _isPullDown: function() {
    return this._pullDownEnabled && this._state === STATE_PULLED && this._deltaY >= this._getPullDownHeight() - this._getPullDownStartPosition();
  },
  _getPullDownHeight: function() {
    return Math.round(0.05 * getOuterHeight(this._$element));
  },
  _getPullDownStartPosition: function() {
    return -Math.round(1.5 * getOuterHeight(this._$pullDown));
  },
  handleEnd: function() {
    if (this._isPullDown()) {
      this._pullDownRefreshing();
    }
    this._complete();
  },
  handleStop: function() {
    this._complete();
  },
  _complete: function() {
    if (this._state === STATE_TOUCHED || this._state === STATE_PULLED) {
      this._releaseState();
    }
  },
  handleScroll: function(e) {
    this.callBase(e);
    if (this._state === STATE_REFRESHING2) {
      return;
    }
    var currentLocation = this.location().top;
    var scrollDelta = this._location - currentLocation;
    this._location = currentLocation;
    if (scrollDelta > 0 && this._isReachBottom()) {
      this._reachBottom();
    } else {
      this._stateReleased();
    }
  },
  _isReachBottom: function() {
    return this._reachBottomEnabled && Math.round(this._bottomBoundary + Math.floor(this._location)) <= 1;
  },
  _reachBottom: function() {
    this.reachBottomCallbacks.fire();
  },
  _stateReleased: function() {
    if (this._state === STATE_RELEASED2) {
      return;
    }
    this._$pullDown.removeClass(SCROLLVIEW_PULLDOWN_DOWN_LOADING_CLASS);
    this._releaseState();
  },
  _pullDownRefreshing: function() {
    this._state = STATE_REFRESHING2;
    this._pullDownRefreshHandler();
  },
  _pullDownRefreshHandler: function() {
    this._refreshPullDown();
    this.pullDownCallbacks.fire();
  },
  _refreshPullDown: function() {
    this._$pullDown.addClass(SCROLLVIEW_PULLDOWN_DOWN_LOADING_CLASS);
    move(this._$pullDown, {
      top: this._getPullDownHeight()
    });
  },
  pullDownEnable: function(enabled) {
    this._$topPocket.toggle(enabled);
    this._pullDownEnabled = enabled;
  },
  reachBottomEnable: function(enabled) {
    this._reachBottomEnabled = enabled;
  },
  pendingRelease: function() {
    this._state = STATE_READY2;
  },
  release: function() {
    var deferred = new Deferred();
    this._updateDimensions();
    clearTimeout(this._releaseTimeout);
    this._releaseTimeout = setTimeout((function() {
      this._stateReleased();
      this.releaseCallbacks.fire();
      this._updateAction();
      deferred.resolve();
    }).bind(this), 800);
    return deferred.promise();
  },
  dispose: function() {
    clearTimeout(this._pullDownRefreshTimeout);
    clearTimeout(this._releaseTimeout);
    this.callBase();
  }
});
var ui_scroll_view_native_swipe_down_default = SwipeDownNativeScrollViewStrategy;

// node_modules/devextreme/esm/ui/scroll_view/ui.scroll_view.simulated.js
var math = Math;
var SCROLLVIEW_PULLDOWN_REFRESHING_CLASS3 = "dx-scrollview-pull-down-loading";
var SCROLLVIEW_PULLDOWN_READY_CLASS2 = "dx-scrollview-pull-down-ready";
var SCROLLVIEW_PULLDOWN_IMAGE_CLASS2 = "dx-scrollview-pull-down-image";
var SCROLLVIEW_PULLDOWN_INDICATOR_CLASS3 = "dx-scrollview-pull-down-indicator";
var SCROLLVIEW_PULLDOWN_TEXT_CLASS2 = "dx-scrollview-pull-down-text";
var SCROLLVIEW_PULLDOWN_VISIBLE_TEXT_CLASS2 = "dx-scrollview-pull-down-text-visible";
var STATE_RELEASED3 = 0;
var STATE_READY3 = 1;
var STATE_REFRESHING3 = 2;
var STATE_LOADING2 = 3;
var ScrollViewScroller = Scroller.inherit({
  ctor: function() {
    this._topPocketSize = 0;
    this._bottomPocketSize = 0;
    this.callBase.apply(this, arguments);
    this._initCallbacks();
    this._releaseState();
  },
  _releaseState: function() {
    this._state = STATE_RELEASED3;
    this._refreshPullDownText();
  },
  _refreshPullDownText: function() {
    var that = this;
    var pullDownTextItems = [{
      element: this._$pullingDownText,
      visibleState: STATE_RELEASED3
    }, {
      element: this._$pulledDownText,
      visibleState: STATE_READY3
    }, {
      element: this._$refreshingText,
      visibleState: STATE_REFRESHING3
    }];
    each(pullDownTextItems, function(_, item) {
      var action = that._state === item.visibleState ? "addClass" : "removeClass";
      item.element[action](SCROLLVIEW_PULLDOWN_VISIBLE_TEXT_CLASS2);
    });
  },
  _initCallbacks: function() {
    this.pullDownCallbacks = callbacks_default();
    this.releaseCallbacks = callbacks_default();
    this.reachBottomCallbacks = callbacks_default();
  },
  _updateBounds: function() {
    var considerPockets = "horizontal" !== this._direction;
    if (considerPockets) {
      this._topPocketSize = this._$topPocket.get(0).clientHeight;
      this._bottomPocketSize = this._$bottomPocket.get(0).clientHeight;
      var containerEl = this._$container.get(0);
      var contentEl = this._$content.get(0);
      this._bottomBoundary = Math.max(contentEl.clientHeight - this._bottomPocketSize - containerEl.clientHeight, 0);
    }
    this.callBase();
  },
  _updateScrollbar: function() {
    this._scrollbar.option({
      containerSize: this._containerSize(),
      contentSize: this._contentSize() - this._topPocketSize - this._bottomPocketSize,
      scaleRatio: this._getScaleRatio()
    });
  },
  _moveContent: function() {
    this.callBase();
    if (this._isPullDown()) {
      this._pullDownReady();
    } else if (this._isReachBottom()) {
      this._reachBottomReady();
    } else if (this._state !== STATE_RELEASED3) {
      this._stateReleased();
    }
  },
  _moveScrollbar: function() {
    this._scrollbar.moveTo(this._topPocketSize + this._location);
  },
  _isPullDown: function() {
    return this._pullDownEnabled && this._location >= 0;
  },
  _isReachBottom: function() {
    var containerEl = this._$container.get(0);
    return this._reachBottomEnabled && Math.round(this._bottomBoundary - Math.ceil(containerEl.scrollTop)) <= 1;
  },
  _scrollComplete: function() {
    if (this._inBounds() && this._state === STATE_READY3) {
      this._pullDownRefreshing();
    } else if (this._inBounds() && this._state === STATE_LOADING2) {
      this._reachBottomLoading();
    } else {
      this.callBase();
    }
  },
  _reachBottomReady: function() {
    if (this._state === STATE_LOADING2) {
      return;
    }
    this._state = STATE_LOADING2;
    this._minOffset = this._getMinOffset();
  },
  _getMaxOffset: function() {
    return -this._topPocketSize;
  },
  _getMinOffset: function() {
    return math.min(this.callBase(), -this._topPocketSize);
  },
  _reachBottomLoading: function() {
    this.reachBottomCallbacks.fire();
  },
  _pullDownReady: function() {
    if (this._state === STATE_READY3) {
      return;
    }
    this._state = STATE_READY3;
    this._maxOffset = 0;
    this._$pullDown.addClass(SCROLLVIEW_PULLDOWN_READY_CLASS2);
    this._refreshPullDownText();
  },
  _stateReleased: function() {
    if (this._state === STATE_RELEASED3) {
      return;
    }
    this._releaseState();
    this._updateBounds();
    this._$pullDown.removeClass(SCROLLVIEW_PULLDOWN_REFRESHING_CLASS3).removeClass(SCROLLVIEW_PULLDOWN_READY_CLASS2);
    this.releaseCallbacks.fire();
  },
  _pullDownRefreshing: function() {
    if (this._state === STATE_REFRESHING3) {
      return;
    }
    this._state = STATE_REFRESHING3;
    this._$pullDown.addClass(SCROLLVIEW_PULLDOWN_REFRESHING_CLASS3).removeClass(SCROLLVIEW_PULLDOWN_READY_CLASS2);
    this._refreshPullDownText();
    this.pullDownCallbacks.fire();
  },
  _releaseHandler: function() {
    if (this._state === STATE_RELEASED3) {
      this._moveToBounds();
    }
    this._update();
    if (this._releaseTask) {
      this._releaseTask.abort();
    }
    this._releaseTask = executeAsync(this._release.bind(this));
    return this._releaseTask.promise;
  },
  _release: function() {
    this._stateReleased();
    this._scrollComplete();
  },
  _reachBottomEnablingHandler: function(enabled) {
    if (this._reachBottomEnabled === enabled) {
      return;
    }
    this._reachBottomEnabled = enabled;
    this._updateBounds();
  },
  _pullDownEnablingHandler: function(enabled) {
    if (this._pullDownEnabled === enabled) {
      return;
    }
    this._pullDownEnabled = enabled;
    this._considerTopPocketChange();
    this._updateHandler();
  },
  _considerTopPocketChange: function() {
    this._location -= getHeight(this._$topPocket) || -this._topPocketSize;
    this._maxOffset = 0;
    this._move();
  },
  _pendingReleaseHandler: function() {
    this._state = STATE_READY3;
  },
  dispose: function() {
    if (this._releaseTask) {
      this._releaseTask.abort();
    }
    this.callBase();
  }
});
var SimulatedScrollViewStrategy = SimulatedStrategy.inherit({
  _init: function(scrollView) {
    this.callBase(scrollView);
    this._$pullDown = scrollView._$pullDown;
    this._$topPocket = scrollView._$topPocket;
    this._$bottomPocket = scrollView._$bottomPocket;
    this._initCallbacks();
  },
  _initCallbacks: function() {
    this.pullDownCallbacks = callbacks_default();
    this.releaseCallbacks = callbacks_default();
    this.reachBottomCallbacks = callbacks_default();
  },
  render: function() {
    this._renderPullDown();
    this.callBase();
  },
  _renderPullDown: function() {
    var $image = renderer_default("<div>").addClass(SCROLLVIEW_PULLDOWN_IMAGE_CLASS2);
    var $loadContainer = renderer_default("<div>").addClass(SCROLLVIEW_PULLDOWN_INDICATOR_CLASS3);
    var $loadIndicator = new load_indicator_default(renderer_default("<div>")).$element();
    var $text = this._$pullDownText = renderer_default("<div>").addClass(SCROLLVIEW_PULLDOWN_TEXT_CLASS2);
    this._$pullingDownText = renderer_default("<div>").text(this.option("pullingDownText")).appendTo($text);
    this._$pulledDownText = renderer_default("<div>").text(this.option("pulledDownText")).appendTo($text);
    this._$refreshingText = renderer_default("<div>").text(this.option("refreshingText")).appendTo($text);
    this._$pullDown.empty().append($image).append($loadContainer.append($loadIndicator)).append($text);
  },
  pullDownEnable: function(enabled) {
    this._eventHandler("pullDownEnabling", enabled);
  },
  reachBottomEnable: function(enabled) {
    this._eventHandler("reachBottomEnabling", enabled);
  },
  _createScroller: function(direction) {
    var that = this;
    var scroller = that._scrollers[direction] = new ScrollViewScroller(that._scrollerOptions(direction));
    scroller.pullDownCallbacks.add(function() {
      that.pullDownCallbacks.fire();
    });
    scroller.releaseCallbacks.add(function() {
      that.releaseCallbacks.fire();
    });
    scroller.reachBottomCallbacks.add(function() {
      that.reachBottomCallbacks.fire();
    });
  },
  _scrollerOptions: function(direction) {
    return extend(this.callBase(direction), {
      $topPocket: this._$topPocket,
      $bottomPocket: this._$bottomPocket,
      $pullDown: this._$pullDown,
      $pullDownText: this._$pullDownText,
      $pullingDownText: this._$pullingDownText,
      $pulledDownText: this._$pulledDownText,
      $refreshingText: this._$refreshingText
    });
  },
  pendingRelease: function() {
    this._eventHandler("pendingRelease");
  },
  release: function() {
    return this._eventHandler("release").done(this._updateAction);
  },
  location: function() {
    var location = this.callBase();
    location.top += getHeight(this._$topPocket);
    return location;
  },
  dispose: function() {
    each(this._scrollers, function() {
      this.dispose();
    });
    this.callBase();
  }
});
var ui_scroll_view_simulated_default = SimulatedScrollViewStrategy;

// node_modules/devextreme/esm/ui/scroll_view/ui.scroll_view.js
var SCROLLVIEW_CLASS = "dx-scrollview";
var SCROLLVIEW_CONTENT_CLASS = SCROLLVIEW_CLASS + "-content";
var SCROLLVIEW_TOP_POCKET_CLASS = SCROLLVIEW_CLASS + "-top-pocket";
var SCROLLVIEW_BOTTOM_POCKET_CLASS = SCROLLVIEW_CLASS + "-bottom-pocket";
var SCROLLVIEW_PULLDOWN_CLASS = SCROLLVIEW_CLASS + "-pull-down";
var SCROLLVIEW_REACHBOTTOM_CLASS = SCROLLVIEW_CLASS + "-scrollbottom";
var SCROLLVIEW_REACHBOTTOM_INDICATOR_CLASS = SCROLLVIEW_REACHBOTTOM_CLASS + "-indicator";
var SCROLLVIEW_REACHBOTTOM_TEXT_CLASS = SCROLLVIEW_REACHBOTTOM_CLASS + "-text";
var SCROLLVIEW_LOADPANEL = SCROLLVIEW_CLASS + "-loadpanel";
var refreshStrategies = {
  pullDown: ui_scroll_view_native_pull_down_default,
  swipeDown: ui_scroll_view_native_swipe_down_default,
  simulated: ui_scroll_view_simulated_default
};
var isServerSide = !hasWindow();
var scrollViewServerConfig = {
  finishLoading: noop2,
  release: noop2,
  refresh: noop2,
  scrollOffset: () => ({
    top: 0,
    left: 0
  }),
  _optionChanged: function(args) {
    if ("onUpdated" !== args.name) {
      return this.callBase.apply(this, arguments);
    }
  }
};
var ScrollView = ui_scrollable_default.inherit(isServerSide ? scrollViewServerConfig : {
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      pullingDownText: message_default.format("dxScrollView-pullingDownText"),
      pulledDownText: message_default.format("dxScrollView-pulledDownText"),
      refreshingText: message_default.format("dxScrollView-refreshingText"),
      reachBottomText: message_default.format("dxScrollView-reachBottomText"),
      onPullDown: null,
      onReachBottom: null,
      refreshStrategy: "pullDown"
    });
  },
  _defaultOptionsRules: function() {
    return this.callBase().concat([{
      device: function() {
        var realDevice2 = devices_default.real();
        return "android" === realDevice2.platform;
      },
      options: {
        refreshStrategy: "swipeDown"
      }
    }, {
      device: function() {
        return isMaterialBased();
      },
      options: {
        pullingDownText: "",
        pulledDownText: "",
        refreshingText: "",
        reachBottomText: ""
      }
    }]);
  },
  _init: function() {
    this.callBase();
    this._loadingIndicatorEnabled = true;
  },
  _initScrollableMarkup: function() {
    this.callBase();
    this.$element().addClass(SCROLLVIEW_CLASS);
    this._initContent();
    this._initTopPocket();
    this._initBottomPocket();
    this._initLoadPanel();
  },
  _initContent: function() {
    var $content = renderer_default("<div>").addClass(SCROLLVIEW_CONTENT_CLASS);
    this._$content.wrapInner($content);
  },
  _initTopPocket: function() {
    var $topPocket = this._$topPocket = renderer_default("<div>").addClass(SCROLLVIEW_TOP_POCKET_CLASS);
    var $pullDown = this._$pullDown = renderer_default("<div>").addClass(SCROLLVIEW_PULLDOWN_CLASS);
    $topPocket.append($pullDown);
    this._$content.prepend($topPocket);
  },
  _initBottomPocket: function() {
    var $bottomPocket = this._$bottomPocket = renderer_default("<div>").addClass(SCROLLVIEW_BOTTOM_POCKET_CLASS);
    var $reachBottom = this._$reachBottom = renderer_default("<div>").addClass(SCROLLVIEW_REACHBOTTOM_CLASS);
    var $loadContainer = renderer_default("<div>").addClass(SCROLLVIEW_REACHBOTTOM_INDICATOR_CLASS);
    var $loadIndicator = new load_indicator_default(renderer_default("<div>")).$element();
    var $text = this._$reachBottomText = renderer_default("<div>").addClass(SCROLLVIEW_REACHBOTTOM_TEXT_CLASS);
    this._updateReachBottomText();
    $reachBottom.append($loadContainer.append($loadIndicator)).append($text);
    $bottomPocket.append($reachBottom);
    this._$content.append($bottomPocket);
  },
  _initLoadPanel: function() {
    var $loadPanelElement = renderer_default("<div>").addClass(SCROLLVIEW_LOADPANEL).appendTo(this.$element());
    var loadPanelOptions = {
      shading: false,
      delay: 400,
      message: this.option("refreshingText"),
      position: {
        of: this.$element()
      }
    };
    this._loadPanel = this._createComponent($loadPanelElement, load_panel_default, loadPanelOptions);
  },
  _updateReachBottomText: function() {
    this._$reachBottomText.text(this.option("reachBottomText"));
  },
  _createStrategy: function() {
    var strategyName = this.option("useNative") ? this.option("refreshStrategy") : "simulated";
    var strategyClass = refreshStrategies[strategyName];
    this._strategy = new strategyClass(this);
    this._strategy.pullDownCallbacks.add(this._pullDownHandler.bind(this));
    this._strategy.releaseCallbacks.add(this._releaseHandler.bind(this));
    this._strategy.reachBottomCallbacks.add(this._reachBottomHandler.bind(this));
  },
  _createActions: function() {
    this.callBase();
    this._pullDownAction = this._createActionByOption("onPullDown");
    this._reachBottomAction = this._createActionByOption("onReachBottom");
    this._tryRefreshPocketState();
  },
  _tryRefreshPocketState: function() {
    this._pullDownEnable(this.hasActionSubscription("onPullDown"));
    this._reachBottomEnable(this.hasActionSubscription("onReachBottom"));
  },
  on: function(eventName) {
    var result2 = this.callBase.apply(this, arguments);
    if ("pullDown" === eventName || "reachBottom" === eventName) {
      this._tryRefreshPocketState();
    }
    return result2;
  },
  _pullDownEnable: function(enabled) {
    if (0 === arguments.length) {
      return this._pullDownEnabled;
    }
    if (this._$pullDown && this._strategy) {
      this._$pullDown.toggle(enabled);
      this._strategy.pullDownEnable(enabled);
      this._pullDownEnabled = enabled;
    }
  },
  _reachBottomEnable: function(enabled) {
    if (0 === arguments.length) {
      return this._reachBottomEnabled;
    }
    if (this._$reachBottom && this._strategy) {
      this._$reachBottom.toggle(enabled);
      this._strategy.reachBottomEnable(enabled);
      this._reachBottomEnabled = enabled;
    }
  },
  _pullDownHandler: function() {
    this._loadingIndicator(false);
    this._pullDownLoading();
  },
  _loadingIndicator: function(value2) {
    if (arguments.length < 1) {
      return this._loadingIndicatorEnabled;
    }
    this._loadingIndicatorEnabled = value2;
  },
  _pullDownLoading: function() {
    this.startLoading();
    this._pullDownAction();
  },
  _reachBottomHandler: function() {
    this._loadingIndicator(false);
    this._reachBottomLoading();
  },
  _reachBottomLoading: function() {
    this.startLoading();
    this._reachBottomAction();
  },
  _releaseHandler: function() {
    this.finishLoading();
    this._loadingIndicator(true);
  },
  _optionChanged: function(args) {
    switch (args.name) {
      case "onPullDown":
      case "onReachBottom":
        this._createActions();
        break;
      case "pullingDownText":
      case "pulledDownText":
      case "refreshingText":
      case "refreshStrategy":
        this._invalidate();
        break;
      case "reachBottomText":
        this._updateReachBottomText();
        break;
      default:
        this.callBase(args);
    }
  },
  content: function() {
    return getPublicElement(this._$content.children().eq(1));
  },
  release: function(preventReachBottom) {
    if (void 0 !== preventReachBottom) {
      this.toggleLoading(!preventReachBottom);
    }
    return this._strategy.release();
  },
  toggleLoading: function(showOrHide) {
    this._reachBottomEnable(showOrHide);
  },
  refresh: function() {
    if (!this.hasActionSubscription("onPullDown")) {
      return;
    }
    this._strategy.pendingRelease();
    this._pullDownLoading();
  },
  startLoading: function() {
    if (this._loadingIndicator() && this.$element().is(":visible")) {
      this._loadPanel.show();
    }
    this._lock();
  },
  finishLoading: function() {
    this._loadPanel.hide();
    this._unlock();
  },
  _dispose: function() {
    this._strategy.dispose();
    this.callBase();
    if (this._loadPanel) {
      this._loadPanel.$element().remove();
    }
  }
});
component_registrator_default("dxScrollView", ScrollView);
var ui_scroll_view_default = ScrollView;

// node_modules/devextreme/esm/ui/scroll_view.js
var scroll_view_default = ui_scroll_view_default;

// node_modules/devextreme/esm/ui/collection/ui.collection_widget.live_update.js
var PRIVATE_KEY_FIELD = "__dx_key__";
var ui_collection_widget_live_update_default = ui_collection_widget_edit_default.inherit({
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      repaintChangesOnly: false
    });
  },
  ctor: function() {
    var _this$_dataController;
    this.callBase.apply(this, arguments);
    this._customizeStoreLoadOptions = (e) => {
      var dataController2 = this._dataController;
      if (dataController2.getDataSource() && !this._dataController.isLoaded()) {
        this._correctionIndex = 0;
      }
      if (this._correctionIndex && e.storeLoadOptions) {
        e.storeLoadOptions.skip += this._correctionIndex;
      }
    }, null === (_this$_dataController = this._dataController) || void 0 === _this$_dataController ? void 0 : _this$_dataController.on("customizeStoreLoadOptions", this._customizeStoreLoadOptions);
  },
  reload: function() {
    this._correctionIndex = 0;
  },
  _init: function() {
    this.callBase();
    this._refreshItemsCache();
    this._correctionIndex = 0;
  },
  _findItemElementByKey: function(key) {
    var result2 = renderer_default();
    var keyExpr = this.key();
    this.itemElements().each((_, item) => {
      var $item = renderer_default(item);
      var itemData = this._getItemData($item);
      if (keyExpr ? keysEqual(keyExpr, this.keyOf(itemData), key) : this._isItemEquals(itemData, key)) {
        result2 = $item;
        return false;
      }
    });
    return result2;
  },
  _dataSourceChangedHandler: function(newItems, e) {
    if (null !== e && void 0 !== e && e.changes) {
      this._modifyByChanges(e.changes);
    } else {
      this.callBase(newItems, e);
      this._refreshItemsCache();
    }
  },
  _isItemEquals: function(item1, item2) {
    if (item1 && item1[PRIVATE_KEY_FIELD]) {
      item1 = item1.data;
    }
    try {
      return JSON.stringify(item1) === JSON.stringify(item2);
    } catch (e) {
      return item1 === item2;
    }
  },
  _isItemStrictEquals: function(item1, item2) {
    return this._isItemEquals(item1, item2);
  },
  _shouldAddNewGroup: function(changes, items) {
    var result2 = false;
    if (this.option("grouped")) {
      if (!changes.length) {
        result2 = true;
      }
      each(changes, (i, change) => {
        if ("insert" === change.type) {
          result2 = true;
          each(items, (_, item) => {
            if (void 0 !== change.data.key && change.data.key === item.key) {
              result2 = false;
              return false;
            }
          });
        }
      });
    }
    return result2;
  },
  _partialRefresh: function() {
    if (this.option("repaintChangesOnly")) {
      var result2 = findChanges(this._itemsCache, this._editStrategy.itemsGetter(), (data3) => {
        if (data3 && void 0 !== data3[PRIVATE_KEY_FIELD]) {
          return data3[PRIVATE_KEY_FIELD];
        }
        return this.keyOf(data3);
      }, this._isItemStrictEquals.bind(this));
      if (result2 && this._itemsCache.length && !this._shouldAddNewGroup(result2, this._itemsCache)) {
        this._modifyByChanges(result2, true);
        this._renderEmptyMessage();
        return true;
      } else {
        this._refreshItemsCache();
      }
    }
    return false;
  },
  _refreshItemsCache: function() {
    if (this.option("repaintChangesOnly")) {
      var items = this._editStrategy.itemsGetter();
      try {
        this._itemsCache = extend(true, [], items);
        if (!this.key()) {
          this._itemsCache = this._itemsCache.map((itemCache, index2) => ({
            [PRIVATE_KEY_FIELD]: items[index2],
            data: itemCache
          }));
        }
      } catch (e) {
        this._itemsCache = extend([], items);
      }
    }
  },
  _dispose: function() {
    this._dataController.off("customizeStoreLoadOptions", this._customizeStoreLoadOptions);
    this.callBase();
  },
  _updateByChange: function(keyInfo, items, change, isPartialRefresh) {
    if (isPartialRefresh) {
      this._renderItem(change.index, change.data, null, this._findItemElementByKey(change.key));
    } else {
      var changedItem = items[indexByKey(keyInfo, items, change.key)];
      if (changedItem) {
        update(keyInfo, items, change.key, change.data).done(() => {
          this._renderItem(items.indexOf(changedItem), changedItem, null, this._findItemElementByKey(change.key));
        });
      }
    }
  },
  _insertByChange: function(keyInfo, items, change, isPartialRefresh) {
    when(isPartialRefresh || insert(keyInfo, items, change.data, change.index)).done(() => {
      var _change$index;
      this._beforeItemElementInserted(change);
      this._renderItem(null !== (_change$index = change.index) && void 0 !== _change$index ? _change$index : items.length, change.data);
      this._afterItemElementInserted();
      this._correctionIndex++;
    });
  },
  _updateSelectionAfterRemoveByChange: function(removeIndex) {
    var selectedIndex = this.option("selectedIndex");
    if (selectedIndex > removeIndex) {
      this.option("selectedIndex", selectedIndex - 1);
    } else if (selectedIndex === removeIndex && 1 === this.option("selectedItems").length) {
      this.option("selectedItems", []);
    } else {
      this._normalizeSelectedItems();
    }
  },
  _beforeItemElementInserted: function(change) {
    var selectedIndex = this.option("selectedIndex");
    if (change.index <= selectedIndex) {
      this.option("selectedIndex", selectedIndex + 1);
    }
  },
  _afterItemElementInserted: noop2,
  _removeByChange: function(keyInfo, items, change, isPartialRefresh) {
    var index2 = isPartialRefresh ? change.index : indexByKey(keyInfo, items, change.key);
    var removedItem = isPartialRefresh ? change.oldItem : items[index2];
    if (removedItem) {
      var $removedItemElement = this._findItemElementByKey(change.key);
      var deletedActionArgs = this._extendActionArgs($removedItemElement);
      this._waitDeletingPrepare($removedItemElement).done(() => {
        if (isPartialRefresh) {
          this._updateIndicesAfterIndex(index2 - 1);
          this._afterItemElementDeleted($removedItemElement, deletedActionArgs);
          this._updateSelectionAfterRemoveByChange(index2);
        } else {
          this._deleteItemElementByIndex(index2);
          this._afterItemElementDeleted($removedItemElement, deletedActionArgs);
        }
      });
      this._correctionIndex--;
    }
  },
  _modifyByChanges: function(changes, isPartialRefresh) {
    var items = this._editStrategy.itemsGetter();
    var keyInfo = {
      key: this.key.bind(this),
      keyOf: this.keyOf.bind(this)
    };
    var dataController2 = this._dataController;
    var paginate = dataController2.paginate();
    var group = dataController2.group();
    if (paginate || group) {
      changes = changes.filter((item) => "insert" !== item.type || void 0 !== item.index);
    }
    changes.forEach((change) => this["_".concat(change.type, "ByChange")](keyInfo, items, change, isPartialRefresh));
    this._renderedItemsCount = items.length;
    this._refreshItemsCache();
    this._fireContentReadyAction();
  },
  _appendItemToContainer: function($container, $itemFrame, index2) {
    var nextSiblingElement = $container.children(this._itemSelector()).get(index2);
    dom_adapter_default.insertElement($container.get(0), $itemFrame.get(0), nextSiblingElement);
  },
  _optionChanged: function(args) {
    switch (args.name) {
      case "items":
        var isItemsUpdated = this._partialRefresh(args.value);
        if (!isItemsUpdated) {
          this.callBase(args);
        }
        break;
      case "dataSource":
        if (!this.option("repaintChangesOnly") || !args.value) {
          this.option("items", []);
        }
        this.callBase(args);
        break;
      case "repaintChangesOnly":
        break;
      default:
        this.callBase(args);
    }
  }
});

// node_modules/devextreme/esm/ui/shared/grouped_data_converter_mixin.js
var isCorrectStructure = (data3) => Array.isArray(data3) && data3.every((item) => {
  var hasTwoFields = 2 === Object.keys(item).length;
  var hasCorrectFields = "key" in item && "items" in item;
  return hasTwoFields && hasCorrectFields && Array.isArray(item.items);
});
var grouped_data_converter_mixin_default = {
  _getSpecificDataSourceOption: function() {
    var dataSource = this.option("dataSource");
    var hasSimpleItems = false;
    var data3 = {};
    if (this._getGroupedOption() && isCorrectStructure(dataSource)) {
      data3 = dataSource.reduce((accumulator, item) => {
        var items = item.items.map((innerItem) => {
          if (!isObject(innerItem)) {
            innerItem = {
              text: innerItem
            };
            hasSimpleItems = true;
          }
          if (!("key" in innerItem)) {
            innerItem.key = item.key;
          }
          return innerItem;
        });
        return accumulator.concat(items);
      }, []);
      dataSource = {
        store: {
          type: "array",
          data: data3
        },
        group: {
          selector: "key",
          keepInitialKeyOrder: true
        }
      };
      if (hasSimpleItems) {
        dataSource.searchExpr = "text";
      }
    }
    return dataSource;
  }
};

// node_modules/devextreme/esm/renovation/utils/type_conversion.js
function toNumber(attribute) {
  return attribute ? Number(attribute.replace("px", "")) : 0;
}

// node_modules/devextreme/esm/renovation/ui/scroll_view/utils/get_element_style.js
function getElementStyle(el) {
  var _getWindow$getCompute, _getWindow;
  return el && hasWindow() ? null === (_getWindow$getCompute = (_getWindow = getWindow()).getComputedStyle) || void 0 === _getWindow$getCompute ? void 0 : _getWindow$getCompute.call(_getWindow, el) : null;
}
function getElementMargin(element, side) {
  var style = getElementStyle(element);
  return style ? toNumber(style["margin".concat(titleize(side))]) : 0;
}

// node_modules/devextreme/esm/ui/list/ui.list.base.js
var LIST_CLASS = "dx-list";
var LIST_ITEMS_CLASS = "dx-list-items";
var LIST_ITEM_CLASS = "dx-list-item";
var LIST_ITEM_SELECTOR = "." + LIST_ITEM_CLASS;
var LIST_ITEM_ICON_CONTAINER_CLASS = "dx-list-item-icon-container";
var LIST_ITEM_ICON_CLASS = "dx-list-item-icon";
var LIST_GROUP_CLASS = "dx-list-group";
var LIST_GROUP_HEADER_CLASS = "dx-list-group-header";
var LIST_GROUP_BODY_CLASS = "dx-list-group-body";
var LIST_COLLAPSIBLE_GROUPS_CLASS = "dx-list-collapsible-groups";
var LIST_GROUP_COLLAPSED_CLASS = "dx-list-group-collapsed";
var LIST_GROUP_HEADER_INDICATOR_CLASS = "dx-list-group-header-indicator";
var LIST_HAS_NEXT_CLASS = "dx-has-next";
var LIST_NEXT_BUTTON_CLASS = "dx-list-next-button";
var WRAP_ITEM_TEXT_CLASS = "dx-wrap-item-text";
var SELECT_ALL_ITEM_SELECTOR = ".dx-list-select-all";
var LIST_ITEM_DATA_KEY = "dxListItemData";
var LIST_FEEDBACK_SHOW_TIMEOUT = 70;
var groupItemsGetter = compileGetter("items");
var _scrollView;
var ListBase = ui_collection_widget_live_update_default.inherit({
  _activeStateUnit: [LIST_ITEM_SELECTOR, SELECT_ALL_ITEM_SELECTOR].join(","),
  _supportedKeys: function() {
    var that = this;
    var moveFocusPerPage = function(direction) {
      var $item = getEdgeVisibleItem(direction);
      var isFocusedItem = $item.is(that.option("focusedElement"));
      if (isFocusedItem) {
        !function($item2, direction2) {
          var resultPosition = $item2.position().top;
          if ("prev" === direction2) {
            resultPosition = $item2.position().top - getHeight(that.$element()) + getOuterHeight($item2);
          }
          that.scrollTo(resultPosition);
        }($item, direction);
        $item = getEdgeVisibleItem(direction);
      }
      that.option("focusedElement", getPublicElement($item));
      that.scrollToItem($item);
    };
    function getEdgeVisibleItem(direction) {
      var scrollTop = that.scrollTop();
      var containerHeight = getHeight(that.$element());
      var $item = renderer_default(that.option("focusedElement"));
      var isItemVisible = true;
      if (!$item.length) {
        return renderer_default();
      }
      while (isItemVisible) {
        var $nextItem = $item[direction]();
        if (!$nextItem.length) {
          break;
        }
        var nextItemLocation = $nextItem.position().top + getOuterHeight($nextItem) / 2;
        isItemVisible = nextItemLocation < containerHeight + scrollTop && nextItemLocation > scrollTop;
        if (isItemVisible) {
          $item = $nextItem;
        }
      }
      return $item;
    }
    return extend(this.callBase(), {
      leftArrow: noop2,
      rightArrow: noop2,
      pageUp: function() {
        moveFocusPerPage("prev");
        return false;
      },
      pageDown: function() {
        moveFocusPerPage("next");
        return false;
      }
    });
  },
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      hoverStateEnabled: true,
      pullRefreshEnabled: false,
      scrollingEnabled: true,
      selectByClick: true,
      showScrollbar: "onScroll",
      useNativeScrolling: true,
      bounceEnabled: true,
      scrollByContent: true,
      scrollByThumb: false,
      pullingDownText: message_default.format("dxList-pullingDownText"),
      pulledDownText: message_default.format("dxList-pulledDownText"),
      refreshingText: message_default.format("dxList-refreshingText"),
      pageLoadingText: message_default.format("dxList-pageLoadingText"),
      onScroll: null,
      onPullRefresh: null,
      onPageLoading: null,
      pageLoadMode: "scrollBottom",
      nextButtonText: message_default.format("dxList-nextButtonText"),
      onItemSwipe: null,
      grouped: false,
      onGroupRendered: null,
      collapsibleGroups: false,
      groupTemplate: "group",
      indicateLoading: true,
      activeStateEnabled: true,
      _itemAttributes: {
        role: "option"
      },
      useInkRipple: false,
      wrapItemText: false,
      _swipeEnabled: true,
      showChevronExpr: function(data3) {
        return data3 ? data3.showChevron : void 0;
      },
      badgeExpr: function(data3) {
        return data3 ? data3.badge : void 0;
      }
    });
  },
  _defaultOptionsRules: function() {
    var themeName = current();
    return this.callBase().concat(deviceDependentOptions(), [{
      device: function() {
        return !nativeScrolling;
      },
      options: {
        useNativeScrolling: false
      }
    }, {
      device: function(_device) {
        return !nativeScrolling && !devices_default.isSimulator() && "desktop" === devices_default.real().deviceType && "generic" === _device.platform;
      },
      options: {
        showScrollbar: "onHover",
        pageLoadMode: "nextButton"
      }
    }, {
      device: function() {
        return "desktop" === devices_default.real().deviceType && !devices_default.isSimulator();
      },
      options: {
        focusStateEnabled: true
      }
    }, {
      device: function() {
        return isMaterial(themeName);
      },
      options: {
        useInkRipple: true
      }
    }, {
      device: function() {
        return isMaterialBased(themeName);
      },
      options: {
        pullingDownText: "",
        pulledDownText: "",
        refreshingText: "",
        pageLoadingText: ""
      }
    }]);
  },
  _visibilityChanged: function(visible2) {
    if (visible2) {
      this._updateLoadingState(true);
    }
  },
  _itemClass: function() {
    return LIST_ITEM_CLASS;
  },
  _itemDataKey: function() {
    return LIST_ITEM_DATA_KEY;
  },
  _itemContainer: function() {
    return this._$container;
  },
  _getItemsContainer: function() {
    return this._$listContainer;
  },
  _cleanItemContainer: function() {
    this.callBase();
    var listContainer = this._getItemsContainer();
    renderer_default(listContainer).empty();
    listContainer.appendTo(this._$container);
  },
  _saveSelectionChangeEvent: function(e) {
    this._selectionChangeEventInstance = e;
  },
  _getSelectionChangeEvent: function() {
    return this._selectionChangeEventInstance;
  },
  _refreshItemElements: function() {
    if (!this.option("grouped")) {
      this._itemElementsCache = this._getItemsContainer().children(this._itemSelector());
    } else {
      this._itemElementsCache = this._getItemsContainer().children("." + LIST_GROUP_CLASS).children("." + LIST_GROUP_BODY_CLASS).children(this._itemSelector());
    }
  },
  _modifyByChanges: function() {
    this.callBase.apply(this, arguments);
    this._refreshItemElements();
    this._updateLoadingState(true);
  },
  reorderItem: function(itemElement, toItemElement) {
    var promise = this.callBase(itemElement, toItemElement);
    return promise.done(function() {
      this._refreshItemElements();
    });
  },
  deleteItem: function(itemElement) {
    var promise = this.callBase(itemElement);
    return promise.done(function() {
      this._refreshItemElements();
    });
  },
  _itemElements: function() {
    return this._itemElementsCache;
  },
  _itemSelectHandler: function(e) {
    if ("single" === this.option("selectionMode") && this.isItemSelected(e.currentTarget)) {
      return;
    }
    return this.callBase(e);
  },
  _allowDynamicItemsAppend: function() {
    return true;
  },
  _init: function() {
    this.callBase();
    this._dataController.resetDataSourcePageIndex();
    this._$container = this.$element();
    this._$listContainer = renderer_default("<div>").addClass(LIST_ITEMS_CLASS);
    this._initScrollView();
    this._feedbackShowTimeout = LIST_FEEDBACK_SHOW_TIMEOUT;
    this._createGroupRenderAction();
  },
  _scrollBottomMode: function() {
    return "scrollBottom" === this.option("pageLoadMode");
  },
  _nextButtonMode: function() {
    return "nextButton" === this.option("pageLoadMode");
  },
  _dataSourceOptions: function() {
    var scrollBottom = this._scrollBottomMode();
    var nextButton = this._nextButtonMode();
    return extend(this.callBase(), {
      paginate: ensureDefined(scrollBottom || nextButton, true)
    });
  },
  _getGroupedOption: function() {
    return this.option("grouped");
  },
  _getGroupContainerByIndex: function(groupIndex) {
    return this._getItemsContainer().find(".".concat(LIST_GROUP_CLASS)).eq(groupIndex).find(".".concat(LIST_GROUP_BODY_CLASS));
  },
  _dataSourceFromUrlLoadMode: function() {
    return "raw";
  },
  _initScrollView: function() {
    var scrollingEnabled = this.option("scrollingEnabled");
    var pullRefreshEnabled = scrollingEnabled && this.option("pullRefreshEnabled");
    var autoPagingEnabled = scrollingEnabled && this._scrollBottomMode() && !!this._dataController.getDataSource();
    this._scrollView = this._createComponent(this.$element(), getScrollView(), {
      height: this.option("height"),
      width: this.option("width"),
      disabled: this.option("disabled") || !scrollingEnabled,
      onScroll: this._scrollHandler.bind(this),
      onPullDown: pullRefreshEnabled ? this._pullDownHandler.bind(this) : null,
      onReachBottom: autoPagingEnabled ? this._scrollBottomHandler.bind(this) : null,
      showScrollbar: this.option("showScrollbar"),
      useNative: this.option("useNativeScrolling"),
      bounceEnabled: this.option("bounceEnabled"),
      scrollByContent: this.option("scrollByContent"),
      scrollByThumb: this.option("scrollByThumb"),
      pullingDownText: this.option("pullingDownText"),
      pulledDownText: this.option("pulledDownText"),
      refreshingText: this.option("refreshingText"),
      reachBottomText: this.option("pageLoadingText"),
      useKeyboard: false
    });
    this._$container = renderer_default(this._scrollView.content());
    this._$listContainer.appendTo(this._$container);
    this._toggleWrapItemText(this.option("wrapItemText"));
    this._createScrollViewActions();
  },
  _toggleWrapItemText: function(value2) {
    this._$listContainer.toggleClass(WRAP_ITEM_TEXT_CLASS, value2);
  },
  _createScrollViewActions: function() {
    this._scrollAction = this._createActionByOption("onScroll");
    this._pullRefreshAction = this._createActionByOption("onPullRefresh");
    this._pageLoadingAction = this._createActionByOption("onPageLoading");
  },
  _scrollHandler: function(e) {
    this._scrollAction && this._scrollAction(e);
  },
  _initTemplates: function() {
    this._templateManager.addDefaultTemplates({
      group: new BindableTemplate(function($container, data3) {
        if (isPlainObject(data3)) {
          if (data3.key) {
            $container.text(data3.key);
          }
        } else {
          $container.text(String(data3));
        }
      }, ["key"], this.option("integrationOptions.watchMethod"))
    });
    this.callBase();
  },
  _prepareDefaultItemTemplate: function(data3, $container) {
    this.callBase(data3, $container);
    if (data3.icon) {
      var $icon = getImageContainer(data3.icon).addClass(LIST_ITEM_ICON_CLASS);
      var $iconContainer = renderer_default("<div>").addClass(LIST_ITEM_ICON_CONTAINER_CLASS);
      $iconContainer.append($icon);
      $container.prepend($iconContainer);
    }
  },
  _getBindableFields: function() {
    return ["text", "html", "icon"];
  },
  _updateLoadingState: function(tryLoadMore) {
    var dataController2 = this._dataController;
    var shouldLoadNextPage = this._scrollBottomMode() && tryLoadMore && !dataController2.isLoading() && !this._isLastPage();
    if (this._shouldContinueLoading(shouldLoadNextPage)) {
      this._infiniteDataLoading();
    } else {
      this._scrollView.release(!shouldLoadNextPage && !dataController2.isLoading());
      this._toggleNextButton(this._shouldRenderNextButton() && !this._isLastPage());
      this._loadIndicationSuppressed(false);
    }
  },
  _shouldRenderNextButton: function() {
    return this._nextButtonMode() && this._dataController.isLoaded();
  },
  _isDataSourceFirstLoadCompleted: function(newValue) {
    if (isDefined(newValue)) {
      this._isFirstLoadCompleted = newValue;
    }
    return this._isFirstLoadCompleted;
  },
  _dataSourceLoadingChangedHandler: function(isLoading) {
    if (this._loadIndicationSuppressed()) {
      return;
    }
    if (isLoading && this.option("indicateLoading")) {
      this._showLoadingIndicatorTimer = setTimeout((function() {
        var isEmpty3 = !this._itemElements().length;
        var shouldIndicateLoading = !isEmpty3 || this._isDataSourceFirstLoadCompleted();
        if (shouldIndicateLoading) {
          var _this$_scrollView;
          null === (_this$_scrollView = this._scrollView) || void 0 === _this$_scrollView ? void 0 : _this$_scrollView.startLoading();
        }
      }).bind(this));
    } else {
      clearTimeout(this._showLoadingIndicatorTimer);
      this._scrollView && this._scrollView.finishLoading();
    }
    if (!isLoading) {
      this._isDataSourceFirstLoadCompleted(false);
    }
  },
  _dataSourceChangedHandler: function() {
    if (!this._shouldAppendItems() && hasWindow()) {
      this._scrollView && this._scrollView.scrollTo(0);
    }
    this.callBase.apply(this, arguments);
    this._isDataSourceFirstLoadCompleted(true);
  },
  _refreshContent: function() {
    this._prepareContent();
    this._fireContentReadyAction();
  },
  _hideLoadingIfLoadIndicationOff: function() {
    if (!this.option("indicateLoading")) {
      this._dataSourceLoadingChangedHandler(false);
    }
  },
  _loadIndicationSuppressed: function(value2) {
    if (!arguments.length) {
      return this._isLoadIndicationSuppressed;
    }
    this._isLoadIndicationSuppressed = value2;
  },
  _scrollViewIsFull: function() {
    var scrollView = this._scrollView;
    return !scrollView || getHeight(scrollView.content()) > getHeight(scrollView.container());
  },
  _pullDownHandler: function(e) {
    this._pullRefreshAction(e);
    var dataController2 = this._dataController;
    if (dataController2.getDataSource() && !dataController2.isLoading()) {
      this._clearSelectedItems();
      dataController2.pageIndex(0);
      dataController2.reload();
    } else {
      this._updateLoadingState();
    }
  },
  _shouldContinueLoading: function(shouldLoadNextPage) {
    var _this$_scrollView$scr, _this$_scrollView$scr2;
    var isBottomReached = getHeight(this._scrollView.content()) - getHeight(this._scrollView.container()) < (null !== (_this$_scrollView$scr = null === (_this$_scrollView$scr2 = this._scrollView.scrollOffset()) || void 0 === _this$_scrollView$scr2 ? void 0 : _this$_scrollView$scr2.top) && void 0 !== _this$_scrollView$scr ? _this$_scrollView$scr : 0);
    return shouldLoadNextPage && (!this._scrollViewIsFull() || isBottomReached);
  },
  _infiniteDataLoading: function() {
    var isElementVisible2 = this.$element().is(":visible");
    if (isElementVisible2) {
      clearTimeout(this._loadNextPageTimer);
      this._loadNextPageTimer = setTimeout(() => {
        this._loadNextPage();
      });
    }
  },
  _scrollBottomHandler: function(e) {
    this._pageLoadingAction(e);
    var dataController2 = this._dataController;
    if (!dataController2.isLoading() && !this._isLastPage()) {
      this._loadNextPage();
    } else {
      this._updateLoadingState();
    }
  },
  _renderItems: function(items) {
    if (this.option("grouped")) {
      each(items, this._renderGroup.bind(this));
      this._attachGroupCollapseEvent();
      this._renderEmptyMessage();
      if (isMaterial()) {
        this.attachGroupHeaderInkRippleEvents();
      }
    } else {
      this.callBase.apply(this, arguments);
    }
    this._refreshItemElements();
    this._updateLoadingState(true);
  },
  _attachGroupCollapseEvent: function() {
    var eventName = addNamespace2(CLICK_EVENT_NAME, this.NAME);
    var selector = "." + LIST_GROUP_HEADER_CLASS;
    var $element = this.$element();
    var collapsibleGroups = this.option("collapsibleGroups");
    $element.toggleClass(LIST_COLLAPSIBLE_GROUPS_CLASS, collapsibleGroups);
    events_engine_default.off($element, eventName, selector);
    if (collapsibleGroups) {
      events_engine_default.on($element, eventName, selector, (function(e) {
        this._createAction((function(e2) {
          var $group = renderer_default(e2.event.currentTarget).parent();
          this._collapseGroupHandler($group);
          if (this.option("focusStateEnabled")) {
            this.option("focusedElement", getPublicElement($group.find("." + LIST_ITEM_CLASS).eq(0)));
          }
        }).bind(this), {
          validatingTargetName: "element"
        })({
          event: e
        });
      }).bind(this));
    }
  },
  _collapseGroupHandler: function($group, toggle) {
    var deferred = new Deferred();
    if ($group.hasClass(LIST_GROUP_COLLAPSED_CLASS) === toggle) {
      return deferred.resolve();
    }
    var $groupBody = $group.children("." + LIST_GROUP_BODY_CLASS);
    var startHeight = getOuterHeight($groupBody);
    var endHeight = 0;
    if (0 === startHeight) {
      setHeight2($groupBody, "auto");
      endHeight = getOuterHeight($groupBody);
    }
    $group.toggleClass(LIST_GROUP_COLLAPSED_CLASS, toggle);
    fx_default.animate($groupBody, {
      type: "custom",
      from: {
        height: startHeight
      },
      to: {
        height: endHeight
      },
      duration: 200,
      complete: (function() {
        this.updateDimensions();
        this._updateLoadingState(true);
        deferred.resolve();
      }).bind(this)
    });
    return deferred.promise();
  },
  _dataSourceLoadErrorHandler: function() {
    this._forgetNextPageLoading();
    if (this._initialized) {
      this._renderEmptyMessage();
      this._updateLoadingState();
    }
  },
  _initMarkup: function() {
    this._itemElementsCache = renderer_default();
    this.$element().addClass(LIST_CLASS);
    this.callBase();
    this.option("useInkRipple") && this._renderInkRipple();
    this.setAria({
      role: "group",
      roledescription: "list"
    }, this.$element());
    this.setAria({
      role: "group"
    }, this._focusTarget());
    this._setListAria();
  },
  _setListAria() {
    var {
      items
    } = this.option();
    var listArea = null !== items && void 0 !== items && items.length ? {
      role: "listbox",
      label: "Items"
    } : {
      role: void 0,
      label: void 0
    };
    this.setAria(listArea, this._$listContainer);
  },
  _focusTarget: function() {
    return this._itemContainer();
  },
  _renderInkRipple: function() {
    this._inkRipple = render();
  },
  _toggleActiveState: function($element, value2, e) {
    this.callBase.apply(this, arguments);
    var that = this;
    if (!this._inkRipple) {
      return;
    }
    var config3 = {
      element: $element,
      event: e
    };
    if (value2) {
      if (isMaterial()) {
        this._inkRippleTimer = setTimeout(function() {
          that._inkRipple.showWave(config3);
        }, LIST_FEEDBACK_SHOW_TIMEOUT / 2);
      } else {
        that._inkRipple.showWave(config3);
      }
    } else {
      clearTimeout(this._inkRippleTimer);
      this._inkRipple.hideWave(config3);
    }
  },
  _postprocessRenderItem: function(args) {
    this._refreshItemElements();
    this.callBase.apply(this, arguments);
    if (this.option("_swipeEnabled")) {
      this._attachSwipeEvent(renderer_default(args.itemElement));
    }
  },
  _attachSwipeEvent: function($itemElement) {
    var endEventName = addNamespace2(SWIPE_END_EVENT, this.NAME);
    events_engine_default.on($itemElement, endEventName, this._itemSwipeEndHandler.bind(this));
  },
  _itemSwipeEndHandler: function(e) {
    this._itemDXEventHandler(e, "onItemSwipe", {
      direction: e.offset < 0 ? "left" : "right"
    });
  },
  _nextButtonHandler: function(e) {
    this._pageLoadingAction(e);
    var dataController2 = this._dataController;
    if (dataController2.getDataSource() && !dataController2.isLoading()) {
      this._scrollView.toggleLoading(true);
      this._$nextButton.detach();
      this._loadIndicationSuppressed(true);
      this._loadNextPage();
    }
  },
  _renderGroup: function(index2, group) {
    var $groupElement = renderer_default("<div>").addClass(LIST_GROUP_CLASS).appendTo(this._getItemsContainer());
    var id = "dx-".concat(new guid_default().toString());
    var groupAria = {
      role: "group",
      labelledby: id
    };
    this.setAria(groupAria, $groupElement);
    var $groupHeaderElement = renderer_default("<div>").addClass(LIST_GROUP_HEADER_CLASS).attr("id", id).appendTo($groupElement);
    var groupTemplateName = this.option("groupTemplate");
    var groupTemplate = this._getTemplate(group.template || groupTemplateName, group, index2, $groupHeaderElement);
    var renderArgs = {
      index: index2,
      itemData: group,
      container: getPublicElement($groupHeaderElement)
    };
    this._createItemByTemplate(groupTemplate, renderArgs);
    renderer_default("<div>").addClass(LIST_GROUP_HEADER_INDICATOR_CLASS).prependTo($groupHeaderElement);
    this._renderingGroupIndex = index2;
    var $groupBody = renderer_default("<div>").addClass(LIST_GROUP_BODY_CLASS).appendTo($groupElement);
    each(groupItemsGetter(group) || [], (function(itemIndex, item) {
      this._renderItem({
        group: index2,
        item: itemIndex
      }, item, $groupBody);
    }).bind(this));
    this._groupRenderAction({
      groupElement: getPublicElement($groupElement),
      groupIndex: index2,
      groupData: group
    });
  },
  downInkRippleHandler: function(e) {
    this._toggleActiveState(renderer_default(e.currentTarget), true, e);
  },
  upInkRippleHandler: function(e) {
    this._toggleActiveState(renderer_default(e.currentTarget), false);
  },
  attachGroupHeaderInkRippleEvents: function() {
    var selector = "." + LIST_GROUP_HEADER_CLASS;
    var $element = this.$element();
    this._downInkRippleHandler = this._downInkRippleHandler || this.downInkRippleHandler.bind(this);
    this._upInkRippleHandler = this._upInkRippleHandler || this.upInkRippleHandler.bind(this);
    var downArguments = [$element, "dxpointerdown", selector, this._downInkRippleHandler];
    var upArguments = [$element, "dxpointerup dxpointerout", selector, this._upInkRippleHandler];
    events_engine_default.off(...downArguments);
    events_engine_default.on(...downArguments);
    events_engine_default.off(...upArguments);
    events_engine_default.on(...upArguments);
  },
  _createGroupRenderAction: function() {
    this._groupRenderAction = this._createActionByOption("onGroupRendered");
  },
  _clean: function() {
    clearTimeout(this._inkRippleTimer);
    if (this._$nextButton) {
      this._$nextButton.remove();
      this._$nextButton = null;
    }
    this.callBase.apply(this, arguments);
  },
  _dispose: function() {
    this._isDataSourceFirstLoadCompleted(false);
    clearTimeout(this._holdTimer);
    clearTimeout(this._loadNextPageTimer);
    clearTimeout(this._showLoadingIndicatorTimer);
    this.callBase();
  },
  _toggleDisabledState: function(value2) {
    this.callBase(value2);
    this._scrollView.option("disabled", value2 || !this.option("scrollingEnabled"));
  },
  _toggleNextButton: function(value2) {
    var dataController2 = this._dataController;
    var $nextButton = this._getNextButton();
    this.$element().toggleClass(LIST_HAS_NEXT_CLASS, value2);
    if (value2 && dataController2.isLoaded()) {
      $nextButton.appendTo(this._itemContainer());
    }
    if (!value2) {
      $nextButton.detach();
    }
  },
  _getNextButton: function() {
    if (!this._$nextButton) {
      this._$nextButton = this._createNextButton();
    }
    return this._$nextButton;
  },
  _createNextButton: function() {
    var $result = renderer_default("<div>").addClass(LIST_NEXT_BUTTON_CLASS);
    var $button = renderer_default("<div>").appendTo($result);
    this._createComponent($button, button_default, {
      text: this.option("nextButtonText"),
      onClick: this._nextButtonHandler.bind(this),
      type: isMaterialBased() ? "default" : void 0,
      integrationOptions: {}
    });
    return $result;
  },
  _moveFocus: function() {
    this.callBase.apply(this, arguments);
    this.scrollToItem(this.option("focusedElement"));
  },
  _refresh: function() {
    if (!hasWindow()) {
      this.callBase();
    } else {
      var scrollTop = this._scrollView.scrollTop();
      this.callBase();
      scrollTop && this._scrollView.scrollTo(scrollTop);
    }
  },
  _optionChanged: function(args) {
    switch (args.name) {
      case "pageLoadMode":
        this._toggleNextButton(args.value);
        this._initScrollView();
        break;
      case "dataSource":
        this.callBase(args);
        this._initScrollView();
        this._isDataSourceFirstLoadCompleted(false);
        break;
      case "items":
        this.callBase(args);
        this._isDataSourceFirstLoadCompleted(false);
        break;
      case "pullingDownText":
      case "pulledDownText":
      case "refreshingText":
      case "pageLoadingText":
      case "showScrollbar":
      case "bounceEnabled":
      case "scrollByContent":
      case "scrollByThumb":
      case "useNativeScrolling":
      case "scrollingEnabled":
      case "pullRefreshEnabled":
        this._initScrollView();
        this._updateLoadingState(true);
        break;
      case "nextButtonText":
      case "onItemSwipe":
      case "useInkRipple":
        this._invalidate();
        break;
      case "onScroll":
      case "onPullRefresh":
      case "onPageLoading":
        this._createScrollViewActions();
        break;
      case "grouped":
      case "collapsibleGroups":
      case "groupTemplate":
        this._invalidate();
        break;
      case "wrapItemText":
        this._toggleWrapItemText(args.value);
        break;
      case "onGroupRendered":
        this._createGroupRenderAction();
        break;
      case "width":
      case "height":
        this.callBase(args);
        this._scrollView.option(args.name, args.value);
        this._scrollView.update();
        break;
      case "indicateLoading":
        this._hideLoadingIfLoadIndicationOff();
        break;
      case "visible":
        this.callBase(args);
        this._scrollView.update();
        break;
      case "rtlEnabled":
        this._initScrollView();
        this.callBase(args);
        break;
      case "showChevronExpr":
      case "badgeExpr":
        this._invalidate();
        break;
      case "_swipeEnabled":
      case "selectByClick":
        break;
      default:
        this.callBase(args);
    }
  },
  _extendActionArgs: function($itemElement) {
    if (!this.option("grouped")) {
      return this.callBase($itemElement);
    }
    var $group = $itemElement.closest("." + LIST_GROUP_CLASS);
    var $item = $group.find("." + LIST_ITEM_CLASS);
    return extend(this.callBase($itemElement), {
      itemIndex: {
        group: $group.index(),
        item: $item.index($itemElement)
      }
    });
  },
  expandGroup: function(groupIndex) {
    var deferred = new Deferred();
    var $group = this._getItemsContainer().find(".".concat(LIST_GROUP_CLASS)).eq(groupIndex);
    this._collapseGroupHandler($group, false).done((function() {
      deferred.resolveWith(this);
    }).bind(this));
    return deferred.promise();
  },
  collapseGroup: function(groupIndex) {
    var deferred = new Deferred();
    var $group = this._getItemsContainer().find(".".concat(LIST_GROUP_CLASS)).eq(groupIndex);
    this._collapseGroupHandler($group, true).done((function() {
      deferred.resolveWith(this);
    }).bind(this));
    return deferred;
  },
  updateDimensions: function() {
    var that = this;
    var deferred = new Deferred();
    if (that._scrollView) {
      that._scrollView.update().done(function() {
        !that._scrollViewIsFull() && that._updateLoadingState(true);
        deferred.resolveWith(that);
      });
    } else {
      deferred.resolveWith(that);
    }
    return deferred.promise();
  },
  reload: function() {
    this.callBase();
    this.scrollTo(0);
    this._pullDownHandler();
  },
  repaint: function() {
    this.scrollTo(0);
    this.callBase();
  },
  scrollTop: function() {
    return this._scrollView.scrollOffset().top;
  },
  clientHeight: function() {
    return this._scrollView.clientHeight();
  },
  scrollHeight: function() {
    return this._scrollView.scrollHeight();
  },
  scrollBy: function(distance) {
    this._scrollView.scrollBy(distance);
  },
  scrollTo: function(location) {
    this._scrollView.scrollTo(location);
  },
  scrollToItem: function(itemElement) {
    var $item = this._editStrategy.getItemElement(itemElement);
    var item = null === $item || void 0 === $item ? void 0 : $item.get(0);
    this._scrollView.scrollToElement(item, {
      bottom: getElementMargin(item, "bottom")
    });
  },
  _dimensionChanged: function() {
    this.updateDimensions();
  }
}).include(grouped_data_converter_mixin_default);
ListBase.ItemClass = item_default2;
function getScrollView() {
  return _scrollView || scroll_view_default;
}

// node_modules/devextreme/esm/ui/toolbar/internal/ui.toolbar.menu.list.js
var TOOLBAR_MENU_ACTION_CLASS = "dx-toolbar-menu-action";
var TOOLBAR_HIDDEN_BUTTON_CLASS = "dx-toolbar-hidden-button";
var TOOLBAR_HIDDEN_BUTTON_GROUP_CLASS = "dx-toolbar-hidden-button-group";
var TOOLBAR_MENU_SECTION_CLASS = "dx-toolbar-menu-section";
var TOOLBAR_MENU_CUSTOM_CLASS = "dx-toolbar-menu-custom";
var TOOLBAR_MENU_LAST_SECTION_CLASS = "dx-toolbar-menu-last-section";
var SCROLLVIEW_CONTENT_CLASS2 = "dx-scrollview-content";
var ToolbarMenuList = class extends ListBase {
  _init() {
    super._init();
    this._activeStateUnit = ".".concat(TOOLBAR_MENU_ACTION_CLASS, ":not(.").concat(TOOLBAR_HIDDEN_BUTTON_GROUP_CLASS, ")");
  }
  _initMarkup() {
    this._renderSections();
    super._initMarkup();
    this._setMenuRole();
  }
  _getSections() {
    return this._itemContainer().children();
  }
  _itemElements() {
    return this._getSections().children(this._itemSelector());
  }
  _renderSections() {
    var $container = this._itemContainer();
    each(["before", "center", "after", "menu"], (_, section) => {
      var sectionName = "_$".concat(section, "Section");
      if (!this[sectionName]) {
        this[sectionName] = renderer_default("<div>").addClass(TOOLBAR_MENU_SECTION_CLASS);
      }
      this[sectionName].appendTo($container);
    });
  }
  _renderItems() {
    super._renderItems.apply(this, arguments);
    this._updateSections();
  }
  _setMenuRole() {
    var $menuContainer = this.$element().find(".".concat(SCROLLVIEW_CONTENT_CLASS2));
    $menuContainer.attr("role", "menu");
  }
  _updateSections() {
    var $sections = this.$element().find(".".concat(TOOLBAR_MENU_SECTION_CLASS));
    $sections.removeClass(TOOLBAR_MENU_LAST_SECTION_CLASS);
    $sections.not(":empty").eq(-1).addClass(TOOLBAR_MENU_LAST_SECTION_CLASS);
  }
  _renderItem(index2, item, itemContainer, $after) {
    var _item$location;
    var location = null !== (_item$location = item.location) && void 0 !== _item$location ? _item$location : "menu";
    var $container = this["_$".concat(location, "Section")];
    var itemElement = super._renderItem(index2, item, $container, $after);
    if (this._getItemTemplateName({
      itemData: item
    })) {
      itemElement.addClass(TOOLBAR_MENU_CUSTOM_CLASS);
    }
    if ("menu" === location || "dxButton" === item.widget || "dxButtonGroup" === item.widget || item.isAction) {
      itemElement.addClass(TOOLBAR_MENU_ACTION_CLASS);
    }
    if ("dxButton" === item.widget) {
      itemElement.addClass(TOOLBAR_HIDDEN_BUTTON_CLASS);
    }
    if ("dxButtonGroup" === item.widget) {
      itemElement.addClass(TOOLBAR_HIDDEN_BUTTON_GROUP_CLASS);
    }
    itemElement.addClass(item.cssClass);
    return itemElement;
  }
  _getItemTemplateName(args) {
    var template = super._getItemTemplateName(args);
    var data3 = args.itemData;
    var menuTemplate = data3 && data3.menuItemTemplate;
    return menuTemplate || template;
  }
  _dataSourceOptions() {
    return {
      paginate: false
    };
  }
  _itemClickHandler(e, args, config3) {
    if (renderer_default(e.target).closest(".".concat(TOOLBAR_MENU_ACTION_CLASS)).length) {
      super._itemClickHandler(e, args, config3);
    }
  }
  _clean() {
    this._getSections().empty();
    super._clean();
  }
};

// node_modules/devextreme/esm/ui/popup/popup_drag.js
var KEYBOARD_DRAG_STEP = 5;
var PopupDrag = class {
  constructor(config3) {
    this.init(config3);
  }
  init(_ref) {
    var {
      dragEnabled,
      handle,
      draggableElement,
      positionController
    } = _ref;
    this._positionController = positionController;
    this._draggableElement = draggableElement;
    this._handle = handle;
    this._dragEnabled = dragEnabled;
    this.unsubscribe();
    if (!dragEnabled) {
      return;
    }
    this.subscribe();
  }
  moveDown(e) {
    this._moveTo(KEYBOARD_DRAG_STEP, 0, e);
  }
  moveUp(e) {
    this._moveTo(-KEYBOARD_DRAG_STEP, 0, e);
  }
  moveLeft(e) {
    this._moveTo(0, -KEYBOARD_DRAG_STEP, e);
  }
  moveRight(e) {
    this._moveTo(0, KEYBOARD_DRAG_STEP, e);
  }
  subscribe() {
    var eventNames = this._getEventNames();
    events_engine_default.on(this._handle, eventNames.startEventName, (e) => {
      this._dragStartHandler(e);
    });
    events_engine_default.on(this._handle, eventNames.updateEventName, (e) => {
      this._dragUpdateHandler(e);
    });
    events_engine_default.on(this._handle, eventNames.endEventName, (e) => {
      this._dragEndHandler(e);
    });
  }
  unsubscribe() {
    var eventNames = this._getEventNames();
    events_engine_default.off(this._handle, eventNames.startEventName);
    events_engine_default.off(this._handle, eventNames.updateEventName);
    events_engine_default.off(this._handle, eventNames.endEventName);
  }
  _getEventNames() {
    var startEventName = addNamespace2(DRAG_START_EVENT, "overlayDrag");
    var updateEventName = addNamespace2(DRAG_EVENT, "overlayDrag");
    var endEventName = addNamespace2(DRAG_END_EVENT, "overlayDrag");
    return {
      startEventName,
      updateEventName,
      endEventName
    };
  }
  _dragStartHandler(e) {
    var allowedOffsets = this._getAllowedOffsets();
    this._prevOffset = {
      x: 0,
      y: 0
    };
    e.targetElements = [];
    e.maxTopOffset = allowedOffsets.top;
    e.maxBottomOffset = allowedOffsets.bottom;
    e.maxLeftOffset = allowedOffsets.left;
    e.maxRightOffset = allowedOffsets.right;
  }
  _dragUpdateHandler(e) {
    var targetOffset = {
      top: e.offset.y - this._prevOffset.y,
      left: e.offset.x - this._prevOffset.x
    };
    this._moveByOffset(targetOffset);
    this._prevOffset = e.offset;
  }
  _dragEndHandler(event) {
    this._positionController.dragHandled();
    this._positionController.detectVisualPositionChange(event);
  }
  _moveTo(top, left, e) {
    if (!this._dragEnabled) {
      return;
    }
    e.preventDefault();
    e.stopPropagation();
    var offset2 = this._fitOffsetIntoAllowedRange(top, left);
    this._moveByOffset(offset2);
    this._dragEndHandler(e);
  }
  _fitOffsetIntoAllowedRange(top, left) {
    var allowedOffsets = this._getAllowedOffsets();
    return {
      top: fitIntoRange(top, -allowedOffsets.top, allowedOffsets.bottom),
      left: fitIntoRange(left, -allowedOffsets.left, allowedOffsets.right)
    };
  }
  _getContainerDimensions() {
    var document2 = dom_adapter_default.getDocument();
    var container = this._positionController.$dragResizeContainer.get(0);
    var containerWidth = getOuterWidth(container);
    var containerHeight = getOuterHeight(container);
    if (isWindow(container)) {
      containerHeight = Math.max(document2.body.clientHeight, containerHeight);
      containerWidth = Math.max(document2.body.clientWidth, containerWidth);
    }
    return {
      width: containerWidth,
      height: containerHeight
    };
  }
  _getContainerPosition() {
    var container = this._positionController.$dragResizeContainer.get(0);
    return isWindow(container) ? {
      top: 0,
      left: 0
    } : getOffset(container);
  }
  _getElementPosition() {
    return getOffset(this._draggableElement);
  }
  _getInnerDelta() {
    var containerDimensions = this._getContainerDimensions();
    var elementDimensions = this._getElementDimensions();
    return {
      x: containerDimensions.width - elementDimensions.width,
      y: containerDimensions.height - elementDimensions.height
    };
  }
  _getOuterDelta() {
    var {
      width,
      height
    } = this._getElementDimensions();
    var outsideDragFactor = this._positionController.outsideDragFactor;
    return {
      x: width * outsideDragFactor,
      y: height * outsideDragFactor
    };
  }
  _getFullDelta() {
    var fullDelta = this._getInnerDelta();
    var outerDelta = this._getOuterDelta();
    return {
      x: fullDelta.x + outerDelta.x,
      y: fullDelta.y + outerDelta.y
    };
  }
  _getElementDimensions() {
    return {
      width: this._draggableElement.offsetWidth,
      height: this._draggableElement.offsetHeight
    };
  }
  _getAllowedOffsets() {
    var fullDelta = this._getFullDelta();
    var isDragAllowed = fullDelta.y >= 0 && fullDelta.x >= 0;
    if (!isDragAllowed) {
      return {
        top: 0,
        bottom: 0,
        left: 0,
        right: 0
      };
    }
    var elementPosition = this._getElementPosition();
    var containerPosition = this._getContainerPosition();
    var outerDelta = this._getOuterDelta();
    return {
      top: elementPosition.top - containerPosition.top + outerDelta.y,
      bottom: -elementPosition.top + containerPosition.top + fullDelta.y,
      left: elementPosition.left - containerPosition.left + outerDelta.x,
      right: -elementPosition.left + containerPosition.left + fullDelta.x
    };
  }
  _moveByOffset(offset2) {
    var currentPosition = locate(this._draggableElement);
    var newPosition = {
      left: currentPosition.left + offset2.left,
      top: currentPosition.top + offset2.top
    };
    move(this._draggableElement, newPosition);
  }
};
var popup_drag_default = PopupDrag;

// node_modules/devextreme/esm/ui/resizable.js
var RESIZABLE = "dxResizable";
var RESIZABLE_CLASS = "dx-resizable";
var RESIZABLE_RESIZING_CLASS = "dx-resizable-resizing";
var RESIZABLE_HANDLE_CLASS = "dx-resizable-handle";
var RESIZABLE_HANDLE_TOP_CLASS = "dx-resizable-handle-top";
var RESIZABLE_HANDLE_BOTTOM_CLASS = "dx-resizable-handle-bottom";
var RESIZABLE_HANDLE_LEFT_CLASS = "dx-resizable-handle-left";
var RESIZABLE_HANDLE_RIGHT_CLASS = "dx-resizable-handle-right";
var RESIZABLE_HANDLE_CORNER_CLASS = "dx-resizable-handle-corner";
var DRAGSTART_START_EVENT_NAME = addNamespace2(DRAG_START_EVENT, RESIZABLE);
var DRAGSTART_EVENT_NAME = addNamespace2(DRAG_EVENT, RESIZABLE);
var DRAGSTART_END_EVENT_NAME = addNamespace2(DRAG_END_EVENT, RESIZABLE);
var SIDE_BORDER_WIDTH_STYLES = {
  left: "borderLeftWidth",
  top: "borderTopWidth",
  right: "borderRightWidth",
  bottom: "borderBottomWidth"
};
var Resizable = dom_component_default.inherit({
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      handles: "all",
      step: "1",
      stepPrecision: "simple",
      area: void 0,
      minWidth: 30,
      maxWidth: 1 / 0,
      minHeight: 30,
      maxHeight: 1 / 0,
      onResizeStart: null,
      onResize: null,
      onResizeEnd: null,
      roundStepValue: true,
      keepAspectRatio: true
    });
  },
  _init: function() {
    this.callBase();
    this.$element().addClass(RESIZABLE_CLASS);
  },
  _initMarkup: function() {
    this.callBase();
    this._renderHandles();
  },
  _render: function() {
    this.callBase();
    this._renderActions();
  },
  _renderActions: function() {
    this._resizeStartAction = this._createActionByOption("onResizeStart");
    this._resizeEndAction = this._createActionByOption("onResizeEnd");
    this._resizeAction = this._createActionByOption("onResize");
  },
  _renderHandles: function() {
    this._handles = [];
    var handles = this.option("handles");
    if ("none" === handles || !handles) {
      return;
    }
    var directions = "all" === handles ? ["top", "bottom", "left", "right"] : handles.split(" ");
    var activeHandlesMap = {};
    each(directions, (index2, handleName) => {
      activeHandlesMap[handleName] = true;
      this._renderHandle(handleName);
    });
    activeHandlesMap.bottom && activeHandlesMap.right && this._renderHandle("corner-bottom-right");
    activeHandlesMap.bottom && activeHandlesMap.left && this._renderHandle("corner-bottom-left");
    activeHandlesMap.top && activeHandlesMap.right && this._renderHandle("corner-top-right");
    activeHandlesMap.top && activeHandlesMap.left && this._renderHandle("corner-top-left");
    this._attachEventHandlers();
  },
  _renderHandle: function(handleName) {
    var $handle = renderer_default("<div>").addClass(RESIZABLE_HANDLE_CLASS).addClass(RESIZABLE_HANDLE_CLASS + "-" + handleName).appendTo(this.$element());
    this._handles.push($handle);
  },
  _attachEventHandlers: function() {
    if (this.option("disabled")) {
      return;
    }
    var handlers = {};
    handlers[DRAGSTART_START_EVENT_NAME] = this._dragStartHandler.bind(this);
    handlers[DRAGSTART_EVENT_NAME] = this._dragHandler.bind(this);
    handlers[DRAGSTART_END_EVENT_NAME] = this._dragEndHandler.bind(this);
    this._handles.forEach((handleElement) => {
      events_engine_default.on(handleElement, handlers, {
        direction: "both",
        immediate: true
      });
    });
  },
  _detachEventHandlers: function() {
    this._handles.forEach((handleElement) => {
      events_engine_default.off(handleElement);
    });
  },
  _toggleEventHandlers: function(shouldAttachEvents) {
    shouldAttachEvents ? this._attachEventHandlers() : this._detachEventHandlers();
  },
  _getElementSize: function() {
    var $element = this.$element();
    return "border-box" === $element.css("boxSizing") ? {
      width: getOuterWidth($element),
      height: getOuterHeight($element)
    } : {
      width: getWidth($element),
      height: getHeight($element)
    };
  },
  _dragStartHandler: function(e) {
    var $element = this.$element();
    if ($element.is(".dx-state-disabled, .dx-state-disabled *")) {
      e.cancel = true;
      return;
    }
    this._toggleResizingClass(true);
    this._movingSides = this._getMovingSides(e);
    this._elementLocation = locate($element);
    this._elementSize = this._getElementSize();
    this._renderDragOffsets(e);
    this._resizeStartAction({
      event: e,
      width: this._elementSize.width,
      height: this._elementSize.height,
      handles: this._movingSides
    });
    e.targetElements = null;
  },
  _toggleResizingClass: function(value2) {
    this.$element().toggleClass(RESIZABLE_RESIZING_CLASS, value2);
  },
  _renderDragOffsets: function(e) {
    var area = this._getArea();
    if (!area) {
      return;
    }
    var $handle = renderer_default(e.target).closest("." + RESIZABLE_HANDLE_CLASS);
    var handleWidth = getOuterWidth($handle);
    var handleHeight = getOuterHeight($handle);
    var handleOffset = $handle.offset();
    var areaOffset = area.offset;
    var scrollOffset = this._getAreaScrollOffset();
    e.maxLeftOffset = this._leftMaxOffset = handleOffset.left - areaOffset.left - scrollOffset.scrollX;
    e.maxRightOffset = this._rightMaxOffset = areaOffset.left + area.width - handleOffset.left - handleWidth + scrollOffset.scrollX;
    e.maxTopOffset = this._topMaxOffset = handleOffset.top - areaOffset.top - scrollOffset.scrollY;
    e.maxBottomOffset = this._bottomMaxOffset = areaOffset.top + area.height - handleOffset.top - handleHeight + scrollOffset.scrollY;
  },
  _getBorderWidth: function($element, direction) {
    if (isWindow($element.get(0))) {
      return 0;
    }
    var borderWidth = $element.css(SIDE_BORDER_WIDTH_STYLES[direction]);
    return parseInt(borderWidth) || 0;
  },
  _proportionate: function(direction, value2) {
    var size = this._elementSize;
    var factor = "x" === direction ? size.width / size.height : size.height / size.width;
    return value2 * factor;
  },
  _getProportionalDelta: function(_ref) {
    var {
      x,
      y
    } = _ref;
    var proportionalY = this._proportionate("y", x);
    if (proportionalY >= y) {
      return {
        x,
        y: proportionalY
      };
    }
    var proportionalX = this._proportionate("x", y);
    if (proportionalX >= x) {
      return {
        x: proportionalX,
        y
      };
    }
    return {
      x: 0,
      y: 0
    };
  },
  _getDirectionName: function(axis) {
    var sides = this._movingSides;
    if ("x" === axis) {
      return sides.left ? "left" : "right";
    } else {
      return sides.top ? "top" : "bottom";
    }
  },
  _fitIntoArea: function(axis, value2) {
    var _this;
    var directionName = this._getDirectionName(axis);
    return Math.min(value2, null !== (_this = this["_".concat(directionName, "MaxOffset")]) && void 0 !== _this ? _this : 1 / 0);
  },
  _fitDeltaProportionally: function(delta) {
    var fittedDelta = _extends({}, delta);
    var size = this._elementSize;
    var {
      minWidth,
      minHeight,
      maxWidth,
      maxHeight
    } = this.option();
    var getWidth2 = () => size.width + fittedDelta.x;
    var getHeight2 = () => size.height + fittedDelta.y;
    var isInArea = (axis) => fittedDelta[axis] === this._fitIntoArea(axis, fittedDelta[axis]);
    var isFittedX = () => inRange(getWidth2(), minWidth, maxWidth) && isInArea("x");
    var isFittedY = () => inRange(getHeight2(), minHeight, maxHeight) && isInArea("y");
    if (!isFittedX()) {
      var x = this._fitIntoArea("x", fitIntoRange(getWidth2(), minWidth, maxWidth) - size.width);
      fittedDelta = {
        x,
        y: this._proportionate("y", x)
      };
    }
    if (!isFittedY()) {
      var y = this._fitIntoArea("y", fitIntoRange(getHeight2(), minHeight, maxHeight) - size.height);
      fittedDelta = {
        x: this._proportionate("x", y),
        y
      };
    }
    return isFittedX() && isFittedY() ? fittedDelta : {
      x: 0,
      y: 0
    };
  },
  _fitDelta: function(_ref2) {
    var {
      x,
      y
    } = _ref2;
    var size = this._elementSize;
    var {
      minWidth,
      minHeight,
      maxWidth,
      maxHeight
    } = this.option();
    return {
      x: fitIntoRange(size.width + x, minWidth, maxWidth) - size.width,
      y: fitIntoRange(size.height + y, minHeight, maxHeight) - size.height
    };
  },
  _getDeltaByOffset: function(offset2) {
    var sides = this._movingSides;
    var shouldKeepAspectRatio = this._isCornerHandler(sides) && this.option("keepAspectRatio");
    var delta = {
      x: offset2.x * (sides.left ? -1 : 1),
      y: offset2.y * (sides.top ? -1 : 1)
    };
    if (shouldKeepAspectRatio) {
      var proportionalDelta = this._getProportionalDelta(delta);
      var fittedProportionalDelta = this._fitDeltaProportionally(proportionalDelta);
      delta = fittedProportionalDelta;
    } else {
      var fittedDelta = this._fitDelta(delta);
      var roundedFittedDelta = this._roundByStep(fittedDelta);
      delta = roundedFittedDelta;
    }
    return delta;
  },
  _updatePosition: function(delta, _ref3) {
    var {
      width,
      height
    } = _ref3;
    var location = this._elementLocation;
    var sides = this._movingSides;
    var $element = this.$element();
    var elementRect = this._getElementSize();
    var offsetTop = delta.y * (sides.top ? -1 : 1) - ((elementRect.height || height) - height);
    var offsetLeft = delta.x * (sides.left ? -1 : 1) - ((elementRect.width || width) - width);
    move($element, {
      top: location.top + (sides.top ? offsetTop : 0),
      left: location.left + (sides.left ? offsetLeft : 0)
    });
  },
  _dragHandler: function(e) {
    var offset2 = this._getOffset(e);
    var delta = this._getDeltaByOffset(offset2);
    var dimensions = this._updateDimensions(delta);
    this._updatePosition(delta, dimensions);
    this._triggerResizeAction(e, dimensions);
  },
  _updateDimensions: function(delta) {
    var isAbsoluteSize = (size2) => "px" === size2.substring(size2.length - 2);
    var isStepPrecisionStrict = "strict" === this.option("stepPrecision");
    var size = this._elementSize;
    var width = size.width + delta.x;
    var height = size.height + delta.y;
    var elementStyle = this.$element().get(0).style;
    var shouldRenderWidth = delta.x || isStepPrecisionStrict || isAbsoluteSize(elementStyle.width);
    var shouldRenderHeight = delta.y || isStepPrecisionStrict || isAbsoluteSize(elementStyle.height);
    if (shouldRenderWidth) {
      this.option({
        width
      });
    }
    if (shouldRenderHeight) {
      this.option({
        height
      });
    }
    return {
      width: shouldRenderWidth ? width : size.width,
      height: shouldRenderHeight ? height : size.height
    };
  },
  _triggerResizeAction: function(e, _ref4) {
    var {
      width,
      height
    } = _ref4;
    this._resizeAction({
      event: e,
      width: this.option("width") || width,
      height: this.option("height") || height,
      handles: this._movingSides
    });
    triggerResizeEvent(this.$element());
  },
  _isCornerHandler: (sides) => 0 === Object.values(sides).reduce((xor, value2) => xor ^ value2, 0),
  _getOffset: function(e) {
    var offset2 = e.offset;
    var sides = this._movingSides;
    if (!sides.left && !sides.right) {
      offset2.x = 0;
    }
    if (!sides.top && !sides.bottom) {
      offset2.y = 0;
    }
    return offset2;
  },
  _roundByStep: function(delta) {
    return "strict" === this.option("stepPrecision") ? this._roundStrict(delta) : this._roundNotStrict(delta);
  },
  _getSteps: function() {
    return pairToObject(this.option("step"), !this.option("roundStepValue"));
  },
  _roundNotStrict: function(delta) {
    var steps = this._getSteps();
    return {
      x: delta.x - delta.x % steps.h,
      y: delta.y - delta.y % steps.v
    };
  },
  _roundStrict: function(delta) {
    var sides = this._movingSides;
    var offset2 = {
      x: delta.x * (sides.left ? -1 : 1),
      y: delta.y * (sides.top ? -1 : 1)
    };
    var steps = this._getSteps();
    var location = this._elementLocation;
    var size = this._elementSize;
    var xPos = sides.left ? location.left : location.left + size.width;
    var yPos = sides.top ? location.top : location.top + size.height;
    var newXShift = (xPos + offset2.x) % steps.h;
    var newYShift = (yPos + offset2.y) % steps.v;
    var sign2 = Math.sign || ((x) => {
      x = +x;
      if (0 === x || isNaN(x)) {
        return x;
      }
      return x > 0 ? 1 : -1;
    });
    var separatorOffset = (steps2, offset3) => (1 + 0.2 * sign2(offset3)) % 1 * steps2;
    var isSmallOffset = (offset3, steps2) => Math.abs(offset3) < 0.2 * steps2;
    var newOffsetX = offset2.x - newXShift;
    var newOffsetY = offset2.y - newYShift;
    if (newXShift > separatorOffset(steps.h, offset2.x)) {
      newOffsetX += steps.h;
    }
    if (newYShift > separatorOffset(steps.v, offset2.y)) {
      newOffsetY += steps.v;
    }
    var roundedOffset_x = (sides.left || sides.right) && !isSmallOffset(offset2.x, steps.h) ? newOffsetX : 0, roundedOffset_y = (sides.top || sides.bottom) && !isSmallOffset(offset2.y, steps.v) ? newOffsetY : 0;
    return {
      x: roundedOffset_x * (sides.left ? -1 : 1),
      y: roundedOffset_y * (sides.top ? -1 : 1)
    };
  },
  _getMovingSides: function(e) {
    var $target = renderer_default(e.target);
    var hasCornerTopLeftClass = $target.hasClass(RESIZABLE_HANDLE_CORNER_CLASS + "-top-left");
    var hasCornerTopRightClass = $target.hasClass(RESIZABLE_HANDLE_CORNER_CLASS + "-top-right");
    var hasCornerBottomLeftClass = $target.hasClass(RESIZABLE_HANDLE_CORNER_CLASS + "-bottom-left");
    var hasCornerBottomRightClass = $target.hasClass(RESIZABLE_HANDLE_CORNER_CLASS + "-bottom-right");
    return {
      top: $target.hasClass(RESIZABLE_HANDLE_TOP_CLASS) || hasCornerTopLeftClass || hasCornerTopRightClass,
      left: $target.hasClass(RESIZABLE_HANDLE_LEFT_CLASS) || hasCornerTopLeftClass || hasCornerBottomLeftClass,
      bottom: $target.hasClass(RESIZABLE_HANDLE_BOTTOM_CLASS) || hasCornerBottomLeftClass || hasCornerBottomRightClass,
      right: $target.hasClass(RESIZABLE_HANDLE_RIGHT_CLASS) || hasCornerTopRightClass || hasCornerBottomRightClass
    };
  },
  _getArea: function() {
    var area = this.option("area");
    if (isFunction(area)) {
      area = area.call(this);
    }
    if (isPlainObject(area)) {
      return this._getAreaFromObject(area);
    }
    return this._getAreaFromElement(area);
  },
  _getAreaScrollOffset: function() {
    var area = this.option("area");
    var isElement = !isFunction(area) && !isPlainObject(area);
    var scrollOffset = {
      scrollY: 0,
      scrollX: 0
    };
    if (isElement) {
      var areaElement = renderer_default(area)[0];
      if (isWindow(areaElement)) {
        scrollOffset.scrollX = areaElement.pageXOffset;
        scrollOffset.scrollY = areaElement.pageYOffset;
      }
    }
    return scrollOffset;
  },
  _getAreaFromObject: function(area) {
    var result2 = {
      width: area.right - area.left,
      height: area.bottom - area.top,
      offset: {
        left: area.left,
        top: area.top
      }
    };
    this._correctAreaGeometry(result2);
    return result2;
  },
  _getAreaFromElement: function(area) {
    var $area = renderer_default(area);
    var result2;
    if ($area.length) {
      result2 = {
        width: getInnerWidth($area),
        height: getInnerHeight($area),
        offset: extend({
          top: 0,
          left: 0
        }, isWindow($area[0]) ? {} : $area.offset())
      };
      this._correctAreaGeometry(result2, $area);
    }
    return result2;
  },
  _correctAreaGeometry: function(result2, $area) {
    var areaBorderLeft = $area ? this._getBorderWidth($area, "left") : 0;
    var areaBorderTop = $area ? this._getBorderWidth($area, "top") : 0;
    result2.offset.left += areaBorderLeft + this._getBorderWidth(this.$element(), "left");
    result2.offset.top += areaBorderTop + this._getBorderWidth(this.$element(), "top");
    result2.width -= getOuterWidth(this.$element()) - getInnerWidth(this.$element());
    result2.height -= getOuterHeight(this.$element()) - getInnerHeight(this.$element());
  },
  _dragEndHandler: function(e) {
    var $element = this.$element();
    this._resizeEndAction({
      event: e,
      width: getOuterWidth($element),
      height: getOuterHeight($element),
      handles: this._movingSides
    });
    this._toggleResizingClass(false);
  },
  _renderWidth: function(width) {
    this.option("width", fitIntoRange(width, this.option("minWidth"), this.option("maxWidth")));
  },
  _renderHeight: function(height) {
    this.option("height", fitIntoRange(height, this.option("minHeight"), this.option("maxHeight")));
  },
  _optionChanged: function(args) {
    switch (args.name) {
      case "disabled":
        this._toggleEventHandlers(!args.value);
        this.callBase(args);
        break;
      case "handles":
        this._invalidate();
        break;
      case "minWidth":
      case "maxWidth":
        hasWindow() && this._renderWidth(getOuterWidth(this.$element()));
        break;
      case "minHeight":
      case "maxHeight":
        hasWindow() && this._renderHeight(getOuterHeight(this.$element()));
        break;
      case "onResize":
      case "onResizeStart":
      case "onResizeEnd":
        this._renderActions();
        break;
      case "area":
      case "stepPrecision":
      case "step":
      case "roundStepValue":
      case "keepAspectRatio":
        break;
      default:
        this.callBase(args);
    }
  },
  _clean: function() {
    this.$element().find("." + RESIZABLE_HANDLE_CLASS).remove();
  },
  _useTemplates: function() {
    return false;
  }
});
component_registrator_default(RESIZABLE, Resizable);
var resizable_default = Resizable;

// node_modules/devextreme/esm/ui/popup/popup_position_controller.js
var _excluded8 = ["fullScreen", "forceApplyBindings", "dragOutsideBoundary", "dragAndResizeArea", "outsideDragFactor"];
var window19 = getWindow();
var PopupPositionController = class extends OverlayPositionController {
  constructor(_ref) {
    var {
      fullScreen,
      forceApplyBindings,
      dragOutsideBoundary,
      dragAndResizeArea,
      outsideDragFactor
    } = _ref, args = _objectWithoutPropertiesLoose(_ref, _excluded8);
    super(args);
    this._props = _extends({}, this._props, {
      fullScreen,
      forceApplyBindings,
      dragOutsideBoundary,
      dragAndResizeArea,
      outsideDragFactor
    });
    this._$dragResizeContainer = void 0;
    this._updateDragResizeContainer();
  }
  set fullScreen(fullScreen) {
    this._props.fullScreen = fullScreen;
    if (fullScreen) {
      this._fullScreenEnabled();
    } else {
      this._fullScreenDisabled();
    }
  }
  get $dragResizeContainer() {
    return this._$dragResizeContainer;
  }
  get outsideDragFactor() {
    if (this._props.dragOutsideBoundary) {
      return 1;
    }
    return this._props.outsideDragFactor;
  }
  set dragAndResizeArea(dragAndResizeArea) {
    this._props.dragAndResizeArea = dragAndResizeArea;
    this._updateDragResizeContainer();
  }
  set dragOutsideBoundary(dragOutsideBoundary) {
    this._props.dragOutsideBoundary = dragOutsideBoundary;
    this._updateDragResizeContainer();
  }
  set outsideDragFactor(outsideDragFactor) {
    this._props.outsideDragFactor = outsideDragFactor;
  }
  updateContainer(containerProp) {
    super.updateContainer(containerProp);
    this._updateDragResizeContainer();
  }
  dragHandled() {
    this.restorePositionOnNextRender(false);
  }
  resizeHandled() {
    this.restorePositionOnNextRender(false);
  }
  positionContent() {
    if (this._props.fullScreen) {
      move(this._$content, {
        top: 0,
        left: 0
      });
      this.detectVisualPositionChange();
    } else {
      var _this$_props$forceApp, _this$_props;
      null === (_this$_props$forceApp = (_this$_props = this._props).forceApplyBindings) || void 0 === _this$_props$forceApp ? void 0 : _this$_props$forceApp.call(_this$_props);
      super.positionContent();
    }
  }
  _updateDragResizeContainer() {
    this._$dragResizeContainer = this._getDragResizeContainer();
  }
  _getDragResizeContainer() {
    if (this._props.dragOutsideBoundary) {
      return renderer_default(window19);
    }
    if (this._props.dragAndResizeArea) {
      return renderer_default(this._props.dragAndResizeArea);
    }
    var isContainerDefined = originalViewPort().get(0) || this._props.container;
    return isContainerDefined ? this._$markupContainer : renderer_default(window19);
  }
  _getVisualContainer() {
    if (this._props.fullScreen) {
      return renderer_default(window19);
    }
    return super._getVisualContainer();
  }
  _fullScreenEnabled() {
    this.restorePositionOnNextRender(false);
  }
  _fullScreenDisabled() {
    this.restorePositionOnNextRender(true);
  }
};

// node_modules/devextreme/esm/ui/popup/popup_overflow_manager.js
var overflowManagerMock = {
  setOverflow: noop2,
  restoreOverflow: noop2
};
var createBodyOverflowManager = () => {
  if (!hasWindow()) {
    return overflowManagerMock;
  }
  var window29 = getWindow();
  var documentElement = dom_adapter_default.getDocument().documentElement;
  var body = dom_adapter_default.getBody();
  var isIosDevice = "ios" === devices_default.real().platform;
  var prevSettings = {
    overflow: null,
    overflowX: null,
    overflowY: null,
    paddingRight: null,
    position: null,
    top: null,
    left: null
  };
  var setBodyPaddingRight = () => {
    var scrollBarWidth = window29.innerWidth - documentElement.clientWidth;
    if (prevSettings.paddingRight || scrollBarWidth <= 0) {
      return;
    }
    var paddingRight = window29.getComputedStyle(body).getPropertyValue("padding-right");
    var computedBodyPaddingRight = parseInt(paddingRight, 10);
    prevSettings.paddingRight = computedBodyPaddingRight;
    body.style.setProperty("padding-right", "".concat(computedBodyPaddingRight + scrollBarWidth, "px"));
  };
  var restoreBodyPaddingRight = () => {
    if (!isDefined(prevSettings.paddingRight)) {
      return;
    }
    if (prevSettings.paddingRight) {
      body.style.setProperty("padding-right", "".concat(prevSettings.paddingRight, "px"));
    } else {
      body.style.removeProperty("padding-right");
    }
    prevSettings.paddingRight = null;
  };
  return {
    setOverflow: isIosDevice ? () => {
      if (isDefined(prevSettings.position) || "fixed" === body.style.position) {
        return;
      }
      var {
        scrollY,
        scrollX
      } = window29;
      prevSettings.position = body.style.position;
      prevSettings.top = body.style.top;
      prevSettings.left = body.style.left;
      body.style.setProperty("position", "fixed");
      body.style.setProperty("top", "".concat(-scrollY, "px"));
      body.style.setProperty("left", "".concat(-scrollX, "px"));
    } : () => {
      setBodyPaddingRight();
      if (prevSettings.overflow || "hidden" === body.style.overflow) {
        return;
      }
      prevSettings.overflow = body.style.overflow;
      prevSettings.overflowX = body.style.overflowX;
      prevSettings.overflowY = body.style.overflowY;
      body.style.setProperty("overflow", "hidden");
    },
    restoreOverflow: isIosDevice ? () => {
      if (!isDefined(prevSettings.position)) {
        return;
      }
      var scrollY = -parseInt(body.style.top, 10);
      var scrollX = -parseInt(body.style.left, 10);
      ["position", "top", "left"].forEach((property) => {
        if (prevSettings[property]) {
          body.style.setProperty(property, prevSettings[property]);
        } else {
          body.style.removeProperty(property);
        }
      });
      window29.scrollTo(scrollX, scrollY);
      prevSettings.position = null;
    } : () => {
      restoreBodyPaddingRight();
      ["overflow", "overflowX", "overflowY"].forEach((property) => {
        if (!isDefined(prevSettings[property])) {
          return;
        }
        var propertyInKebabCase = property.replace(/(X)|(Y)/, (symbol) => "-".concat(symbol.toLowerCase()));
        if (prevSettings[property]) {
          body.style.setProperty(propertyInKebabCase, prevSettings[property]);
        } else {
          body.style.removeProperty(propertyInKebabCase);
        }
        prevSettings[property] = null;
      });
    }
  };
};

// node_modules/devextreme/esm/ui/popup/ui.popup.js
var window20 = getWindow();
var POPUP_CLASS = "dx-popup";
var POPUP_WRAPPER_CLASS = "dx-popup-wrapper";
var POPUP_FULL_SCREEN_CLASS = "dx-popup-fullscreen";
var POPUP_FULL_SCREEN_WIDTH_CLASS = "dx-popup-fullscreen-width";
var POPUP_NORMAL_CLASS = "dx-popup-normal";
var POPUP_CONTENT_CLASS = "dx-popup-content";
var POPUP_CONTENT_SCROLLABLE_CLASS = "dx-popup-content-scrollable";
var DISABLED_STATE_CLASS3 = "dx-state-disabled";
var POPUP_DRAGGABLE_CLASS = "dx-popup-draggable";
var POPUP_TITLE_CLASS = "dx-popup-title";
var POPUP_TITLE_CLOSEBUTTON_CLASS = "dx-closebutton";
var POPUP_BOTTOM_CLASS = "dx-popup-bottom";
var POPUP_HAS_CLOSE_BUTTON_CLASS = "dx-has-close-button";
var TEMPLATE_WRAPPER_CLASS3 = "dx-template-wrapper";
var POPUP_CONTENT_FLEX_HEIGHT_CLASS = "dx-popup-flex-height";
var POPUP_CONTENT_INHERIT_HEIGHT_CLASS = "dx-popup-inherit-height";
var TOOLBAR_LABEL_CLASS3 = "dx-toolbar-label";
var ALLOWED_TOOLBAR_ITEM_ALIASES = ["cancel", "clear", "done"];
var BUTTON_DEFAULT_TYPE = "default";
var BUTTON_NORMAL_TYPE = "normal";
var BUTTON_TEXT_MODE = "text";
var BUTTON_CONTAINED_MODE = "contained";
var BUTTON_OUTLINED_MODE = "outlined";
var IS_OLD_SAFARI = browser_default.safari && compare(browser_default.version, [11]) < 0;
var HEIGHT_STRATEGIES = {
  static: "",
  inherit: POPUP_CONTENT_INHERIT_HEIGHT_CLASS,
  flex: POPUP_CONTENT_FLEX_HEIGHT_CLASS
};
var getButtonPlace = (name2) => {
  var device = devices_default.current();
  var platform = device.platform;
  var toolbar = "bottom";
  var location = "before";
  if ("ios" === platform) {
    switch (name2) {
      case "cancel":
        toolbar = "top";
        break;
      case "clear":
        toolbar = "top";
        location = "after";
        break;
      case "done":
        location = "after";
    }
  } else if ("android" === platform) {
    switch (name2) {
      case "cancel":
      case "done":
        location = "after";
    }
  }
  return {
    toolbar,
    location
  };
};
var Popup = ui_overlay_default.inherit({
  _supportedKeys: function() {
    return extend(this.callBase(), {
      upArrow: (e) => {
        var _this$_drag;
        null === (_this$_drag = this._drag) || void 0 === _this$_drag ? void 0 : _this$_drag.moveUp(e);
      },
      downArrow: (e) => {
        var _this$_drag2;
        null === (_this$_drag2 = this._drag) || void 0 === _this$_drag2 ? void 0 : _this$_drag2.moveDown(e);
      },
      leftArrow: (e) => {
        var _this$_drag3;
        null === (_this$_drag3 = this._drag) || void 0 === _this$_drag3 ? void 0 : _this$_drag3.moveLeft(e);
      },
      rightArrow: (e) => {
        var _this$_drag4;
        null === (_this$_drag4 = this._drag) || void 0 === _this$_drag4 ? void 0 : _this$_drag4.moveRight(e);
      }
    });
  },
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      fullScreen: false,
      title: "",
      showTitle: true,
      titleTemplate: "title",
      onTitleRendered: null,
      dragOutsideBoundary: false,
      dragEnabled: false,
      dragAndResizeArea: void 0,
      enableBodyScroll: true,
      outsideDragFactor: 0,
      onResizeStart: null,
      onResize: null,
      onResizeEnd: null,
      resizeEnabled: false,
      toolbarItems: [],
      showCloseButton: false,
      bottomTemplate: "bottom",
      useDefaultToolbarButtons: false,
      useFlatToolbarButtons: false,
      autoResizeEnabled: true
    });
  },
  _defaultOptionsRules: function() {
    return this.callBase().concat([{
      device: {
        platform: "ios"
      },
      options: {
        animation: this._iosAnimation
      }
    }, {
      device: {
        platform: "android"
      },
      options: {
        animation: this._androidAnimation
      }
    }, {
      device: {
        platform: "generic"
      },
      options: {
        showCloseButton: true
      }
    }, {
      device: function(_device) {
        return "desktop" === devices_default.real().deviceType && "generic" === _device.platform;
      },
      options: {
        dragEnabled: true
      }
    }, {
      device: function() {
        return "desktop" === devices_default.real().deviceType && !devices_default.isSimulator();
      },
      options: {
        focusStateEnabled: true
      }
    }, {
      device: function() {
        return isMaterialBased();
      },
      options: {
        useFlatToolbarButtons: true
      }
    }, {
      device: function() {
        return isMaterial();
      },
      options: {
        useDefaultToolbarButtons: true,
        showCloseButton: false
      }
    }]);
  },
  _iosAnimation: {
    show: {
      type: "slide",
      duration: 400,
      from: {
        position: {
          my: "top",
          at: "bottom"
        }
      },
      to: {
        position: {
          my: "center",
          at: "center"
        }
      }
    },
    hide: {
      type: "slide",
      duration: 400,
      from: {
        opacity: 1,
        position: {
          my: "center",
          at: "center"
        }
      },
      to: {
        opacity: 1,
        position: {
          my: "top",
          at: "bottom"
        }
      }
    }
  },
  _androidAnimation: function() {
    return this.option("fullScreen") ? {
      show: {
        type: "slide",
        duration: 300,
        from: {
          top: "30%",
          opacity: 0
        },
        to: {
          top: 0,
          opacity: 1
        }
      },
      hide: {
        type: "slide",
        duration: 300,
        from: {
          top: 0,
          opacity: 1
        },
        to: {
          top: "30%",
          opacity: 0
        }
      }
    } : {
      show: {
        type: "fade",
        duration: 400,
        from: 0,
        to: 1
      },
      hide: {
        type: "fade",
        duration: 400,
        from: 1,
        to: 0
      }
    };
  },
  _init: function() {
    var popupWrapperClassExternal = this.option("_wrapperClassExternal");
    var popupWrapperClasses = popupWrapperClassExternal ? "".concat(POPUP_WRAPPER_CLASS, " ").concat(popupWrapperClassExternal) : POPUP_WRAPPER_CLASS;
    this.callBase();
    this._createBodyOverflowManager();
    this._updateResizeCallbackSkipCondition();
    this.$element().addClass(POPUP_CLASS);
    this.$wrapper().addClass(popupWrapperClasses);
    this._$popupContent = this._$content.wrapInner(renderer_default("<div>").addClass(POPUP_CONTENT_CLASS)).children().eq(0);
    this._toggleContentScrollClass();
    this.$overlayContent().attr("role", "dialog");
  },
  _render: function() {
    var isFullscreen = this.option("fullScreen");
    this._toggleFullScreenClass(isFullscreen);
    this.callBase();
  },
  _createBodyOverflowManager: function() {
    this._bodyOverflowManager = createBodyOverflowManager();
  },
  _toggleFullScreenClass: function(value2) {
    this.$overlayContent().toggleClass(POPUP_FULL_SCREEN_CLASS, value2).toggleClass(POPUP_NORMAL_CLASS, !value2);
  },
  _initTemplates: function() {
    this.callBase();
    this._templateManager.addDefaultTemplates({
      title: new EmptyTemplate(),
      bottom: new EmptyTemplate()
    });
  },
  _getActionsList: function() {
    return this.callBase().concat(["onResizeStart", "onResize", "onResizeEnd"]);
  },
  _contentResizeHandler: function(entry) {
    if (!this._shouldSkipContentResize(entry)) {
      this._renderGeometry({
        shouldOnlyReposition: true
      });
    }
  },
  _doesShowAnimationChangeDimensions: function() {
    var animation3 = this.option("animation");
    return ["to", "from"].some((prop) => {
      var _animation$show;
      var config3 = null === animation3 || void 0 === animation3 ? void 0 : null === (_animation$show = animation3.show) || void 0 === _animation$show ? void 0 : _animation$show[prop];
      return isObject(config3) && ("width" in config3 || "height" in config3);
    });
  },
  _updateResizeCallbackSkipCondition() {
    var doesShowAnimationChangeDimensions = this._doesShowAnimationChangeDimensions();
    this._shouldSkipContentResize = (entry) => doesShowAnimationChangeDimensions && this._showAnimationProcessing || this._areContentDimensionsRendered(entry);
  },
  _observeContentResize: function(shouldObserve) {
    if (!this.option("useResizeObserver")) {
      return;
    }
    var contentElement = this._$content.get(0);
    if (shouldObserve) {
      resize_observer_default.observe(contentElement, (entry) => {
        this._contentResizeHandler(entry);
      });
    } else {
      resize_observer_default.unobserve(contentElement);
    }
  },
  _areContentDimensionsRendered: function(entry) {
    var _entry$contentBoxSize, _this$_renderedDimens3, _this$_renderedDimens4;
    var contentBox = null === (_entry$contentBoxSize = entry.contentBoxSize) || void 0 === _entry$contentBoxSize ? void 0 : _entry$contentBoxSize[0];
    if (contentBox) {
      var _this$_renderedDimens, _this$_renderedDimens2;
      return parseInt(contentBox.inlineSize, 10) === (null === (_this$_renderedDimens = this._renderedDimensions) || void 0 === _this$_renderedDimens ? void 0 : _this$_renderedDimens.width) && parseInt(contentBox.blockSize, 10) === (null === (_this$_renderedDimens2 = this._renderedDimensions) || void 0 === _this$_renderedDimens2 ? void 0 : _this$_renderedDimens2.height);
    }
    var contentRect = entry.contentRect;
    return parseInt(contentRect.width, 10) === (null === (_this$_renderedDimens3 = this._renderedDimensions) || void 0 === _this$_renderedDimens3 ? void 0 : _this$_renderedDimens3.width) && parseInt(contentRect.height, 10) === (null === (_this$_renderedDimens4 = this._renderedDimensions) || void 0 === _this$_renderedDimens4 ? void 0 : _this$_renderedDimens4.height);
  },
  _renderContent() {
    this.callBase();
    this._observeContentResize(true);
  },
  _renderContentImpl: function() {
    this._renderTitle();
    this.callBase();
    this._renderResize();
    this._renderBottom();
  },
  _renderTitle: function() {
    var items = this._getToolbarItems("top");
    var {
      title,
      showTitle
    } = this.option();
    if (showTitle && !!title) {
      items.unshift({
        location: devices_default.current().ios ? "center" : "before",
        text: title
      });
    }
    if (showTitle || items.length > 0) {
      this._$title && this._$title.remove();
      var $title = renderer_default("<div>").addClass(POPUP_TITLE_CLASS).insertBefore(this.$content());
      this._$title = this._renderTemplateByType("titleTemplate", items, $title).addClass(POPUP_TITLE_CLASS);
      this._renderDrag();
      this._executeTitleRenderAction(this._$title);
      this._$title.toggleClass(POPUP_HAS_CLOSE_BUTTON_CLASS, this._hasCloseButton());
    } else if (this._$title) {
      this._$title.detach();
    }
    this._toggleAriaLabel();
  },
  _toggleAriaLabel() {
    var _this$_$title;
    var {
      title,
      showTitle
    } = this.option();
    var shouldSetAriaLabel = showTitle && !!title;
    var titleId = shouldSetAriaLabel ? new guid_default() : null;
    null === (_this$_$title = this._$title) || void 0 === _this$_$title ? void 0 : _this$_$title.find(".".concat(TOOLBAR_LABEL_CLASS3)).eq(0).attr("id", titleId);
    this.$overlayContent().attr("aria-labelledby", titleId);
  },
  _renderTemplateByType: function(optionName, data3, $container, additionalToolbarOptions) {
    var {
      rtlEnabled,
      useDefaultToolbarButtons,
      useFlatToolbarButtons,
      disabled
    } = this.option();
    var template = this._getTemplateByOption(optionName);
    var toolbarTemplate = template instanceof EmptyTemplate;
    if (toolbarTemplate) {
      var integrationOptions = extend({}, this.option("integrationOptions"), {
        skipTemplates: ["content", "title"]
      });
      var toolbarOptions = extend(additionalToolbarOptions, {
        items: data3,
        rtlEnabled,
        useDefaultButtons: useDefaultToolbarButtons,
        useFlatButtons: useFlatToolbarButtons,
        disabled,
        integrationOptions
      });
      this._getTemplate("dx-polymorph-widget").render({
        container: $container,
        model: {
          widget: this._getToolbarName(),
          options: toolbarOptions
        }
      });
      var $toolbar = $container.children("div");
      $container.replaceWith($toolbar);
      return $toolbar;
    } else {
      var $result = renderer_default(template.render({
        container: getPublicElement($container)
      }));
      if ($result.hasClass(TEMPLATE_WRAPPER_CLASS3)) {
        $container.replaceWith($result);
        $container = $result;
      }
      return $container;
    }
  },
  _getToolbarName: function() {
    return "dxToolbarBase";
  },
  _renderVisibilityAnimate: function(visible2) {
    return this.callBase(visible2);
  },
  _hide() {
    this._observeContentResize(false);
    return this.callBase();
  },
  _executeTitleRenderAction: function($titleElement) {
    this._getTitleRenderAction()({
      titleElement: getPublicElement($titleElement)
    });
  },
  _getTitleRenderAction: function() {
    return this._titleRenderAction || this._createTitleRenderAction();
  },
  _createTitleRenderAction: function() {
    return this._titleRenderAction = this._createActionByOption("onTitleRendered", {
      element: this.element(),
      excludeValidators: ["disabled", "readOnly"]
    });
  },
  _getCloseButton: function() {
    return {
      toolbar: "top",
      location: "after",
      template: this._getCloseButtonRenderer()
    };
  },
  _getCloseButtonRenderer: function() {
    return (_, __, container) => {
      var $button = renderer_default("<div>").addClass(POPUP_TITLE_CLOSEBUTTON_CLASS);
      this._createComponent($button, button_default, {
        icon: "close",
        onClick: this._createToolbarItemAction(void 0),
        stylingMode: "text",
        integrationOptions: {}
      });
      renderer_default(container).append($button);
    };
  },
  _getToolbarItems: function(toolbar) {
    var toolbarItems = this.option("toolbarItems");
    var toolbarsItems = [];
    this._toolbarItemClasses = [];
    var currentPlatform = devices_default.current().platform;
    var index2 = 0;
    each(toolbarItems, (_, data3) => {
      var isShortcut = isDefined(data3.shortcut);
      var item = isShortcut ? getButtonPlace(data3.shortcut) : data3;
      if (isShortcut && "ios" === currentPlatform && index2 < 2) {
        item.toolbar = "top";
        index2++;
      }
      item.toolbar = data3.toolbar || item.toolbar || "top";
      if (item && item.toolbar === toolbar) {
        if (isShortcut) {
          extend(item, {
            location: data3.location
          }, this._getToolbarItemByAlias(data3));
        }
        var isLTROrder = "generic" === currentPlatform;
        if ("done" === data3.shortcut && isLTROrder || "cancel" === data3.shortcut && !isLTROrder) {
          toolbarsItems.unshift(item);
        } else {
          toolbarsItems.push(item);
        }
      }
    });
    if ("top" === toolbar && this._hasCloseButton()) {
      toolbarsItems.push(this._getCloseButton());
    }
    return toolbarsItems;
  },
  _hasCloseButton() {
    return this.option("showCloseButton") && this.option("showTitle");
  },
  _getLocalizationKey: (itemType) => "done" === itemType.toLowerCase() ? "OK" : camelize(itemType, true),
  _getToolbarButtonStylingMode: function(shortcut) {
    if (isFluent()) {
      return "done" === shortcut ? BUTTON_CONTAINED_MODE : BUTTON_OUTLINED_MODE;
    }
    return this.option("useFlatToolbarButtons") ? BUTTON_TEXT_MODE : BUTTON_CONTAINED_MODE;
  },
  _getToolbarButtonType: function(shortcut) {
    if (isFluent() && "done" === shortcut || this.option("useDefaultToolbarButtons")) {
      return BUTTON_DEFAULT_TYPE;
    }
    return BUTTON_NORMAL_TYPE;
  },
  _getToolbarItemByAlias: function(data3) {
    var that = this;
    var itemType = data3.shortcut;
    if (!ALLOWED_TOOLBAR_ITEM_ALIASES.includes(itemType)) {
      return false;
    }
    var itemConfig = extend({
      text: message_default.format(this._getLocalizationKey(itemType)),
      onClick: this._createToolbarItemAction(data3.onClick),
      integrationOptions: {},
      type: this._getToolbarButtonType(itemType),
      stylingMode: this._getToolbarButtonStylingMode(itemType)
    }, data3.options || {});
    var itemClass = POPUP_CLASS + "-" + itemType;
    this._toolbarItemClasses.push(itemClass);
    return {
      template: function(_, __, container) {
        var $toolbarItem = renderer_default("<div>").addClass(itemClass).appendTo(container);
        that._createComponent($toolbarItem, button_default, itemConfig);
      }
    };
  },
  _createToolbarItemAction: function(clickAction) {
    return this._createAction(clickAction, {
      afterExecute: function(e) {
        e.component.hide();
      }
    });
  },
  _renderBottom: function() {
    var items = this._getToolbarItems("bottom");
    if (items.length) {
      this._$bottom && this._$bottom.remove();
      var $bottom = renderer_default("<div>").addClass(POPUP_BOTTOM_CLASS).insertAfter(this.$content());
      this._$bottom = this._renderTemplateByType("bottomTemplate", items, $bottom, {
        compactMode: true
      }).addClass(POPUP_BOTTOM_CLASS);
      this._toggleClasses();
    } else {
      this._$bottom && this._$bottom.detach();
    }
  },
  _toggleDisabledState: function(value2) {
    this.callBase(...arguments);
    this.$content().toggleClass(DISABLED_STATE_CLASS3, Boolean(value2));
  },
  _toggleClasses: function() {
    var aliases = ALLOWED_TOOLBAR_ITEM_ALIASES;
    each(aliases, (_, alias) => {
      var className = POPUP_CLASS + "-" + alias;
      if (this._toolbarItemClasses.includes(className)) {
        this.$wrapper().addClass(className + "-visible");
        this._$bottom.addClass(className);
      } else {
        this.$wrapper().removeClass(className + "-visible");
        this._$bottom.removeClass(className);
      }
    });
  },
  _toggleFocusClass(isFocused, $element) {
    this.callBase(isFocused, $element);
    if (isFocused && !isLastZIndexInStack(this._zIndex)) {
      var zIndex = create(this._zIndexInitValue());
      remove2(this._zIndex);
      this._zIndex = zIndex;
      this._$wrapper.css("zIndex", zIndex);
      this._$content.css("zIndex", zIndex);
    }
  },
  _toggleContentScrollClass() {
    var isNativeScrollingEnabled = !this.option("preventScrollEvents");
    this.$content().toggleClass(POPUP_CONTENT_SCROLLABLE_CLASS, isNativeScrollingEnabled);
  },
  _getPositionControllerConfig() {
    var {
      fullScreen,
      forceApplyBindings,
      dragOutsideBoundary,
      dragAndResizeArea,
      outsideDragFactor
    } = this.option();
    return extend({}, this.callBase(), {
      fullScreen,
      forceApplyBindings,
      dragOutsideBoundary,
      dragAndResizeArea,
      outsideDragFactor
    });
  },
  _initPositionController() {
    this._positionController = new PopupPositionController(this._getPositionControllerConfig());
  },
  _getDragTarget: function() {
    return this.topToolbar();
  },
  _renderGeometry: function(options2) {
    var {
      visible: visible2,
      useResizeObserver
    } = this.option();
    if (visible2 && hasWindow()) {
      var isAnimated = this._showAnimationProcessing;
      var shouldRepeatAnimation = isAnimated && !(null !== options2 && void 0 !== options2 && options2.forceStopAnimation) && useResizeObserver;
      this._isAnimationPaused = shouldRepeatAnimation || void 0;
      this._stopAnimation();
      if (null !== options2 && void 0 !== options2 && options2.shouldOnlyReposition) {
        this._renderPosition(false);
      } else {
        this._renderGeometryImpl(null === options2 || void 0 === options2 ? void 0 : options2.isDimensionChange);
      }
      if (shouldRepeatAnimation) {
        this._animateShowing();
        this._isAnimationPaused = void 0;
      }
    }
  },
  _cacheDimensions: function() {
    if (!this.option("useResizeObserver")) {
      return;
    }
    this._renderedDimensions = {
      width: parseInt(getWidth(this._$content), 10),
      height: parseInt(getHeight(this._$content), 10)
    };
  },
  _renderGeometryImpl: function() {
    var isDimensionChange = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : false;
    if (!isDimensionChange) {
      this._resetContentHeight();
    }
    this.callBase();
    this._cacheDimensions();
    this._setContentHeight();
  },
  _resetContentHeight: function() {
    var height = this._getOptionValue("height");
    if ("auto" === height) {
      this.$content().css({
        height: "auto",
        maxHeight: "none"
      });
    }
  },
  _renderDrag: function() {
    var $dragTarget = this._getDragTarget();
    var dragEnabled = this.option("dragEnabled");
    if (!$dragTarget) {
      return;
    }
    var config3 = {
      dragEnabled,
      handle: $dragTarget.get(0),
      draggableElement: this._$content.get(0),
      positionController: this._positionController
    };
    if (this._drag) {
      this._drag.init(config3);
    } else {
      this._drag = new popup_drag_default(config3);
    }
    this.$overlayContent().toggleClass(POPUP_DRAGGABLE_CLASS, dragEnabled);
  },
  _renderResize: function() {
    this._resizable = this._createComponent(this._$content, resizable_default, {
      handles: this.option("resizeEnabled") ? "all" : "none",
      onResizeEnd: (e) => {
        this._resizeEndHandler(e);
        this._observeContentResize(true);
      },
      onResize: (e) => {
        this._setContentHeight();
        this._actions.onResize(e);
      },
      onResizeStart: (e) => {
        this._observeContentResize(false);
        this._actions.onResizeStart(e);
      },
      minHeight: 100,
      minWidth: 100,
      area: this._positionController.$dragResizeContainer,
      keepAspectRatio: false
    });
  },
  _resizeEndHandler: function(e) {
    var width = this._resizable.option("width");
    var height = this._resizable.option("height");
    width && this._setOptionWithoutOptionChange("width", width);
    height && this._setOptionWithoutOptionChange("height", height);
    this._cacheDimensions();
    this._positionController.resizeHandled();
    this._positionController.detectVisualPositionChange(e.event);
    this._actions.onResizeEnd(e);
  },
  _setContentHeight: function() {
    (this.option("forceApplyBindings") || noop2)();
    var overlayContent = this.$overlayContent().get(0);
    var currentHeightStrategyClass = this._chooseHeightStrategy(overlayContent);
    this.$content().css(this._getHeightCssStyles(currentHeightStrategyClass, overlayContent));
    this._setHeightClasses(this.$overlayContent(), currentHeightStrategyClass);
  },
  _heightStrategyChangeOffset: function(currentHeightStrategyClass, popupVerticalPaddings) {
    return currentHeightStrategyClass === HEIGHT_STRATEGIES.flex ? -popupVerticalPaddings : 0;
  },
  _chooseHeightStrategy: function(overlayContent) {
    var isAutoWidth = "auto" === overlayContent.style.width || "" === overlayContent.style.width;
    var currentHeightStrategyClass = HEIGHT_STRATEGIES.static;
    if (this._isAutoHeight() && this.option("autoResizeEnabled")) {
      if (isAutoWidth || IS_OLD_SAFARI) {
        currentHeightStrategyClass = HEIGHT_STRATEGIES.inherit;
      } else {
        currentHeightStrategyClass = HEIGHT_STRATEGIES.flex;
      }
    }
    return currentHeightStrategyClass;
  },
  _getHeightCssStyles: function(currentHeightStrategyClass, overlayContent) {
    var cssStyles = {};
    var contentMaxHeight = this._getOptionValue("maxHeight", overlayContent);
    var contentMinHeight = this._getOptionValue("minHeight", overlayContent);
    var popupHeightParts = this._splitPopupHeight();
    var toolbarsAndVerticalOffsetsHeight = popupHeightParts.header + popupHeightParts.footer + popupHeightParts.contentVerticalOffsets + popupHeightParts.popupVerticalOffsets + this._heightStrategyChangeOffset(currentHeightStrategyClass, popupHeightParts.popupVerticalPaddings);
    if (currentHeightStrategyClass === HEIGHT_STRATEGIES.static) {
      if (!this._isAutoHeight() || contentMaxHeight || contentMinHeight) {
        var overlayHeight = this.option("fullScreen") ? Math.min(getBoundingRect(overlayContent).height, getWindow().innerHeight) : getBoundingRect(overlayContent).height;
        var contentHeight = overlayHeight - toolbarsAndVerticalOffsetsHeight;
        cssStyles = {
          height: Math.max(0, contentHeight),
          minHeight: "auto",
          maxHeight: "auto"
        };
      }
    } else {
      var container = renderer_default(this._positionController.$visualContainer).get(0);
      var maxHeightValue = addOffsetToMaxHeight(contentMaxHeight, -toolbarsAndVerticalOffsetsHeight, container);
      var minHeightValue = addOffsetToMinHeight(contentMinHeight, -toolbarsAndVerticalOffsetsHeight, container);
      cssStyles = {
        height: "auto",
        minHeight: minHeightValue,
        maxHeight: maxHeightValue
      };
    }
    return cssStyles;
  },
  _setHeightClasses: function($container, currentClass) {
    var excessClasses = "";
    for (var name2 in HEIGHT_STRATEGIES) {
      if (HEIGHT_STRATEGIES[name2] !== currentClass) {
        excessClasses += " " + HEIGHT_STRATEGIES[name2];
      }
    }
    $container.removeClass(excessClasses).addClass(currentClass);
  },
  _isAutoHeight: function() {
    return "auto" === this.$overlayContent().get(0).style.height;
  },
  _splitPopupHeight: function() {
    var topToolbar = this.topToolbar();
    var bottomToolbar = this.bottomToolbar();
    return {
      header: getVisibleHeight(topToolbar && topToolbar.get(0)),
      footer: getVisibleHeight(bottomToolbar && bottomToolbar.get(0)),
      contentVerticalOffsets: getVerticalOffsets(this.$overlayContent().get(0), true),
      popupVerticalOffsets: getVerticalOffsets(this.$content().get(0), true),
      popupVerticalPaddings: getVerticalOffsets(this.$content().get(0), false)
    };
  },
  _isAllWindowCovered: function() {
    return this.callBase() || this.option("fullScreen");
  },
  _renderDimensions: function() {
    if (this.option("fullScreen")) {
      this.$overlayContent().css({
        width: "100%",
        height: "100%",
        minWidth: "",
        maxWidth: "",
        minHeight: "",
        maxHeight: ""
      });
    } else {
      this.callBase();
    }
    if (hasWindow()) {
      this._renderFullscreenWidthClass();
    }
  },
  _dimensionChanged: function() {
    this._renderGeometry({
      isDimensionChange: true
    });
  },
  _clean: function() {
    this.callBase();
    this._observeContentResize(false);
  },
  _dispose: function() {
    this.callBase();
    this._toggleBodyScroll(true);
  },
  _renderFullscreenWidthClass: function() {
    this.$overlayContent().toggleClass(POPUP_FULL_SCREEN_WIDTH_CLASS, getOuterWidth(this.$overlayContent()) === getWidth(window20));
  },
  _toggleSafariScrolling() {
    if (!this.option("enableBodyScroll")) {
      return;
    }
    this.callBase();
  },
  _toggleBodyScroll: function(enabled) {
    if (!this._bodyOverflowManager) {
      return;
    }
    var {
      setOverflow,
      restoreOverflow
    } = this._bodyOverflowManager;
    if (enabled) {
      restoreOverflow();
    } else {
      setOverflow();
    }
  },
  refreshPosition: function() {
    this._renderPosition();
  },
  _optionChanged: function(args) {
    var _this$_resizable2;
    var {
      value: value2,
      name: name2
    } = args;
    switch (name2) {
      case "disabled":
        this.callBase(args);
        this._renderTitle();
        this._renderBottom();
        break;
      case "animation":
        this._updateResizeCallbackSkipCondition();
        break;
      case "enableBodyScroll":
        if (this.option("visible")) {
          this._toggleBodyScroll(value2);
        }
        break;
      case "showTitle":
      case "title":
      case "titleTemplate":
        this._renderTitle();
        this._renderGeometry();
        triggerResizeEvent(this.$overlayContent());
        break;
      case "bottomTemplate":
        this._renderBottom();
        this._renderGeometry();
        triggerResizeEvent(this.$overlayContent());
        break;
      case "container":
        this.callBase(args);
        if (this.option("resizeEnabled")) {
          var _this$_resizable;
          null === (_this$_resizable = this._resizable) || void 0 === _this$_resizable ? void 0 : _this$_resizable.option("area", this._positionController.$dragResizeContainer);
        }
        break;
      case "width":
      case "height":
        this.callBase(args);
        null === (_this$_resizable2 = this._resizable) || void 0 === _this$_resizable2 ? void 0 : _this$_resizable2.option(name2, value2);
        break;
      case "onTitleRendered":
        this._createTitleRenderAction(value2);
        break;
      case "toolbarItems":
      case "useDefaultToolbarButtons":
      case "useFlatToolbarButtons":
        var shouldRenderGeometry = !args.fullName.match(/^toolbarItems((\[\d+\])(\.(options|visible).*)?)?$/);
        this._renderTitle();
        this._renderBottom();
        if (shouldRenderGeometry) {
          this._renderGeometry();
          triggerResizeEvent(this.$overlayContent());
        }
        break;
      case "dragEnabled":
        this._renderDrag();
        break;
      case "dragAndResizeArea":
        this._positionController.dragAndResizeArea = value2;
        if (this.option("resizeEnabled")) {
          this._resizable.option("area", this._positionController.$dragResizeContainer);
        }
        this._positionController.positionContent();
        break;
      case "dragOutsideBoundary":
        this._positionController.dragOutsideBoundary = value2;
        if (this.option("resizeEnabled")) {
          this._resizable.option("area", this._positionController.$dragResizeContainer);
        }
        break;
      case "outsideDragFactor":
        this._positionController.outsideDragFactor = value2;
        break;
      case "resizeEnabled":
        this._renderResize();
        this._renderGeometry();
        break;
      case "autoResizeEnabled":
        this._renderGeometry();
        triggerResizeEvent(this.$overlayContent());
        break;
      case "fullScreen":
        this._positionController.fullScreen = value2;
        this._toggleFullScreenClass(value2);
        this._toggleSafariScrolling();
        this._renderGeometry();
        triggerResizeEvent(this.$overlayContent());
        break;
      case "showCloseButton":
        this._renderTitle();
        break;
      case "preventScrollEvents":
        this.callBase(args);
        this._toggleContentScrollClass();
        break;
      default:
        this.callBase(args);
    }
  },
  bottomToolbar: function() {
    return this._$bottom;
  },
  topToolbar: function() {
    return this._$title;
  },
  $content: function() {
    return this._$popupContent;
  },
  content: function() {
    return getPublicElement(this.$content());
  },
  $overlayContent: function() {
    return this._$content;
  },
  getFocusableElements: function() {
    return this.$wrapper().find("[tabindex]").filter((index2, item) => item.getAttribute("tabindex") >= 0);
  }
});
component_registrator_default("dxPopup", Popup);
var ui_popup_default = Popup;

// node_modules/devextreme/esm/ui/popup/ui.popup.full.js
var PopupFull = class extends ui_popup_default {
  _getDefaultOptions() {
    return extend(super._getDefaultOptions(), {
      preventScrollEvents: false
    });
  }
  _getToolbarName() {
    return "dxToolbar";
  }
};
PopupFull.defaultOptions = function(rule) {
  ui_popup_default.defaultOptions(rule);
};
component_registrator_default("dxPopup", PopupFull);

// node_modules/devextreme/esm/ui/popup.js
var popup_default = PopupFull;

// node_modules/devextreme/esm/ui/toolbar/internal/ui.toolbar.menu.js
var DROP_DOWN_MENU_CLASS = "dx-dropdownmenu";
var DROP_DOWN_MENU_POPUP_CLASS = "dx-dropdownmenu-popup";
var DROP_DOWN_MENU_POPUP_WRAPPER_CLASS = "dx-dropdownmenu-popup-wrapper";
var DROP_DOWN_MENU_LIST_CLASS = "dx-dropdownmenu-list";
var DROP_DOWN_MENU_BUTTON_CLASS = "dx-dropdownmenu-button";
var POPUP_BOUNDARY_VERTICAL_OFFSET = 10;
var POPUP_VERTICAL_OFFSET = 3;
var DropDownMenu = class extends ui_widget_default {
  _supportedKeys() {
    var extension = {};
    if (!this.option("opened") || !this._list.option("focusedElement")) {
      extension = this._button._supportedKeys();
    }
    return extend(super._supportedKeys(), extension, {
      tab: function() {
        this._popup && this._popup.hide();
      }
    });
  }
  _getDefaultOptions() {
    return extend(super._getDefaultOptions(), {
      items: [],
      onItemClick: null,
      dataSource: null,
      itemTemplate: "item",
      onButtonClick: null,
      activeStateEnabled: true,
      hoverStateEnabled: true,
      opened: false,
      onItemRendered: null,
      closeOnClick: true,
      useInkRipple: false,
      container: void 0,
      animation: {
        show: {
          type: "fade",
          from: 0,
          to: 1
        },
        hide: {
          type: "fade",
          to: 0
        }
      }
    });
  }
  _defaultOptionsRules() {
    return super._defaultOptionsRules().concat([{
      device: function() {
        return "desktop" === devices_default.real().deviceType && !devices_default.isSimulator();
      },
      options: {
        focusStateEnabled: true
      }
    }, {
      device: function() {
        return isMaterialBased();
      },
      options: {
        useInkRipple: true,
        animation: {
          show: {
            type: "pop",
            duration: 200,
            from: {
              scale: 0
            },
            to: {
              scale: 1
            }
          },
          hide: {
            type: "pop",
            duration: 200,
            from: {
              scale: 1
            },
            to: {
              scale: 0
            }
          }
        }
      }
    }]);
  }
  _init() {
    super._init();
    this.$element().addClass(DROP_DOWN_MENU_CLASS);
    this._initItemClickAction();
    this._initButtonClickAction();
  }
  _initItemClickAction() {
    this._itemClickAction = this._createActionByOption("onItemClick");
  }
  _initButtonClickAction() {
    this._buttonClickAction = this._createActionByOption("onButtonClick");
  }
  _initTemplates() {
    this._templateManager.addDefaultTemplates({
      content: new ChildDefaultTemplate("content")
    });
    super._initTemplates();
  }
  _initMarkup() {
    this._renderButton();
    super._initMarkup();
  }
  _render() {
    super._render();
    this.setAria({
      haspopup: true,
      expanded: this.option("opened")
    });
  }
  _renderContentImpl() {
    if (this.option("opened")) {
      this._renderPopup();
    }
  }
  _clean() {
    this._cleanFocusState();
    this._list && this._list.$element().remove();
    this._popup && this._popup.$element().remove();
    delete this._list;
    delete this._popup;
  }
  _renderButton() {
    var $button = this.$element().addClass(DROP_DOWN_MENU_BUTTON_CLASS);
    this._button = this._createComponent($button, button_default, {
      icon: "overflow",
      template: "content",
      stylingMode: isFluent() ? "text" : "contained",
      useInkRipple: this.option("useInkRipple"),
      hoverStateEnabled: false,
      focusStateEnabled: false,
      onClick: (e) => {
        this.option("opened", !this.option("opened"));
        this._buttonClickAction(e);
      }
    });
  }
  _toggleActiveState($element, value2, e) {
    this._button._toggleActiveState($element, value2, e);
  }
  _toggleMenuVisibility(opened) {
    var state = null !== opened && void 0 !== opened ? opened : !this._popup.option("visible");
    if (opened) {
      this._renderPopup();
    }
    this._popup.toggle(state);
    this.setAria("expanded", state);
  }
  _renderPopup() {
    if (this._$popup) {
      return;
    }
    this._$popup = renderer_default("<div>").appendTo(this.$element());
    var {
      rtlEnabled,
      container,
      animation: animation3
    } = this.option();
    this._popup = this._createComponent(this._$popup, "dxPopup", {
      onInitialized(_ref) {
        var {
          component
        } = _ref;
        component.$wrapper().addClass(DROP_DOWN_MENU_POPUP_WRAPPER_CLASS).addClass(DROP_DOWN_MENU_POPUP_CLASS);
      },
      deferRendering: false,
      contentTemplate: (contentElement) => this._renderList(contentElement),
      _ignoreFunctionValueDeprecation: true,
      maxHeight: () => this._getMaxHeight(),
      position: {
        my: "top ".concat(rtlEnabled ? "left" : "right"),
        at: "bottom ".concat(rtlEnabled ? "left" : "right"),
        collision: "fit flip",
        offset: {
          v: POPUP_VERTICAL_OFFSET
        },
        of: this.$element()
      },
      animation: animation3,
      onOptionChanged: (_ref2) => {
        var {
          name: name2,
          value: value2
        } = _ref2;
        if ("visible" === name2) {
          this.option("opened", value2);
        }
      },
      container,
      autoResizeEnabled: false,
      height: "auto",
      width: "auto",
      hideOnOutsideClick: (e) => this._closeOutsideDropDownHandler(e),
      hideOnParentScroll: true,
      shading: false,
      dragEnabled: false,
      showTitle: false,
      fullScreen: false,
      _fixWrapperPosition: true
    });
  }
  _getMaxHeight() {
    var $element = this.$element();
    var offsetTop = $element.offset().top;
    var windowHeight = getOuterHeight(getWindow());
    var maxHeight = Math.max(offsetTop, windowHeight - offsetTop - getOuterHeight($element));
    return Math.min(windowHeight, maxHeight - POPUP_VERTICAL_OFFSET - POPUP_BOUNDARY_VERTICAL_OFFSET);
  }
  _closeOutsideDropDownHandler(e) {
    var isOutsideClick = !renderer_default(e.target).closest(this.$element()).length;
    return isOutsideClick;
  }
  _renderList(contentElement) {
    var $content = renderer_default(contentElement);
    $content.addClass(DROP_DOWN_MENU_LIST_CLASS);
    this._list = this._createComponent($content, ToolbarMenuList, {
      dataSource: this._getListDataSource(),
      pageLoadMode: "scrollBottom",
      indicateLoading: false,
      noDataText: "",
      itemTemplate: this.option("itemTemplate"),
      onItemClick: (e) => {
        if (this.option("closeOnClick")) {
          this.option("opened", false);
        }
        this._itemClickAction(e);
      },
      tabIndex: -1,
      focusStateEnabled: false,
      activeStateEnabled: true,
      onItemRendered: this.option("onItemRendered"),
      _itemAttributes: {
        role: "menuitem"
      }
    });
  }
  _itemOptionChanged(item, property, value2) {
    var _this$_list;
    null === (_this$_list = this._list) || void 0 === _this$_list ? void 0 : _this$_list._itemOptionChanged(item, property, value2);
    toggleItemFocusableElementTabIndex(this._list, item);
  }
  _getListDataSource() {
    var _this$option;
    return null !== (_this$option = this.option("dataSource")) && void 0 !== _this$option ? _this$option : this.option("items");
  }
  _setListDataSource() {
    var _this$_list2;
    null === (_this$_list2 = this._list) || void 0 === _this$_list2 ? void 0 : _this$_list2.option("dataSource", this._getListDataSource());
    delete this._deferRendering;
  }
  _getKeyboardListeners() {
    return super._getKeyboardListeners().concat([this._list]);
  }
  _toggleVisibility(visible2) {
    super._toggleVisibility(visible2);
    this._button.option("visible", visible2);
  }
  _optionChanged(args) {
    var _this$_list3, _this$_list4, _this$_list5;
    var {
      name: name2,
      value: value2
    } = args;
    switch (name2) {
      case "items":
      case "dataSource":
        if (!this.option("opened")) {
          this._deferRendering = true;
        } else {
          this._setListDataSource();
        }
        break;
      case "itemTemplate":
        null === (_this$_list3 = this._list) || void 0 === _this$_list3 ? void 0 : _this$_list3.option(name2, this._getTemplate(value2));
        break;
      case "onItemClick":
        this._initItemClickAction();
        break;
      case "onButtonClick":
        this._buttonClickAction();
        break;
      case "useInkRipple":
        this._invalidate();
        break;
      case "focusStateEnabled":
        null === (_this$_list4 = this._list) || void 0 === _this$_list4 ? void 0 : _this$_list4.option(name2, value2);
        super._optionChanged(args);
        break;
      case "onItemRendered":
        null === (_this$_list5 = this._list) || void 0 === _this$_list5 ? void 0 : _this$_list5.option(name2, value2);
        break;
      case "opened":
        if (this._deferRendering) {
          this._setListDataSource();
        }
        this._toggleMenuVisibility(value2);
        this._updateFocusableItemsTabIndex();
        break;
      case "closeOnClick":
        break;
      case "container":
        this._popup && this._popup.option(name2, value2);
        break;
      case "disabled":
        if (this._list) {
          this._updateFocusableItemsTabIndex();
        }
        break;
      default:
        super._optionChanged(args);
    }
  }
  _updateFocusableItemsTabIndex() {
    this.option("items").forEach((item) => toggleItemFocusableElementTabIndex(this._list, item));
  }
};

// node_modules/devextreme/esm/ui/toolbar/strategy/toolbar.singleline.js
var INVISIBLE_STATE_CLASS3 = "dx-state-invisible";
var TOOLBAR_DROP_DOWN_MENU_CONTAINER_CLASS = "dx-toolbar-menu-container";
var TOOLBAR_BUTTON_CLASS2 = "dx-toolbar-button";
var TOOLBAR_AUTO_HIDE_ITEM_CLASS = "dx-toolbar-item-auto-hide";
var TOOLBAR_HIDDEN_ITEM = "dx-toolbar-item-invisible";
var SingleLineStrategy = class {
  constructor(toolbar) {
    this._toolbar = toolbar;
  }
  _initMarkup() {
    deferRender(() => {
      this._renderOverflowMenu();
      this._renderMenuItems();
    });
  }
  _renderOverflowMenu() {
    if (!this._hasVisibleMenuItems()) {
      return;
    }
    this._renderMenuButtonContainer();
    var $menu = renderer_default("<div>").appendTo(this._overflowMenuContainer());
    var itemClickAction = this._toolbar._createActionByOption("onItemClick");
    var menuItemTemplate = this._toolbar._getTemplateByOption("menuItemTemplate");
    this._menu = this._toolbar._createComponent($menu, DropDownMenu, {
      disabled: this._toolbar.option("disabled"),
      itemTemplate: () => menuItemTemplate,
      onItemClick: (e) => {
        itemClickAction(e);
      },
      container: this._toolbar.option("menuContainer"),
      onOptionChanged: (_ref) => {
        var {
          name: name2,
          value: value2
        } = _ref;
        if ("opened" === name2) {
          this._toolbar.option("overflowMenuVisible", value2);
        }
        if ("items" === name2) {
          this._updateMenuVisibility(value2);
        }
      }
    });
  }
  renderMenuItems() {
    if (!this._menu) {
      this._renderOverflowMenu();
    }
    this._menu && this._menu.option("items", this._getMenuItems());
    if (this._menu && !this._menu.option("items").length) {
      this._menu.option("opened", false);
    }
  }
  _renderMenuButtonContainer() {
    this._$overflowMenuContainer = renderer_default("<div>").appendTo(this._toolbar._$afterSection).addClass(TOOLBAR_BUTTON_CLASS2).addClass(TOOLBAR_DROP_DOWN_MENU_CONTAINER_CLASS);
  }
  _overflowMenuContainer() {
    return this._$overflowMenuContainer;
  }
  _updateMenuVisibility(menuItems) {
    var items = null !== menuItems && void 0 !== menuItems ? menuItems : this._getMenuItems();
    var isMenuVisible = items.length && this._hasVisibleMenuItems(items);
    this._toggleMenuVisibility(isMenuVisible);
  }
  _toggleMenuVisibility(value2) {
    if (!this._overflowMenuContainer()) {
      return;
    }
    this._overflowMenuContainer().toggleClass(INVISIBLE_STATE_CLASS3, !value2);
  }
  _renderMenuItems() {
    deferRender(() => {
      this.renderMenuItems();
    });
  }
  _dimensionChanged() {
    this.renderMenuItems();
  }
  _getToolbarItems() {
    var _this$_toolbar$option;
    return grep(null !== (_this$_toolbar$option = this._toolbar.option("items")) && void 0 !== _this$_toolbar$option ? _this$_toolbar$option : [], (item) => !this._toolbar._isMenuItem(item));
  }
  _getHiddenItems() {
    return this._toolbar._itemContainer().children(".".concat(TOOLBAR_AUTO_HIDE_ITEM_CLASS, ".").concat(TOOLBAR_HIDDEN_ITEM)).not(".".concat(INVISIBLE_STATE_CLASS3));
  }
  _getMenuItems() {
    var _this$_toolbar$option2, _this$_restoreItems;
    var menuItems = grep(null !== (_this$_toolbar$option2 = this._toolbar.option("items")) && void 0 !== _this$_toolbar$option2 ? _this$_toolbar$option2 : [], (item) => this._toolbar._isMenuItem(item));
    var $hiddenItems = this._getHiddenItems();
    this._restoreItems = null !== (_this$_restoreItems = this._restoreItems) && void 0 !== _this$_restoreItems ? _this$_restoreItems : [];
    var overflowItems = [].slice.call($hiddenItems).map((hiddenItem) => {
      var itemData = this._toolbar._getItemData(hiddenItem);
      var $itemContainer = renderer_default(hiddenItem);
      var $itemMarkup = $itemContainer.children();
      return extend({
        menuItemTemplate: () => {
          this._restoreItems.push({
            container: $itemContainer,
            item: $itemMarkup
          });
          var $container = renderer_default("<div>").addClass(TOOLBAR_AUTO_HIDE_ITEM_CLASS);
          return $container.append($itemMarkup);
        }
      }, itemData);
    });
    return [...overflowItems, ...menuItems];
  }
  _hasVisibleMenuItems(items) {
    var menuItems = null !== items && void 0 !== items ? items : this._toolbar.option("items");
    var result2 = false;
    var optionGetter = compileGetter("visible");
    var overflowGetter = compileGetter("locateInMenu");
    each(menuItems, function(index2, item) {
      var itemVisible = optionGetter(item, {
        functionsAsIs: true
      });
      var itemOverflow = overflowGetter(item, {
        functionsAsIs: true
      });
      if (false !== itemVisible && ("auto" === itemOverflow || "always" === itemOverflow) || "menu" === item.location) {
        result2 = true;
      }
    });
    return result2;
  }
  _arrangeItems() {
    var _this$_restoreItems2;
    this._toolbar._$centerSection.css({
      margin: "0 auto",
      float: "none"
    });
    each(null !== (_this$_restoreItems2 = this._restoreItems) && void 0 !== _this$_restoreItems2 ? _this$_restoreItems2 : [], function(_, obj) {
      renderer_default(obj.container).append(obj.item);
    });
    this._restoreItems = [];
    var elementWidth = getWidth(this._toolbar.$element());
    this._hideOverflowItems(elementWidth);
    return elementWidth;
  }
  _hideOverflowItems(elementWidth) {
    var _elementWidth;
    var overflowItems = this._toolbar.$element().find(".".concat(TOOLBAR_AUTO_HIDE_ITEM_CLASS));
    if (!overflowItems.length) {
      return;
    }
    elementWidth = null !== (_elementWidth = elementWidth) && void 0 !== _elementWidth ? _elementWidth : getWidth(this._toolbar.$element());
    renderer_default(overflowItems).removeClass(TOOLBAR_HIDDEN_ITEM);
    var itemsWidth = this._getItemsWidth();
    while (overflowItems.length && elementWidth < itemsWidth) {
      var $item = overflowItems.eq(-1);
      $item.addClass(TOOLBAR_HIDDEN_ITEM);
      itemsWidth = this._getItemsWidth();
      overflowItems.splice(-1, 1);
    }
  }
  _getItemsWidth() {
    return this._toolbar._getSummaryItemsSize("width", [this._toolbar._$beforeSection, this._toolbar._$centerSection, this._toolbar._$afterSection]);
  }
  _itemOptionChanged(item, property, value2) {
    if ("disabled" === property || "options.disabled" === property) {
      if (this._toolbar._isMenuItem(item)) {
        var _this$_menu;
        null === (_this$_menu = this._menu) || void 0 === _this$_menu ? void 0 : _this$_menu._itemOptionChanged(item, property, value2);
        return;
      }
    }
    this.renderMenuItems();
  }
  _renderItem(item, itemElement) {
    if ("auto" === item.locateInMenu) {
      itemElement.addClass(TOOLBAR_AUTO_HIDE_ITEM_CLASS);
    }
  }
  _optionChanged(name2, value2) {
    var _this$_menu2, _this$_menu3, _this$_menu4, _this$_menu5, _this$_menu6;
    switch (name2) {
      case "disabled":
        null === (_this$_menu2 = this._menu) || void 0 === _this$_menu2 ? void 0 : _this$_menu2.option(name2, value2);
        break;
      case "overflowMenuVisible":
        null === (_this$_menu3 = this._menu) || void 0 === _this$_menu3 ? void 0 : _this$_menu3.option("opened", value2);
        break;
      case "onItemClick":
        null === (_this$_menu4 = this._menu) || void 0 === _this$_menu4 ? void 0 : _this$_menu4.option(name2, value2);
        break;
      case "menuContainer":
        null === (_this$_menu5 = this._menu) || void 0 === _this$_menu5 ? void 0 : _this$_menu5.option("container", value2);
        break;
      case "menuItemTemplate":
        null === (_this$_menu6 = this._menu) || void 0 === _this$_menu6 ? void 0 : _this$_menu6.option("itemTemplate", value2);
    }
  }
};

// node_modules/devextreme/esm/ui/toolbar/ui.toolbar.js
var TOOLBAR_MULTILINE_CLASS = "dx-toolbar-multiline";
var TOOLBAR_AUTO_HIDE_TEXT_CLASS = "dx-toolbar-text-auto-hide";
var Toolbar = class extends ui_toolbar_base_default {
  _getDefaultOptions() {
    return extend(super._getDefaultOptions(), {
      menuItemTemplate: "menuItem",
      menuContainer: void 0,
      overflowMenuVisible: false,
      multiline: false
    });
  }
  _isMultiline() {
    return this.option("multiline");
  }
  _dimensionChanged(dimension) {
    if ("height" === dimension) {
      return;
    }
    super._dimensionChanged();
    this._layoutStrategy._dimensionChanged();
  }
  _initMarkup() {
    super._initMarkup();
    this._updateFocusableItemsTabIndex();
    this._layoutStrategy._initMarkup();
  }
  _renderToolbar() {
    super._renderToolbar();
    this._renderLayoutStrategy();
  }
  _itemContainer() {
    if (this._isMultiline()) {
      return this._$toolbarItemsContainer;
    }
    return super._itemContainer();
  }
  _renderLayoutStrategy() {
    this.$element().toggleClass(TOOLBAR_MULTILINE_CLASS, this._isMultiline());
    this._layoutStrategy = this._isMultiline() ? new MultiLineStrategy(this) : new SingleLineStrategy(this);
  }
  _renderSections() {
    if (this._isMultiline()) {
      return;
    }
    return super._renderSections();
  }
  _postProcessRenderItems() {
    this._layoutStrategy._hideOverflowItems();
    this._layoutStrategy._updateMenuVisibility();
    super._postProcessRenderItems();
    this._layoutStrategy._renderMenuItems();
  }
  _renderItem(index2, item, itemContainer, $after) {
    var itemElement = super._renderItem(index2, item, itemContainer, $after);
    this._layoutStrategy._renderItem(item, itemElement);
    var {
      widget,
      showText
    } = item;
    if ("dxButton" === widget && "inMenu" === showText) {
      itemElement.toggleClass(TOOLBAR_AUTO_HIDE_TEXT_CLASS);
    }
    return itemElement;
  }
  _getItemsWidth() {
    return this._layoutStrategy._getItemsWidth();
  }
  _getMenuItems() {
    return this._layoutStrategy._getMenuItems();
  }
  _getToolbarItems() {
    return this._layoutStrategy._getToolbarItems();
  }
  _arrangeItems() {
    if (this.$element().is(":hidden")) {
      return;
    }
    var elementWidth = this._layoutStrategy._arrangeItems();
    if (!this._isMultiline()) {
      super._arrangeItems(elementWidth);
    }
  }
  _itemOptionChanged(item, property, value2) {
    if (!this._isMenuItem(item)) {
      super._itemOptionChanged(item, property, value2);
    }
    this._layoutStrategy._itemOptionChanged(item, property, value2);
    if ("disabled" === property || "options.disabled" === property) {
      toggleItemFocusableElementTabIndex(this, item);
    }
    if ("location" === property) {
      this.repaint();
    }
  }
  _updateFocusableItemsTabIndex() {
    this._getToolbarItems().forEach((item) => toggleItemFocusableElementTabIndex(this, item));
  }
  _isMenuItem(itemData) {
    return "menu" === itemData.location || "always" === itemData.locateInMenu;
  }
  _isToolbarItem(itemData) {
    return void 0 === itemData.location || "never" === itemData.locateInMenu;
  }
  _optionChanged(_ref) {
    var {
      name: name2,
      value: value2
    } = _ref;
    this._layoutStrategy._optionChanged(name2, value2);
    switch (name2) {
      case "menuContainer":
      case "menuItemTemplate":
      case "overflowMenuVisible":
        break;
      case "multiline":
        this._invalidate();
        break;
      case "disabled":
        super._optionChanged.apply(this, arguments);
        this._updateFocusableItemsTabIndex();
        break;
      default:
        super._optionChanged.apply(this, arguments);
    }
  }
  updateDimensions() {
    this._dimensionChanged();
  }
};
component_registrator_default("dxToolbar", Toolbar);
var ui_toolbar_default = Toolbar;

// node_modules/devextreme/esm/ui/toolbar.js
var toolbar_default = ui_toolbar_default;

// node_modules/devextreme/esm/__internal/grids/grid_core/header_panel/m_header_panel.js
var HEADER_PANEL_CLASS = "header-panel";
var TOOLBAR_BUTTON_CLASS3 = "toolbar-button";
var TOOLBAR_ARIA_LABEL = "-ariaToolbar";
var DEFAULT_TOOLBAR_ITEM_NAMES = ["addRowButton", "applyFilterButton", "columnChooserButton", "exportButton", "groupPanel", "revertButton", "saveButton", "searchPanel"];
var HeaderPanel = class extends ColumnsView {
  _getToolbarItems() {
    return [];
  }
  _getButtonContainer() {
    return renderer_default("<div>").addClass(this.addWidgetPrefix(TOOLBAR_BUTTON_CLASS3));
  }
  _getToolbarButtonClass(specificClass) {
    var secondClass = specificClass ? " ".concat(specificClass) : "";
    return this.addWidgetPrefix(TOOLBAR_BUTTON_CLASS3) + secondClass;
  }
  _getToolbarOptions() {
    var userToolbarOptions = this.option("toolbar");
    var options2 = {
      toolbarOptions: {
        items: this._getToolbarItems(),
        visible: null === userToolbarOptions || void 0 === userToolbarOptions ? void 0 : userToolbarOptions.visible,
        disabled: null === userToolbarOptions || void 0 === userToolbarOptions ? void 0 : userToolbarOptions.disabled,
        onItemRendered(e) {
          var itemRenderedCallback = e.itemData.onItemRendered;
          if (itemRenderedCallback) {
            itemRenderedCallback(e);
          }
        }
      }
    };
    var userItems = null === userToolbarOptions || void 0 === userToolbarOptions ? void 0 : userToolbarOptions.items;
    options2.toolbarOptions.items = this._normalizeToolbarItems(options2.toolbarOptions.items, userItems);
    this.executeAction("onToolbarPreparing", options2);
    if (options2.toolbarOptions && !isDefined(options2.toolbarOptions.visible)) {
      var toolbarItems = options2.toolbarOptions.items;
      options2.toolbarOptions.visible = !!(null === toolbarItems || void 0 === toolbarItems ? void 0 : toolbarItems.length);
    }
    return options2.toolbarOptions;
  }
  _normalizeToolbarItems(defaultItems, userItems) {
    defaultItems.forEach((button) => {
      if (!DEFAULT_TOOLBAR_ITEM_NAMES.includes(button.name)) {
        throw new Error("Default toolbar item '".concat(button.name, "' is not added to DEFAULT_TOOLBAR_ITEM_NAMES"));
      }
    });
    var defaultProps = {
      location: "after"
    };
    var isArray2 = Array.isArray(userItems);
    if (!isDefined(userItems)) {
      return defaultItems;
    }
    if (!isArray2) {
      userItems = [userItems];
    }
    var defaultButtonsByNames = {};
    defaultItems.forEach((button) => {
      defaultButtonsByNames[button.name] = button;
    });
    var normalizedItems = userItems.map((button) => {
      if (isString(button)) {
        button = {
          name: button
        };
      }
      if (isDefined(button.name)) {
        if (isDefined(defaultButtonsByNames[button.name])) {
          button = extend(true, {}, defaultButtonsByNames[button.name], button);
        } else if (DEFAULT_TOOLBAR_ITEM_NAMES.includes(button.name)) {
          button = _extends(_extends({}, button), {
            visible: false
          });
        }
      }
      return extend(true, {}, defaultProps, button);
    });
    return isArray2 ? normalizedItems : normalizedItems[0];
  }
  _renderCore() {
    if (!this._toolbar) {
      var $headerPanel = this.element();
      $headerPanel.addClass(this.addWidgetPrefix(HEADER_PANEL_CLASS));
      var label = message_default.format(this.component.NAME + TOOLBAR_ARIA_LABEL);
      var $toolbar = renderer_default("<div>").attr("aria-label", label).appendTo($headerPanel);
      this._toolbar = this._createComponent($toolbar, toolbar_default, this._toolbarOptions);
    } else {
      this._toolbar.option(this._toolbarOptions);
    }
  }
  _columnOptionChanged() {
  }
  _handleDataChanged() {
    if (this._requireReady) {
      this.render();
    }
  }
  _isDisabledDefinedByUser(name2) {
    var _a2;
    var userItems = null === (_a2 = this.option("toolbar")) || void 0 === _a2 ? void 0 : _a2.items;
    var userItem = null === userItems || void 0 === userItems ? void 0 : userItems.find((item) => (null === item || void 0 === item ? void 0 : item.name) === name2);
    return isDefined(null === userItem || void 0 === userItem ? void 0 : userItem.disabled);
  }
  init() {
    super.init();
    this.createAction("onToolbarPreparing", {
      excludeValidators: ["disabled", "readOnly"]
    });
  }
  render() {
    this._toolbarOptions = this._getToolbarOptions();
    super.render.apply(this, arguments);
  }
  setToolbarItemDisabled(name2, disabled) {
    var _a2;
    var toolbar = this._toolbar;
    var isDefinedByUser = this._isDisabledDefinedByUser(name2);
    if (!toolbar || isDefinedByUser) {
      return;
    }
    var items = null !== (_a2 = toolbar.option("items")) && void 0 !== _a2 ? _a2 : [];
    var itemIndex = items.findIndex((item2) => item2.name === name2);
    if (itemIndex < 0) {
      return;
    }
    var item = toolbar.option("items[".concat(itemIndex, "]"));
    toolbar.option("items[".concat(itemIndex, "].disabled"), disabled);
    if (item.options) {
      toolbar.option("items[".concat(itemIndex, "].options.disabled"), disabled);
    }
  }
  updateToolbarDimensions() {
    var _a2;
    null === (_a2 = this._toolbar) || void 0 === _a2 ? void 0 : _a2.updateDimensions();
  }
  getHeaderPanel() {
    return this.element();
  }
  getHeight() {
    return this.getElementHeight();
  }
  optionChanged(args) {
    if ("onToolbarPreparing" === args.name) {
      this._invalidate();
      args.handled = true;
    }
    if ("toolbar" === args.name) {
      args.handled = true;
      if (this._toolbar) {
        var parts = getPathParts(args.fullName);
        var optionName = args.fullName.replace(/^toolbar\./, "");
        if (1 === parts.length) {
          var toolbarOptions = this._getToolbarOptions();
          this._toolbar.option(toolbarOptions);
        } else if ("items" === parts[1]) {
          if (2 === parts.length) {
            var _toolbarOptions = this._getToolbarOptions();
            this._toolbar.option("items", _toolbarOptions.items);
          } else if (3 === parts.length) {
            var normalizedItem = this._normalizeToolbarItems(this._getToolbarItems(), args.value);
            this._toolbar.option(optionName, normalizedItem);
          } else if (parts.length >= 4) {
            this._toolbar.option(optionName, args.value);
          }
        } else {
          this._toolbar.option(optionName, args.value);
        }
      }
    }
    super.optionChanged(args);
  }
  isVisible() {
    return !!(this._toolbarOptions && this._toolbarOptions.visible);
  }
  allowDragging() {
  }
  hasGroupedColumns() {
  }
};
var headerPanelModule = {
  defaultOptions: () => ({}),
  views: {
    headerPanel: HeaderPanel
  },
  extenders: {
    controllers: {
      resizing: {
        _updateDimensionsCore() {
          this.callBase.apply(this, arguments);
          this.getView("headerPanel").updateToolbarDimensions();
        }
      }
    }
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/header_panel.js
var HeaderPanel2 = headerPanelModule.views.headerPanel;
m_core_default.registerModule("headerPanel", headerPanelModule);

// node_modules/devextreme/esm/__internal/grids/data_grid/m_widget_base.js
var DATAGRID_ROW_SELECTOR = ".dx-row";
var DATAGRID_DEPRECATED_TEMPLATE_WARNING = "Specifying grid templates with the jQuery selector name is now deprecated. Use the DOM Node or the jQuery object that references this selector instead.";
m_core_default.registerModulesOrder(["stateStoring", "columns", "selection", "editorFactory", "columnChooser", "grouping", "editing", "editingRowBased", "editingFormBased", "editingCellBased", "masterDetail", "validating", "adaptivity", "data", "virtualScrolling", "columnHeaders", "filterRow", "headerPanel", "headerFilter", "sorting", "search", "rows", "pager", "columnsResizingReordering", "contextMenu", "keyboardNavigation", "errorHandling", "summary", "columnFixing", "export", "gridView"]);
var DataGrid = ui_widget_default.inherit({
  _activeStateUnit: DATAGRID_ROW_SELECTOR,
  _getDefaultOptions() {
    var result2 = this.callBase();
    each(m_core_default.modules, function() {
      if (isFunction(this.defaultOptions)) {
        extend(true, result2, this.defaultOptions());
      }
    });
    return result2;
  },
  _setDeprecatedOptions() {
    this.callBase();
    extend(this._deprecatedOptions, {
      useKeyboard: {
        since: "19.2",
        alias: "keyboardNavigation.enabled"
      },
      rowTemplate: {
        since: "21.2",
        message: 'Use the "dataRowTemplate" option instead'
      },
      "columnChooser.allowSearch": {
        since: "23.1",
        message: 'Use the "columnChooser.search.enabled" option instead'
      },
      "columnChooser.searchTimeout": {
        since: "23.1",
        message: 'Use the "columnChooser.search.timeout" option instead'
      }
    });
  },
  _defaultOptionsRules() {
    return this.callBase().concat([{
      device: {
        platform: "ios"
      },
      options: {
        showRowLines: true
      }
    }, {
      device: () => isMaterialBased(),
      options: {
        showRowLines: true,
        showColumnLines: false,
        headerFilter: {
          height: 315
        },
        editing: {
          useIcons: true
        },
        selection: {
          showCheckBoxesMode: "always"
        }
      }
    }, {
      device: () => browser_default.webkit,
      options: {
        loadingTimeout: 30,
        loadPanel: {
          animation: {
            show: {
              easing: "cubic-bezier(1, 0, 1, 0)",
              duration: 500,
              from: {
                opacity: 0
              },
              to: {
                opacity: 1
              }
            }
          }
        }
      }
    }, {
      device: (device) => "desktop" !== device.deviceType,
      options: {
        grouping: {
          expandMode: "rowClick"
        }
      }
    }]);
  },
  _init() {
    this.callBase();
    m_utils_default.logHeaderFilterDeprecatedWarningIfNeed(this);
    m_core_default.processModules(this, m_core_default);
    m_core_default.callModuleItemsMethod(this, "init");
  },
  _clean: noop2,
  _optionChanged(args) {
    m_core_default.callModuleItemsMethod(this, "optionChanged", [args]);
    if (!args.handled) {
      this.callBase(args);
    }
  },
  _dimensionChanged() {
    this.updateDimensions(true);
  },
  _visibilityChanged(visible2) {
    if (visible2) {
      this.updateDimensions();
    }
  },
  _initMarkup() {
    this.callBase.apply(this, arguments);
    this.getView("gridView").render(this.$element());
  },
  _renderContentImpl() {
    this.getView("gridView").update();
  },
  _renderContent() {
    var that = this;
    deferRender(() => {
      that._renderContentImpl();
    });
  },
  _getTemplate(templateName) {
    var template = templateName;
    if (isString(template) && template.startsWith("#")) {
      template = renderer_default(templateName);
      logger.warn(DATAGRID_DEPRECATED_TEMPLATE_WARNING);
    }
    return this.callBase(template);
  },
  _dispose() {
    this.callBase();
    m_core_default.callModuleItemsMethod(this, "dispose");
  },
  isReady() {
    return this.getController("data").isReady();
  },
  beginUpdate() {
    this.callBase();
    m_core_default.callModuleItemsMethod(this, "beginUpdate");
  },
  endUpdate() {
    m_core_default.callModuleItemsMethod(this, "endUpdate");
    this.callBase();
  },
  getController(name2) {
    return this._controllers[name2];
  },
  getView(name2) {
    return this._views[name2];
  },
  focus(element) {
    this.getController("keyboardNavigation").focus(element);
  }
});
DataGrid.registerModule = m_core_default.registerModule.bind(m_core_default);
component_registrator_default("dxDataGrid", DataGrid);
var m_widget_base_default = DataGrid;

// node_modules/devextreme/esm/__internal/grids/grid_core/state_storing/m_state_storing_core.js
var DATE_REGEX = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/;
var parseDates = function parseDates2(state) {
  if (!state) {
    return;
  }
  each(state, (key, value2) => {
    if (isPlainObject(value2) || Array.isArray(value2)) {
      parseDates2(value2);
    } else if ("string" === typeof value2) {
      var date = DATE_REGEX.exec(value2);
      if (date) {
        state[key] = new Date(Date.UTC(+date[1], +date[2] - 1, +date[3], +date[4], +date[5], +date[6]));
      }
    }
  });
};
var StateStoringController = m_modules_default.ViewController.inherit(/* @__PURE__ */ function() {
  var getStorage = function(options2) {
    var storage = "sessionStorage" === options2.type ? getSessionStorage() : getWindow().localStorage;
    if (!storage) {
      throw new Error("E1007");
    }
    return storage;
  };
  var getUniqueStorageKey = function(options2) {
    return isDefined(options2.storageKey) ? options2.storageKey : "storage";
  };
  return {
    _loadState() {
      var options2 = this.option("stateStoring");
      if ("custom" === options2.type) {
        return options2.customLoad && options2.customLoad();
      }
      try {
        return JSON.parse(getStorage(options2).getItem(getUniqueStorageKey(options2)));
      } catch (e) {
        ui_errors_default.log("W1022", "State storing", e.message);
      }
    },
    _saveState(state) {
      var options2 = this.option("stateStoring");
      if ("custom" === options2.type) {
        options2.customSave && options2.customSave(state);
        return;
      }
      try {
        getStorage(options2).setItem(getUniqueStorageKey(options2), JSON.stringify(state));
      } catch (e) {
        ui_errors_default.log(e.message);
      }
    },
    publicMethods: () => ["state"],
    isEnabled() {
      return this.option("stateStoring.enabled");
    },
    init() {
      var that = this;
      that._state = {};
      that._isLoaded = false;
      that._isLoading = false;
      that._windowUnloadHandler = function() {
        if (void 0 !== that._savingTimeoutID) {
          that._saveState(that.state());
        }
      };
      events_engine_default.on(getWindow(), "unload", that._windowUnloadHandler);
      return that;
    },
    isLoaded() {
      return this._isLoaded;
    },
    isLoading() {
      return this._isLoading;
    },
    load() {
      this._isLoading = true;
      var loadResult = fromPromise(this._loadState());
      loadResult.always(() => {
        this._isLoaded = true;
        this._isLoading = false;
      }).done((state) => {
        if (null !== state && !isEmptyObject(state)) {
          this.state(state);
        }
      });
      return loadResult;
    },
    state(state) {
      if (!arguments.length) {
        return extend(true, {}, this._state);
      }
      this._state = extend({}, state);
      parseDates(this._state);
    },
    save() {
      var that = this;
      clearTimeout(that._savingTimeoutID);
      that._savingTimeoutID = setTimeout(() => {
        that._saveState(that.state());
        that._savingTimeoutID = void 0;
      }, that.option("stateStoring.savingTimeout"));
    },
    optionChanged(args) {
      switch (args.name) {
        case "stateStoring":
          if (this.isEnabled() && !this.isLoading()) {
            this.load();
          }
          args.handled = true;
          break;
        default:
          this.callBase(args);
      }
    },
    dispose() {
      clearTimeout(this._savingTimeoutID);
      events_engine_default.off(getWindow(), "unload", this._windowUnloadHandler);
    }
  };
}());
var m_state_storing_core_default = {
  StateStoringController
};

// node_modules/devextreme/esm/__internal/grids/grid_core/state_storing/m_state_storing.js
var getDataState = (that) => {
  var pagerView = that.getView("pagerView");
  var dataController2 = that.getController("data");
  var state = {
    allowedPageSizes: pagerView ? pagerView.getPageSizes() : void 0,
    filterPanel: {
      filterEnabled: that.option("filterPanel.filterEnabled")
    },
    filterValue: that.option("filterValue"),
    focusedRowKey: that.option("focusedRowEnabled") ? that.option("focusedRowKey") : void 0
  };
  return extend(state, dataController2.getUserState());
};
var processLoadState = (that) => {
  var columnsController = that.getController("columns");
  var selectionController = that.getController("selection");
  var exportController = that.getController("export");
  var dataController2 = that.getController("data");
  if (columnsController) {
    columnsController.columnsChanged.add(() => {
      that.updateState({
        columns: columnsController.getUserState()
      });
    });
  }
  if (selectionController) {
    selectionController.selectionChanged.add((e) => {
      that.updateState({
        selectedRowKeys: e.selectedRowKeys,
        selectionFilter: e.selectionFilter
      });
    });
  }
  if (dataController2) {
    that._initialPageSize = that.option("paging.pageSize");
    that._initialFilterValue = that.option("filterValue");
    dataController2.changed.add(() => {
      var state = getDataState(that);
      that.updateState(state);
    });
  }
  if (exportController) {
    exportController.selectionOnlyChanged.add(() => {
      that.updateState({
        exportSelectionOnly: exportController.selectionOnly()
      });
    });
  }
};
var DEFAULT_FILTER_VALUE = null;
var getFilterValue = (that, state) => {
  var filterSyncController = that.getController("filterSync");
  var columnsController = that.getController("columns");
  var hasFilterState = state.columns || void 0 !== state.filterValue;
  if (filterSyncController) {
    if (hasFilterState) {
      return state.filterValue || filterSyncController.getFilterValueFromColumns(state.columns);
    }
    return that._initialFilterValue || filterSyncController.getFilterValueFromColumns(columnsController.getColumns());
  }
  return DEFAULT_FILTER_VALUE;
};
var stateStoringModule = {
  defaultOptions: () => ({
    stateStoring: {
      enabled: false,
      storageKey: null,
      type: "localStorage",
      customLoad: null,
      customSave: null,
      savingTimeout: 2e3
    }
  }),
  controllers: {
    stateStoring: m_state_storing_core_default.StateStoringController
  },
  extenders: {
    views: {
      rowsView: {
        init() {
          var that = this;
          var dataController2 = that.getController("data");
          that.callBase();
          dataController2.stateLoaded.add(() => {
            if (dataController2.isLoaded() && !dataController2.getDataSource()) {
              that.setLoading(false);
              that.renderNoDataText();
              var columnHeadersView = that.component.getView("columnHeadersView");
              columnHeadersView && columnHeadersView.render();
              that.component._fireContentReadyAction();
            }
          });
        }
      }
    },
    controllers: {
      stateStoring: {
        init() {
          this.callBase.apply(this, arguments);
          processLoadState(this);
        },
        isLoading() {
          return this.callBase() || this.getController("data").isStateLoading();
        },
        state(state) {
          var result2 = this.callBase.apply(this, arguments);
          if (void 0 !== state) {
            this.applyState(extend(true, {}, state));
          }
          return result2;
        },
        updateState(state) {
          if (this.isEnabled()) {
            var oldState = this.state();
            var newState = extend({}, oldState, state);
            var oldStateHash = getKeyHash(oldState);
            var newStateHash = getKeyHash(newState);
            if (!equalByValue(oldStateHash, newStateHash)) {
              state = extend(true, {}, state);
              extend(this._state, state);
              this.save();
            }
          } else {
            extend(this._state, state);
          }
        },
        applyState(state) {
          var _a2;
          var {
            allowedPageSizes
          } = state;
          var {
            searchText
          } = state;
          var {
            selectedRowKeys
          } = state;
          var {
            selectionFilter
          } = state;
          var exportController = this.getController("export");
          var columnsController = this.getController("columns");
          var dataController2 = this.getController("data");
          var scrollingMode = this.option("scrolling.mode");
          var isVirtualScrollingMode = "virtual" === scrollingMode || "infinite" === scrollingMode;
          var showPageSizeSelector = true === this.option("pager.visible") && this.option("pager.showPageSizeSelector");
          var hasHeight = null === (_a2 = this.getView("rowsView")) || void 0 === _a2 ? void 0 : _a2.hasHeight();
          this.component.beginUpdate();
          if (columnsController) {
            columnsController.setUserState(state.columns);
          }
          if (exportController) {
            exportController.selectionOnly(state.exportSelectionOnly);
          }
          if (!this.option("selection.deferred")) {
            this.option("selectedRowKeys", selectedRowKeys || []);
          }
          this.option("selectionFilter", selectionFilter);
          if (allowedPageSizes && "auto" === this.option("pager.allowedPageSizes")) {
            this.option("pager").allowedPageSizes = allowedPageSizes;
          }
          if (this.option("focusedRowEnabled")) {
            this.option("focusedRowIndex", -1);
            this.option("focusedRowKey", state.focusedRowKey || null);
          }
          this.component.endUpdate();
          this.option("searchPanel.text", searchText || "");
          this.option("filterValue", getFilterValue(this, state));
          this.option("filterPanel.filterEnabled", state.filterPanel ? state.filterPanel.filterEnabled : true);
          this.option("paging.pageIndex", (!isVirtualScrollingMode || hasHeight) && state.pageIndex || 0);
          this.option("paging.pageSize", (!isVirtualScrollingMode || showPageSizeSelector) && isDefined(state.pageSize) ? state.pageSize : this._initialPageSize);
          dataController2 && dataController2.reset();
        }
      },
      columns: {
        _shouldReturnVisibleColumns() {
          var result2 = this.callBase.apply(this, arguments);
          var stateStoringController = this.getController("stateStoring");
          return result2 && (!stateStoringController.isEnabled() || stateStoringController.isLoaded());
        }
      },
      data: {
        callbackNames() {
          return this.callBase().concat(["stateLoaded"]);
        },
        _refreshDataSource() {
          var {
            callBase
          } = this;
          var stateStoringController = this.getController("stateStoring");
          if (stateStoringController.isEnabled() && !stateStoringController.isLoaded()) {
            clearTimeout(this._restoreStateTimeoutID);
            var deferred = new Deferred();
            this._restoreStateTimeoutID = setTimeout(() => {
              stateStoringController.load().always(() => {
                this._restoreStateTimeoutID = null;
              }).done(() => {
                callBase.call(this);
                this.stateLoaded.fire();
                deferred.resolve();
              }).fail((error) => {
                this.stateLoaded.fire();
                this._handleLoadError(error || "Unknown error");
                deferred.reject();
              });
            });
            return deferred.promise();
          }
          if (!this.isStateLoading()) {
            callBase.call(this);
          }
        },
        isLoading() {
          var stateStoringController = this.getController("stateStoring");
          return this.callBase() || stateStoringController.isLoading();
        },
        isStateLoading() {
          return isDefined(this._restoreStateTimeoutID);
        },
        isLoaded() {
          return this.callBase() && !this.isStateLoading();
        },
        dispose() {
          clearTimeout(this._restoreStateTimeoutID);
          this.callBase();
        }
      },
      selection: {
        _fireSelectionChanged(options2) {
          var stateStoringController = this.getController("stateStoring");
          var isDeferredSelection = this.option("selection.deferred");
          if (stateStoringController.isLoading() && isDeferredSelection) {
            return;
          }
          this.callBase.apply(this, arguments);
        }
      }
    }
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/state_storing.js
m_core_default.registerModule("stateStoring", stateStoringModule);

// node_modules/devextreme/esm/__internal/grids/grid_core/selection/m_selection.js
var EDITOR_CELL_CLASS = "dx-editor-cell";
var ROW_CLASS2 = "dx-row";
var ROW_SELECTION_CLASS = "dx-selection";
var SELECT_CHECKBOX_CLASS = "dx-select-checkbox";
var CHECKBOXES_HIDDEN_CLASS = "dx-select-checkboxes-hidden";
var COMMAND_SELECT_CLASS = "dx-command-select";
var SELECTION_DISABLED_CLASS = "dx-selection-disabled";
var DATA_ROW_CLASS2 = "dx-data-row";
var SHOW_CHECKBOXES_MODE = "selection.showCheckBoxesMode";
var SELECTION_MODE = "selection.mode";
var processLongTap = function(that, dxEvent) {
  var selectionController = that.getController("selection");
  var rowsView3 = that.getView("rowsView");
  var $row = renderer_default(dxEvent.target).closest(".".concat(DATA_ROW_CLASS2));
  var rowIndex = rowsView3.getRowIndex($row);
  if (rowIndex < 0) {
    return;
  }
  if ("onLongTap" === that.option(SHOW_CHECKBOXES_MODE)) {
    if (selectionController.isSelectionWithCheckboxes()) {
      selectionController.stopSelectionWithCheckboxes();
    } else {
      selectionController.startSelectionWithCheckboxes();
    }
  } else {
    if ("onClick" === that.option(SHOW_CHECKBOXES_MODE)) {
      selectionController.startSelectionWithCheckboxes();
    }
    if ("always" !== that.option(SHOW_CHECKBOXES_MODE)) {
      selectionController.changeItemSelection(rowIndex, {
        control: true
      });
    }
  }
};
var isSeveralRowsSelected = function(that, selectionFilter) {
  var keyIndex = 0;
  var store = that._dataController.store();
  var key = store && store.key();
  var isComplexKey = Array.isArray(key);
  if (!selectionFilter.length) {
    return false;
  }
  if (isComplexKey && Array.isArray(selectionFilter[0]) && "and" === selectionFilter[1]) {
    for (var i = 0; i < selectionFilter.length; i++) {
      if (Array.isArray(selectionFilter[i])) {
        if (selectionFilter[i][0] !== key[keyIndex] || "=" !== selectionFilter[i][1]) {
          return true;
        }
        keyIndex++;
      }
    }
    return false;
  }
  return key !== selectionFilter[0];
};
var selectionCellTemplate = (container, options2) => {
  var {
    component
  } = options2;
  var rowsView3 = component.getView("rowsView");
  if (component.option("renderAsync") && !component.option("selection.deferred")) {
    options2.value = component.isRowSelected(options2.row.key);
  }
  rowsView3.renderSelectCheckBoxContainer(renderer_default(container), options2);
};
var selectionHeaderTemplate = (container, options2) => {
  var {
    column
  } = options2;
  var $cellElement = renderer_default(container);
  var columnHeadersView = options2.component.getView("columnHeadersView");
  $cellElement.addClass(EDITOR_CELL_CLASS);
  columnHeadersView._renderSelectAllCheckBox($cellElement, column);
  columnHeadersView._attachSelectAllCheckBoxClickEvent($cellElement);
};
var SelectionController = class extends m_modules_default.Controller {
  init() {
    var _a2;
    var {
      deferred,
      selectAllMode,
      mode
    } = null !== (_a2 = this.option("selection")) && void 0 !== _a2 ? _a2 : {};
    if ("infinite" === this.option("scrolling.mode") && !deferred && "multiple" === mode && "allPages" === selectAllMode) {
      ui_errors_default.log("W1018");
    }
    this._dataController = this.getController("data");
    this._selectionMode = mode;
    this._isSelectionWithCheckboxes = false;
    this._selection = this._createSelection();
    this._updateSelectColumn();
    this.createAction("onSelectionChanged", {
      excludeValidators: ["disabled", "readOnly"]
    });
    if (!this._dataPushedHandler) {
      this._dataPushedHandler = this._handleDataPushed.bind(this);
      this._dataController.pushed.add(this._dataPushedHandler);
    }
  }
  _handleDataPushed(changes) {
    this._deselectRemovedOnPush(changes);
    this._updateSelectedOnPush(changes);
  }
  _deselectRemovedOnPush(changes) {
    var isDeferredSelection = this.option("selection.deferred");
    var removedKeys = changes.filter((change) => "remove" === change.type).map((change) => change.key);
    if (isDeferredSelection) {
      var selectedKeys = this._dataController.items().filter((item) => item.isSelected).map((item) => item.key);
      removedKeys = removedKeys.filter((key) => selectedKeys.find((selectedKey) => equalByValue(selectedKey, key)));
    }
    removedKeys.length && this.deselectRows(removedKeys);
  }
  _updateSelectedOnPush(changes) {
    var isDeferredSelection = this.option("selection.deferred");
    if (isDeferredSelection) {
      return;
    }
    var updateChanges = changes.filter((change) => "update" === change.type);
    var data3 = this.getSelectedRowsData();
    applyBatch({
      keyInfo: this._selection.options,
      data: data3,
      changes: updateChanges
    });
  }
  _getSelectionConfig() {
    var _a2;
    var dataController2 = this._dataController;
    var columnsController = this.getController("columns");
    var selectionOptions = null !== (_a2 = this.option("selection")) && void 0 !== _a2 ? _a2 : {};
    var {
      deferred
    } = selectionOptions;
    var scrollingMode = this.option("scrolling.mode");
    var virtualPaging = "virtual" === scrollingMode || "infinite" === scrollingMode;
    var allowSelectAll = this.option("selection.allowSelectAll");
    var legacyScrollingMode = this.option("scrolling.legacyMode");
    return {
      selectedKeys: this.option("selectedRowKeys"),
      mode: this._selectionMode,
      deferred,
      maxFilterLengthInRequest: selectionOptions.maxFilterLengthInRequest,
      selectionFilter: this.option("selectionFilter"),
      ignoreDisabledItems: true,
      allowLoadByRange() {
        var hasGroupColumns = columnsController.getGroupColumns().length > 0;
        return virtualPaging && !legacyScrollingMode && !hasGroupColumns && allowSelectAll && !deferred;
      },
      key: () => null === dataController2 || void 0 === dataController2 ? void 0 : dataController2.key(),
      keyOf: (item) => null === dataController2 || void 0 === dataController2 ? void 0 : dataController2.keyOf(item),
      dataFields() {
        var _a3;
        return null === (_a3 = dataController2.dataSource()) || void 0 === _a3 ? void 0 : _a3.select();
      },
      load(options2) {
        var _a3;
        return (null === (_a3 = dataController2.dataSource()) || void 0 === _a3 ? void 0 : _a3.load(options2)) || new Deferred().resolve([]);
      },
      plainItems: () => dataController2.items(true),
      isItemSelected: (item) => item.selected,
      isSelectableItem: (item) => "data" === (null === item || void 0 === item ? void 0 : item.rowType) && !item.isNewRow,
      getItemData: (item) => isDefined(null === item || void 0 === item ? void 0 : item.rowType) ? (null === item || void 0 === item ? void 0 : item.oldData) || (null === item || void 0 === item ? void 0 : item.data) : item,
      filter: () => dataController2.getCombinedFilter(deferred),
      totalCount: () => dataController2.totalCount(),
      getLoadOptions(loadItemIndex, focusedItemIndex, shiftItemIndex) {
        var _a3, _b2;
        var {
          sort,
          filter
        } = null !== (_b2 = null === (_a3 = dataController2.dataSource()) || void 0 === _a3 ? void 0 : _a3.lastLoadOptions()) && void 0 !== _b2 ? _b2 : {};
        var minIndex = Math.min(loadItemIndex, focusedItemIndex);
        var maxIndex = Math.max(loadItemIndex, focusedItemIndex);
        if (isDefined(shiftItemIndex)) {
          minIndex = Math.min(shiftItemIndex, minIndex);
          maxIndex = Math.max(shiftItemIndex, maxIndex);
        }
        var take = maxIndex - minIndex + 1;
        return {
          skip: minIndex,
          take,
          filter,
          sort
        };
      },
      onSelectionChanged: this._updateSelectedItems.bind(this)
    };
  }
  _updateSelectColumn() {
    var columnsController = this.getController("columns");
    var isSelectColumnVisible = this.isSelectColumnVisible();
    columnsController.addCommandColumn({
      type: "selection",
      command: "select",
      visible: isSelectColumnVisible,
      visibleIndex: -1,
      dataType: "boolean",
      alignment: "center",
      cssClass: COMMAND_SELECT_CLASS,
      width: "auto",
      cellTemplate: selectionCellTemplate,
      headerCellTemplate: selectionHeaderTemplate
    });
    columnsController.columnOption("command:select", "visible", isSelectColumnVisible);
  }
  _createSelection() {
    var options2 = this._getSelectionConfig();
    return new Selection(options2);
  }
  _fireSelectionChanged(options2) {
    var argument = this.option("selection.deferred") ? {
      selectionFilter: this.option("selectionFilter")
    } : {
      selectedRowKeys: this.option("selectedRowKeys")
    };
    this.selectionChanged.fire(argument);
    if (options2) {
      this.executeAction("onSelectionChanged", options2);
    }
  }
  _updateCheckboxesState(options2) {
    var {
      isDeferredMode
    } = options2;
    var {
      selectionFilter
    } = options2;
    var {
      selectedItemKeys
    } = options2;
    var {
      removedItemKeys
    } = options2;
    if ("onClick" === this.option(SHOW_CHECKBOXES_MODE)) {
      if (isDeferredMode ? selectionFilter && isSeveralRowsSelected(this, selectionFilter) : selectedItemKeys.length > 1) {
        this.startSelectionWithCheckboxes();
      } else if (isDeferredMode ? selectionFilter && !selectionFilter.length : 0 === selectedItemKeys.length && removedItemKeys.length) {
        this.stopSelectionWithCheckboxes();
      }
    }
  }
  _updateSelectedItems(args) {
    var selectionChangedOptions;
    var isDeferredMode = this.option("selection.deferred");
    var selectionFilter = this._selection.selectionFilter();
    var dataController2 = this._dataController;
    var items = dataController2.items(true);
    var visibleItems = dataController2.items();
    if (!items) {
      return;
    }
    var isSelectionWithCheckboxes = this.isSelectionWithCheckboxes();
    var changedItemIndexes = this.getChangedItemIndexes(items);
    var visibleChangedItemIndexes = this.getChangedItemIndexes(visibleItems);
    this._updateCheckboxesState({
      selectedItemKeys: args.selectedItemKeys,
      removedItemKeys: args.removedItemKeys,
      selectionFilter,
      isDeferredMode
    });
    if (changedItemIndexes.length || isSelectionWithCheckboxes !== this.isSelectionWithCheckboxes()) {
      dataController2.updateItems({
        changeType: "updateSelection",
        itemIndexes: visibleChangedItemIndexes
      });
    }
    if (isDeferredMode) {
      this.option("selectionFilter", selectionFilter);
      selectionChangedOptions = {};
    } else if (args.addedItemKeys.length || args.removedItemKeys.length) {
      this._selectedItemsInternalChange = true;
      this.option("selectedRowKeys", args.selectedItemKeys.slice(0));
      this._selectedItemsInternalChange = false;
      selectionChangedOptions = {
        selectedRowsData: args.selectedItems.slice(0),
        selectedRowKeys: args.selectedItemKeys.slice(0),
        currentSelectedRowKeys: args.addedItemKeys.slice(0),
        currentDeselectedRowKeys: args.removedItemKeys.slice(0)
      };
    }
    this._fireSelectionChanged(selectionChangedOptions);
  }
  getChangedItemIndexes(items) {
    var itemIndexes = [];
    var isDeferredSelection = this.option("selection.deferred");
    for (var i = 0, {
      length
    } = items; i < length; i++) {
      var row = items[i];
      var isItemSelected = this.isRowSelected(isDeferredSelection ? row.data : row.key);
      if (this._selection.isDataItem(row) && row.isSelected !== isItemSelected) {
        itemIndexes.push(i);
      }
    }
    return itemIndexes;
  }
  callbackNames() {
    return ["selectionChanged"];
  }
  optionChanged(args) {
    super.optionChanged(args);
    switch (args.name) {
      case "selection":
        var oldSelectionMode = this._selectionMode;
        this.init();
        if ("selection.showCheckBoxesMode" !== args.fullName) {
          var selectionMode = this._selectionMode;
          var selectedRowKeys = this.option("selectedRowKeys");
          if (oldSelectionMode !== selectionMode) {
            if ("single" === selectionMode) {
              if (selectedRowKeys.length > 1) {
                selectedRowKeys = [selectedRowKeys[0]];
              }
            } else if ("multiple" !== selectionMode) {
              selectedRowKeys = [];
            }
          }
          this.selectRows(selectedRowKeys).always(() => {
            this._fireSelectionChanged();
          });
        }
        this.getController("columns").updateColumns();
        args.handled = true;
        break;
      case "selectionFilter":
        this._selection.selectionFilter(args.value);
        args.handled = true;
        break;
      case "selectedRowKeys":
        var value2 = args.value || [];
        if (Array.isArray(value2) && !this._selectedItemsInternalChange && (this.component.getDataSource() || !value2.length)) {
          this.selectRows(value2);
        }
        args.handled = true;
    }
  }
  publicMethods() {
    return ["selectRows", "deselectRows", "selectRowsByIndexes", "getSelectedRowKeys", "getSelectedRowsData", "clearSelection", "selectAll", "deselectAll", "startSelectionWithCheckboxes", "stopSelectionWithCheckboxes", "isRowSelected"];
  }
  isRowSelected(arg) {
    return this._selection.isItemSelected(arg);
  }
  isSelectColumnVisible() {
    return "multiple" === this.option(SELECTION_MODE) && ("always" === this.option(SHOW_CHECKBOXES_MODE) || "onClick" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes);
  }
  _isOnePageSelectAll() {
    return "page" === this.option("selection.selectAllMode");
  }
  isSelectAll() {
    return this._selection.getSelectAllState(this._isOnePageSelectAll());
  }
  selectAll() {
    if ("onClick" === this.option(SHOW_CHECKBOXES_MODE)) {
      this.startSelectionWithCheckboxes();
    }
    return this._selection.selectAll(this._isOnePageSelectAll());
  }
  deselectAll() {
    return this._selection.deselectAll(this._isOnePageSelectAll());
  }
  clearSelection() {
    return this.selectedItemKeys([]);
  }
  refresh() {
    var _a2;
    var selectedRowKeys = null !== (_a2 = this.option("selectedRowKeys")) && void 0 !== _a2 ? _a2 : [];
    if (!this.option("selection.deferred") && selectedRowKeys.length) {
      return this.selectedItemKeys(selectedRowKeys);
    }
    return new Deferred().resolve().promise();
  }
  selectedItemKeys(value2, preserve, isDeselect, isSelectAll) {
    return this._selection.selectedItemKeys(value2, preserve, isDeselect, isSelectAll);
  }
  getSelectedRowKeys() {
    return this._selection.getSelectedItemKeys();
  }
  selectRows(keys, preserve) {
    return this.selectedItemKeys(keys, preserve);
  }
  deselectRows(keys) {
    return this.selectedItemKeys(keys, true, true);
  }
  selectRowsByIndexes(indexes) {
    var items = this._dataController.items();
    var keys = [];
    if (!Array.isArray(indexes)) {
      indexes = Array.prototype.slice.call(arguments, 0);
    }
    each(indexes, function() {
      var item = items[this];
      if (item && "data" === item.rowType) {
        keys.push(item.key);
      }
    });
    return this.selectRows(keys);
  }
  getSelectedRowsData() {
    return this._selection.getSelectedItems();
  }
  loadSelectedItemsWithFilter() {
    return this._selection.loadSelectedItemsWithFilter();
  }
  changeItemSelection(visibleItemIndex, keys, setFocusOnly) {
    keys = keys || {};
    if (this.isSelectionWithCheckboxes()) {
      keys.control = true;
    }
    var loadedItemIndex = visibleItemIndex + this._dataController.getRowIndexOffset() - this._dataController.getRowIndexOffset(true);
    return this._selection.changeItemSelection(loadedItemIndex, keys, setFocusOnly);
  }
  focusedItemIndex(itemIndex) {
    if (isDefined(itemIndex)) {
      this._selection._focusedItemIndex = itemIndex;
    } else {
      return this._selection._focusedItemIndex;
    }
    return;
  }
  isSelectionWithCheckboxes() {
    return "multiple" === this.option(SELECTION_MODE) && ("always" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes);
  }
  startSelectionWithCheckboxes() {
    if ("multiple" === this.option(SELECTION_MODE) && !this.isSelectionWithCheckboxes()) {
      this._isSelectionWithCheckboxes = true;
      this._updateSelectColumn();
      return true;
    }
    return false;
  }
  stopSelectionWithCheckboxes() {
    if (this._isSelectionWithCheckboxes) {
      this._isSelectionWithCheckboxes = false;
      this._updateSelectColumn();
      return true;
    }
    return false;
  }
};
var selectionModule = {
  defaultOptions: () => ({
    selection: {
      mode: "none",
      showCheckBoxesMode: "onClick",
      allowSelectAll: true,
      selectAllMode: "allPages",
      maxFilterLengthInRequest: 1500,
      deferred: false
    },
    selectionFilter: [],
    selectedRowKeys: []
  }),
  controllers: {
    selection: SelectionController
  },
  extenders: {
    controllers: {
      data: {
        init() {
          var selectionController = this.getController("selection");
          var isDeferredMode = this.option("selection.deferred");
          this.callBase.apply(this, arguments);
          if (isDeferredMode) {
            selectionController._updateCheckboxesState({
              isDeferredMode: true,
              selectionFilter: this.option("selectionFilter")
            });
          }
        },
        _loadDataSource() {
          var that = this;
          return that.callBase().always(() => {
            that.getController("selection").refresh();
          });
        },
        _processDataItem(item, options2) {
          var selectionController = this.getController("selection");
          var hasSelectColumn = selectionController.isSelectColumnVisible();
          var isDeferredSelection = options2.isDeferredSelection = void 0 === options2.isDeferredSelection ? this.option("selection.deferred") : options2.isDeferredSelection;
          var dataItem = this.callBase.apply(this, arguments);
          dataItem.isSelected = selectionController.isRowSelected(isDeferredSelection ? dataItem.data : dataItem.key);
          if (hasSelectColumn && dataItem.values) {
            for (var i = 0; i < options2.visibleColumns.length; i++) {
              if ("select" === options2.visibleColumns[i].command) {
                dataItem.values[i] = dataItem.isSelected;
                break;
              }
            }
          }
          return dataItem;
        },
        refresh(options2) {
          var that = this;
          var d = new Deferred();
          this.callBase.apply(this, arguments).done(() => {
            if (!options2 || options2.selection) {
              that.getController("selection").refresh().done(d.resolve).fail(d.reject);
            } else {
              d.resolve();
            }
          }).fail(d.reject);
          return d.promise();
        },
        _handleDataChanged(e) {
          this.callBase.apply(this, arguments);
          if ((!e || "refresh" === e.changeType) && !this._repaintChangesOnly) {
            this.getController("selection").focusedItemIndex(-1);
          }
        },
        _applyChange(change) {
          if (change && "updateSelection" === change.changeType) {
            change.items.forEach((item, index2) => {
              var currentItem = this._items[index2];
              if (currentItem) {
                currentItem.isSelected = item.isSelected;
                currentItem.values = item.values;
              }
            });
            return;
          }
          return this.callBase.apply(this, arguments);
        },
        _endUpdateCore() {
          var changes = this._changes;
          var isUpdateSelection = changes.length > 1 && changes.every((change) => "updateSelection" === change.changeType);
          if (isUpdateSelection) {
            var itemIndexes = changes.map((change) => change.itemIndexes || []).reduce((a, b) => a.concat(b));
            this._changes = [{
              changeType: "updateSelection",
              itemIndexes
            }];
          }
          this.callBase.apply(this, arguments);
        }
      },
      contextMenu: {
        _contextMenuPrepared(options2) {
          var dxEvent = options2.event;
          if (dxEvent.originalEvent && "dxhold" !== dxEvent.originalEvent.type || options2.items && options2.items.length > 0) {
            return;
          }
          processLongTap(this, dxEvent);
        }
      }
    },
    views: {
      columnHeadersView: {
        init() {
          this.callBase();
          this.getController("selection").selectionChanged.add(this._updateSelectAllValue.bind(this));
        },
        _updateSelectAllValue() {
          var $element = this.element();
          var $editor = $element && $element.find(".".concat(SELECT_CHECKBOX_CLASS));
          if ($element && $editor.length && "multiple" === this.option("selection.mode")) {
            var selectAllValue = this.getController("selection").isSelectAll();
            var hasSelection = false !== selectAllValue;
            var isVisible2 = this.option("selection.allowSelectAll") ? !this.getController("data").isEmpty() : hasSelection;
            $editor.dxCheckBox("instance").option({
              visible: isVisible2,
              value: selectAllValue
            });
          }
        },
        _handleDataChanged(e) {
          this.callBase(e);
          if (!e || "refresh" === e.changeType || e.repaintChangesOnly && "update" === e.changeType) {
            this.waitAsyncTemplates().done(() => {
              this._updateSelectAllValue();
            });
          }
        },
        _renderSelectAllCheckBox($container, column) {
          var that = this;
          var selectionController = that.getController("selection");
          var isEmptyData = that.getController("data").isEmpty();
          var groupElement = renderer_default("<div>").appendTo($container).addClass(SELECT_CHECKBOX_CLASS);
          that.setAria("label", message_default.format("dxDataGrid-ariaSelectAll"), groupElement);
          that.getController("editorFactory").createEditor(groupElement, extend({}, column, {
            parentType: "headerRow",
            dataType: "boolean",
            value: selectionController.isSelectAll(),
            editorOptions: {
              visible: !isEmptyData && (that.option("selection.allowSelectAll") || false !== selectionController.isSelectAll())
            },
            tabIndex: that.option("useLegacyKeyboardNavigation") ? -1 : that.option("tabIndex") || 0,
            setValue(value2, e) {
              var allowSelectAll = that.option("selection.allowSelectAll");
              e.component.option("visible", allowSelectAll || false !== e.component.option("value"));
              if (!e.event || selectionController.isSelectAll() === value2) {
                return;
              }
              if (e.value && !allowSelectAll) {
                e.component.option("value", false);
              } else {
                e.value ? selectionController.selectAll() : selectionController.deselectAll();
              }
              e.event.preventDefault();
            }
          }));
          return groupElement;
        },
        _attachSelectAllCheckBoxClickEvent($element) {
          events_engine_default.on($element, CLICK_EVENT_NAME, this.createAction((e) => {
            var {
              event
            } = e;
            if (!renderer_default(event.target).closest(".".concat(SELECT_CHECKBOX_CLASS)).length) {
              events_engine_default.trigger(renderer_default(event.currentTarget).children(".".concat(SELECT_CHECKBOX_CLASS)), CLICK_EVENT_NAME);
            }
            event.preventDefault();
          }));
        }
      },
      rowsView: {
        renderSelectCheckBoxContainer($container, options2) {
          if ("data" === options2.rowType && !options2.row.isNewRow) {
            $container.addClass(EDITOR_CELL_CLASS);
            this._attachCheckBoxClickEvent($container);
            this._renderSelectCheckBox($container, options2);
          } else {
            m_utils_default.setEmptyText($container);
          }
        },
        _renderSelectCheckBox(container, options2) {
          var groupElement = renderer_default("<div>").addClass(SELECT_CHECKBOX_CLASS).appendTo(container);
          this.setAria("label", message_default.format("dxDataGrid-ariaSelectRow"), groupElement);
          this.getController("editorFactory").createEditor(groupElement, extend({}, options2.column, {
            parentType: "dataRow",
            dataType: "boolean",
            lookup: null,
            value: options2.value,
            setValue(value2, e) {
              var _a2;
              if ("keydown" === (null === (_a2 = null === e || void 0 === e ? void 0 : e.event) || void 0 === _a2 ? void 0 : _a2.type)) {
                events_engine_default.trigger(e.element, CLICK_EVENT_NAME, e);
              }
            },
            row: options2.row
          }));
          return groupElement;
        },
        _attachCheckBoxClickEvent($element) {
          events_engine_default.on($element, CLICK_EVENT_NAME, this.createAction(function(e) {
            var selectionController = this.getController("selection");
            var {
              event
            } = e;
            var rowIndex = this.getRowIndex(renderer_default(event.currentTarget).closest(".".concat(ROW_CLASS2)));
            if (rowIndex >= 0) {
              selectionController.startSelectionWithCheckboxes();
              selectionController.changeItemSelection(rowIndex, {
                shift: event.shiftKey
              });
              if (renderer_default(event.target).closest(".".concat(SELECT_CHECKBOX_CLASS)).length) {
                this.getController("data").updateItems({
                  changeType: "updateSelection",
                  itemIndexes: [rowIndex]
                });
              }
            }
          }));
        },
        _update(change) {
          var that = this;
          var tableElements = that.getTableElements();
          if ("updateSelection" === change.changeType) {
            if (tableElements.length > 0) {
              each(tableElements, (_, tableElement) => {
                each(change.itemIndexes || [], (_2, index2) => {
                  var $row;
                  if (change.items[index2]) {
                    $row = that._getRowElements(renderer_default(tableElement)).eq(index2);
                    if ($row.length) {
                      var {
                        isSelected
                      } = change.items[index2];
                      $row.toggleClass(ROW_SELECTION_CLASS, void 0 === isSelected ? false : isSelected).find(".".concat(SELECT_CHECKBOX_CLASS)).dxCheckBox("option", "value", isSelected);
                      that.setAria("selected", isSelected, $row);
                    }
                  }
                });
              });
              that._updateCheckboxesClass();
            }
          } else {
            that.callBase(change);
          }
        },
        _createTable() {
          var that = this;
          var selectionMode = that.option("selection.mode");
          var $table = that.callBase.apply(that, arguments);
          if ("none" !== selectionMode) {
            if ("onLongTap" === that.option(SHOW_CHECKBOXES_MODE) || !touch) {
              events_engine_default.on($table, addNamespace2(hold_default.name, "dxDataGridRowsView"), ".".concat(DATA_ROW_CLASS2), that.createAction((e) => {
                processLongTap(that.component, e.event);
                e.event.stopPropagation();
              }));
            }
            events_engine_default.on($table, "mousedown selectstart", that.createAction((e) => {
              var {
                event
              } = e;
              if (event.shiftKey) {
                event.preventDefault();
              }
            }));
          }
          return $table;
        },
        _createRow(row) {
          var $row = this.callBase.apply(this, arguments);
          if (row) {
            var {
              isSelected
            } = row;
            if (isSelected) {
              $row.addClass(ROW_SELECTION_CLASS);
            }
            var selectionMode = this.option(SELECTION_MODE);
            if ("none" !== selectionMode) {
              this.setAria("selected", isSelected, $row);
            }
          }
          return $row;
        },
        _rowClick(e) {
          var dxEvent = e.event;
          var isSelectionDisabled = renderer_default(dxEvent.target).closest(".".concat(SELECTION_DISABLED_CLASS)).length;
          if (!this.isClickableElement(renderer_default(dxEvent.target))) {
            if (!isSelectionDisabled && ("multiple" !== this.option(SELECTION_MODE) || "always" !== this.option(SHOW_CHECKBOXES_MODE))) {
              if (this.getController("selection").changeItemSelection(e.rowIndex, {
                control: isCommandKeyPressed(dxEvent),
                shift: dxEvent.shiftKey
              })) {
                dxEvent.preventDefault();
                e.handled = true;
              }
            }
            this.callBase(e);
          }
        },
        isClickableElement($target) {
          var isCommandSelect = $target.closest(".".concat(COMMAND_SELECT_CLASS)).length;
          return !!isCommandSelect;
        },
        _renderCore(change) {
          var deferred = this.callBase(change);
          this._updateCheckboxesClass();
          return deferred;
        },
        _updateCheckboxesClass() {
          var tableElements = this.getTableElements();
          var selectionController = this.getController("selection");
          var isCheckBoxesHidden = selectionController.isSelectColumnVisible() && !selectionController.isSelectionWithCheckboxes();
          each(tableElements, (_, tableElement) => {
            renderer_default(tableElement).toggleClass(CHECKBOXES_HIDDEN_CLASS, isCheckBoxesHidden);
          });
        }
      }
    }
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/selection.js
m_core_default.registerModule("selection", selectionModule);

// node_modules/devextreme/esm/renovation/utils/dom.js
function querySelectorInSameDocument(el, selector) {
  var _el$getRootNode, _el$getRootNode2;
  var root = null !== (_el$getRootNode = null === (_el$getRootNode2 = el.getRootNode) || void 0 === _el$getRootNode2 ? void 0 : _el$getRootNode2.call(el)) && void 0 !== _el$getRootNode ? _el$getRootNode : document;
  return root.querySelector(selector);
}

// node_modules/devextreme/esm/renovation/component_wrapper/editors/editor.js
var INVALID_MESSAGE_AUTO3 = "dx-invalid-message-auto";
var VALIDATION_TARGET2 = "dx-validation-target";
var Editor2 = class extends ComponentWrapper {
  getProps() {
    var props = super.getProps();
    props.onFocusIn = () => {
      var isValidationMessageShownOnFocus = "auto" === this.option("validationMessageMode");
      if (isValidationMessageShownOnFocus) {
        var $validationMessageWrapper = renderer_default(querySelectorInSameDocument(this.element(), ".dx-invalid-message.dx-overlay-wrapper"));
        null === $validationMessageWrapper || void 0 === $validationMessageWrapper ? void 0 : $validationMessageWrapper.removeClass(INVALID_MESSAGE_AUTO3);
        if (this.showValidationMessageTimeout) {
          clearTimeout(this.showValidationMessageTimeout);
        }
        this.showValidationMessageTimeout = setTimeout(() => {
          null === $validationMessageWrapper || void 0 === $validationMessageWrapper ? void 0 : $validationMessageWrapper.addClass(INVALID_MESSAGE_AUTO3);
        }, 150);
      }
    };
    props.saveValueChangeEvent = (e) => {
      this._valueChangeEventInstance = e;
    };
    return props;
  }
  _createElement(element) {
    super._createElement(element);
    this.showValidationMessageTimeout = void 0;
    this.validationRequest = callbacks_default();
    data(this.$element()[0], VALIDATION_TARGET2, this);
  }
  _render() {
    var _this$option;
    null === (_this$option = this.option("_onMarkupRendered")) || void 0 === _this$option ? void 0 : _this$option();
  }
  _init() {
    super._init();
    this._initialValue = this.option("value");
  }
  _initializeComponent() {
    super._initializeComponent();
    this._valueChangeAction = this._createActionByOption("onValueChanged", {
      excludeValidators: ["disabled", "readOnly"]
    });
  }
  _initOptions(options2) {
    super._initOptions(options2);
    this.option(validation_engine_default.initValidationOptions(options2));
  }
  _getDefaultOptions() {
    return extend(super._getDefaultOptions(), {
      validationMessageOffset: {
        h: 0,
        v: 0
      },
      validationTooltipOptions: {}
    });
  }
  _bindInnerWidgetOptions(innerWidget, optionsContainer) {
    var innerWidgetOptions = extend({}, innerWidget.option());
    var syncOptions = () => this._silent(optionsContainer, innerWidgetOptions);
    syncOptions();
    innerWidget.on("optionChanged", syncOptions);
  }
  _raiseValidation(value2, previousValue) {
    var areValuesEmpty = !isDefined(value2) && !isDefined(previousValue);
    if (value2 !== previousValue && !areValuesEmpty) {
      this.validationRequest.fire({
        value: value2,
        editor: this
      });
    }
  }
  _raiseValueChangeAction(value2, previousValue) {
    var _this$_valueChangeAct;
    null === (_this$_valueChangeAct = this._valueChangeAction) || void 0 === _this$_valueChangeAct ? void 0 : _this$_valueChangeAct.call(this, {
      element: this.$element(),
      previousValue,
      value: value2,
      event: this._valueChangeEventInstance
    });
    this._valueChangeEventInstance = void 0;
  }
  _optionChanged(option) {
    var {
      name: name2,
      previousValue,
      value: value2
    } = option;
    if (name2 && void 0 !== this._getActionConfigs()[name2]) {
      this._addAction(name2);
    }
    switch (name2) {
      case "value":
        this._raiseValidation(value2, previousValue);
        this.option("isDirty", this._initialValue !== value2);
        this._raiseValueChangeAction(value2, previousValue);
        break;
      case "onValueChanged":
        this._valueChangeAction = this._createActionByOption("onValueChanged", {
          excludeValidators: ["disabled", "readOnly"]
        });
        break;
      case "isValid":
      case "validationError":
      case "validationErrors":
      case "validationStatus":
        this.option(validation_engine_default.synchronizeValidationOptions(option, this.option()));
    }
    super._optionChanged(option);
  }
  clear() {
    var {
      value: value2
    } = this._getDefaultOptions();
    this.option({
      value: value2
    });
  }
  reset() {
    var value2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0;
    if (arguments.length) {
      this._initialValue = value2;
    }
    this.option("value", this._initialValue);
    this.option("isDirty", false);
    this.option("isValid", true);
  }
  _dispose() {
    super._dispose();
    data(this.element(), VALIDATION_TARGET2, null);
    if (this.showValidationMessageTimeout) {
      clearTimeout(this.showValidationMessageTimeout);
    }
  }
};
var prevIsEditor = editor_default.isEditor;
var newIsEditor = (instance) => prevIsEditor(instance) || instance instanceof Editor2;
Editor2.isEditor = newIsEditor;
editor_default.isEditor = newIsEditor;

// node_modules/devextreme/esm/renovation/component_wrapper/editors/check_box.js
var CheckBox = class extends Editor2 {
  _useTemplates() {
    return false;
  }
  _isFocused() {
    var focusTarget = this.$element()[0];
    return focusTarget.classList.contains("dx-state-focused");
  }
  getSupportedKeyNames() {
    return ["space"];
  }
  getProps() {
    var props = super.getProps();
    if (null !== props.value) {
      props.value = Boolean(props.value);
    }
    return props;
  }
};

// node_modules/devextreme/esm/renovation/ui/common/utils/get_updated_options.js
var defaultNotDeepCopyArrays = ["dataSource", "selectedRowKeys"];
var propsToIgnore = {
  integrationOptions: true
};
function getDiffItem(key, value2, previousValue) {
  return {
    path: key,
    value: value2,
    previousValue
  };
}
function compare2(resultPaths, item1, item2, key, fullPropName, notDeepCopyArrays) {
  if (propsToIgnore[key]) {
    return;
  }
  var type1 = type(item1);
  var type2 = type(item2);
  if (item1 === item2) {
    return;
  }
  if (type1 !== type2) {
    resultPaths.push(getDiffItem(key, item2, item1));
  } else if ("object" === type1) {
    if (!isPlainObject(item2)) {
      resultPaths.push(getDiffItem(key, item2, item1));
    } else {
      var diffPaths = objectDiffs(item1, item2, fullPropName, notDeepCopyArrays);
      resultPaths.push(...diffPaths.map((item) => _extends({}, item, {
        path: "".concat(key, ".").concat(item.path)
      })));
    }
  } else if ("array" === type1) {
    var notDeepCopy = notDeepCopyArrays.some((prop) => fullPropName.includes(prop));
    if (notDeepCopy && item1 !== item2) {
      resultPaths.push(getDiffItem(key, item2, item1));
    } else if (item1.length !== item2.length) {
      resultPaths.push(getDiffItem(key, item2, item1));
    } else {
      var _diffPaths = objectDiffs(item1, item2, fullPropName, notDeepCopyArrays);
      [].push.apply(resultPaths, _diffPaths.map((item) => _extends({}, item, {
        path: "".concat(key).concat(item.path)
      })));
    }
  } else {
    resultPaths.push(getDiffItem(key, item2, item1));
  }
}
var objectDiffsFiltered = (propsEnumerator) => (oldProps, props, fullPropName, notDeepCopyArrays) => {
  var resultPaths = [];
  var processItem = !Array.isArray(oldProps) ? (propName) => {
    compare2(resultPaths, oldProps[propName], props[propName], propName, "".concat(fullPropName, ".").concat(propName), notDeepCopyArrays);
  } : (propName) => {
    compare2(resultPaths, oldProps[propName], props[propName], "[".concat(propName, "]"), "".concat(fullPropName, ".").concat(propName), notDeepCopyArrays);
  };
  propsEnumerator(oldProps).forEach(processItem);
  Object.keys(props).filter((propName) => !Object.prototype.hasOwnProperty.call(oldProps, propName) && oldProps[propName] !== props[propName]).forEach((propName) => {
    resultPaths.push({
      path: propName,
      value: props[propName],
      previousValue: oldProps[propName]
    });
  });
  return resultPaths;
};
var objectDiffs = objectDiffsFiltered((oldProps) => Object.keys(oldProps));
var reactProps = {
  key: true,
  ref: true,
  children: true,
  style: true
};
var objectDiffsWithoutReactProps = objectDiffsFiltered((prop) => Object.keys(prop).filter((p2) => !reactProps[p2]));
function getUpdatedOptions(oldProps, props) {
  var notDeepCopyArrays = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : defaultNotDeepCopyArrays;
  return objectDiffsWithoutReactProps(oldProps, props, "", notDeepCopyArrays);
}

// node_modules/devextreme/esm/renovation/ui/common/dom_component_wrapper.js
var _excluded9 = ["valueChange"];
var _excluded22 = ["componentProps", "componentType", "templateNames"];
var normalizeProps2 = (props) => Object.keys(props).reduce((accumulator, key) => {
  if (void 0 !== props[key]) {
    accumulator[key] = props[key];
  }
  return accumulator;
}, {});
var viewFunction6 = (_ref) => {
  var {
    props: {
      componentProps: {
        className
      }
    },
    restAttributes,
    widgetRef
  } = _ref;
  return normalizeProps2(createVNode(1, "div", className, null, 1, _extends({}, restAttributes), null, widgetRef));
};
var DomComponentWrapperProps = {};
var DomComponentWrapper = class extends InfernoComponent {
  constructor(props) {
    super(props);
    this.state = {};
    this.widgetRef = createRef();
    this.getInstance = this.getInstance.bind(this);
    this.setupWidget = this.setupWidget.bind(this);
    this.updateWidget = this.updateWidget.bind(this);
  }
  get config() {
    if (this.context[ConfigContext.id]) {
      return this.context[ConfigContext.id];
    }
    return ConfigContext.defaultValue;
  }
  createEffects() {
    return [new InfernoEffect(this.setupWidget, []), new InfernoEffect(this.updateWidget, [this.props.componentProps, this.config, this.props.templateNames])];
  }
  updateEffects() {
    var _this$_effects$;
    null === (_this$_effects$ = this._effects[1]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.props.componentProps, this.config, this.props.templateNames]);
  }
  setupWidget() {
    var componentInstance = new this.props.componentType(this.widgetRef.current, this.properties);
    this.instance = componentInstance;
    return () => {
      componentInstance.dispose();
      this.instance = null;
    };
  }
  updateWidget() {
    var instance = this.getInstance();
    if (!instance) {
      return;
    }
    var updatedOptions = getUpdatedOptions(this.prevProps || {}, this.properties);
    if (updatedOptions.length) {
      instance.beginUpdate();
      updatedOptions.forEach((_ref2) => {
        var {
          path,
          value: value2
        } = _ref2;
        instance.option(path, value2);
      });
      instance.endUpdate();
    }
    this.prevProps = this.properties;
  }
  get properties() {
    var _this$config;
    var normalizedProps = normalizeProps2(this.props.componentProps);
    var {
      valueChange
    } = normalizedProps, restProps = _objectWithoutPropertiesLoose(normalizedProps, _excluded9);
    var properties = _extends({
      rtlEnabled: !!(null !== (_this$config = this.config) && void 0 !== _this$config && _this$config.rtlEnabled),
      isRenovated: true
    }, restProps);
    if (valueChange) {
      properties.onValueChanged = (_ref3) => {
        var {
          value: value2
        } = _ref3;
        return valueChange(value2);
      };
    }
    var templates = this.props.templateNames;
    templates.forEach((name2) => {
      if (hasTemplate(name2, properties, this)) {
        properties[name2] = (item, index2, container) => {
          renderTemplate(this.props.componentProps[name2], {
            item,
            index: index2,
            container
          }, this);
        };
      }
    });
    return properties;
  }
  get restAttributes() {
    var _this$props = this.props, restProps = _objectWithoutPropertiesLoose(_this$props, _excluded22);
    return restProps;
  }
  getInstance() {
    return this.instance;
  }
  render() {
    var props = this.props;
    return viewFunction6({
      props: _extends({}, props),
      widgetRef: this.widgetRef,
      config: this.config,
      properties: this.properties,
      restAttributes: this.restAttributes
    });
  }
};
DomComponentWrapper.defaultProps = DomComponentWrapperProps;

// node_modules/devextreme/esm/renovation/ui/overlays/validation_message.js
var _excluded10 = ["accessKey", "activeStateEnabled", "boundary", "className", "contentId", "disabled", "focusStateEnabled", "height", "hint", "hoverStateEnabled", "mode", "offset", "onClick", "onKeyDown", "positionSide", "rtlEnabled", "tabIndex", "target", "validationErrors", "visible", "visualContainer", "width"];
var viewFunction7 = (_ref) => {
  var {
    componentProps,
    restAttributes
  } = _ref;
  return normalizeProps(createComponentVNode(2, DomComponentWrapper, _extends({
    componentType: validation_message_default,
    componentProps,
    templateNames: []
  }, restAttributes)));
};
var ValidationMessageProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(BaseWidgetProps), Object.getOwnPropertyDescriptors({
  mode: "auto",
  positionSide: "top",
  offset: Object.freeze({
    h: 0,
    v: 0
  }),
  isReactComponentWrapper: true
})));
var ValidationMessage2 = class extends BaseInfernoComponent {
  constructor(props) {
    super(props);
    this.state = {};
  }
  get componentProps() {
    return this.props;
  }
  get restAttributes() {
    var _this$props = this.props, restProps = _objectWithoutPropertiesLoose(_this$props, _excluded10);
    return restProps;
  }
  render() {
    var props = this.props;
    return viewFunction7({
      props: _extends({}, props),
      componentProps: this.componentProps,
      restAttributes: this.restAttributes
    });
  }
};
ValidationMessage2.defaultProps = ValidationMessageProps;

// node_modules/devextreme/esm/renovation/ui/editors/common/editor.js
var _excluded11 = ["accessKey", "activeStateEnabled", "aria", "children", "className", "classes", "defaultValue", "disabled", "focusStateEnabled", "height", "hint", "hoverStateEnabled", "inputAttr", "isDirty", "isValid", "name", "onClick", "onFocusIn", "onKeyDown", "readOnly", "rtlEnabled", "tabIndex", "validationError", "validationErrors", "validationMessageMode", "validationMessagePosition", "validationStatus", "value", "valueChange", "visible", "width"];
var getCssClasses3 = (model) => {
  var {
    classes,
    isValid,
    readOnly
  } = model;
  var classesMap = {
    "dx-state-readonly": !!readOnly,
    "dx-invalid": !isValid,
    ["".concat(classes)]: !!classes
  };
  return combineClasses(classesMap);
};
var viewFunction8 = (viewModel) => {
  var {
    aria,
    cssClasses: classes,
    isValidationMessageVisible,
    onFocusIn,
    props: {
      accessKey,
      activeStateEnabled,
      children,
      className,
      disabled,
      focusStateEnabled,
      height,
      hint,
      hoverStateEnabled,
      onClick,
      onKeyDown,
      rtlEnabled,
      tabIndex,
      validationMessageMode,
      validationMessagePosition,
      visible: visible2,
      width
    },
    restAttributes,
    rootElementRef,
    validationErrors,
    validationMessageGuid,
    validationMessageTarget,
    widgetRef
  } = viewModel;
  return normalizeProps(createComponentVNode(2, Widget2, _extends({
    rootElementRef,
    aria,
    classes,
    activeStateEnabled,
    focusStateEnabled,
    hoverStateEnabled,
    accessKey,
    className,
    rtlEnabled,
    hint,
    disabled,
    height,
    width,
    onFocusIn,
    onClick,
    onKeyDown,
    tabIndex,
    visible: visible2
  }, restAttributes, {
    children: createFragment([children, isValidationMessageVisible && createComponentVNode(2, ValidationMessage2, {
      validationErrors,
      mode: validationMessageMode,
      positionSide: validationMessagePosition,
      rtlEnabled,
      target: validationMessageTarget,
      boundary: validationMessageTarget,
      visualContainer: validationMessageTarget,
      contentId: validationMessageGuid
    })], 0)
  }), null, widgetRef));
};
var EditorProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(BaseWidgetProps), Object.getOwnPropertyDescriptors({
  readOnly: false,
  name: "",
  validationError: null,
  validationErrors: null,
  validationMessageMode: "auto",
  validationMessagePosition: "bottom",
  validationStatus: "valid",
  isValid: true,
  isDirty: false,
  inputAttr: Object.freeze({}),
  defaultValue: null,
  valueChange: () => {
  }
})));
var EditorPropsType = {
  get readOnly() {
    return EditorProps.readOnly;
  },
  get name() {
    return EditorProps.name;
  },
  get validationError() {
    return EditorProps.validationError;
  },
  get validationErrors() {
    return EditorProps.validationErrors;
  },
  get validationMessageMode() {
    return EditorProps.validationMessageMode;
  },
  get validationMessagePosition() {
    return EditorProps.validationMessagePosition;
  },
  get validationStatus() {
    return EditorProps.validationStatus;
  },
  get isValid() {
    return EditorProps.isValid;
  },
  get isDirty() {
    return EditorProps.isDirty;
  },
  get inputAttr() {
    return EditorProps.inputAttr;
  },
  get defaultValue() {
    return EditorProps.defaultValue;
  },
  get valueChange() {
    return EditorProps.valueChange;
  },
  get className() {
    return EditorProps.className;
  },
  get activeStateEnabled() {
    return EditorProps.activeStateEnabled;
  },
  get disabled() {
    return EditorProps.disabled;
  },
  get focusStateEnabled() {
    return EditorProps.focusStateEnabled;
  },
  get hoverStateEnabled() {
    return EditorProps.hoverStateEnabled;
  },
  get tabIndex() {
    return EditorProps.tabIndex;
  },
  get visible() {
    return EditorProps.visible;
  },
  get aria() {
    return WidgetProps.aria;
  },
  get classes() {
    return WidgetProps.classes;
  }
};
var Editor3 = class extends InfernoWrapperComponent {
  constructor(props) {
    super(props);
    this.widgetRef = createRef();
    this.rootElementRef = createRef();
    this.__getterCache = {};
    this.state = {
      validationMessageGuid: "dx-".concat(new guid_default()),
      isValidationMessageVisible: false,
      value: void 0 !== this.props.value ? this.props.value : this.props.defaultValue
    };
    this.updateValidationMessageVisibility = this.updateValidationMessageVisibility.bind(this);
    this.focus = this.focus.bind(this);
    this.blur = this.blur.bind(this);
    this.onFocusIn = this.onFocusIn.bind(this);
  }
  createEffects() {
    return [new InfernoEffect(this.updateValidationMessageVisibility, [this.props.isValid, this.props.validationStatus, this.props.validationError, this.props.validationErrors]), createReRenderEffect()];
  }
  updateEffects() {
    var _this$_effects$;
    null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.props.isValid, this.props.validationStatus, this.props.validationError, this.props.validationErrors]);
  }
  updateValidationMessageVisibility() {
    this.setState((__state_argument) => ({
      isValidationMessageVisible: this.shouldShowValidationMessage
    }));
  }
  onFocusIn(event) {
    var {
      onFocusIn
    } = this.props;
    null === onFocusIn || void 0 === onFocusIn ? void 0 : onFocusIn(event);
  }
  get cssClasses() {
    return "".concat(getCssClasses3(_extends({}, this.props, {
      value: void 0 !== this.props.value ? this.props.value : this.state.value
    })));
  }
  get shouldShowValidationMessage() {
    var _this$validationError;
    var {
      isValid,
      validationStatus
    } = this.props;
    var validationErrors = null !== (_this$validationError = this.validationErrors) && void 0 !== _this$validationError ? _this$validationError : [];
    var isEditorValid = isValid && "invalid" !== validationStatus;
    return !isEditorValid && validationErrors.length > 0;
  }
  get aria() {
    var {
      isValid,
      readOnly
    } = this.props;
    var result2 = {
      readonly: readOnly ? "true" : "false",
      invalid: !isValid ? "true" : "false"
    };
    if (this.shouldShowValidationMessage) {
      result2.describedBy = this.state.validationMessageGuid;
    }
    return _extends({}, result2, this.props.aria);
  }
  get validationErrors() {
    if (void 0 !== this.__getterCache.validationErrors) {
      return this.__getterCache.validationErrors;
    }
    return this.__getterCache.validationErrors = (() => {
      var {
        validationError,
        validationErrors
      } = this.props;
      var allValidationErrors = validationErrors && [...validationErrors];
      if (!allValidationErrors && validationError) {
        allValidationErrors = [_extends({}, validationError)];
      }
      return allValidationErrors;
    })();
  }
  get validationMessageTarget() {
    var _this$rootElementRef;
    return null === (_this$rootElementRef = this.rootElementRef) || void 0 === _this$rootElementRef ? void 0 : _this$rootElementRef.current;
  }
  get restAttributes() {
    var _this$props$value = _extends({}, this.props, {
      value: void 0 !== this.props.value ? this.props.value : this.state.value
    }), restProps = _objectWithoutPropertiesLoose(_this$props$value, _excluded11);
    return restProps;
  }
  focus() {
    this.widgetRef.current.focus();
  }
  blur() {
    this.widgetRef.current.blur();
  }
  componentWillUpdate(nextProps, nextState, context2) {
    super.componentWillUpdate();
    if (this.props.validationError !== nextProps.validationError || this.props.validationErrors !== nextProps.validationErrors) {
      this.__getterCache.validationErrors = void 0;
    }
  }
  render() {
    var props = this.props;
    return viewFunction8({
      props: _extends({}, props, {
        value: void 0 !== this.props.value ? this.props.value : this.state.value
      }),
      validationMessageGuid: this.state.validationMessageGuid,
      isValidationMessageVisible: this.state.isValidationMessageVisible,
      rootElementRef: this.rootElementRef,
      widgetRef: this.widgetRef,
      onFocusIn: this.onFocusIn,
      cssClasses: this.cssClasses,
      shouldShowValidationMessage: this.shouldShowValidationMessage,
      aria: this.aria,
      validationErrors: this.validationErrors,
      validationMessageTarget: this.validationMessageTarget,
      restAttributes: this.restAttributes
    });
  }
};
Editor3.defaultProps = EditorPropsType;

// node_modules/devextreme/esm/renovation/utils/get_computed_style.js
function getElementComputedStyle2(el) {
  var _window$getComputedSt;
  var window29 = getWindow();
  return el ? null === (_window$getComputedSt = window29.getComputedStyle) || void 0 === _window$getComputedSt ? void 0 : _window$getComputedSt.call(window29, el) : null;
}

// node_modules/devextreme/esm/renovation/ui/editors/check_box/utils.js
var defaultIconSizes = [
  [22, 16],
  [18, 16]
];
var defaultFontSizes = [
  [
    [12, 8],
    [20, 18]
  ],
  [
    [16, 10],
    [16, 14]
  ]
];
function getThemeType() {
  var theme = current();
  return {
    isMaterialTheme: isMaterial(theme),
    isCompactTheme: isCompact(theme)
  };
}
function getDefaultIconSize() {
  var {
    isCompactTheme,
    isMaterialTheme
  } = getThemeType();
  return defaultIconSizes[+isMaterialTheme][+isCompactTheme];
}
function getDefaultFontSize(isChecked) {
  var {
    isCompactTheme,
    isMaterialTheme
  } = getThemeType();
  return defaultFontSizes[+isChecked][+isMaterialTheme][+isCompactTheme];
}
function getFontSizeByIconSize(iconSize, isChecked) {
  var defaultFontSize = getDefaultFontSize(isChecked);
  var defaultIconSize = getDefaultIconSize();
  var fontToIconSizeRatio = defaultFontSize / defaultIconSize;
  return Math.ceil(fontToIconSizeRatio * iconSize);
}

// node_modules/devextreme/esm/renovation/ui/editors/check_box/check_box_icon.js
var _excluded12 = ["isChecked", "size"];
var viewFunction9 = (viewModel) => {
  var {
    cssStyles,
    elementRef
  } = viewModel;
  return createVNode(1, "span", "dx-checkbox-icon", null, 1, {
    style: normalizeStyles(cssStyles)
  }, null, elementRef);
};
var CheckBoxIconProps = {
  isChecked: false
};
var CheckBoxIcon = class extends InfernoComponent {
  constructor(props) {
    super(props);
    this.state = {};
    this.elementRef = createRef();
    this.__getterCache = {};
    this.updateFontSize = this.updateFontSize.bind(this);
    this.setIconFontSize = this.setIconFontSize.bind(this);
    this.getIconSize = this.getIconSize.bind(this);
    this.getComputedIconSize = this.getComputedIconSize.bind(this);
  }
  createEffects() {
    return [new InfernoEffect(this.updateFontSize, [this.props.isChecked, this.props.size])];
  }
  updateEffects() {
    var _this$_effects$;
    null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.props.isChecked, this.props.size]);
  }
  updateFontSize() {
    var {
      isChecked,
      size
    } = this.props;
    if (hasWindow() && size) {
      var newIconSize = this.getIconSize(size);
      var newFontSize = getFontSizeByIconSize(newIconSize, isChecked);
      this.setIconFontSize(newFontSize);
    }
  }
  setIconFontSize(fontSize) {
    var element = this.elementRef.current;
    element.style.fontSize = "".concat(fontSize, "px");
  }
  getIconSize(size) {
    if (isNumeric(size)) {
      return size;
    }
    if (size.endsWith("px")) {
      return parseInt(size, 10);
    }
    return this.getComputedIconSize();
  }
  getComputedIconSize() {
    var element = this.elementRef.current;
    var iconComputedStyle = getElementComputedStyle2(element);
    var computedIconSize = parseInt(null === iconComputedStyle || void 0 === iconComputedStyle ? void 0 : iconComputedStyle.width, 10);
    return computedIconSize;
  }
  get cssStyles() {
    if (void 0 !== this.__getterCache.cssStyles) {
      return this.__getterCache.cssStyles;
    }
    return this.__getterCache.cssStyles = (() => {
      var {
        size
      } = this.props;
      var width = normalizeStyleProp("width", size);
      var height = normalizeStyleProp("height", size);
      return {
        height,
        width
      };
    })();
  }
  get restAttributes() {
    var _this$props = this.props, restProps = _objectWithoutPropertiesLoose(_this$props, _excluded12);
    return restProps;
  }
  componentWillUpdate(nextProps, nextState, context2) {
    super.componentWillUpdate();
    if (this.props.size !== nextProps.size) {
      this.__getterCache.cssStyles = void 0;
    }
  }
  render() {
    var props = this.props;
    return viewFunction9({
      props: _extends({}, props),
      elementRef: this.elementRef,
      setIconFontSize: this.setIconFontSize,
      getIconSize: this.getIconSize,
      getComputedIconSize: this.getComputedIconSize,
      cssStyles: this.cssStyles,
      restAttributes: this.restAttributes
    });
  }
};
CheckBoxIcon.defaultProps = CheckBoxIconProps;

// node_modules/devextreme/esm/renovation/ui/editors/check_box/check_box.js
var _excluded13 = ["accessKey", "activeStateEnabled", "aria", "className", "defaultValue", "disabled", "enableThreeStateBehavior", "focusStateEnabled", "height", "hint", "hoverStateEnabled", "iconSize", "inputAttr", "isDirty", "isValid", "name", "onClick", "onFocusIn", "onKeyDown", "readOnly", "rtlEnabled", "saveValueChangeEvent", "tabIndex", "text", "validationError", "validationErrors", "validationMessageMode", "validationMessagePosition", "validationStatus", "value", "valueChange", "visible", "width"];
var getCssClasses4 = (model) => {
  var {
    text,
    value: value2
  } = model;
  var checked = value2;
  var indeterminate = null === checked;
  var classesMap = {
    "dx-checkbox": true,
    "dx-checkbox-checked": true === checked,
    "dx-checkbox-has-text": !!text,
    "dx-checkbox-indeterminate": indeterminate
  };
  return combineClasses(classesMap);
};
var viewFunction10 = (viewModel) => {
  var {
    aria,
    cssClasses: classes,
    editorRef,
    keyDown: onKeyDown,
    onWidgetClick: onClick,
    props: {
      accessKey,
      activeStateEnabled,
      className,
      disabled,
      focusStateEnabled,
      height,
      hint,
      hoverStateEnabled,
      iconSize,
      isValid,
      name: name2,
      onFocusIn,
      readOnly,
      rtlEnabled,
      tabIndex,
      text,
      validationError,
      validationErrors,
      validationMessageMode,
      validationMessagePosition,
      validationStatus,
      value: value2,
      visible: visible2,
      width
    },
    restAttributes
  } = viewModel;
  return normalizeProps(createComponentVNode(2, Editor3, _extends({
    aria,
    classes,
    onClick,
    onKeyDown,
    accessKey,
    activeStateEnabled,
    focusStateEnabled,
    hoverStateEnabled,
    className,
    disabled,
    readOnly,
    hint,
    height,
    width,
    rtlEnabled,
    tabIndex,
    visible: visible2,
    validationError,
    validationErrors,
    validationMessageMode,
    validationMessagePosition,
    validationStatus,
    isValid,
    onFocusIn
  }, restAttributes, {
    children: createFragment([normalizeProps(createVNode(64, "input", null, null, 1, _extends({
      type: "hidden",
      value: "".concat(value2)
    }, name2 && {
      name: name2
    }))), createVNode(1, "div", "dx-checkbox-container", [createComponentVNode(2, CheckBoxIcon, {
      size: iconSize,
      isChecked: true === value2
    }), text && createVNode(1, "span", "dx-checkbox-text", text, 0)], 0)], 4)
  }), null, editorRef));
};
var CheckBoxProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(EditorProps), Object.getOwnPropertyDescriptors({
  text: "",
  enableThreeStateBehavior: false,
  activeStateEnabled: true,
  hoverStateEnabled: true,
  get focusStateEnabled() {
    return "desktop" === devices_default.real().deviceType && !devices_default.isSimulator();
  },
  defaultValue: false,
  valueChange: () => {
  }
})));
var CheckBoxPropsType = {
  get text() {
    return CheckBoxProps.text;
  },
  get enableThreeStateBehavior() {
    return CheckBoxProps.enableThreeStateBehavior;
  },
  get activeStateEnabled() {
    return CheckBoxProps.activeStateEnabled;
  },
  get hoverStateEnabled() {
    return CheckBoxProps.hoverStateEnabled;
  },
  get focusStateEnabled() {
    return CheckBoxProps.focusStateEnabled;
  },
  get defaultValue() {
    return CheckBoxProps.defaultValue;
  },
  get valueChange() {
    return CheckBoxProps.valueChange;
  },
  get readOnly() {
    return CheckBoxProps.readOnly;
  },
  get name() {
    return CheckBoxProps.name;
  },
  get validationError() {
    return CheckBoxProps.validationError;
  },
  get validationErrors() {
    return CheckBoxProps.validationErrors;
  },
  get validationMessageMode() {
    return CheckBoxProps.validationMessageMode;
  },
  get validationMessagePosition() {
    return CheckBoxProps.validationMessagePosition;
  },
  get validationStatus() {
    return CheckBoxProps.validationStatus;
  },
  get isValid() {
    return CheckBoxProps.isValid;
  },
  get isDirty() {
    return CheckBoxProps.isDirty;
  },
  get inputAttr() {
    return CheckBoxProps.inputAttr;
  },
  get className() {
    return CheckBoxProps.className;
  },
  get disabled() {
    return CheckBoxProps.disabled;
  },
  get tabIndex() {
    return CheckBoxProps.tabIndex;
  },
  get visible() {
    return CheckBoxProps.visible;
  },
  get aria() {
    return WidgetProps.aria;
  }
};
var CheckBox2 = class extends InfernoWrapperComponent {
  constructor(props) {
    super(props);
    this.editorRef = createRef();
    this.state = {
      value: void 0 !== this.props.value ? this.props.value : this.props.defaultValue
    };
    this.focus = this.focus.bind(this);
    this.blur = this.blur.bind(this);
    this.onWidgetClick = this.onWidgetClick.bind(this);
    this.keyDown = this.keyDown.bind(this);
  }
  createEffects() {
    return [createReRenderEffect()];
  }
  onWidgetClick(event) {
    var {
      enableThreeStateBehavior,
      readOnly,
      saveValueChangeEvent
    } = this.props;
    if (!readOnly) {
      null === saveValueChangeEvent || void 0 === saveValueChangeEvent ? void 0 : saveValueChangeEvent(event);
      if (enableThreeStateBehavior) {
        var __newValue;
        this.setState((__state_argument) => {
          __newValue = null === (void 0 !== this.props.value ? this.props.value : __state_argument.value) || (!(void 0 !== this.props.value ? this.props.value : __state_argument.value) ? null : false);
          return {
            value: __newValue
          };
        });
        this.props.valueChange(__newValue);
      } else {
        var _newValue;
        this.setState((__state_argument) => {
          var _ref;
          _newValue = !(null !== (_ref = void 0 !== this.props.value ? this.props.value : __state_argument.value) && void 0 !== _ref ? _ref : false);
          return {
            value: _newValue
          };
        });
        this.props.valueChange(_newValue);
      }
    }
  }
  keyDown(e) {
    var {
      onKeyDown
    } = this.props;
    var {
      keyName,
      originalEvent,
      which
    } = e;
    var result2 = null === onKeyDown || void 0 === onKeyDown ? void 0 : onKeyDown(e);
    if (null !== result2 && void 0 !== result2 && result2.cancel) {
      return result2;
    }
    if ("space" === keyName || "space" === which) {
      originalEvent.preventDefault();
      this.onWidgetClick(originalEvent);
    }
    return;
  }
  get cssClasses() {
    return getCssClasses4(_extends({}, this.props, {
      value: void 0 !== this.props.value ? this.props.value : this.state.value
    }));
  }
  get aria() {
    var checked = true === (void 0 !== this.props.value ? this.props.value : this.state.value);
    var indeterminate = null === (void 0 !== this.props.value ? this.props.value : this.state.value);
    var result2 = {
      role: "checkbox",
      checked: indeterminate ? "mixed" : "".concat(checked)
    };
    return _extends({}, result2, this.props.aria);
  }
  get restAttributes() {
    var _this$props$value = _extends({}, this.props, {
      value: void 0 !== this.props.value ? this.props.value : this.state.value
    }), restProps = _objectWithoutPropertiesLoose(_this$props$value, _excluded13);
    return restProps;
  }
  focus() {
    this.editorRef.current.focus();
  }
  blur() {
    this.editorRef.current.blur();
  }
  render() {
    var props = this.props;
    return viewFunction10({
      props: _extends({}, props, {
        value: void 0 !== this.props.value ? this.props.value : this.state.value
      }),
      editorRef: this.editorRef,
      onWidgetClick: this.onWidgetClick,
      keyDown: this.keyDown,
      cssClasses: this.cssClasses,
      aria: this.aria,
      restAttributes: this.restAttributes
    });
  }
};
function __processTwoWayProps(defaultProps) {
  var twoWayProps = ["value"];
  return Object.keys(defaultProps).reduce((props, propName) => {
    var propValue = defaultProps[propName];
    var defaultPropName = twoWayProps.some((p2) => p2 === propName) ? "default" + propName.charAt(0).toUpperCase() + propName.slice(1) : propName;
    props[defaultPropName] = propValue;
    return props;
  }, {});
}
CheckBox2.defaultProps = CheckBoxPropsType;
var __defaultOptionRules2 = [];
function defaultOptions2(rule) {
  __defaultOptionRules2.push(rule);
  CheckBox2.defaultProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(CheckBox2.defaultProps), Object.getOwnPropertyDescriptors(__processTwoWayProps(convertRulesToOptions(__defaultOptionRules2)))));
}

// node_modules/devextreme/esm/renovation/ui/editors/check_box/check_box.j.js
var CheckBox3 = class extends CheckBox {
  getProps() {
    var props = super.getProps();
    props.onKeyDown = this._wrapKeyDownHandler(props.onKeyDown);
    return props;
  }
  focus() {
    var _this$viewRef;
    return null === (_this$viewRef = this.viewRef) || void 0 === _this$viewRef ? void 0 : _this$viewRef.focus(...arguments);
  }
  blur() {
    var _this$viewRef2;
    return null === (_this$viewRef2 = this.viewRef) || void 0 === _this$viewRef2 ? void 0 : _this$viewRef2.blur(...arguments);
  }
  _getActionConfigs() {
    return {
      onFocusIn: {},
      onClick: {}
    };
  }
  get _propsInfo() {
    return {
      twoWay: [
        ["value", "defaultValue", "valueChange"]
      ],
      allowNull: ["defaultValue", "validationError", "validationErrors", "value"],
      elements: [],
      templates: [],
      props: ["text", "iconSize", "enableThreeStateBehavior", "activeStateEnabled", "hoverStateEnabled", "focusStateEnabled", "saveValueChangeEvent", "defaultValue", "valueChange", "readOnly", "name", "validationError", "validationErrors", "validationMessageMode", "validationMessagePosition", "validationStatus", "isValid", "isDirty", "inputAttr", "onFocusIn", "className", "accessKey", "disabled", "height", "hint", "onClick", "onKeyDown", "rtlEnabled", "tabIndex", "visible", "width", "aria", "value"]
    };
  }
  get _viewComponent() {
    return CheckBox2;
  }
};
component_registrator_default("dxCheckBox", CheckBox3);
CheckBox3.defaultOptions = defaultOptions2;

// node_modules/devextreme/esm/ui/check_box.js
var check_box_default = CheckBox3;

// node_modules/devextreme/esm/ui/tree_view/ui.tree_view.base.js
var WIDGET_CLASS = "dx-treeview";
var NODE_CLASS = "".concat(WIDGET_CLASS, "-node");
var NODE_CONTAINER_CLASS = "".concat(NODE_CLASS, "-container");
var NODE_LOAD_INDICATOR_CLASS = "".concat(NODE_CLASS, "-loadindicator");
var OPENED_NODE_CONTAINER_CLASS = "".concat(NODE_CLASS, "-container-opened");
var IS_LEAF = "".concat(NODE_CLASS, "-is-leaf");
var ITEM_CLASS3 = "".concat(WIDGET_CLASS, "-item");
var ITEM_WITH_CHECKBOX_CLASS = "".concat(ITEM_CLASS3, "-with-checkbox");
var ITEM_WITH_CUSTOM_EXPANDER_ICON_CLASS = "".concat(ITEM_CLASS3, "-with-custom-expander-icon");
var CUSTOM_EXPANDER_ICON_ITEM_CONTAINER_CLASS = "".concat(WIDGET_CLASS, "-custom-expander-icon-item-container");
var ITEM_WITHOUT_CHECKBOX_CLASS = "".concat(ITEM_CLASS3, "-without-checkbox");
var ITEM_DATA_KEY2 = "".concat(ITEM_CLASS3, "-data");
var TOGGLE_ITEM_VISIBILITY_CLASS = "".concat(WIDGET_CLASS, "-toggle-item-visibility");
var CUSTOM_COLLAPSE_ICON_CLASS = "".concat(WIDGET_CLASS, "-custom-collapse-icon");
var CUSTOM_EXPAND_ICON_CLASS = "".concat(WIDGET_CLASS, "-custom-expand-icon");
var LOAD_INDICATOR_CLASS = "".concat(WIDGET_CLASS, "-loadindicator");
var LOAD_INDICATOR_WRAPPER_CLASS = "".concat(WIDGET_CLASS, "-loadindicator-wrapper");
var TOGGLE_ITEM_VISIBILITY_OPENED_CLASS = "".concat(WIDGET_CLASS, "-toggle-item-visibility-opened");
var SELECT_ALL_ITEM_CLASS = "".concat(WIDGET_CLASS, "-select-all-item");
var INVISIBLE_STATE_CLASS4 = "dx-state-invisible";
var DISABLED_STATE_CLASS4 = "dx-state-disabled";
var SELECTED_ITEM_CLASS2 = "dx-state-selected";
var EXPAND_EVENT_NAMESPACE = "dxTreeView_expand";
var DATA_ITEM_ID = "data-item-id";
var ITEM_URL_CLASS3 = "dx-item-url";
var CHECK_BOX_CLASS = "dx-checkbox";
var CHECK_BOX_ICON_CLASS = "dx-checkbox-icon";
var ROOT_NODE_CLASS = "".concat(WIDGET_CLASS, "-root-node");
var EXPANDER_ICON_STUB_CLASS = "".concat(WIDGET_CLASS, "-expander-icon-stub");
var TreeViewBase = ui_hierarchical_collection_widget_default.inherit({
  _supportedKeys: function(e) {
    var click2 = (e2) => {
      var $itemElement = renderer_default(this.option("focusedElement"));
      if (!$itemElement.length) {
        return;
      }
      e2.target = $itemElement;
      e2.currentTarget = $itemElement;
      this._itemClickHandler(e2, $itemElement.children("." + ITEM_CLASS3));
      var expandEventName = this._getEventNameByOption(this.option("expandEvent"));
      var expandByClick = expandEventName === addNamespace2(CLICK_EVENT_NAME, EXPAND_EVENT_NAMESPACE);
      if (expandByClick) {
        this._expandEventHandler(e2);
      }
    };
    var select = (e2) => {
      e2.preventDefault();
      var $focusedElement = renderer_default(this.option("focusedElement"));
      var checkboxInstance = this._getCheckBoxInstance($focusedElement);
      if (!checkboxInstance.option("disabled")) {
        var currentState = checkboxInstance.option("value");
        this._updateItemSelection(!currentState, $focusedElement.find("." + ITEM_CLASS3).get(0), true);
      }
    };
    var toggleExpandedNestedItems = function(state, e2) {
      if (!this.option("expandAllEnabled")) {
        return;
      }
      e2.preventDefault();
      var $rootElement = renderer_default(this.option("focusedElement"));
      if (!$rootElement.length) {
        return;
      }
      var rootItem = this._getItemData($rootElement.find(".".concat(ITEM_CLASS3)));
      this._toggleExpandedNestedItems([rootItem], state);
    };
    return extend(this.callBase(), {
      enter: this._showCheckboxes() ? select : click2,
      space: this._showCheckboxes() ? select : click2,
      asterisk: toggleExpandedNestedItems.bind(this, true),
      minus: toggleExpandedNestedItems.bind(this, false)
    });
  },
  _toggleExpandedNestedItems: function(items, state) {
    if (!items) {
      return;
    }
    for (var i = 0, len = items.length; i < len; i++) {
      var item = items[i];
      var node = this._dataAdapter.getNodeByItem(item);
      this._toggleExpandedState(node, state);
      this._toggleExpandedNestedItems(item.items, state);
    }
  },
  _getNodeElement: function(node, cache) {
    var key = this._encodeString(node.internalFields.key);
    if (cache) {
      if (!cache.$nodeByKey) {
        cache.$nodeByKey = {};
        this.$element().find(".".concat(NODE_CLASS)).each(function() {
          var $node = renderer_default(this);
          var key2 = $node.attr(DATA_ITEM_ID);
          cache.$nodeByKey[key2] = $node;
        });
      }
      return cache.$nodeByKey[key] || renderer_default();
    }
    var element = this.$element().get(0).querySelector("[".concat(DATA_ITEM_ID, '="').concat(key, '"]'));
    return renderer_default(element);
  },
  _activeStateUnit: "." + ITEM_CLASS3,
  _widgetClass: function() {
    return WIDGET_CLASS;
  },
  _getDefaultOptions: function() {
    var defaultOptions3 = extend(this.callBase(), {
      animationEnabled: true,
      dataStructure: "tree",
      deferRendering: true,
      expandAllEnabled: false,
      hasItemsExpr: "hasItems",
      selectNodesRecursive: true,
      expandNodesRecursive: true,
      showCheckBoxesMode: "none",
      expandIcon: null,
      collapseIcon: null,
      selectAllText: message_default.format("dxList-selectAll"),
      onItemSelectionChanged: null,
      onItemExpanded: null,
      onItemCollapsed: null,
      scrollDirection: "vertical",
      useNativeScrolling: true,
      virtualModeEnabled: false,
      rootValue: 0,
      focusStateEnabled: false,
      selectionMode: "multiple",
      expandEvent: "dblclick",
      selectByClick: false,
      createChildren: null,
      onSelectAllValueChanged: null
    });
    return extend(true, defaultOptions3, {
      integrationOptions: {
        useDeferUpdateForTemplates: false
      }
    });
  },
  _defaultOptionsRules: function() {
    return this.callBase().concat([{
      device: function() {
        return !nativeScrolling;
      },
      options: {
        useNativeScrolling: false
      }
    }]);
  },
  _initSelectedItems: noop2,
  _syncSelectionOptions: asyncNoop,
  _fireSelectionChanged: function() {
    var selectionChangePromise = this._selectionChangePromise;
    when(selectionChangePromise).done((function() {
      this._createActionByOption("onSelectionChanged", {
        excludeValidators: ["disabled", "readOnly"]
      })();
    }).bind(this));
  },
  _createSelectAllValueChangedAction: function() {
    this._selectAllValueChangedAction = this._createActionByOption("onSelectAllValueChanged", {
      excludeValidators: ["disabled", "readOnly"]
    });
  },
  _fireSelectAllValueChanged: function(value2) {
    this._selectAllValueChangedAction({
      value: value2
    });
  },
  _checkBoxModeChange: function(value2, previousValue) {
    var searchEnabled = this.option("searchEnabled");
    var previousSelectAllEnabled = this._selectAllEnabled(previousValue);
    var previousItemsContainer = this._itemContainer(searchEnabled, previousSelectAllEnabled);
    this._detachClickEvent(previousItemsContainer);
    this._detachExpandEvent(previousItemsContainer);
    if ("none" === previousValue || "none" === value2) {
      return;
    }
    var selectAllExists = this._$selectAllItem && this._$selectAllItem.length;
    switch (value2) {
      case "selectAll":
        if (!selectAllExists) {
          this._createSelectAllValueChangedAction();
          this._renderSelectAllItem();
        }
        break;
      case "normal":
        if (selectAllExists) {
          this._$selectAllItem.remove();
          delete this._$selectAllItem;
        }
    }
  },
  _removeSelection: function() {
    var that = this;
    each(this._dataAdapter.getFullData(), function(_, node) {
      if (!that._hasChildren(node)) {
        return;
      }
      that._dataAdapter.toggleSelection(node.internalFields.key, false, true);
    });
  },
  _optionChanged: function(args) {
    var {
      name: name2,
      value: value2,
      previousValue
    } = args;
    switch (name2) {
      case "selectAllText":
        if (this._$selectAllItem) {
          this._$selectAllItem.dxCheckBox("instance").option("text", value2);
        }
        break;
      case "showCheckBoxesMode":
        this._checkBoxModeChange(value2, previousValue);
        this._invalidate();
        break;
      case "scrollDirection":
        this.getScrollable().option("direction", value2);
        break;
      case "useNativeScrolling":
        this.getScrollable().option("useNative", value2);
        break;
      case "items":
        delete this._$selectAllItem;
        this.callBase(args);
        break;
      case "dataSource":
        this.callBase(args);
        this._initDataAdapter();
        this._filter = {};
        break;
      case "hasItemsExpr":
        this._initAccessors();
        this.repaint();
        break;
      case "expandEvent":
        this._attachExpandEvent();
        break;
      case "deferRendering":
      case "dataStructure":
      case "rootValue":
      case "createChildren":
      case "expandNodesRecursive":
      case "onItemSelectionChanged":
      case "onItemExpanded":
      case "onItemCollapsed":
      case "expandAllEnabled":
      case "animationEnabled":
      case "virtualModeEnabled":
      case "selectByClick":
        break;
      case "selectionMode":
        this._initDataAdapter();
        this.callBase(args);
        break;
      case "onSelectAllValueChanged":
        this._createSelectAllValueChangedAction();
        break;
      case "selectNodesRecursive":
        this._dataAdapter.setOption("recursiveSelection", args.value);
        this.repaint();
        break;
      case "expandIcon":
      case "collapseIcon":
        this.repaint();
        break;
      default:
        this.callBase(args);
    }
  },
  _initDataSource: function() {
    if (this._useCustomChildrenLoader()) {
      this._loadChildrenByCustomLoader(null).done((function(newItems) {
        if (newItems && newItems.length) {
          this.option("items", newItems);
        }
      }).bind(this));
    } else {
      this.callBase();
      this._isVirtualMode() && this._initVirtualMode();
    }
  },
  _initVirtualMode: function() {
    var filter = this._filter;
    if (!filter.custom) {
      filter.custom = this._dataSource.filter();
    }
    if (!filter.internal) {
      filter.internal = [this.option("parentIdExpr"), this.option("rootValue")];
    }
  },
  _useCustomChildrenLoader: function() {
    return isFunction(this.option("createChildren")) && this._isDataStructurePlain();
  },
  _loadChildrenByCustomLoader: function(parentNode) {
    var invocationResult = this.option("createChildren").call(this, parentNode);
    if (Array.isArray(invocationResult)) {
      return new Deferred().resolve(invocationResult).promise();
    }
    if (invocationResult && isFunction(invocationResult.then)) {
      return fromPromise(invocationResult);
    }
    return new Deferred().resolve([]).promise();
  },
  _combineFilter: function() {
    if (!this._filter.custom || !this._filter.custom.length) {
      return this._filter.internal;
    }
    return [this._filter.custom, this._filter.internal];
  },
  _dataSourceLoadErrorHandler: function() {
    this._renderEmptyMessage();
  },
  _init: function() {
    this._filter = {};
    this.callBase();
    this._initStoreChangeHandlers();
  },
  _dataSourceChangedHandler: function(newItems) {
    var items = this.option("items");
    if (this._initialized && this._isVirtualMode() && items.length) {
      return;
    }
    this.option("items", newItems);
  },
  _removeTreeViewLoadIndicator: function() {
    if (!this._treeViewLoadIndicator) {
      return;
    }
    this._treeViewLoadIndicator.remove();
    this._treeViewLoadIndicator = null;
  },
  _createTreeViewLoadIndicator: function() {
    this._treeViewLoadIndicator = renderer_default("<div>").addClass(LOAD_INDICATOR_CLASS);
    this._createComponent(this._treeViewLoadIndicator, load_indicator_default, {});
    return this._treeViewLoadIndicator;
  },
  _dataSourceLoadingChangedHandler: function(isLoading) {
    var resultFilter;
    if (this._isVirtualMode()) {
      resultFilter = this._combineFilter();
      this._dataSource.filter(resultFilter);
    }
    if (isLoading && !this._dataSource.isLoaded()) {
      this.option("items", []);
      var $wrapper = renderer_default("<div>").addClass(LOAD_INDICATOR_WRAPPER_CLASS);
      this._createTreeViewLoadIndicator().appendTo($wrapper);
      this.itemsContainer().append($wrapper);
      if (this._isVirtualMode() && this._dataSource.filter() !== resultFilter) {
        this._dataSource.filter([]);
      }
    } else {
      this._removeTreeViewLoadIndicator();
    }
  },
  _initStoreChangeHandlers: function() {
    if ("plain" !== this.option("dataStructure")) {
      return;
    }
    this._dataSource && this._dataSource.store().on("inserted", (newItem) => {
      this.option().items = this.option("items").concat(newItem);
      this._dataAdapter.addItem(newItem);
      if (!this._dataAdapter.isFiltered(newItem)) {
        return;
      }
      this._updateLevel(this._parentIdGetter(newItem));
    }).on("removed", (removedKey) => {
      var node = this._dataAdapter.getNodeByKey(removedKey);
      if (isDefined(node)) {
        this.option("items")[this._dataAdapter.getIndexByKey(node.internalFields.key)] = 0;
        this._markChildrenItemsToRemove(node);
        this._removeItems();
        this._dataAdapter.removeItem(removedKey);
        this._updateLevel(this._parentIdGetter(node));
      }
    });
  },
  _markChildrenItemsToRemove: function(node) {
    var keys = node.internalFields.childrenKeys;
    each(keys, (_, key) => {
      this.option("items")[this._dataAdapter.getIndexByKey(key)] = 0;
      this._markChildrenItemsToRemove(this._dataAdapter.getNodeByKey(key));
    });
  },
  _removeItems: function() {
    var items = extend(true, [], this.option("items"));
    var counter = 0;
    each(items, (index2, item) => {
      if (!item) {
        this.option("items").splice(index2 - counter, 1);
        counter++;
      }
    });
  },
  _updateLevel: function(parentId) {
    var $container = this._getContainerByParentKey(parentId);
    this._renderItems($container, this._dataAdapter.getChildrenNodes(parentId));
  },
  _getOldContainer: function($itemElement) {
    if ($itemElement.length) {
      return $itemElement.children(".".concat(NODE_CONTAINER_CLASS));
    }
    var scrollable = this.getScrollable();
    if (scrollable) {
      return renderer_default(scrollable.content()).children();
    }
    return renderer_default();
  },
  _getContainerByParentKey: function(parentId) {
    var node = this._dataAdapter.getNodeByKey(parentId);
    var $itemElement = node ? this._getNodeElement(node) : [];
    this._getOldContainer($itemElement).remove();
    var $container = this._renderNodeContainer($itemElement);
    if (this._isRootLevel(parentId)) {
      var scrollable = this.getScrollable();
      if (!scrollable) {
        this._renderScrollableContainer();
      }
      renderer_default(scrollable.content()).append($container);
    }
    return $container;
  },
  _isRootLevel: function(parentId) {
    return parentId === this.option("rootValue");
  },
  _getAccessors: function() {
    var accessors = this.callBase();
    accessors.push("hasItems");
    return accessors;
  },
  _getDataAdapterOptions: function() {
    var _this$_dataSource, _this$_dataSource$loa, _this$_dataSource$loa2;
    return {
      rootValue: this.option("rootValue"),
      multipleSelection: !this._isSingleSelection(),
      recursiveSelection: this._isRecursiveSelection(),
      recursiveExpansion: this.option("expandNodesRecursive"),
      selectionRequired: this.option("selectionRequired"),
      dataType: this.option("dataStructure"),
      sort: this._dataSource && this._dataSource.sort(),
      langParams: null === (_this$_dataSource = this._dataSource) || void 0 === _this$_dataSource ? void 0 : null === (_this$_dataSource$loa = _this$_dataSource.loadOptions) || void 0 === _this$_dataSource$loa ? void 0 : null === (_this$_dataSource$loa2 = _this$_dataSource$loa.call(_this$_dataSource)) || void 0 === _this$_dataSource$loa2 ? void 0 : _this$_dataSource$loa2.langParams
    };
  },
  _initMarkup() {
    this._renderScrollableContainer();
    this._renderEmptyMessage(this._dataAdapter.getRootNodes());
    this.callBase();
    this._setAriaRole();
  },
  _setAriaRole() {
    var {
      items
    } = this.option();
    if (null !== items && void 0 !== items && items.length) {
      this.setAria({
        role: "tree"
      });
    }
  },
  _renderContentImpl: function() {
    var $nodeContainer = this._renderNodeContainer();
    renderer_default(this.getScrollable().content()).append($nodeContainer);
    if (!this.option("items") || !this.option("items").length) {
      return;
    }
    this._renderItems($nodeContainer, this._dataAdapter.getRootNodes());
    this._attachExpandEvent();
    if (this._selectAllEnabled()) {
      this._createSelectAllValueChangedAction();
      this._renderSelectAllItem($nodeContainer);
    }
  },
  _isVirtualMode: function() {
    return this.option("virtualModeEnabled") && this._isDataStructurePlain() && !!this.option("dataSource");
  },
  _isDataStructurePlain: function() {
    return "plain" === this.option("dataStructure");
  },
  _fireContentReadyAction: function() {
    var dataSource = this.getDataSource();
    var skipContentReadyAction = dataSource && !dataSource.isLoaded() || this._skipContentReadyAndItemExpanded;
    var scrollable = this.getScrollable();
    if (scrollable && hasWindow()) {
      scrollable.update();
    }
    if (!skipContentReadyAction) {
      this.callBase();
    }
    if (scrollable && hasWindow()) {
      scrollable.update();
    }
  },
  _renderScrollableContainer: function() {
    this._scrollable = this._createComponent(renderer_default("<div>").appendTo(this.$element()), ui_scrollable_default, {
      useNative: this.option("useNativeScrolling"),
      direction: this.option("scrollDirection"),
      useKeyboard: false
    });
  },
  _renderNodeContainer: function($parent) {
    var $container = renderer_default("<ul>").addClass(NODE_CONTAINER_CLASS);
    this.setAria("role", "group", $container);
    if ($parent && $parent.length) {
      var itemData = this._getItemData($parent.children("." + ITEM_CLASS3));
      if (this._expandedGetter(itemData)) {
        $container.addClass(OPENED_NODE_CONTAINER_CLASS);
      }
      $container.appendTo($parent);
    }
    return $container;
  },
  _createDOMElement: function($nodeContainer, node) {
    var _node$internalFields, _node$internalFields$;
    var $node = renderer_default("<li>").addClass(NODE_CLASS).attr(DATA_ITEM_ID, this._encodeString(node.internalFields.key)).prependTo($nodeContainer);
    var attrs = {
      role: "treeitem",
      label: this._displayGetter(node.internalFields.item) || "",
      level: this._getLevel($nodeContainer)
    };
    var hasChildNodes = !!(null !== node && void 0 !== node && null !== (_node$internalFields = node.internalFields) && void 0 !== _node$internalFields && null !== (_node$internalFields$ = _node$internalFields.childrenKeys) && void 0 !== _node$internalFields$ && _node$internalFields$.length);
    if (hasChildNodes) {
      attrs.expanded = node.internalFields.expanded || false;
    }
    this.setAria(attrs, $node);
    return $node;
  },
  _getLevel: function($nodeContainer) {
    var parent = $nodeContainer.parent();
    return parent.hasClass("dx-scrollable-content") ? 1 : parseInt(parent.attr("aria-level")) + 1;
  },
  _showCheckboxes: function() {
    return "none" !== this.option("showCheckBoxesMode");
  },
  _hasCustomExpanderIcons: function() {
    return this.option("expandIcon") || this.option("collapseIcon");
  },
  _selectAllEnabled: function(showCheckBoxesMode) {
    var mode = null !== showCheckBoxesMode && void 0 !== showCheckBoxesMode ? showCheckBoxesMode : this.option("showCheckBoxesMode");
    return "selectAll" === mode && !this._isSingleSelection();
  },
  _renderItems: function($nodeContainer, nodes) {
    var length = nodes.length - 1;
    for (var i = length; i >= 0; i--) {
      this._renderItem(i, nodes[i], $nodeContainer);
    }
    this._renderedItemsCount += nodes.length;
  },
  _renderItem: function(nodeIndex, node, $nodeContainer) {
    var $node = this._createDOMElement($nodeContainer, node);
    var nodeData = node.internalFields;
    var showCheckBox = this._showCheckboxes();
    $node.addClass(showCheckBox ? ITEM_WITH_CHECKBOX_CLASS : ITEM_WITHOUT_CHECKBOX_CLASS);
    $node.toggleClass(INVISIBLE_STATE_CLASS4, false === nodeData.item.visible);
    if (this._hasCustomExpanderIcons()) {
      $node.addClass(ITEM_WITH_CUSTOM_EXPANDER_ICON_CLASS);
      $nodeContainer.addClass(CUSTOM_EXPANDER_ICON_ITEM_CONTAINER_CLASS);
    }
    this.setAria("selected", nodeData.selected, $node);
    this._toggleSelectedClass($node, nodeData.selected);
    if (nodeData.disabled) {
      this.setAria("disabled", nodeData.disabled, $node);
    }
    this.callBase(this._renderedItemsCount + nodeIndex, nodeData.item, $node);
    var parent = this._getNode(node.internalFields.parentKey);
    if (!parent) {
      $node.addClass(ROOT_NODE_CLASS);
    }
    if (false !== nodeData.item.visible) {
      this._renderChildren($node, node);
    }
  },
  _setAriaSelectionAttribute: noop2,
  _renderChildren: function($node, node) {
    if (!this._hasChildren(node)) {
      this._addLeafClass($node);
      renderer_default("<div>").addClass(EXPANDER_ICON_STUB_CLASS).appendTo(this._getItem($node));
      return;
    }
    if (this._hasCustomExpanderIcons()) {
      this._renderCustomExpanderIcons($node, node);
    } else {
      this._renderDefaultExpanderIcons($node, node);
    }
    if (this._shouldRenderSublevel(node.internalFields.expanded)) {
      this._loadSublevel(node).done((childNodes) => {
        this._renderSublevel($node, this._getActualNode(node), childNodes);
      });
    }
  },
  _shouldRenderSublevel: function(expanded) {
    return expanded || !this.option("deferRendering");
  },
  _getActualNode: function(cachedNode) {
    return this._dataAdapter.getNodeByKey(cachedNode.internalFields.key);
  },
  _hasChildren: function(node) {
    if (this._isVirtualMode() || this._useCustomChildrenLoader()) {
      return false !== this._hasItemsGetter(node.internalFields.item);
    }
    return this.callBase(node);
  },
  _loadSublevel: function(node) {
    var deferred = new Deferred();
    var childrenNodes = this._getChildNodes(node);
    if (childrenNodes.length) {
      deferred.resolve(childrenNodes);
    } else {
      this._loadNestedItems(node).done((items) => {
        deferred.resolve(this._dataAdapter.getNodesByItems(items));
      });
    }
    return deferred.promise();
  },
  _getItemExtraPropNames: () => ["url", "linkAttr"],
  _addContent: function($container, itemData) {
    var {
      html,
      url
    } = itemData;
    if (url) {
      $container.html(html);
      var link = this._getLinkContainer(this._getIconContainer(itemData), this._getTextContainer(itemData), itemData);
      $container.append(link);
    } else {
      this.callBase($container, itemData);
    }
  },
  _postprocessRenderItem(args) {
    var {
      itemData,
      itemElement
    } = args;
    if (this._showCheckboxes()) {
      this._renderCheckBox(itemElement, this._getNode(itemData));
    }
    this.callBase(args);
  },
  _renderSublevel: function($node, node, childNodes) {
    var $nestedNodeContainer = this._renderNodeContainer($node, node);
    var childNodesByChildrenKeys = childNodes.filter((childNode) => -1 !== node.internalFields.childrenKeys.indexOf(childNode.internalFields.key));
    this._renderItems($nestedNodeContainer, childNodesByChildrenKeys);
    if (childNodesByChildrenKeys.length && !node.internalFields.selected) {
      var firstChild = childNodesByChildrenKeys[0];
      this._updateParentsState(firstChild, this._getNodeElement(firstChild));
    }
    this._normalizeIconState($node, childNodesByChildrenKeys.length);
    if (node.internalFields.expanded) {
      $nestedNodeContainer.addClass(OPENED_NODE_CONTAINER_CLASS);
    }
  },
  _executeItemRenderAction: function(itemIndex, itemData, itemElement) {
    var node = this._getNode(itemElement);
    this._getItemRenderAction()({
      itemElement,
      itemIndex,
      itemData,
      node: this._dataAdapter.getPublicNode(node)
    });
  },
  _addLeafClass: function($node) {
    $node.addClass(IS_LEAF);
  },
  _expandEventHandler: function(e) {
    var $nodeElement = renderer_default(e.currentTarget.parentNode);
    if (!$nodeElement.hasClass(IS_LEAF)) {
      this._toggleExpandedState(e.currentTarget, void 0, e);
    }
  },
  _attachExpandEvent: function() {
    var expandedEventName = this._getEventNameByOption(this.option("expandEvent"));
    var $itemsContainer = this._itemContainer();
    this._detachExpandEvent($itemsContainer);
    events_engine_default.on($itemsContainer, expandedEventName, this._itemSelector(), this._expandEventHandler.bind(this));
  },
  _detachExpandEvent(itemsContainer) {
    events_engine_default.off(itemsContainer, ".".concat(EXPAND_EVENT_NAMESPACE), this._itemSelector());
  },
  _getEventNameByOption: function(name2) {
    var event = "click" === name2 ? CLICK_EVENT_NAME : DBLCLICK_EVENT_NAME;
    return addNamespace2(event, EXPAND_EVENT_NAMESPACE);
  },
  _getNode: function(identifier) {
    if (!isDefined(identifier)) {
      return null;
    }
    if (identifier.internalFields) {
      return identifier;
    }
    if (isPrimitive(identifier)) {
      return this._dataAdapter.getNodeByKey(identifier);
    }
    var itemElement = renderer_default(identifier).get(0);
    if (!itemElement) {
      return null;
    }
    if (dom_adapter_default.isElementNode(itemElement)) {
      return this._getNodeByElement(itemElement);
    }
    return this._dataAdapter.getNodeByItem(itemElement);
  },
  _getNodeByElement: function(itemElement) {
    var $node = renderer_default(itemElement).closest("." + NODE_CLASS);
    var key = this._decodeString($node.attr(DATA_ITEM_ID));
    return this._dataAdapter.getNodeByKey(key);
  },
  _toggleExpandedState: function(itemElement, state, e) {
    var node = this._getNode(itemElement);
    if (!node) {
      return new Deferred().reject().promise();
    }
    if (node.internalFields.disabled) {
      return new Deferred().reject().promise();
    }
    var currentState = node.internalFields.expanded;
    if (currentState === state) {
      return new Deferred().resolve().promise();
    }
    if (this._hasChildren(node)) {
      var $node = this._getNodeElement(node);
      if ($node.find(".".concat(NODE_LOAD_INDICATOR_CLASS, ":not(.").concat(INVISIBLE_STATE_CLASS4, ")")).length) {
        return new Deferred().reject().promise();
      }
      if (!currentState && !this._nodeHasRenderedChildren($node)) {
        this._createLoadIndicator($node);
      }
    }
    if (!isDefined(state)) {
      state = !currentState;
    }
    this._dataAdapter.toggleExpansion(node.internalFields.key, state);
    return this._updateExpandedItemsUI(node, state, e);
  },
  _nodeHasRenderedChildren($node) {
    var $nodeContainer = $node.children(".".concat(NODE_CONTAINER_CLASS));
    return $nodeContainer.not(":empty").length;
  },
  _getItem: function($node) {
    return $node.children(".".concat(ITEM_CLASS3)).eq(0);
  },
  _createLoadIndicator: function($node) {
    var $treeviewItem = this._getItem($node);
    this._createComponent(renderer_default("<div>").addClass(NODE_LOAD_INDICATOR_CLASS), load_indicator_default, {}).$element().appendTo($treeviewItem);
    var $icon = $treeviewItem.children(".".concat(TOGGLE_ITEM_VISIBILITY_CLASS, ",.").concat(CUSTOM_EXPAND_ICON_CLASS));
    $icon.hide();
  },
  _renderExpanderIcon: function($node, node, $icon, iconClass) {
    $icon.appendTo(this._getItem($node));
    $icon.addClass(iconClass);
    if (node.internalFields.disabled) {
      $icon.addClass(DISABLED_STATE_CLASS4);
    }
    this._renderToggleItemVisibilityIconClick($icon, node);
  },
  _renderDefaultExpanderIcons: function($node, node) {
    var $treeViewItem = this._getItem($node);
    var $icon = renderer_default("<div>").addClass(TOGGLE_ITEM_VISIBILITY_CLASS).appendTo($treeViewItem);
    if (node.internalFields.expanded) {
      $icon.addClass(TOGGLE_ITEM_VISIBILITY_OPENED_CLASS);
      $node.parent().addClass(OPENED_NODE_CONTAINER_CLASS);
    }
    if (node.internalFields.disabled) {
      $icon.addClass(DISABLED_STATE_CLASS4);
    }
    this._renderToggleItemVisibilityIconClick($icon, node);
  },
  _renderCustomExpanderIcons: function($node, node) {
    var {
      expandIcon,
      collapseIcon
    } = this.option();
    var $expandIcon = getImageContainer(null !== expandIcon && void 0 !== expandIcon ? expandIcon : collapseIcon);
    var $collapseIcon = getImageContainer(null !== collapseIcon && void 0 !== collapseIcon ? collapseIcon : expandIcon);
    this._renderExpanderIcon($node, node, $expandIcon, CUSTOM_EXPAND_ICON_CLASS);
    this._renderExpanderIcon($node, node, $collapseIcon, CUSTOM_COLLAPSE_ICON_CLASS);
    var isNodeExpanded = node.internalFields.expanded;
    if (isNodeExpanded) {
      $node.parent().addClass(OPENED_NODE_CONTAINER_CLASS);
    }
    this._toggleCustomExpanderIcons($expandIcon, $collapseIcon, isNodeExpanded);
  },
  _renderToggleItemVisibilityIconClick: function($icon, node) {
    var eventName = addNamespace2(CLICK_EVENT_NAME, this.NAME);
    events_engine_default.off($icon, eventName);
    events_engine_default.on($icon, eventName, (e) => {
      this._toggleExpandedState(node.internalFields.key, void 0, e);
      return false;
    });
  },
  _toggleCustomExpanderIcons: function($expandIcon, $collapseIcon, isNodeExpanded) {
    $collapseIcon.toggle(isNodeExpanded);
    $expandIcon.toggle(!isNodeExpanded);
  },
  _updateExpandedItemsUI: function(node, state, e) {
    var $node = this._getNodeElement(node);
    var isHiddenNode = !$node.length || state && $node.is(":hidden");
    if (this.option("expandNodesRecursive") && isHiddenNode) {
      var parentNode = this._getNode(node.internalFields.parentKey);
      if (parentNode) {
        this._updateExpandedItemsUI(parentNode, state, e);
      }
    }
    if (!this._hasCustomExpanderIcons()) {
      var $icon = this._getItem($node).children(".".concat(TOGGLE_ITEM_VISIBILITY_CLASS));
      $icon.toggleClass(TOGGLE_ITEM_VISIBILITY_OPENED_CLASS, state);
    } else if (this._nodeHasRenderedChildren($node)) {
      var $item = this._getItem($node);
      var $childExpandIcons = $item.children(".".concat(CUSTOM_EXPAND_ICON_CLASS));
      var $childCollapseIcons = $item.children(".".concat(CUSTOM_COLLAPSE_ICON_CLASS));
      this._toggleCustomExpanderIcons($childExpandIcons, $childCollapseIcons, state);
    }
    var $nodeContainer = $node.children(".".concat(NODE_CONTAINER_CLASS));
    var nodeContainerExists = $nodeContainer.length > 0;
    var completionCallback = new Deferred();
    if (!state || nodeContainerExists && !$nodeContainer.is(":empty")) {
      this._animateNodeContainer(node, state, e, completionCallback);
      return completionCallback.promise();
    }
    if (0 === node.internalFields.childrenKeys.length && (this._isVirtualMode() || this._useCustomChildrenLoader())) {
      this._loadNestedItemsWithUpdate(node, state, e, completionCallback);
      return completionCallback.promise();
    }
    this._renderSublevel($node, node, this._getChildNodes(node));
    this._fireContentReadyAction();
    this._animateNodeContainer(node, state, e, completionCallback);
    return completionCallback.promise();
  },
  _loadNestedItemsWithUpdate: function(node, state, e, completionCallback) {
    var $node = this._getNodeElement(node);
    this._loadNestedItems(node).done((items) => {
      var actualNodeData = this._getActualNode(node);
      this._renderSublevel($node, actualNodeData, this._dataAdapter.getNodesByItems(items));
      if (!items || !items.length) {
        completionCallback.resolve();
        return;
      }
      this._fireContentReadyAction();
      this._animateNodeContainer(actualNodeData, state, e, completionCallback);
    });
  },
  _loadNestedItems: function(node) {
    if (this._useCustomChildrenLoader()) {
      var publicNode = this._dataAdapter.getPublicNode(node);
      return this._loadChildrenByCustomLoader(publicNode).done((newItems) => {
        if (!this._areNodesExists(newItems)) {
          this._appendItems(newItems);
        }
      });
    }
    if (!this._isVirtualMode()) {
      return new Deferred().resolve([]).promise();
    }
    this._filter.internal = [this.option("parentIdExpr"), node.internalFields.key];
    this._dataSource.filter(this._combineFilter());
    return this._dataSource.load().done((newItems) => {
      if (!this._areNodesExists(newItems)) {
        this._appendItems(newItems);
      }
    });
  },
  _areNodesExists: function(newItems, items) {
    var keyOfRootItem = this.keyOf(newItems[0]);
    var fullData = this._dataAdapter.getFullData();
    return !!this._dataAdapter.getNodeByKey(keyOfRootItem, fullData);
  },
  _appendItems: function(newItems) {
    this.option().items = this.option("items").concat(newItems);
    this._initDataAdapter();
  },
  _animateNodeContainer: function(node, state, e, completionCallback) {
    var $node = this._getNodeElement(node);
    var $nodeContainer = $node.children(".".concat(NODE_CONTAINER_CLASS));
    if (node && completionCallback && 0 === $nodeContainer.length) {
      completionCallback.resolve();
    }
    $nodeContainer.addClass(OPENED_NODE_CONTAINER_CLASS);
    var nodeHeight = getHeight($nodeContainer);
    fx_default.stop($nodeContainer, true);
    fx_default.animate($nodeContainer, {
      type: "custom",
      duration: this.option("animationEnabled") ? 400 : 0,
      from: {
        maxHeight: state ? 0 : nodeHeight
      },
      to: {
        maxHeight: state ? nodeHeight : 0
      },
      complete: (function() {
        $nodeContainer.css("maxHeight", "none");
        $nodeContainer.toggleClass(OPENED_NODE_CONTAINER_CLASS, state);
        this.setAria("expanded", state, $node);
        this.getScrollable().update();
        this._fireExpandedStateUpdatedEvent(state, node, e);
        if (completionCallback) {
          completionCallback.resolve();
        }
      }).bind(this)
    });
  },
  _fireExpandedStateUpdatedEvent: function(isExpanded, node, e) {
    if (!this._hasChildren(node) || this._skipContentReadyAndItemExpanded) {
      return;
    }
    var optionName = isExpanded ? "onItemExpanded" : "onItemCollapsed";
    if (isDefined(e)) {
      this._itemDXEventHandler(e, optionName, {
        node: this._dataAdapter.getPublicNode(node)
      });
    } else {
      var target = this._getNodeElement(node);
      this._itemEventHandler(target, optionName, {
        event: e,
        node: this._dataAdapter.getPublicNode(node)
      });
    }
  },
  _normalizeIconState: function($node, hasNewItems) {
    var $loadIndicator = $node.find(".".concat(NODE_LOAD_INDICATOR_CLASS));
    if ($loadIndicator.length) {
      var _LoadIndicator$getIns;
      null === (_LoadIndicator$getIns = load_indicator_default.getInstance($loadIndicator)) || void 0 === _LoadIndicator$getIns ? void 0 : _LoadIndicator$getIns.option("visible", false);
    }
    var $treeViewItem = this._getItem($node);
    var $toggleItem = $treeViewItem.children(".".concat(CUSTOM_COLLAPSE_ICON_CLASS, ",.").concat(TOGGLE_ITEM_VISIBILITY_CLASS));
    if (hasNewItems) {
      $toggleItem.show();
      return;
    }
    $toggleItem.removeClass(TOGGLE_ITEM_VISIBILITY_CLASS);
    $node.addClass(IS_LEAF);
  },
  _emptyMessageContainer: function() {
    var scrollable = this.getScrollable();
    return scrollable ? renderer_default(scrollable.content()) : this.callBase();
  },
  _renderContent: function() {
    var items = this.option("items");
    if (items && items.length) {
      this._contentAlreadyRendered = true;
    }
    this.callBase();
  },
  _renderSelectAllItem: function($container) {
    var {
      selectAllText,
      focusStateEnabled
    } = this.option();
    $container = $container || this.$element().find(".".concat(NODE_CONTAINER_CLASS)).first();
    this._$selectAllItem = renderer_default("<div>").addClass(SELECT_ALL_ITEM_CLASS);
    var value2 = this._dataAdapter.isAllSelected();
    this._createComponent(this._$selectAllItem, check_box_default, {
      value: value2,
      elementAttr: {
        "aria-label": "Select All"
      },
      text: selectAllText,
      focusStateEnabled,
      onValueChanged: this._onSelectAllCheckboxValueChanged.bind(this),
      onInitialized: (_ref) => {
        var {
          component
        } = _ref;
        component.registerKeyHandler("enter", () => {
          component.option("value", !component.option("value"));
        });
      }
    });
    this._toggleSelectedClass(this._$selectAllItem, value2);
    $container.before(this._$selectAllItem);
  },
  _onSelectAllCheckboxValueChanged: function(args) {
    this._toggleSelectAll(args);
    this._fireSelectAllValueChanged(args.value);
  },
  _toggleSelectAll: function(args) {
    this._dataAdapter.toggleSelectAll(args.value);
    this._updateItemsUI();
    this._fireSelectionChanged();
  },
  _renderCheckBox: function($node, node) {
    var $checkbox = renderer_default("<div>").appendTo($node);
    this._createComponent($checkbox, check_box_default, {
      value: node.internalFields.selected,
      onValueChanged: this._changeCheckboxValue.bind(this),
      focusStateEnabled: false,
      elementAttr: {
        "aria-label": "Check State"
      },
      disabled: this._disabledGetter(node)
    });
  },
  _toggleSelectedClass: function($node, value2) {
    $node.toggleClass(SELECTED_ITEM_CLASS2, !!value2);
  },
  _toggleNodeDisabledState: function(node, state) {
    var $node = this._getNodeElement(node);
    var $item = $node.find("." + ITEM_CLASS3).eq(0);
    this._dataAdapter.toggleNodeDisabledState(node.internalFields.key, state);
    $item.toggleClass(DISABLED_STATE_CLASS4, !!state);
    if (this._showCheckboxes()) {
      var checkbox = this._getCheckBoxInstance($node);
      checkbox.option("disabled", !!state);
    }
  },
  _itemOptionChanged: function(item, property, value2) {
    var node = this._dataAdapter.getNodeByItem(item);
    if (property === this.option("disabledExpr")) {
      this._toggleNodeDisabledState(node, value2);
    }
  },
  _changeCheckboxValue: function(e) {
    var $node = renderer_default(e.element).closest(".".concat(NODE_CLASS));
    var $item = this._getItem($node);
    var item = this._getItemData($item);
    var node = this._getNodeByElement($item);
    var value2 = e.value;
    if (node && node.internalFields.selected === value2) {
      return;
    }
    this._updateItemSelection(value2, item, e.event);
  },
  _isSingleSelection: function() {
    return "single" === this.option("selectionMode");
  },
  _isRecursiveSelection: function() {
    return this.option("selectNodesRecursive") && "single" !== this.option("selectionMode");
  },
  _isLastSelectedBranch: function(publicNode, selectedNodesKeys, deep) {
    var keyIndex = selectedNodesKeys.indexOf(publicNode.key);
    if (keyIndex >= 0) {
      selectedNodesKeys.splice(keyIndex, 1);
    }
    if (deep) {
      each(publicNode.children, (function(_, childNode) {
        this._isLastSelectedBranch(childNode, selectedNodesKeys, true);
      }).bind(this));
    }
    if (publicNode.parent) {
      this._isLastSelectedBranch(publicNode.parent, selectedNodesKeys);
    }
    return 0 === selectedNodesKeys.length;
  },
  _isLastRequired: function(node) {
    var selectionRequired = this.option("selectionRequired");
    var isSingleMode = this._isSingleSelection();
    var selectedNodesKeys = this.getSelectedNodeKeys();
    if (!selectionRequired) {
      return;
    }
    if (isSingleMode) {
      return 1 === selectedNodesKeys.length;
    } else {
      return this._isLastSelectedBranch(node.internalFields.publicNode, selectedNodesKeys.slice(), true);
    }
  },
  _updateItemSelection: function(value2, itemElement, dxEvent) {
    var node = this._getNode(itemElement);
    if (!node || false === node.visible) {
      return false;
    }
    if (node.internalFields.selected === value2) {
      return true;
    }
    if (!value2 && this._isLastRequired(node)) {
      if (this._showCheckboxes()) {
        var $node = this._getNodeElement(node);
        this._getCheckBoxInstance($node).option("value", true);
      }
      return false;
    }
    if (value2 && this._isSingleSelection()) {
      var selectedKeys = this.getSelectedNodeKeys();
      each(selectedKeys, (index2, key) => {
        this._dataAdapter.toggleSelection(key, false);
        this._updateItemsUI();
        this._fireItemSelectionChanged(this._getNode(key));
      });
    }
    this._dataAdapter.toggleSelection(node.internalFields.key, value2);
    var isAllSelected = this._dataAdapter.isAllSelected();
    var needFireSelectAllChanged = this._selectAllEnabled() && this._$selectAllItem.dxCheckBox("instance").option("value") !== isAllSelected;
    this._updateItemsUI();
    this._fireItemSelectionChanged(node, dxEvent);
    this._fireSelectionChanged();
    if (needFireSelectAllChanged) {
      this._fireSelectAllValueChanged(isAllSelected);
    }
    return true;
  },
  _fireItemSelectionChanged: function(node, dxEvent) {
    var initiator = dxEvent || this._findItemElementByItem(node.internalFields.item);
    var handler = dxEvent ? this._itemDXEventHandler : this._itemEventHandler;
    handler.call(this, initiator, "onItemSelectionChanged", {
      node: this._dataAdapter.getPublicNode(node),
      itemData: node.internalFields.item
    });
  },
  _getCheckBoxInstance: function($node) {
    var $treeViewItem = this._getItem($node);
    return $treeViewItem.children(".".concat(CHECK_BOX_CLASS)).dxCheckBox("instance");
  },
  _updateItemsUI: function() {
    var cache = {};
    each(this._dataAdapter.getData(), (_, node) => {
      var $node = this._getNodeElement(node, cache);
      var nodeSelection = node.internalFields.selected;
      if (!$node.length) {
        return;
      }
      this._toggleSelectedClass($node, nodeSelection);
      this.setAria("selected", nodeSelection, $node);
      if (this._showCheckboxes()) {
        this._getCheckBoxInstance($node).option("value", nodeSelection);
      }
    });
    if (this._selectAllEnabled()) {
      var selectAllCheckbox = this._$selectAllItem.dxCheckBox("instance");
      selectAllCheckbox.option("onValueChanged", void 0);
      selectAllCheckbox.option("value", this._dataAdapter.isAllSelected());
      selectAllCheckbox.option("onValueChanged", this._onSelectAllCheckboxValueChanged.bind(this));
    }
  },
  _updateParentsState: function(node, $node) {
    if (!$node) {
      return;
    }
    var parentNode = this._dataAdapter.getNodeByKey(node.internalFields.parentKey);
    var $parentNode = renderer_default($node.parents("." + NODE_CLASS)[0]);
    if (this._showCheckboxes()) {
      var parentValue = parentNode.internalFields.selected;
      this._getCheckBoxInstance($parentNode).option("value", parentValue);
      this._toggleSelectedClass($parentNode, parentValue);
    }
    if (parentNode.internalFields.parentKey !== this.option("rootValue")) {
      this._updateParentsState(parentNode, $parentNode);
    }
  },
  _itemEventHandlerImpl: function(initiator, action, actionArgs) {
    var $itemElement = renderer_default(initiator).closest("." + NODE_CLASS).children("." + ITEM_CLASS3);
    return action(extend(this._extendActionArgs($itemElement), actionArgs));
  },
  _itemContextMenuHandler: function(e) {
    this._createEventHandler("onItemContextMenu", e);
  },
  _itemHoldHandler: function(e) {
    this._createEventHandler("onItemHold", e);
  },
  _createEventHandler: function(eventName, e) {
    var node = this._getNodeByElement(e.currentTarget);
    this._itemDXEventHandler(e, eventName, {
      node: this._dataAdapter.getPublicNode(node)
    });
  },
  _itemClass: function() {
    return ITEM_CLASS3;
  },
  _itemDataKey: function() {
    return ITEM_DATA_KEY2;
  },
  _attachClickEvent: function() {
    var $itemContainer = this._itemContainer();
    this._detachClickEvent($itemContainer);
    var {
      clickEventNamespace,
      itemSelector,
      pointerDownEventNamespace,
      nodeSelector
    } = this._getItemClickEventData();
    events_engine_default.on($itemContainer, clickEventNamespace, itemSelector, (e) => {
      if (renderer_default(e.target).hasClass(CHECK_BOX_ICON_CLASS) || renderer_default(e.target).hasClass(CHECK_BOX_CLASS)) {
        return;
      }
      this._itemClickHandler(e, renderer_default(e.currentTarget));
    });
    events_engine_default.on($itemContainer, pointerDownEventNamespace, nodeSelector, (e) => {
      this._itemPointerDownHandler(e);
    });
  },
  _detachClickEvent: function(itemsContainer) {
    var {
      clickEventNamespace,
      itemSelector,
      pointerDownEventNamespace,
      nodeSelector
    } = this._getItemClickEventData();
    events_engine_default.off(itemsContainer, clickEventNamespace, itemSelector);
    events_engine_default.off(itemsContainer, pointerDownEventNamespace, nodeSelector);
  },
  _getItemClickEventData: function() {
    var itemSelector = ".".concat(this._itemClass());
    var nodeSelector = ".".concat(NODE_CLASS, ", .").concat(SELECT_ALL_ITEM_CLASS);
    var clickEventNamespace = addNamespace2(CLICK_EVENT_NAME, this.NAME);
    var pointerDownEventNamespace = addNamespace2(pointer_default.down, this.NAME);
    return {
      clickEventNamespace,
      itemSelector,
      pointerDownEventNamespace,
      nodeSelector
    };
  },
  _itemClick: function(actionArgs) {
    var args = actionArgs.args[0];
    var target = args.event.target[0] || args.event.target;
    var link = target.getElementsByClassName(ITEM_URL_CLASS3)[0];
    if (args.itemData.url && link) {
      link.click();
    }
  },
  _itemClickHandler: function(e, $item) {
    var itemData = this._getItemData($item);
    var node = this._getNodeByElement($item);
    this._itemDXEventHandler(e, "onItemClick", {
      node: this._dataAdapter.getPublicNode(node)
    }, {
      beforeExecute: this._itemClick
    });
    if (this.option("selectByClick") && !e.isDefaultPrevented()) {
      this._updateItemSelection(!node.internalFields.selected, itemData, e);
    }
  },
  _updateSelectionToFirstItem: function($items, startIndex) {
    var itemIndex = startIndex;
    while (itemIndex >= 0) {
      var $item = renderer_default($items[itemIndex]);
      this._updateItemSelection(true, $item.find("." + ITEM_CLASS3).get(0));
      itemIndex--;
    }
  },
  _updateSelectionToLastItem: function($items, startIndex) {
    var length = $items.length;
    var itemIndex = startIndex;
    while (itemIndex < length) {
      var $item = renderer_default($items[itemIndex]);
      this._updateItemSelection(true, $item.find("." + ITEM_CLASS3).get(0));
      itemIndex++;
    }
  },
  focus: function() {
    if (this._selectAllEnabled()) {
      events_engine_default.trigger(this._$selectAllItem, "focus");
      return;
    }
    this.callBase();
  },
  _focusInHandler: function(e) {
    this._updateFocusState(e, true);
    var isSelectAllItem = renderer_default(e.target).hasClass(SELECT_ALL_ITEM_CLASS);
    if (isSelectAllItem || this.option("focusedElement")) {
      clearTimeout(this._setFocusedItemTimeout);
      this._setFocusedItemTimeout = setTimeout(() => {
        var element = isSelectAllItem ? getPublicElement(this._$selectAllItem) : renderer_default(this.option("focusedElement"));
        this._setFocusedItem(element);
      });
      return;
    }
    var $activeItem = this._getActiveItem();
    this.option("focusedElement", getPublicElement($activeItem.closest("." + NODE_CLASS)));
  },
  _itemPointerDownHandler: function(e) {
    if (!this.option("focusStateEnabled")) {
      return;
    }
    var $target = renderer_default(e.target).closest("." + NODE_CLASS + ", ." + SELECT_ALL_ITEM_CLASS);
    if (!$target.length) {
      return;
    }
    var itemElement = $target.hasClass(DISABLED_STATE_CLASS4) ? null : $target;
    this.option("focusedElement", getPublicElement(itemElement));
  },
  _findNonDisabledNodes: function($nodes) {
    return $nodes.not(function() {
      return renderer_default(this).children("." + ITEM_CLASS3).hasClass(DISABLED_STATE_CLASS4);
    });
  },
  _moveFocus: function(location, e) {
    var FOCUS_UP4 = "up";
    var FOCUS_DOWN4 = "down";
    var FOCUS_FIRST3 = "first";
    var FOCUS_LAST3 = "last";
    var FOCUS_LEFT4 = this.option("rtlEnabled") ? "right" : "left";
    var FOCUS_RIGHT4 = this.option("rtlEnabled") ? "left" : "right";
    this.$element().find(".".concat(NODE_CONTAINER_CLASS)).each(function() {
      fx_default.stop(this, true);
    });
    var $items = this._nodeElements();
    if (!$items || !$items.length) {
      return;
    }
    switch (location) {
      case FOCUS_UP4:
        var $prevItem = this._prevItem($items);
        this.option("focusedElement", getPublicElement($prevItem));
        var prevItemElement = this._getNodeItemElement($prevItem);
        this.getScrollable().scrollToElement(prevItemElement);
        if (e.shiftKey && this._showCheckboxes()) {
          this._updateItemSelection(true, prevItemElement);
        }
        break;
      case FOCUS_DOWN4:
        var $nextItem = this._nextItem($items);
        this.option("focusedElement", getPublicElement($nextItem));
        var nextItemElement = this._getNodeItemElement($nextItem);
        this.getScrollable().scrollToElement(nextItemElement);
        if (e.shiftKey && this._showCheckboxes()) {
          this._updateItemSelection(true, nextItemElement);
        }
        break;
      case FOCUS_FIRST3:
        var $firstItem = $items.first();
        if (e.shiftKey && this._showCheckboxes()) {
          this._updateSelectionToFirstItem($items, $items.index(this._prevItem($items)));
        }
        this.option("focusedElement", getPublicElement($firstItem));
        this.getScrollable().scrollToElement(this._getNodeItemElement($firstItem));
        break;
      case FOCUS_LAST3:
        var $lastItem = $items.last();
        if (e.shiftKey && this._showCheckboxes()) {
          this._updateSelectionToLastItem($items, $items.index(this._nextItem($items)));
        }
        this.option("focusedElement", getPublicElement($lastItem));
        this.getScrollable().scrollToElement(this._getNodeItemElement($lastItem));
        break;
      case FOCUS_RIGHT4:
        this._expandFocusedContainer();
        break;
      case FOCUS_LEFT4:
        this._collapseFocusedContainer();
        break;
      default:
        this.callBase.apply(this, arguments);
        return;
    }
  },
  _getNodeItemElement: function($node) {
    return $node.find("." + ITEM_CLASS3).get(0);
  },
  _nodeElements: function() {
    return this.$element().find("." + NODE_CLASS).not(":hidden");
  },
  _expandFocusedContainer: function() {
    var $focusedNode = renderer_default(this.option("focusedElement"));
    if (!$focusedNode.length || $focusedNode.hasClass(IS_LEAF)) {
      return;
    }
    var $node = $focusedNode.find(".".concat(NODE_CONTAINER_CLASS)).eq(0);
    if ($node.hasClass(OPENED_NODE_CONTAINER_CLASS)) {
      var $nextItem = this._nextItem(this._findNonDisabledNodes(this._nodeElements()));
      this.option("focusedElement", getPublicElement($nextItem));
      this.getScrollable().scrollToElement(this._getNodeItemElement($nextItem));
      return;
    }
    var node = this._getNodeByElement(this._getItem($focusedNode));
    this._toggleExpandedState(node, true);
  },
  _getClosestNonDisabledNode: function($node) {
    do {
      $node = $node.parent().closest("." + NODE_CLASS);
    } while ($node.children(".dx-treeview-item.dx-state-disabled").length);
    return $node;
  },
  _collapseFocusedContainer: function() {
    var $focusedNode = renderer_default(this.option("focusedElement"));
    if (!$focusedNode.length) {
      return;
    }
    var nodeElement = $focusedNode.find(".".concat(NODE_CONTAINER_CLASS)).eq(0);
    if (!$focusedNode.hasClass(IS_LEAF) && nodeElement.hasClass(OPENED_NODE_CONTAINER_CLASS)) {
      var node = this._getNodeByElement(this._getItem($focusedNode));
      this._toggleExpandedState(node, false);
    } else {
      var collapsedNode = this._getClosestNonDisabledNode($focusedNode);
      collapsedNode.length && this.option("focusedElement", getPublicElement(collapsedNode));
      this.getScrollable().scrollToElement(this._getNodeItemElement(collapsedNode));
    }
  },
  _encodeString: function(value2) {
    return isString(value2) ? encodeURI(value2) : value2;
  },
  _decodeString: function(value2) {
    return isString(value2) ? decodeURI(value2) : value2;
  },
  getScrollable: function() {
    return this._scrollable;
  },
  updateDimensions: function() {
    var deferred = new Deferred();
    var scrollable = this.getScrollable();
    if (scrollable) {
      scrollable.update().done(() => {
        deferred.resolveWith(this);
      });
    } else {
      deferred.resolveWith(this);
    }
    return deferred.promise();
  },
  selectItem: function(itemElement) {
    return this._updateItemSelection(true, itemElement);
  },
  unselectItem: function(itemElement) {
    return this._updateItemSelection(false, itemElement);
  },
  expandItem: function(itemElement) {
    return this._toggleExpandedState(itemElement, true);
  },
  collapseItem: function(itemElement) {
    return this._toggleExpandedState(itemElement, false);
  },
  getNodes: function() {
    return this._dataAdapter.getTreeNodes();
  },
  getSelectedNodes: function() {
    return this.getSelectedNodeKeys().map((key) => {
      var node = this._dataAdapter.getNodeByKey(key);
      return this._dataAdapter.getPublicNode(node);
    });
  },
  getSelectedNodeKeys: function() {
    return this._dataAdapter.getSelectedNodesKeys();
  },
  selectAll: function() {
    if (this._selectAllEnabled()) {
      this._$selectAllItem.dxCheckBox("instance").option("value", true);
    } else {
      this._toggleSelectAll({
        value: true
      });
    }
  },
  unselectAll: function() {
    if (this._selectAllEnabled()) {
      this._$selectAllItem.dxCheckBox("instance").option("value", false);
    } else {
      this._toggleSelectAll({
        value: false
      });
    }
  },
  _allItemsExpandedHandler: function() {
    this._skipContentReadyAndItemExpanded = false;
    this._fireContentReadyAction();
  },
  expandAll: function() {
    var nodes = this._dataAdapter.getData();
    var expandingPromises = [];
    this._skipContentReadyAndItemExpanded = true;
    nodes.forEach((node) => expandingPromises.push(this._toggleExpandedState(node.internalFields.key, true)));
    Promise.allSettled(expandingPromises).then(() => {
      var _this$_allItemsExpand;
      return null === (_this$_allItemsExpand = this._allItemsExpandedHandler) || void 0 === _this$_allItemsExpand ? void 0 : _this$_allItemsExpand.call(this);
    });
  },
  collapseAll: function() {
    each(this._dataAdapter.getExpandedNodesKeys(), (function(_, key) {
      this._toggleExpandedState(key, false);
    }).bind(this));
  },
  scrollToItem: function(keyOrItemOrElement) {
    var node = this._getNode(keyOrItemOrElement);
    if (!node) {
      return new Deferred().reject().promise();
    }
    var nodeKeysToExpand = [];
    var parentNode = node.internalFields.publicNode.parent;
    while (null != parentNode) {
      if (!parentNode.expanded) {
        nodeKeysToExpand.push(parentNode.key);
      }
      parentNode = parentNode.parent;
    }
    var scrollCallback = new Deferred();
    this._expandNodes(nodeKeysToExpand.reverse()).always(() => {
      var $element = this._getNodeElement(node);
      if ($element && $element.length) {
        this.scrollToElementTopLeft($element.get(0));
        scrollCallback.resolve();
      } else {
        scrollCallback.reject();
      }
    });
    return scrollCallback.promise();
  },
  scrollToElementTopLeft: function(targetElement) {
    var scrollable = this.getScrollable();
    var {
      scrollDirection,
      rtlEnabled
    } = this.option();
    var targetLocation = {
      top: 0,
      left: 0
    };
    var relativeOffset = getRelativeOffset(SCROLLABLE_CONTENT_CLASS, targetElement);
    if (scrollDirection !== DIRECTION_VERTICAL) {
      var containerElement = renderer_default(scrollable.container()).get(0);
      targetLocation.left = rtlEnabled ? relativeOffset.left + targetElement.offsetWidth - containerElement.clientWidth : relativeOffset.left;
    }
    if (scrollDirection !== DIRECTION_HORIZONTAL) {
      targetLocation.top = relativeOffset.top;
    }
    scrollable.scrollTo(targetLocation);
  },
  _expandNodes: function(keysToExpand) {
    if (!keysToExpand || 0 === keysToExpand.length) {
      return new Deferred().resolve().promise();
    }
    var resultCallback = new Deferred();
    var callbacksByNodes = keysToExpand.map((key) => this.expandItem(key));
    when.apply(renderer_default, callbacksByNodes).done(() => resultCallback.resolve()).fail(() => resultCallback.reject());
    return resultCallback.promise();
  },
  _dispose: function() {
    this.callBase();
    clearTimeout(this._setFocusedItemTimeout);
    this._allItemsExpandedHandler = null;
  }
});
var ui_tree_view_base_default = TreeViewBase;

// node_modules/devextreme/esm/ui/tree_view/ui.tree_view.search.js
ui_search_box_mixin_default.setEditorClass(text_box_default2);
var WIDGET_CLASS2 = "dx-treeview";
var NODE_CONTAINER_CLASS2 = "".concat(WIDGET_CLASS2, "-node-container");
var TreeViewSearch = ui_tree_view_base_default.inherit(ui_search_box_mixin_default).inherit({
  _addWidgetPrefix: function(className) {
    return "".concat(WIDGET_CLASS2, "-").concat(className);
  },
  _optionChanged: function(args) {
    switch (args.name) {
      case "searchValue":
        if (this._showCheckboxes() && this._isRecursiveSelection()) {
          this._removeSelection();
        }
        this._initDataAdapter();
        this._updateSearch();
        this._repaintContainer();
        this.option("focusedElement", null);
        break;
      case "searchExpr":
        this._initDataAdapter();
        this.repaint();
        break;
      case "searchMode":
        this.option("expandNodesRecursive") ? this._updateDataAdapter() : this._initDataAdapter();
        this.repaint();
        break;
      default:
        this.callBase(args);
    }
  },
  _updateDataAdapter: function() {
    this._setOptionWithoutOptionChange("expandNodesRecursive", false);
    this._initDataAdapter();
    this._setOptionWithoutOptionChange("expandNodesRecursive", true);
  },
  _getDataAdapterOptions: function() {
    return extend(this.callBase(), {
      searchValue: this.option("searchValue"),
      searchMode: this.option("searchMode") || "contains",
      searchExpr: this.option("searchExpr")
    });
  },
  _getNodeContainer: function() {
    return this.$element().find(".".concat(NODE_CONTAINER_CLASS2)).first();
  },
  _updateSearch: function() {
    if (this._searchEditor) {
      var editorOptions = this._getSearchEditorOptions();
      this._searchEditor.option(editorOptions);
    }
  },
  _repaintContainer: function() {
    var $container = this._getNodeContainer();
    var rootNodes;
    if ($container.length) {
      $container.empty();
      rootNodes = this._dataAdapter.getRootNodes();
      this._renderEmptyMessage(rootNodes);
      this._renderItems($container, rootNodes);
      this._fireContentReadyAction();
    }
  },
  _focusTarget: function() {
    return this._itemContainer(this.option("searchEnabled"));
  },
  _cleanItemContainer: function() {
    this.$element().empty();
  },
  _itemContainer: function(isSearchMode, selectAllEnabled) {
    var _selectAllEnabled;
    null !== (_selectAllEnabled = selectAllEnabled) && void 0 !== _selectAllEnabled ? _selectAllEnabled : selectAllEnabled = this._selectAllEnabled();
    if (selectAllEnabled) {
      return this._getNodeContainer();
    }
    if (this._scrollable && isSearchMode) {
      return renderer_default(this._scrollable.content());
    }
    return this.callBase();
  },
  _addWidgetClass: function() {
    this.$element().addClass(this._widgetClass());
  },
  _clean: function() {
    this.callBase();
    this._removeSearchBox();
  }
});
component_registrator_default("dxTreeView", TreeViewSearch);
var ui_tree_view_search_default = TreeViewSearch;

// node_modules/devextreme/esm/ui/tree_view.js
var tree_view_default = ui_tree_view_search_default;

// node_modules/devextreme/esm/__internal/grids/grid_core/column_chooser/m_column_chooser.js
var COLUMN_CHOOSER_CLASS = "column-chooser";
var COLUMN_CHOOSER_BUTTON_CLASS = "column-chooser-button";
var NOTOUCH_ACTION_CLASS = "notouch-action";
var COLUMN_CHOOSER_LIST_CLASS = "column-chooser-list";
var COLUMN_CHOOSER_PLAIN_CLASS = "column-chooser-plain";
var COLUMN_CHOOSER_DRAG_CLASS = "column-chooser-mode-drag";
var COLUMN_CHOOSER_SELECT_CLASS = "column-chooser-mode-select";
var COLUMN_CHOOSER_ICON_NAME = "column-chooser";
var COLUMN_CHOOSER_ITEM_CLASS = "dx-column-chooser-item";
var COLUMN_OPTIONS_USED_IN_ITEMS = ["showInColumnChooser", "caption", "allowHiding", "visible", "cssClass", "ownerBand"];
var processItems = function(that, chooserColumns) {
  var items = [];
  var isSelectMode = that.isSelectMode();
  var isRecursive = that.option("columnChooser.selection.recursive");
  if (chooserColumns.length) {
    each(chooserColumns, (index2, column) => {
      var item = {
        text: column.caption,
        cssClass: column.cssClass,
        allowHiding: column.allowHiding,
        expanded: true,
        id: column.index,
        disabled: false === column.allowHiding,
        parentId: isDefined(column.ownerBand) ? column.ownerBand : null
      };
      var isRecursiveWithColumns = isRecursive && column.hasColumns;
      if (isSelectMode && !isRecursiveWithColumns) {
        item.selected = column.visible;
      }
      items.push(item);
    });
  }
  return items;
};
var columnChooserControllerMembers = {
  renderShowColumnChooserButton($element) {
    var that = this;
    var columnChooserButtonClass = that.addWidgetPrefix(COLUMN_CHOOSER_BUTTON_CLASS);
    var columnChooserEnabled = that.option("columnChooser.enabled");
    var $showColumnChooserButton = $element.find(".".concat(columnChooserButtonClass));
    var $columnChooserButton;
    if (columnChooserEnabled) {
      if (!$showColumnChooserButton.length) {
        $columnChooserButton = renderer_default("<div>").addClass(columnChooserButtonClass).appendTo($element);
        that._createComponent($columnChooserButton, button_default, {
          icon: COLUMN_CHOOSER_ICON_NAME,
          onClick() {
            that.getView("columnChooserView").showColumnChooser();
          },
          hint: that.option("columnChooser.title"),
          integrationOptions: {}
        });
      } else {
        $showColumnChooserButton.show();
      }
    } else {
      $showColumnChooserButton.hide();
    }
  },
  getPosition() {
    var rowsView3 = this.getView("rowsView");
    var position3 = this.option("columnChooser.position");
    return isDefined(position3) ? position3 : {
      my: "right bottom",
      at: "right bottom",
      of: rowsView3 && rowsView3.element(),
      collision: "fit",
      offset: "-2 -2",
      boundaryOffset: "2 2"
    };
  }
};
var ColumnChooserController = m_modules_default.ViewController.inherit(columnChooserControllerMembers);
var columnChooserMembers = {
  _resizeCore: noop2,
  _isWinDevice: () => !!devices_default.real().win,
  _initializePopupContainer() {
    var that = this;
    var columnChooserClass = that.addWidgetPrefix(COLUMN_CHOOSER_CLASS);
    var $element = that.element().addClass(columnChooserClass);
    var columnChooserOptions = that.option("columnChooser");
    var themeName = current();
    var isGenericTheme = isGeneric(themeName);
    var isMaterial2 = isMaterial(themeName);
    var dxPopupOptions = {
      visible: false,
      shading: false,
      showCloseButton: false,
      dragEnabled: true,
      resizeEnabled: true,
      wrapperAttr: {
        class: columnChooserClass
      },
      toolbarItems: [{
        text: columnChooserOptions.title,
        toolbar: "top",
        location: isGenericTheme || isMaterial2 ? "before" : "center"
      }],
      position: that.getController("columnChooser").getPosition(),
      width: columnChooserOptions.width,
      height: columnChooserOptions.height,
      rtlEnabled: that.option("rtlEnabled"),
      onHidden() {
        if (that._isWinDevice()) {
          renderer_default("body").removeClass(that.addWidgetPrefix(NOTOUCH_ACTION_CLASS));
        }
      },
      container: columnChooserOptions.container
    };
    if (isGenericTheme || isMaterial2) {
      extend(dxPopupOptions, {
        showCloseButton: true
      });
    } else {
      dxPopupOptions.toolbarItems[dxPopupOptions.toolbarItems.length] = {
        shortcut: "cancel"
      };
    }
    if (!isDefined(this._popupContainer)) {
      that._popupContainer = that._createComponent($element, ui_popup_default, dxPopupOptions);
      that._popupContainer.on("optionChanged", (args) => {
        if ("visible" === args.name) {
          that.renderCompleted.fire();
        }
      });
    } else {
      this._popupContainer.option(dxPopupOptions);
    }
    this.setPopupAttributes();
  },
  setPopupAttributes() {
    var isSelectMode = this.isSelectMode();
    var isBandColumnsUsed = this._columnsController.isBandColumnsUsed();
    this._popupContainer.setAria({
      role: "dialog",
      label: message_default.format("dxDataGrid-columnChooserTitle")
    });
    this._popupContainer.$wrapper().toggleClass(this.addWidgetPrefix(COLUMN_CHOOSER_DRAG_CLASS), !isSelectMode).toggleClass(this.addWidgetPrefix(COLUMN_CHOOSER_SELECT_CLASS), isSelectMode);
    this._popupContainer.$content().addClass(this.addWidgetPrefix(COLUMN_CHOOSER_LIST_CLASS));
    if (isSelectMode && !isBandColumnsUsed) {
      this._popupContainer.$content().addClass(this.addWidgetPrefix(COLUMN_CHOOSER_PLAIN_CLASS));
    }
  },
  _renderCore(change) {
    if (this._popupContainer) {
      var isDragMode = !this.isSelectMode();
      if (!this._columnChooserList || "full" === change) {
        this._renderTreeView();
      } else if (isDragMode) {
        this._updateItems();
      }
    }
  },
  _renderTreeView() {
    var _a2, _b2, _c;
    var that = this;
    var $container = this._popupContainer.$content();
    var columnChooser = this.option("columnChooser");
    var isSelectMode = this.isSelectMode();
    var searchEnabled = isDefined(columnChooser.allowSearch) ? columnChooser.allowSearch : null === (_a2 = columnChooser.search) || void 0 === _a2 ? void 0 : _a2.enabled;
    var searchTimeout = isDefined(columnChooser.searchTimeout) ? columnChooser.searchTimeout : null === (_b2 = columnChooser.search) || void 0 === _b2 ? void 0 : _b2.timeout;
    var treeViewConfig = {
      dataStructure: "plain",
      activeStateEnabled: true,
      focusStateEnabled: true,
      hoverStateEnabled: true,
      itemTemplate: "item",
      showCheckBoxesMode: "none",
      rootValue: null,
      searchEnabled,
      searchTimeout,
      searchEditorOptions: null === (_c = columnChooser.search) || void 0 === _c ? void 0 : _c.editorOptions
    };
    if (this._isWinDevice()) {
      treeViewConfig.useNativeScrolling = false;
    }
    extend(treeViewConfig, isSelectMode ? this._prepareSelectModeConfig() : this._prepareDragModeConfig());
    if (this._columnChooserList) {
      if (!treeViewConfig.searchEnabled) {
        treeViewConfig.searchValue = "";
      }
      this._columnChooserList.option(treeViewConfig);
      this._updateItems();
    } else {
      this._columnChooserList = this._createComponent($container, tree_view_default, treeViewConfig);
      this._updateItems();
      var scrollTop = 0;
      this._columnChooserList.on("optionChanged", (e) => {
        var scrollable = e.component.getScrollable();
        scrollTop = scrollable.scrollTop();
      });
      this._columnChooserList.on("contentReady", (e) => {
        deferUpdate(() => {
          var scrollable = e.component.getScrollable();
          scrollable.scrollTo({
            y: scrollTop
          });
          that.renderCompleted.fire();
        });
      });
    }
  },
  _prepareDragModeConfig() {
    var columnChooserOptions = this.option("columnChooser");
    return {
      noDataText: columnChooserOptions.emptyPanelText,
      activeStateEnabled: false,
      focusStateEnabled: false,
      hoverStateEnabled: false,
      itemTemplate(data3, index2, item) {
        renderer_default(item).text(data3.text).parent().addClass(data3.cssClass).addClass(COLUMN_CHOOSER_ITEM_CLASS);
      }
    };
  },
  _prepareSelectModeConfig() {
    var that = this;
    var selectionOptions = this.option("columnChooser.selection") || {};
    var isUpdatingSelection = false;
    return {
      selectByClick: selectionOptions.selectByClick,
      selectNodesRecursive: selectionOptions.recursive,
      showCheckBoxesMode: selectionOptions.allowSelectAll ? "selectAll" : "normal",
      onSelectionChanged: (e) => {
        if (isUpdatingSelection) {
          return;
        }
        var nodes = ((nodes2) => {
          var addNodesToArray = (nodes3, flatNodesArray) => nodes3.reduce((result2, node) => {
            result2.push(node);
            if (node.children.length) {
              addNodesToArray(node.children, result2);
            }
            return result2;
          }, flatNodesArray);
          return addNodesToArray(nodes2, []);
        })(e.component.getNodes());
        e.component.beginUpdate();
        isUpdatingSelection = true;
        ((e2, nodes2) => {
          nodes2.filter((node) => false === node.itemData.allowHiding).forEach((node) => e2.component.selectItem(node.key));
        })(e, nodes);
        e.component.endUpdate();
        isUpdatingSelection = false;
        that.component.beginUpdate();
        this._isUpdatingColumnVisibility = true;
        ((nodes2) => {
          nodes2.forEach((node) => {
            var columnIndex = node.itemData.id;
            var isVisible2 = false !== node.selected;
            that._columnsController.columnOption(columnIndex, "visible", isVisible2);
          });
        })(nodes);
        that.component.endUpdate();
        this._isUpdatingColumnVisibility = false;
      }
    };
  },
  _updateItems() {
    var isSelectMode = this.isSelectMode();
    var chooserColumns = this._columnsController.getChooserColumns(isSelectMode);
    var items = processItems(this, chooserColumns);
    this._columnChooserList.option("items", items);
  },
  _updateItemsSelection(columnIndices) {
    var changedColumns = null === columnIndices || void 0 === columnIndices ? void 0 : columnIndices.map((columnIndex) => this._columnsController.columnOption(columnIndex));
    this._columnChooserList.beginUpdate();
    null === changedColumns || void 0 === changedColumns ? void 0 : changedColumns.forEach((_ref) => {
      var {
        visible: visible2,
        index: index2
      } = _ref;
      if (visible2) {
        this._columnChooserList.selectItem(index2);
      } else {
        this._columnChooserList.unselectItem(index2);
      }
    });
    this._columnChooserList.endUpdate();
  },
  _columnOptionChanged(e) {
    this.callBase(e);
    var isSelectMode = this.isSelectMode();
    if (isSelectMode && this._columnChooserList && true !== this._isUpdatingColumnVisibility) {
      var {
        optionNames
      } = e;
      var onlyVisibleChanged = optionNames.visible && 1 === optionNames.length;
      var columnIndices = isDefined(e.columnIndex) ? [e.columnIndex] : e.columnIndices;
      var needUpdate = COLUMN_OPTIONS_USED_IN_ITEMS.some((optionName) => optionNames[optionName]) || e.changeTypes.columns && optionNames.all;
      if (needUpdate) {
        this._updateItemsSelection(columnIndices);
        if (!onlyVisibleChanged) {
          this._updateItems();
        }
      }
    }
  },
  optionChanged(args) {
    switch (args.name) {
      case "columnChooser":
        this._initializePopupContainer();
        this.render(null, "full");
        break;
      default:
        this.callBase(args);
    }
  },
  getColumnElements() {
    var result2 = [];
    var isSelectMode = this.isSelectMode();
    var chooserColumns = this._columnsController.getChooserColumns(isSelectMode);
    var $content = this._popupContainer && this._popupContainer.$content();
    var $nodes = $content && $content.find(".dx-treeview-node");
    if ($nodes) {
      chooserColumns.forEach((column) => {
        var $node = $nodes.filter("[data-item-id = '".concat(column.index, "']"));
        var item = $node.length ? $node.children(".".concat(COLUMN_CHOOSER_ITEM_CLASS)).get(0) : null;
        result2.push(item);
      });
    }
    return renderer_default(result2);
  },
  getName: () => "columnChooser",
  getColumns() {
    return this._columnsController.getChooserColumns();
  },
  allowDragging(column) {
    var isParentColumnVisible = this._columnsController.isParentColumnVisible(column.index);
    var isColumnHidden = !column.visible && column.allowHiding;
    return this.isColumnChooserVisible() && isParentColumnVisible && isColumnHidden;
  },
  allowColumnHeaderDragging(column) {
    var isDragMode = !this.isSelectMode();
    return isDragMode && this.isColumnChooserVisible() && column.allowHiding;
  },
  getBoundingRect() {
    var container = this._popupContainer && this._popupContainer.$overlayContent();
    if (container && container.is(":visible")) {
      var offset2 = container.offset();
      return {
        left: offset2.left,
        top: offset2.top,
        right: offset2.left + getOuterWidth(container),
        bottom: offset2.top + getOuterHeight(container)
      };
    }
    return null;
  },
  showColumnChooser() {
    if (!this._popupContainer) {
      this._initializePopupContainer();
      this.render();
    }
    this._popupContainer.show();
    if (this._isWinDevice()) {
      renderer_default("body").addClass(this.addWidgetPrefix(NOTOUCH_ACTION_CLASS));
    }
  },
  hideColumnChooser() {
    if (this._popupContainer) {
      this._popupContainer.hide();
    }
  },
  isColumnChooserVisible() {
    var popupContainer = this._popupContainer;
    return popupContainer && popupContainer.option("visible");
  },
  isSelectMode() {
    return "select" === this.option("columnChooser.mode");
  },
  hasHiddenColumns() {
    var isEnabled = this.option("columnChooser.enabled");
    var hiddenColumns = this.getColumns().filter((column) => !column.visible);
    return isEnabled && hiddenColumns.length;
  },
  publicMethods: () => ["showColumnChooser", "hideColumnChooser"]
};
var ColumnChooserView = ColumnsView.inherit(columnChooserMembers);
var columnChooserModule = {
  defaultOptions: () => ({
    columnChooser: {
      enabled: false,
      search: {
        enabled: false,
        timeout: 500,
        editorOptions: {}
      },
      selection: {
        allowSelectAll: false,
        selectByClick: false,
        recursive: false
      },
      position: void 0,
      mode: "dragAndDrop",
      width: 250,
      height: 260,
      title: message_default.format("dxDataGrid-columnChooserTitle"),
      emptyPanelText: message_default.format("dxDataGrid-columnChooserEmptyText"),
      container: void 0
    }
  }),
  controllers: {
    columnChooser: ColumnChooserController
  },
  views: {
    columnChooserView: ColumnChooserView
  },
  extenders: {
    views: {
      headerPanel: {
        _getToolbarItems() {
          var items = this.callBase();
          return this._appendColumnChooserItem(items);
        },
        _appendColumnChooserItem(items) {
          var that = this;
          var columnChooserEnabled = that.option("columnChooser.enabled");
          if (columnChooserEnabled) {
            var hintText = that.option("columnChooser.title");
            var toolbarItem = {
              widget: "dxButton",
              options: {
                icon: COLUMN_CHOOSER_ICON_NAME,
                onClick: function() {
                  that.component.getView("columnChooserView").showColumnChooser();
                },
                hint: hintText,
                text: hintText,
                onInitialized: function(e) {
                  renderer_default(e.element).addClass(that._getToolbarButtonClass(that.addWidgetPrefix(COLUMN_CHOOSER_BUTTON_CLASS)));
                },
                elementAttr: {
                  "aria-haspopup": "dialog"
                }
              },
              showText: "inMenu",
              location: "after",
              name: "columnChooserButton",
              locateInMenu: "auto",
              sortIndex: 40
            };
            items.push(toolbarItem);
          }
          return items;
        },
        optionChanged(args) {
          switch (args.name) {
            case "columnChooser":
              this._invalidate();
              args.handled = true;
              break;
            default:
              this.callBase(args);
          }
        },
        isVisible() {
          var columnChooserEnabled = this.option("columnChooser.enabled");
          return this.callBase() || columnChooserEnabled;
        }
      },
      columnHeadersView: {
        allowDragging(column) {
          var columnChooserView = this.component.getView("columnChooserView");
          var isDragMode = !columnChooserView.isSelectMode();
          var isColumnChooserVisible = columnChooserView.isColumnChooserVisible();
          return isDragMode && isColumnChooserVisible && column.allowHiding || this.callBase(column);
        }
      }
    },
    controllers: {
      columns: {
        allowMoveColumn(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {
          var isSelectMode = "select" === this.option("columnChooser.mode");
          var isMoveColumnDisallowed = isSelectMode && "columnChooser" === targetLocation;
          return isMoveColumnDisallowed ? false : this.callBase(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation);
        }
      }
    }
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/column_chooser.js
var ColumnChooserController2 = columnChooserModule.controllers.columnChooser;
var ColumnChooserView2 = columnChooserModule.views.columnChooserView;
m_core_default.registerModule("columnChooser", columnChooserModule);

// node_modules/devextreme/esm/__internal/grids/data_grid/m_utils.js
function createGroupFilter(path, storeLoadOptions) {
  var groups = normalizeSortingInfo(storeLoadOptions.group);
  var filter = [];
  for (var i = 0; i < path.length; i++) {
    filter.push([groups[i].selector, "=", path[i]]);
  }
  if (storeLoadOptions.filter) {
    filter.push(storeLoadOptions.filter);
  }
  return m_utils_default.combineFilters(filter);
}

// node_modules/devextreme/esm/__internal/grids/data_grid/grouping/m_grouping_core.js
function createOffsetFilter(path, storeLoadOptions, lastLevelOnly) {
  var groups = normalizeSortingInfo(storeLoadOptions.group);
  var filter = [];
  for (var i = lastLevelOnly ? path.length - 1 : 0; i < path.length; i++) {
    var filterElement = [];
    for (var j = 0; j <= i; j++) {
      var {
        selector
      } = groups[j];
      if (i === j && (null === path[j] || false === path[j] || true === path[j])) {
        if (false === path[j]) {
          filterElement.push([selector, "=", groups[j].desc ? true : null]);
        } else if (path[j] ? !groups[j].desc : groups[j].desc) {
          filterElement.push([selector, "<>", path[j]]);
        } else {
          filterElement.push([selector, "<>", null]);
          filterElement.push([selector, "=", null]);
        }
      } else {
        var currentFilter = [selector, i === j ? groups[j].desc ? ">" : "<" : "=", path[j]];
        if ("<" === currentFilter[1]) {
          filterElement.push([currentFilter, "or", [selector, "=", null]]);
        } else {
          filterElement.push(currentFilter);
        }
      }
    }
    filter.push(m_core_default.combineFilters(filterElement));
  }
  filter = m_core_default.combineFilters(filter, "or");
  return m_core_default.combineFilters([filter, storeLoadOptions.filter]);
}
var GroupingHelper = class_default.inherit(/* @__PURE__ */ function() {
  var findGroupInfoByKey = function(groupsInfo, key) {
    var {
      hash
    } = groupsInfo;
    return hash && hash[JSON.stringify(key)];
  };
  var getGroupInfoIndexByOffset = function(groupsInfo, offset2) {
    var leftIndex = 0;
    var rightIndex = groupsInfo.length - 1;
    if (!groupsInfo.length) {
      return 0;
    }
    do {
      var middleIndex = rightIndex + leftIndex >> 1;
      if (groupsInfo[middleIndex].offset > offset2) {
        rightIndex = middleIndex;
      } else {
        leftIndex = middleIndex;
      }
    } while (rightIndex - leftIndex > 1);
    var index2;
    for (index2 = leftIndex; index2 <= rightIndex; index2++) {
      if (groupsInfo[index2].offset > offset2) {
        break;
      }
    }
    return index2;
  };
  return {
    ctor(dataSourceAdapter) {
      this._dataSource = dataSourceAdapter;
      this.reset();
    },
    reset() {
      this._groupsInfo = [];
      this._totalCountCorrection = 0;
    },
    totalCountCorrection() {
      return this._totalCountCorrection;
    },
    updateTotalItemsCount(totalCountCorrection) {
      this._totalCountCorrection = totalCountCorrection || 0;
    },
    isGroupItemCountable(item) {
      return !this._isVirtualPaging() || !item.isContinuation;
    },
    _isVirtualPaging() {
      var scrollingMode = this._dataSource.option("scrolling.mode");
      return "virtual" === scrollingMode || "infinite" === scrollingMode;
    },
    itemsCount() {
      var dataSourceAdapter = this._dataSource;
      var dataSource = dataSourceAdapter._dataSource;
      var groupCount = m_core_default.normalizeSortingInfo(dataSource.group() || []).length;
      var itemsCount = function calculateItemsCount(that, items, groupsCount) {
        var result2 = 0;
        if (items) {
          if (!groupsCount) {
            result2 = items.length;
          } else {
            for (var i = 0; i < items.length; i++) {
              if (that.isGroupItemCountable(items[i])) {
                result2++;
              }
              result2 += calculateItemsCount(that, items[i].items, groupsCount - 1);
            }
          }
        }
        return result2;
      }(this, dataSource.items(), groupCount);
      return itemsCount;
    },
    foreachGroups(callback, childrenAtFirst, foreachCollapsedGroups, updateOffsets, updateParentOffsets) {
      var that = this;
      return function foreachGroupsCore(groupsInfo, callback2, childrenAtFirst2, parents) {
        var callbackResults = [];
        function executeCallback(callback3, data3, parents2, callbackResults2) {
          var callbackResult2 = data3 && callback3(data3, parents2);
          callbackResult2 && callbackResults2.push(callbackResult2);
          return callbackResult2;
        }
        for (var i = 0; i < groupsInfo.length; i++) {
          parents.push(groupsInfo[i].data);
          if (!childrenAtFirst2 && false === executeCallback(callback2, groupsInfo[i].data, parents, callbackResults)) {
            return false;
          }
          if (!groupsInfo[i].data || groupsInfo[i].data.isExpanded || foreachCollapsedGroups) {
            var {
              children
            } = groupsInfo[i];
            var callbackResult = children.length && foreachGroupsCore(children, callback2, childrenAtFirst2, parents);
            callbackResult && callbackResults.push(callbackResult);
            if (false === callbackResult) {
              return false;
            }
          }
          if (childrenAtFirst2 && false === executeCallback(callback2, groupsInfo[i].data, parents, callbackResults)) {
            return false;
          }
          if (!groupsInfo[i].data || groupsInfo[i].data.offset !== groupsInfo[i].offset) {
            updateOffsets = true;
          }
          parents.pop();
        }
        var currentParents = updateParentOffsets && parents.slice(0);
        return updateOffsets && when.apply(renderer_default, callbackResults).always(() => {
          that._updateGroupInfoOffsets(groupsInfo, currentParents);
        });
      }(that._groupsInfo, callback, childrenAtFirst, []);
    },
    _updateGroupInfoOffsets(groupsInfo, parents) {
      parents = parents || [];
      for (var index2 = 0; index2 < groupsInfo.length; index2++) {
        var groupInfo = groupsInfo[index2];
        if (groupInfo.data && groupInfo.data.offset !== groupInfo.offset) {
          groupInfo.offset = groupInfo.data.offset;
          for (var parentIndex = 0; parentIndex < parents.length; parentIndex++) {
            parents[parentIndex].offset = groupInfo.offset;
          }
        }
      }
      groupsInfo.sort((a, b) => a.offset - b.offset);
    },
    findGroupInfo(path) {
      var groupInfo;
      var groupsInfo = this._groupsInfo;
      for (var pathIndex = 0; groupsInfo && pathIndex < path.length; pathIndex++) {
        groupInfo = findGroupInfoByKey(groupsInfo, path[pathIndex]);
        groupsInfo = groupInfo && groupInfo.children;
      }
      return groupInfo && groupInfo.data;
    },
    addGroupInfo(groupInfoData) {
      var groupInfo;
      var {
        path
      } = groupInfoData;
      var groupsInfo = this._groupsInfo;
      for (var pathIndex = 0; pathIndex < path.length; pathIndex++) {
        groupInfo = findGroupInfoByKey(groupsInfo, path[pathIndex]);
        if (!groupInfo) {
          groupInfo = {
            key: path[pathIndex],
            offset: groupInfoData.offset,
            data: {
              offset: groupInfoData.offset,
              isExpanded: true,
              path: path.slice(0, pathIndex + 1)
            },
            children: []
          };
          var index2 = getGroupInfoIndexByOffset(groupsInfo, groupInfoData.offset);
          groupsInfo.splice(index2, 0, groupInfo);
          groupsInfo.hash = groupsInfo.hash || {};
          groupsInfo.hash[JSON.stringify(groupInfo.key)] = groupInfo;
        }
        if (pathIndex === path.length - 1) {
          groupInfo.data = groupInfoData;
          if (groupInfo.offset !== groupInfoData.offset) {
            this._updateGroupInfoOffsets(groupsInfo);
          }
        }
        groupsInfo = groupInfo.children;
      }
    },
    allowCollapseAll: () => true,
    refresh(options2) {
      var {
        storeLoadOptions
      } = options2;
      var groups = normalizeSortingInfo(storeLoadOptions.group || []);
      var oldGroups = "_group" in this ? normalizeSortingInfo(this._group || []) : groups;
      var groupsCount = Math.min(oldGroups.length, groups.length);
      this._group = storeLoadOptions.group;
      for (var groupIndex = 0; groupIndex < groupsCount; groupIndex++) {
        if (oldGroups[groupIndex].selector !== groups[groupIndex].selector) {
          groupsCount = groupIndex;
          break;
        }
      }
      if (!groupsCount) {
        this.reset();
      } else {
        !function cleanGroupsInfo(groupsInfo, groupIndex2, groupsCount2) {
          for (var i = 0; i < groupsInfo.length; i++) {
            if (groupIndex2 + 1 >= groupsCount2) {
              groupsInfo[i].children = [];
            } else {
              cleanGroupsInfo(groupsInfo[i].children, groupIndex2 + 1, groupsCount2);
            }
          }
        }(this._groupsInfo, 0, groupsCount);
      }
    },
    handleDataLoading() {
    },
    handleDataLoaded(options2, callBase) {
      callBase(options2);
    },
    handleDataLoadedCore(options2, callBase) {
      callBase(options2);
    }
  };
}());

// node_modules/devextreme/esm/__internal/grids/data_grid/grouping/m_grouping_collapsed.js
function getContinuationGroupCount(groupOffset, pageSize, groupSize, groupIndex) {
  groupIndex = groupIndex || 0;
  if (pageSize > 1 && groupSize > 0) {
    var pageOffset = groupOffset - Math.floor(groupOffset / pageSize) * pageSize || pageSize;
    pageOffset += groupSize - groupIndex - 2;
    if (pageOffset < 0) {
      pageOffset += pageSize;
    }
    return Math.floor(pageOffset / (pageSize - groupIndex - 1));
  }
  return 0;
}
var GroupingHelper2 = GroupingHelper.inherit(/* @__PURE__ */ function() {
  var foreachExpandedGroups = function(that, callback, updateGroups) {
    return that.foreachGroups((groupInfo, parents) => {
      if (groupInfo.isExpanded) {
        return callback(groupInfo, parents);
      }
    }, true, false, updateGroups, updateGroups);
  };
  var processGroupItems = function processGroupItems2(that, items, groupsCount, expandedInfo, path, isCustomLoading, isLastGroupExpanded) {
    var isExpanded;
    expandedInfo.items = expandedInfo.items || [];
    expandedInfo.paths = expandedInfo.paths || [];
    expandedInfo.count = expandedInfo.count || 0;
    expandedInfo.lastCount = expandedInfo.lastCount || 0;
    if (!groupsCount) {
      return;
    }
    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      if (void 0 !== item.items) {
        path.push(item.key);
        if (isCustomLoading) {
          isExpanded = true;
        } else {
          var groupInfo = that.findGroupInfo(path);
          isExpanded = groupInfo && groupInfo.isExpanded;
        }
        if (!isExpanded) {
          item.collapsedItems = item.items;
          item.items = null;
        } else if (item.items) {
          processGroupItems2(that, item.items, groupsCount - 1, expandedInfo, path, isCustomLoading, isLastGroupExpanded);
        } else if (1 === groupsCount && item.count && (!isCustomLoading || isLastGroupExpanded)) {
          expandedInfo.items.push(item);
          expandedInfo.paths.push(path.slice(0));
          expandedInfo.count += expandedInfo.lastCount;
          expandedInfo.lastCount = item.count;
        }
        path.pop();
      }
    }
  };
  var updateGroupInfoItem = function(that, item, isLastGroupLevel, path, offset2) {
    var groupInfo = that.findGroupInfo(path);
    var count;
    if (!groupInfo) {
      if (isLastGroupLevel) {
        count = item.count > 0 ? item.count : item.items.length;
      }
      that.addGroupInfo({
        isExpanded: that._isGroupExpanded(path.length - 1),
        path: path.slice(0),
        offset: offset2,
        count: count || 0
      });
    } else {
      if (isLastGroupLevel) {
        groupInfo.count = item.count > 0 ? item.count : item.items && item.items.length || 0;
      } else {
        item.count = groupInfo.count || item.count;
      }
      groupInfo.offset = offset2;
    }
  };
  var updateGroupInfos = function updateGroupInfos2(that, options2, items, loadedGroupCount, groupIndex, path, parentIndex) {
    var groupCount = options2.group ? options2.group.length : 0;
    var isLastGroupLevel = groupCount === loadedGroupCount;
    var remotePaging = options2.remoteOperations.paging;
    var offset2 = 0;
    var totalCount = 0;
    var count;
    groupIndex = groupIndex || 0;
    path = path || [];
    if (remotePaging && !parentIndex) {
      offset2 = 0 === groupIndex ? options2.skip || 0 : options2.skips[groupIndex - 1] || 0;
    }
    if (groupIndex >= loadedGroupCount) {
      return items.length;
    }
    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      if (item) {
        path.push(item.key);
        if (!item.count && !item.items || void 0 === item.items) {
          return -1;
        }
        updateGroupInfoItem(that, item, isLastGroupLevel, path, offset2 + i);
        count = item.items ? updateGroupInfos2(that, options2, item.items, loadedGroupCount, groupIndex + 1, path, i) : item.count || -1;
        if (count < 0) {
          return -1;
        }
        totalCount += count;
        path.pop();
      }
    }
    return totalCount;
  };
  var isGroupExpanded = function(groups, groupIndex) {
    return groups && groups.length && groups[groupIndex] && !!groups[groupIndex].isExpanded;
  };
  var getTotalOffset = function(groupInfos, pageSize, offset2) {
    var groupSize;
    var totalOffset = offset2;
    for (var groupIndex = 0; groupIndex < groupInfos.length; groupIndex++) {
      groupSize = groupInfos[groupIndex].offset + 1;
      if (groupIndex > 0) {
        groupSize += groupInfos[groupIndex - 1].childrenTotalCount;
        if (pageSize) {
          groupSize += getContinuationGroupCount(totalOffset, pageSize, groupSize, groupIndex - 1) * groupIndex;
        }
      }
      totalOffset += groupSize;
    }
    return totalOffset;
  };
  function applyContinuationToGroupItem(options2, expandedInfo, groupLevel, expandedItemIndex) {
    var item = expandedInfo.items[expandedItemIndex];
    var skip = options2.skips && options2.skips[groupLevel];
    var take = options2.takes && options2.takes[groupLevel];
    var isLastExpandedItem = expandedItemIndex === expandedInfo.items.length - 1;
    var isFirstExpandedItem = 0 === expandedItemIndex;
    var lastExpandedItemSkip = isFirstExpandedItem && skip || 0;
    var isItemsTruncatedByTake = item.count > take + lastExpandedItemSkip;
    if (isFirstExpandedItem && void 0 !== skip) {
      item.isContinuation = true;
    }
    if (isLastExpandedItem && void 0 !== take && isItemsTruncatedByTake) {
      item.isContinuationOnNextPage = true;
    }
  }
  function isDataDeferred(data3) {
    return !Array.isArray(data3);
  }
  function makeDataDeferred(options2) {
    if (!isDataDeferred(options2.data)) {
      options2.data = new Deferred();
    }
  }
  function loadGroupItems(that, options2, loadedGroupCount, expandedInfo, groupLevel, data3) {
    if (!options2.isCustomLoading) {
      expandedInfo = {};
      processGroupItems(that, data3, loadedGroupCount, expandedInfo, []);
      !function(options3, expandedInfo2, currentGroupCount) {
        var currentGroupIndex = currentGroupCount - 1;
        var groupCount2 = options3.group ? options3.group.length : 0;
        expandedInfo2.skip = options3.skips && options3.skips[currentGroupIndex];
        if (options3.takes && void 0 !== options3.takes[currentGroupIndex]) {
          if (groupCount2 === currentGroupCount) {
            expandedInfo2.take = expandedInfo2.count ? expandedInfo2.count - (expandedInfo2.skip || 0) : 0;
          } else {
            expandedInfo2.take = 0;
          }
          expandedInfo2.take += options3.takes[currentGroupIndex];
        }
      }(options2, expandedInfo, loadedGroupCount);
    }
    var groupCount = options2.group ? options2.group.length : 0;
    if (expandedInfo.paths.length && groupCount - loadedGroupCount > 0) {
      makeDataDeferred(options2);
      !function(that2, options3, expandedInfo2, loadedGroupCount2, groupLevel2, data4) {
        var groups = options3.group || [];
        var currentGroup = groups[groupLevel2 + 1];
        var deferreds = [];
        each(expandedInfo2.paths, (expandedItemIndex) => {
          var _a2;
          var loadOptions = {
            requireTotalCount: false,
            requireGroupCount: true,
            group: [currentGroup],
            groupSummary: options3.storeLoadOptions.groupSummary,
            filter: createGroupFilter(expandedInfo2.paths[expandedItemIndex], {
              filter: options3.storeLoadOptions.filter,
              group: groups
            }),
            select: options3.storeLoadOptions.select,
            langParams: null === (_a2 = options3.storeLoadOptions) || void 0 === _a2 ? void 0 : _a2.langParams
          };
          if (0 === expandedItemIndex) {
            loadOptions.skip = expandedInfo2.skip || 0;
          }
          if (expandedItemIndex === expandedInfo2.paths.length - 1) {
            loadOptions.take = expandedInfo2.take;
          }
          var loadResult = 0 === loadOptions.take ? [] : that2._dataSource.loadFromStore(loadOptions);
          when(loadResult).done((data5) => {
            var item = expandedInfo2.items[expandedItemIndex];
            applyContinuationToGroupItem(options3, expandedInfo2, groupLevel2, expandedItemIndex);
            item.items = data5;
          });
          deferreds.push(loadResult);
        });
        when.apply(null, deferreds).done(() => {
          updateGroupInfos(that2, options3, data4, loadedGroupCount2 + 1);
          loadGroupItems(that2, options3, loadedGroupCount2 + 1, expandedInfo2, groupLevel2 + 1, data4);
        });
      }(that, options2, expandedInfo, loadedGroupCount, groupLevel, data3);
    } else if (expandedInfo.paths.length && options2.storeLoadOptions.group) {
      makeDataDeferred(options2);
      !function(that2, options3, expandedInfo2, data4) {
        var expandedFilters = [];
        var groups = options3.group || [];
        each(expandedInfo2.paths, (_, expandedPath) => {
          expandedFilters.push(createGroupFilter(expandedPath, {
            group: options3.isCustomLoading ? options3.storeLoadOptions.group : groups
          }));
        });
        var {
          filter
        } = options3.storeLoadOptions;
        if (!options3.storeLoadOptions.isLoadingAll) {
          filter = m_core_default.combineFilters([filter, m_core_default.combineFilters(expandedFilters, "or")]);
        }
        var loadOptions = extend({}, options3.storeLoadOptions, {
          requireTotalCount: false,
          requireGroupCount: false,
          group: null,
          sort: groups.concat(m_core_default.normalizeSortingInfo(options3.storeLoadOptions.sort || [])),
          filter
        });
        var isPagingLocal = that2._dataSource.isLastLevelGroupItemsPagingLocal();
        if (!isPagingLocal) {
          loadOptions.skip = expandedInfo2.skip;
          loadOptions.take = expandedInfo2.take;
        }
        when(0 === expandedInfo2.take ? [] : that2._dataSource.loadFromStore(loadOptions)).done((items) => {
          if (isPagingLocal) {
            items = that2._dataSource.sortLastLevelGroupItems(items, groups, expandedInfo2.paths);
            items = expandedInfo2.skip ? items.slice(expandedInfo2.skip) : items;
            items = expandedInfo2.take ? items.slice(0, expandedInfo2.take) : items;
          }
          each(expandedInfo2.items, (index2, item) => {
            var itemCount = item.count - (0 === index2 && expandedInfo2.skip || 0);
            var expandedItems = items.splice(0, itemCount);
            applyContinuationToGroupItem(options3, expandedInfo2, groups.length - 1, index2);
            item.items = expandedItems;
          });
          options3.data.resolve(data4);
        }).fail(options3.data.reject);
      }(that, options2, expandedInfo, data3);
    } else if (isDataDeferred(options2.data)) {
      options2.data.resolve(data3);
    }
  }
  var loadGroupTotalCount = function(dataSource, options2) {
    var d = new Deferred();
    var isGrouping = !!(options2.group && options2.group.length);
    var loadOptions = extend({
      skip: 0,
      take: 1,
      requireGroupCount: isGrouping,
      requireTotalCount: !isGrouping
    }, options2, {
      group: isGrouping ? options2.group : null
    });
    dataSource.load(loadOptions).done((data3, extra) => {
      var count = extra && (isGrouping ? extra.groupCount : extra.totalCount);
      if (!isFinite(count)) {
        d.reject(errors.Error(isGrouping ? "E4022" : "E4021"));
        return;
      }
      d.resolve(count);
    }).fail(d.reject.bind(d));
    return d;
  };
  return {
    updateTotalItemsCount(options2) {
      var totalItemsCount = 0;
      var totalCount = options2.extra && options2.extra.totalCount || 0;
      var groupCount = options2.extra && options2.extra.groupCount || 0;
      var pageSize = this._dataSource.pageSize();
      var isVirtualPaging2 = this._isVirtualPaging();
      foreachExpandedGroups(this, (groupInfo) => {
        groupInfo.childrenTotalCount = 0;
      });
      foreachExpandedGroups(this, (groupInfo, parents) => {
        var totalOffset = getTotalOffset(parents, isVirtualPaging2 ? 0 : pageSize, totalItemsCount);
        var count = groupInfo.count + groupInfo.childrenTotalCount;
        if (!isVirtualPaging2) {
          count += getContinuationGroupCount(totalOffset, pageSize, count, parents.length - 1);
        }
        if (parents[parents.length - 2]) {
          parents[parents.length - 2].childrenTotalCount += count;
        } else {
          totalItemsCount += count;
        }
      });
      this.callBase(totalItemsCount - totalCount + groupCount);
    },
    _isGroupExpanded(groupIndex) {
      var groups = this._dataSource.group();
      return isGroupExpanded(groups, groupIndex);
    },
    _updatePagingOptions(options2, callback) {
      var isVirtualPaging2 = this._isVirtualPaging();
      var pageSize = this._dataSource.pageSize();
      var skips = [];
      var takes = [];
      var skipChildrenTotalCount = 0;
      var childrenTotalCount = 0;
      if (options2.take) {
        foreachExpandedGroups(this, (groupInfo) => {
          groupInfo.childrenTotalCount = 0;
          groupInfo.skipChildrenTotalCount = 0;
        });
        foreachExpandedGroups(this, (groupInfo, parents) => {
          var take;
          var takeCorrection = 0;
          var parentTakeCorrection = 0;
          var totalOffset = getTotalOffset(parents, isVirtualPaging2 ? 0 : pageSize, childrenTotalCount);
          var continuationGroupCount = 0;
          var skipContinuationGroupCount = 0;
          var groupInfoCount = groupInfo.count + groupInfo.childrenTotalCount;
          var childrenGroupInfoCount = groupInfoCount;
          callback && callback(groupInfo, totalOffset);
          var skip = options2.skip - totalOffset;
          if (totalOffset <= options2.skip + options2.take && groupInfoCount) {
            take = options2.take;
            if (!isVirtualPaging2) {
              continuationGroupCount = getContinuationGroupCount(totalOffset, pageSize, groupInfoCount, parents.length - 1);
              groupInfoCount += continuationGroupCount * parents.length;
              childrenGroupInfoCount += continuationGroupCount;
              if (pageSize && skip >= 0) {
                takeCorrection = parents.length;
                parentTakeCorrection = parents.length - 1;
                skipContinuationGroupCount = Math.floor(skip / pageSize);
              }
            }
            if (skip >= 0) {
              if (totalOffset + groupInfoCount > options2.skip) {
                skips.unshift(skip - skipContinuationGroupCount * takeCorrection - groupInfo.skipChildrenTotalCount);
              }
              if (totalOffset + groupInfoCount >= options2.skip + take) {
                takes.unshift(take - takeCorrection - groupInfo.childrenTotalCount + groupInfo.skipChildrenTotalCount);
              }
            } else if (totalOffset + groupInfoCount >= options2.skip + take) {
              takes.unshift(take + skip - groupInfo.childrenTotalCount);
            }
          }
          if (totalOffset <= options2.skip) {
            if (parents[parents.length - 2]) {
              parents[parents.length - 2].skipChildrenTotalCount += Math.min(childrenGroupInfoCount, skip + 1 - skipContinuationGroupCount * parentTakeCorrection);
            } else {
              skipChildrenTotalCount += Math.min(childrenGroupInfoCount, skip + 1);
            }
          }
          if (totalOffset <= options2.skip + take) {
            groupInfoCount = Math.min(childrenGroupInfoCount, skip + take - (skipContinuationGroupCount + 1) * parentTakeCorrection);
            if (parents[parents.length - 2]) {
              parents[parents.length - 2].childrenTotalCount += groupInfoCount;
            } else {
              childrenTotalCount += groupInfoCount;
            }
          }
        });
        options2.skip -= skipChildrenTotalCount;
        options2.take -= childrenTotalCount - skipChildrenTotalCount;
      }
      options2.skips = skips;
      options2.takes = takes;
    },
    changeRowExpand(path) {
      var groupInfo = this.findGroupInfo(path);
      var dataSource = this._dataSource;
      var remoteGroupPaging = dataSource.remoteOperations().groupPaging;
      var groups = m_core_default.normalizeSortingInfo(dataSource.group());
      if (groupInfo) {
        groupInfo.isExpanded = !groupInfo.isExpanded;
        if (remoteGroupPaging && groupInfo.isExpanded && path.length < groups.length) {
          return loadGroupTotalCount(dataSource, {
            filter: createGroupFilter(path, {
              filter: dataSource.lastLoadOptions().filter,
              group: dataSource.group()
            }),
            group: [groups[path.length]],
            select: dataSource.select()
          }).done((groupCount) => {
            groupInfo.count = groupCount;
          });
        }
        return new Deferred().resolve();
      }
      return new Deferred().reject();
    },
    handleDataLoading(options2) {
      var {
        storeLoadOptions
      } = options2;
      var groups = m_core_default.normalizeSortingInfo(storeLoadOptions.group || options2.loadOptions.group);
      if (options2.isCustomLoading || !groups.length) {
        return;
      }
      if (options2.remoteOperations.grouping) {
        var remotePaging = this._dataSource.remoteOperations().paging;
        storeLoadOptions.group = m_core_default.normalizeSortingInfo(storeLoadOptions.group);
        storeLoadOptions.group.forEach((group, index2) => {
          var isLastGroup = index2 === storeLoadOptions.group.length - 1;
          group.isExpanded = !remotePaging || !isLastGroup;
        });
      }
      options2.group = options2.group || groups;
      if (options2.remoteOperations.paging) {
        options2.skip = storeLoadOptions.skip;
        options2.take = storeLoadOptions.take;
        storeLoadOptions.requireGroupCount = true;
        storeLoadOptions.group = groups.slice(0, 1);
        this._updatePagingOptions(options2);
        storeLoadOptions.skip = options2.skip;
        storeLoadOptions.take = options2.take;
      } else {
        options2.skip = options2.loadOptions.skip;
        options2.take = options2.loadOptions.take;
        this._updatePagingOptions(options2);
      }
    },
    handleDataLoadedCore(options2, callBase) {
      var loadedGroupCount = m_core_default.normalizeSortingInfo(options2.storeLoadOptions.group || options2.loadOptions.group).length;
      var groupCount = options2.group ? options2.group.length : 0;
      var totalCount;
      var expandedInfo = {};
      if (options2.isCustomLoading) {
        callBase(options2);
        processGroupItems(this, options2.data, loadedGroupCount, expandedInfo, [], options2.isCustomLoading, options2.storeLoadOptions.isLoadingAll);
      } else {
        if (!options2.remoteOperations.paging) {
          this.foreachGroups((groupInfo) => {
            groupInfo.count = 0;
          });
        }
        totalCount = updateGroupInfos(this, options2, options2.data, loadedGroupCount);
        if (totalCount < 0) {
          options2.data = new Deferred().reject(ui_errors_default.Error("E1037"));
          return;
        }
        if (!options2.remoteOperations.paging) {
          if (loadedGroupCount && options2.extra && options2.loadOptions.requireTotalCount) {
            options2.extra.totalCount = totalCount;
            options2.extra.groupCount = options2.data.length;
          }
        }
        if (groupCount && options2.storeLoadOptions.requireGroupCount && !isFinite(options2.extra.groupCount)) {
          options2.data = new Deferred().reject(errors.Error("E4022"));
          return;
        }
        this.updateTotalItemsCount(options2);
        if (!options2.remoteOperations.paging) {
          this._updatePagingOptions(options2);
          options2.lastLoadOptions.skips = options2.skips;
          options2.lastLoadOptions.takes = options2.takes;
        }
        callBase(options2);
        if (!options2.remoteOperations.paging) {
          this._processPaging(options2, loadedGroupCount);
        }
      }
      loadGroupItems(this, options2, loadedGroupCount, expandedInfo, 0, options2.data);
    },
    _processSkips(items, skips, groupCount) {
      if (!groupCount) {
        return;
      }
      var firstItem = items[0];
      var skip = skips[0];
      var children = firstItem && firstItem.items;
      if (void 0 !== skip) {
        firstItem.isContinuation = true;
        if (children) {
          firstItem.items = children.slice(skip);
          this._processSkips(firstItem.items, skips.slice(1), groupCount - 1);
        }
      }
    },
    _processTakes(items, skips, takes, groupCount, parents) {
      if (!groupCount || !items) {
        return;
      }
      parents = parents || [];
      var lastItem = items[items.length - 1];
      var children = lastItem && lastItem.items;
      var take = takes[0];
      var skip = skips[0];
      if (lastItem) {
        var maxTakeCount = lastItem.count - (lastItem.isContinuation && skip || 0) || children.length;
        if (void 0 !== take && maxTakeCount > take) {
          lastItem.isContinuationOnNextPage = true;
          parents.forEach((parent) => {
            parent.isContinuationOnNextPage = true;
          });
          if (children) {
            children = children.slice(0, take);
            lastItem.items = children;
          }
        }
        parents.push(lastItem);
        this._processTakes(children, skips.slice(1), takes.slice(1), groupCount - 1, parents);
      }
    },
    _processPaging(options2, groupCount) {
      this._processSkips(options2.data, options2.skips, groupCount);
      this._processTakes(options2.data, options2.skips, options2.takes, groupCount);
    },
    isLastLevelGroupItemsPagingLocal: () => false,
    sortLastLevelGroupItems: (items) => items,
    refresh(options2, operationTypes) {
      var that = this;
      var dataSource = that._dataSource;
      var {
        storeLoadOptions
      } = options2;
      var group = options2.group || options2.storeLoadOptions.group;
      var oldGroups = m_core_default.normalizeSortingInfo(that._group);
      var isExpanded;
      var groupIndex;
      function handleGroup(groupInfo, parents) {
        if (parents.length === groupIndex + 1) {
          groupInfo.isExpanded = isExpanded;
        }
      }
      for (groupIndex = 0; groupIndex < oldGroups.length; groupIndex++) {
        isExpanded = isGroupExpanded(group, groupIndex);
        if (isGroupExpanded(that._group, groupIndex) !== isExpanded) {
          that.foreachGroups(handleGroup);
        }
      }
      that.callBase.apply(this, arguments);
      if (group && options2.remoteOperations.paging && operationTypes.reload) {
        return foreachExpandedGroups(that, (groupInfo) => {
          var groupCountQuery = loadGroupTotalCount(dataSource, {
            filter: createGroupFilter(groupInfo.path, {
              filter: storeLoadOptions.filter,
              group
            }),
            group: group.slice(groupInfo.path.length),
            select: storeLoadOptions.select
          });
          var groupOffsetQuery = loadGroupTotalCount(dataSource, {
            filter: createOffsetFilter(groupInfo.path, {
              filter: storeLoadOptions.filter,
              group
            }, true),
            group: group.slice(groupInfo.path.length - 1, groupInfo.path.length),
            select: storeLoadOptions.select
          });
          return when(groupOffsetQuery, groupCountQuery).done((offset2, count) => {
            offset2 = parseInt(offset2.length ? offset2[0] : offset2);
            count = parseInt(count.length ? count[0] : count);
            groupInfo.offset = offset2;
            if (groupInfo.count !== count) {
              groupInfo.count = count;
              that.updateTotalItemsCount(options2);
            }
          });
        }, true);
      }
    }
  };
}());

// node_modules/devextreme/esm/__internal/grids/data_grid/grouping/m_grouping_expanded.js
var loadTotalCount = function(dataSource, options2) {
  var d = new Deferred();
  var loadOptions = extend({
    skip: 0,
    take: 1,
    requireTotalCount: true
  }, options2);
  dataSource.load(loadOptions).done((data3, extra) => {
    d.resolve(extra && extra.totalCount);
  }).fail(d.reject.bind(d));
  return d;
};
var GroupingHelper3 = GroupingHelper.inherit(/* @__PURE__ */ function() {
  var foreachCollapsedGroups = function(that, callback, updateOffsets) {
    return that.foreachGroups((groupInfo) => {
      if (!groupInfo.isExpanded) {
        return callback(groupInfo);
      }
    }, false, false, updateOffsets, true);
  };
  var correctSkipLoadOption = function(that, skip) {
    var skipCorrection = 0;
    var resultSkip = skip || 0;
    if (skip) {
      foreachCollapsedGroups(that, (groupInfo) => {
        if (groupInfo.offset - skipCorrection >= skip) {
          return false;
        }
        skipCorrection += groupInfo.count - 1;
      });
      resultSkip += skipCorrection;
    }
    return resultSkip;
  };
  var pathEquals = function(path1, path2) {
    if (path1.length !== path2.length) {
      return false;
    }
    for (var i = 0; i < path1.length; i++) {
      if (!keysEqual(null, path1[i], path2[i])) {
        return false;
      }
    }
    return true;
  };
  var updateGroupOffsets = function updateGroupOffsets2(that, items, path, offset2, additionalGroupInfo) {
    if (!items) {
      return;
    }
    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      if ("key" in item && void 0 !== item.items) {
        path.push(item.key);
        if (additionalGroupInfo && pathEquals(additionalGroupInfo.path, path) && !item.isContinuation) {
          additionalGroupInfo.offset = offset2;
        }
        var groupInfo = that.findGroupInfo(path);
        if (groupInfo && !item.isContinuation) {
          groupInfo.offset = offset2;
        }
        if (groupInfo && !groupInfo.isExpanded) {
          offset2 += groupInfo.count;
        } else {
          offset2 = updateGroupOffsets2(that, item.items, path, offset2, additionalGroupInfo);
        }
        path.pop();
      } else {
        offset2++;
      }
    }
    return offset2;
  };
  var getGroupCount = function getGroupCount2(item, groupCount) {
    var count = item.count || item.items.length;
    if (!item.count && groupCount > 1) {
      count = 0;
      for (var i = 0; i < item.items.length; i++) {
        count += getGroupCount2(item.items[i], groupCount - 1);
      }
    }
    return count;
  };
  return {
    handleDataLoading(options2) {
      var {
        storeLoadOptions
      } = options2;
      var collapsedGroups = [];
      var collapsedItemsCount = 0;
      var skipFirstItem = false;
      var take;
      var {
        group
      } = options2.loadOptions;
      var skipCorrection = 0;
      !function(storeLoadOptions2, loadOptions2) {
        if (loadOptions2.group) {
          var groups = m_core_default.normalizeSortingInfo(loadOptions2.group);
          var sorts = m_core_default.normalizeSortingInfo(storeLoadOptions2.sort);
          storeLoadOptions2.sort = store_helper_default.arrangeSortingInfo(groups, sorts);
          delete loadOptions2.group;
        }
      }(storeLoadOptions, options2.loadOptions);
      options2.group = options2.group || group;
      if (options2.isCustomLoading) {
        return;
      }
      var loadOptions = extend({}, storeLoadOptions);
      loadOptions.skip = correctSkipLoadOption(this, storeLoadOptions.skip);
      if (loadOptions.skip && loadOptions.take && group) {
        loadOptions.skip--;
        loadOptions.take++;
        skipFirstItem = true;
      }
      if (loadOptions.take && group) {
        take = loadOptions.take;
        loadOptions.take++;
      }
      foreachCollapsedGroups(this, (groupInfo) => {
        if (groupInfo.offset >= loadOptions.skip + loadOptions.take + skipCorrection) {
          return false;
        }
        if (groupInfo.offset >= loadOptions.skip + skipCorrection && groupInfo.count) {
          skipCorrection += groupInfo.count - 1;
          collapsedGroups.push(groupInfo);
          collapsedItemsCount += groupInfo.count;
        }
      });
      each(collapsedGroups, function() {
        loadOptions.filter = function(path, storeLoadOptions2, group2) {
          var groups = m_core_default.normalizeSortingInfo(group2 || storeLoadOptions2.group);
          var filter = [];
          for (var i = 0; i < path.length; i++) {
            var filterElement = [];
            for (var j = 0; j <= i; j++) {
              filterElement.push([groups[j].selector, i === j ? "<>" : "=", path[j]]);
            }
            filter.push(m_core_default.combineFilters(filterElement));
          }
          filter = m_core_default.combineFilters(filter, "or");
          return m_core_default.combineFilters([filter, storeLoadOptions2.filter]);
        }(this.path, loadOptions, group);
      });
      options2.storeLoadOptions = loadOptions;
      options2.collapsedGroups = collapsedGroups;
      options2.collapsedItemsCount = collapsedItemsCount;
      options2.skip = loadOptions.skip || 0;
      options2.skipFirstItem = skipFirstItem;
      options2.take = take;
    },
    handleDataLoaded(options2, callBase) {
      var {
        collapsedGroups
      } = options2;
      var groups = m_core_default.normalizeSortingInfo(options2.group);
      var groupCount = groups.length;
      function appendCollapsedPath(data4, path, groups2, collapsedGroup, offset2) {
        if (!data4 || !path.length || !groups2.length) {
          return;
        }
        var keyValue;
        var i;
        var pathValue = toComparable(path[0], true);
        for (i = 0; i < data4.length; i++) {
          keyValue = toComparable(data4[i].key, true);
          if (offset2 >= collapsedGroup.offset || pathValue === keyValue) {
            break;
          } else {
            offset2 += getGroupCount(data4[i], groups2.length);
          }
        }
        if (!data4.length || pathValue !== keyValue) {
          data4.splice(i, 0, {
            key: path[0],
            items: [],
            count: 1 === path.length ? collapsedGroup.count : void 0
          });
        }
        appendCollapsedPath(data4[i].items, path.slice(1), groups2.slice(1), collapsedGroup, offset2);
      }
      if (options2.collapsedItemsCount && options2.extra && options2.extra.totalCount >= 0) {
        if (!options2.extra._totalCountWasIncreasedByCollapsedItems) {
          options2.extra.totalCount += options2.collapsedItemsCount;
          options2.extra._totalCountWasIncreasedByCollapsedItems = true;
        }
      }
      callBase(options2);
      if (groupCount) {
        var {
          data: data3
        } = options2;
        var query2 = query_default(data3);
        store_helper_default.multiLevelGroup(query2, groups).enumerate().done((groupedData) => {
          data3 = groupedData;
        });
        if (collapsedGroups) {
          for (var pathIndex = 0; pathIndex < collapsedGroups.length; pathIndex++) {
            appendCollapsedPath(data3, collapsedGroups[pathIndex].path, groups, collapsedGroups[pathIndex], options2.skip);
          }
        }
        if (!options2.isCustomLoading) {
          !function processGroupItems(that, items, path, offset2, skipFirstItem, take) {
            var removeLastItemsCount = 0;
            var needRemoveFirstItem = false;
            for (var i = 0; i < items.length; i++) {
              var item = items[i];
              if (void 0 !== item.items) {
                path.push(item.key);
                var groupInfo = that.findGroupInfo(path);
                if (groupInfo && !groupInfo.isExpanded) {
                  item.collapsedItems = item.items;
                  item.items = null;
                  offset2 += groupInfo.count;
                  take--;
                  if (take < 0) {
                    removeLastItemsCount++;
                  }
                  if (skipFirstItem) {
                    needRemoveFirstItem = true;
                  }
                } else if (item.items) {
                  var offsetInfo = processGroupItems(that, item.items, path, offset2, skipFirstItem, take);
                  if (skipFirstItem) {
                    if (offsetInfo.offset - offset2 > 1) {
                      item.isContinuation = true;
                    } else {
                      needRemoveFirstItem = true;
                    }
                  }
                  offset2 = offsetInfo.offset;
                  take = offsetInfo.take;
                  if (take < 0) {
                    if (item.items.length) {
                      item.isContinuationOnNextPage = true;
                    } else {
                      removeLastItemsCount++;
                    }
                  }
                }
                path.pop();
              } else {
                if (skipFirstItem) {
                  needRemoveFirstItem = true;
                }
                offset2++;
                take--;
                if (take < 0) {
                  removeLastItemsCount++;
                }
              }
              skipFirstItem = false;
            }
            if (needRemoveFirstItem) {
              items.splice(0, 1);
            }
            if (removeLastItemsCount) {
              items.splice(-removeLastItemsCount, removeLastItemsCount);
            }
            return {
              offset: offset2,
              take
            };
          }(this, data3, [], options2.skip, options2.skipFirstItem, options2.take);
        }
        options2.data = data3;
      }
    },
    isGroupItemCountable: (item) => null === item.items,
    updateTotalItemsCount() {
      var itemsCountCorrection = 0;
      foreachCollapsedGroups(this, (groupInfo) => {
        if (groupInfo.count) {
          itemsCountCorrection -= groupInfo.count - 1;
        }
      });
      this.callBase(itemsCountCorrection);
    },
    changeRowExpand(path) {
      var that = this;
      var dataSource = that._dataSource;
      var beginPageIndex = dataSource.beginPageIndex ? dataSource.beginPageIndex() : dataSource.pageIndex();
      var dataSourceItems = dataSource.items();
      var offset2 = correctSkipLoadOption(that, beginPageIndex * dataSource.pageSize());
      var groupInfo = that.findGroupInfo(path);
      var groupCountQuery;
      if (groupInfo && !groupInfo.isExpanded) {
        groupCountQuery = new Deferred().resolve(groupInfo.count);
      } else {
        groupCountQuery = loadTotalCount(dataSource, {
          filter: createGroupFilter(path, {
            filter: dataSource.filter(),
            group: dataSource.group()
          })
        });
      }
      return when(groupCountQuery).done((count) => {
        count = parseInt(count.length ? count[0] : count);
        if (groupInfo) {
          updateGroupOffsets(that, dataSourceItems, [], offset2);
          groupInfo.isExpanded = !groupInfo.isExpanded;
          groupInfo.count = count;
        } else {
          groupInfo = {
            offset: -1,
            count,
            path,
            isExpanded: false
          };
          updateGroupOffsets(that, dataSourceItems, [], offset2, groupInfo);
          if (groupInfo.offset >= 0) {
            that.addGroupInfo(groupInfo);
          }
        }
        that.updateTotalItemsCount();
      }).fail(function() {
        dataSource._eventsStrategy.fireEvent("loadError", arguments);
      });
    },
    allowCollapseAll: () => false,
    refresh(options2, operationTypes) {
      var that = this;
      var {
        storeLoadOptions
      } = options2;
      var dataSource = that._dataSource;
      this.callBase.apply(this, arguments);
      if (operationTypes.reload) {
        return foreachCollapsedGroups(that, (groupInfo) => {
          var groupCountQuery = loadTotalCount(dataSource, {
            filter: createGroupFilter(groupInfo.path, storeLoadOptions)
          });
          var groupOffsetQuery = loadTotalCount(dataSource, {
            filter: createOffsetFilter(groupInfo.path, storeLoadOptions)
          });
          return when(groupOffsetQuery, groupCountQuery).done((offset2, count) => {
            offset2 = parseInt(offset2.length ? offset2[0] : offset2);
            count = parseInt(count.length ? count[0] : count);
            groupInfo.offset = offset2;
            if (groupInfo.count !== count) {
              groupInfo.count = count;
              that.updateTotalItemsCount();
            }
          });
        }, true);
      }
    }
  };
}());

// node_modules/devextreme/esm/__internal/grids/data_grid/grouping/m_grouping.js
var DATAGRID_GROUP_PANEL_CLASS = "dx-datagrid-group-panel";
var DATAGRID_GROUP_PANEL_MESSAGE_CLASS = "dx-group-panel-message";
var DATAGRID_GROUP_PANEL_ITEM_CLASS = "dx-group-panel-item";
var DATAGRID_GROUP_PANEL_LABEL_CLASS = "dx-toolbar-label";
var DATAGRID_GROUP_PANEL_CONTAINER_CLASS = "dx-toolbar-item";
var DATAGRID_EXPAND_CLASS2 = "dx-datagrid-expand";
var DATAGRID_GROUP_ROW_CLASS = "dx-group-row";
var HEADER_FILTER_CLASS_SELECTOR2 = ".dx-header-filter";
var GroupingDataSourceAdapterExtender = {
  init() {
    this.callBase.apply(this, arguments);
    this._initGroupingHelper();
  },
  _initGroupingHelper(options2) {
    var grouping = this._grouping;
    var isAutoExpandAll = this.option("grouping.autoExpandAll");
    var isFocusedRowEnabled = this.option("focusedRowEnabled");
    var remoteOperations = options2 ? options2.remoteOperations : this.remoteOperations();
    var isODataRemoteOperations = remoteOperations.filtering && remoteOperations.sorting && remoteOperations.paging;
    if (isODataRemoteOperations && !remoteOperations.grouping && (isAutoExpandAll || !isFocusedRowEnabled)) {
      if (!grouping || grouping instanceof GroupingHelper2) {
        this._grouping = new GroupingHelper3(this);
      }
    } else if (!grouping || grouping instanceof GroupingHelper3) {
      this._grouping = new GroupingHelper2(this);
    }
  },
  totalItemsCount() {
    var totalCount = this.callBase();
    return totalCount > 0 && this._dataSource.group() && this._dataSource.requireTotalCount() ? totalCount + this._grouping.totalCountCorrection() : totalCount;
  },
  itemsCount() {
    return this._dataSource.group() ? this._grouping.itemsCount() || 0 : this.callBase.apply(this, arguments);
  },
  allowCollapseAll() {
    return this._grouping.allowCollapseAll();
  },
  isGroupItemCountable(item) {
    return this._grouping.isGroupItemCountable(item);
  },
  isRowExpanded(key) {
    var groupInfo = this._grouping.findGroupInfo(key);
    return groupInfo ? groupInfo.isExpanded : !this._grouping.allowCollapseAll();
  },
  collapseAll(groupIndex) {
    return this._collapseExpandAll(groupIndex, false);
  },
  expandAll(groupIndex) {
    return this._collapseExpandAll(groupIndex, true);
  },
  _collapseExpandAll(groupIndex, isExpand) {
    var dataSource = this._dataSource;
    var group = dataSource.group();
    var groups = m_core_default.normalizeSortingInfo(group || []);
    if (groups.length) {
      for (var i = 0; i < groups.length; i++) {
        if (void 0 === groupIndex || groupIndex === i) {
          groups[i].isExpanded = isExpand;
        } else if (group && group[i]) {
          groups[i].isExpanded = group[i].isExpanded;
        }
      }
      dataSource.group(groups);
      this._grouping.foreachGroups((groupInfo, parents) => {
        if (void 0 === groupIndex || groupIndex === parents.length - 1) {
          groupInfo.isExpanded = isExpand;
        }
      }, false, true);
      this.resetPagesCache();
    }
    return true;
  },
  refresh() {
    this.callBase.apply(this, arguments);
    return this._grouping.refresh.apply(this._grouping, arguments);
  },
  changeRowExpand(path) {
    var dataSource = this._dataSource;
    if (dataSource.group()) {
      dataSource.beginLoading();
      if (this._lastLoadOptions) {
        this._lastLoadOptions.groupExpand = true;
      }
      return this._changeRowExpandCore(path).always(() => {
        dataSource.endLoading();
      });
    }
  },
  _changeRowExpandCore(path) {
    return this._grouping.changeRowExpand(path);
  },
  _hasGroupLevelsExpandState(group, isExpanded) {
    if (group && Array.isArray(group)) {
      for (var i = 0; i < group.length; i++) {
        if (group[i].isExpanded === isExpanded) {
          return true;
        }
      }
    }
  },
  _customizeRemoteOperations(options2, operationTypes) {
    var {
      remoteOperations
    } = options2;
    if (options2.storeLoadOptions.group) {
      if (remoteOperations.grouping && !options2.isCustomLoading) {
        if (!remoteOperations.groupPaging || this._hasGroupLevelsExpandState(options2.storeLoadOptions.group, true)) {
          remoteOperations.paging = false;
        }
      }
      if (!remoteOperations.grouping && (!remoteOperations.sorting || !remoteOperations.filtering || options2.isCustomLoading || this._hasGroupLevelsExpandState(options2.storeLoadOptions.group, false))) {
        remoteOperations.paging = false;
      }
    } else if (!options2.isCustomLoading && remoteOperations.paging && operationTypes.grouping) {
      this.resetCache();
    }
    this.callBase.apply(this, arguments);
  },
  _handleDataLoading(options2) {
    this.callBase(options2);
    this._initGroupingHelper(options2);
    return this._grouping.handleDataLoading(options2);
  },
  _handleDataLoaded(options2) {
    return this._grouping.handleDataLoaded(options2, this.callBase.bind(this));
  },
  _handleDataLoadedCore(options2) {
    return this._grouping.handleDataLoadedCore(options2, this.callBase.bind(this));
  }
};
m_data_source_adapter_default2.extend(GroupingDataSourceAdapterExtender);
var GroupingDataControllerExtender = {
  init() {
    this.callBase();
    this.createAction("onRowExpanding");
    this.createAction("onRowExpanded");
    this.createAction("onRowCollapsing");
    this.createAction("onRowCollapsed");
  },
  _beforeProcessItems(items) {
    var groupColumns = this._columnsController.getGroupColumns();
    items = this.callBase(items);
    if (items.length && groupColumns.length) {
      items = this._processGroupItems(items, groupColumns.length);
    }
    return items;
  },
  _processItem(item, options2) {
    if (isDefined(item.groupIndex) && isString(item.rowType) && 0 === item.rowType.indexOf("group")) {
      item = this._processGroupItem(item, options2);
      options2.dataIndex = 0;
    } else {
      item = this.callBase.apply(this, arguments);
    }
    return item;
  },
  _processGroupItem: (item) => item,
  _processGroupItems(items, groupsCount, options2) {
    var groupedColumns = this._columnsController.getGroupColumns();
    var column = groupedColumns[groupedColumns.length - groupsCount];
    if (!options2) {
      var scrollingMode = this.option("scrolling.mode");
      options2 = {
        collectContinuationItems: "virtual" !== scrollingMode && "infinite" !== scrollingMode,
        resultItems: [],
        path: [],
        values: []
      };
    }
    var {
      resultItems
    } = options2;
    if (options2.data) {
      if (options2.collectContinuationItems || !options2.data.isContinuation) {
        resultItems.push({
          rowType: "group",
          data: options2.data,
          groupIndex: options2.path.length - 1,
          isExpanded: !!options2.data.items,
          key: options2.path.slice(0),
          values: options2.values.slice(0)
        });
      }
    }
    if (items) {
      if (0 === groupsCount) {
        resultItems.push.apply(resultItems, items);
      } else {
        for (var i = 0; i < items.length; i++) {
          var item = items[i];
          if (item && "items" in item) {
            options2.data = item;
            options2.path.push(item.key);
            options2.values.push(column && column.deserializeValue && !column.calculateDisplayValue ? column.deserializeValue(item.key) : item.key);
            this._processGroupItems(item.items, groupsCount - 1, options2);
            options2.data = void 0;
            options2.path.pop();
            options2.values.pop();
          } else {
            resultItems.push(item);
          }
        }
      }
    }
    return resultItems;
  },
  publicMethods() {
    return this.callBase().concat(["collapseAll", "expandAll", "isRowExpanded", "expandRow", "collapseRow"]);
  },
  collapseAll(groupIndex) {
    var dataSource = this._dataSource;
    if (dataSource && dataSource.collapseAll(groupIndex)) {
      dataSource.pageIndex(0);
      dataSource.reload();
    }
  },
  expandAll(groupIndex) {
    var dataSource = this._dataSource;
    if (dataSource && dataSource.expandAll(groupIndex)) {
      dataSource.pageIndex(0);
      dataSource.reload();
    }
  },
  changeRowExpand(key) {
    var that = this;
    var expanded = that.isRowExpanded(key);
    var args = {
      key,
      expanded
    };
    that.executeAction(expanded ? "onRowCollapsing" : "onRowExpanding", args);
    if (!args.cancel) {
      return when(that._changeRowExpandCore(key)).done(() => {
        args.expanded = !expanded;
        that.executeAction(expanded ? "onRowCollapsed" : "onRowExpanded", args);
      });
    }
    return new Deferred().resolve();
  },
  _changeRowExpandCore(key) {
    var that = this;
    var dataSource = this._dataSource;
    var d = new Deferred();
    if (!dataSource) {
      d.resolve();
    } else {
      when(dataSource.changeRowExpand(key)).done(() => {
        that.load().done(d.resolve).fail(d.reject);
      }).fail(d.reject);
    }
    return d;
  },
  isRowExpanded(key) {
    var dataSource = this._dataSource;
    return dataSource && dataSource.isRowExpanded(key);
  },
  expandRow(key) {
    if (!this.isRowExpanded(key)) {
      return this.changeRowExpand(key);
    }
    return new Deferred().resolve();
  },
  collapseRow(key) {
    if (this.isRowExpanded(key)) {
      return this.changeRowExpand(key);
    }
    return new Deferred().resolve();
  },
  optionChanged(args) {
    if ("grouping" === args.name) {
      args.name = "dataSource";
    }
    this.callBase(args);
  }
};
var onGroupingMenuItemClick = function(column, params) {
  var columnsController = this._columnsController;
  switch (params.itemData.value) {
    case "group":
      var groups = columnsController._dataSource.group() || [];
      columnsController.columnOption(column.dataField, "groupIndex", groups.length);
      break;
    case "ungroup":
      columnsController.columnOption(column.dataField, "groupIndex", -1);
      break;
    case "ungroupAll":
      this.component.clearGrouping();
  }
};
var isGroupPanelVisible = (groupPanelOptions) => {
  var visible2 = null === groupPanelOptions || void 0 === groupPanelOptions ? void 0 : groupPanelOptions.visible;
  return "auto" === visible2 ? "desktop" === devices_default.current().deviceType : !!visible2;
};
var allowDragging = (groupPanelOptions, column) => {
  var isVisible2 = isGroupPanelVisible(groupPanelOptions);
  var canDrag = (null === groupPanelOptions || void 0 === groupPanelOptions ? void 0 : groupPanelOptions.allowColumnDragging) && column.allowGrouping;
  return isVisible2 && !!canDrag;
};
var GroupingHeaderPanelExtender = {
  _getToolbarItems() {
    var items = this.callBase();
    return this._appendGroupingItem(items);
  },
  _appendGroupingItem(items) {
    if (this._isGroupPanelVisible()) {
      var isRendered = false;
      var toolbarItem = {
        template: () => {
          var $groupPanel = renderer_default("<div>").addClass(DATAGRID_GROUP_PANEL_CLASS);
          this._updateGroupPanelContent($groupPanel);
          registerKeyboardAction2("groupPanel", this, $groupPanel, void 0, this._handleActionKeyDown.bind(this));
          return $groupPanel;
        },
        name: "groupPanel",
        onItemRendered: () => {
          isRendered && this.renderCompleted.fire();
          isRendered = true;
        },
        location: "before",
        locateInMenu: "never",
        sortIndex: 1
      };
      items.push(toolbarItem);
      this.updateToolbarDimensions();
    }
    return items;
  },
  _handleActionKeyDown(args) {
    var {
      event
    } = args;
    var $target = renderer_default(event.target);
    var groupColumnIndex = $target.closest(".".concat(DATAGRID_GROUP_PANEL_ITEM_CLASS)).index();
    var column = this._columnsController.getGroupColumns()[groupColumnIndex];
    var columnIndex = column && column.index;
    if ($target.is(HEADER_FILTER_CLASS_SELECTOR2)) {
      this.getController("headerFilter").showHeaderFilterMenu(columnIndex, true);
    } else {
      this._processGroupItemAction(columnIndex);
    }
    event.preventDefault();
  },
  _isGroupPanelVisible() {
    return isGroupPanelVisible(this.option("groupPanel"));
  },
  _renderGroupPanelItems($groupPanel, groupColumns) {
    var that = this;
    $groupPanel.empty();
    each(groupColumns, (index2, groupColumn) => {
      that._createGroupPanelItem($groupPanel, groupColumn);
    });
    restoreFocus(this);
  },
  _createGroupPanelItem($rootElement, groupColumn) {
    var $groupPanelItem = renderer_default("<div>").addClass(groupColumn.cssClass).addClass(DATAGRID_GROUP_PANEL_ITEM_CLASS).data("columnData", groupColumn).appendTo($rootElement).text(groupColumn.caption);
    setTabIndex(this, $groupPanelItem);
    return $groupPanelItem;
  },
  _columnOptionChanged(e) {
    if (!this._requireReady && !m_core_default.checkChanges(e.optionNames, ["width", "visibleWidth"])) {
      var $toolbarElement = this.element();
      var $groupPanel = $toolbarElement && $toolbarElement.find(".".concat(DATAGRID_GROUP_PANEL_CLASS));
      if ($groupPanel && $groupPanel.length) {
        this._updateGroupPanelContent($groupPanel);
        this.updateToolbarDimensions();
        this.renderCompleted.fire();
      }
    }
    this.callBase();
  },
  _updateGroupPanelContent($groupPanel) {
    var groupColumns = this.getController("columns").getGroupColumns();
    var groupPanelOptions = this.option("groupPanel");
    this._renderGroupPanelItems($groupPanel, groupColumns);
    if (groupPanelOptions.allowColumnDragging && !groupColumns.length) {
      renderer_default("<div>").addClass(DATAGRID_GROUP_PANEL_MESSAGE_CLASS).text(groupPanelOptions.emptyPanelText).appendTo($groupPanel);
      $groupPanel.closest(".".concat(DATAGRID_GROUP_PANEL_CONTAINER_CLASS)).addClass(DATAGRID_GROUP_PANEL_LABEL_CLASS);
      $groupPanel.closest(".".concat(DATAGRID_GROUP_PANEL_LABEL_CLASS)).css("maxWidth", "none");
    }
  },
  allowDragging(column) {
    var groupPanelOptions = this.option("groupPanel");
    return allowDragging(groupPanelOptions, column);
  },
  getColumnElements() {
    var $element = this.element();
    return $element && $element.find(".".concat(DATAGRID_GROUP_PANEL_ITEM_CLASS));
  },
  getColumns() {
    return this.getController("columns").getGroupColumns();
  },
  getBoundingRect() {
    var $element = this.element();
    if ($element && $element.find(".".concat(DATAGRID_GROUP_PANEL_CLASS)).length) {
      var offset2 = $element.offset();
      return {
        top: offset2.top,
        bottom: offset2.top + getHeight($element)
      };
    }
    return null;
  },
  getName: () => "group",
  getContextMenuItems(options2) {
    var contextMenuEnabled = this.option("grouping.contextMenuEnabled");
    var $groupedColumnElement = renderer_default(options2.targetElement).closest(".".concat(DATAGRID_GROUP_PANEL_ITEM_CLASS));
    var items;
    if ($groupedColumnElement.length) {
      options2.column = $groupedColumnElement.data("columnData");
    }
    if (contextMenuEnabled && options2.column) {
      var {
        column
      } = options2;
      var isGroupingAllowed = isDefined(column.allowGrouping) ? column.allowGrouping : true;
      if (isGroupingAllowed) {
        var isColumnGrouped = isDefined(column.groupIndex) && column.groupIndex > -1;
        var groupingTexts = this.option("grouping.texts");
        var onItemClick = onGroupingMenuItemClick.bind(this, column);
        items = [{
          text: groupingTexts.ungroup,
          value: "ungroup",
          disabled: !isColumnGrouped,
          onItemClick
        }, {
          text: groupingTexts.ungroupAll,
          value: "ungroupAll",
          onItemClick
        }];
      }
    }
    return items;
  },
  isVisible() {
    return this.callBase() || this._isGroupPanelVisible();
  },
  hasGroupedColumns() {
    return this._isGroupPanelVisible() && !!this.getColumns().length;
  },
  optionChanged(args) {
    if ("groupPanel" === args.name) {
      this._invalidate();
      args.handled = true;
    } else {
      this.callBase(args);
    }
  }
};
var GroupingRowsViewExtender = {
  getContextMenuItems(options2) {
    var contextMenuEnabled = this.option("grouping.contextMenuEnabled");
    var items;
    if (contextMenuEnabled && options2.row && "group" === options2.row.rowType) {
      var columnsController = this._columnsController;
      var column = columnsController.columnOption("groupIndex:".concat(options2.row.groupIndex));
      if (column && column.allowGrouping) {
        var groupingTexts = this.option("grouping.texts");
        var onItemClick = onGroupingMenuItemClick.bind(this, column);
        items = [];
        items.push({
          text: groupingTexts.ungroup,
          value: "ungroup",
          onItemClick
        }, {
          text: groupingTexts.ungroupAll,
          value: "ungroupAll",
          onItemClick
        });
      }
    }
    return items;
  },
  _rowClick(e) {
    var expandMode = this.option("grouping.expandMode");
    var scrollingMode = this.option("scrolling.mode");
    var isGroupRowStateChanged = "infinite" !== scrollingMode && "rowClick" === expandMode && renderer_default(e.event.target).closest(".".concat(DATAGRID_GROUP_ROW_CLASS)).length;
    var isExpandButtonClicked = renderer_default(e.event.target).closest(".".concat(DATAGRID_EXPAND_CLASS2)).length;
    if (isGroupRowStateChanged || isExpandButtonClicked) {
      this._changeGroupRowState(e);
    }
    this.callBase(e);
  },
  _changeGroupRowState(e) {
    var dataController2 = this.getController("data");
    var row = dataController2.items()[e.rowIndex];
    var allowCollapsing = this._columnsController.columnOption("groupIndex:".concat(row.groupIndex), "allowCollapsing");
    if ("data" === row.rowType || "group" === row.rowType && false !== allowCollapsing) {
      dataController2.changeRowExpand(row.key, true);
      e.event.preventDefault();
      e.handled = true;
    }
  }
};
var columnHeadersViewExtender = {
  getContextMenuItems(options2) {
    var contextMenuEnabled = this.option("grouping.contextMenuEnabled");
    var items = this.callBase(options2);
    if (contextMenuEnabled && options2.row && ("header" === options2.row.rowType || "detailAdaptive" === options2.row.rowType)) {
      var {
        column
      } = options2;
      if (!column.command && (!isDefined(column.allowGrouping) || column.allowGrouping)) {
        var groupingTexts = this.option("grouping.texts");
        var isColumnGrouped = isDefined(column.groupIndex) && column.groupIndex > -1;
        var onItemClick = onGroupingMenuItemClick.bind(this, column);
        items = items || [];
        items.push({
          text: groupingTexts.groupByThisColumn,
          value: "group",
          beginGroup: true,
          disabled: isColumnGrouped,
          onItemClick
        });
        if (column.showWhenGrouped) {
          items.push({
            text: groupingTexts.ungroup,
            value: "ungroup",
            disabled: !isColumnGrouped,
            onItemClick
          });
        }
        items.push({
          text: groupingTexts.ungroupAll,
          value: "ungroupAll",
          onItemClick
        });
      }
    }
    return items;
  },
  allowDragging(column) {
    var groupPanelOptions = this.option("groupPanel");
    return allowDragging(groupPanelOptions, column) || this.callBase(column);
  }
};
m_core_default.registerModule("grouping", {
  defaultOptions: () => ({
    grouping: {
      autoExpandAll: true,
      allowCollapsing: true,
      contextMenuEnabled: false,
      expandMode: "buttonClick",
      texts: {
        groupContinuesMessage: message_default.format("dxDataGrid-groupContinuesMessage"),
        groupContinuedMessage: message_default.format("dxDataGrid-groupContinuedMessage"),
        groupByThisColumn: message_default.format("dxDataGrid-groupHeaderText"),
        ungroup: message_default.format("dxDataGrid-ungroupHeaderText"),
        ungroupAll: message_default.format("dxDataGrid-ungroupAllText")
      }
    },
    groupPanel: {
      visible: false,
      emptyPanelText: message_default.format("dxDataGrid-groupPanelEmptyText"),
      allowColumnDragging: true
    }
  }),
  extenders: {
    controllers: {
      data: GroupingDataControllerExtender,
      columns: {
        _getExpandColumnOptions() {
          var options2 = this.callBase.apply(this, arguments);
          options2.cellTemplate = m_core_default.getExpandCellTemplate();
          return options2;
        }
      },
      editing: {
        _isProcessedItem: (item) => isDefined(item.groupIndex) && isString(item.rowType) && 0 === item.rowType.indexOf("group")
      }
    },
    views: {
      headerPanel: GroupingHeaderPanelExtender,
      rowsView: GroupingRowsViewExtender,
      columnHeadersView: columnHeadersViewExtender
    }
  }
});

// node_modules/devextreme/esm/__internal/grids/grid_core/master_detail/m_master_detail.js
var MASTER_DETAIL_CELL_CLASS = "dx-master-detail-cell";
var MASTER_DETAIL_ROW_CLASS = "dx-master-detail-row";
var CELL_FOCUS_DISABLED_CLASS2 = "dx-cell-focus-disabled";
var ROW_LINES_CLASS2 = "dx-row-lines";
var masterDetailModule = {
  defaultOptions: () => ({
    masterDetail: {
      enabled: false,
      autoExpandAll: false,
      template: null
    }
  }),
  extenders: {
    controllers: {
      columns: {
        _getExpandColumnsCore() {
          var expandColumns = this.callBase();
          if (this.option("masterDetail.enabled")) {
            expandColumns.push({
              type: "detailExpand",
              cellTemplate: m_utils_default.getExpandCellTemplate()
            });
          }
          return expandColumns;
        }
      },
      data: /* @__PURE__ */ function() {
        var initMasterDetail = function(that) {
          that._expandedItems = [];
          that._isExpandAll = that.option("masterDetail.autoExpandAll");
        };
        return {
          init() {
            initMasterDetail(this);
            this.callBase();
          },
          expandAll(groupIndex) {
            if (groupIndex < 0) {
              this._isExpandAll = true;
              this._expandedItems = [];
              this.updateItems();
            } else {
              this.callBase.apply(this, arguments);
            }
          },
          collapseAll(groupIndex) {
            if (groupIndex < 0) {
              this._isExpandAll = false;
              this._expandedItems = [];
              this.updateItems();
            } else {
              this.callBase.apply(this, arguments);
            }
          },
          isRowExpanded(key) {
            var expandIndex = m_utils_default.getIndexByKey(key, this._expandedItems);
            if (Array.isArray(key)) {
              return this.callBase.apply(this, arguments);
            }
            return !!(this._isExpandAll ^ (expandIndex >= 0 && this._expandedItems[expandIndex].visible));
          },
          _getRowIndicesForExpand(key) {
            var rowIndex = this.getRowIndexByKey(key);
            return [rowIndex, rowIndex + 1];
          },
          _changeRowExpandCore(key) {
            var result2;
            if (Array.isArray(key)) {
              result2 = this.callBase.apply(this, arguments);
            } else {
              var expandIndex = m_utils_default.getIndexByKey(key, this._expandedItems);
              if (expandIndex >= 0) {
                var {
                  visible: visible2
                } = this._expandedItems[expandIndex];
                this._expandedItems[expandIndex].visible = !visible2;
              } else {
                this._expandedItems.push({
                  key,
                  visible: true
                });
              }
              this.updateItems({
                changeType: "update",
                rowIndices: this._getRowIndicesForExpand(key)
              });
              result2 = new Deferred().resolve();
            }
            return result2;
          },
          _processDataItem(data3, options2) {
            var dataItem = this.callBase.apply(this, arguments);
            dataItem.isExpanded = this.isRowExpanded(dataItem.key);
            if (void 0 === options2.detailColumnIndex) {
              options2.detailColumnIndex = -1;
              each(options2.visibleColumns, (index2, column) => {
                if ("expand" === column.command && !isDefined(column.groupIndex)) {
                  options2.detailColumnIndex = index2;
                  return false;
                }
                return;
              });
            }
            if (options2.detailColumnIndex >= 0) {
              dataItem.values[options2.detailColumnIndex] = dataItem.isExpanded;
            }
            return dataItem;
          },
          _processItems(items, change) {
            var that = this;
            var {
              changeType
            } = change;
            var result2 = [];
            items = that.callBase.apply(that, arguments);
            if ("loadingAll" === changeType) {
              return items;
            }
            if ("refresh" === changeType) {
              that._expandedItems = grep(that._expandedItems, (item) => item.visible);
            }
            each(items, (index2, item) => {
              result2.push(item);
              var expandIndex = m_utils_default.getIndexByKey(item.key, that._expandedItems);
              if ("data" === item.rowType && (item.isExpanded || expandIndex >= 0) && !item.isNewRow) {
                result2.push({
                  visible: item.isExpanded,
                  rowType: "detail",
                  key: item.key,
                  data: item.data,
                  values: []
                });
              }
            });
            return result2;
          },
          optionChanged(args) {
            var isEnabledChanged;
            var isAutoExpandAllChanged;
            if ("masterDetail" === args.name) {
              args.name = "dataSource";
              switch (args.fullName) {
                case "masterDetail":
                  var value2 = args.value || {};
                  var previousValue = args.previousValue || {};
                  isEnabledChanged = value2.enabled !== previousValue.enabled;
                  isAutoExpandAllChanged = value2.autoExpandAll !== previousValue.autoExpandAll;
                  break;
                case "masterDetail.template":
                  initMasterDetail(this);
                  break;
                case "masterDetail.enabled":
                  isEnabledChanged = true;
                  break;
                case "masterDetail.autoExpandAll":
                  isAutoExpandAllChanged = true;
              }
              if (isEnabledChanged || isAutoExpandAllChanged) {
                initMasterDetail(this);
              }
            }
            this.callBase(args);
          }
        };
      }(),
      resizing: {
        fireContentReadyAction() {
          this.callBase.apply(this, arguments);
          this._updateParentDataGrids(this.component.$element());
        },
        _updateParentDataGrids($element) {
          var $masterDetailRow = $element.closest(".".concat(MASTER_DETAIL_ROW_CLASS));
          if ($masterDetailRow.length) {
            when(this._updateMasterDataGrid($masterDetailRow, $element)).done(() => {
              this._updateParentDataGrids($masterDetailRow.parent());
            });
          }
        },
        _updateMasterDataGrid($masterDetailRow, $detailElement) {
          var masterRowOptions = renderer_default($masterDetailRow).data("options");
          var masterDataGrid = renderer_default($masterDetailRow).closest(".".concat(this.getWidgetContainerClass())).parent().data("dxDataGrid");
          if (masterRowOptions && masterDataGrid) {
            return this._updateMasterDataGridCore(masterDataGrid, masterRowOptions);
          }
        },
        _updateMasterDataGridCore(masterDataGrid, masterRowOptions) {
          var d = Deferred();
          if (masterDataGrid.getView("rowsView").isFixedColumns()) {
            this._updateFixedMasterDetailGrids(masterDataGrid, masterRowOptions.rowIndex, renderer_default(masterRowOptions.rowElement)).done(d.resolve);
          } else {
            if (true === masterDataGrid.option("scrolling.useNative")) {
              masterDataGrid.updateDimensions().done(() => d.resolve(true));
              return;
            }
            var scrollable = masterDataGrid.getScrollable();
            if (scrollable) {
              null === scrollable || void 0 === scrollable ? void 0 : scrollable.update().done(() => d.resolve());
            } else {
              d.resolve();
            }
          }
          return d.promise();
        },
        _updateFixedMasterDetailGrids(masterDataGrid, masterRowIndex, $detailElement) {
          var d = Deferred();
          var $rows = renderer_default(masterDataGrid.getRowElement(masterRowIndex));
          var $tables = renderer_default(masterDataGrid.getView("rowsView").getTableElements());
          var rowsNotEqual = 2 === (null === $rows || void 0 === $rows ? void 0 : $rows.length) && getHeight($rows.eq(0)) !== getHeight($rows.eq(1));
          var tablesNotEqual = 2 === (null === $tables || void 0 === $tables ? void 0 : $tables.length) && getHeight($tables.eq(0)) !== getHeight($tables.eq(1));
          if (rowsNotEqual || tablesNotEqual) {
            var detailElementWidth = getWidth($detailElement);
            masterDataGrid.updateDimensions().done(() => {
              var isDetailHorizontalScrollCanBeShown = this.option("columnAutoWidth") && true === masterDataGrid.option("scrolling.useNative");
              var isDetailGridWidthChanged = isDetailHorizontalScrollCanBeShown && detailElementWidth !== getWidth($detailElement);
              if (isDetailHorizontalScrollCanBeShown && isDetailGridWidthChanged) {
                this.updateDimensions().done(() => d.resolve(true));
              } else {
                d.resolve(true);
              }
            });
            return d.promise();
          }
          return Deferred().resolve();
        },
        _toggleBestFitMode(isBestFit) {
          this.callBase.apply(this, arguments);
          if (this.option("masterDetail.template")) {
            var $rowsTable = this._rowsView.getTableElement();
            if ($rowsTable) {
              $rowsTable.find(".dx-master-detail-cell").css("maxWidth", isBestFit ? 0 : "");
            }
          }
        }
      }
    },
    views: {
      rowsView: {
        _getCellTemplate(options2) {
          var {
            column
          } = options2;
          var editingController = this.getController("editing");
          var isEditRow = editingController && editingController.isEditRow(options2.rowIndex);
          var template;
          if ("detail" === column.command && !isEditRow) {
            template = this.option("masterDetail.template") || {
              allowRenderToDetachedContainer: false,
              render: this._getDefaultTemplate(column)
            };
          } else {
            template = this.callBase.apply(this, arguments);
          }
          return template;
        },
        _isDetailRow: (row) => row && row.rowType && 0 === row.rowType.indexOf("detail"),
        _createRow(row) {
          var $row = this.callBase.apply(this, arguments);
          if (row && this._isDetailRow(row)) {
            this.option("showRowLines") && $row.addClass(ROW_LINES_CLASS2);
            $row.addClass(MASTER_DETAIL_ROW_CLASS);
            if (isDefined(row.visible)) {
              $row.toggle(row.visible);
            }
          }
          return $row;
        },
        _renderCells($row, options2) {
          var {
            row
          } = options2;
          var $detailCell;
          var visibleColumns = this._columnsController.getVisibleColumns();
          if (row.rowType && this._isDetailRow(row)) {
            if (this._needRenderCell(0, options2.columnIndices)) {
              $detailCell = this._renderCell($row, {
                value: null,
                row,
                rowIndex: row.rowIndex,
                column: {
                  command: "detail"
                },
                columnIndex: 0,
                change: options2.change
              });
              $detailCell.addClass(CELL_FOCUS_DISABLED_CLASS2).addClass(MASTER_DETAIL_CELL_CLASS).attr("colSpan", visibleColumns.length);
            }
          } else {
            this.callBase.apply(this, arguments);
          }
        }
      }
    }
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/master_detail.js
m_core_default.registerModule("masterDetail", masterDetailModule);

// node_modules/devextreme/esm/ui/number_box/utils.js
var getRealSeparatorIndex = function(str) {
  var quoteBalance = 0;
  var separatorCount = 0;
  for (var i = 0; i < str.length; ++i) {
    if ("'" === str[i]) {
      quoteBalance++;
    }
    if ("." === str[i]) {
      ++separatorCount;
      if (quoteBalance % 2 === 0) {
        return {
          occurrence: separatorCount,
          index: i
        };
      }
    }
  }
  return {
    occurrence: 1,
    index: -1
  };
};
var getNthOccurrence = function(str, c, n) {
  var i = -1;
  while (n-- && i++ < str.length) {
    i = str.indexOf(c, i);
  }
  return i;
};
var splitByIndex = function(str, index2) {
  if (-1 === index2) {
    return [str];
  }
  return [str.slice(0, index2), str.slice(index2 + 1)];
};
var adjustPercentValue = function(rawValue, precision) {
  return rawValue && adjust(rawValue / 100, precision);
};

// node_modules/devextreme/esm/ui/number_box/number_box.caret.js
var getCaretBoundaries = function(text, format2) {
  if ("string" === typeof format2) {
    var signParts = format2.split(";");
    var sign2 = number_default2.getSign(text, format2);
    signParts[1] = signParts[1] || "-" + signParts[0];
    format2 = signParts[sign2 < 0 ? 1 : 0];
    format2 = (str = format2, str.replace(/'([^']*)'/g, (str2) => str2.split("").map(() => " ").join("").substr(2)));
    var prefixStubLength = /^[^#0.,]*/.exec(format2)[0].length;
    var postfixStubLength = /[^#0.,]*$/.exec(format2)[0].length;
    return {
      start: prefixStubLength,
      end: text.length - postfixStubLength
    };
  } else {
    return {
      start: 0,
      end: text.length
    };
  }
  var str;
};
var _getDigitCountBeforeIndex = function(index2, text) {
  var decimalSeparator = number_default2.getDecimalSeparator();
  var regExp = new RegExp("[^0-9" + escapeRegExp(decimalSeparator) + "]", "g");
  var textBeforePosition = text.slice(0, index2);
  return textBeforePosition.replace(regExp, "").length;
};
var _reverseText = function(text) {
  return text.split("").reverse().join("");
};
var _getDigitPositionByIndex = function(digitIndex, text) {
  if (!digitIndex) {
    return -1;
  }
  var regExp = /[0-9]/g;
  var counter = 1;
  var index2 = null;
  var result2 = regExp.exec(text);
  while (result2) {
    index2 = result2.index;
    if (counter >= digitIndex) {
      return index2;
    }
    counter++;
    result2 = regExp.exec(text);
  }
  return null === index2 ? text.length : index2;
};
var _trimNonNumericCharsFromEnd = function(text) {
  return text.replace(/[^0-9e]+$/, "");
};
var getCaretWithOffset = function(caret3, offset2) {
  if (void 0 === caret3.start) {
    caret3 = {
      start: caret3,
      end: caret3
    };
  }
  return {
    start: caret3.start + offset2,
    end: caret3.end + offset2
  };
};
var getCaretAfterFormat = function(text, formatted, caret3, format2) {
  caret3 = getCaretWithOffset(caret3, 0);
  var point = number_default2.getDecimalSeparator();
  var isSeparatorBasedText = isSeparatorBasedString(text);
  var realSeparatorOccurrenceIndex = getRealSeparatorIndex(format2).occurrence;
  var pointPosition = isSeparatorBasedText ? 0 : getNthOccurrence(text, point, realSeparatorOccurrenceIndex);
  var newPointPosition = getNthOccurrence(formatted, point, realSeparatorOccurrenceIndex);
  var textParts = splitByIndex(text, pointPosition);
  var formattedParts = splitByIndex(formatted, newPointPosition);
  var isCaretOnFloat = -1 !== pointPosition && caret3.start > pointPosition;
  if (isCaretOnFloat) {
    var relativeIndex = caret3.start - pointPosition - 1;
    var digitsBefore = _getDigitCountBeforeIndex(relativeIndex, textParts[1]);
    var newPosition = formattedParts[1] ? newPointPosition + 1 + _getDigitPositionByIndex(digitsBefore, formattedParts[1]) + 1 : formatted.length;
    return getCaretInBoundaries(newPosition, formatted, format2);
  } else {
    var formattedIntPart = _trimNonNumericCharsFromEnd(formattedParts[0]);
    var positionFromEnd = textParts[0].length - caret3.start;
    var digitsFromEnd = _getDigitCountBeforeIndex(positionFromEnd, _reverseText(textParts[0]));
    var newPositionFromEnd = _getDigitPositionByIndex(digitsFromEnd, _reverseText(formattedIntPart));
    var newPositionFromBegin = formattedIntPart.length - (newPositionFromEnd + 1);
    return getCaretInBoundaries(newPositionFromBegin, formatted, format2);
  }
};
function isSeparatorBasedString(text) {
  return 1 === text.length && !!text.match(/^[,.][0-9]*$/g);
}
var isCaretInBoundaries = function(caret3, text, format2) {
  caret3 = getCaretWithOffset(caret3, 0);
  var boundaries = getCaretInBoundaries(caret3, text, format2);
  return caret3.start >= boundaries.start && caret3.end <= boundaries.end;
};
function getCaretInBoundaries(caret3, text, format2) {
  caret3 = getCaretWithOffset(caret3, 0);
  var boundaries = getCaretBoundaries(text, format2);
  var adjustedCaret = {
    start: fitIntoRange(caret3.start, boundaries.start, boundaries.end),
    end: fitIntoRange(caret3.end, boundaries.start, boundaries.end)
  };
  return adjustedCaret;
}
var getCaretOffset = function(previousText, newText, format2) {
  var previousBoundaries = getCaretBoundaries(previousText, format2);
  var newBoundaries = getCaretBoundaries(newText, format2);
  return newBoundaries.start - previousBoundaries.start;
};

// node_modules/devextreme/esm/ui/number_box/number_box.spin.js
var SPIN_CLASS = "dx-numberbox-spin";
var SPIN_BUTTON_CLASS = "dx-numberbox-spin-button";
var SPIN_HOLD_DELAY = 100;
var NUMBER_BOX = "dxNumberBox";
var POINTERUP_EVENT_NAME = addNamespace2(pointer_default.up, NUMBER_BOX);
var POINTERCANCEL_EVENT_NAME = addNamespace2(pointer_default.cancel, NUMBER_BOX);
var SpinButton = ui_widget_default.inherit({
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      direction: "up",
      onChange: null,
      activeStateEnabled: true,
      hoverStateEnabled: true
    });
  },
  _initMarkup: function() {
    this.callBase();
    var direction = SPIN_CLASS + "-" + this.option("direction");
    this.$element().addClass(SPIN_BUTTON_CLASS).addClass(direction);
    this._spinIcon = renderer_default("<div>").addClass(direction + "-icon").appendTo(this.$element());
  },
  _render: function() {
    this.callBase();
    var eventName = addNamespace2(pointer_default.down, this.NAME);
    var $element = this.$element();
    events_engine_default.off($element, eventName);
    events_engine_default.on($element, eventName, this._spinDownHandler.bind(this));
    this._spinChangeHandler = this._createActionByOption("onChange");
  },
  _spinDownHandler: function(e) {
    e.preventDefault();
    this._clearTimer();
    events_engine_default.on(this.$element(), hold_default.name, (function() {
      this._feedBackDeferred = new Deferred();
      lock(this._feedBackDeferred);
      this._spinChangeHandler({
        event: e
      });
      this._holdTimer = setInterval(this._spinChangeHandler, SPIN_HOLD_DELAY, {
        event: e
      });
    }).bind(this));
    var document2 = dom_adapter_default.getDocument();
    events_engine_default.on(document2, POINTERUP_EVENT_NAME, this._clearTimer.bind(this));
    events_engine_default.on(document2, POINTERCANCEL_EVENT_NAME, this._clearTimer.bind(this));
    this._spinChangeHandler({
      event: e
    });
  },
  _dispose: function() {
    this._clearTimer();
    this.callBase();
  },
  _clearTimer: function() {
    events_engine_default.off(this.$element(), hold_default.name);
    var document2 = dom_adapter_default.getDocument();
    events_engine_default.off(document2, POINTERUP_EVENT_NAME);
    events_engine_default.off(document2, POINTERCANCEL_EVENT_NAME);
    if (this._feedBackDeferred) {
      this._feedBackDeferred.resolve();
    }
    if (this._holdTimer) {
      clearInterval(this._holdTimer);
    }
  },
  _optionChanged: function(args) {
    switch (args.name) {
      case "onChange":
      case "direction":
        this._invalidate();
        break;
      default:
        this.callBase(args);
    }
  }
});
var number_box_spin_default = SpinButton;

// node_modules/devextreme/esm/ui/number_box/number_box.spins.js
var SPIN_CLASS2 = "dx-numberbox-spin";
var SPIN_CONTAINER_CLASS = "dx-numberbox-spin-container";
var SPIN_TOUCH_FRIENDLY_CLASS = "dx-numberbox-spin-touch-friendly";
var SpinButtons = class extends TextEditorButton {
  _attachEvents(instance, $spinContainer) {
    var {
      editor
    } = this;
    var eventName = addNamespace2(pointer_default.down, editor.NAME);
    var $spinContainerChildren = $spinContainer.children();
    var pointerDownAction = editor._createAction((e) => editor._spinButtonsPointerDownHandler(e));
    events_engine_default.off($spinContainer, eventName);
    events_engine_default.on($spinContainer, eventName, (e) => pointerDownAction({
      event: e
    }));
    number_box_spin_default.getInstance($spinContainerChildren.eq(0)).option("onChange", (e) => editor._spinUpChangeHandler(e));
    number_box_spin_default.getInstance($spinContainerChildren.eq(1)).option("onChange", (e) => editor._spinDownChangeHandler(e));
  }
  _create() {
    var {
      editor
    } = this;
    var $spinContainer = renderer_default("<div>").addClass(SPIN_CONTAINER_CLASS);
    var $spinUp = renderer_default("<div>").appendTo($spinContainer);
    var $spinDown = renderer_default("<div>").appendTo($spinContainer);
    var options2 = this._getOptions();
    this._addToContainer($spinContainer);
    editor._createComponent($spinUp, number_box_spin_default, extend({
      direction: "up"
    }, options2));
    editor._createComponent($spinDown, number_box_spin_default, extend({
      direction: "down"
    }, options2));
    this._legacyRender(editor.$element(), this._isTouchFriendly(), options2.visible);
    return {
      instance: $spinContainer,
      $element: $spinContainer
    };
  }
  _getOptions() {
    var {
      editor
    } = this;
    var visible2 = this._isVisible();
    var disabled = editor.option("disabled");
    return {
      visible: visible2,
      disabled
    };
  }
  _isVisible() {
    var {
      editor
    } = this;
    return super._isVisible() && editor.option("showSpinButtons");
  }
  _isTouchFriendly() {
    var {
      editor
    } = this;
    return editor.option("showSpinButtons") && editor.option("useLargeSpinButtons");
  }
  _legacyRender($editor, isTouchFriendly, isVisible2) {
    $editor.toggleClass(SPIN_TOUCH_FRIENDLY_CLASS, isTouchFriendly);
    $editor.toggleClass(SPIN_CLASS2, isVisible2);
  }
  update() {
    var shouldUpdate = super.update();
    if (shouldUpdate) {
      var {
        editor,
        instance
      } = this;
      var $editor = editor.$element();
      var isVisible2 = this._isVisible();
      var isTouchFriendly = this._isTouchFriendly();
      var $spinButtons = instance.children();
      var spinUp = number_box_spin_default.getInstance($spinButtons.eq(0));
      var spinDown = number_box_spin_default.getInstance($spinButtons.eq(1));
      var options2 = this._getOptions();
      spinUp.option(options2);
      spinDown.option(options2);
      this._legacyRender($editor, isTouchFriendly, isVisible2);
    }
  }
};

// node_modules/devextreme/esm/ui/number_box/number_box.base.js
var math2 = Math;
var WIDGET_CLASS3 = "dx-numberbox";
var FIREFOX_CONTROL_KEYS = ["tab", "del", "backspace", "leftArrow", "rightArrow", "home", "end", "enter"];
var FORCE_VALUECHANGE_EVENT_NAMESPACE = "NumberBoxForceValueChange";
var NumberBoxBase = ui_text_editor_default.inherit({
  _supportedKeys: function() {
    return extend(this.callBase(), {
      upArrow: function(e) {
        if (!isCommandKeyPressed(e)) {
          e.preventDefault();
          e.stopPropagation();
          this._spinUpChangeHandler(e);
        }
      },
      downArrow: function(e) {
        if (!isCommandKeyPressed(e)) {
          e.preventDefault();
          e.stopPropagation();
          this._spinDownChangeHandler(e);
        }
      },
      enter: function() {
      }
    });
  },
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      value: 0,
      min: void 0,
      max: void 0,
      step: 1,
      showSpinButtons: false,
      useLargeSpinButtons: true,
      mode: "text",
      invalidValueMessage: message_default.format("dxNumberBox-invalidValueMessage"),
      buttons: void 0
    });
  },
  _useTemplates: function() {
    return false;
  },
  _getDefaultButtons: function() {
    return this.callBase().concat([{
      name: "spins",
      Ctor: SpinButtons
    }]);
  },
  _isSupportInputMode: function() {
    var version2 = parseFloat(browser_default.version);
    return browser_default.chrome && version2 >= 66 || browser_default.safari && version2 >= 12;
  },
  _defaultOptionsRules: function() {
    return this.callBase().concat([{
      device: function() {
        return devices_default.real().generic && !devices_default.isSimulator();
      },
      options: {
        useLargeSpinButtons: false
      }
    }, {
      device: (function() {
        return "desktop" !== devices_default.real().deviceType && !this._isSupportInputMode();
      }).bind(this),
      options: {
        mode: "number"
      }
    }]);
  },
  _initMarkup: function() {
    this._renderSubmitElement();
    this.$element().addClass(WIDGET_CLASS3);
    this.callBase();
  },
  _getDefaultAttributes: function() {
    var attributes = this.callBase();
    attributes.inputmode = "decimal";
    return attributes;
  },
  _renderContentImpl: function() {
    this.option("isValid") && this._validateValue(this.option("value"));
    this.setAria("role", "spinbutton");
  },
  _renderSubmitElement: function() {
    this._$submitElement = renderer_default("<input>").attr("type", "hidden").appendTo(this.$element());
    this._setSubmitValue(this.option("value"));
  },
  _setSubmitValue: function(value2) {
    this._getSubmitElement().val(applyServerDecimalSeparator(value2));
  },
  _getSubmitElement: function() {
    return this._$submitElement;
  },
  _keyPressHandler: function(e) {
    this.callBase(e);
    var char = getChar(e);
    var isInputCharValid = /[\d.,eE\-+]/.test(char);
    if (!isInputCharValid) {
      var keyName = normalizeKeyName(e);
      if (isCommandKeyPressed(e) || keyName && FIREFOX_CONTROL_KEYS.includes(keyName)) {
        return;
      }
      e.preventDefault();
      return false;
    }
    this._keyPressed = true;
  },
  _onMouseWheel: function(dxEvent) {
    dxEvent.delta > 0 ? this._spinValueChange(1, dxEvent) : this._spinValueChange(-1, dxEvent);
  },
  _renderValue: function() {
    var inputValue = this._input().val();
    var value2 = this.option("value");
    if (!inputValue.length || Number(inputValue) !== value2) {
      this._forceValueRender();
      this._toggleEmptinessEventHandler();
    }
    var valueText = isDefined(value2) ? null : message_default.format("dxNumberBox-noDataText");
    this.setAria({
      valuenow: ensureDefined(value2, ""),
      valuetext: valueText
    });
    this.option("text", this._input().val());
    this._updateButtons();
    return new Deferred().resolve();
  },
  _forceValueRender: function() {
    var value2 = this.option("value");
    var number = Number(value2);
    var formattedValue = isNaN(number) ? "" : this._applyDisplayValueFormatter(value2);
    this._renderDisplayText(formattedValue);
  },
  _applyDisplayValueFormatter: function(value2) {
    return this.option("displayValueFormatter")(value2);
  },
  _renderProps: function() {
    this._input().prop({
      min: this.option("min"),
      max: this.option("max"),
      step: this.option("step")
    });
    this.setAria({
      valuemin: ensureDefined(this.option("min"), ""),
      valuemax: ensureDefined(this.option("max"), "")
    });
  },
  _spinButtonsPointerDownHandler: function() {
    var $input = this._input();
    if (!this.option("useLargeSpinButtons") && dom_adapter_default.getActiveElement() !== $input[0]) {
      events_engine_default.trigger($input, "focus");
    }
  },
  _spinUpChangeHandler: function(e) {
    if (!this.option("readOnly")) {
      this._spinValueChange(1, e.event || e);
    }
  },
  _spinDownChangeHandler: function(e) {
    if (!this.option("readOnly")) {
      this._spinValueChange(-1, e.event || e);
    }
  },
  _spinValueChange: function(sign2, dxEvent) {
    var step = parseFloat(this.option("step"));
    if (0 === step) {
      return;
    }
    var value2 = parseFloat(this._normalizeInputValue()) || 0;
    value2 = this._correctRounding(value2, step * sign2);
    var min = this.option("min");
    var max = this.option("max");
    if (isDefined(min)) {
      value2 = Math.max(min, value2);
    }
    if (isDefined(max)) {
      value2 = Math.min(max, value2);
    }
    this._saveValueChangeEvent(dxEvent);
    this.option("value", value2);
  },
  _correctRounding: function(value2, step) {
    var regex = /[,.](.*)/;
    var isFloatValue = regex.test(value2);
    var isFloatStep = regex.test(step);
    if (isFloatValue || isFloatStep) {
      var valueAccuracy = isFloatValue ? regex.exec(value2)[0].length : 0;
      var stepAccuracy = isFloatStep ? regex.exec(step)[0].length : 0;
      var accuracy = math2.max(valueAccuracy, stepAccuracy);
      value2 = this._round(value2 + step, accuracy);
      return value2;
    }
    return value2 + step;
  },
  _round: function(value2, precision) {
    precision = precision || 0;
    var multiplier = Math.pow(10, precision);
    value2 *= multiplier;
    value2 = Math.round(value2) / multiplier;
    return value2;
  },
  _renderValueChangeEvent: function() {
    this.callBase();
    var forceValueChangeEvent = addNamespace2("focusout", FORCE_VALUECHANGE_EVENT_NAMESPACE);
    events_engine_default.off(this.element(), forceValueChangeEvent);
    events_engine_default.on(this.element(), forceValueChangeEvent, this._forceRefreshInputValue.bind(this));
  },
  _forceRefreshInputValue: function() {
    if ("number" === this.option("mode")) {
      return;
    }
    var $input = this._input();
    var formattedValue = this._applyDisplayValueFormatter(this.option("value"));
    $input.val(null);
    $input.val(formattedValue);
  },
  _valueChangeEventHandler: function(e) {
    var $input = this._input();
    var inputValue = this._normalizeText();
    var value2 = this._parseValue(inputValue);
    var valueHasDigits = "." !== inputValue && "-" !== inputValue;
    if (this._isValueValid() && !this._validateValue(value2)) {
      $input.val(this._applyDisplayValueFormatter(value2));
      return;
    }
    if (valueHasDigits) {
      this.callBase(e, isNaN(value2) ? null : value2);
    }
    this._applyValueBoundaries(inputValue, value2);
    this.validationRequest.fire({
      value: value2,
      editor: this
    });
  },
  _applyValueBoundaries: function(inputValue, parsedValue) {
    var isValueIncomplete = this._isValueIncomplete(inputValue);
    var isValueCorrect = this._isValueInRange(inputValue);
    if (!isValueIncomplete && !isValueCorrect && null !== parsedValue) {
      if (Number(inputValue) !== parsedValue) {
        this._input().val(this._applyDisplayValueFormatter(parsedValue));
      }
    }
  },
  _replaceCommaWithPoint: function(value2) {
    return value2.replace(",", ".");
  },
  _inputIsInvalid: function() {
    var isNumberMode = "number" === this.option("mode");
    var validityState = this._input().get(0).validity;
    return isNumberMode && validityState && validityState.badInput;
  },
  _renderDisplayText: function(text) {
    if (this._inputIsInvalid()) {
      return;
    }
    this.callBase(text);
  },
  _isValueIncomplete: function(value2) {
    return /(^-$)|(^-?\d*\.$)|(\d+e-?$)/i.test(value2);
  },
  _isValueInRange: function(value2) {
    return inRange(value2, this.option("min"), this.option("max"));
  },
  _isNumber: function(value2) {
    return null !== this._parseValue(value2);
  },
  _validateValue: function(value2) {
    var inputValue = this._normalizeText();
    var isValueValid = this._isValueValid();
    var isValid = true;
    var isNumber2 = this._isNumber(inputValue);
    if (isNaN(Number(value2))) {
      isValid = false;
    }
    if (!value2 && isValueValid) {
      isValid = true;
    } else if (!isNumber2 && !isValueValid) {
      isValid = false;
    }
    this.option({
      isValid,
      validationError: isValid ? null : {
        editorSpecific: true,
        message: this.option("invalidValueMessage")
      }
    });
    return isValid;
  },
  _normalizeInputValue: function() {
    return this._parseValue(this._normalizeText());
  },
  _normalizeText: function() {
    var value2 = this._input().val().trim();
    return this._replaceCommaWithPoint(value2);
  },
  _parseValue: function(value2) {
    var number = parseFloat(value2);
    if (isNaN(number)) {
      return null;
    }
    return fitIntoRange(number, this.option("min"), this.option("max"));
  },
  _clearValue: function() {
    if (this._inputIsInvalid()) {
      this._input().val("");
      this._validateValue();
    }
    this.callBase();
  },
  clear: function() {
    if (null === this.option("value")) {
      this.option("text", "");
      if (this._input().length) {
        this._renderValue();
      }
    } else {
      this.option("value", null);
    }
  },
  _optionChanged: function(args) {
    switch (args.name) {
      case "value":
        this._validateValue(args.value);
        this._setSubmitValue(args.value);
        this.callBase(args);
        this._resumeValueChangeAction();
        break;
      case "step":
        this._renderProps();
        break;
      case "min":
      case "max":
        this._renderProps();
        this.option("value", this._parseValue(this.option("value")));
        break;
      case "showSpinButtons":
      case "useLargeSpinButtons":
        this._updateButtons(["spins"]);
        break;
      case "invalidValueMessage":
        break;
      default:
        this.callBase(args);
    }
  }
});
var number_box_base_default = NumberBoxBase;

// node_modules/devextreme/esm/ui/number_box/number_box.mask.js
var NUMBER_FORMATTER_NAMESPACE = "dxNumberFormatter";
var MOVE_FORWARD = 1;
var MOVE_BACKWARD = -1;
var MINUS = "-";
var MINUS_KEY = "minus";
var INPUT_EVENT = "input";
var CARET_TIMEOUT_DURATION = 0;
var NumberBoxMask = number_box_base_default.inherit({
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      useMaskBehavior: true,
      format: null
    });
  },
  _isDeleteKey: function(key) {
    return "del" === key;
  },
  _supportedKeys: function() {
    if (!this._useMaskBehavior()) {
      return this.callBase();
    }
    return extend(this.callBase(), {
      minus: this._revertSign.bind(this),
      del: this._removeHandler.bind(this),
      backspace: this._removeHandler.bind(this),
      leftArrow: this._arrowHandler.bind(this, MOVE_BACKWARD),
      rightArrow: this._arrowHandler.bind(this, MOVE_FORWARD),
      home: this._moveCaretToBoundaryEventHandler.bind(this, MOVE_FORWARD),
      enter: this._updateFormattedValue.bind(this),
      end: this._moveCaretToBoundaryEventHandler.bind(this, MOVE_BACKWARD)
    });
  },
  _getTextSeparatorIndex: function(text) {
    var decimalSeparator = number_default2.getDecimalSeparator();
    var realSeparatorOccurrenceIndex = getRealSeparatorIndex(this.option("format")).occurrence;
    return getNthOccurrence(text, decimalSeparator, realSeparatorOccurrenceIndex);
  },
  _focusInHandler: function(e) {
    if (!this._preventNestedFocusEvent(e)) {
      this.clearCaretTimeout();
      this._caretTimeout = setTimeout((function() {
        this._caretTimeout = void 0;
        var caret3 = this._caret();
        if (caret3.start === caret3.end && this._useMaskBehavior()) {
          var text = this._getInputVal();
          var decimalSeparatorIndex = this._getTextSeparatorIndex(text);
          if (decimalSeparatorIndex >= 0) {
            this._caret({
              start: decimalSeparatorIndex,
              end: decimalSeparatorIndex
            });
          } else {
            this._moveCaretToBoundaryEventHandler(MOVE_BACKWARD, e);
          }
        }
      }).bind(this), CARET_TIMEOUT_DURATION);
    }
    this.callBase(e);
  },
  _focusOutHandler: function(e) {
    var shouldHandleEvent = !this._preventNestedFocusEvent(e);
    if (shouldHandleEvent) {
      this._focusOutOccurs = true;
      if (this._useMaskBehavior()) {
        this._updateFormattedValue();
      }
    }
    this.callBase(e);
    if (shouldHandleEvent) {
      this._focusOutOccurs = false;
    }
  },
  _hasValueBeenChanged(inputValue) {
    var format2 = this._getFormatPattern();
    var value2 = this.option("value");
    var formatted = this._format(value2, format2) || "";
    return formatted !== inputValue;
  },
  _updateFormattedValue: function() {
    var inputValue = this._getInputVal();
    if (this._hasValueBeenChanged(inputValue)) {
      this._updateParsedValue();
      this._adjustParsedValue();
      this._setTextByParsedValue();
      if (this._parsedValue !== this.option("value")) {
        events_engine_default.trigger(this._input(), "change");
      }
    }
  },
  _arrowHandler: function(step, e) {
    if (!this._useMaskBehavior()) {
      return;
    }
    var text = this._getInputVal();
    var format2 = this._getFormatPattern();
    var nextCaret = getCaretWithOffset(this._caret(), step);
    if (!isCaretInBoundaries(nextCaret, text, format2)) {
      nextCaret = step === MOVE_FORWARD ? nextCaret.end : nextCaret.start;
      e.preventDefault();
      this._caret(getCaretInBoundaries(nextCaret, text, format2));
    }
  },
  _moveCaretToBoundary: function(direction) {
    var boundaries = getCaretBoundaries(this._getInputVal(), this._getFormatPattern());
    var newCaret = getCaretWithOffset(direction === MOVE_FORWARD ? boundaries.start : boundaries.end, 0);
    this._caret(newCaret);
  },
  _moveCaretToBoundaryEventHandler: function(direction, e) {
    if (!this._useMaskBehavior() || e && e.shiftKey) {
      return;
    }
    this._moveCaretToBoundary(direction);
    e && e.preventDefault();
  },
  _shouldMoveCaret: function(text, caret3) {
    var decimalSeparator = number_default2.getDecimalSeparator();
    var isDecimalSeparatorNext = text.charAt(caret3.end) === decimalSeparator;
    var moveToFloat = (this._lastKey === decimalSeparator || "." === this._lastKey || "," === this._lastKey) && isDecimalSeparatorNext;
    return moveToFloat;
  },
  _getInputVal: function() {
    return number_default2.convertDigits(this._input().val(), true);
  },
  _keyboardHandler: function(e) {
    this.clearCaretTimeout();
    this._lastKey = number_default2.convertDigits(getChar(e), true);
    this._lastKeyName = normalizeKeyName(e);
    if (!this._shouldHandleKey(e.originalEvent)) {
      return this.callBase(e);
    }
    var normalizedText = this._getInputVal();
    var caret3 = this._caret();
    var enteredChar = this._lastKeyName === MINUS_KEY ? "" : this._lastKey;
    var newValue = this._tryParse(normalizedText, caret3, enteredChar);
    if (this._shouldMoveCaret(normalizedText, caret3)) {
      this._moveCaret(1);
      e.originalEvent.preventDefault();
    }
    if (void 0 === newValue) {
      if (this._lastKeyName !== MINUS_KEY) {
        e.originalEvent.preventDefault();
      }
    } else {
      this._parsedValue = newValue;
    }
    return this.callBase(e);
  },
  _keyPressHandler: function(e) {
    if (!this._useMaskBehavior()) {
      this.callBase(e);
    }
  },
  _removeHandler: function(e) {
    var caret3 = this._caret();
    var text = this._getInputVal();
    var start = caret3.start;
    var end = caret3.end;
    this._lastKey = getChar(e);
    this._lastKeyName = normalizeKeyName(e);
    var isDeleteKey = this._isDeleteKey(this._lastKeyName);
    var isBackspaceKey = !isDeleteKey;
    if (start === end) {
      var caretPosition = start;
      var canDelete = isBackspaceKey && caretPosition > 0 || isDeleteKey && caretPosition < text.length;
      if (canDelete) {
        isDeleteKey && end++;
        isBackspaceKey && start--;
      } else {
        e.preventDefault();
        return;
      }
    }
    var char = text.slice(start, end);
    if (this._isStub(char)) {
      this._moveCaret(isDeleteKey ? 1 : -1);
      if (this._parsedValue < 0 || 1 / this._parsedValue === -1 / 0) {
        this._revertSign(e);
        this._setTextByParsedValue();
        var shouldTriggerInputEvent = this.option("valueChangeEvent").split(" ").includes("input");
        if (shouldTriggerInputEvent) {
          events_engine_default.trigger(this._input(), "input");
        }
      }
      e.preventDefault();
      return;
    }
    var decimalSeparator = number_default2.getDecimalSeparator();
    if (char === decimalSeparator) {
      var decimalSeparatorIndex = text.indexOf(decimalSeparator);
      if (this._isNonStubAfter(decimalSeparatorIndex + 1)) {
        this._moveCaret(isDeleteKey ? 1 : -1);
        e.preventDefault();
      }
      return;
    }
    if (end - start < text.length) {
      var editedText = this._replaceSelectedText(text, {
        start,
        end
      }, "");
      var noDigits = editedText.search(/[0-9]/) < 0;
      if (noDigits && this._isValueInRange(0)) {
        this._parsedValue = this._parsedValue < 0 || 1 / this._parsedValue === -1 / 0 ? -0 : 0;
        return;
      }
    }
    var valueAfterRemoving = this._tryParse(text, {
      start,
      end
    }, "");
    if (void 0 === valueAfterRemoving) {
      e.preventDefault();
    } else {
      this._parsedValue = valueAfterRemoving;
    }
  },
  _isPercentFormat: function() {
    var format2 = this._getFormatPattern();
    var noEscapedFormat = format2.replace(/'[^']+'/g, "");
    return -1 !== noEscapedFormat.indexOf("%");
  },
  _parse: function(text, format2) {
    var formatOption = this.option("format");
    var isCustomParser = isFunction(formatOption.parser);
    var parser = isCustomParser ? formatOption.parser : number_default2.parse;
    var integerPartStartIndex = 0;
    if (!isCustomParser) {
      var formatPointIndex = getRealSeparatorIndex(format2).index;
      var textPointIndex = this._getTextSeparatorIndex(text);
      var formatIntegerPartLength = -1 !== formatPointIndex ? formatPointIndex : format2.length;
      var textIntegerPartLength = -1 !== textPointIndex ? textPointIndex : text.length;
      if (textIntegerPartLength > formatIntegerPartLength && -1 === format2.indexOf("#")) {
        integerPartStartIndex = textIntegerPartLength - formatIntegerPartLength;
      }
    }
    text = text.substr(integerPartStartIndex);
    return parser(text, format2);
  },
  _format: function(value2, format2) {
    var formatOption = this.option("format");
    var customFormatter = (null === formatOption || void 0 === formatOption ? void 0 : formatOption.formatter) || formatOption;
    var formatter = isFunction(customFormatter) ? customFormatter : number_default2.format;
    var formattedValue = null === value2 ? "" : formatter(value2, format2);
    return formattedValue;
  },
  _getFormatPattern: function() {
    if (!this._currentFormat) {
      this._updateFormat();
    }
    return this._currentFormat;
  },
  _updateFormat: function() {
    var format2 = this.option("format");
    var isCustomParser = isFunction(null === format2 || void 0 === format2 ? void 0 : format2.parser);
    var isLDMLPattern = isString(format2) && (format2.indexOf("0") >= 0 || format2.indexOf("#") >= 0);
    var isExponentialFormat = "exponential" === format2 || "exponential" === (null === format2 || void 0 === format2 ? void 0 : format2.type);
    var shouldUseFormatAsIs = isCustomParser || isLDMLPattern || isExponentialFormat;
    this._currentFormat = shouldUseFormatAsIs ? format2 : getFormat((value2) => {
      var text = this._format(value2, format2);
      return number_default2.convertDigits(text, true);
    });
  },
  _getFormatForSign: function(text) {
    var format2 = this._getFormatPattern();
    if (isString(format2)) {
      var signParts = format2.split(";");
      var sign2 = number_default2.getSign(text, format2);
      signParts[1] = signParts[1] || "-" + signParts[0];
      return sign2 < 0 ? signParts[1] : signParts[0];
    } else {
      var _sign = number_default2.getSign(text);
      return _sign < 0 ? "-" : "";
    }
  },
  _removeStubs: function(text, excludeComma) {
    var format2 = this._getFormatForSign(text);
    var thousandsSeparator = number_default2.getThousandsSeparator();
    var stubs = this._getStubs(format2);
    var result2 = text;
    if (stubs.length) {
      var prefixStubs = stubs[0];
      var postfixRegex = new RegExp("(" + escapeRegExp(stubs[1] || "") + ")$", "g");
      var decoratorsRegex = new RegExp("[-" + escapeRegExp(excludeComma ? "" : thousandsSeparator) + "]", "g");
      result2 = result2.replace(prefixStubs, "").replace(postfixRegex, "").replace(decoratorsRegex, "");
    }
    return result2;
  },
  _getStubs: function(format2) {
    var regExpResult = /[^']([#0.,]+)/g.exec(format2);
    var pattern = regExpResult && regExpResult[0].trim();
    return format2.split(pattern).map(function(stub) {
      return stub.replace(/'/g, "");
    });
  },
  _truncateToPrecision: function(value2, maxPrecision) {
    if (isDefined(value2)) {
      var strValue = value2.toString();
      var decimalSeparatorIndex = strValue.indexOf(".");
      if (strValue && decimalSeparatorIndex > -1) {
        var parsedValue = parseFloat(strValue.substr(0, decimalSeparatorIndex + maxPrecision + 1));
        return isNaN(parsedValue) ? value2 : parsedValue;
      }
    }
    return value2;
  },
  _tryParse: function(text, selection, char) {
    var isTextSelected = selection.start !== selection.end;
    var isWholeTextSelected = isTextSelected && 0 === selection.start && selection.end === text.length;
    var decimalSeparator = number_default2.getDecimalSeparator();
    if (isWholeTextSelected && char === decimalSeparator) {
      return 0;
    }
    var editedText = this._replaceSelectedText(text, selection, char);
    var format2 = this._getFormatPattern();
    var parsedValue = this._getParsedValue(editedText, format2);
    var maxPrecision = !format2.parser && this._getPrecisionLimits(editedText).max;
    var isValueChanged = parsedValue !== this._parsedValue;
    var isDecimalPointRestricted = char === decimalSeparator && 0 === maxPrecision;
    var isUselessCharRestricted = !isTextSelected && !isValueChanged && char !== MINUS && !this._isValueIncomplete(editedText) && this._isStub(char);
    if (isDecimalPointRestricted || isUselessCharRestricted) {
      return;
    }
    if ("" === this._removeStubs(editedText)) {
      parsedValue = Math.abs(0 * this._parsedValue);
    }
    if (isNaN(parsedValue)) {
      return;
    }
    var value2 = null === parsedValue ? this._parsedValue : parsedValue;
    parsedValue = maxPrecision ? this._truncateToPrecision(value2, maxPrecision) : parsedValue;
    return !format2.parser && this._isPercentFormat() ? adjustPercentValue(parsedValue, maxPrecision) : parsedValue;
  },
  _getParsedValue: function(text, format2) {
    var sign2 = number_default2.getSign(text, (null === format2 || void 0 === format2 ? void 0 : format2.formatter) || format2);
    var textWithoutStubs = this._removeStubs(text, true);
    var parsedValue = this._parse(textWithoutStubs, format2);
    var parsedValueSign = parsedValue < 0 ? -1 : 1;
    var parsedValueWithSign = isNumeric(parsedValue) && sign2 !== parsedValueSign ? sign2 * parsedValue : parsedValue;
    return parsedValueWithSign;
  },
  _isValueIncomplete: function(text) {
    if (!this._useMaskBehavior()) {
      return this.callBase(text);
    }
    var caret3 = this._caret();
    var point = number_default2.getDecimalSeparator();
    var pointIndex = this._getTextSeparatorIndex(text);
    var isCaretOnFloat = pointIndex >= 0 && pointIndex < caret3.start;
    var textParts = this._removeStubs(text, true).split(point);
    if (!isCaretOnFloat || 2 !== textParts.length) {
      return false;
    }
    var floatLength = textParts[1].length;
    var format2 = this._getFormatPattern();
    var isCustomParser = !!format2.parser;
    var precision = !isCustomParser && this._getPrecisionLimits(this._getFormatPattern(), text);
    var isPrecisionInRange = isCustomParser ? true : inRange(floatLength, precision.min, precision.max);
    var endsWithZero = "0" === textParts[1].charAt(floatLength - 1);
    return isPrecisionInRange && (endsWithZero || !floatLength);
  },
  _isValueInRange: function(value2) {
    var min = ensureDefined(this.option("min"), -1 / 0);
    var max = ensureDefined(this.option("max"), 1 / 0);
    return inRange(value2, min, max);
  },
  _setInputText: function(text) {
    var normalizedText = number_default2.convertDigits(text, true);
    var newCaret = getCaretAfterFormat(this._getInputVal(), normalizedText, this._caret(), this._getFormatPattern());
    this._input().val(text);
    this._toggleEmptinessEventHandler();
    this._formattedValue = text;
    if (!this._focusOutOccurs) {
      this._caret(newCaret);
    }
  },
  _useMaskBehavior: function() {
    return !!this.option("format") && this.option("useMaskBehavior");
  },
  _renderInputType: function() {
    var isNumberType = "number" === this.option("mode");
    var isDesktop = "desktop" === devices_default.real().deviceType;
    if (this._useMaskBehavior() && isNumberType) {
      this._setInputType(isDesktop || this._isSupportInputMode() ? "text" : "tel");
    } else {
      this.callBase();
    }
  },
  _isChar: function(str) {
    return isString(str) && 1 === str.length;
  },
  _moveCaret: function(offset2) {
    if (!offset2) {
      return;
    }
    var newCaret = getCaretWithOffset(this._caret(), offset2);
    var adjustedCaret = getCaretInBoundaries(newCaret, this._getInputVal(), this._getFormatPattern());
    this._caret(adjustedCaret);
  },
  _shouldHandleKey: function(e) {
    var keyName = normalizeKeyName(e);
    var isSpecialChar = isCommandKeyPressed(e) || e.altKey || e.shiftKey || !this._isChar(keyName);
    var isMinusKey = keyName === MINUS_KEY;
    var useMaskBehavior = this._useMaskBehavior();
    return useMaskBehavior && !isSpecialChar && !isMinusKey;
  },
  _renderInput: function() {
    this.callBase();
    this._renderFormatter();
  },
  _renderFormatter: function() {
    this._clearCache();
    this._detachFormatterEvents();
    if (this._useMaskBehavior()) {
      this._attachFormatterEvents();
    }
  },
  _detachFormatterEvents: function() {
    events_engine_default.off(this._input(), "." + NUMBER_FORMATTER_NAMESPACE);
  },
  _isInputFromPaste: function(e) {
    var inputType2 = e.originalEvent && e.originalEvent.inputType;
    if (isDefined(inputType2)) {
      return "insertFromPaste" === inputType2;
    } else {
      return this._isValuePasted;
    }
  },
  _attachFormatterEvents: function() {
    var $input = this._input();
    events_engine_default.on($input, addNamespace2(INPUT_EVENT, NUMBER_FORMATTER_NAMESPACE), (function(e) {
      this._formatValue(e);
      this._isValuePasted = false;
    }).bind(this));
    events_engine_default.on($input, addNamespace2("dxclick", NUMBER_FORMATTER_NAMESPACE), (function() {
      if (!this._caretTimeout) {
        this._caretTimeout = setTimeout((function() {
          this._caretTimeout = void 0;
          this._caret(getCaretInBoundaries(this._caret(), this._getInputVal(), this._getFormatPattern()));
        }).bind(this), CARET_TIMEOUT_DURATION);
      }
    }).bind(this));
    events_engine_default.on($input, "dxdblclick", (function() {
      this.clearCaretTimeout();
    }).bind(this));
  },
  clearCaretTimeout: function() {
    clearTimeout(this._caretTimeout);
    this._caretTimeout = void 0;
  },
  _forceRefreshInputValue: function() {
    if (!this._useMaskBehavior()) {
      return this.callBase();
    }
  },
  _isNonStubAfter: function(index2) {
    var text = this._getInputVal().slice(index2);
    return text && !this._isStub(text, true);
  },
  _isStub: function(str, isString4) {
    var escapedDecimalSeparator = escapeRegExp(number_default2.getDecimalSeparator());
    var regExpString = "^[^0-9" + escapedDecimalSeparator + "]+$";
    var stubRegExp = new RegExp(regExpString, "g");
    return stubRegExp.test(str) && (isString4 || this._isChar(str));
  },
  _parseValue: function(text) {
    if (!this._useMaskBehavior()) {
      return this.callBase(text);
    }
    return this._parsedValue;
  },
  _getPrecisionLimits: function(text) {
    var currentFormat = this._getFormatForSign(text);
    var realSeparatorIndex = getRealSeparatorIndex(currentFormat).index;
    var floatPart = (splitByIndex(currentFormat, realSeparatorIndex)[1] || "").replace(/[^#0]/g, "");
    var minPrecision = floatPart.replace(/^(0*)#*/, "$1").length;
    var maxPrecision = floatPart.length;
    return {
      min: minPrecision,
      max: maxPrecision
    };
  },
  _revertSign: function(e) {
    if (!this._useMaskBehavior()) {
      return;
    }
    var caret3 = this._caret();
    if (caret3.start !== caret3.end) {
      if (normalizeKeyName(e) === MINUS_KEY) {
        this._applyRevertedSign(e, caret3, true);
        return;
      } else {
        this._caret(getCaretInBoundaries(0, this._getInputVal(), this._getFormatPattern()));
      }
    }
    this._applyRevertedSign(e, caret3);
  },
  _applyRevertedSign: function(e, caret3, preserveSelectedText) {
    var newValue = -1 * ensureDefined(this._parsedValue, null);
    if (this._isValueInRange(newValue) || 0 === newValue) {
      this._parsedValue = newValue;
      if (preserveSelectedText) {
        var format2 = this._getFormatPattern();
        var previousText = this._getInputVal();
        this._setTextByParsedValue();
        e.preventDefault();
        var currentText = this._getInputVal();
        var offset2 = getCaretOffset(previousText, currentText, format2);
        caret3 = getCaretWithOffset(caret3, offset2);
        var caretInBoundaries = getCaretInBoundaries(caret3, currentText, format2);
        this._caret(caretInBoundaries);
      }
    }
  },
  _removeMinusFromText: function(text, caret3) {
    var isMinusPressed = this._lastKeyName === MINUS_KEY && text.charAt(caret3.start - 1) === MINUS;
    return isMinusPressed ? this._replaceSelectedText(text, {
      start: caret3.start - 1,
      end: caret3.start
    }, "") : text;
  },
  _setTextByParsedValue: function() {
    var format2 = this._getFormatPattern();
    var parsed = this._parseValue();
    var formatted = this._format(parsed, format2) || "";
    this._setInputText(formatted);
  },
  _formatValue: function(e) {
    var normalizedText = this._getInputVal();
    var caret3 = this._caret();
    var textWithoutMinus = this._removeMinusFromText(normalizedText, caret3);
    var wasMinusRemoved = textWithoutMinus !== normalizedText;
    normalizedText = textWithoutMinus;
    if (!this._isInputFromPaste(e) && this._isValueIncomplete(textWithoutMinus)) {
      this._formattedValue = normalizedText;
      if (wasMinusRemoved) {
        this._setTextByParsedValue();
      }
      return;
    }
    var textWasChanged = number_default2.convertDigits(this._formattedValue, true) !== normalizedText;
    if (textWasChanged) {
      var value2 = this._tryParse(normalizedText, caret3, "");
      if (isDefined(value2)) {
        this._parsedValue = value2;
      }
    }
    this._setTextByParsedValue();
  },
  _renderDisplayText: function() {
    if (this._useMaskBehavior()) {
      this._toggleEmptinessEventHandler();
    } else {
      this.callBase.apply(this, arguments);
    }
  },
  _renderValue: function() {
    if (this._useMaskBehavior()) {
      this._parsedValue = this.option("value");
      this._setTextByParsedValue();
    }
    return this.callBase();
  },
  _updateParsedValue: function() {
    var inputValue = this._getInputVal();
    this._parsedValue = this._tryParse(inputValue, this._caret());
  },
  _adjustParsedValue: function() {
    if (!this._useMaskBehavior()) {
      return;
    }
    var clearedText = this._removeStubs(this._getInputVal());
    var parsedValue = clearedText ? this._parseValue() : null;
    if (!isNumeric(parsedValue)) {
      this._parsedValue = parsedValue;
      return;
    }
    this._parsedValue = fitIntoRange(parsedValue, this.option("min"), this.option("max"));
  },
  _valueChangeEventHandler: function(e) {
    if (!this._useMaskBehavior()) {
      return this.callBase(e);
    }
    var caret3 = this._caret();
    this._saveValueChangeEvent(e);
    this._lastKey = null;
    this._lastKeyName = null;
    this._updateParsedValue();
    this._adjustParsedValue();
    this.option("value", this._parsedValue);
    if (caret3) {
      this._caret(caret3);
    }
  },
  _optionChanged: function(args) {
    switch (args.name) {
      case "format":
      case "useMaskBehavior":
        this._renderInputType();
        this._updateFormat();
        this._renderFormatter();
        this._renderValue();
        this._refreshValueChangeEvent();
        this._refreshEvents();
        break;
      case "min":
      case "max":
        this._adjustParsedValue();
        this.callBase(args);
        break;
      default:
        this.callBase(args);
    }
  },
  _clearCache: function() {
    delete this._formattedValue;
    delete this._lastKey;
    delete this._lastKeyName;
    delete this._parsedValue;
    delete this._focusOutOccurs;
    clearTimeout(this._caretTimeout);
    delete this._caretTimeout;
  },
  _clean: function() {
    this._clearCache();
    this.callBase();
  }
});
var number_box_mask_default = NumberBoxMask;

// node_modules/devextreme/esm/ui/number_box/number_box.js
component_registrator_default("dxNumberBox", number_box_mask_default);
var number_box_default = number_box_mask_default;

// node_modules/devextreme/esm/ui/number_box.js
var number_box_default2 = number_box_default;

// node_modules/devextreme/esm/ui/drop_down_editor/ui.drop_down_button.js
var DROP_DOWN_EDITOR_BUTTON_CLASS = "dx-dropdowneditor-button";
var DROP_DOWN_EDITOR_BUTTON_VISIBLE = "dx-dropdowneditor-button-visible";
var BUTTON_MESSAGE = "dxDropDownEditor-selectLabel";
var DropDownButton = class extends TextEditorButton {
  constructor(name2, editor, options2) {
    super(name2, editor, options2);
    this.currentTemplate = null;
  }
  _attachEvents(instance) {
    var {
      editor
    } = this;
    instance.option("onClick", (e) => {
      var _editor$_shouldCallOp;
      if (null !== (_editor$_shouldCallOp = editor._shouldCallOpenHandler) && void 0 !== _editor$_shouldCallOp && _editor$_shouldCallOp.call(editor)) {
        editor._openHandler(e);
        return;
      }
      !editor.option("openOnFieldClick") && editor._openHandler(e);
    });
    events_engine_default.on(instance.$element(), "mousedown", (e) => {
      if (editor.$element().is(".dx-state-focused")) {
        e.preventDefault();
      }
    });
  }
  _create() {
    var {
      editor
    } = this;
    var $element = renderer_default("<div>");
    var options2 = this._getOptions();
    this._addToContainer($element);
    var instance = editor._createComponent($element, button_default, extend({}, options2, {
      elementAttr: {
        "aria-label": message_default.format(BUTTON_MESSAGE)
      }
    }));
    this._legacyRender(editor.$element(), $element, options2.visible);
    return {
      $element,
      instance
    };
  }
  _getOptions() {
    var {
      editor
    } = this;
    var visible2 = this._isVisible();
    var isReadOnly = editor.option("readOnly");
    var options2 = {
      focusStateEnabled: false,
      hoverStateEnabled: false,
      activeStateEnabled: false,
      useInkRipple: false,
      disabled: isReadOnly,
      visible: visible2
    };
    this._addTemplate(options2);
    return options2;
  }
  _isVisible() {
    var {
      editor
    } = this;
    return super._isVisible() && editor.option("showDropDownButton");
  }
  _legacyRender($editor, $element, isVisible2) {
    $editor.toggleClass(DROP_DOWN_EDITOR_BUTTON_VISIBLE, isVisible2);
    if ($element) {
      $element.removeClass("dx-button").removeClass("dx-button-mode-contained").addClass(DROP_DOWN_EDITOR_BUTTON_CLASS);
    }
  }
  _isSameTemplate() {
    return this.editor.option("dropDownButtonTemplate") === this.currentTemplate;
  }
  _addTemplate(options2) {
    if (!this._isSameTemplate()) {
      options2.template = this.editor._getTemplateByOption("dropDownButtonTemplate");
      this.currentTemplate = this.editor.option("dropDownButtonTemplate");
    }
  }
  update() {
    var shouldUpdate = super.update();
    if (shouldUpdate) {
      var {
        editor,
        instance
      } = this;
      var $editor = editor.$element();
      var options2 = this._getOptions();
      null === instance || void 0 === instance ? void 0 : instance.option(options2);
      this._legacyRender($editor, null === instance || void 0 === instance ? void 0 : instance.$element(), options2.visible);
    }
  }
};

// node_modules/devextreme/esm/ui/drop_down_editor/utils.js
var getElementWidth = function($element) {
  if (hasWindow()) {
    return getOuterWidth($element);
  }
};
var getSizeValue = function(size) {
  if (null === size) {
    size = void 0;
  }
  if ("function" === typeof size) {
    size = size();
  }
  return size;
};

// node_modules/devextreme/esm/ui/drop_down_editor/ui.drop_down_editor.js
var DROP_DOWN_EDITOR_CLASS = "dx-dropdowneditor";
var DROP_DOWN_EDITOR_INPUT_WRAPPER = "dx-dropdowneditor-input-wrapper";
var DROP_DOWN_EDITOR_BUTTON_ICON = "dx-dropdowneditor-icon";
var DROP_DOWN_EDITOR_OVERLAY = "dx-dropdowneditor-overlay";
var DROP_DOWN_EDITOR_OVERLAY_FLIPPED = "dx-dropdowneditor-overlay-flipped";
var DROP_DOWN_EDITOR_ACTIVE = "dx-dropdowneditor-active";
var DROP_DOWN_EDITOR_FIELD_CLICKABLE = "dx-dropdowneditor-field-clickable";
var DROP_DOWN_EDITOR_FIELD_TEMPLATE_WRAPPER = "dx-dropdowneditor-field-template-wrapper";
var isIOs = "ios" === devices_default.current().platform;
var DropDownEditor = text_box_default2.inherit({
  _supportedKeys: function() {
    return extend({}, this.callBase(), {
      tab: function(e) {
        if (!this.option("opened")) {
          return;
        }
        if (!this._popup.getFocusableElements().length) {
          this.close();
          return;
        }
        var $focusableElement = e.shiftKey ? this._getLastPopupElement() : this._getFirstPopupElement();
        if ($focusableElement) {
          events_engine_default.trigger($focusableElement, "focus");
          $focusableElement.select();
        }
        e.preventDefault();
      },
      escape: function(e) {
        if (this.option("opened")) {
          e.preventDefault();
        }
        this.close();
        return true;
      },
      upArrow: function(e) {
        if (!isCommandKeyPressed(e)) {
          e.preventDefault();
          e.stopPropagation();
          if (e.altKey) {
            this.close();
            return false;
          }
        }
        return true;
      },
      downArrow: function(e) {
        if (!isCommandKeyPressed(e)) {
          e.preventDefault();
          e.stopPropagation();
          if (e.altKey) {
            this._validatedOpening();
            return false;
          }
        }
        return true;
      },
      enter: function(e) {
        if (this.option("opened")) {
          e.preventDefault();
          this._valueChangeEventHandler(e);
        }
        return true;
      }
    });
  },
  _getDefaultButtons: function() {
    return this.callBase().concat([{
      name: "dropDown",
      Ctor: DropDownButton
    }]);
  },
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      value: null,
      onOpened: null,
      onClosed: null,
      opened: false,
      acceptCustomValue: true,
      applyValueMode: "instantly",
      deferRendering: true,
      activeStateEnabled: true,
      dropDownButtonTemplate: "dropDownButton",
      fieldTemplate: null,
      openOnFieldClick: false,
      showDropDownButton: true,
      buttons: void 0,
      dropDownOptions: {
        showTitle: false
      },
      popupPosition: this._getDefaultPopupPosition(),
      onPopupInitialized: null,
      applyButtonText: message_default.format("OK"),
      cancelButtonText: message_default.format("Cancel"),
      buttonsLocation: "default",
      useHiddenSubmitElement: false,
      validationMessagePosition: "auto"
    });
  },
  _useTemplates: function() {
    return true;
  },
  _getDefaultPopupPosition: function(isRtlEnabled) {
    var position3 = getDefaultAlignment(isRtlEnabled);
    return {
      offset: {
        h: 0,
        v: -1
      },
      my: position3 + " top",
      at: position3 + " bottom",
      collision: "flip flip"
    };
  },
  _defaultOptionsRules: function() {
    return this.callBase().concat([{
      device: function(_device) {
        var isGeneric2 = "generic" === _device.platform;
        return isGeneric2;
      },
      options: {
        popupPosition: {
          offset: {
            v: 0
          }
        }
      }
    }]);
  },
  _inputWrapper: function() {
    return this.$element().find("." + DROP_DOWN_EDITOR_INPUT_WRAPPER).first();
  },
  _init: function() {
    this.callBase();
    this._initVisibilityActions();
    this._initPopupInitializedAction();
    this._updatePopupPosition(this.option("rtlEnabled"));
    this._options.cache("dropDownOptions", this.option("dropDownOptions"));
  },
  _updatePopupPosition: function(isRtlEnabled) {
    var {
      my,
      at
    } = this._getDefaultPopupPosition(isRtlEnabled);
    var currentPosition = this.option("popupPosition");
    this.option("popupPosition", extend({}, currentPosition, {
      my,
      at
    }));
  },
  _initVisibilityActions: function() {
    this._openAction = this._createActionByOption("onOpened", {
      excludeValidators: ["disabled", "readOnly"]
    });
    this._closeAction = this._createActionByOption("onClosed", {
      excludeValidators: ["disabled", "readOnly"]
    });
  },
  _initPopupInitializedAction: function() {
    this._popupInitializedAction = this._createActionByOption("onPopupInitialized", {
      excludeValidators: ["disabled", "readOnly"]
    });
  },
  _initMarkup: function() {
    this._renderSubmitElement();
    this.callBase();
    this.$element().addClass(DROP_DOWN_EDITOR_CLASS);
    this.setAria("role", "combobox");
  },
  _render: function() {
    this.callBase();
    this._renderOpenHandler();
    this._attachFocusOutHandler();
    this._renderOpenedState();
  },
  _renderContentImpl: function() {
    if (!this.option("deferRendering")) {
      this._createPopup();
    }
  },
  _renderInput: function() {
    this.callBase();
    this._wrapInput();
    this._setDefaultAria();
  },
  _wrapInput: function() {
    this._$container = this.$element().wrapInner(renderer_default("<div>").addClass(DROP_DOWN_EDITOR_INPUT_WRAPPER)).children().eq(0);
  },
  _setDefaultAria: function() {
    this.setAria({
      haspopup: "true",
      autocomplete: "list"
    });
  },
  _readOnlyPropValue: function() {
    return !this._isEditable() || this.callBase();
  },
  _cleanFocusState: function() {
    this.callBase();
    if (this.option("fieldTemplate")) {
      this._detachFocusEvents();
    }
  },
  _getFieldTemplate: function() {
    return this.option("fieldTemplate") && this._getTemplateByOption("fieldTemplate");
  },
  _renderMask: function() {
    if (this.option("fieldTemplate")) {
      return;
    }
    this.callBase();
  },
  _renderField: function() {
    var fieldTemplate = this._getFieldTemplate();
    fieldTemplate && this._renderTemplatedField(fieldTemplate, this._fieldRenderData());
  },
  _renderPlaceholder: function() {
    var hasFieldTemplate = !!this._getFieldTemplate();
    if (!hasFieldTemplate) {
      this.callBase();
    }
  },
  _renderValue: function() {
    if (this.option("useHiddenSubmitElement")) {
      this._setSubmitValue();
    }
    var promise = this.callBase();
    promise.always(this._renderField.bind(this));
  },
  _renderTemplatedField: function(fieldTemplate, data3) {
    var isFocused = focused(this._input());
    var $container = this._$container;
    this._detachKeyboardEvents();
    this._refreshButtonsContainer();
    this._detachWrapperContent();
    this._detachFocusEvents();
    $container.empty();
    var $templateWrapper = renderer_default("<div>").addClass(DROP_DOWN_EDITOR_FIELD_TEMPLATE_WRAPPER).appendTo($container);
    fieldTemplate.render({
      model: data3,
      container: getPublicElement($templateWrapper),
      onRendered: () => {
        var isRenderedInRoot = !!this.$element().find($templateWrapper).length;
        if (!isRenderedInRoot) {
          return;
        }
        var $input = this._input();
        if (!$input.length) {
          throw ui_errors_default.Error("E1010");
        }
        this._integrateInput();
        isFocused && events_engine_default.trigger($input, "focus");
      }
    });
    this._attachWrapperContent($container);
  },
  _detachWrapperContent() {
    var _this$_$submitElement, _this$_$beforeButtons, _this$_$afterButtonsC;
    var useHiddenSubmitElement = this.option("useHiddenSubmitElement");
    useHiddenSubmitElement && (null === (_this$_$submitElement = this._$submitElement) || void 0 === _this$_$submitElement ? void 0 : _this$_$submitElement.detach());
    var beforeButtonsContainerParent = null === (_this$_$beforeButtons = this._$beforeButtonsContainer) || void 0 === _this$_$beforeButtons ? void 0 : _this$_$beforeButtons[0].parentNode;
    var afterButtonsContainerParent = null === (_this$_$afterButtonsC = this._$afterButtonsContainer) || void 0 === _this$_$afterButtonsC ? void 0 : _this$_$afterButtonsC[0].parentNode;
    null === beforeButtonsContainerParent || void 0 === beforeButtonsContainerParent ? void 0 : beforeButtonsContainerParent.removeChild(this._$beforeButtonsContainer[0]);
    null === afterButtonsContainerParent || void 0 === afterButtonsContainerParent ? void 0 : afterButtonsContainerParent.removeChild(this._$afterButtonsContainer[0]);
  },
  _attachWrapperContent($container) {
    var _this$_$submitElement2;
    var useHiddenSubmitElement = this.option("useHiddenSubmitElement");
    $container.prepend(this._$beforeButtonsContainer);
    useHiddenSubmitElement && (null === (_this$_$submitElement2 = this._$submitElement) || void 0 === _this$_$submitElement2 ? void 0 : _this$_$submitElement2.appendTo($container));
    $container.append(this._$afterButtonsContainer);
  },
  _refreshButtonsContainer() {
    this._$buttonsContainer = this.$element().children().eq(0);
  },
  _integrateInput: function() {
    this._renderFocusState();
    this._refreshValueChangeEvent();
    this._refreshEvents();
    this._refreshEmptinessEvent();
  },
  _refreshEmptinessEvent: function() {
    events_engine_default.off(this._input(), "input blur", this._toggleEmptinessEventHandler);
    this._renderEmptinessEvent();
  },
  _fieldRenderData: function() {
    return this.option("value");
  },
  _initTemplates: function() {
    this._templateManager.addDefaultTemplates({
      dropDownButton: new FunctionTemplate(function(options2) {
        var $icon = renderer_default("<div>").addClass(DROP_DOWN_EDITOR_BUTTON_ICON);
        renderer_default(options2.container).append($icon);
      })
    });
    this.callBase();
  },
  _renderOpenHandler: function() {
    var $inputWrapper = this._inputWrapper();
    var eventName = addNamespace2(CLICK_EVENT_NAME, this.NAME);
    var openOnFieldClick = this.option("openOnFieldClick");
    events_engine_default.off($inputWrapper, eventName);
    events_engine_default.on($inputWrapper, eventName, this._getInputClickHandler(openOnFieldClick));
    this.$element().toggleClass(DROP_DOWN_EDITOR_FIELD_CLICKABLE, openOnFieldClick);
    if (openOnFieldClick) {
      this._openOnFieldClickAction = this._createAction(this._openHandler.bind(this));
    }
  },
  _attachFocusOutHandler: function() {
    if (isIOs) {
      this._detachFocusOutEvents();
      events_engine_default.on(this._inputWrapper(), addNamespace2("focusout", this.NAME), (event) => {
        var newTarget = event.relatedTarget;
        if (newTarget && this.option("opened")) {
          var isNewTargetOutside = this._isTargetOutOfComponent(newTarget);
          if (isNewTargetOutside) {
            this.close();
          }
        }
      });
    }
  },
  _isTargetOutOfComponent: function(newTarget) {
    var popupWrapper = this.content ? renderer_default(this.content()).closest(".".concat(DROP_DOWN_EDITOR_OVERLAY)) : this._$popup;
    var isTargetOutsidePopup = 0 === renderer_default(newTarget).closest(".".concat(DROP_DOWN_EDITOR_OVERLAY), popupWrapper).length;
    return isTargetOutsidePopup;
  },
  _detachFocusOutEvents: function() {
    isIOs && events_engine_default.off(this._inputWrapper(), addNamespace2("focusout", this.NAME));
  },
  _getInputClickHandler: function(openOnFieldClick) {
    return openOnFieldClick ? (e) => {
      this._executeOpenAction(e);
    } : (e) => {
      this._focusInput();
    };
  },
  _openHandler: function() {
    this._toggleOpenState();
  },
  _executeOpenAction: function(e) {
    this._openOnFieldClickAction({
      event: e
    });
  },
  _keyboardEventBindingTarget: function() {
    return this._input();
  },
  _focusInput: function() {
    if (this.option("disabled")) {
      return false;
    }
    if (this.option("focusStateEnabled") && !focused(this._input())) {
      this._resetCaretPosition();
      events_engine_default.trigger(this._input(), "focus");
    }
    return true;
  },
  _resetCaretPosition: function() {
    var ignoreEditable = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : false;
    var inputElement = this._input().get(0);
    if (inputElement) {
      var {
        value: value2
      } = inputElement;
      var caretPosition = isDefined(value2) && (ignoreEditable || this._isEditable()) ? value2.length : 0;
      this._caret({
        start: caretPosition,
        end: caretPosition
      }, true);
    }
  },
  _isEditable: function() {
    return this.option("acceptCustomValue");
  },
  _toggleOpenState: function(isVisible2) {
    if (!this._focusInput()) {
      return;
    }
    if (!this.option("readOnly")) {
      isVisible2 = arguments.length ? isVisible2 : !this.option("opened");
      this.option("opened", isVisible2);
    }
  },
  _getControlsAria() {
    return this._popup && this._popupContentId;
  },
  _renderOpenedState: function() {
    var opened = this.option("opened");
    if (opened) {
      this._createPopup();
    }
    this.$element().toggleClass(DROP_DOWN_EDITOR_ACTIVE, opened);
    this._setPopupOption("visible", opened);
    var arias = {
      expanded: opened,
      controls: this._getControlsAria()
    };
    this.setAria(arias);
    this.setAria("owns", opened ? this._popupContentId : void 0, this.$element());
  },
  _createPopup: function() {
    if (this._$popup) {
      return;
    }
    this._$popup = renderer_default("<div>").addClass(DROP_DOWN_EDITOR_OVERLAY).appendTo(this.$element());
    this._renderPopup();
    this._renderPopupContent();
  },
  _renderPopupContent: noop2,
  _renderPopup: function() {
    var popupConfig = extend(this._popupConfig(), this._options.cache("dropDownOptions"));
    delete popupConfig.closeOnOutsideClick;
    if (popupConfig.elementAttr && !Object.keys(popupConfig.elementAttr).length) {
      delete popupConfig.elementAttr;
    }
    this._popup = this._createComponent(this._$popup, ui_popup_default, popupConfig);
    this._popup.on({
      showing: this._popupShowingHandler.bind(this),
      shown: this._popupShownHandler.bind(this),
      hiding: this._popupHidingHandler.bind(this),
      hidden: this._popupHiddenHandler.bind(this),
      contentReady: this._contentReadyHandler.bind(this)
    });
    this._attachPopupKeyHandler();
    this._contentReadyHandler();
    this._setPopupContentId(this._popup.$content());
    this._bindInnerWidgetOptions(this._popup, "dropDownOptions");
  },
  _attachPopupKeyHandler() {
    events_engine_default.on(this._popup.$overlayContent(), addNamespace2("keydown", this.NAME), (e) => this._popupKeyHandler(e));
  },
  _popupKeyHandler(e) {
    switch (normalizeKeyName(e)) {
      case "tab":
        this._popupTabHandler(e);
        break;
      case "escape":
        this._popupEscHandler(e);
    }
  },
  _popupTabHandler(e) {
    var $target = renderer_default(e.target);
    var moveBackward = e.shiftKey && $target.is(this._getFirstPopupElement());
    var moveForward = !e.shiftKey && $target.is(this._getLastPopupElement());
    if (moveForward || moveBackward) {
      events_engine_default.trigger(this.field(), "focus");
      e.preventDefault();
    }
  },
  _popupEscHandler() {
    events_engine_default.trigger(this._input(), "focus");
    this.close();
  },
  _setPopupContentId($popupContent) {
    this._popupContentId = "dx-" + new guid_default();
    this.setAria("id", this._popupContentId, $popupContent);
  },
  _contentReadyHandler: noop2,
  _popupConfig: function() {
    return {
      onInitialized: this._getPopupInitializedHandler(),
      position: extend(this.option("popupPosition"), {
        of: this.$element()
      }),
      showTitle: this.option("dropDownOptions.showTitle"),
      _ignoreFunctionValueDeprecation: true,
      width: () => getElementWidth(this.$element()),
      height: "auto",
      shading: false,
      hideOnParentScroll: true,
      hideOnOutsideClick: (e) => this._closeOutsideDropDownHandler(e),
      animation: {
        show: {
          type: "fade",
          duration: 0,
          from: 0,
          to: 1
        },
        hide: {
          type: "fade",
          duration: 400,
          from: 1,
          to: 0
        }
      },
      deferRendering: false,
      focusStateEnabled: false,
      showCloseButton: false,
      dragEnabled: false,
      toolbarItems: this._getPopupToolbarItems(),
      onPositioned: this._popupPositionedHandler.bind(this),
      fullScreen: false,
      contentTemplate: null,
      _hideOnParentScrollTarget: this.$element(),
      _wrapperClassExternal: DROP_DOWN_EDITOR_OVERLAY,
      _ignorePreventScrollEventsDeprecation: true
    };
  },
  _popupInitializedHandler: noop2,
  _getPopupInitializedHandler: function() {
    var onPopupInitialized = this.option("onPopupInitialized");
    return (e) => {
      this._popupInitializedHandler(e);
      if (onPopupInitialized) {
        this._popupInitializedAction({
          popup: e.component
        });
      }
    };
  },
  _dimensionChanged: function() {
    if (hasWindow() && !this.$element().is(":visible")) {
      this.close();
      return;
    }
    this._updatePopupWidth();
  },
  _updatePopupWidth: function() {
    var popupWidth = getSizeValue(this.option("dropDownOptions.width"));
    if (void 0 === popupWidth) {
      this._setPopupOption("width", () => getElementWidth(this.$element()));
    }
  },
  _popupPositionedHandler: function(e) {
    var _e$position, _e$position$v;
    var {
      labelMode,
      stylingMode
    } = this.option();
    if (!this._popup) {
      return;
    }
    var $popupOverlayContent = this._popup.$overlayContent();
    var isOverlayFlipped = null === (_e$position = e.position) || void 0 === _e$position ? void 0 : null === (_e$position$v = _e$position.v) || void 0 === _e$position$v ? void 0 : _e$position$v.flip;
    var shouldIndentForLabel = "hidden" !== labelMode && "outside" !== labelMode && "outlined" === stylingMode;
    if (e.position) {
      $popupOverlayContent.toggleClass(DROP_DOWN_EDITOR_OVERLAY_FLIPPED, isOverlayFlipped);
    }
    if (isOverlayFlipped && shouldIndentForLabel && this._label.isVisible()) {
      var $label = this._label.$element();
      move($popupOverlayContent, {
        top: locate($popupOverlayContent).top - parseInt($label.css("fontSize"))
      });
    }
  },
  _popupShowingHandler: noop2,
  _popupHidingHandler: function() {
    this.option("opened", false);
  },
  _popupShownHandler: function() {
    var _this$_validationMess;
    this._openAction();
    null === (_this$_validationMess = this._validationMessage) || void 0 === _this$_validationMess ? void 0 : _this$_validationMess.option("positionSide", this._getValidationMessagePositionSide());
  },
  _popupHiddenHandler: function() {
    var _this$_validationMess2;
    this._closeAction();
    null === (_this$_validationMess2 = this._validationMessage) || void 0 === _this$_validationMess2 ? void 0 : _this$_validationMess2.option("positionSide", this._getValidationMessagePositionSide());
  },
  _getValidationMessagePositionSide: function() {
    var validationMessagePosition = this.option("validationMessagePosition");
    if ("auto" !== validationMessagePosition) {
      return validationMessagePosition;
    }
    var positionSide = "bottom";
    if (this._popup && this._popup.option("visible")) {
      var {
        top: myTop
      } = position_default.setup(this.$element());
      var {
        top: popupTop
      } = position_default.setup(this._popup.$content());
      positionSide = myTop + this.option("popupPosition").offset.v > popupTop ? "bottom" : "top";
    }
    return positionSide;
  },
  _closeOutsideDropDownHandler: function(_ref) {
    var {
      target
    } = _ref;
    var $target = renderer_default(target);
    var dropDownButton = this.getButton("dropDown");
    var $dropDownButton = dropDownButton && dropDownButton.$element();
    var isInputClicked = !!$target.closest(this.$element()).length;
    var isDropDownButtonClicked = !!$target.closest($dropDownButton).length;
    var isOutsideClick = !isInputClicked && !isDropDownButtonClicked;
    return isOutsideClick;
  },
  _clean: function() {
    delete this._openOnFieldClickAction;
    if (this._$popup) {
      this._$popup.remove();
      delete this._$popup;
      delete this._popup;
    }
    this.callBase();
  },
  _setPopupOption: function(optionName, value2) {
    this._setWidgetOption("_popup", arguments);
  },
  _validatedOpening: function() {
    if (!this.option("readOnly")) {
      this._toggleOpenState(true);
    }
  },
  _getPopupToolbarItems: function() {
    return "useButtons" === this.option("applyValueMode") ? this._popupToolbarItemsConfig() : [];
  },
  _getFirstPopupElement: function() {
    return renderer_default(this._popup.getFocusableElements()).first();
  },
  _getLastPopupElement: function() {
    return renderer_default(this._popup.getFocusableElements()).last();
  },
  _popupToolbarItemsConfig: function() {
    var buttonsConfig = [{
      shortcut: "done",
      options: {
        onClick: this._applyButtonHandler.bind(this),
        text: this.option("applyButtonText")
      }
    }, {
      shortcut: "cancel",
      options: {
        onClick: this._cancelButtonHandler.bind(this),
        text: this.option("cancelButtonText")
      }
    }];
    return this._applyButtonsLocation(buttonsConfig);
  },
  _applyButtonsLocation: function(buttonsConfig) {
    var buttonsLocation = this.option("buttonsLocation");
    var resultConfig = buttonsConfig;
    if ("default" !== buttonsLocation) {
      var position3 = splitPair(buttonsLocation);
      each(resultConfig, function(_, element) {
        extend(element, {
          toolbar: position3[0],
          location: position3[1]
        });
      });
    }
    return resultConfig;
  },
  _applyButtonHandler: function() {
    this.close();
    this.option("focusStateEnabled") && this.focus();
  },
  _cancelButtonHandler: function() {
    this.close();
    this.option("focusStateEnabled") && this.focus();
  },
  _popupOptionChanged: function(args) {
    var options2 = ui_widget_default.getOptionsFromContainer(args);
    this._setPopupOption(options2);
    var optionsKeys = Object.keys(options2);
    if (-1 !== optionsKeys.indexOf("width") || -1 !== optionsKeys.indexOf("height")) {
      this._dimensionChanged();
    }
  },
  _renderSubmitElement: function() {
    if (this.option("useHiddenSubmitElement")) {
      this._$submitElement = renderer_default("<input>").attr("type", "hidden").appendTo(this.$element());
    }
  },
  _setSubmitValue: function() {
    this._getSubmitElement().val(this.option("value"));
  },
  _getSubmitElement: function() {
    if (this.option("useHiddenSubmitElement")) {
      return this._$submitElement;
    } else {
      return this.callBase();
    }
  },
  _dispose: function() {
    this._detachFocusOutEvents();
    this.callBase();
  },
  _optionChanged: function(args) {
    var _this$_popup;
    switch (args.name) {
      case "width":
      case "height":
        this.callBase(args);
        null === (_this$_popup = this._popup) || void 0 === _this$_popup ? void 0 : _this$_popup.repaint();
        break;
      case "opened":
        this._renderOpenedState();
        break;
      case "onOpened":
      case "onClosed":
        this._initVisibilityActions();
        break;
      case "onPopupInitialized":
        this._initPopupInitializedAction();
        break;
      case "fieldTemplate":
        if (isDefined(args.value)) {
          this._renderField();
        } else {
          this._invalidate();
        }
        break;
      case "acceptCustomValue":
      case "openOnFieldClick":
        this._invalidate();
        break;
      case "dropDownButtonTemplate":
      case "showDropDownButton":
        this._updateButtons(["dropDown"]);
        break;
      case "dropDownOptions":
        this._popupOptionChanged(args);
        this._options.cache("dropDownOptions", this.option("dropDownOptions"));
        break;
      case "popupPosition":
        break;
      case "deferRendering":
        if (hasWindow()) {
          this._createPopup();
        }
        break;
      case "applyValueMode":
      case "applyButtonText":
      case "cancelButtonText":
      case "buttonsLocation":
        this._setPopupOption("toolbarItems", this._getPopupToolbarItems());
        break;
      case "useHiddenSubmitElement":
        if (this._$submitElement) {
          this._$submitElement.remove();
          this._$submitElement = void 0;
        }
        this._renderSubmitElement();
        break;
      case "rtlEnabled":
        this._updatePopupPosition(args.value);
        this.callBase(args);
        break;
      default:
        this.callBase(args);
    }
  },
  open: function() {
    this.option("opened", true);
  },
  close: function() {
    this.option("opened", false);
  },
  field: function() {
    return getPublicElement(this._input());
  },
  content: function() {
    return this._popup ? this._popup.content() : null;
  }
});
component_registrator_default("dxDropDownEditor", DropDownEditor);
var ui_drop_down_editor_default = DropDownEditor;

// node_modules/devextreme/esm/ui/list/ui.list.edit.strategy.grouped.js
var LIST_ITEM_CLASS2 = "dx-list-item";
var LIST_GROUP_CLASS2 = "dx-list-group";
var SELECTION_SHIFT = 20;
var SELECTION_MASK = (1 << SELECTION_SHIFT) - 1;
var combineIndex = function(indices) {
  return (indices.group << SELECTION_SHIFT) + indices.item;
};
var splitIndex = function(combinedIndex) {
  return {
    group: combinedIndex >> SELECTION_SHIFT,
    item: combinedIndex & SELECTION_MASK
  };
};
var GroupedEditStrategy = ui_collection_widget_edit_strategy_plain_default.inherit({
  _groupElements: function() {
    return this._collectionWidget._itemContainer().find("." + LIST_GROUP_CLASS2);
  },
  _groupItemElements: function($group) {
    return $group.find("." + LIST_ITEM_CLASS2);
  },
  getIndexByItemData: function(itemData) {
    var groups = this._collectionWidget.option("items");
    var index2 = false;
    if (!itemData) {
      return false;
    }
    if (itemData.items && itemData.items.length) {
      itemData = itemData.items[0];
    }
    each(groups, function(groupIndex, group) {
      if (!group.items) {
        return false;
      }
      each(group.items, function(itemIndex, item) {
        if (item !== itemData) {
          return true;
        }
        index2 = {
          group: groupIndex,
          item: itemIndex
        };
        return false;
      });
      if (index2) {
        return false;
      }
    });
    return index2;
  },
  getItemDataByIndex: function(index2) {
    var items = this._collectionWidget.option("items");
    if (isNumeric(index2)) {
      return this.itemsGetter()[index2];
    }
    return index2 && items[index2.group] && items[index2.group].items[index2.item] || null;
  },
  itemsGetter: function() {
    var resultItems = [];
    var items = this._collectionWidget.option("items");
    for (var i = 0; i < items.length; i++) {
      if (items[i] && items[i].items) {
        resultItems = resultItems.concat(items[i].items);
      } else {
        resultItems.push(items[i]);
      }
    }
    return resultItems;
  },
  deleteItemAtIndex: function(index2) {
    var indices = splitIndex(index2);
    var itemGroup = this._collectionWidget.option("items")[indices.group].items;
    itemGroup.splice(indices.item, 1);
  },
  getKeysByItems: function(items) {
    var plainItems = [];
    var i;
    for (i = 0; i < items.length; i++) {
      if (items[i] && items[i].items) {
        plainItems = plainItems.concat(items[i].items);
      } else {
        plainItems.push(items[i]);
      }
    }
    var result2 = [];
    for (i = 0; i < plainItems.length; i++) {
      result2.push(this._collectionWidget.keyOf(plainItems[i]));
    }
    return result2;
  },
  getIndexByKey: function(key, items) {
    var groups = items || this._collectionWidget.option("items");
    var index2 = -1;
    var that = this;
    each(groups, function(groupIndex, group) {
      if (!group.items) {
        return;
      }
      each(group.items, function(itemIndex, item) {
        var itemKey = that._collectionWidget.keyOf(item);
        if (that._equalKeys(itemKey, key)) {
          index2 = {
            group: groupIndex,
            item: itemIndex
          };
          return false;
        }
      });
      if (-1 !== index2) {
        return false;
      }
    });
    return index2;
  },
  _getGroups: function(items) {
    var dataController2 = this._collectionWidget._dataController;
    var group = dataController2.group();
    if (group) {
      return store_helper_default.queryByOptions(query_default(items), {
        group
      }).toArray();
    }
    return this._collectionWidget.option("items");
  },
  getItemsByKeys: function(keys, items) {
    var result2 = [];
    var groups = this._getGroups(items);
    var groupItemByKeyMap = {};
    var getItemMeta = (key) => {
      var index2 = this.getIndexByKey(key, groups);
      var group = index2 && groups[index2.group];
      if (!group) {
        return;
      }
      return {
        groupKey: group.key,
        item: group.items[index2.item]
      };
    };
    each(keys, function(_, key) {
      var itemMeta = getItemMeta(key);
      if (!itemMeta) {
        return;
      }
      var groupKey = itemMeta.groupKey;
      var item = itemMeta.item;
      var selectedGroup = groupItemByKeyMap[groupKey];
      if (!selectedGroup) {
        selectedGroup = {
          key: groupKey,
          items: []
        };
        groupItemByKeyMap[groupKey] = selectedGroup;
        result2.push(selectedGroup);
      }
      selectedGroup.items.push(item);
    });
    return result2;
  },
  moveItemAtIndexToIndex: function(movingIndex, destinationIndex) {
    var items = this._collectionWidget.option("items");
    var movingIndices = splitIndex(movingIndex);
    var destinationIndices = splitIndex(destinationIndex);
    var movingItemGroup = items[movingIndices.group].items;
    var destinationItemGroup = items[destinationIndices.group].items;
    var movedItemData = movingItemGroup[movingIndices.item];
    movingItemGroup.splice(movingIndices.item, 1);
    destinationItemGroup.splice(destinationIndices.item, 0, movedItemData);
  },
  _isItemIndex: function(index2) {
    return index2 && isNumeric(index2.group) && isNumeric(index2.item);
  },
  _getNormalizedItemIndex: function(itemElement) {
    var $item = renderer_default(itemElement);
    var $group = $item.closest("." + LIST_GROUP_CLASS2);
    if (!$group.length) {
      return -1;
    }
    return combineIndex({
      group: this._groupElements().index($group),
      item: this._groupItemElements($group).index($item)
    });
  },
  _normalizeItemIndex: function(index2) {
    return combineIndex(index2);
  },
  _denormalizeItemIndex: function(index2) {
    return splitIndex(index2);
  },
  _getItemByNormalizedIndex: function(index2) {
    var indices = splitIndex(index2);
    var $group = this._groupElements().eq(indices.group);
    return this._groupItemElements($group).eq(indices.item);
  },
  _itemsFromSameParent: function(firstIndex, secondIndex) {
    return splitIndex(firstIndex).group === splitIndex(secondIndex).group;
  }
});
var ui_list_edit_strategy_grouped_default = GroupedEditStrategy;

// node_modules/devextreme/esm/ui/list/ui.list.edit.decorator_registry.js
var registry = {};
function register(option, type2, decoratorClass) {
  var decoratorsRegistry = registry;
  var decoratorConfig = {};
  decoratorConfig[option] = decoratorsRegistry[option] ? decoratorsRegistry[option] : {};
  decoratorConfig[option][type2] = decoratorClass;
  extend(decoratorsRegistry, decoratorConfig);
}

// node_modules/devextreme/esm/ui/list/ui.list.edit.provider.js
var editOptionsRegistry = [];
var registerOption = function(enabledFunc, decoratorTypeFunc, decoratorSubTypeFunc) {
  editOptionsRegistry.push({
    enabled: enabledFunc,
    decoratorType: decoratorTypeFunc,
    decoratorSubType: decoratorSubTypeFunc
  });
};
registerOption(function() {
  return this.option("menuItems").length;
}, function() {
  return "menu";
}, function() {
  return this.option("menuMode");
});
registerOption(function() {
  return !this.option("menuItems").length && this.option("allowItemDeleting");
}, function() {
  var mode = this.option("itemDeleteMode");
  return "toggle" === mode || "slideButton" === mode || "swipe" === mode || "static" === mode ? "delete" : "menu";
}, function() {
  var mode = this.option("itemDeleteMode");
  if ("slideItem" === mode) {
    mode = "slide";
  }
  return mode;
});
registerOption(function() {
  return "none" !== this.option("selectionMode") && this.option("showSelectionControls");
}, function() {
  return "selection";
}, function() {
  return "default";
});
registerOption(function() {
  return this.option("itemDragging.allowReordering") || this.option("itemDragging.allowDropInsideItem") || this.option("itemDragging.group");
}, function() {
  return "reorder";
}, function() {
  return "default";
});
var LIST_ITEM_BEFORE_BAG_CLASS = "dx-list-item-before-bag";
var LIST_ITEM_AFTER_BAG_CLASS = "dx-list-item-after-bag";
var DECORATOR_BEFORE_BAG_CREATE_METHOD = "beforeBag";
var DECORATOR_AFTER_BAG_CREATE_METHOD = "afterBag";
var DECORATOR_MODIFY_ELEMENT_METHOD = "modifyElement";
var DECORATOR_AFTER_RENDER_METHOD = "afterRender";
var DECORATOR_GET_EXCLUDED_SELECTORS_METHOD = "getExcludedSelectors";
var EditProvider = class_default.inherit({
  ctor: function(list) {
    this._list = list;
    this._fetchRequiredDecorators();
  },
  dispose: function() {
    if (this._decorators && this._decorators.length) {
      each(this._decorators, function(_, decorator) {
        decorator.dispose();
      });
    }
  },
  _fetchRequiredDecorators: function() {
    this._decorators = [];
    each(editOptionsRegistry, (function(_, option) {
      var optionEnabled = option.enabled.call(this._list);
      if (optionEnabled) {
        var decoratorType = option.decoratorType.call(this._list);
        var decoratorSubType = option.decoratorSubType.call(this._list);
        var decorator = this._createDecorator(decoratorType, decoratorSubType);
        this._decorators.push(decorator);
      }
    }).bind(this));
  },
  _createDecorator: function(type2, subType) {
    var decoratorClass = this._findDecorator(type2, subType);
    return new decoratorClass(this._list);
  },
  _findDecorator: function(type2, subType) {
    var _registry$type;
    var foundDecorator = null === (_registry$type = registry[type2]) || void 0 === _registry$type ? void 0 : _registry$type[subType];
    if (!foundDecorator) {
      throw ui_errors_default.Error("E1012", type2, subType);
    }
    return foundDecorator;
  },
  modifyItemElement: function(args) {
    var $itemElement = renderer_default(args.itemElement);
    var config3 = {
      $itemElement
    };
    this._prependBeforeBags($itemElement, config3);
    this._appendAfterBags($itemElement, config3);
    this._applyDecorators(DECORATOR_MODIFY_ELEMENT_METHOD, config3);
  },
  afterItemsRendered: function() {
    this._applyDecorators(DECORATOR_AFTER_RENDER_METHOD);
  },
  _prependBeforeBags: function($itemElement, config3) {
    var $beforeBags = this._collectDecoratorsMarkup(DECORATOR_BEFORE_BAG_CREATE_METHOD, config3, LIST_ITEM_BEFORE_BAG_CLASS);
    $itemElement.prepend($beforeBags);
  },
  _appendAfterBags: function($itemElement, config3) {
    var $afterBags = this._collectDecoratorsMarkup(DECORATOR_AFTER_BAG_CREATE_METHOD, config3, LIST_ITEM_AFTER_BAG_CLASS);
    $itemElement.append($afterBags);
  },
  _collectDecoratorsMarkup: function(method, config3, containerClass) {
    var $collector = renderer_default("<div>");
    each(this._decorators, function() {
      var $container = renderer_default("<div>").addClass(containerClass);
      this[method](extend({
        $container
      }, config3));
      if ($container.children().length) {
        $collector.append($container);
      }
    });
    return $collector.children();
  },
  _applyDecorators: function(method, config3) {
    each(this._decorators, function() {
      this[method](config3);
    });
  },
  _handlerExists: function(name2) {
    if (!this._decorators) {
      return false;
    }
    var decorators = this._decorators;
    var length = decorators.length;
    for (var i = 0; i < length; i++) {
      if (decorators[i][name2] !== noop2) {
        return true;
      }
    }
    return false;
  },
  _eventHandler: function(name2, $itemElement, e) {
    if (!this._decorators) {
      return false;
    }
    var response = false;
    var decorators = this._decorators;
    var length = decorators.length;
    for (var i = 0; i < length; i++) {
      response = decorators[i][name2]($itemElement, e);
      if (response) {
        break;
      }
    }
    return response;
  },
  handleClick: function($itemElement, e) {
    return this._eventHandler("handleClick", $itemElement, e);
  },
  handleKeyboardEvents: function(currentFocusedIndex, moveFocusUp) {
    return this._eventHandler("handleKeyboardEvents", currentFocusedIndex, moveFocusUp);
  },
  handleEnterPressing: function(e) {
    return this._eventHandler("handleEnterPressing", e);
  },
  contextMenuHandlerExists: function() {
    return this._handlerExists("handleContextMenu");
  },
  handleContextMenu: function($itemElement, e) {
    return this._eventHandler("handleContextMenu", $itemElement, e);
  },
  getExcludedItemSelectors: function() {
    var excludedSelectors = [];
    this._applyDecorators(DECORATOR_GET_EXCLUDED_SELECTORS_METHOD, excludedSelectors);
    return excludedSelectors.join(",");
  }
});
var ui_list_edit_provider_default = EditProvider;

// node_modules/devextreme/esm/ui/list/ui.list.edit.js
var LIST_ITEM_SELECTED_CLASS = "dx-list-item-selected";
var LIST_ITEM_RESPONSE_WAIT_CLASS = "dx-list-item-response-wait";
var ListEdit = ListBase.inherit({
  _supportedKeys() {
    var that = this;
    var parent = this.callBase();
    var moveFocusedItem = (e, moveUp) => {
      var editStrategy = this._editStrategy;
      var focusedElement = this.option("focusedElement");
      var focusedItemIndex = editStrategy.getNormalizedIndex(focusedElement);
      var isLastIndexFocused = focusedItemIndex === this._getLastItemIndex();
      if (isLastIndexFocused && this._dataController.isLoading()) {
        return;
      }
      if (e.shiftKey && that.option("itemDragging.allowReordering")) {
        var nextItemIndex = focusedItemIndex + (moveUp ? -1 : 1);
        var $nextItem = editStrategy.getItemElement(nextItemIndex);
        this.reorderItem(focusedElement, $nextItem);
        this.scrollToItem(focusedElement);
        e.preventDefault();
      } else {
        var editProvider = this._editProvider;
        var isInternalMoving = editProvider.handleKeyboardEvents(focusedItemIndex, moveUp);
        if (!isInternalMoving) {
          moveUp ? parent.upArrow(e) : parent.downArrow(e);
        }
      }
    };
    return extend({}, parent, {
      del: (e) => {
        if (that.option("allowItemDeleting")) {
          e.preventDefault();
          that.deleteItem(that.option("focusedElement"));
        }
      },
      upArrow: (e) => moveFocusedItem(e, true),
      downArrow: (e) => moveFocusedItem(e),
      enter: function(e) {
        if (!this._editProvider.handleEnterPressing(e)) {
          parent.enter.apply(this, arguments);
        }
      },
      space: function(e) {
        if (!this._editProvider.handleEnterPressing(e)) {
          parent.space.apply(this, arguments);
        }
      }
    });
  },
  _updateSelection() {
    this._editProvider.afterItemsRendered();
    this.callBase();
  },
  _getLastItemIndex() {
    return this._itemElements().length - 1;
  },
  _refreshItemElements() {
    this.callBase();
    var excludedSelectors = this._editProvider.getExcludedItemSelectors();
    if (excludedSelectors.length) {
      this._itemElementsCache = this._itemElementsCache.not(excludedSelectors);
    }
  },
  _isItemStrictEquals: function(item1, item2) {
    var privateKey = item1 && item1.__dx_key__;
    if (privateKey && !this.key() && this._selection.isItemSelected(privateKey)) {
      return false;
    }
    return this.callBase(item1, item2);
  },
  _getDefaultOptions() {
    return extend(this.callBase(), {
      showSelectionControls: false,
      selectionMode: "none",
      selectAllMode: "page",
      onSelectAllValueChanged: null,
      selectAllText: message_default.format("dxList-selectAll"),
      menuItems: [],
      menuMode: "context",
      allowItemDeleting: false,
      itemDeleteMode: "static",
      itemDragging: {}
    });
  },
  _defaultOptionsRules() {
    return this.callBase().concat([{
      device: (_device) => "ios" === _device.platform,
      options: {
        menuMode: "slide",
        itemDeleteMode: "slideItem"
      }
    }, {
      device: {
        platform: "android"
      },
      options: {
        itemDeleteMode: "swipe"
      }
    }]);
  },
  _init() {
    this.callBase();
    this._initEditProvider();
  },
  _initDataSource() {
    this.callBase();
    if (!this._isPageSelectAll()) {
      this._dataSource && this._dataSource.requireTotalCount(true);
    }
  },
  _isPageSelectAll() {
    return "page" === this.option("selectAllMode");
  },
  _initEditProvider() {
    this._editProvider = new ui_list_edit_provider_default(this);
  },
  _disposeEditProvider() {
    if (this._editProvider) {
      this._editProvider.dispose();
    }
  },
  _refreshEditProvider() {
    this._disposeEditProvider();
    this._initEditProvider();
  },
  _initEditStrategy() {
    if (this.option("grouped")) {
      this._editStrategy = new ui_list_edit_strategy_grouped_default(this);
    } else {
      this.callBase();
    }
  },
  _initMarkup() {
    this._refreshEditProvider();
    this.callBase();
  },
  _renderItems() {
    this.callBase(...arguments);
    this._editProvider.afterItemsRendered();
  },
  _selectedItemClass: () => LIST_ITEM_SELECTED_CLASS,
  _itemResponseWaitClass: () => LIST_ITEM_RESPONSE_WAIT_CLASS,
  _itemClickHandler(e) {
    var $itemElement = renderer_default(e.currentTarget);
    if ($itemElement.is(".dx-state-disabled, .dx-state-disabled *")) {
      return;
    }
    var handledByEditProvider = this._editProvider.handleClick($itemElement, e);
    if (handledByEditProvider) {
      return;
    }
    this._saveSelectionChangeEvent(e);
    this.callBase(...arguments);
  },
  _shouldFireContextMenuEvent() {
    return this.callBase(...arguments) || this._editProvider.contextMenuHandlerExists();
  },
  _itemHoldHandler(e) {
    var $itemElement = renderer_default(e.currentTarget);
    if ($itemElement.is(".dx-state-disabled, .dx-state-disabled *")) {
      return;
    }
    var handledByEditProvider = isTouchEvent(e) && this._editProvider.handleContextMenu($itemElement, e);
    if (handledByEditProvider) {
      e.handledByEditProvider = true;
      return;
    }
    this.callBase(...arguments);
  },
  _getItemContainer: function(changeData) {
    if (this.option("grouped")) {
      var _this$_editStrategy$g;
      var groupIndex = null === (_this$_editStrategy$g = this._editStrategy.getIndexByItemData(changeData)) || void 0 === _this$_editStrategy$g ? void 0 : _this$_editStrategy$g.group;
      return this._getGroupContainerByIndex(groupIndex);
    } else {
      return this.callBase(changeData);
    }
  },
  _itemContextMenuHandler(e) {
    var $itemElement = renderer_default(e.currentTarget);
    if ($itemElement.is(".dx-state-disabled, .dx-state-disabled *")) {
      return;
    }
    var handledByEditProvider = !e.handledByEditProvider && this._editProvider.handleContextMenu($itemElement, e);
    if (handledByEditProvider) {
      e.preventDefault();
      return;
    }
    this.callBase(...arguments);
  },
  _postprocessRenderItem(args) {
    this.callBase(...arguments);
    this._editProvider.modifyItemElement(args);
  },
  _clean() {
    this._disposeEditProvider();
    this.callBase();
  },
  focusListItem(index2) {
    var $item = this._editStrategy.getItemElement(index2);
    this.option("focusedElement", $item);
    this.focus();
    this.scrollToItem(this.option("focusedElement"));
  },
  _optionChanged(args) {
    switch (args.name) {
      case "selectAllMode":
        this._initDataSource();
        this._dataController.pageIndex(0);
        this._dataController.load();
        break;
      case "grouped":
        this._clearSelectedItems();
        delete this._renderingGroupIndex;
        this._initEditStrategy();
        this.callBase(args);
        break;
      case "showSelectionControls":
      case "menuItems":
      case "menuMode":
      case "allowItemDeleting":
      case "itemDeleteMode":
      case "itemDragging":
      case "selectAllText":
        this._invalidate();
        break;
      case "onSelectAllValueChanged":
        break;
      default:
        this.callBase(args);
    }
  },
  selectAll() {
    return this._selection.selectAll(this._isPageSelectAll());
  },
  unselectAll() {
    return this._selection.deselectAll(this._isPageSelectAll());
  },
  isSelectAll() {
    return this._selection.getSelectAllState(this._isPageSelectAll());
  },
  getFlatIndexByItemElement(itemElement) {
    return this._itemElements().index(itemElement);
  },
  getItemElementByFlatIndex(flatIndex) {
    var $itemElements = this._itemElements();
    if (flatIndex < 0 || flatIndex >= $itemElements.length) {
      return renderer_default();
    }
    return $itemElements.eq(flatIndex);
  },
  getItemByIndex(index2) {
    return this._editStrategy.getItemDataByIndex(index2);
  },
  deleteItem(itemElement) {
    var editStrategy = this._editStrategy;
    var deletingElementIndex = editStrategy.getNormalizedIndex(itemElement);
    var focusedElement = this.option("focusedElement");
    var focusedItemIndex = focusedElement ? editStrategy.getNormalizedIndex(focusedElement) : deletingElementIndex;
    var isLastIndexFocused = focusedItemIndex === this._getLastItemIndex();
    var nextFocusedItem = isLastIndexFocused || deletingElementIndex < focusedItemIndex ? focusedItemIndex - 1 : focusedItemIndex;
    var promise = this.callBase(itemElement);
    return promise.done(function() {
      return this.focusListItem(nextFocusedItem);
    });
  }
});
var ui_list_edit_default = ListEdit;

// node_modules/devextreme/esm/ui/list/ui.list.edit.search.js
var ListSearch = ui_list_edit_default.inherit(ui_search_box_mixin_default).inherit({
  _addWidgetPrefix: function(className) {
    return "dx-list-" + className;
  },
  _getCombinedFilter: function() {
    var dataController2 = this._dataController;
    var storeLoadOptions = {
      filter: dataController2.filter()
    };
    dataController2.addSearchFilter(storeLoadOptions);
    var filter = storeLoadOptions.filter;
    return filter;
  },
  _initDataSource: function() {
    var value2 = this.option("searchValue");
    var expr = this.option("searchExpr");
    var mode = this.option("searchMode");
    this.callBase();
    var dataController2 = this._dataController;
    value2 && value2.length && dataController2.searchValue(value2);
    mode.length && dataController2.searchOperation(ui_search_box_mixin_default.getOperationBySearchMode(mode));
    expr && dataController2.searchExpr(expr);
  }
});
var ui_list_edit_search_default = ListSearch;

// node_modules/devextreme/esm/ui/list_light.js
component_registrator_default("dxList", ui_list_edit_search_default);
var list_light_default = ui_list_edit_search_default;

// node_modules/devextreme/esm/ui/editor/ui.data_expression.js
var DataExpressionMixin = extend({}, data_helper_default, {
  _dataExpressionDefaultOptions: function() {
    return {
      items: [],
      dataSource: null,
      itemTemplate: "item",
      value: null,
      valueExpr: "this",
      displayExpr: void 0
    };
  },
  _initDataExpressions: function() {
    this._compileValueGetter();
    this._compileDisplayGetter();
    this._initDynamicTemplates();
    this._initDataSource();
    this._itemsToDataSource();
  },
  _itemsToDataSource: function() {
    if (!this.option("dataSource")) {
      this._dataSource = new DataSource({
        store: new array_store_default(this.option("items")),
        pageSize: 0
      });
      this._initDataController();
    }
  },
  _compileDisplayGetter: function() {
    this._displayGetter = compileGetter(this._displayGetterExpr());
  },
  _displayGetterExpr: function() {
    return this.option("displayExpr");
  },
  _compileValueGetter: function() {
    this._valueGetter = compileGetter(this._valueGetterExpr());
  },
  _valueGetterExpr: function() {
    return this.option("valueExpr") || "this";
  },
  _loadValue: function(value2) {
    var deferred = new Deferred();
    value2 = this._unwrappedValue(value2);
    if (!isDefined(value2)) {
      return deferred.reject().promise();
    }
    this._loadSingle(this._valueGetterExpr(), value2).done((function(item) {
      this._isValueEquals(this._valueGetter(item), value2) ? deferred.resolve(item) : deferred.reject();
    }).bind(this)).fail(function() {
      deferred.reject();
    });
    this._loadValueDeferred = deferred;
    return deferred.promise();
  },
  _rejectValueLoading: function() {
    var _this$_loadValueDefer;
    null === (_this$_loadValueDefer = this._loadValueDeferred) || void 0 === _this$_loadValueDefer ? void 0 : _this$_loadValueDefer.reject({
      shouldSkipCallback: true
    });
  },
  _getCurrentValue: function() {
    return this.option("value");
  },
  _unwrappedValue: function(value2) {
    var _value;
    value2 = null !== (_value = value2) && void 0 !== _value ? _value : this._getCurrentValue();
    if (value2 && this._dataSource && "this" === this._valueGetterExpr()) {
      value2 = this._getItemKey(value2);
    }
    return variable_wrapper_default.unwrap(value2);
  },
  _getItemKey: function(value2) {
    var key = this._dataSource.key();
    if (Array.isArray(key)) {
      var result2 = {};
      for (var i = 0, n = key.length; i < n; i++) {
        result2[key[i]] = value2[key[i]];
      }
      return result2;
    }
    if (key && "object" === typeof value2) {
      value2 = value2[key];
    }
    return value2;
  },
  _isValueEquals: function(value1, value2) {
    var dataSourceKey = this._dataSource && this._dataSource.key();
    var result2 = this._compareValues(value1, value2);
    if (!result2 && dataSourceKey && isDefined(value1) && isDefined(value2)) {
      if (Array.isArray(dataSourceKey)) {
        result2 = this._compareByCompositeKey(value1, value2, dataSourceKey);
      } else {
        result2 = this._compareByKey(value1, value2, dataSourceKey);
      }
    }
    return result2;
  },
  _compareByCompositeKey: function(value1, value2, key) {
    var isObject2 = isObject;
    if (!isObject2(value1) || !isObject2(value2)) {
      return false;
    }
    for (var i = 0, n = key.length; i < n; i++) {
      if (value1[key[i]] !== value2[key[i]]) {
        return false;
      }
    }
    return true;
  },
  _compareByKey: function(value1, value2, key) {
    var unwrapObservable = variable_wrapper_default.unwrap;
    var valueKey1 = ensureDefined(unwrapObservable(value1[key]), value1);
    var valueKey2 = ensureDefined(unwrapObservable(value2[key]), value2);
    return this._compareValues(valueKey1, valueKey2);
  },
  _compareValues: function(value1, value2) {
    return toComparable(value1, true) === toComparable(value2, true);
  },
  _initDynamicTemplates: noop2,
  _setCollectionWidgetItemTemplate: function() {
    this._initDynamicTemplates();
    this._setCollectionWidgetOption("itemTemplate", this.option("itemTemplate"));
  },
  _getCollectionKeyExpr: function() {
    var valueExpr = this.option("valueExpr");
    var isValueExprField = isString(valueExpr) && "this" !== valueExpr || isFunction(valueExpr);
    return isValueExprField ? valueExpr : null;
  },
  _dataExpressionOptionChanged: function(args) {
    switch (args.name) {
      case "items":
        this._itemsToDataSource();
        this._setCollectionWidgetOption("items");
        break;
      case "dataSource":
        this._initDataSource();
        break;
      case "itemTemplate":
        this._setCollectionWidgetItemTemplate();
        break;
      case "valueExpr":
        this._compileValueGetter();
        break;
      case "displayExpr":
        this._compileDisplayGetter();
        this._initDynamicTemplates();
        this._setCollectionWidgetOption("displayExpr");
    }
  }
});
var ui_data_expression_default = DataExpressionMixin;

// node_modules/devextreme/esm/ui/drop_down_editor/ui.drop_down_list.js
var window21 = getWindow();
var LIST_ITEM_SELECTOR2 = ".dx-list-item";
var LIST_ITEM_DATA_KEY2 = "dxListItemData";
var DROPDOWNLIST_POPUP_WRAPPER_CLASS = "dx-dropdownlist-popup-wrapper";
var SEARCH_EVENT = "input";
var SEARCH_MODES = ["startswith", "contains", "endwith", "notcontains"];
var useCompositionEvents = "android" !== devices_default.real().platform;
var DropDownList = ui_drop_down_editor_default.inherit({
  _supportedKeys: function() {
    var parent = this.callBase();
    return extend({}, parent, {
      tab: function(e) {
        if (this._allowSelectItemByTab()) {
          this._saveValueChangeEvent(e);
          var $focusedItem = renderer_default(this._list.option("focusedElement"));
          $focusedItem.length && this._setSelectedElement($focusedItem);
        }
        parent.tab.apply(this, arguments);
      },
      space: noop2,
      home: noop2,
      end: noop2
    });
  },
  _allowSelectItemByTab: function() {
    return this.option("opened") && "instantly" === this.option("applyValueMode");
  },
  _setSelectedElement: function($element) {
    var value2 = this._valueGetter(this._list._getItemData($element));
    this._setValue(value2);
  },
  _setValue: function(value2) {
    this.option("value", value2);
  },
  _getDefaultOptions: function() {
    return extend(this.callBase(), extend(ui_data_expression_default._dataExpressionDefaultOptions(), {
      displayValue: void 0,
      searchEnabled: false,
      searchMode: "contains",
      searchTimeout: 500,
      minSearchLength: 0,
      searchExpr: null,
      valueChangeEvent: "input change keyup",
      selectedItem: null,
      noDataText: message_default.format("dxCollectionWidget-noDataText"),
      encodeNoDataText: false,
      onSelectionChanged: null,
      onItemClick: noop2,
      showDataBeforeSearch: false,
      grouped: false,
      groupTemplate: "group",
      popupPosition: {
        my: "left top",
        at: "left bottom",
        offset: {
          h: 0,
          v: 0
        },
        collision: "flip"
      },
      wrapItemText: false,
      useItemTextAsTitle: false
    }));
  },
  _defaultOptionsRules: function() {
    return this.callBase().concat([{
      device: {
        platform: "ios"
      },
      options: {
        popupPosition: {
          offset: {
            v: -1
          }
        }
      }
    }, {
      device: {
        platform: "generic"
      },
      options: {
        buttonsLocation: "bottom center"
      }
    }]);
  },
  _setOptionsByReference: function() {
    this.callBase();
    extend(this._optionsByReference, {
      value: true,
      selectedItem: true,
      displayValue: true
    });
  },
  _init: function() {
    this.callBase();
    this._initDataExpressions();
    this._initActions();
    this._setListDataSource();
    this._validateSearchMode();
    this._clearSelectedItem();
    this._initItems();
  },
  _setListFocusedElementOptionChange: function() {
    this._list._updateParentActiveDescendant = this._updateActiveDescendant.bind(this);
  },
  _initItems: function() {
    var items = this.option().items;
    if (items && !items.length && this._dataSource) {
      this.option().items = this._dataSource.items();
    }
  },
  _initActions: function() {
    this._initContentReadyAction();
    this._initSelectionChangedAction();
    this._initItemClickAction();
  },
  _initContentReadyAction: function() {
    this._contentReadyAction = this._createActionByOption("onContentReady", {
      excludeValidators: ["disabled", "readOnly"]
    });
  },
  _initSelectionChangedAction: function() {
    this._selectionChangedAction = this._createActionByOption("onSelectionChanged", {
      excludeValidators: ["disabled", "readOnly"]
    });
  },
  _initItemClickAction: function() {
    this._itemClickAction = this._createActionByOption("onItemClick");
  },
  _initTemplates: function() {
    this.callBase();
    this._templateManager.addDefaultTemplates({
      item: new ChildDefaultTemplate("item")
    });
  },
  _isEditable: function() {
    return this.callBase() || this.option("searchEnabled");
  },
  _saveFocusOnWidget: function(e) {
    if (this._list && this._list.initialOption("focusStateEnabled")) {
      this._focusInput();
    }
  },
  _fitIntoRange: function(value2, start, end) {
    if (value2 > end) {
      return start;
    }
    if (value2 < start) {
      return end;
    }
    return value2;
  },
  _items: function() {
    var items = this._getPlainItems(!this._list && this._dataSource.items());
    var availableItems = new query_default(items).filter("disabled", "<>", true).toArray();
    return availableItems;
  },
  _calcNextItem: function(step) {
    var items = this._items();
    var nextIndex = this._fitIntoRange(this._getSelectedIndex() + step, 0, items.length - 1);
    return items[nextIndex];
  },
  _getSelectedIndex: function() {
    var items = this._items();
    var selectedItem = this.option("selectedItem");
    var result2 = -1;
    each(items, (function(index2, item) {
      if (this._isValueEquals(item, selectedItem)) {
        result2 = index2;
        return false;
      }
    }).bind(this));
    return result2;
  },
  _createPopup: function() {
    this.callBase();
    this._updateCustomBoundaryContainer();
    this._popup.$wrapper().addClass(this._popupWrapperClass());
    var $popupContent = this._popup.$content();
    events_engine_default.off($popupContent, "mouseup");
    events_engine_default.on($popupContent, "mouseup", this._saveFocusOnWidget.bind(this));
  },
  _updateCustomBoundaryContainer: function() {
    var customContainer = this.option("dropDownOptions.container");
    var $container = customContainer && renderer_default(customContainer);
    if ($container && $container.length && !isWindow($container.get(0))) {
      var $containerWithParents = [].slice.call($container.parents());
      $containerWithParents.unshift($container.get(0));
      each($containerWithParents, (function(i, parent) {
        if (parent === renderer_default("body").get(0)) {
          return false;
        } else if ("hidden" === window21.getComputedStyle(parent).overflowY) {
          this._$customBoundaryContainer = renderer_default(parent);
          return false;
        }
      }).bind(this));
    }
  },
  _popupWrapperClass: function() {
    return DROPDOWNLIST_POPUP_WRAPPER_CLASS;
  },
  _renderInputValue: function() {
    var value2 = this._getCurrentValue();
    this._rejectValueLoading();
    return this._loadInputValue(value2, this._setSelectedItem.bind(this)).always(this.callBase.bind(this, value2));
  },
  _loadInputValue: function(value2, callback) {
    return this._loadItem(value2).always(callback);
  },
  _getItemFromPlain: function(value2, cache) {
    var plainItems;
    var selectedItem;
    if (cache && "object" !== typeof value2) {
      if (!cache.itemByValue) {
        cache.itemByValue = {};
        plainItems = this._getPlainItems();
        plainItems.forEach(function(item) {
          cache.itemByValue[this._valueGetter(item)] = item;
        }, this);
      }
      selectedItem = cache.itemByValue[value2];
    }
    if (!selectedItem) {
      plainItems = this._getPlainItems();
      selectedItem = grep(plainItems, (function(item) {
        return this._isValueEquals(this._valueGetter(item), value2);
      }).bind(this))[0];
    }
    return selectedItem;
  },
  _loadItem: function(value2, cache) {
    var selectedItem = this._getItemFromPlain(value2, cache);
    return void 0 !== selectedItem ? new Deferred().resolve(selectedItem).promise() : this._loadValue(value2);
  },
  _getPlainItems: function(items) {
    var plainItems = [];
    items = items || this.option("items") || this._dataSource.items() || [];
    for (var i = 0; i < items.length; i++) {
      if (items[i] && items[i].items) {
        plainItems = plainItems.concat(items[i].items);
      } else {
        plainItems.push(items[i]);
      }
    }
    return plainItems;
  },
  _updateActiveDescendant($target) {
    var _this$_list;
    var opened = this.option("opened");
    var listFocusedItemId = null === (_this$_list = this._list) || void 0 === _this$_list ? void 0 : _this$_list.getFocusedItemId();
    var isElementOnDom = renderer_default("#".concat(listFocusedItemId)).length > 0;
    var activedescendant = opened && isElementOnDom && listFocusedItemId;
    this.setAria({
      activedescendant: activedescendant || null
    }, $target);
  },
  _setSelectedItem: function(item) {
    var displayValue = this._displayValue(item);
    this.option("selectedItem", ensureDefined(item, null));
    this.option("displayValue", displayValue);
  },
  _displayValue: function(item) {
    return this._displayGetter(item);
  },
  _refreshSelected: function() {
    var cache = {};
    this._listItemElements().each((function(_, itemElement) {
      var $itemElement = renderer_default(itemElement);
      var itemValue = this._valueGetter($itemElement.data(LIST_ITEM_DATA_KEY2));
      var isItemSelected = this._isSelectedValue(itemValue, cache);
      if (isItemSelected) {
        this._list.selectItem($itemElement);
      } else {
        this._list.unselectItem($itemElement);
      }
    }).bind(this));
  },
  _popupShownHandler: function() {
    this.callBase();
    this._setFocusPolicy();
  },
  _setFocusPolicy: function() {
    if (!this.option("focusStateEnabled") || !this._list) {
      return;
    }
    this._list.option("focusedElement", null);
  },
  _isSelectedValue: function(value2) {
    return this._isValueEquals(value2, this.option("value"));
  },
  _validateSearchMode: function() {
    var searchMode = this.option("searchMode");
    var normalizedSearchMode = searchMode.toLowerCase();
    if (!SEARCH_MODES.includes(normalizedSearchMode)) {
      throw ui_errors_default.Error("E1019", searchMode);
    }
  },
  _clearSelectedItem: function() {
    this.option("selectedItem", null);
  },
  _processDataSourceChanging: function() {
    this._initDataController();
    this._setListOption("_dataController", this._dataController);
    this._setListDataSource();
    this._renderInputValue().fail((function() {
      if (this._isCustomValueAllowed()) {
        return;
      }
      this._clearSelectedItem();
    }).bind(this));
  },
  _isCustomValueAllowed: function() {
    return this.option("displayCustomValue");
  },
  clear: function() {
    this.callBase();
    this._clearFilter();
    this._clearSelectedItem();
  },
  _listItemElements: function() {
    return this._$list ? this._$list.find(LIST_ITEM_SELECTOR2) : renderer_default();
  },
  _popupConfig: function() {
    return extend(this.callBase(), {
      templatesRenderAsynchronously: false,
      autoResizeEnabled: false,
      maxHeight: this._getMaxHeight.bind(this)
    });
  },
  _renderPopupContent: function() {
    this.callBase();
    this._renderList();
  },
  _getKeyboardListeners() {
    var canListHaveFocus = this._canListHaveFocus();
    return this.callBase().concat([!canListHaveFocus && this._list]);
  },
  _renderList: function() {
    this._listId = "dx-" + new guid_default()._value;
    var $list = renderer_default("<div>").attr("id", this._listId).appendTo(this._popup.$content());
    this._$list = $list;
    this._list = this._createComponent($list, list_light_default, this._listConfig());
    this._refreshList();
    this._renderPreventBlurOnListClick();
    this._setListFocusedElementOptionChange();
  },
  _renderPreventBlurOnListClick: function() {
    var eventName = addNamespace2("mousedown", "dxDropDownList");
    events_engine_default.off(this._$list, eventName);
    events_engine_default.on(this._$list, eventName, (e) => e.preventDefault());
  },
  _getControlsAria() {
    return this._list && this._listId;
  },
  _renderOpenedState: function() {
    this.callBase();
    this._list && this._updateActiveDescendant();
    this.setAria("owns", this._popup && this._popupContentId);
  },
  _setDefaultAria: function() {
    this.setAria({
      haspopup: "listbox",
      autocomplete: "list"
    });
  },
  _refreshList: function() {
    if (this._list && this._shouldRefreshDataSource()) {
      this._setListDataSource();
    }
  },
  _shouldRefreshDataSource: function() {
    var dataSourceProvided = !!this._list.option("dataSource");
    return dataSourceProvided !== this._needPassDataSourceToList();
  },
  _isDesktopDevice: function() {
    return "desktop" === devices_default.real().deviceType;
  },
  _listConfig: function() {
    var options2 = {
      selectionMode: "single",
      _templates: this.option("_templates"),
      templateProvider: this.option("templateProvider"),
      noDataText: this.option("noDataText"),
      encodeNoDataText: this.option("encodeNoDataText"),
      grouped: this.option("grouped"),
      wrapItemText: this.option("wrapItemText"),
      useItemTextAsTitle: this.option("useItemTextAsTitle"),
      onContentReady: this._listContentReadyHandler.bind(this),
      itemTemplate: this.option("itemTemplate"),
      indicateLoading: false,
      keyExpr: this._getCollectionKeyExpr(),
      displayExpr: this._displayGetterExpr(),
      groupTemplate: this.option("groupTemplate"),
      onItemClick: this._listItemClickAction.bind(this),
      dataSource: this._getDataSource(),
      _dataController: this._dataController,
      hoverStateEnabled: this._isDesktopDevice() ? this.option("hoverStateEnabled") : false,
      focusStateEnabled: this._isDesktopDevice() ? this.option("focusStateEnabled") : false
    };
    if (!this._canListHaveFocus()) {
      options2.tabIndex = null;
    }
    return options2;
  },
  _canListHaveFocus: () => false,
  _getDataSource: function() {
    return this._needPassDataSourceToList() ? this._dataSource : null;
  },
  _dataSourceOptions: function() {
    return {
      paginate: false
    };
  },
  _getGroupedOption: function() {
    return this.option("grouped");
  },
  _dataSourceFromUrlLoadMode: function() {
    return "raw";
  },
  _listContentReadyHandler: function() {
    this._list = this._list || this._$list.dxList("instance");
    if (!this.option("deferRendering")) {
      this._refreshSelected();
    }
    this._updatePopupWidth();
    this._updateListDimensions();
    this._contentReadyAction();
  },
  _setListOption: function(optionName, value2) {
    this._setWidgetOption("_list", arguments);
  },
  _listItemClickAction: function(e) {
    this._listItemClickHandler(e);
    this._itemClickAction(e);
  },
  _listItemClickHandler: noop2,
  _setListDataSource: function() {
    if (!this._list) {
      return;
    }
    this._setListOption("dataSource", this._getDataSource());
    if (!this._needPassDataSourceToList()) {
      this._setListOption("items", []);
    }
  },
  _needPassDataSourceToList: function() {
    return this.option("showDataBeforeSearch") || this._isMinSearchLengthExceeded();
  },
  _isMinSearchLengthExceeded: function() {
    return this._searchValue().toString().length >= this.option("minSearchLength");
  },
  _needClearFilter: function() {
    return this._canKeepDataSource() ? false : this._needPassDataSourceToList();
  },
  _canKeepDataSource: function() {
    var isMinSearchLengthExceeded = this._isMinSearchLengthExceeded();
    return this._dataController.isLoaded() && this.option("showDataBeforeSearch") && this.option("minSearchLength") && !isMinSearchLengthExceeded && !this._isLastMinSearchLengthExceeded;
  },
  _searchValue: function() {
    return this._input().val() || "";
  },
  _getSearchEvent: function() {
    return addNamespace2(SEARCH_EVENT, this.NAME + "Search");
  },
  _getCompositionStartEvent: function() {
    return addNamespace2("compositionstart", this.NAME + "CompositionStart");
  },
  _getCompositionEndEvent: function() {
    return addNamespace2("compositionend", this.NAME + "CompositionEnd");
  },
  _getSetFocusPolicyEvent: function() {
    return addNamespace2("input", this.NAME + "FocusPolicy");
  },
  _renderEvents: function() {
    this.callBase();
    events_engine_default.on(this._input(), this._getSetFocusPolicyEvent(), () => {
      this._setFocusPolicy();
    });
    if (this._shouldRenderSearchEvent()) {
      events_engine_default.on(this._input(), this._getSearchEvent(), (e) => {
        this._searchHandler(e);
      });
      if (useCompositionEvents) {
        events_engine_default.on(this._input(), this._getCompositionStartEvent(), () => {
          this._isTextCompositionInProgress(true);
        });
        events_engine_default.on(this._input(), this._getCompositionEndEvent(), (e) => {
          this._isTextCompositionInProgress(void 0);
          this._searchHandler(e, this._searchValue());
        });
      }
    }
  },
  _shouldRenderSearchEvent: function() {
    return this.option("searchEnabled");
  },
  _refreshEvents: function() {
    events_engine_default.off(this._input(), this._getSearchEvent());
    events_engine_default.off(this._input(), this._getSetFocusPolicyEvent());
    if (useCompositionEvents) {
      events_engine_default.off(this._input(), this._getCompositionStartEvent());
      events_engine_default.off(this._input(), this._getCompositionEndEvent());
    }
    this.callBase();
  },
  _isTextCompositionInProgress: function(value2) {
    if (arguments.length) {
      this._isTextComposition = value2;
    } else {
      return this._isTextComposition;
    }
  },
  _searchHandler: function(e, searchValue) {
    if (this._isTextCompositionInProgress()) {
      return;
    }
    if (!this._isMinSearchLengthExceeded()) {
      this._searchCanceled();
      return;
    }
    var searchTimeout = this.option("searchTimeout");
    if (searchTimeout) {
      this._clearSearchTimer();
      this._searchTimer = setTimeout(() => {
        this._searchDataSource(searchValue);
      }, searchTimeout);
    } else {
      this._searchDataSource(searchValue);
    }
  },
  _searchCanceled: function() {
    this._clearSearchTimer();
    if (this._needClearFilter()) {
      this._filterDataSource(null);
    }
    this._refreshList();
  },
  _searchDataSource: function() {
    var searchValue = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this._searchValue();
    this._filterDataSource(searchValue);
  },
  _filterDataSource: function(searchValue) {
    this._clearSearchTimer();
    var dataController2 = this._dataController;
    dataController2.searchExpr(this.option("searchExpr") || this._displayGetterExpr());
    dataController2.searchOperation(this.option("searchMode"));
    dataController2.searchValue(searchValue);
    dataController2.load().done(this._dataSourceFiltered.bind(this, searchValue));
  },
  _clearFilter: function() {
    var dataController2 = this._dataController;
    dataController2.searchValue() && dataController2.searchValue(null);
  },
  _dataSourceFiltered: function() {
    this._isLastMinSearchLengthExceeded = this._isMinSearchLengthExceeded();
    this._refreshList();
    this._refreshPopupVisibility();
  },
  _shouldOpenPopup: function() {
    return this._hasItemsToShow();
  },
  _refreshPopupVisibility: function() {
    if (this.option("readOnly") || !this._searchValue()) {
      return;
    }
    var shouldOpenPopup = this._shouldOpenPopup();
    if (shouldOpenPopup && !this._isFocused()) {
      return;
    }
    this.option("opened", shouldOpenPopup);
    if (shouldOpenPopup) {
      this._updatePopupWidth();
      this._updateListDimensions();
    }
  },
  _dataSourceChangedHandler: function(newItems) {
    if (0 === this._dataController.pageIndex()) {
      this.option().items = newItems;
    } else {
      this.option().items = this.option().items.concat(newItems);
    }
  },
  _hasItemsToShow: function() {
    var dataController2 = this._dataController;
    var resultItems = dataController2.items() || [];
    var resultAmount = resultItems.length;
    var isMinSearchLengthExceeded = this._needPassDataSourceToList();
    return !!(isMinSearchLengthExceeded && resultAmount);
  },
  _clearSearchTimer: function() {
    clearTimeout(this._searchTimer);
    delete this._searchTimer;
  },
  _popupShowingHandler: function() {
    this._updatePopupWidth();
    this._updateListDimensions();
  },
  _dimensionChanged: function() {
    this.callBase();
    this._updateListDimensions();
  },
  _needPopupRepaint: function() {
    var dataController2 = this._dataController;
    var currentPageIndex = dataController2.pageIndex();
    var needRepaint = isDefined(this._pageIndex) && currentPageIndex <= this._pageIndex || dataController2.isLastPage() && !this._list._scrollViewIsFull();
    this._pageIndex = currentPageIndex;
    return needRepaint;
  },
  _updateListDimensions: function() {
    if (!this._popup) {
      return;
    }
    if (this._needPopupRepaint()) {
      this._popup.repaint();
    }
    this._list && this._list.updateDimensions();
  },
  _getMaxHeight: function() {
    var $element = this.$element();
    var $customBoundaryContainer = this._$customBoundaryContainer;
    var offsetTop = $element.offset().top - ($customBoundaryContainer ? $customBoundaryContainer.offset().top : 0);
    var windowHeight = getOuterHeight(window21);
    var containerHeight = $customBoundaryContainer ? Math.min(getOuterHeight($customBoundaryContainer), windowHeight) : windowHeight;
    var maxHeight = Math.max(offsetTop, containerHeight - offsetTop - getOuterHeight($element));
    return Math.min(0.5 * containerHeight, maxHeight);
  },
  _clean: function() {
    if (this._list) {
      delete this._list;
    }
    delete this._isLastMinSearchLengthExceeded;
    this.callBase();
  },
  _dispose: function() {
    this._clearSearchTimer();
    this.callBase();
  },
  _setCollectionWidgetOption: function() {
    this._setListOption.apply(this, arguments);
  },
  _setSubmitValue: function() {
    var value2 = this.option("value");
    var submitValue = this._shouldUseDisplayValue(value2) ? this._displayGetter(value2) : value2;
    this._getSubmitElement().val(submitValue);
  },
  _shouldUseDisplayValue: function(value2) {
    return "this" === this.option("valueExpr") && isObject(value2);
  },
  _optionChanged: function(args) {
    this._dataExpressionOptionChanged(args);
    switch (args.name) {
      case "hoverStateEnabled":
      case "focusStateEnabled":
        this._isDesktopDevice() && this._setListOption(args.name, args.value);
        this.callBase(args);
        break;
      case "items":
        if (!this.option("dataSource")) {
          this._processDataSourceChanging();
        }
        break;
      case "dataSource":
        this._processDataSourceChanging();
        break;
      case "valueExpr":
        this._renderValue();
        this._setListOption("keyExpr", this._getCollectionKeyExpr());
        break;
      case "displayExpr":
        this._renderValue();
        this._setListOption("displayExpr", this._displayGetterExpr());
        break;
      case "searchMode":
        this._validateSearchMode();
        break;
      case "minSearchLength":
        this._refreshList();
        break;
      case "searchEnabled":
      case "showDataBeforeSearch":
      case "searchExpr":
        this._invalidate();
        break;
      case "onContentReady":
        this._initContentReadyAction();
        break;
      case "onSelectionChanged":
        this._initSelectionChangedAction();
        break;
      case "onItemClick":
        this._initItemClickAction();
        break;
      case "grouped":
      case "groupTemplate":
      case "wrapItemText":
      case "noDataText":
      case "encodeNoDataText":
      case "useItemTextAsTitle":
        this._setListOption(args.name);
        break;
      case "displayValue":
        this.option("text", args.value);
        break;
      case "itemTemplate":
      case "searchTimeout":
        break;
      case "selectedItem":
        if (args.previousValue !== args.value) {
          this._selectionChangedAction({
            selectedItem: args.value
          });
        }
        break;
      default:
        this.callBase(args);
    }
  }
}).include(ui_data_expression_default, grouped_data_converter_mixin_default);
component_registrator_default("dxDropDownList", DropDownList);
var ui_drop_down_list_default = DropDownList;

// node_modules/devextreme/esm/ui/radio_group/radio_button.js
var RADIO_BUTTON_CLASS = "dx-radiobutton";
var RADIO_BUTTON_ICON_CLASS = "dx-radiobutton-icon";
var RADIO_BUTTON_ICON_DOT_CLASS = "dx-radiobutton-icon-dot";
var RADIO_BUTTON_CHECKED_CLASS = "dx-radiobutton-checked";
var RADIO_BUTTON_ICON_CHECKED_CLASS = "dx-radiobutton-icon-checked";
var RadioButton = editor_default.inherit({
  _supportedKeys: function() {
    return extend(this.callBase(), {
      space: function(e) {
        e.preventDefault();
        this._clickAction({
          event: e
        });
      }
    });
  },
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      hoverStateEnabled: true,
      activeStateEnabled: true,
      value: false
    });
  },
  _canValueBeChangedByClick: function() {
    return true;
  },
  _defaultOptionsRules: function() {
    return this.callBase().concat([{
      device: function() {
        return "desktop" === devices_default.real().deviceType && !devices_default.isSimulator();
      },
      options: {
        focusStateEnabled: true
      }
    }]);
  },
  _init: function() {
    this.callBase();
    this.$element().addClass(RADIO_BUTTON_CLASS);
  },
  _initMarkup: function() {
    this.callBase();
    this._renderIcon();
    this._renderCheckedState(this.option("value"));
    this._renderClick();
    this.setAria("role", "radio");
  },
  _renderIcon: function() {
    this._$icon = renderer_default("<div>").addClass(RADIO_BUTTON_ICON_CLASS);
    renderer_default("<div>").addClass(RADIO_BUTTON_ICON_DOT_CLASS).appendTo(this._$icon);
    this.$element().append(this._$icon);
  },
  _renderCheckedState: function(checked) {
    this.$element().toggleClass(RADIO_BUTTON_CHECKED_CLASS, checked).find("." + RADIO_BUTTON_ICON_CLASS).toggleClass(RADIO_BUTTON_ICON_CHECKED_CLASS, checked);
    this.setAria("checked", checked);
  },
  _renderClick: function() {
    var eventName = addNamespace2(CLICK_EVENT_NAME, this.NAME);
    this._clickAction = this._createAction((function(args) {
      this._clickHandler(args.event);
    }).bind(this));
    events_engine_default.off(this.$element(), eventName);
    events_engine_default.on(this.$element(), eventName, (function(e) {
      this._clickAction({
        event: e
      });
    }).bind(this));
  },
  _clickHandler: function(e) {
    this._saveValueChangeEvent(e);
    this.option("value", true);
  },
  _optionChanged: function(args) {
    switch (args.name) {
      case "value":
        this._renderCheckedState(args.value);
        this.callBase(args);
        break;
      default:
        this.callBase(args);
    }
  }
});
component_registrator_default("dxRadioButton", RadioButton);
var radio_button_default = RadioButton;

// node_modules/devextreme/esm/ui/list/ui.list.edit.decorator.js
var LIST_EDIT_DECORATOR = "dxListEditDecorator";
var SWIPE_START_EVENT_NAME = addNamespace2(SWIPE_START_EVENT, LIST_EDIT_DECORATOR);
var SWIPE_UPDATE_EVENT_NAME = addNamespace2(SWIPE_EVENT, LIST_EDIT_DECORATOR);
var SWIPE_END_EVENT_NAME = addNamespace2(SWIPE_END_EVENT, LIST_EDIT_DECORATOR);
var EditDecorator = class_default.inherit({
  ctor: function(list) {
    this._list = list;
    this._init();
  },
  _init: noop2,
  _shouldHandleSwipe: false,
  _attachSwipeEvent: function(config3) {
    var swipeConfig = {
      itemSizeFunc: (function() {
        if (this._clearSwipeCache) {
          this._itemWidthCache = getWidth(this._list.$element());
          this._clearSwipeCache = false;
        }
        return this._itemWidthCache;
      }).bind(this)
    };
    events_engine_default.on(config3.$itemElement, SWIPE_START_EVENT_NAME, swipeConfig, this._itemSwipeStartHandler.bind(this));
    events_engine_default.on(config3.$itemElement, SWIPE_UPDATE_EVENT_NAME, this._itemSwipeUpdateHandler.bind(this));
    events_engine_default.on(config3.$itemElement, SWIPE_END_EVENT_NAME, this._itemSwipeEndHandler.bind(this));
  },
  _itemSwipeStartHandler: function(e) {
    var $itemElement = renderer_default(e.currentTarget);
    if ($itemElement.is(".dx-state-disabled, .dx-state-disabled *")) {
      e.cancel = true;
      return;
    }
    clearTimeout(this._list._inkRippleTimer);
    this._swipeStartHandler($itemElement, e);
  },
  _itemSwipeUpdateHandler: function(e) {
    var $itemElement = renderer_default(e.currentTarget);
    this._swipeUpdateHandler($itemElement, e);
  },
  _itemSwipeEndHandler: function(e) {
    var $itemElement = renderer_default(e.currentTarget);
    this._swipeEndHandler($itemElement, e);
    this._clearSwipeCache = true;
  },
  beforeBag: noop2,
  afterBag: noop2,
  _commonOptions: function() {
    return {
      activeStateEnabled: this._list.option("activeStateEnabled"),
      hoverStateEnabled: this._list.option("hoverStateEnabled"),
      focusStateEnabled: this._list.option("focusStateEnabled")
    };
  },
  modifyElement: function(config3) {
    if (this._shouldHandleSwipe) {
      this._attachSwipeEvent(config3);
      this._clearSwipeCache = true;
    }
  },
  afterRender: noop2,
  handleClick: noop2,
  handleKeyboardEvents: noop2,
  handleEnterPressing: noop2,
  handleContextMenu: noop2,
  _swipeStartHandler: noop2,
  _swipeUpdateHandler: noop2,
  _swipeEndHandler: noop2,
  visibilityChange: noop2,
  getExcludedSelectors: noop2,
  dispose: noop2
});
var ui_list_edit_decorator_default = EditDecorator;

// node_modules/devextreme/esm/ui/list/ui.list.edit.decorator.selection.js
var SELECT_DECORATOR_ENABLED_CLASS = "dx-list-select-decorator-enabled";
var SELECT_DECORATOR_SELECT_ALL_CLASS = "dx-list-select-all";
var SELECT_DECORATOR_SELECT_ALL_CHECKBOX_CLASS = "dx-list-select-all-checkbox";
var SELECT_DECORATOR_SELECT_ALL_LABEL_CLASS = "dx-list-select-all-label";
var SELECT_CHECKBOX_CONTAINER_CLASS = "dx-list-select-checkbox-container";
var SELECT_CHECKBOX_CLASS2 = "dx-list-select-checkbox";
var SELECT_RADIO_BUTTON_CONTAINER_CLASS = "dx-list-select-radiobutton-container";
var SELECT_RADIO_BUTTON_CLASS = "dx-list-select-radiobutton";
var FOCUSED_STATE_CLASS = "dx-state-focused";
var CLICK_EVENT_NAME2 = addNamespace2(CLICK_EVENT_NAME, "dxListEditDecorator");
register("selection", "default", ui_list_edit_decorator_default.inherit({
  _init: function() {
    this.callBase.apply(this, arguments);
    var selectionMode = this._list.option("selectionMode");
    this._singleStrategy = "single" === selectionMode;
    this._containerClass = this._singleStrategy ? SELECT_RADIO_BUTTON_CONTAINER_CLASS : SELECT_CHECKBOX_CONTAINER_CLASS;
    this._controlClass = this._singleStrategy ? SELECT_RADIO_BUTTON_CLASS : SELECT_CHECKBOX_CLASS2;
    this._controlWidget = this._singleStrategy ? radio_button_default : check_box_default;
    this._list.$element().addClass(SELECT_DECORATOR_ENABLED_CLASS);
  },
  beforeBag: function(config3) {
    var $itemElement = config3.$itemElement;
    var $container = config3.$container.addClass(this._containerClass);
    var $control = renderer_default("<div>").addClass(this._controlClass).appendTo($container);
    new this._controlWidget($control, extend(this._commonOptions(), {
      value: this._isSelected($itemElement),
      elementAttr: {
        "aria-label": "Check State"
      },
      focusStateEnabled: false,
      hoverStateEnabled: false,
      onValueChanged: (function(e) {
        e.event && this._list._saveSelectionChangeEvent(e.event);
        this._processCheckedState($itemElement, e.value);
        e.event && e.event.stopPropagation();
      }).bind(this)
    }));
  },
  modifyElement: function(config3) {
    this.callBase.apply(this, arguments);
    var $itemElement = config3.$itemElement;
    var control = this._controlWidget.getInstance($itemElement.find("." + this._controlClass));
    events_engine_default.on($itemElement, "stateChanged", (function(e, state) {
      control.option("value", state);
    }).bind(this));
  },
  _updateSelectAllState: function() {
    if (!this._$selectAll) {
      return;
    }
    this._selectAllCheckBox.option("value", this._list.isSelectAll());
  },
  afterRender: function() {
    if ("all" !== this._list.option("selectionMode")) {
      return;
    }
    if (!this._$selectAll) {
      this._renderSelectAll();
    } else {
      this._updateSelectAllState();
    }
  },
  handleKeyboardEvents: function(currentFocusedIndex, moveFocusUp) {
    var moveFocusDown = !moveFocusUp;
    var list = this._list;
    var $selectAll = this._$selectAll;
    var lastItemIndex = list._getLastItemIndex();
    var isFocusOutOfList = moveFocusUp && 0 === currentFocusedIndex || moveFocusDown && currentFocusedIndex === lastItemIndex;
    var hasSelectAllItem = !!$selectAll;
    if (hasSelectAllItem && isFocusOutOfList) {
      list.option("focusedElement", $selectAll);
      list.scrollToItem(list.option("focusedElement"));
      return true;
    }
    return false;
  },
  handleEnterPressing: function(e) {
    if (this._$selectAll && this._$selectAll.hasClass(FOCUSED_STATE_CLASS)) {
      e.target = this._$selectAll.get(0);
      this._list._saveSelectionChangeEvent(e);
      this._selectAllCheckBox.option("value", !this._selectAllCheckBox.option("value"));
      return true;
    }
  },
  _renderSelectAll: function() {
    var $selectAll = this._$selectAll = renderer_default("<div>").addClass(SELECT_DECORATOR_SELECT_ALL_CLASS);
    var list = this._list;
    var downArrowHandler = list._supportedKeys().downArrow.bind(list);
    this._selectAllCheckBox = list._createComponent(renderer_default("<div>").addClass(SELECT_DECORATOR_SELECT_ALL_CHECKBOX_CLASS).appendTo($selectAll), check_box_default, {
      elementAttr: {
        "aria-label": "Select All"
      },
      focusStateEnabled: false,
      hoverStateEnabled: false
    });
    this._selectAllCheckBox.registerKeyHandler("downArrow", downArrowHandler);
    renderer_default("<div>").addClass(SELECT_DECORATOR_SELECT_ALL_LABEL_CLASS).text(this._list.option("selectAllText")).appendTo($selectAll);
    this._list.itemsContainer().prepend($selectAll);
    this._updateSelectAllState();
    this._attachSelectAllHandler();
  },
  _attachSelectAllHandler: function() {
    this._selectAllCheckBox.option("onValueChanged", this._selectAllHandler.bind(this));
    events_engine_default.off(this._$selectAll, CLICK_EVENT_NAME2);
    events_engine_default.on(this._$selectAll, CLICK_EVENT_NAME2, this._selectAllClickHandler.bind(this));
  },
  _selectAllHandler: function(e) {
    e.event && e.event.stopPropagation();
    var isSelectedAll = this._selectAllCheckBox.option("value");
    e.event && this._list._saveSelectionChangeEvent(e.event);
    if (true === isSelectedAll) {
      this._selectAllItems();
    } else if (false === isSelectedAll) {
      this._unselectAllItems();
    }
    this._list._createActionByOption("onSelectAllValueChanged")({
      value: isSelectedAll
    });
  },
  _checkSelectAllCapability: function() {
    var list = this._list;
    var dataController2 = list._dataController;
    if ("allPages" === list.option("selectAllMode") && list.option("grouped") && !dataController2.group()) {
      ui_errors_default.log("W1010");
      return false;
    }
    return true;
  },
  _selectAllItems: function() {
    if (!this._checkSelectAllCapability()) {
      return;
    }
    this._list._selection.selectAll("page" === this._list.option("selectAllMode"));
  },
  _unselectAllItems: function() {
    if (!this._checkSelectAllCapability()) {
      return;
    }
    this._list._selection.deselectAll("page" === this._list.option("selectAllMode"));
  },
  _selectAllClickHandler: function(e) {
    this._list._saveSelectionChangeEvent(e);
    this._selectAllCheckBox.option("value", !this._selectAllCheckBox.option("value"));
  },
  _isSelected: function($itemElement) {
    return this._list.isItemSelected($itemElement);
  },
  _processCheckedState: function($itemElement, checked) {
    if (checked) {
      this._list.selectItem($itemElement);
    } else {
      this._list.unselectItem($itemElement);
    }
  },
  dispose: function() {
    this._disposeSelectAll();
    this._list.$element().removeClass(SELECT_DECORATOR_ENABLED_CLASS);
    this.callBase.apply(this, arguments);
  },
  _disposeSelectAll: function() {
    if (this._$selectAll) {
      this._$selectAll.remove();
      this._$selectAll = null;
    }
  }
}));

// node_modules/devextreme/esm/ui/select_box.js
var DISABLED_STATE_SELECTOR = ".dx-state-disabled";
var SELECTBOX_CLASS = "dx-selectbox";
var SELECTBOX_POPUP_CLASS = "dx-selectbox-popup";
var SELECTBOX_CONTAINER_CLASS = "dx-selectbox-container";
var SELECTBOX_POPUP_WRAPPER_CLASS = "dx-selectbox-popup-wrapper";
var SelectBox = ui_drop_down_list_default.inherit({
  _supportedKeys: function() {
    var that = this;
    var parent = this.callBase();
    var clearSelectBox = function(e) {
      var isEditable2 = this._isEditable();
      if (!isEditable2) {
        if (this.option("showClearButton")) {
          e.preventDefault();
          this.clear();
        }
      } else if (this._valueSubstituted()) {
        this._preventFiltering = true;
      }
      this._savedTextRemoveEvent = e;
      this._preventSubstitution = true;
    };
    var searchIfNeeded = function() {
      if (that.option("searchEnabled") && that._valueSubstituted()) {
        that._searchHandler();
      }
    };
    return extend({}, parent, {
      tab: function() {
        if (this.option("opened") && !this._popup.getFocusableElements().length) {
          this._resetCaretPosition(true);
        }
        parent.tab && parent.tab.apply(this, arguments);
        this._cancelSearchIfNeed();
      },
      upArrow: function(e) {
        if (parent.upArrow.apply(this, arguments)) {
          if (!this.option("opened")) {
            this._setNextValue(e);
          }
          return true;
        }
      },
      downArrow: function(e) {
        if (parent.downArrow.apply(this, arguments)) {
          if (!this.option("opened")) {
            this._setNextValue(e);
          }
          return true;
        }
      },
      leftArrow: function() {
        searchIfNeeded();
        parent.leftArrow && parent.leftArrow.apply(this, arguments);
      },
      rightArrow: function() {
        searchIfNeeded();
        parent.rightArrow && parent.rightArrow.apply(this, arguments);
      },
      home: function() {
        searchIfNeeded();
        parent.home && parent.home.apply(this, arguments);
      },
      end: function() {
        searchIfNeeded();
        parent.end && parent.end.apply(this, arguments);
      },
      escape: function() {
        var result2 = parent.escape && parent.escape.apply(this, arguments);
        this._cancelEditing();
        return null !== result2 && void 0 !== result2 ? result2 : true;
      },
      enter: function(e) {
        var isOpened = this.option("opened");
        var inputText = this._input().val().trim();
        var isCustomText = inputText && this._list && !this._list.option("focusedElement");
        if (!inputText && isDefined(this.option("value")) && this.option("allowClearing")) {
          this._saveValueChangeEvent(e);
          this.option({
            selectedItem: null,
            value: null
          });
          this.close();
        } else {
          if (this.option("acceptCustomValue")) {
            e.preventDefault();
            if (isCustomText) {
              if (isOpened) {
                this._toggleOpenState();
              }
              this._valueChangeEventHandler(e);
            }
            return isOpened;
          }
          if (parent.enter && parent.enter.apply(this, arguments)) {
            return isOpened;
          }
        }
      },
      space: function(e) {
        var isOpened = this.option("opened");
        var isSearchEnabled = this.option("searchEnabled");
        var acceptCustomValue = this.option("acceptCustomValue");
        if (!isOpened || isSearchEnabled || acceptCustomValue) {
          return;
        }
        e.preventDefault();
        this._valueChangeEventHandler(e);
        return true;
      },
      backspace: clearSelectBox,
      del: clearSelectBox
    });
  },
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      placeholder: message_default.format("Select"),
      fieldTemplate: null,
      customItemCreateEvent: "change",
      valueChangeEvent: "change",
      acceptCustomValue: false,
      onCustomItemCreating: function(e) {
        if (!isDefined(e.customItem)) {
          e.customItem = e.text;
        }
      },
      showSelectionControls: false,
      allowClearing: true,
      tooltipEnabled: false,
      openOnFieldClick: true,
      showDropDownButton: true,
      displayCustomValue: false,
      useHiddenSubmitElement: true
    });
  },
  _init: function() {
    this.callBase();
    this._initCustomItemCreatingAction();
  },
  _initMarkup: function() {
    this.$element().addClass(SELECTBOX_CLASS);
    this._renderTooltip();
    this.callBase();
    this._$container.addClass(SELECTBOX_CONTAINER_CLASS);
  },
  _createPopup: function() {
    this.callBase();
    this._popup.$element().addClass(SELECTBOX_POPUP_CLASS);
    this._popup.$overlayContent().attr("tabindex", -1);
  },
  _popupWrapperClass: function() {
    return this.callBase() + " " + SELECTBOX_POPUP_WRAPPER_CLASS;
  },
  _setDeprecatedOptions() {
    this.callBase();
    extend(this._deprecatedOptions, {
      valueChangeEvent: {
        since: "22.2",
        alias: "customItemCreateEvent"
      }
    });
  },
  _cancelEditing: function() {
    if (!this.option("searchEnabled") && this._list) {
      this._focusListElement(null);
      this._updateField(this.option("selectedItem"));
    }
  },
  _renderOpenedState: function() {
    this.callBase();
    if (this.option("opened")) {
      this._scrollToSelectedItem();
      this._focusSelectedElement();
    }
  },
  _focusSelectedElement: function() {
    var _items$indexOf;
    var searchValue = this._searchValue();
    if (!searchValue) {
      this._focusListElement(null);
      return;
    }
    var {
      items,
      selectedItem
    } = this.option();
    var $listItems = this._list._itemElements();
    var index2 = null !== (_items$indexOf = null === items || void 0 === items ? void 0 : items.indexOf(selectedItem)) && void 0 !== _items$indexOf ? _items$indexOf : -1;
    var focusedElement = -1 !== index2 && !this._isCustomItemSelected() ? $listItems.eq(index2) : null;
    this._focusListElement(focusedElement);
  },
  _renderFocusedElement: function() {
    if (!this._list) {
      return;
    }
    var searchValue = this._searchValue();
    if (!searchValue || this.option("acceptCustomValue")) {
      this._focusListElement(null);
      return;
    }
    var $listItems = this._list._itemElements();
    var focusedElement = $listItems.not(DISABLED_STATE_SELECTOR).eq(0);
    this._focusListElement(focusedElement);
  },
  _focusListElement: function(element) {
    this._preventInputValueRender = true;
    this._list.option("focusedElement", getPublicElement(element));
    delete this._preventInputValueRender;
  },
  _scrollToSelectedItem: function() {
    this._list && this._list.scrollToItem(this._list.option("selectedItem"));
  },
  _listContentReadyHandler: function() {
    this.callBase();
    var isPaginate = this._dataController.paginate();
    if (isPaginate && this._needPopupRepaint()) {
      return;
    }
    this._scrollToSelectedItem();
  },
  _renderValue: function() {
    this._renderInputValue();
    this._setSubmitValue();
    return new Deferred().resolve();
  },
  _renderInputValue: function() {
    return this.callBase().always((function() {
      this._renderInputValueAsync();
    }).bind(this));
  },
  _renderInputValueAsync: function() {
    this._renderTooltip();
    this._renderInputValueImpl().always((function() {
      this._refreshSelected();
    }).bind(this));
  },
  _renderInputValueImpl: function() {
    this._renderField();
    return new Deferred().resolve();
  },
  _setNextItem: function(step) {
    var item = this._calcNextItem(step);
    var value2 = this._valueGetter(item);
    this._setValue(value2);
  },
  _setNextValue: function(e) {
    var dataSourceIsLoaded = this._dataController.isLoaded() ? new Deferred().resolve() : this._dataController.load();
    dataSourceIsLoaded.done((function() {
      var selectedIndex = this._getSelectedIndex();
      var hasPages = this._dataController.pageSize();
      var isLastPage = this._dataController.isLastPage();
      var isLastItem = selectedIndex === this._items().length - 1;
      this._saveValueChangeEvent(e);
      var step = "downArrow" === normalizeKeyName(e) ? 1 : -1;
      if (hasPages && !isLastPage && isLastItem && step > 0) {
        if (!this._popup) {
          this._createPopup();
        }
        if (!this._dataController.isLoading()) {
          this._list._loadNextPage().done(this._setNextItem.bind(this, step));
        }
      } else {
        this._setNextItem(step);
      }
    }).bind(this));
  },
  _setSelectedItem: function(item) {
    var isUnknownItem = !this._isCustomValueAllowed() && void 0 === item;
    this.callBase(isUnknownItem ? null : item);
    if (!isUnknownItem && (!this._isEditable() || this._isCustomItemSelected())) {
      this._setListOption("selectedItem", this.option("selectedItem"));
    }
  },
  _isCustomValueAllowed: function() {
    return this.option("acceptCustomValue") || this.callBase();
  },
  _displayValue: function(item) {
    item = !isDefined(item) && this._isCustomValueAllowed() ? this.option("value") : item;
    return this.callBase(item);
  },
  _listConfig: function() {
    var result2 = extend(this.callBase(), {
      pageLoadMode: "scrollBottom",
      onSelectionChanged: this._getSelectionChangeHandler(),
      selectedItem: this.option("selectedItem"),
      onFocusedItemChanged: this._listFocusedItemChangeHandler.bind(this)
    });
    if (this.option("showSelectionControls")) {
      extend(result2, {
        showSelectionControls: true,
        selectByClick: true
      });
    }
    return result2;
  },
  _listFocusedItemChangeHandler: function(e) {
    if (this._preventInputValueRender) {
      return;
    }
    var list = e.component;
    var focusedElement = renderer_default(list.option("focusedElement"));
    var focusedItem = list._getItemData(focusedElement);
    this._updateField(focusedItem);
  },
  _updateField: function(item) {
    var fieldTemplate = this._getTemplateByOption("fieldTemplate");
    if (!(fieldTemplate && this.option("fieldTemplate"))) {
      var text = this._displayGetter(item);
      this.option("text", text);
      this._renderDisplayText(text);
      return;
    }
    this._renderField();
  },
  _getSelectionChangeHandler: function() {
    return this.option("showSelectionControls") ? this._selectionChangeHandler.bind(this) : noop2;
  },
  _selectionChangeHandler: function(e) {
    each(e.addedItems || [], (function(_, addedItem) {
      this._setValue(this._valueGetter(addedItem));
    }).bind(this));
  },
  _getActualSearchValue: function() {
    return this._dataController.searchValue();
  },
  _toggleOpenState: function(isVisible2) {
    if (this.option("disabled")) {
      return;
    }
    isVisible2 = arguments.length ? isVisible2 : !this.option("opened");
    if (!isVisible2 && !this._shouldClearFilter()) {
      this._restoreInputText(true);
    }
    if (this._wasSearch() && isVisible2) {
      this._wasSearch(false);
      var showDataImmediately = this.option("showDataBeforeSearch") || this._isMinSearchLengthExceeded();
      if (showDataImmediately && this._dataController.getDataSource()) {
        if (this._searchTimer) {
          return;
        }
        var searchValue = this._getActualSearchValue();
        searchValue && this._wasSearch(true);
        this._filterDataSource(searchValue || null);
      } else {
        this._setListOption("items", []);
      }
    }
    if (isVisible2) {
      this._scrollToSelectedItem();
    }
    this.callBase(isVisible2);
  },
  _renderTooltip: function() {
    if (this.option("tooltipEnabled")) {
      this.$element().attr("title", this.option("displayValue"));
    }
  },
  _renderDimensions: function() {
    this.callBase();
    this._updatePopupWidth();
    this._updateListDimensions();
  },
  _isValueEqualInputText: function() {
    var initialSelectedItem = this.option("selectedItem");
    if (null === initialSelectedItem) {
      return false;
    }
    var value2 = this._displayGetter(initialSelectedItem);
    var displayValue = value2 ? String(value2) : "";
    var inputText = this._searchValue();
    return displayValue === inputText;
  },
  _popupHidingHandler: function() {
    if (this._isValueEqualInputText()) {
      this._cancelEditing();
    }
    this.callBase();
  },
  _popupHiddenHandler: function() {
    this.callBase();
    if (this._shouldCancelSearch()) {
      this._wasSearch(false);
      this._searchCanceled();
      this._shouldCancelSearch(false);
    }
  },
  _restoreInputText: function(saveEditingValue) {
    if (this.option("readOnly")) {
      return;
    }
    this._loadItemDeferred && this._loadItemDeferred.always((function() {
      var {
        acceptCustomValue,
        text,
        selectedItem: initialSelectedItem
      } = this.option();
      if (acceptCustomValue) {
        if (!saveEditingValue && !this._isValueChanging) {
          this._updateField(null !== initialSelectedItem && void 0 !== initialSelectedItem ? initialSelectedItem : this._createCustomItem(text));
          this._clearFilter();
        }
        return;
      }
      if (this.option("searchEnabled")) {
        if (!this._searchValue() && this.option("allowClearing")) {
          this._clearTextValue();
          return;
        }
      }
      if (this._isValueEqualInputText()) {
        return;
      }
      this._renderInputValue().always((function(selectedItem) {
        var newSelectedItem = ensureDefined(selectedItem, initialSelectedItem);
        this._setSelectedItem(newSelectedItem);
        this._updateField(newSelectedItem);
        this._clearFilter();
      }).bind(this));
    }).bind(this));
  },
  _valueChangeEventIncludesBlur: function() {
    var valueChangeEvent = this.option(this._getValueChangeEventOptionName());
    return valueChangeEvent.includes("blur");
  },
  _isPreventedFocusOutEvent: function(e) {
    return this._preventNestedFocusEvent(e) || this._valueChangeEventIncludesBlur();
  },
  _focusOutHandler: function(e) {
    if (!this._isPreventedFocusOutEvent(e)) {
      var isOverlayTarget = this._isOverlayNestedTarget(e.relatedTarget);
      if (!isOverlayTarget) {
        this._restoreInputText();
        this._clearSearchTimer();
      }
      this._cancelSearchIfNeed(e);
    }
    e.target = this._input().get(0);
    this.callBase(e);
  },
  _cancelSearchIfNeed: function(e) {
    var {
      searchEnabled
    } = this.option();
    var isOverlayTarget = this._isOverlayNestedTarget(null === e || void 0 === e ? void 0 : e.relatedTarget);
    var shouldCancelSearch = this._wasSearch() && searchEnabled && !isOverlayTarget;
    if (shouldCancelSearch) {
      var _this$_popup;
      var isPopupVisible = null === (_this$_popup = this._popup) || void 0 === _this$_popup ? void 0 : _this$_popup._hideAnimationProcessing;
      this._clearSearchTimer();
      if (isPopupVisible) {
        this._shouldCancelSearch(true);
      } else {
        this._wasSearch(false);
        this._searchCanceled();
      }
    }
  },
  _shouldCancelSearch: function(value2) {
    if (!arguments.length) {
      return this._shouldCancelSearchValue;
    }
    this._shouldCancelSearchValue = value2;
  },
  _isOverlayNestedTarget: function(target) {
    return !!renderer_default(target).closest(".".concat(SELECTBOX_POPUP_WRAPPER_CLASS)).length;
  },
  _clearTextValue: function() {
    var selectedItem = this.option("selectedItem");
    var selectedItemText = this._displayGetter(selectedItem);
    var shouldRestoreValue = selectedItem && "" !== selectedItemText;
    if (shouldRestoreValue) {
      if (this._savedTextRemoveEvent) {
        this._saveValueChangeEvent(this._savedTextRemoveEvent);
      }
      this.option("value", null);
    }
    delete this._savedTextRemoveEvent;
  },
  _shouldOpenPopup: function() {
    return this._needPassDataSourceToList() && this._wasSearch();
  },
  _isFocused: function() {
    var activeElement = dom_adapter_default.getActiveElement(this.element());
    return this.callBase() && renderer_default(activeElement).closest(this._input()).length > 0;
  },
  _getValueChangeEventOptionName: function() {
    return "customItemCreateEvent";
  },
  _renderValueChangeEvent: function() {
    if (this._isEditable()) {
      this.callBase();
    }
  },
  _fieldRenderData: function() {
    var $listFocused = this._list && this.option("opened") && renderer_default(this._list.option("focusedElement"));
    if ($listFocused && $listFocused.length) {
      return this._list._getItemData($listFocused);
    }
    return this.option("selectedItem");
  },
  _isSelectedValue: function(value2) {
    return this._isValueEquals(value2, this.option("value"));
  },
  _shouldCloseOnItemClick: function() {
    return !(this.option("showSelectionControls") && "single" !== this.option("selectionMode"));
  },
  _listItemClickHandler: function(e) {
    var previousValue = this._getCurrentValue();
    this._focusListElement(renderer_default(e.itemElement));
    this._saveValueChangeEvent(e.event);
    this._completeSelection(this._valueGetter(e.itemData));
    if (this._shouldCloseOnItemClick()) {
      this.option("opened", false);
    }
    if (this.option("searchEnabled") && previousValue === this._valueGetter(e.itemData)) {
      this._updateField(e.itemData);
    }
    if (this._shouldClearFilter()) {
      this._cancelSearchIfNeed();
    }
  },
  _shouldClearFilter: function() {
    return this._wasSearch();
  },
  _completeSelection: function(value2) {
    this._setValue(value2);
  },
  _loadItem: function(value2, cache) {
    var that = this;
    var deferred = new Deferred();
    this.callBase(value2, cache).done((function(item) {
      deferred.resolve(item);
    }).bind(this)).fail((function(args) {
      if (null !== args && void 0 !== args && args.shouldSkipCallback) {
        return;
      }
      var selectedItem = that.option("selectedItem");
      if (that.option("acceptCustomValue") && value2 === that._valueGetter(selectedItem)) {
        deferred.resolve(selectedItem);
      } else {
        deferred.reject();
      }
    }).bind(this));
    return deferred.promise();
  },
  _loadInputValue: function(value2, callback) {
    this._loadItemDeferred = this._loadItem(value2).always(callback);
    return this._loadItemDeferred;
  },
  _isCustomItemSelected: function() {
    var selectedItem = this.option("selectedItem");
    var searchValue = this._searchValue();
    var selectedItemText = this._displayGetter(selectedItem);
    return !selectedItemText || searchValue !== selectedItemText.toString();
  },
  _valueChangeEventHandler: function(e) {
    if (this.option("acceptCustomValue") && this._isCustomItemSelected() && !this._isValueChanging) {
      this._isValueChanging = true;
      this._customItemAddedHandler(e);
    }
  },
  _initCustomItemCreatingAction: function() {
    this._customItemCreatingAction = this._createActionByOption("onCustomItemCreating");
  },
  _createCustomItem: function(text) {
    var params = {
      text
    };
    var actionResult = this._customItemCreatingAction(params);
    var item = ensureDefined(actionResult, params.customItem);
    if (isDefined(actionResult)) {
      errors_default.log("W0015", "onCustomItemCreating", "customItem");
    }
    return item;
  },
  _customItemAddedHandler: function(e) {
    var searchValue = this._searchValue();
    var item = this._createCustomItem(searchValue);
    this._saveValueChangeEvent(e);
    if (void 0 === item) {
      this._renderValue();
      throw errors_default.Error("E0121");
    }
    if (isPromise(item)) {
      fromPromise(item).done(this._setCustomItem.bind(this)).fail(this._setCustomItem.bind(this, null));
    } else {
      this._setCustomItem(item);
    }
  },
  _setCustomItem: function(item) {
    if (this._disposed) {
      return;
    }
    item = item || null;
    this.option("selectedItem", item);
    this._cancelSearchIfNeed();
    this._setValue(this._valueGetter(item));
    this._renderDisplayText(this._displayGetter(item));
    this._isValueChanging = false;
  },
  _clearValueHandler: function(e) {
    this._preventFiltering = true;
    this.callBase(e);
    this._searchCanceled();
    return false;
  },
  _wasSearch: function(value2) {
    if (!arguments.length) {
      return !!this._wasSearchValue;
    }
    this._wasSearchValue = value2;
  },
  _searchHandler: function() {
    if (this._preventFiltering) {
      delete this._preventFiltering;
      return;
    }
    if (this._needPassDataSourceToList()) {
      this._wasSearch(true);
    }
    this.callBase(arguments);
  },
  _dataSourceFiltered: function(searchValue) {
    this.callBase();
    if (null !== searchValue) {
      this._renderInputSubstitution();
      this._renderFocusedElement();
    }
  },
  _valueSubstituted: function() {
    var input = this._input().get(0);
    var currentSearchLength = this._searchValue().length;
    var isAllSelected = 0 === input.selectionStart && input.selectionEnd === currentSearchLength;
    var inputHasSelection = input.selectionStart !== input.selectionEnd;
    var isLastSymbolSelected = currentSearchLength === input.selectionEnd;
    return this._wasSearch() && inputHasSelection && !isAllSelected && isLastSymbolSelected && this._shouldSubstitutionBeRendered();
  },
  _shouldSubstitutionBeRendered: function() {
    return !this._preventSubstitution && this.option("searchEnabled") && !this.option("acceptCustomValue") && "startswith" === this.option("searchMode");
  },
  _renderInputSubstitution: function() {
    if (!this._shouldSubstitutionBeRendered()) {
      delete this._preventSubstitution;
      return;
    }
    var item = this._list && this._getPlainItems(this._list.option("items"))[0];
    if (!item) {
      return;
    }
    var $input = this._input();
    var valueLength = $input.val().length;
    if (0 === valueLength) {
      return;
    }
    var inputElement = $input.get(0);
    var displayValue = this._displayGetter(item).toString();
    inputElement.value = displayValue;
    this._caret({
      start: valueLength,
      end: displayValue.length
    });
  },
  _dispose: function() {
    this._renderInputValueAsync = noop2;
    delete this._loadItemDeferred;
    this.callBase();
  },
  _optionChanged: function(args) {
    switch (args.name) {
      case "customItemCreateEvent":
        this._refreshValueChangeEvent();
        this._refreshFocusEvent();
        this._refreshEvents();
        break;
      case "onCustomItemCreating":
        this._initCustomItemCreatingAction();
        break;
      case "tooltipEnabled":
        this._renderTooltip();
        break;
      case "displayCustomValue":
      case "acceptCustomValue":
      case "showSelectionControls":
        this._invalidate();
        break;
      case "allowClearing":
        break;
      default:
        this.callBase(args);
    }
  }
});
component_registrator_default("dxSelectBox", SelectBox);
var select_box_default = SelectBox;

// node_modules/devextreme/esm/ui/date_box/ui.date_box.mask.parts.js
var monthGetter = (date) => date.getMonth() + 1;
var monthSetter = (date, value2) => {
  var day = date.getDate();
  var monthLimits = getLimits("M", date);
  var newValue = fitIntoRange(parseInt(value2), monthLimits.min, monthLimits.max);
  date.setMonth(newValue - 1, 1);
  var {
    min,
    max
  } = getLimits("dM", date);
  var newDay = fitIntoRange(day, min, max);
  date.setDate(newDay);
};
var PATTERN_GETTERS = {
  a: (date) => date.getHours() < 12 ? 0 : 1,
  E: "getDay",
  y: "getFullYear",
  M: monthGetter,
  L: monthGetter,
  d: "getDate",
  H: "getHours",
  h: "getHours",
  m: "getMinutes",
  s: "getSeconds",
  S: "getMilliseconds"
};
var PATTERN_SETTERS2 = extend({}, getPatternSetters(), {
  a: (date, value2) => {
    var hours = date.getHours();
    var current2 = hours >= 12;
    if (current2 === !!parseInt(value2)) {
      return;
    }
    date.setHours((hours + 12) % 24);
  },
  d: (date, value2) => {
    var lastDayInMonth = getLimits("dM", date).max;
    if (value2 > lastDayInMonth) {
      date.setMonth(date.getMonth() + 1);
    }
    date.setDate(value2);
  },
  h: (date, value2) => {
    var isPM = date.getHours() >= 12;
    date.setHours(+value2 % 12 + (isPM ? 12 : 0));
  },
  M: monthSetter,
  L: monthSetter,
  E: (date, value2) => {
    if (value2 < 0) {
      return;
    }
    date.setDate(date.getDate() - date.getDay() + parseInt(value2));
  },
  y: (date, value2) => {
    var currentYear = date.getFullYear();
    var valueLength = String(value2).length;
    var maxLimitLength = String(getLimits("y", date).max).length;
    var newValue = parseInt(String(currentYear).substr(0, maxLimitLength - valueLength) + value2);
    date.setFullYear(newValue);
  }
});
var getPatternGetter = (patternChar) => PATTERN_GETTERS[patternChar] || (() => patternChar);
var renderDateParts = (text, regExpInfo) => {
  var result2 = regExpInfo.regexp.exec(text);
  var start = 0;
  var end = 0;
  var sections = [];
  var _loop = function() {
    start = end;
    end = start + result2[i].length;
    var pattern = regExpInfo.patterns[i - 1].replace(/^'|'$/g, "");
    var getter = getPatternGetter(pattern[0]);
    sections.push({
      index: i - 1,
      isStub: pattern === result2[i],
      caret: {
        start,
        end
      },
      pattern,
      text: result2[i],
      limits: function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return getLimits(pattern[0], ...args);
      },
      setter: PATTERN_SETTERS2[pattern[0]] || noop2,
      getter
    });
  };
  for (var i = 1; i < result2.length; i++) {
    _loop();
  }
  return sections;
};
var getLimits = (pattern, date, forcedPattern) => {
  var limits = {
    y: {
      min: 0,
      max: 9999
    },
    M: {
      min: 1,
      max: 12
    },
    L: {
      min: 1,
      max: 12
    },
    d: {
      min: 1,
      max: 31
    },
    dM: {
      min: 1,
      max: new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate()
    },
    E: {
      min: 0,
      max: 6
    },
    H: {
      min: 0,
      max: 23
    },
    h: {
      min: 1,
      max: 12
    },
    m: {
      min: 0,
      max: 59
    },
    s: {
      min: 0,
      max: 59
    },
    S: {
      min: 0,
      max: 999
    },
    a: {
      min: 0,
      max: 1
    }
  };
  return limits[forcedPattern || pattern] || limits.getAmPm;
};
var getDatePartIndexByPosition = (dateParts, position3) => {
  for (var i = 0; i < dateParts.length; i++) {
    var caretInGroup = dateParts[i].caret.end >= position3;
    if (!dateParts[i].isStub && caretInGroup) {
      return i;
    }
  }
  return null;
};

// node_modules/devextreme/esm/ui/date_box/ui.date_utils.js
var DATE_COMPONENTS = ["year", "day", "month", "day"];
var TIME_COMPONENTS = ["hours", "minutes", "seconds", "milliseconds"];
var ONE_MINUTE = 6e4;
var ONE_DAY = 60 * ONE_MINUTE * 24;
var ONE_YEAR = 365 * ONE_DAY;
var getStringFormat = function(format2) {
  var formatType = typeof format2;
  if ("string" === formatType) {
    return "format";
  }
  if ("object" === formatType && void 0 !== format2.type) {
    return format2.type;
  }
  return null;
};
var dateUtils2 = {
  SUPPORTED_FORMATS: ["date", "time", "datetime"],
  ONE_MINUTE,
  ONE_DAY,
  ONE_YEAR,
  MIN_DATEVIEW_DEFAULT_DATE: new Date(1900, 0, 1),
  MAX_DATEVIEW_DEFAULT_DATE: function() {
    var newDate = /* @__PURE__ */ new Date();
    return new Date(newDate.getFullYear() + 50, newDate.getMonth(), newDate.getDate(), 23, 59, 59);
  }(),
  FORMATS_INFO: {
    date: {
      getStandardPattern: function() {
        return "yyyy-MM-dd";
      },
      components: DATE_COMPONENTS
    },
    time: {
      getStandardPattern: function() {
        return "HH:mm";
      },
      components: TIME_COMPONENTS
    },
    datetime: {
      getStandardPattern: function() {
        var standardPattern;
        !function() {
          var $input = renderer_default("<input>").attr("type", "datetime");
          $input.val("2000-01-01T01:01Z");
          if ($input.val()) {
            standardPattern = "yyyy-MM-ddTHH:mmZ";
          }
        }();
        if (!standardPattern) {
          standardPattern = "yyyy-MM-ddTHH:mm:ssZ";
        }
        dateUtils2.FORMATS_INFO.datetime.getStandardPattern = function() {
          return standardPattern;
        };
        return standardPattern;
      },
      components: [...DATE_COMPONENTS, ...TIME_COMPONENTS]
    },
    "datetime-local": {
      getStandardPattern: function() {
        return "yyyy-MM-ddTHH:mm:ss";
      },
      components: [...DATE_COMPONENTS, "hours", "minutes", "seconds"]
    }
  },
  FORMATS_MAP: {
    date: "shortdate",
    time: "shorttime",
    datetime: "shortdateshorttime"
  },
  SUBMIT_FORMATS_MAP: {
    date: "date",
    time: "time",
    datetime: "datetime-local"
  },
  toStandardDateFormat: function(date, type2) {
    var pattern = dateUtils2.FORMATS_INFO[type2].getStandardPattern();
    return date_serialization_default.serializeDate(date, pattern);
  },
  fromStandardDateFormat: function(text) {
    var date = date_serialization_default.dateParser(text);
    return isDate(date) ? date : void 0;
  },
  getMaxMonthDay: function(year, month) {
    return new Date(year, month + 1, 0).getDate();
  },
  mergeDates: function(oldValue, newValue, format2) {
    if (!newValue) {
      return newValue || null;
    }
    if (!oldValue || isNaN(oldValue.getTime())) {
      var now = /* @__PURE__ */ new Date(null);
      oldValue = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    }
    var result2 = new Date(oldValue.valueOf());
    var formatInfo = dateUtils2.FORMATS_INFO[format2];
    each(formatInfo.components, function() {
      var componentInfo = dateUtils2.DATE_COMPONENTS_INFO[this];
      result2[componentInfo.setter](newValue[componentInfo.getter]());
    });
    return result2;
  },
  getLongestCaptionIndex: function(captionArray) {
    var longestIndex = 0;
    var longestCaptionLength = 0;
    var i;
    for (i = 0; i < captionArray.length; ++i) {
      if (captionArray[i].length > longestCaptionLength) {
        longestIndex = i;
        longestCaptionLength = captionArray[i].length;
      }
    }
    return longestIndex;
  },
  formatUsesMonthName: function(format2) {
    return date_default3.formatUsesMonthName(format2);
  },
  formatUsesDayName: function(format2) {
    return date_default3.formatUsesDayName(format2);
  },
  getLongestDate: function(format2, monthNames, dayNames) {
    var stringFormat = getStringFormat(format2);
    var month = 9;
    if (!stringFormat || dateUtils2.formatUsesMonthName(stringFormat)) {
      month = dateUtils2.getLongestCaptionIndex(monthNames);
    }
    var longestDate = new Date(1888, month, 21, 23, 59, 59, 999);
    if (!stringFormat || dateUtils2.formatUsesDayName(stringFormat)) {
      var date = longestDate.getDate() - longestDate.getDay() + dateUtils2.getLongestCaptionIndex(dayNames);
      longestDate.setDate(date);
    }
    return longestDate;
  },
  normalizeTime: function(date) {
    date.setSeconds(0);
    date.setMilliseconds(0);
  }
};
dateUtils2.DATE_COMPONENTS_INFO = {
  year: {
    getter: "getFullYear",
    setter: "setFullYear",
    formatter: function(value2, date) {
      var formatDate = new Date(date.getTime());
      formatDate.setFullYear(value2);
      return date_default3.format(formatDate, "yyyy");
    },
    startValue: void 0,
    endValue: void 0
  },
  day: {
    getter: "getDate",
    setter: "setDate",
    formatter: function(value2, date) {
      var formatDate = new Date(date.getTime());
      formatDate.setDate(value2);
      return date_default3.format(formatDate, "d");
    },
    startValue: 1,
    endValue: void 0
  },
  month: {
    getter: "getMonth",
    setter: "setMonth",
    formatter: function(value2) {
      return date_default3.getMonthNames()[value2];
    },
    startValue: 0,
    endValue: 11
  },
  hours: {
    getter: "getHours",
    setter: "setHours",
    formatter: function(value2) {
      return date_default3.format(new Date(0, 0, 0, value2), "hour");
    },
    startValue: 0,
    endValue: 23
  },
  minutes: {
    getter: "getMinutes",
    setter: "setMinutes",
    formatter: function(value2) {
      return date_default3.format(new Date(0, 0, 0, 0, value2), "minute");
    },
    startValue: 0,
    endValue: 59
  },
  seconds: {
    getter: "getSeconds",
    setter: "setSeconds",
    formatter: function(value2) {
      return date_default3.format(new Date(0, 0, 0, 0, 0, value2), "second");
    },
    startValue: 0,
    endValue: 59
  },
  milliseconds: {
    getter: "getMilliseconds",
    setter: "setMilliseconds",
    formatter: function(value2) {
      return date_default3.format(new Date(0, 0, 0, 0, 0, 0, value2), "millisecond");
    },
    startValue: 0,
    endValue: 999
  }
};
var ui_date_utils_default = dateUtils2;

// node_modules/devextreme/esm/events/gesture/swipeable.js
var DX_SWIPEABLE = "dxSwipeable";
var SWIPEABLE_CLASS = "dx-swipeable";
var ACTION_TO_EVENT_MAP = {
  onStart: SWIPE_START_EVENT,
  onUpdated: SWIPE_EVENT,
  onEnd: SWIPE_END_EVENT,
  onCancel: "dxswipecancel"
};
var IMMEDIATE_TIMEOUT2 = 180;
var Swipeable = dom_component_default.inherit({
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      elastic: true,
      immediate: false,
      immediateTimeout: IMMEDIATE_TIMEOUT2,
      direction: "horizontal",
      itemSizeFunc: null,
      onStart: null,
      onUpdated: null,
      onEnd: null,
      onCancel: null
    });
  },
  _render: function() {
    this.callBase();
    this.$element().addClass(SWIPEABLE_CLASS);
    this._attachEventHandlers();
  },
  _attachEventHandlers: function() {
    this._detachEventHandlers();
    if (this.option("disabled")) {
      return;
    }
    var NAME = this.NAME;
    this._createEventData();
    each(ACTION_TO_EVENT_MAP, (function(actionName, eventName) {
      var action = this._createActionByOption(actionName, {
        context: this
      });
      eventName = addNamespace2(eventName, NAME);
      events_engine_default.on(this.$element(), eventName, this._eventData, function(e) {
        return action({
          event: e
        });
      });
    }).bind(this));
  },
  _createEventData: function() {
    this._eventData = {
      elastic: this.option("elastic"),
      itemSizeFunc: this.option("itemSizeFunc"),
      direction: this.option("direction"),
      immediate: this.option("immediate"),
      immediateTimeout: this.option("immediateTimeout")
    };
  },
  _detachEventHandlers: function() {
    events_engine_default.off(this.$element(), "." + DX_SWIPEABLE);
  },
  _optionChanged: function(args) {
    switch (args.name) {
      case "disabled":
      case "onStart":
      case "onUpdated":
      case "onEnd":
      case "onCancel":
      case "elastic":
      case "immediate":
      case "itemSizeFunc":
      case "direction":
        this._detachEventHandlers();
        this._attachEventHandlers();
        break;
      case "rtlEnabled":
        break;
      default:
        this.callBase(args);
    }
  },
  _useTemplates: function() {
    return false;
  }
});
getName(Swipeable, DX_SWIPEABLE);
var swipeable_default = Swipeable;

// node_modules/devextreme/esm/ui/calendar/ui.calendar.navigator.js
var CALENDAR_NAVIGATOR_CLASS = "dx-calendar-navigator";
var CALENDAR_NAVIGATOR_PREVIOUS_MONTH_CLASS = "dx-calendar-navigator-previous-month";
var CALENDAR_NAVIGATOR_NEXT_MONTH_CLASS = "dx-calendar-navigator-next-month";
var CALENDAR_NAVIGATOR_PREVIOUS_VIEW_CLASS = "dx-calendar-navigator-previous-view";
var CALENDAR_NAVIGATOR_NEXT_VIEW_CLASS = "dx-calendar-navigator-next-view";
var CALENDAR_NAVIGATOR_DISABLED_LINK_CLASS = "dx-calendar-disabled-navigator-link";
var CALENDAR_NAVIGATOR_CAPTION_BUTTON_CLASS = "dx-calendar-caption-button";
var BUTTON_TEXT_CLASS = "dx-button-text";
var Navigator = class extends ui_widget_default {
  _getDefaultOptions() {
    return extend(super._getDefaultOptions(), {
      onClick: null,
      onCaptionClick: null,
      type: "normal",
      stylingMode: "outlined",
      text: ""
    });
  }
  _defaultOptionsRules() {
    return super._defaultOptionsRules().concat([{
      device: function() {
        return isMaterial();
      },
      options: {
        type: "default",
        stylingMode: "text"
      }
    }, {
      device: function() {
        return isFluent();
      },
      options: {
        type: "normal",
        stylingMode: "text"
      }
    }]);
  }
  _init() {
    super._init();
    this._initActions();
  }
  _initActions() {
    this._clickAction = this._createActionByOption("onClick");
    this._captionClickAction = this._createActionByOption("onCaptionClick");
  }
  _initMarkup() {
    super._initMarkup();
    this.$element().addClass(CALENDAR_NAVIGATOR_CLASS);
    this._renderButtons();
    this._renderCaption();
  }
  _renderButtons() {
    var {
      rtlEnabled,
      type: type2,
      stylingMode,
      focusStateEnabled
    } = this.option();
    this._prevButton = this._createComponent(renderer_default("<div>"), button_default, {
      focusStateEnabled,
      icon: rtlEnabled ? "chevronright" : "chevronleft",
      onClick: (e) => {
        this._clickAction({
          direction: -1,
          event: e
        });
      },
      type: type2,
      stylingMode,
      integrationOptions: {}
    });
    var $prevButton = this._prevButton.$element().addClass(CALENDAR_NAVIGATOR_PREVIOUS_VIEW_CLASS).addClass(CALENDAR_NAVIGATOR_PREVIOUS_MONTH_CLASS);
    this._nextButton = this._createComponent(renderer_default("<div>"), button_default, {
      focusStateEnabled,
      icon: rtlEnabled ? "chevronleft" : "chevronright",
      onClick: (e) => {
        this._clickAction({
          direction: 1,
          event: e
        });
      },
      type: type2,
      stylingMode,
      integrationOptions: {}
    });
    var $nextButton = this._nextButton.$element().addClass(CALENDAR_NAVIGATOR_NEXT_VIEW_CLASS).addClass(CALENDAR_NAVIGATOR_NEXT_MONTH_CLASS);
    this._caption = this._createComponent(renderer_default("<div>").addClass(CALENDAR_NAVIGATOR_CAPTION_BUTTON_CLASS), button_default, {
      focusStateEnabled,
      onClick: (e) => {
        this._captionClickAction({
          event: e
        });
      },
      type: type2,
      stylingMode,
      template: (_, content) => {
        var {
          text
        } = this.option();
        var viewCaptionTexts = text.split(" - ");
        viewCaptionTexts.forEach((captionText) => {
          renderer_default(content).append(renderer_default("<span>").addClass(BUTTON_TEXT_CLASS).text(captionText));
        });
      },
      integrationOptions: {}
    });
    var $caption = this._caption.$element();
    this.$element().append($prevButton, $caption, $nextButton);
  }
  _renderCaption() {
    this._caption.option("text", this.option("text"));
  }
  toggleButton(buttonPrefix, value2) {
    var buttonName = "_" + buttonPrefix + "Button";
    var button = this[buttonName];
    if (button) {
      button.option("disabled", value2);
      button.$element().toggleClass(CALENDAR_NAVIGATOR_DISABLED_LINK_CLASS, value2);
    }
  }
  _optionChanged(args) {
    switch (args.name) {
      case "text":
        this._renderCaption();
        break;
      default:
        super._optionChanged(args);
    }
  }
};
var ui_calendar_navigator_default = Navigator;

// node_modules/devextreme/esm/ui/calendar/ui.calendar.base_view.js
var {
  abstract: abstract7
} = ui_widget_default;
var CALENDAR_OTHER_VIEW_CLASS = "dx-calendar-other-view";
var CALENDAR_CELL_CLASS = "dx-calendar-cell";
var CALENDAR_CELL_START_CLASS = "dx-calendar-cell-start";
var CALENDAR_CELL_END_CLASS = "dx-calendar-cell-end";
var CALENDAR_CELL_START_IN_ROW_CLASS = "dx-calendar-cell-start-in-row";
var CALENDAR_CELL_END_IN_ROW_CLASS = "dx-calendar-cell-end-in-row";
var CALENDAR_WEEK_NUMBER_CELL_CLASS = "dx-calendar-week-number-cell";
var CALENDAR_EMPTY_CELL_CLASS = "dx-calendar-empty-cell";
var CALENDAR_TODAY_CLASS = "dx-calendar-today";
var CALENDAR_SELECTED_DATE_CLASS = "dx-calendar-selected-date";
var CALENDAR_CELL_IN_RANGE_CLASS = "dx-calendar-cell-in-range";
var CALENDAR_CELL_RANGE_HOVER_CLASS = "dx-calendar-cell-range-hover";
var CALENDAR_CELL_RANGE_HOVER_START_CLASS = "dx-calendar-cell-range-hover-start";
var CALENDAR_CELL_RANGE_HOVER_END_CLASS = "dx-calendar-cell-range-hover-end";
var CALENDAR_RANGE_START_DATE_CLASS = "dx-calendar-range-start-date";
var CALENDAR_RANGE_END_DATE_CLASS = "dx-calendar-range-end-date";
var CALENDAR_CONTOURED_DATE_CLASS = "dx-calendar-contoured-date";
var NOT_WEEK_CELL_SELECTOR = "td:not(.".concat(CALENDAR_WEEK_NUMBER_CELL_CLASS, ")");
var CALENDAR_DXCLICK_EVENT_NAME = addNamespace2(CLICK_EVENT_NAME, "dxCalendar");
var CALENDAR_DXHOVERSTART_EVENT_NAME = addNamespace2(HOVERSTART, "dxCalendar");
var CALENDAR_DATE_VALUE_KEY = "dxDateValueKey";
var DAY_INTERVAL = 864e5;
var BaseView = ui_widget_default.inherit({
  _getViewName: function() {
    return "base";
  },
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      date: /* @__PURE__ */ new Date(),
      focusStateEnabled: false,
      cellTemplate: null,
      disabledDates: null,
      onCellClick: null,
      onCellHover: null,
      onWeekNumberClick: null,
      rowCount: 3,
      colCount: 4,
      allowValueSelection: true,
      _todayDate: () => /* @__PURE__ */ new Date()
    });
  },
  _initMarkup: function() {
    this.callBase();
    this._renderImpl();
  },
  _renderImpl: function() {
    this.$element().append(this._createTable());
    this._createDisabledDatesHandler();
    this._renderBody();
    this._renderContouredDate();
    this._renderValue();
    this._renderRange();
    this._renderEvents();
  },
  _createTable: function() {
    this._$table = renderer_default("<table>");
    var localizedWidgetName = message_default.format("dxCalendar-ariaWidgetName");
    this.setAria({
      label: localizedWidgetName,
      role: "grid"
    }, this._$table);
    return this._$table;
  },
  _renderBody: function() {
    this.$body = renderer_default("<tbody>").appendTo(this._$table);
    var rowData = {
      cellDate: this._getFirstCellData(),
      prevCellDate: null
    };
    for (var rowIndex = 0, rowCount = this.option("rowCount"); rowIndex < rowCount; rowIndex++) {
      rowData.row = this._createRow();
      for (var colIndex = 0, colCount = this.option("colCount"); colIndex < colCount; colIndex++) {
        this._renderCell(rowData, colIndex);
      }
      this._renderWeekNumberCell(rowData);
    }
  },
  _createRow: function() {
    var row = dom_adapter_default.createElement("tr");
    this.setAria("role", "row", renderer_default(row));
    this.$body.get(0).appendChild(row);
    return row;
  },
  _createCell: function(cellDate, cellIndex) {
    var cell = dom_adapter_default.createElement("td");
    var $cell = renderer_default(cell);
    cell.className = this._getClassNameByDate(cellDate, cellIndex);
    cell.setAttribute("data-value", date_serialization_default.serializeDate(cellDate, date_default.getShortDateFormat()));
    data(cell, CALENDAR_DATE_VALUE_KEY, cellDate);
    this.setAria({
      role: "gridcell",
      label: this.getCellAriaLabel(cellDate)
    }, $cell);
    return {
      cell,
      $cell
    };
  },
  _renderCell: function(params, cellIndex) {
    var {
      cellDate,
      prevCellDate,
      row
    } = params;
    if (prevCellDate) {
      date_default.fixTimezoneGap(prevCellDate, cellDate);
    }
    params.prevCellDate = cellDate;
    var {
      cell,
      $cell
    } = this._createCell(cellDate, cellIndex);
    var cellTemplate = this.option("cellTemplate");
    renderer_default(row).append(cell);
    if (cellTemplate) {
      cellTemplate.render(this._prepareCellTemplateData(cellDate, cellIndex, $cell));
    } else {
      cell.innerHTML = this._getCellText(cellDate);
    }
    params.cellDate = this._getNextCellData(cellDate);
  },
  _getClassNameByDate: function(cellDate, cellIndex) {
    var className = CALENDAR_CELL_CLASS;
    if (this._isTodayCell(cellDate)) {
      className += " ".concat(CALENDAR_TODAY_CLASS);
    }
    if (this._isDateOutOfRange(cellDate) || this.isDateDisabled(cellDate)) {
      className += " ".concat(CALENDAR_EMPTY_CELL_CLASS);
    }
    if (this._isOtherView(cellDate)) {
      className += " ".concat(CALENDAR_OTHER_VIEW_CLASS);
    }
    if ("range" === this.option("selectionMode")) {
      if (0 === cellIndex) {
        className += " ".concat(CALENDAR_CELL_START_IN_ROW_CLASS);
      }
      if (cellIndex === this.option("colCount") - 1) {
        className += " ".concat(CALENDAR_CELL_END_IN_ROW_CLASS);
      }
      if (this._isStartDayOfMonth(cellDate)) {
        className += " ".concat(CALENDAR_CELL_START_CLASS);
      }
      if (this._isEndDayOfMonth(cellDate)) {
        className += " ".concat(CALENDAR_CELL_END_CLASS);
      }
    }
    return className;
  },
  _prepareCellTemplateData: function(cellDate, cellIndex, $cell) {
    var isDateCell = cellDate instanceof Date;
    var text = isDateCell ? this._getCellText(cellDate) : cellDate;
    var date = isDateCell ? cellDate : void 0;
    var view = this._getViewName();
    return {
      model: {
        text,
        date,
        view
      },
      container: getPublicElement($cell),
      index: cellIndex
    };
  },
  _renderEvents: function() {
    this._createCellClickAction();
    events_engine_default.off(this._$table, CALENDAR_DXCLICK_EVENT_NAME);
    events_engine_default.on(this._$table, CALENDAR_DXCLICK_EVENT_NAME, NOT_WEEK_CELL_SELECTOR, (e) => {
      if (!renderer_default(e.currentTarget).hasClass(CALENDAR_EMPTY_CELL_CLASS)) {
        this._cellClickAction({
          event: e,
          value: renderer_default(e.currentTarget).data(CALENDAR_DATE_VALUE_KEY)
        });
      }
    });
    var {
      selectionMode
    } = this.option();
    events_engine_default.off(this._$table, CALENDAR_DXHOVERSTART_EVENT_NAME);
    if ("range" === selectionMode) {
      this._createCellHoverAction();
      events_engine_default.on(this._$table, CALENDAR_DXHOVERSTART_EVENT_NAME, NOT_WEEK_CELL_SELECTOR, (e) => {
        if (!renderer_default(e.currentTarget).hasClass(CALENDAR_EMPTY_CELL_CLASS)) {
          this._cellHoverAction({
            event: e,
            value: renderer_default(e.currentTarget).data(CALENDAR_DATE_VALUE_KEY)
          });
        }
      });
    }
    if ("single" !== selectionMode) {
      this._createWeekNumberCellClickAction();
      events_engine_default.on(this._$table, CALENDAR_DXCLICK_EVENT_NAME, ".".concat(CALENDAR_WEEK_NUMBER_CELL_CLASS), (e) => {
        var $row = renderer_default(e.currentTarget).closest("tr");
        var firstDateInRow = $row.find(".".concat(CALENDAR_CELL_CLASS)).first().data(CALENDAR_DATE_VALUE_KEY);
        var lastDateInRow = $row.find(".".concat(CALENDAR_CELL_CLASS)).last().data(CALENDAR_DATE_VALUE_KEY);
        var rowDates = [...date_default.getDatesOfInterval(firstDateInRow, lastDateInRow, DAY_INTERVAL), lastDateInRow];
        this._weekNumberCellClickAction({
          event: e,
          rowDates
        });
      });
    }
  },
  _createCellClickAction: function() {
    this._cellClickAction = this._createActionByOption("onCellClick");
  },
  _createCellHoverAction: function() {
    this._cellHoverAction = this._createActionByOption("onCellHover");
  },
  _createWeekNumberCellClickAction: function() {
    this._weekNumberCellClickAction = this._createActionByOption("onWeekNumberClick");
  },
  _createDisabledDatesHandler: function() {
    var disabledDates = this.option("disabledDates");
    this._disabledDatesHandler = Array.isArray(disabledDates) ? this._getDefaultDisabledDatesHandler(disabledDates) : disabledDates || noop2;
  },
  _getDefaultDisabledDatesHandler: function(disabledDates) {
    return noop2;
  },
  _isTodayCell: abstract7,
  _isDateOutOfRange: abstract7,
  isDateDisabled: function(cellDate) {
    var dateParts = {
      date: cellDate,
      view: this._getViewName()
    };
    return this._disabledDatesHandler(dateParts);
  },
  _isOtherView: abstract7,
  _isStartDayOfMonth: abstract7,
  _isEndDayOfMonth: abstract7,
  _getCellText: abstract7,
  _getFirstCellData: abstract7,
  _getNextCellData: abstract7,
  _renderContouredDate: function(contouredDate) {
    if (!this.option("focusStateEnabled")) {
      return;
    }
    contouredDate = contouredDate || this.option("contouredDate");
    var $oldContouredCell = this._getContouredCell();
    var $newContouredCell = this._getCellByDate(contouredDate);
    $oldContouredCell.removeClass(CALENDAR_CONTOURED_DATE_CLASS);
    if (contouredDate) {
      $newContouredCell.addClass(CALENDAR_CONTOURED_DATE_CLASS);
    }
  },
  _getContouredCell: function() {
    return this._$table.find(".".concat(CALENDAR_CONTOURED_DATE_CLASS));
  },
  _renderValue: function() {
    if (!this.option("allowValueSelection")) {
      return;
    }
    var value2 = this.option("value");
    if (!Array.isArray(value2)) {
      value2 = [value2];
    }
    this._updateSelectedClass(value2);
  },
  _updateSelectedClass: function(value2) {
    var _this$_$selectedCells;
    if (this._isRangeMode() && !this._isMonthView()) {
      return;
    }
    null === (_this$_$selectedCells = this._$selectedCells) || void 0 === _this$_$selectedCells ? void 0 : _this$_$selectedCells.forEach(($cell) => {
      $cell.removeClass(CALENDAR_SELECTED_DATE_CLASS);
    });
    this._$selectedCells = value2.map((value3) => this._getCellByDate(value3));
    this._$selectedCells.forEach(($cell) => {
      $cell.addClass(CALENDAR_SELECTED_DATE_CLASS);
    });
  },
  _renderRange: function() {
    var _this$_$rangeCells, _this$_$hoveredRangeC, _this$_$rangeStartHov, _this$_$rangeEndHover, _this$_$rangeStartDat, _this$_$rangeEndDateC, _this$_$rangeStartDat2, _this$_$rangeEndDateC2;
    var {
      allowValueSelection,
      value: value2,
      range
    } = this.option();
    if (!allowValueSelection || !this._isRangeMode() || !this._isMonthView()) {
      return;
    }
    null === (_this$_$rangeCells = this._$rangeCells) || void 0 === _this$_$rangeCells ? void 0 : _this$_$rangeCells.forEach(($cell) => {
      $cell.removeClass(CALENDAR_CELL_IN_RANGE_CLASS);
    });
    null === (_this$_$hoveredRangeC = this._$hoveredRangeCells) || void 0 === _this$_$hoveredRangeC ? void 0 : _this$_$hoveredRangeC.forEach(($cell) => {
      $cell.removeClass(CALENDAR_CELL_RANGE_HOVER_CLASS);
    });
    null === (_this$_$rangeStartHov = this._$rangeStartHoverCell) || void 0 === _this$_$rangeStartHov ? void 0 : _this$_$rangeStartHov.removeClass(CALENDAR_CELL_RANGE_HOVER_START_CLASS);
    null === (_this$_$rangeEndHover = this._$rangeEndHoverCell) || void 0 === _this$_$rangeEndHover ? void 0 : _this$_$rangeEndHover.removeClass(CALENDAR_CELL_RANGE_HOVER_END_CLASS);
    null === (_this$_$rangeStartDat = this._$rangeStartDateCell) || void 0 === _this$_$rangeStartDat ? void 0 : _this$_$rangeStartDat.removeClass(CALENDAR_RANGE_START_DATE_CLASS);
    null === (_this$_$rangeEndDateC = this._$rangeEndDateCell) || void 0 === _this$_$rangeEndDateC ? void 0 : _this$_$rangeEndDateC.removeClass(CALENDAR_RANGE_END_DATE_CLASS);
    this._$rangeCells = range.map((value3) => this._getCellByDate(value3));
    this._$rangeStartDateCell = this._getCellByDate(value2[0]);
    this._$rangeEndDateCell = this._getCellByDate(value2[1]);
    this._$rangeCells.forEach(($cell) => {
      $cell.addClass(CALENDAR_CELL_IN_RANGE_CLASS);
    });
    null === (_this$_$rangeStartDat2 = this._$rangeStartDateCell) || void 0 === _this$_$rangeStartDat2 ? void 0 : _this$_$rangeStartDat2.addClass(CALENDAR_RANGE_START_DATE_CLASS);
    null === (_this$_$rangeEndDateC2 = this._$rangeEndDateCell) || void 0 === _this$_$rangeEndDateC2 ? void 0 : _this$_$rangeEndDateC2.addClass(CALENDAR_RANGE_END_DATE_CLASS);
  },
  _renderHoveredRange() {
    var _this$_$hoveredRangeC2, _this$_$rangeStartHov2, _this$_$rangeEndHover2, _this$_$rangeStartHov3, _this$_$rangeEndHover3;
    var {
      allowValueSelection,
      hoveredRange
    } = this.option();
    if (!allowValueSelection || !this._isRangeMode() || !this._isMonthView()) {
      return;
    }
    null === (_this$_$hoveredRangeC2 = this._$hoveredRangeCells) || void 0 === _this$_$hoveredRangeC2 ? void 0 : _this$_$hoveredRangeC2.forEach(($cell) => {
      $cell.removeClass(CALENDAR_CELL_RANGE_HOVER_CLASS);
    });
    null === (_this$_$rangeStartHov2 = this._$rangeStartHoverCell) || void 0 === _this$_$rangeStartHov2 ? void 0 : _this$_$rangeStartHov2.removeClass(CALENDAR_CELL_RANGE_HOVER_START_CLASS);
    null === (_this$_$rangeEndHover2 = this._$rangeEndHoverCell) || void 0 === _this$_$rangeEndHover2 ? void 0 : _this$_$rangeEndHover2.removeClass(CALENDAR_CELL_RANGE_HOVER_END_CLASS);
    this._$hoveredRangeCells = hoveredRange.map((value2) => this._getCellByDate(value2));
    this._$rangeStartHoverCell = this._getCellByDate(hoveredRange[0]);
    this._$rangeEndHoverCell = this._getCellByDate(hoveredRange[hoveredRange.length - 1]);
    this._$hoveredRangeCells.forEach(($cell) => {
      $cell.addClass(CALENDAR_CELL_RANGE_HOVER_CLASS);
    });
    null === (_this$_$rangeStartHov3 = this._$rangeStartHoverCell) || void 0 === _this$_$rangeStartHov3 ? void 0 : _this$_$rangeStartHov3.addClass(CALENDAR_CELL_RANGE_HOVER_START_CLASS);
    null === (_this$_$rangeEndHover3 = this._$rangeEndHoverCell) || void 0 === _this$_$rangeEndHover3 ? void 0 : _this$_$rangeEndHover3.addClass(CALENDAR_CELL_RANGE_HOVER_END_CLASS);
  },
  _isMonthView: function() {
    return "month" === this.option("zoomLevel");
  },
  _isRangeMode: function() {
    return "range" === this.option("selectionMode");
  },
  getCellAriaLabel: function(date) {
    return this._getCellText(date);
  },
  _getFirstAvailableDate: function() {
    var date = this.option("date");
    var min = this.option("min");
    date = date_default.getViewFirstCellDate(this._getViewName(), date);
    return new Date(min && date < min ? min : date);
  },
  _getCellByDate: abstract7,
  isBoundary: abstract7,
  _optionChanged: function(args) {
    var {
      name: name2,
      value: value2
    } = args;
    switch (name2) {
      case "value":
        this._renderValue();
        break;
      case "range":
        this._renderRange();
        break;
      case "hoveredRange":
        this._renderHoveredRange();
        break;
      case "contouredDate":
        this._renderContouredDate(value2);
        break;
      case "onCellClick":
        this._createCellClickAction();
        break;
      case "onCellHover":
        this._createCellHoverAction();
        break;
      case "min":
      case "max":
      case "disabledDates":
      case "cellTemplate":
      case "selectionMode":
        this._invalidate();
        break;
      case "_todayDate":
        this._renderBody();
        break;
      default:
        this.callBase(args);
    }
  }
});
var ui_calendar_base_view_default = BaseView;

// node_modules/devextreme/esm/ui/calendar/ui.calendar.views.js
var CALENDAR_OTHER_MONTH_CLASS = "dx-calendar-other-month";
var CALENDAR_OTHER_VIEW_CLASS2 = "dx-calendar-other-view";
var CALENDAR_WEEK_NUMBER_CELL_CLASS2 = "dx-calendar-week-number-cell";
var CALENDAR_WEEK_SELECTION_CLASS = "dx-calendar-week-selection";
var Views = {
  month: ui_calendar_base_view_default.inherit({
    _getViewName: function() {
      return "month";
    },
    _getDefaultOptions: function() {
      return extend(this.callBase(), {
        firstDayOfWeek: 0,
        rowCount: 6,
        colCount: 7
      });
    },
    _renderImpl: function() {
      this.callBase();
      this._renderHeader();
    },
    _renderBody: function() {
      this.callBase();
      this._$table.find(".".concat(CALENDAR_OTHER_VIEW_CLASS2)).addClass(CALENDAR_OTHER_MONTH_CLASS);
    },
    _renderFocusTarget: noop2,
    getCellAriaLabel: function(date) {
      return date_default3.format(date, "longdate");
    },
    _renderHeader: function() {
      var $headerRow = renderer_default("<tr>");
      var $header = renderer_default("<thead>").append($headerRow);
      this._$table.prepend($header);
      for (var colIndex = 0, colCount = this.option("colCount"); colIndex < colCount; colIndex++) {
        this._renderHeaderCell(colIndex, $headerRow);
      }
      if (this.option("showWeekNumbers")) {
        this._renderWeekHeaderCell($headerRow);
      }
    },
    _renderHeaderCell: function(cellIndex, $headerRow) {
      var {
        firstDayOfWeek
      } = this.option();
      var {
        full: fullCaption,
        abbreviated: abbrCaption
      } = this._getDayCaption(firstDayOfWeek + cellIndex);
      var $cell = renderer_default("<th>").attr({
        scope: "col",
        abbr: fullCaption
      }).text(abbrCaption);
      $headerRow.append($cell);
    },
    _renderWeekHeaderCell: function($headerRow) {
      var $weekNumberHeaderCell = renderer_default("<th>").attr({
        scope: "col",
        abbr: "WeekNumber",
        class: "dx-week-number-header"
      });
      $headerRow.prepend($weekNumberHeaderCell);
    },
    _renderWeekNumberCell: function(rowData) {
      var {
        showWeekNumbers,
        cellTemplate,
        selectionMode,
        selectWeekOnClick
      } = this.option();
      if (!showWeekNumbers) {
        return;
      }
      var weekNumber = this._getWeekNumber(rowData.prevCellDate);
      var cell = dom_adapter_default.createElement("td");
      var $cell = renderer_default(cell);
      cell.className = CALENDAR_WEEK_NUMBER_CELL_CLASS2;
      if ("single" !== selectionMode && selectWeekOnClick) {
        $cell.addClass(CALENDAR_WEEK_SELECTION_CLASS);
      }
      if (cellTemplate) {
        cellTemplate.render(this._prepareCellTemplateData(weekNumber, -1, $cell));
      } else {
        cell.innerHTML = weekNumber;
      }
      rowData.row.prepend(cell);
      this.setAria({
        role: "gridcell",
        label: "Week ".concat(weekNumber)
      }, $cell);
    },
    _getWeekNumber: function(date) {
      var {
        weekNumberRule,
        firstDayOfWeek
      } = this.option();
      if ("auto" === weekNumberRule) {
        return date_default.getWeekNumber(date, firstDayOfWeek, 1 === firstDayOfWeek ? "firstFourDays" : "firstDay");
      }
      return date_default.getWeekNumber(date, firstDayOfWeek, weekNumberRule);
    },
    getNavigatorCaption: function() {
      return date_default3.format(this.option("date"), "monthandyear");
    },
    _isTodayCell: function(cellDate) {
      var today = this.option("_todayDate")();
      return date_default.sameDate(cellDate, today);
    },
    _isDateOutOfRange: function(cellDate) {
      var minDate = this.option("min");
      var maxDate = this.option("max");
      return !date_default.dateInRange(cellDate, minDate, maxDate, "date");
    },
    _isOtherView: function(cellDate) {
      return cellDate.getMonth() !== this.option("date").getMonth();
    },
    _isStartDayOfMonth: function(cellDate) {
      return date_default.sameDate(cellDate, date_default.getFirstMonthDate(this.option("date")));
    },
    _isEndDayOfMonth: function(cellDate) {
      return date_default.sameDate(cellDate, date_default.getLastMonthDate(this.option("date")));
    },
    _getCellText: function(cellDate) {
      return date_default3.format(cellDate, "d");
    },
    _getDayCaption: function(day) {
      var daysInWeek = this.option("colCount");
      var dayIndex = day % daysInWeek;
      return {
        full: date_default3.getDayNames()[dayIndex],
        abbreviated: date_default3.getDayNames("abbreviated")[dayIndex]
      };
    },
    _getFirstCellData: function() {
      var {
        firstDayOfWeek
      } = this.option();
      var firstDay = date_default.getFirstMonthDate(this.option("date"));
      var firstMonthDayOffset = firstDayOfWeek - firstDay.getDay();
      var daysInWeek = this.option("colCount");
      if (firstMonthDayOffset >= 0) {
        firstMonthDayOffset -= daysInWeek;
      }
      firstDay.setDate(firstDay.getDate() + firstMonthDayOffset);
      return firstDay;
    },
    _getNextCellData: function(date) {
      date = new Date(date);
      date.setDate(date.getDate() + 1);
      return date;
    },
    _getCellByDate: function(date) {
      return this._$table.find("td[data-value='".concat(date_serialization_default.serializeDate(date, date_default.getShortDateFormat()), "']"));
    },
    isBoundary: function(date) {
      return date_default.sameMonthAndYear(date, this.option("min")) || date_default.sameMonthAndYear(date, this.option("max"));
    },
    _getDefaultDisabledDatesHandler: function(disabledDates) {
      return function(args) {
        var isDisabledDate = disabledDates.some(function(item) {
          return date_default.sameDate(item, args.date);
        });
        if (isDisabledDate) {
          return true;
        }
      };
    }
  }),
  year: ui_calendar_base_view_default.inherit({
    _getViewName: function() {
      return "year";
    },
    _isTodayCell: function(cellDate) {
      var today = this.option("_todayDate")();
      return date_default.sameMonthAndYear(cellDate, today);
    },
    _isDateOutOfRange: function(cellDate) {
      return !date_default.dateInRange(cellDate, date_default.getFirstMonthDate(this.option("min")), date_default.getLastMonthDate(this.option("max")));
    },
    _isOtherView: function() {
      return false;
    },
    _isStartDayOfMonth: function() {
      return false;
    },
    _isEndDayOfMonth: function() {
      return false;
    },
    _getCellText: function(cellDate) {
      return date_default3.getMonthNames("abbreviated")[cellDate.getMonth()];
    },
    _getFirstCellData: function() {
      var currentDate = this.option("date");
      var data3 = new Date(currentDate);
      data3.setDate(1);
      data3.setMonth(0);
      return data3;
    },
    _getNextCellData: function(date) {
      date = new Date(date);
      date.setMonth(date.getMonth() + 1);
      return date;
    },
    _getCellByDate: function(date) {
      var foundDate = new Date(date);
      foundDate.setDate(1);
      return this._$table.find("td[data-value='".concat(date_serialization_default.serializeDate(foundDate, date_default.getShortDateFormat()), "']"));
    },
    getCellAriaLabel: function(date) {
      return date_default3.format(date, "monthandyear");
    },
    getNavigatorCaption: function() {
      return date_default3.format(this.option("date"), "yyyy");
    },
    isBoundary: function(date) {
      return date_default.sameYear(date, this.option("min")) || date_default.sameYear(date, this.option("max"));
    },
    _renderWeekNumberCell: noop2
  }),
  decade: ui_calendar_base_view_default.inherit({
    _getViewName: function() {
      return "decade";
    },
    _isTodayCell: function(cellDate) {
      var today = this.option("_todayDate")();
      return date_default.sameYear(cellDate, today);
    },
    _isDateOutOfRange: function(cellDate) {
      var min = this.option("min");
      var max = this.option("max");
      return !date_default.dateInRange(cellDate.getFullYear(), min && min.getFullYear(), max && max.getFullYear());
    },
    _isOtherView: function(cellDate) {
      var date = new Date(cellDate);
      date.setMonth(1);
      return !date_default.sameDecade(date, this.option("date"));
    },
    _isStartDayOfMonth: function() {
      return false;
    },
    _isEndDayOfMonth: function() {
      return false;
    },
    _getCellText: function(cellDate) {
      return date_default3.format(cellDate, "yyyy");
    },
    _getFirstCellData: function() {
      var year = date_default.getFirstYearInDecade(this.option("date")) - 1;
      return date_default.createDateWithFullYear(year, 0, 1);
    },
    _getNextCellData: function(date) {
      date = new Date(date);
      date.setFullYear(date.getFullYear() + 1);
      return date;
    },
    getNavigatorCaption: function() {
      var currentDate = this.option("date");
      var firstYearInDecade = date_default.getFirstYearInDecade(currentDate);
      var startDate = new Date(currentDate);
      var endDate = new Date(currentDate);
      startDate.setFullYear(firstYearInDecade);
      endDate.setFullYear(firstYearInDecade + 9);
      return date_default3.format(startDate, "yyyy") + "-" + date_default3.format(endDate, "yyyy");
    },
    _isValueOnCurrentView: function(currentDate, value2) {
      return date_default.sameDecade(currentDate, value2);
    },
    _getCellByDate: function(date) {
      var foundDate = new Date(date);
      foundDate.setDate(1);
      foundDate.setMonth(0);
      return this._$table.find("td[data-value='".concat(date_serialization_default.serializeDate(foundDate, date_default.getShortDateFormat()), "']"));
    },
    isBoundary: function(date) {
      return date_default.sameDecade(date, this.option("min")) || date_default.sameDecade(date, this.option("max"));
    },
    _renderWeekNumberCell: noop2
  }),
  century: ui_calendar_base_view_default.inherit({
    _getViewName: function() {
      return "century";
    },
    _isTodayCell: function(cellDate) {
      var today = this.option("_todayDate")();
      return date_default.sameDecade(cellDate, today);
    },
    _isDateOutOfRange: function(cellDate) {
      var decade = date_default.getFirstYearInDecade(cellDate);
      var minDecade = date_default.getFirstYearInDecade(this.option("min"));
      var maxDecade = date_default.getFirstYearInDecade(this.option("max"));
      return !date_default.dateInRange(decade, minDecade, maxDecade);
    },
    _isOtherView: function(cellDate) {
      var date = new Date(cellDate);
      date.setMonth(1);
      return !date_default.sameCentury(date, this.option("date"));
    },
    _isStartDayOfMonth: function() {
      return false;
    },
    _isEndDayOfMonth: function() {
      return false;
    },
    _getCellText: function(cellDate) {
      var startDate = date_default3.format(cellDate, "yyyy");
      var endDate = new Date(cellDate);
      endDate.setFullYear(endDate.getFullYear() + 9);
      return startDate + " - " + date_default3.format(endDate, "yyyy");
    },
    _getFirstCellData: function() {
      var decade = date_default.getFirstDecadeInCentury(this.option("date")) - 10;
      return date_default.createDateWithFullYear(decade, 0, 1);
    },
    _getNextCellData: function(date) {
      date = new Date(date);
      date.setFullYear(date.getFullYear() + 10);
      return date;
    },
    _getCellByDate: function(date) {
      var foundDate = new Date(date);
      foundDate.setDate(1);
      foundDate.setMonth(0);
      foundDate.setFullYear(date_default.getFirstYearInDecade(foundDate));
      return this._$table.find("td[data-value='".concat(date_serialization_default.serializeDate(foundDate, date_default.getShortDateFormat()), "']"));
    },
    getNavigatorCaption: function() {
      var currentDate = this.option("date");
      var firstDecadeInCentury = date_default.getFirstDecadeInCentury(currentDate);
      var startDate = new Date(currentDate);
      var endDate = new Date(currentDate);
      startDate.setFullYear(firstDecadeInCentury);
      endDate.setFullYear(firstDecadeInCentury + 99);
      return date_default3.format(startDate, "yyyy") + "-" + date_default3.format(endDate, "yyyy");
    },
    isBoundary: function(date) {
      return date_default.sameCentury(date, this.option("min")) || date_default.sameCentury(date, this.option("max"));
    },
    _renderWeekNumberCell: noop2
  })
};
var ui_calendar_views_default = Views;

// node_modules/devextreme/esm/ui/calendar/ui.calendar.selection.strategy.js
var CalendarSelectionStrategy = class {
  constructor(component) {
    this.calendar = component;
  }
  dateOption(optionName) {
    return this.calendar._dateOption(optionName);
  }
  dateValue(value2, e) {
    this.calendar._dateValue(value2, e);
  }
  skipNavigate() {
    this.calendar._skipNavigate = true;
  }
  updateAriaSelected(value2, previousValue) {
    this.calendar._updateAriaSelected(value2, previousValue);
    if (value2[0] && this.calendar.option("currentDate").getTime() === value2[0].getTime()) {
      this.calendar._updateAriaId(value2[0]);
    }
  }
  processValueChanged(value2, previousValue) {
    var _value, _previousValue;
    if (isDefined(value2) && !Array.isArray(value2)) {
      value2 = [value2];
    }
    if (isDefined(previousValue) && !Array.isArray(previousValue)) {
      previousValue = [previousValue];
    }
    value2 = (null === (_value = value2) || void 0 === _value ? void 0 : _value.map((item) => this._convertToDate(item))) || [];
    previousValue = (null === (_previousValue = previousValue) || void 0 === _previousValue ? void 0 : _previousValue.map((item) => this._convertToDate(item))) || [];
    this._updateViewsValue(value2);
    this.updateAriaSelected(value2, previousValue);
    if (!this._currentDateChanged) {
      this.calendar._initCurrentDate();
    }
    this._currentDateChanged = false;
  }
  _isDateDisabled(date) {
    var min = this.calendar._dateOption("min");
    var max = this.calendar._dateOption("max");
    var isLessThanMin = isDefined(min) && date < min && !date_default.sameDate(min, date);
    var isBiggerThanMax = isDefined(max) && date > max && !date_default.sameDate(max, date);
    return this.calendar._view.isDateDisabled(date) || isLessThanMin || isBiggerThanMax;
  }
  _getLowestDateInArray(dates) {
    if (dates.length) {
      return new Date(Math.min(...dates));
    }
  }
  _convertToDate(value2) {
    return this.calendar._convertToDate(value2);
  }
  _isMaxZoomLevel() {
    return this.calendar._isMaxZoomLevel();
  }
  _updateViewsOption(optionName, optionValue) {
    this.calendar._updateViewsOption(optionName, optionValue);
  }
  _updateViewsValue(value2) {
    this._updateViewsOption("value", value2);
  }
  _updateCurrentDate(value2) {
    this.calendar.option("currentDate", null !== value2 && void 0 !== value2 ? value2 : /* @__PURE__ */ new Date());
  }
  _shouldHandleWeekNumberClick() {
    var {
      selectionMode,
      selectWeekOnClick
    } = this.calendar.option();
    return selectWeekOnClick && "single" !== selectionMode;
  }
};
var ui_calendar_selection_strategy_default = CalendarSelectionStrategy;

// node_modules/devextreme/esm/ui/calendar/ui.calendar.single.selection.strategy.js
var CalendarSingleSelectionStrategy = class extends ui_calendar_selection_strategy_default {
  constructor(component) {
    super(component);
    this.NAME = "SingleSelection";
  }
  getViewOptions() {
    return {
      value: this.dateOption("value"),
      range: [],
      selectionMode: "single"
    };
  }
  selectValue(selectedValue, e) {
    this.skipNavigate();
    this.dateValue(selectedValue, e);
  }
  updateAriaSelected(value2, previousValue) {
    var _value, _previousValue;
    null !== (_value = value2) && void 0 !== _value ? _value : value2 = [this.dateOption("value")];
    null !== (_previousValue = previousValue) && void 0 !== _previousValue ? _previousValue : previousValue = [];
    super.updateAriaSelected(value2, previousValue);
  }
  getDefaultCurrentDate() {
    return this.dateOption("value");
  }
  restoreValue() {
    this.calendar.option("value", null);
  }
  _updateViewsValue(value2) {
    this._updateViewsOption("value", value2[0]);
  }
};
var ui_calendar_single_selection_strategy_default = CalendarSingleSelectionStrategy;

// node_modules/devextreme/esm/ui/calendar/ui.calendar.multiple.selection.strategy.js
var CalendarMultiSelectionStrategy = class extends ui_calendar_selection_strategy_default {
  constructor(component) {
    super(component);
    this.NAME = "MultiSelection";
  }
  getViewOptions() {
    return {
      value: this.dateOption("value"),
      range: [],
      selectionMode: "multi",
      onWeekNumberClick: this._shouldHandleWeekNumberClick() ? this._weekNumberClickHandler.bind(this) : null
    };
  }
  selectValue(selectedValue, e) {
    var value2 = [...this.dateOption("value")];
    var alreadySelectedIndex = value2.findIndex((date) => (null === date || void 0 === date ? void 0 : date.toDateString()) === selectedValue.toDateString());
    if (alreadySelectedIndex > -1) {
      value2.splice(alreadySelectedIndex, 1);
    } else {
      value2.push(selectedValue);
    }
    this.skipNavigate();
    this._updateCurrentDate(selectedValue);
    this._currentDateChanged = true;
    this.dateValue(value2, e);
  }
  updateAriaSelected(value2, previousValue) {
    var _value, _previousValue;
    null !== (_value = value2) && void 0 !== _value ? _value : value2 = this.dateOption("value");
    null !== (_previousValue = previousValue) && void 0 !== _previousValue ? _previousValue : previousValue = [];
    super.updateAriaSelected(value2, previousValue);
  }
  getDefaultCurrentDate() {
    var dates = this.dateOption("value").filter((value2) => value2);
    return this._getLowestDateInArray(dates);
  }
  restoreValue() {
    this.calendar.option("value", []);
  }
  _weekNumberClickHandler(_ref) {
    var {
      rowDates,
      event
    } = _ref;
    var selectedDates = rowDates.filter((date) => !this._isDateDisabled(date));
    this.dateValue(selectedDates, event);
  }
};
var ui_calendar_multiple_selection_strategy_default = CalendarMultiSelectionStrategy;

// node_modules/devextreme/esm/ui/calendar/ui.calendar.range.selection.strategy.js
var DAY_INTERVAL2 = 864e5;
var CalendarRangeSelectionStrategy = class extends ui_calendar_selection_strategy_default {
  constructor(component) {
    super(component);
    this.NAME = "RangeSelection";
  }
  getViewOptions() {
    var value2 = this._getValue();
    var range = this._getDaysInRange(value2[0], value2[1]);
    return {
      value: value2,
      range,
      selectionMode: "range",
      onCellHover: this._cellHoverHandler.bind(this),
      onWeekNumberClick: this._shouldHandleWeekNumberClick() ? this._weekNumberClickHandler.bind(this) : null
    };
  }
  selectValue(selectedValue, e) {
    var [startDate, endDate] = this._getValue();
    this.skipNavigate();
    this._updateCurrentDate(selectedValue);
    this._currentDateChanged = true;
    if (true === this.calendar.option("_allowChangeSelectionOrder")) {
      this.calendar._valueSelected = true;
      if ("startDate" === this.calendar.option("_currentSelection")) {
        if (this.calendar._convertToDate(selectedValue) > this.calendar._convertToDate(endDate)) {
          this.dateValue([selectedValue, null], e);
        } else {
          this.dateValue([selectedValue, endDate], e);
        }
      } else if (this.calendar._convertToDate(selectedValue) >= this.calendar._convertToDate(startDate)) {
        this.dateValue([startDate, selectedValue], e);
      } else {
        this.dateValue([selectedValue, null], e);
      }
    } else if (!startDate || endDate) {
      this.dateValue([selectedValue, null], e);
    } else {
      this.dateValue(startDate < selectedValue ? [startDate, selectedValue] : [selectedValue, startDate], e);
    }
  }
  updateAriaSelected(value2, previousValue) {
    var _value, _previousValue;
    null !== (_value = value2) && void 0 !== _value ? _value : value2 = this._getValue();
    null !== (_previousValue = previousValue) && void 0 !== _previousValue ? _previousValue : previousValue = [];
    super.updateAriaSelected(value2, previousValue);
  }
  processValueChanged(value2, previousValue) {
    super.processValueChanged(value2, previousValue);
    var range = this._getRange();
    this._updateViewsOption("range", range);
  }
  getDefaultCurrentDate() {
    var {
      _allowChangeSelectionOrder,
      _currentSelection
    } = this.calendar.option();
    var value2 = this.dateOption("value");
    if (_allowChangeSelectionOrder) {
      if ("startDate" === _currentSelection && value2[0]) {
        return value2[0];
      }
      if ("endDate" === _currentSelection && value2[1]) {
        return value2[1];
      }
    }
    var dates = value2.filter((value3) => value3);
    return this._getLowestDateInArray(dates);
  }
  restoreValue() {
    this.calendar.option("value", [null, null]);
  }
  _getValue() {
    var value2 = this.dateOption("value");
    if (!value2.length) {
      return value2;
    }
    var [startDate, endDate] = value2;
    if (startDate && endDate && startDate > endDate) {
      [startDate, endDate] = [endDate, startDate];
    }
    return [startDate, endDate];
  }
  _getRange() {
    var [startDate, endDate] = this._getValue();
    return this._getDaysInRange(startDate, endDate);
  }
  _getDaysInRange(startDate, endDate) {
    if (!startDate || !endDate) {
      return [];
    }
    var {
      currentDate,
      viewsCount
    } = this.calendar.option();
    var isAdditionalViewDate = this.calendar._isAdditionalViewDate(currentDate);
    var firstDateInViews = date_default.getFirstMonthDate(date_default.addDateInterval(currentDate, "month", isAdditionalViewDate ? -2 : -1));
    var lastDateInViews = date_default.getLastMonthDate(date_default.addDateInterval(currentDate, "month", isAdditionalViewDate ? 1 : viewsCount));
    var rangeStartDate = new Date(Math.max(firstDateInViews, startDate));
    var rangeEndDate = new Date(Math.min(lastDateInViews, endDate));
    return [...date_default.getDatesOfInterval(rangeStartDate, rangeEndDate, DAY_INTERVAL2), rangeEndDate];
  }
  _cellHoverHandler(e) {
    var isMaxZoomLevel = this._isMaxZoomLevel();
    var [startDate, endDate] = this._getValue();
    var {
      _allowChangeSelectionOrder,
      _currentSelection
    } = this.calendar.option();
    if (isMaxZoomLevel) {
      var skipHoveredRange = _allowChangeSelectionOrder && "startDate" === _currentSelection;
      if (startDate && !endDate && !skipHoveredRange) {
        if (e.value > startDate) {
          this._updateViewsOption("hoveredRange", this._getDaysInRange(startDate, e.value));
          return;
        }
      } else if (!startDate && endDate && !(_allowChangeSelectionOrder && "endDate" === _currentSelection)) {
        if (e.value < endDate) {
          this._updateViewsOption("hoveredRange", this._getDaysInRange(e.value, endDate));
          return;
        }
      } else if (startDate && endDate) {
        if ("startDate" === _currentSelection && e.value < startDate) {
          this._updateViewsOption("hoveredRange", this._getDaysInRange(e.value, startDate));
          return;
        } else if ("endDate" === _currentSelection && e.value > endDate) {
          this._updateViewsOption("hoveredRange", this._getDaysInRange(endDate, e.value));
          return;
        }
      }
      this._updateViewsOption("hoveredRange", []);
    }
  }
  _weekNumberClickHandler(_ref) {
    var {
      rowDates,
      event
    } = _ref;
    var selectedDates = rowDates.filter((date) => !this._isDateDisabled(date));
    var value2 = selectedDates.length ? [selectedDates[0], selectedDates[selectedDates.length - 1]] : [null, null];
    this.dateValue(value2, event);
  }
};
var ui_calendar_range_selection_strategy_default = CalendarRangeSelectionStrategy;

// node_modules/devextreme/esm/ui/calendar/ui.calendar.js
var CALENDAR_CLASS = "dx-calendar";
var CALENDAR_BODY_CLASS = "dx-calendar-body";
var CALENDAR_CELL_CLASS2 = "dx-calendar-cell";
var CALENDAR_FOOTER_CLASS = "dx-calendar-footer";
var CALENDAR_TODAY_BUTTON_CLASS = "dx-calendar-today-button";
var CALENDAR_HAS_FOOTER_CLASS = "dx-calendar-with-footer";
var CALENDAR_VIEWS_WRAPPER_CLASS = "dx-calendar-views-wrapper";
var CALENDAR_VIEW_CLASS = "dx-calendar-view";
var CALENDAR_MULTIVIEW_CLASS = "dx-calendar-multiview";
var CALENDAR_RANGE_CLASS = "dx-calendar-range";
var GESTURE_COVER_CLASS = "dx-gesture-cover";
var ANIMATION_DURATION_SHOW_VIEW = 250;
var POP_ANIMATION_FROM = 0.6;
var POP_ANIMATION_TO = 1;
var CALENDAR_INPUT_STANDARD_PATTERN = "yyyy-MM-dd";
var CALENDAR_DATE_VALUE_KEY2 = "dxDateValueKey";
var CALENDAR_DXHOVEREND_EVENT_NAME = addNamespace2(HOVEREND, "dxCalendar");
var LEVEL_COMPARE_MAP = {
  month: 3,
  year: 2,
  decade: 1,
  century: 0
};
var ZOOM_LEVEL = {
  MONTH: "month",
  YEAR: "year",
  DECADE: "decade",
  CENTURY: "century"
};
var SELECTION_STRATEGIES = {
  SingleSelection: ui_calendar_single_selection_strategy_default,
  MultipleSelection: ui_calendar_multiple_selection_strategy_default,
  RangeSelection: ui_calendar_range_selection_strategy_default
};
var Calendar = editor_default.inherit({
  _activeStateUnit: "." + CALENDAR_CELL_CLASS2,
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      hoverStateEnabled: true,
      activeStateEnabled: true,
      currentDate: /* @__PURE__ */ new Date(),
      value: null,
      dateSerializationFormat: void 0,
      min: new Date(1e3, 0),
      max: new Date(3e3, 0),
      firstDayOfWeek: void 0,
      viewsCount: 1,
      zoomLevel: ZOOM_LEVEL.MONTH,
      maxZoomLevel: ZOOM_LEVEL.MONTH,
      minZoomLevel: ZOOM_LEVEL.CENTURY,
      selectionMode: "single",
      selectWeekOnClick: true,
      showTodayButton: false,
      showWeekNumbers: false,
      weekNumberRule: "auto",
      cellTemplate: "cell",
      disabledDates: null,
      onCellClick: null,
      onContouredChanged: null,
      skipFocusCheck: false,
      _todayDate: () => /* @__PURE__ */ new Date()
    });
  },
  _defaultOptionsRules: function() {
    return this.callBase().concat([{
      device: function() {
        return "desktop" === devices_default.real().deviceType && !devices_default.isSimulator();
      },
      options: {
        focusStateEnabled: true
      }
    }]);
  },
  _supportedKeys: function() {
    return extend(this.callBase(), {
      rightArrow: function(e) {
        e.preventDefault();
        if (isCommandKeyPressed(e)) {
          this._waitRenderView(1);
        } else {
          this._moveCurrentDateByOffset(1 * this._getRtlCorrection());
        }
      },
      leftArrow: function(e) {
        e.preventDefault();
        if (isCommandKeyPressed(e)) {
          this._waitRenderView(-1);
        } else {
          this._moveCurrentDateByOffset(-1 * this._getRtlCorrection());
        }
      },
      upArrow: function(e) {
        e.preventDefault();
        if (isCommandKeyPressed(e)) {
          this._navigateUp();
        } else {
          if (fx_default.isAnimating(this._view.$element())) {
            return;
          }
          this._moveCurrentDateByOffset(-1 * this._view.option("colCount"));
        }
      },
      downArrow: function(e) {
        e.preventDefault();
        if (isCommandKeyPressed(e)) {
          this._navigateDown();
        } else {
          if (fx_default.isAnimating(this._view.$element())) {
            return;
          }
          this._moveCurrentDateByOffset(1 * this._view.option("colCount"));
        }
      },
      home: function(e) {
        e.preventDefault();
        var zoomLevel = this.option("zoomLevel");
        var currentDate = this.option("currentDate");
        var min = this._dateOption("min");
        if (this._view.isDateDisabled(currentDate)) {
          return;
        }
        var date = date_default.sameView(zoomLevel, currentDate, min) ? min : date_default.getViewFirstCellDate(zoomLevel, currentDate);
        this._moveToClosestAvailableDate(date);
      },
      end: function(e) {
        e.preventDefault();
        var zoomLevel = this.option("zoomLevel");
        var currentDate = this.option("currentDate");
        var max = this._dateOption("max");
        if (this._view.isDateDisabled(currentDate)) {
          return;
        }
        var date = date_default.sameView(zoomLevel, currentDate, max) ? max : date_default.getViewLastCellDate(zoomLevel, currentDate);
        this._moveToClosestAvailableDate(date);
      },
      pageUp: function(e) {
        e.preventDefault();
        this._waitRenderView(-1 * this._getRtlCorrection());
      },
      pageDown: function(e) {
        e.preventDefault();
        this._waitRenderView(1 * this._getRtlCorrection());
      },
      tab: noop2,
      enter: this._enterKeyHandler
    });
  },
  _enterKeyHandler: function(e) {
    if (!this._isMaxZoomLevel()) {
      this._navigateDown();
    } else if (!this._view.isDateDisabled(this.option("currentDate"))) {
      var value2 = this._updateTimeComponent(this.option("currentDate"));
      this._selectionStrategy.selectValue(value2, e);
    }
  },
  _getSerializationFormat: function(optionName) {
    var value2 = this.option(optionName || "value");
    if (this.option("dateSerializationFormat")) {
      return this.option("dateSerializationFormat");
    }
    if (isNumeric(value2)) {
      return "number";
    }
    if (!isString(value2)) {
      return;
    }
    return date_serialization_default.getDateSerializationFormat(value2);
  },
  _convertToDate: function(value2) {
    return date_serialization_default.deserializeDate(value2);
  },
  _dateValue: function(value2, event) {
    if (event) {
      if ("keydown" === event.type) {
        var cellElement = this._view._getContouredCell().get(0);
        event.target = cellElement;
      }
      this._saveValueChangeEvent(event);
    }
    this._dateOption("value", value2);
  },
  _dateOption: function(optionName, optionValue) {
    var isArray2 = "value" === optionName && !this._isSingleMode();
    var value2 = this.option("value");
    if (1 === arguments.length) {
      return isArray2 ? (null !== value2 && void 0 !== value2 ? value2 : []).map((value3) => this._convertToDate(value3)) : this._convertToDate(this.option(optionName));
    }
    var serializationFormat = this._getSerializationFormat(optionName);
    var serializedValue = isArray2 ? (null === optionValue || void 0 === optionValue ? void 0 : optionValue.map((value3) => date_serialization_default.serializeDate(value3, serializationFormat))) || [] : date_serialization_default.serializeDate(optionValue, serializationFormat);
    this.option(optionName, serializedValue);
  },
  _isSingleMode: function() {
    return "single" === this.option("selectionMode");
  },
  _shiftDate: function(zoomLevel, date, offset2, reverse) {
    switch (zoomLevel) {
      case ZOOM_LEVEL.MONTH:
        date.setDate(date.getDate() + offset2 * reverse);
        break;
      case ZOOM_LEVEL.YEAR:
        date.setMonth(date.getMonth() + offset2 * reverse);
        break;
      case ZOOM_LEVEL.DECADE:
        date.setFullYear(date.getFullYear() + offset2 * reverse);
        break;
      case ZOOM_LEVEL.CENTURY:
        date.setFullYear(date.getFullYear() + 10 * offset2 * reverse);
    }
  },
  _moveCurrentDateByOffset: function(offset2) {
    var baseDate = this.option("currentDate");
    var currentDate = new Date(baseDate);
    var zoomLevel = this.option("zoomLevel");
    this._shiftDate(zoomLevel, currentDate, offset2, 1);
    var maxDate = this._getMaxDate();
    var minDate = this._getMinDate();
    var isDateForwardInNeighborView = this._areDatesInNeighborView(zoomLevel, currentDate, baseDate);
    var isDateForwardInRange = inRange(currentDate, minDate, maxDate) && isDateForwardInNeighborView;
    var dateForward = new Date(currentDate);
    while (isDateForwardInRange) {
      if (!this._view.isDateDisabled(dateForward)) {
        currentDate = dateForward;
        break;
      }
      this._shiftDate(zoomLevel, dateForward, offset2, 1);
      isDateForwardInNeighborView = this._areDatesInNeighborView(zoomLevel, dateForward, baseDate);
      isDateForwardInRange = inRange(dateForward, minDate, maxDate) && isDateForwardInNeighborView;
    }
    if (this._view.isDateDisabled(baseDate) || this._view.isDateDisabled(currentDate)) {
      var direction = offset2 > 0 ? 1 : -1;
      var isViewDisabled = 1 === direction ? this._isNextViewDisabled() : this._isPrevViewDisabled();
      if (!isViewDisabled) {
        this._waitRenderView(direction);
      } else {
        this._moveToClosestAvailableDate(currentDate);
      }
    } else {
      this._skipNavigate = true;
      this.option("currentDate", currentDate);
    }
  },
  _isNextViewDisabled() {
    return this._navigator._nextButton.option("disabled");
  },
  _isPrevViewDisabled() {
    return this._navigator._prevButton.option("disabled");
  },
  _areDatesInSameView(zoomLevel, date1, date2) {
    switch (zoomLevel) {
      case ZOOM_LEVEL.MONTH:
        return date1.getMonth() === date2.getMonth();
      case ZOOM_LEVEL.YEAR:
        return date1.getYear() === date2.getYear();
      case ZOOM_LEVEL.DECADE:
        return parseInt(date1.getYear() / 10) === parseInt(date2.getYear() / 10);
      case ZOOM_LEVEL.CENTURY:
        return parseInt(date1.getYear() / 100) === parseInt(date2.getYear() / 100);
    }
  },
  _areDatesInNeighborView(zoomLevel, date1, date2) {
    switch (zoomLevel) {
      case ZOOM_LEVEL.MONTH:
        return (a = date1.getMonth(), b = date2.getMonth(), abs3 = Math.abs(a - b), Math.min(abs3, 12 - abs3)) <= 1;
      case ZOOM_LEVEL.YEAR:
        return Math.abs(date1.getYear() - date2.getYear()) <= 1;
      case ZOOM_LEVEL.DECADE:
        return Math.abs(date1.getYear() - date2.getYear()) <= 10;
      case ZOOM_LEVEL.CENTURY:
        return Math.abs(date1.getYear() - date2.getYear()) <= 100;
    }
    var a, b, abs3;
  },
  _moveToClosestAvailableDate: function() {
    var baseDate = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.option("currentDate");
    var currentDate = new Date(baseDate);
    var zoomLevel = this.option("zoomLevel");
    var isCurrentDateAvailable = !this._isDateNotAvailable(currentDate);
    var isDateForwardAvailable = isCurrentDateAvailable;
    var isDateBackwardAvailable = isCurrentDateAvailable;
    var isDateForwardInStartView;
    var isDateBackwardInStartView;
    var dateForward = new Date(currentDate);
    var dateBackward = new Date(currentDate);
    do {
      if (isDateForwardAvailable) {
        currentDate = dateForward;
        break;
      }
      if (isDateBackwardAvailable) {
        currentDate = dateBackward;
        break;
      }
      this._shiftDate(zoomLevel, dateForward, 1, 1);
      this._shiftDate(zoomLevel, dateBackward, 1, -1);
      isDateForwardInStartView = this._areDatesInSameView(zoomLevel, dateForward, baseDate);
      isDateBackwardInStartView = this._areDatesInSameView(zoomLevel, dateBackward, baseDate);
      isDateForwardAvailable = isDateForwardInStartView && !this._isDateNotAvailable(dateForward);
      isDateBackwardAvailable = isDateBackwardInStartView && !this._isDateNotAvailable(dateBackward);
    } while (isDateForwardInStartView || isDateBackwardInStartView);
    this.option("currentDate", currentDate);
  },
  _isDateNotAvailable: function(date) {
    var maxDate = this._getMaxDate();
    var minDate = this._getMinDate();
    return !inRange(date, minDate, maxDate) || this._view.isDateDisabled(date);
  },
  _init: function() {
    this.callBase();
    this._initSelectionStrategy();
    this._correctZoomLevel();
    this._initCurrentDate();
    this._initActions();
  },
  _initSelectionStrategy: function() {
    var strategyName = this._getSelectionStrategyName();
    var strategy4 = SELECTION_STRATEGIES[strategyName];
    if (!this._selectionStrategy || this._selectionStrategy.NAME !== strategyName) {
      this._selectionStrategy = new strategy4(this);
    }
  },
  _refreshSelectionStrategy: function() {
    this._initSelectionStrategy();
    this._selectionStrategy.restoreValue();
    this._refresh();
  },
  _getSelectionStrategyName: function() {
    var selectionMode = this.option("selectionMode");
    switch (selectionMode) {
      case "multiple":
        return "MultipleSelection";
      case "range":
        return "RangeSelection";
      default:
        return "SingleSelection";
    }
  },
  _correctZoomLevel: function() {
    var minZoomLevel = this.option("minZoomLevel");
    var maxZoomLevel = this.option("maxZoomLevel");
    var zoomLevel = this.option("zoomLevel");
    if (LEVEL_COMPARE_MAP[maxZoomLevel] < LEVEL_COMPARE_MAP[minZoomLevel]) {
      return;
    }
    if (LEVEL_COMPARE_MAP[zoomLevel] > LEVEL_COMPARE_MAP[maxZoomLevel]) {
      this.option("zoomLevel", maxZoomLevel);
    } else if (LEVEL_COMPARE_MAP[zoomLevel] < LEVEL_COMPARE_MAP[minZoomLevel]) {
      this.option("zoomLevel", minZoomLevel);
    }
  },
  _initCurrentDate: function() {
    var _this$_getNormalizedD;
    var currentDate = null !== (_this$_getNormalizedD = this._getNormalizedDate(this._selectionStrategy.getDefaultCurrentDate())) && void 0 !== _this$_getNormalizedD ? _this$_getNormalizedD : this._getNormalizedDate(this.option("currentDate"));
    this.option("currentDate", currentDate);
  },
  _getNormalizedDate: function(date) {
    date = date_default.normalizeDate(date, this._getMinDate(), this._getMaxDate());
    return isDefined(date) ? this._getDate(date) : date;
  },
  _initActions: function() {
    this._cellClickAction = this._createActionByOption("onCellClick");
    this._onContouredChanged = this._createActionByOption("onContouredChanged");
  },
  _initTemplates: function() {
    this._templateManager.addDefaultTemplates({
      cell: new FunctionTemplate(function(options2) {
        var data3 = options2.model;
        renderer_default(options2.container).append(renderer_default("<span>").text(data3 && data3.text || String(data3)));
      })
    });
    this.callBase();
  },
  _updateCurrentDate: function(date) {
    if (fx_default.isAnimating(this._$viewsWrapper)) {
      fx_default.stop(this._$viewsWrapper, true);
    }
    var min = this._getMinDate();
    var max = this._getMaxDate();
    if (min > max) {
      this.option("currentDate", /* @__PURE__ */ new Date());
      return;
    }
    var normalizedDate = this._getNormalizedDate(date);
    if (date.getTime() !== normalizedDate.getTime()) {
      this.option("currentDate", new Date(normalizedDate));
      return;
    }
    var offset2 = this._getViewsOffset(this._view.option("date"), normalizedDate);
    if (0 !== offset2 && !this._isMaxZoomLevel() && this._isOtherViewCellClicked) {
      offset2 = 0;
    }
    if (this._view && 0 !== offset2 && !this._suppressNavigation) {
      if (this._additionalView) {
        if (offset2 > 2 || offset2 < -1) {
          this._refreshViews();
          this._setViewContoured(normalizedDate);
          this._updateAriaId(normalizedDate);
          this._renderNavigator();
        } else if (1 === offset2 && this._skipNavigate) {
          this._setViewContoured(normalizedDate);
          this._updateAriaId(normalizedDate);
        } else {
          this._navigate(offset2, normalizedDate);
        }
      } else {
        this._navigate(offset2, normalizedDate);
      }
    } else {
      this._renderNavigator();
      this._setViewContoured(normalizedDate);
      this._updateAriaId(normalizedDate);
    }
    this._skipNavigate = false;
  },
  _isAdditionalViewDate(date) {
    if (!this._additionalView) {
      return false;
    }
    return date >= this._additionalView._getFirstAvailableDate();
  },
  _getActiveView: function(date) {
    return this._isAdditionalViewDate(date) ? this._additionalView : this._view;
  },
  _setViewContoured: function(date) {
    if (this.option("skipFocusCheck") || renderer_default(this._$viewsWrapper).is(":focus")) {
      var _this$_additionalView;
      this._view.option("contouredDate", null);
      null === (_this$_additionalView = this._additionalView) || void 0 === _this$_additionalView ? void 0 : _this$_additionalView.option("contouredDate", null);
      var view = this._isAdditionalViewDate(date) ? this._additionalView : this._view;
      view.option("contouredDate", date);
    }
  },
  _getMinDate: function() {
    var _rangeMin = this.option("_rangeMin");
    if (_rangeMin) {
      return _rangeMin;
    }
    if (this.min) {
      return this.min;
    }
    this.min = this._dateOption("min") || new Date(1e3, 0);
    return this.min;
  },
  _getMaxDate: function() {
    var _rangeMax = this.option("_rangeMax");
    if (_rangeMax) {
      return _rangeMax;
    }
    if (this.max) {
      return this.max;
    }
    this.max = this._dateOption("max") || new Date(3e3, 0);
    return this.max;
  },
  _getViewsOffset: function(startDate, endDate) {
    var zoomLevel = this.option("zoomLevel");
    if (zoomLevel === ZOOM_LEVEL.MONTH) {
      return this._getMonthsOffset(startDate, endDate);
    }
    var zoomCorrection;
    switch (zoomLevel) {
      case ZOOM_LEVEL.CENTURY:
        zoomCorrection = 100;
        break;
      case ZOOM_LEVEL.DECADE:
        zoomCorrection = 10;
        break;
      default:
        zoomCorrection = 1;
    }
    return parseInt(endDate.getFullYear() / zoomCorrection) - parseInt(startDate.getFullYear() / zoomCorrection);
  },
  _getMonthsOffset: function(startDate, endDate) {
    var yearOffset = endDate.getFullYear() - startDate.getFullYear();
    var monthOffset = endDate.getMonth() - startDate.getMonth();
    return 12 * yearOffset + monthOffset;
  },
  _waitRenderView: function(offset2) {
    if (this._alreadyViewRender) {
      return;
    }
    this._alreadyViewRender = true;
    var date = this._getDateByOffset(offset2 * this._getRtlCorrection());
    this._moveToClosestAvailableDate(date);
    this._waitRenderViewTimeout = setTimeout(() => {
      this._alreadyViewRender = false;
    });
  },
  _getRtlCorrection: function() {
    return this.option("rtlEnabled") ? -1 : 1;
  },
  _getDateByOffset: function(offset2, date) {
    var _date;
    date = this._getDate(null !== (_date = date) && void 0 !== _date ? _date : this.option("currentDate"));
    var currentDay = date.getDate();
    var difference = date_default.getDifferenceInMonth(this.option("zoomLevel")) * offset2;
    date.setDate(1);
    date.setMonth(date.getMonth() + difference);
    var lastDay = date_default.getLastMonthDate(date).getDate();
    date.setDate(currentDay > lastDay ? lastDay : currentDay);
    return date;
  },
  _focusTarget: function() {
    return this._$viewsWrapper;
  },
  _focusEventTarget() {
    return this.$element();
  },
  _initMarkup: function() {
    this._renderSubmitElement();
    var $element = this.$element();
    $element.addClass(CALENDAR_CLASS);
    $element.toggleClass(CALENDAR_RANGE_CLASS, "range" === this.option("selectionMode"));
    this._renderBody();
    $element.append(this.$body);
    this._renderViews();
    this._renderNavigator();
    this.callBase();
    this._renderEvents();
    $element.prepend(this._navigator.$element());
    this._renderSwipeable();
    this._renderFooter();
    this._selectionStrategy.updateAriaSelected();
    this._updateAriaId();
    this._updateNavigatorLabels();
    this.setAria("role", "application");
    this._moveToClosestAvailableDate();
  },
  _render: function() {
    this.callBase();
    this._setViewContoured(this.option("currentDate"));
  },
  _renderBody: function() {
    if (!this._$viewsWrapper) {
      this.$body = renderer_default("<div>").addClass(CALENDAR_BODY_CLASS);
      this._$viewsWrapper = renderer_default("<div>").addClass(CALENDAR_VIEWS_WRAPPER_CLASS);
      this.$body.append(this._$viewsWrapper);
    }
  },
  _getKeyboardListeners() {
    return this.callBase().concat([this._view]);
  },
  _renderViews: function() {
    this.$element().addClass(CALENDAR_VIEW_CLASS + "-" + this.option("zoomLevel"));
    var {
      currentDate,
      viewsCount
    } = this.option();
    this.$element().toggleClass(CALENDAR_MULTIVIEW_CLASS, viewsCount > 1);
    this._view = this._renderSpecificView(currentDate);
    if (hasWindow()) {
      var beforeDate = this._getDateByOffset(-1, currentDate);
      this._beforeView = this._isViewAvailable(beforeDate) ? this._renderSpecificView(beforeDate) : null;
      var afterDate = this._getDateByOffset(viewsCount, currentDate);
      afterDate.setDate(1);
      this._afterView = this._isViewAvailable(afterDate) ? this._renderSpecificView(afterDate) : null;
    }
    if (viewsCount > 1) {
      this._additionalView = this._renderSpecificView(this._getDateByOffset(1, currentDate));
    }
    this._translateViews();
  },
  _renderSpecificView: function(date) {
    var {
      zoomLevel
    } = this.option();
    var specificView = ui_calendar_views_default[zoomLevel];
    var $view = renderer_default("<div>").appendTo(this._$viewsWrapper);
    var config3 = this._viewConfig(date);
    var view = this._createComponent($view, specificView, config3);
    return view;
  },
  _viewConfig: function(date) {
    var _this$option;
    var disabledDates = this.option("disabledDates");
    disabledDates = isFunction(disabledDates) ? this._injectComponent(disabledDates.bind(this)) : disabledDates;
    return _extends({}, this._selectionStrategy.getViewOptions(), {
      date,
      min: this._getMinDate(),
      max: this._getMaxDate(),
      firstDayOfWeek: null !== (_this$option = this.option("firstDayOfWeek")) && void 0 !== _this$option ? _this$option : date_default3.firstDayOfWeekIndex(),
      showWeekNumbers: this.option("showWeekNumbers"),
      selectWeekOnClick: this.option("selectWeekOnClick"),
      weekNumberRule: this.option("weekNumberRule"),
      zoomLevel: this.option("zoomLevel"),
      tabIndex: void 0,
      focusStateEnabled: this.option("focusStateEnabled"),
      hoverStateEnabled: this.option("hoverStateEnabled"),
      disabledDates,
      onCellClick: this._cellClickHandler.bind(this),
      cellTemplate: this._getTemplateByOption("cellTemplate"),
      allowValueSelection: this._isMaxZoomLevel(),
      _todayDate: this.option("_todayDate")
    });
  },
  _renderEvents() {
    events_engine_default.off(this._$viewsWrapper, CALENDAR_DXHOVEREND_EVENT_NAME);
    if ("range" === this.option("selectionMode")) {
      events_engine_default.on(this._$viewsWrapper, CALENDAR_DXHOVEREND_EVENT_NAME, null, (e) => {
        this._updateViewsOption("hoveredRange", []);
      });
    }
  },
  _injectComponent: function(func) {
    var that = this;
    return function(params) {
      extend(params, {
        component: that
      });
      return func(params);
    };
  },
  _isViewAvailable: function(date) {
    var zoomLevel = this.option("zoomLevel");
    var min = date_default.getViewMinBoundaryDate(zoomLevel, this._getMinDate());
    var max = date_default.getViewMaxBoundaryDate(zoomLevel, this._getMaxDate());
    return date_default.dateInRange(date, min, max);
  },
  _translateViews: function() {
    var {
      viewsCount
    } = this.option();
    move(this._view.$element(), {
      left: 0,
      top: 0
    });
    this._moveViewElement(this._beforeView, -1);
    this._moveViewElement(this._afterView, viewsCount);
    this._moveViewElement(this._additionalView, 1);
  },
  _moveViewElement(view, coefficient) {
    view && move(view.$element(), {
      left: this._getViewPosition(coefficient),
      top: 0
    });
  },
  _getViewPosition: function(coefficient) {
    var rtlCorrection = this.option("rtlEnabled") ? -1 : 1;
    return 100 * coefficient * rtlCorrection + "%";
  },
  _cellClickHandler: function(e) {
    var zoomLevel = this.option("zoomLevel");
    var nextView = date_default.getViewDown(zoomLevel);
    var isMaxZoomLevel = this._isMaxZoomLevel();
    if (nextView && !isMaxZoomLevel) {
      this._navigateDown(e.event.currentTarget);
    } else {
      var newValue = this._updateTimeComponent(e.value);
      this._selectionStrategy.selectValue(newValue, e.event);
      this._cellClickAction(e);
    }
  },
  _updateTimeComponent: function(date) {
    var result2 = new Date(date);
    var currentValue = this._dateOption("value");
    if (currentValue && this._isSingleMode()) {
      result2.setHours(currentValue.getHours());
      result2.setMinutes(currentValue.getMinutes());
      result2.setSeconds(currentValue.getSeconds());
      result2.setMilliseconds(currentValue.getMilliseconds());
    }
    return result2;
  },
  _isMaxZoomLevel: function() {
    return this.option("zoomLevel") === this.option("maxZoomLevel");
  },
  _navigateDown: function(cell) {
    var zoomLevel = this.option("zoomLevel");
    if (this._isMaxZoomLevel()) {
      return;
    }
    var nextView = date_default.getViewDown(zoomLevel);
    if (!nextView) {
      return;
    }
    var newCurrentDate = this._view.option("contouredDate") || this._view.option("date");
    if (cell) {
      newCurrentDate = renderer_default(cell).data(CALENDAR_DATE_VALUE_KEY2);
    }
    this._isOtherViewCellClicked = true;
    this.option("currentDate", newCurrentDate);
    this.option("zoomLevel", nextView);
    this._isOtherViewCellClicked = false;
    this._renderNavigator();
    this._animateShowView();
    this._moveToClosestAvailableDate();
    this._setViewContoured(this._getNormalizedDate(this.option("currentDate")));
  },
  _renderNavigator: function() {
    if (!this._navigator) {
      this._navigator = new ui_calendar_navigator_default(renderer_default("<div>"), this._navigatorConfig());
    }
    this._navigator.option("text", this._getViewsCaption(this._view, this._additionalView));
    this._updateButtonsVisibility();
  },
  _navigatorConfig: function() {
    var {
      focusStateEnabled,
      rtlEnabled
    } = this.option();
    return {
      text: this._getViewsCaption(this._view, this._additionalView),
      onClick: this._navigatorClickHandler.bind(this),
      onCaptionClick: this._navigateUp.bind(this),
      focusStateEnabled,
      rtlEnabled,
      tabIndex: void 0
    };
  },
  _navigatorClickHandler: function(e) {
    var {
      currentDate,
      viewsCount
    } = this.option();
    var offset2 = e.direction;
    if (viewsCount > 1) {
      var additionalViewActive = this._isAdditionalViewDate(currentDate);
      var shouldDoubleOffset = additionalViewActive && offset2 < 0 || !additionalViewActive && offset2 > 0;
      if (shouldDoubleOffset) {
        offset2 *= 2;
      }
    }
    var newCurrentDate = this._getDateByOffset(offset2, currentDate);
    this._moveToClosestAvailableDate(newCurrentDate);
  },
  _navigateUp: function() {
    var zoomLevel = this.option("zoomLevel");
    var nextView = date_default.getViewUp(zoomLevel);
    if (!nextView || this._isMinZoomLevel(zoomLevel)) {
      return;
    }
    this.option("zoomLevel", nextView);
    this._renderNavigator();
    this._animateShowView();
    this._moveToClosestAvailableDate();
    this._setViewContoured(this._getNormalizedDate(this.option("currentDate")));
  },
  _isMinZoomLevel: function(zoomLevel) {
    var min = this._getMinDate();
    var max = this._getMaxDate();
    return date_default.sameView(zoomLevel, min, max) || this.option("minZoomLevel") === zoomLevel;
  },
  _updateButtonsVisibility: function() {
    this._navigator.toggleButton("next", !isDefined(this._afterView));
    this._navigator.toggleButton("prev", !isDefined(this._beforeView));
  },
  _renderSwipeable: function() {
    if (!this._swipeable) {
      this._swipeable = this._createComponent(this.$element(), swipeable_default, {
        onStart: this._swipeStartHandler.bind(this),
        onUpdated: this._swipeUpdateHandler.bind(this),
        onEnd: this._swipeEndHandler.bind(this),
        itemSizeFunc: this._viewWidth.bind(this)
      });
    }
  },
  _swipeStartHandler: function(e) {
    fx_default.stop(this._$viewsWrapper, true);
    var {
      viewsCount
    } = this.option();
    this._toggleGestureCoverCursor("grabbing");
    e.event.maxLeftOffset = this._getRequiredView("next") ? 1 / viewsCount : 0;
    e.event.maxRightOffset = this._getRequiredView("prev") ? 1 / viewsCount : 0;
  },
  _toggleGestureCoverCursor: function(cursor) {
    renderer_default(".".concat(GESTURE_COVER_CLASS)).css("cursor", cursor);
  },
  _getRequiredView: function(name2) {
    var view;
    var isRtl = this.option("rtlEnabled");
    if ("next" === name2) {
      view = isRtl ? this._beforeView : this._afterView;
    } else if ("prev" === name2) {
      view = isRtl ? this._afterView : this._beforeView;
    }
    return view;
  },
  _swipeUpdateHandler: function(e) {
    var offset2 = e.event.offset;
    move(this._$viewsWrapper, {
      left: offset2 * this._viewWidth(),
      top: 0
    });
    this._updateNavigatorCaption(offset2);
  },
  _swipeEndHandler: function(e) {
    this._toggleGestureCoverCursor("auto");
    var {
      currentDate,
      rtlEnabled
    } = this.option();
    var targetOffset = e.event.targetOffset;
    var moveOffset = !targetOffset ? 0 : targetOffset / Math.abs(targetOffset);
    var isAdditionalViewActive = this._isAdditionalViewDate(currentDate);
    var shouldDoubleOffset = isAdditionalViewActive && (rtlEnabled ? -1 === moveOffset : 1 === moveOffset);
    if (0 === moveOffset) {
      this._animateWrapper(0, ANIMATION_DURATION_SHOW_VIEW);
      return;
    }
    var offset2 = -moveOffset * this._getRtlCorrection() * (shouldDoubleOffset ? 2 : 1);
    var date = this._getDateByOffset(offset2);
    if (this._isDateInInvalidRange(date)) {
      if (moveOffset >= 0) {
        date = new Date(this._getMinDate());
      } else {
        date = new Date(this._getMaxDate());
      }
    }
    this.option("currentDate", date);
  },
  _viewWidth: function() {
    if (!this._viewWidthValue) {
      this._viewWidthValue = getWidth(this.$element()) / this.option("viewsCount");
    }
    return this._viewWidthValue;
  },
  _updateNavigatorCaption: function(offset2) {
    offset2 *= this._getRtlCorrection();
    var isMultiView = this.option("viewsCount") > 1;
    var view;
    var additionalView;
    if (offset2 > 0.5 && this._beforeView) {
      view = this._beforeView;
      additionalView = isMultiView && this._view;
    } else if (offset2 < -0.5 && this._afterView) {
      view = isMultiView ? this._additionalView : this._afterView;
      additionalView = isMultiView ? this._afterView : null;
    } else {
      view = this._view;
      additionalView = isMultiView ? this._additionalView : null;
    }
    this._navigator.option("text", this._getViewsCaption(view, additionalView));
  },
  _getViewsCaption: function(view, additionalView) {
    var caption = view.getNavigatorCaption();
    var {
      viewsCount
    } = this.option();
    if (viewsCount > 1 && additionalView) {
      var additionalViewCaption = additionalView.getNavigatorCaption();
      caption = "".concat(caption, " - ").concat(additionalViewCaption);
    }
    return caption;
  },
  _isDateInInvalidRange: function(date) {
    if (this._view.isBoundary(date)) {
      return;
    }
    var min = this._getMinDate();
    var max = this._getMaxDate();
    var normalizedDate = date_default.normalizeDate(date, min, max);
    return normalizedDate === min || normalizedDate === max;
  },
  _renderFooter: function() {
    var showTodayButton = this.option("showTodayButton");
    if (showTodayButton) {
      var $todayButton = this._createComponent(renderer_default("<div>"), button_default, {
        focusStateEnabled: this.option("focusStateEnabled"),
        text: message_default.format("dxCalendar-todayButtonText"),
        onClick: (args) => {
          this._toTodayView(args);
        },
        type: isFluent() ? "normal" : "default",
        stylingMode: isFluent() ? "outlined" : "text",
        integrationOptions: {}
      }).$element().addClass(CALENDAR_TODAY_BUTTON_CLASS);
      this._$footer = renderer_default("<div>").addClass(CALENDAR_FOOTER_CLASS).append($todayButton);
      this.$element().append(this._$footer);
    }
    this.$element().toggleClass(CALENDAR_HAS_FOOTER_CLASS, showTodayButton);
  },
  _renderSubmitElement: function() {
    this._$submitElement = renderer_default("<input>").attr("type", "hidden").appendTo(this.$element());
    this._setSubmitValue(this.option("value"));
  },
  _setSubmitValue: function(value2) {
    var dateValue = this._convertToDate(value2);
    this._getSubmitElement().val(date_serialization_default.serializeDate(dateValue, CALENDAR_INPUT_STANDARD_PATTERN));
  },
  _getSubmitElement: function() {
    return this._$submitElement;
  },
  _animateShowView: function() {
    fx_default.stop(this._view.$element(), true);
    this._popAnimationView(this._view, POP_ANIMATION_FROM, POP_ANIMATION_TO, ANIMATION_DURATION_SHOW_VIEW);
    if (this.option("viewsCount") > 1) {
      fx_default.stop(this._additionalView.$element(), true);
      this._popAnimationView(this._additionalView, POP_ANIMATION_FROM, POP_ANIMATION_TO, ANIMATION_DURATION_SHOW_VIEW);
    }
  },
  _popAnimationView: function(view, from, to, duration) {
    return fx_default.animate(view.$element(), {
      type: "pop",
      from: {
        scale: from,
        opacity: from
      },
      to: {
        scale: to,
        opacity: to
      },
      duration
    });
  },
  _navigate: function(offset2, value2) {
    if (0 !== offset2 && 1 !== Math.abs(offset2) && this._isViewAvailable(value2)) {
      var newView = this._renderSpecificView(value2);
      if (offset2 > 0) {
        this._afterView && this._afterView.$element().remove();
        this._afterView = newView;
      } else {
        this._beforeView && this._beforeView.$element().remove();
        this._beforeView = newView;
      }
      this._translateViews();
    }
    var rtlCorrection = this._getRtlCorrection();
    var offsetSign = offset2 > 0 ? 1 : offset2 < 0 ? -1 : 0;
    var endPosition = -rtlCorrection * offsetSign * this._viewWidth();
    var viewsWrapperPosition = this._$viewsWrapper.position().left;
    if (viewsWrapperPosition !== endPosition) {
      if (this._preventViewChangeAnimation) {
        this._wrapperAnimationEndHandler(offset2, value2);
      } else {
        this._animateWrapper(endPosition, ANIMATION_DURATION_SHOW_VIEW).done(this._wrapperAnimationEndHandler.bind(this, offset2, value2));
      }
    }
  },
  _animateWrapper: function(to, duration) {
    return fx_default.animate(this._$viewsWrapper, {
      type: "slide",
      from: {
        left: this._$viewsWrapper.position().left
      },
      to: {
        left: to
      },
      duration
    });
  },
  _getDate: (value2) => new Date(value2),
  _toTodayView: function(args) {
    var today = /* @__PURE__ */ new Date();
    if (this._isMaxZoomLevel()) {
      this._selectionStrategy.selectValue(today, args.event);
      return;
    }
    this._preventViewChangeAnimation = true;
    this.option("zoomLevel", this.option("maxZoomLevel"));
    this._selectionStrategy.selectValue(today, args.event);
    this._animateShowView();
    this._preventViewChangeAnimation = false;
  },
  _wrapperAnimationEndHandler: function(offset2, newDate) {
    this._rearrangeViews(offset2);
    this._translateViews();
    this._resetLocation();
    this._renderNavigator();
    this._setViewContoured(newDate);
    this._updateAriaId(newDate);
    this._selectionStrategy.updateAriaSelected();
  },
  _rearrangeViews: function(offset2) {
    var _this$viewToRemoveKey;
    if (0 === offset2) {
      return;
    }
    var {
      viewsCount
    } = this.option();
    var viewOffset;
    var viewToCreateKey;
    var viewToRemoveKey;
    var viewBeforeCreateKey;
    var viewAfterRemoveKey;
    if (offset2 < 0) {
      viewOffset = 1;
      viewToCreateKey = "_beforeView";
      viewToRemoveKey = "_afterView";
      viewBeforeCreateKey = "_view";
      viewAfterRemoveKey = 1 === viewsCount ? "_view" : "_additionalView";
    } else {
      viewOffset = -1;
      viewToCreateKey = "_afterView";
      viewToRemoveKey = "_beforeView";
      viewBeforeCreateKey = 1 === viewsCount ? "_view" : "_additionalView";
      viewAfterRemoveKey = "_view";
    }
    if (!this[viewToCreateKey]) {
      return;
    }
    var destinationDate = this[viewToCreateKey].option("date");
    null === (_this$viewToRemoveKey = this[viewToRemoveKey]) || void 0 === _this$viewToRemoveKey ? void 0 : _this$viewToRemoveKey.$element().remove();
    this[viewToRemoveKey] = this._renderSpecificView(this._getDateByOffset(viewOffset * viewsCount, destinationDate));
    this[viewAfterRemoveKey].$element().remove();
    if (1 === viewsCount) {
      this[viewAfterRemoveKey] = this[viewToCreateKey];
    } else {
      this[viewAfterRemoveKey] = this[viewBeforeCreateKey];
      this[viewBeforeCreateKey] = this[viewToCreateKey];
    }
    var dateByOffset = this._getDateByOffset(-viewOffset, destinationDate);
    this[viewToCreateKey] = this._isViewAvailable(dateByOffset) ? this._renderSpecificView(dateByOffset) : null;
  },
  _resetLocation: function() {
    move(this._$viewsWrapper, {
      left: 0,
      top: 0
    });
  },
  _clean: function() {
    this.callBase();
    this._clearViewWidthCache();
    delete this._$viewsWrapper;
    delete this._navigator;
    delete this._$footer;
  },
  _clearViewWidthCache: function() {
    delete this._viewWidthValue;
  },
  _disposeViews: function() {
    this._view.$element().remove();
    this._beforeView && this._beforeView.$element().remove();
    this._additionalView && this._additionalView.$element().remove();
    this._afterView && this._afterView.$element().remove();
    delete this._view;
    delete this._additionalView;
    delete this._beforeView;
    delete this._afterView;
    delete this._skipNavigate;
  },
  _dispose: function() {
    clearTimeout(this._waitRenderViewTimeout);
    this.callBase();
  },
  _refreshViews: function() {
    this._resetActiveState();
    this._disposeViews();
    this._renderViews();
  },
  _visibilityChanged: function() {
    this._translateViews();
  },
  _shouldSkipFocusEvent(event) {
    var {
      target,
      relatedTarget
    } = event;
    return renderer_default(target).parents(".".concat(CALENDAR_CLASS)).length && renderer_default(relatedTarget).parents(".".concat(CALENDAR_CLASS)).length;
  },
  _focusInHandler: function(event) {
    if (renderer_default(event.target).is(this._$viewsWrapper)) {
      this._setViewContoured(this.option("currentDate"));
    }
    if (this._shouldSkipFocusEvent(event)) {
      return;
    }
    this.callBase.apply(this, arguments);
    this._toggleFocusClass(true, this.$element());
  },
  _focusOutHandler: function(event) {
    if (renderer_default(event.target).is(this._$viewsWrapper)) {
      var _this$_additionalView2;
      this._view.option("contouredDate", null);
      null === (_this$_additionalView2 = this._additionalView) || void 0 === _this$_additionalView2 ? void 0 : _this$_additionalView2.option("contouredDate", null);
    }
    if (this._shouldSkipFocusEvent(event)) {
      return;
    }
    this.callBase.apply(this, arguments);
    this._toggleFocusClass(false, this.$element());
  },
  _updateViewsOption: function(optionName, newValue) {
    var _this$_additionalView3, _this$_beforeView, _this$_afterView;
    this._view.option(optionName, newValue);
    null === (_this$_additionalView3 = this._additionalView) || void 0 === _this$_additionalView3 ? void 0 : _this$_additionalView3.option(optionName, newValue);
    null === (_this$_beforeView = this._beforeView) || void 0 === _this$_beforeView ? void 0 : _this$_beforeView.option(optionName, newValue);
    null === (_this$_afterView = this._afterView) || void 0 === _this$_afterView ? void 0 : _this$_afterView.option(optionName, newValue);
  },
  _setViewsMinOption: function(min) {
    this._restoreViewsMinMaxOptions();
    this.option("_rangeMin", this._convertToDate(min));
    this._updateViewsOption("min", this._getMinDate());
  },
  _setViewsMaxOption: function(max) {
    this._restoreViewsMinMaxOptions();
    this.option("_rangeMax", this._convertToDate(max));
    this._updateViewsOption("max", this._getMaxDate());
  },
  _restoreViewsMinMaxOptions: function() {
    this._resetActiveState();
    this.option({
      _rangeMin: null,
      _rangeMax: null
    });
    this._updateViewsOption("min", this._getMinDate());
    this._updateViewsOption("max", this._getMaxDate());
  },
  _updateNavigatorLabels: function() {
    var zoomLevel = this.option("zoomLevel");
    zoomLevel = zoomLevel.charAt(0).toUpperCase() + zoomLevel.slice(1);
    var captionButtonText = this._navigator._caption.option("text");
    var localizedPrevButtonLabel = message_default.format("dxCalendar-previous".concat(zoomLevel, "ButtonLabel"));
    var localizedCaptionLabel = message_default.format("dxCalendar-caption".concat(zoomLevel, "Label"));
    var localizedNextButtonLabel = message_default.format("dxCalendar-next".concat(zoomLevel, "ButtonLabel"));
    this.setAria("label", localizedPrevButtonLabel, this._navigator._prevButton.$element());
    this.setAria("label", "".concat(captionButtonText, ". ").concat(localizedCaptionLabel), this._navigator._caption.$element());
    this.setAria("label", localizedNextButtonLabel, this._navigator._nextButton.$element());
  },
  _updateAriaSelected: function(value2, previousValue) {
    previousValue.forEach((item) => {
      this.setAria("selected", void 0, this._view._getCellByDate(item));
    });
    value2.forEach((item) => {
      this.setAria("selected", true, this._view._getCellByDate(item));
    });
    if (this.option("viewsCount") > 1) {
      previousValue.forEach((item) => {
        this.setAria("selected", void 0, this._additionalView._getCellByDate(item));
      });
      value2.forEach((item) => {
        this.setAria("selected", true, this._additionalView._getCellByDate(item));
      });
    }
  },
  _updateAriaId: function(value2) {
    var _value;
    value2 = null !== (_value = value2) && void 0 !== _value ? _value : this.option("currentDate");
    var ariaId = "dx-" + new guid_default();
    var view = this._getActiveView(value2);
    var $newCell = view._getCellByDate(value2);
    this.setAria("id", ariaId, $newCell);
    this.setAria("activedescendant", ariaId);
    this._onContouredChanged(ariaId);
  },
  _suppressingNavigation: function(callback, args) {
    this._suppressNavigation = true;
    callback.apply(this, args);
    delete this._suppressNavigation;
  },
  _optionChanged: function(args) {
    var {
      value: value2,
      previousValue
    } = args;
    switch (args.name) {
      case "width":
        this.callBase(args);
        this._clearViewWidthCache();
        break;
      case "min":
      case "max":
        this.min = void 0;
        this.max = void 0;
        this._suppressingNavigation(this._updateCurrentDate, [this.option("currentDate")]);
        this._refreshViews();
        this._renderNavigator();
        break;
      case "selectionMode":
        this._refreshSelectionStrategy();
        this._initCurrentDate();
        break;
      case "selectWeekOnClick":
        this._refreshViews();
        break;
      case "firstDayOfWeek":
        this._refreshViews();
        this._updateButtonsVisibility();
        break;
      case "focusStateEnabled":
        this._invalidate();
        break;
      case "currentDate":
        this.setAria("id", void 0, this._view._getCellByDate(previousValue));
        this._updateCurrentDate(value2);
        break;
      case "zoomLevel":
        this.$element().removeClass(CALENDAR_VIEW_CLASS + "-" + previousValue);
        this._correctZoomLevel();
        this._refreshViews();
        this._renderNavigator();
        this._updateAriaId();
        this._updateNavigatorLabels();
        break;
      case "minZoomLevel":
      case "maxZoomLevel":
        this._correctZoomLevel();
        this._updateButtonsVisibility();
        break;
      case "value":
        this._selectionStrategy.processValueChanged(value2, previousValue);
        this._setSubmitValue(value2);
        this.callBase(args);
        break;
      case "viewsCount":
        this._refreshViews();
        this._renderNavigator();
        break;
      case "onCellClick":
        this._view.option("onCellClick", value2);
        break;
      case "onContouredChanged":
        this._onContouredChanged = this._createActionByOption("onContouredChanged");
        break;
      case "disabledDates":
      case "dateSerializationFormat":
      case "cellTemplate":
      case "showTodayButton":
        this._invalidate();
        break;
      case "skipFocusCheck":
        break;
      case "_todayDate":
      case "showWeekNumbers":
      case "weekNumberRule":
        this._refreshViews();
        break;
      default:
        this.callBase(args);
    }
  },
  getContouredDate: function() {
    return this._view.option("contouredDate");
  }
});
component_registrator_default("dxCalendar", Calendar);
var ui_calendar_default = Calendar;

// node_modules/devextreme/esm/ui/calendar.js
var calendar_default = ui_calendar_default;

// node_modules/devextreme/esm/ui/date_box/ui.date_box.strategy.js
var abstract8 = class_default.abstract;
var DateBoxStrategy = class_default.inherit({
  ctor: function(dateBox) {
    this.dateBox = dateBox;
  },
  widgetOption: function() {
    return this._widget && this._widget.option.apply(this._widget, arguments);
  },
  _renderWidget: function(element) {
    element = element || renderer_default("<div>");
    this._widget = this._createWidget(element);
    this._widget.$element().appendTo(this._getWidgetContainer());
  },
  _createWidget: function(element) {
    var widgetName = this._getWidgetName();
    var widgetOptions = this._getWidgetOptions();
    return this.dateBox._createComponent(element, widgetName, widgetOptions);
  },
  _getWidgetOptions: abstract8,
  _getWidgetName: abstract8,
  getDefaultOptions: function() {
    return {
      mode: "text"
    };
  },
  getDisplayFormat: abstract8,
  supportedKeys: noop2,
  getKeyboardListener: noop2,
  customizeButtons: noop2,
  getParsedText: function(text, format2) {
    var value2 = date_default3.parse(text, format2);
    return value2 ? value2 : date_default3.parse(text);
  },
  renderInputMinMax: noop2,
  renderOpenedState: function() {
    this._updateValue();
  },
  popupConfig: abstract8,
  _dimensionChanged: function() {
    var _this$_getPopup;
    null === (_this$_getPopup = this._getPopup()) || void 0 === _this$_getPopup ? void 0 : _this$_getPopup.repaint();
  },
  renderPopupContent: function() {
    var popup = this._getPopup();
    this._renderWidget();
    var $popupContent = popup.$content().parent();
    events_engine_default.off($popupContent, "mousedown");
    events_engine_default.on($popupContent, "mousedown", this._preventFocusOnPopup.bind(this));
  },
  _preventFocusOnPopup: function(e) {
    e.preventDefault();
  },
  _getWidgetContainer: function() {
    return this._getPopup().$content();
  },
  _getPopup: function() {
    return this.dateBox._popup;
  },
  popupShowingHandler: noop2,
  popupHiddenHandler: noop2,
  _updateValue: function() {
    this._widget && this._widget.option("value", this.dateBoxValue());
  },
  useCurrentDateByDefault: noop2,
  getDefaultDate: function() {
    return /* @__PURE__ */ new Date();
  },
  textChangedHandler: noop2,
  renderValue: function() {
    if (this.dateBox.option("opened")) {
      this._updateValue();
    }
  },
  getValue: function() {
    return this._widget.option("value");
  },
  isAdaptivityChanged: function() {
    return false;
  },
  dispose: function() {
    var popup = this._getPopup();
    if (popup) {
      popup.$content().empty();
    }
  },
  dateBoxValue: function() {
    if (arguments.length) {
      return this.dateBox.dateValue.apply(this.dateBox, arguments);
    } else {
      return this.dateBox.dateOption.apply(this.dateBox, ["value"]);
    }
  }
});
var ui_date_box_strategy_default = DateBoxStrategy;

// node_modules/devextreme/esm/ui/date_box/ui.date_box.strategy.calendar.js
var TODAY_BUTTON_CLASS = "dx-button-today";
var CalendarStrategy = ui_date_box_strategy_default.inherit({
  NAME: "Calendar",
  getDefaultOptions: function() {
    return extend(this.callBase(), {
      todayButtonText: message_default.format("dxCalendar-todayButtonText")
    });
  },
  supportedKeys: function() {
    var homeEndHandler = function(e) {
      if (this.option("opened")) {
        e.preventDefault();
        return true;
      }
      return false;
    };
    return {
      rightArrow: function() {
        if (this.option("opened")) {
          return true;
        }
      },
      leftArrow: function() {
        if (this.option("opened")) {
          return true;
        }
      },
      enter: (function(e) {
        if (this.dateBox.option("opened")) {
          e.preventDefault();
          if (this._widget.option("zoomLevel") === this._widget.option("maxZoomLevel")) {
            var viewValue = this._getContouredValue();
            var lastActionElement = this._lastActionElement;
            var shouldCloseDropDown = this._closeDropDownByEnter();
            if (shouldCloseDropDown && viewValue && "calendar" === lastActionElement) {
              this.dateBoxValue(viewValue, e);
            }
            shouldCloseDropDown && this.dateBox.close();
            this.dateBox._valueChangeEventHandler(e);
            return !shouldCloseDropDown;
          } else {
            return true;
          }
        } else {
          this.dateBox._valueChangeEventHandler(e);
        }
      }).bind(this),
      home: homeEndHandler,
      end: homeEndHandler
    };
  },
  getDisplayFormat: function(displayFormat) {
    return displayFormat || "shortdate";
  },
  _closeDropDownByEnter: () => true,
  _getWidgetName: function() {
    return calendar_default;
  },
  _getContouredValue: function() {
    return this._widget._view.option("contouredDate");
  },
  getKeyboardListener() {
    return this._widget;
  },
  _getWidgetOptions: function() {
    var disabledDates = this.dateBox.option("disabledDates");
    return extend(this.dateBox.option("calendarOptions"), {
      value: this.dateBoxValue() || null,
      selectionMode: "single",
      dateSerializationFormat: null,
      min: this.dateBox.dateOption("min"),
      max: this.dateBox.dateOption("max"),
      onValueChanged: this._valueChangedHandler.bind(this),
      onCellClick: this._cellClickHandler.bind(this),
      disabledDates: isFunction(disabledDates) ? this._injectComponent(disabledDates.bind(this.dateBox)) : disabledDates,
      onContouredChanged: this._refreshActiveDescendant.bind(this),
      skipFocusCheck: true
    });
  },
  _injectComponent: function(func) {
    var that = this;
    return function(params) {
      extend(params, {
        component: that.dateBox
      });
      return func(params);
    };
  },
  _refreshActiveDescendant: function(e) {
    this._lastActionElement = "calendar";
    this.dateBox.setAria("activedescendant", e.actionValue);
  },
  _getTodayButtonConfig() {
    var buttonsLocation = this.dateBox.option("buttonsLocation");
    var isButtonsLocationDefault = "default" === buttonsLocation;
    var position3 = isButtonsLocationDefault ? ["bottom", "center"] : splitPair(buttonsLocation);
    var stylingMode = isMaterial() ? "text" : "outlined";
    return {
      widget: "dxButton",
      toolbar: position3[0],
      location: "after" === position3[1] ? "before" : position3[1],
      options: {
        onClick: (args) => {
          this._widget._toTodayView(args);
        },
        text: this.dateBox.option("todayButtonText"),
        elementAttr: {
          class: TODAY_BUTTON_CLASS
        },
        stylingMode
      }
    };
  },
  _isCalendarVisible: function() {
    var {
      calendarOptions
    } = this.dateBox.option();
    return isEmptyObject(calendarOptions) || false !== calendarOptions.visible;
  },
  _getPopupToolbarItems(toolbarItems) {
    var useButtons = "useButtons" === this.dateBox.option("applyValueMode");
    var shouldRenderTodayButton = useButtons && this._isCalendarVisible();
    if (shouldRenderTodayButton) {
      var todayButton = this._getTodayButtonConfig();
      return [todayButton, ...toolbarItems];
    }
    return toolbarItems;
  },
  popupConfig: function(_popupConfig) {
    return extend(true, _popupConfig, {
      position: {
        collision: "flipfit flip"
      },
      width: "auto"
    });
  },
  _valueChangedHandler: function(e) {
    var value2 = e.value;
    var prevValue = e.previousValue;
    if (date_default.sameDate(value2, prevValue) && date_default.sameHoursAndMinutes(value2, prevValue)) {
      return;
    }
    if ("instantly" === this.dateBox.option("applyValueMode")) {
      this.dateBoxValue(this.getValue(), e.event);
    }
  },
  _updateValue: function() {
    if (!this._widget) {
      return;
    }
    this._widget.option("value", this.dateBoxValue());
  },
  textChangedHandler: function() {
    this._lastActionElement = "input";
    if (this.dateBox.option("opened") && this._widget) {
      this._updateValue(true);
    }
  },
  _cellClickHandler: function(e) {
    var dateBox = this.dateBox;
    if ("instantly" === dateBox.option("applyValueMode")) {
      dateBox.option("opened", false);
      this.dateBoxValue(this.getValue(), e.event);
    }
  }
});
var ui_date_box_strategy_calendar_default = CalendarStrategy;

// node_modules/devextreme/esm/renovation/ui/scroll_view/utils/scroll_direction.js
var ScrollDirection = class {
  constructor(direction) {
    this.DIRECTION_HORIZONTAL = "horizontal";
    this.DIRECTION_VERTICAL = "vertical";
    this.DIRECTION_BOTH = "both";
    this.direction = null !== direction && void 0 !== direction ? direction : DIRECTION_VERTICAL;
  }
  get isHorizontal() {
    return this.direction === DIRECTION_HORIZONTAL || this.direction === DIRECTION_BOTH;
  }
  get isVertical() {
    return this.direction === DIRECTION_VERTICAL || this.direction === DIRECTION_BOTH;
  }
  get isBoth() {
    return this.direction === DIRECTION_BOTH;
  }
};

// node_modules/devextreme/esm/renovation/ui/scroll_view/utils/convert_location.js
function convertToLocation(location, direction) {
  if (isPlainObject(location)) {
    var left = ensureDefined(location.left, location.x);
    var top = ensureDefined(location.top, location.y);
    return {
      left: isDefined(left) ? left : void 0,
      top: isDefined(top) ? top : void 0
    };
  }
  var {
    isHorizontal,
    isVertical
  } = new ScrollDirection(direction);
  return {
    left: isHorizontal && isDefined(location) ? location : void 0,
    top: isVertical && isDefined(location) ? location : void 0
  };
}

// node_modules/devextreme/esm/ui/date_box/ui.date_view_roller.js
var DATEVIEW_ROLLER_CLASS = "dx-dateviewroller";
var DATEVIEW_ROLLER_ACTIVE_CLASS = "dx-state-active";
var DATEVIEW_ROLLER_CURRENT_CLASS = "dx-dateviewroller-current";
var DATEVIEW_ROLLER_ITEM_CLASS = "dx-dateview-item";
var DATEVIEW_ROLLER_ITEM_SELECTED_CLASS = "dx-dateview-item-selected";
var DATEVIEW_ROLLER_ITEM_SELECTED_FRAME_CLASS = "dx-dateview-item-selected-frame";
var DATEVIEW_ROLLER_ITEM_SELECTED_BORDER_CLASS = "dx-dateview-item-selected-border";
var DateViewRoller = class extends ui_scrollable_old_default {
  _getDefaultOptions() {
    return extend(super._getDefaultOptions(), {
      showScrollbar: "never",
      useNative: false,
      selectedIndex: 0,
      bounceEnabled: false,
      items: [],
      showOnClick: false,
      onClick: null,
      onSelectedIndexChanged: null,
      scrollByContent: true
    });
  }
  _init() {
    super._init();
    this.option("onVisibilityChange", this._visibilityChangedHandler.bind(this));
    this.option("onEnd", this._endActionHandler.bind(this));
  }
  _render() {
    super._render();
    this._renderSelectedItemFrame();
    this.$element().addClass(DATEVIEW_ROLLER_CLASS);
    this._renderContainerClick();
    this._renderItems();
    this._renderSelectedValue();
    this._renderItemsClick();
    this._renderWheelEvent();
    this._renderSelectedIndexChanged();
  }
  _renderSelectedIndexChanged() {
    this._selectedIndexChanged = this._createActionByOption("onSelectedIndexChanged");
  }
  _renderWheelEvent() {
    events_engine_default.on(renderer_default(this.container()), "dxmousewheel", (e) => {
      this._isWheelScrolled = true;
    });
  }
  _renderContainerClick() {
    if (!this.option("showOnClick")) {
      return;
    }
    var eventName = addNamespace2(CLICK_EVENT_NAME, this.NAME);
    var clickAction = this._createActionByOption("onClick");
    events_engine_default.off(renderer_default(this.container()), eventName);
    events_engine_default.on(renderer_default(this.container()), eventName, function(e) {
      clickAction({
        event: e
      });
    });
  }
  _renderItems() {
    var items = this.option("items") || [];
    var $items = renderer_default();
    renderer_default(this.content()).empty();
    items.forEach(function(item) {
      $items = $items.add(renderer_default("<div>").addClass(DATEVIEW_ROLLER_ITEM_CLASS).append(item));
    });
    renderer_default(this.content()).append($items);
    this._$items = $items;
    this.update();
  }
  _renderSelectedItemFrame() {
    renderer_default("<div>").addClass(DATEVIEW_ROLLER_ITEM_SELECTED_FRAME_CLASS).append(renderer_default("<div>").addClass(DATEVIEW_ROLLER_ITEM_SELECTED_BORDER_CLASS)).appendTo(renderer_default(this.container()));
  }
  _renderSelectedValue(selectedIndex) {
    var index2 = this._fitIndex(null !== selectedIndex && void 0 !== selectedIndex ? selectedIndex : this.option("selectedIndex"));
    this._moveTo({
      top: this._getItemPosition(index2)
    });
    this._renderActiveStateItem();
  }
  _fitIndex(index2) {
    var items = this.option("items") || [];
    var itemCount = items.length;
    if (index2 >= itemCount) {
      return itemCount - 1;
    }
    if (index2 < 0) {
      return 0;
    }
    return index2;
  }
  _getItemPosition(index2) {
    return Math.round(this._itemHeight() * index2);
  }
  _renderItemsClick() {
    var itemSelector = this._getItemSelector();
    var eventName = addNamespace2(CLICK_EVENT_NAME, this.NAME);
    events_engine_default.off(this.$element(), eventName, itemSelector);
    events_engine_default.on(this.$element(), eventName, itemSelector, this._itemClickHandler.bind(this));
  }
  _getItemSelector() {
    return "." + DATEVIEW_ROLLER_ITEM_CLASS;
  }
  _itemClickHandler(e) {
    this.option("selectedIndex", this._itemElementIndex(e.currentTarget));
  }
  _itemElementIndex(itemElement) {
    return this._itemElements().index(itemElement);
  }
  _itemElements() {
    return this.$element().find(this._getItemSelector());
  }
  _renderActiveStateItem() {
    var selectedIndex = this.option("selectedIndex");
    each(this._$items, function(index2) {
      renderer_default(this).toggleClass(DATEVIEW_ROLLER_ITEM_SELECTED_CLASS, selectedIndex === index2);
    });
  }
  _shouldScrollToNeighborItem() {
    return "desktop" === devices_default.real().deviceType && this._isWheelScrolled;
  }
  _moveTo(targetLocation) {
    var {
      top,
      left
    } = convertToLocation(targetLocation);
    var location = this.scrollOffset();
    var delta = {
      x: location.left - left,
      y: location.top - top
    };
    if (this._isVisible() && (delta.x || delta.y)) {
      this._prepareDirections(true);
      if (this._animation && !this._shouldScrollToNeighborItem()) {
        var that = this;
        fx_default.stop(renderer_default(this.content()));
        fx_default.animate(renderer_default(this.content()), {
          duration: 200,
          type: "slide",
          to: {
            top: Math.floor(delta.y)
          },
          complete() {
            resetPosition(renderer_default(that.content()));
            that.handleMove({
              delta
            });
          }
        });
        delete this._animation;
      } else {
        this.handleMove({
          delta
        });
      }
    }
  }
  _validate(e) {
    return this._moveIsAllowed(e);
  }
  _fitSelectedIndexInRange(index2) {
    var itemsCount = this.option("items").length;
    return Math.max(Math.min(index2, itemsCount - 1), 0);
  }
  _isInNullNeighborhood(x) {
    return -0.1 <= x && x <= 0.1;
  }
  _getSelectedIndexAfterScroll(currentSelectedIndex) {
    var locationTop = this.scrollOffset().top;
    var currentSelectedIndexPosition = currentSelectedIndex * this._itemHeight();
    var dy = locationTop - currentSelectedIndexPosition;
    if (this._isInNullNeighborhood(dy)) {
      return currentSelectedIndex;
    }
    var direction = dy > 0 ? 1 : -1;
    var newSelectedIndex = this._fitSelectedIndexInRange(currentSelectedIndex + direction);
    return newSelectedIndex;
  }
  _getNewSelectedIndex(currentSelectedIndex) {
    if (this._shouldScrollToNeighborItem()) {
      return this._getSelectedIndexAfterScroll(currentSelectedIndex);
    }
    this._animation = true;
    var ratio = this.scrollOffset().top / this._itemHeight();
    return Math.round(ratio);
  }
  _endActionHandler() {
    var currentSelectedIndex = this.option("selectedIndex");
    var newSelectedIndex = this._getNewSelectedIndex(currentSelectedIndex);
    if (newSelectedIndex === currentSelectedIndex) {
      this._renderSelectedValue(newSelectedIndex);
    } else {
      this.option("selectedIndex", newSelectedIndex);
    }
    this._isWheelScrolled = false;
  }
  _itemHeight() {
    var $item = this._$items.first();
    return getHeight($item);
  }
  _toggleActive(state) {
    this.$element().toggleClass(DATEVIEW_ROLLER_ACTIVE_CLASS, state);
  }
  _isVisible() {
    return renderer_default(this.container()).is(":visible");
  }
  _fireSelectedIndexChanged(value2, previousValue) {
    this._selectedIndexChanged({
      value: value2,
      previousValue,
      event: void 0
    });
  }
  _visibilityChanged(visible2) {
    super._visibilityChanged(visible2);
    this._visibilityChangedHandler(visible2);
  }
  _visibilityChangedHandler(visible2) {
    if (visible2) {
      this._visibilityTimer = setTimeout(() => {
        this._renderSelectedValue(this.option("selectedIndex"));
      });
    }
    this.toggleActiveState(false);
  }
  toggleActiveState(state) {
    this.$element().toggleClass(DATEVIEW_ROLLER_CURRENT_CLASS, state);
  }
  _refreshSelectedIndex() {
    var selectedIndex = this.option("selectedIndex");
    var fitIndex = this._fitIndex(selectedIndex);
    if (fitIndex === selectedIndex) {
      this._renderActiveStateItem();
    } else {
      this.option("selectedIndex", fitIndex);
    }
  }
  _optionChanged(args) {
    switch (args.name) {
      case "selectedIndex":
        this._fireSelectedIndexChanged(args.value, args.previousValue);
        this._renderSelectedValue(args.value);
        break;
      case "items":
        this._renderItems();
        this._refreshSelectedIndex();
        break;
      case "onClick":
      case "showOnClick":
        this._renderContainerClick();
        break;
      case "onSelectedIndexChanged":
        this._renderSelectedIndexChanged();
        break;
      default:
        super._optionChanged(args);
    }
  }
  _dispose() {
    clearTimeout(this._visibilityTimer);
    super._dispose();
  }
};
component_registrator_default("dxDateViewRoller", DateViewRoller);
var ui_date_view_roller_default = DateViewRoller;

// node_modules/devextreme/esm/ui/date_box/ui.date_view.js
var DATEVIEW_CLASS = "dx-dateview";
var DATEVIEW_COMPACT_CLASS = "dx-dateview-compact";
var DATEVIEW_WRAPPER_CLASS = "dx-dateview-wrapper";
var DATEVIEW_ROLLER_CONTAINER_CLASS = "dx-dateview-rollers";
var DATEVIEW_ROLLER_CLASS2 = "dx-dateviewroller";
var TYPE = {
  date: "date",
  datetime: "datetime",
  time: "time"
};
var ROLLER_TYPE = {
  year: "year",
  month: "month",
  day: "day",
  hours: "hours"
};
var DateView = editor_default.inherit({
  _valueOption: function() {
    var value2 = this.option("value");
    var date = new Date(value2);
    return !value2 || isNaN(date) ? this._getDefaultDate() : date;
  },
  _getDefaultDate: function() {
    var date = /* @__PURE__ */ new Date();
    if (this.option("type") === TYPE.date) {
      return new Date(date.getFullYear(), date.getMonth(), date.getDate());
    }
    return date;
  },
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      minDate: ui_date_utils_default.MIN_DATEVIEW_DEFAULT_DATE,
      maxDate: ui_date_utils_default.MAX_DATEVIEW_DEFAULT_DATE,
      type: TYPE.date,
      value: /* @__PURE__ */ new Date(),
      applyCompactClass: false
    });
  },
  _defaultOptionsRules: function() {
    return this.callBase().concat([{
      device: function(_device) {
        return "desktop" !== _device.deviceType;
      },
      options: {
        applyCompactClass: true
      }
    }]);
  },
  _render: function() {
    this.callBase();
    this.$element().addClass(DATEVIEW_CLASS);
    this._toggleFormatClasses(this.option("type"));
    this._toggleCompactClass();
  },
  _toggleFormatClasses: function(currentFormat, previousFormat) {
    this.$element().addClass(DATEVIEW_CLASS + "-" + currentFormat);
    previousFormat && this.$element().removeClass(DATEVIEW_CLASS + "-" + previousFormat);
  },
  _toggleCompactClass: function() {
    this.$element().toggleClass(DATEVIEW_COMPACT_CLASS, this.option("applyCompactClass"));
  },
  _wrapper: function() {
    return this._$wrapper;
  },
  _renderContentImpl: function() {
    this._$wrapper = renderer_default("<div>").addClass(DATEVIEW_WRAPPER_CLASS);
    this._renderRollers();
    this._$wrapper.appendTo(this.$element());
  },
  _renderRollers: function() {
    if (!this._$rollersContainer) {
      this._$rollersContainer = renderer_default("<div>").addClass(DATEVIEW_ROLLER_CONTAINER_CLASS);
    }
    this._$rollersContainer.empty();
    this._createRollerConfigs();
    this._rollers = {};
    var that = this;
    each(that._rollerConfigs, function(name2) {
      var $roller = renderer_default("<div>").appendTo(that._$rollersContainer).addClass(DATEVIEW_ROLLER_CLASS2 + "-" + that._rollerConfigs[name2].type);
      that._rollers[that._rollerConfigs[name2].type] = that._createComponent($roller, ui_date_view_roller_default, {
        items: that._rollerConfigs[name2].displayItems,
        selectedIndex: that._rollerConfigs[name2].selectedIndex,
        showScrollbar: "never",
        scrollByContent: true,
        onStart: function(e) {
          var roller = e.component;
          roller._toggleActive(true);
          that._setActiveRoller(that._rollerConfigs[name2], roller.option("selectedIndex"));
        },
        onEnd: function(e) {
          var roller = e.component;
          roller._toggleActive(false);
        },
        onClick: function(e) {
          var roller = e.component;
          roller._toggleActive(true);
          that._setActiveRoller(that._rollerConfigs[name2], roller.option("selectedIndex"));
          that._setRollerState(that._rollerConfigs[name2], roller.option("selectedIndex"));
          roller._toggleActive(false);
        },
        onSelectedIndexChanged: function(e) {
          var roller = e.component;
          that._setRollerState(that._rollerConfigs[name2], roller.option("selectedIndex"));
        }
      });
    });
    that._$rollersContainer.appendTo(that._wrapper());
  },
  _createRollerConfigs: function(type2) {
    var that = this;
    type2 = type2 || that.option("type");
    that._rollerConfigs = {};
    date_default3.getFormatParts(ui_date_utils_default.FORMATS_MAP[type2]).forEach(function(partName) {
      that._createRollerConfig(partName);
    });
  },
  _createRollerConfig: function(componentName) {
    var componentInfo = ui_date_utils_default.DATE_COMPONENTS_INFO[componentName];
    var valueRange = this._calculateRollerConfigValueRange(componentName);
    var startValue = valueRange.startValue;
    var endValue = valueRange.endValue;
    var formatter = componentInfo.formatter;
    var curDate = this._getCurrentDate();
    var config3 = {
      type: componentName,
      setValue: componentInfo.setter,
      valueItems: [],
      displayItems: [],
      getIndex: function(value2) {
        return value2[componentInfo.getter]() - startValue;
      }
    };
    for (var i = startValue; i <= endValue; i++) {
      config3.valueItems.push(i);
      config3.displayItems.push(formatter(i, curDate));
    }
    config3.selectedIndex = config3.getIndex(curDate);
    this._rollerConfigs[componentName] = config3;
  },
  _setActiveRoller: function(currentRoller) {
    var activeRoller = currentRoller && this._rollers[currentRoller.type];
    each(this._rollers, function() {
      this.toggleActiveState(this === activeRoller);
    });
  },
  _updateRollersPosition: function() {
    var that = this;
    each(this._rollers, function(type2) {
      var correctIndex = that._rollerConfigs[type2].getIndex(that._getCurrentDate());
      this.option("selectedIndex", correctIndex);
    });
  },
  _setRollerState: function(roller, selectedIndex) {
    if (selectedIndex !== roller.selectedIndex) {
      var rollerValue = roller.valueItems[selectedIndex];
      var setValue = roller.setValue;
      var currentValue = new Date(this._getCurrentDate());
      var currentDate = currentValue.getDate();
      var minDate = this.option("minDate");
      var maxDate = this.option("maxDate");
      if (roller.type === ROLLER_TYPE.month) {
        currentDate = Math.min(currentDate, ui_date_utils_default.getMaxMonthDay(currentValue.getFullYear(), rollerValue));
      } else if (roller.type === ROLLER_TYPE.year) {
        currentDate = Math.min(currentDate, ui_date_utils_default.getMaxMonthDay(rollerValue, currentValue.getMonth()));
      }
      currentValue.setDate(currentDate);
      currentValue[setValue](rollerValue);
      var normalizedDate = date_default.normalizeDate(currentValue, minDate, maxDate);
      currentValue = ui_date_utils_default.mergeDates(normalizedDate, currentValue, "time");
      currentValue = date_default.normalizeDate(currentValue, minDate, maxDate);
      this.option("value", currentValue);
      roller.selectedIndex = selectedIndex;
    }
    if (roller.type === ROLLER_TYPE.year) {
      this._refreshRollers();
    }
    if (roller.type === ROLLER_TYPE.month) {
      this._refreshRoller(ROLLER_TYPE.day);
      this._refreshRoller(ROLLER_TYPE.hours);
    }
  },
  _refreshRoller: function(rollerType) {
    var roller = this._rollers[rollerType];
    if (roller) {
      this._createRollerConfig(rollerType);
      var rollerConfig = this._rollerConfigs[rollerType];
      if (rollerType === ROLLER_TYPE.day || rollerConfig.displayItems.toString() !== roller.option("items").toString()) {
        roller.option({
          items: rollerConfig.displayItems,
          selectedIndex: rollerConfig.selectedIndex
        });
      }
    }
  },
  _getCurrentDate: function() {
    var curDate = this._valueOption();
    var minDate = this.option("minDate");
    var maxDate = this.option("maxDate");
    return date_default.normalizeDate(curDate, minDate, maxDate);
  },
  _calculateRollerConfigValueRange: function(componentName) {
    var curDate = this._getCurrentDate();
    var minDate = this.option("minDate");
    var maxDate = this.option("maxDate");
    var minYear = date_default.sameYear(curDate, minDate);
    var minMonth = minYear && curDate.getMonth() === minDate.getMonth();
    var maxYear = date_default.sameYear(curDate, maxDate);
    var maxMonth = maxYear && curDate.getMonth() === maxDate.getMonth();
    var minHour = minMonth && curDate.getDate() === minDate.getDate();
    var maxHour = maxMonth && curDate.getDate() === maxDate.getDate();
    var componentInfo = ui_date_utils_default.DATE_COMPONENTS_INFO[componentName];
    var startValue = componentInfo.startValue;
    var endValue = componentInfo.endValue;
    if (componentName === ROLLER_TYPE.year) {
      startValue = minDate.getFullYear();
      endValue = maxDate.getFullYear();
    }
    if (componentName === ROLLER_TYPE.month) {
      if (minYear) {
        startValue = minDate.getMonth();
      }
      if (maxYear) {
        endValue = maxDate.getMonth();
      }
    }
    if (componentName === ROLLER_TYPE.day) {
      endValue = ui_date_utils_default.getMaxMonthDay(curDate.getFullYear(), curDate.getMonth());
      if (minYear && minMonth) {
        startValue = minDate.getDate();
      }
      if (maxYear && maxMonth) {
        endValue = maxDate.getDate();
      }
    }
    if (componentName === ROLLER_TYPE.hours) {
      startValue = minHour ? minDate.getHours() : startValue;
      endValue = maxHour ? maxDate.getHours() : endValue;
    }
    return {
      startValue,
      endValue
    };
  },
  _refreshRollers: function() {
    this._refreshRoller(ROLLER_TYPE.month);
    this._refreshRoller(ROLLER_TYPE.day);
    this._refreshRoller(ROLLER_TYPE.hours);
  },
  _optionChanged: function(args) {
    switch (args.name) {
      case "minDate":
      case "maxDate":
      case "type":
        this._renderRollers();
        this._toggleFormatClasses(args.value, args.previousValue);
        break;
      case "visible":
        this.callBase(args);
        if (args.value) {
          this._renderRollers();
        }
        break;
      case "value":
        this.option("value", this._valueOption());
        this._refreshRollers();
        this._updateRollersPosition();
        break;
      default:
        this.callBase(args);
    }
  },
  _clean: function() {
    this.callBase();
    delete this._$rollersContainer;
  }
});
component_registrator_default("dxDateView", DateView);
var ui_date_view_default = DateView;

// node_modules/devextreme/esm/ui/date_box/ui.date_box.strategy.date_view.js
var window22 = getWindow();
var DateViewStrategy = ui_date_box_strategy_default.inherit({
  NAME: "DateView",
  getDefaultOptions: function() {
    return extend(this.callBase(), {
      openOnFieldClick: true,
      applyButtonText: message_default.format("OK"),
      "dropDownOptions.showTitle": true
    });
  },
  getDisplayFormat: function(displayFormat) {
    return displayFormat || ui_date_utils_default.FORMATS_MAP[this.dateBox.option("type")];
  },
  popupConfig: function(config3) {
    return {
      toolbarItems: this.dateBox._popupToolbarItemsConfig(),
      onInitialized: config3.onInitialized,
      defaultOptionsRules: [{
        device: {
          platform: "android"
        },
        options: {
          width: 333,
          height: 331
        }
      }, {
        device: function(_device) {
          var platform = _device.platform;
          return "generic" === platform || "ios" === platform;
        },
        options: {
          width: "auto",
          height: "auto"
        }
      }, {
        device: function(_device2) {
          var platform = _device2.platform;
          var phone = _device2.phone;
          return "generic" === platform && phone;
        },
        options: {
          width: 333,
          maxWidth: "100%",
          maxHeight: "100%",
          height: "auto",
          position: {
            collision: "flipfit flip"
          }
        }
      }, {
        device: {
          platform: "ios",
          phone: true
        },
        options: {
          width: "100%",
          position: {
            my: "bottom",
            at: "bottom",
            of: window22
          }
        }
      }]
    };
  },
  _renderWidget: function() {
    if (inputType(this.dateBox.option("mode")) && this.dateBox._isNativeType() || this.dateBox.option("readOnly")) {
      if (this._widget) {
        this._widget.$element().remove();
        this._widget = null;
      }
      return;
    }
    var popup = this._getPopup();
    if (this._widget) {
      this._widget.option(this._getWidgetOptions());
    } else {
      var element = renderer_default("<div>").appendTo(popup.$content());
      this._widget = this._createWidget(element);
    }
    this._widget.$element().appendTo(this._getWidgetContainer());
  },
  _getWidgetName: function() {
    return ui_date_view_default;
  },
  renderOpenedState: function() {
    this.callBase();
    if (this._widget) {
      this._widget.option("value", this._widget._getCurrentDate());
    }
  },
  _getWidgetOptions: function() {
    return {
      value: this.dateBoxValue() || /* @__PURE__ */ new Date(),
      type: this.dateBox.option("type"),
      minDate: this.dateBox.dateOption("min") || new Date(1900, 0, 1),
      maxDate: this.dateBox.dateOption("max") || new Date(Date.now() + 50 * ui_date_utils_default.ONE_YEAR),
      onDisposing: (function() {
        this._widget = null;
      }).bind(this)
    };
  }
});
var ui_date_box_strategy_date_view_default = DateViewStrategy;

// node_modules/devextreme/esm/ui/date_box/ui.date_box.strategy.native.js
var NativeStrategy2 = ui_date_box_strategy_default.inherit({
  NAME: "Native",
  popupConfig: function(_popupConfig) {
    return extend({}, _popupConfig, {
      width: "auto"
    });
  },
  getParsedText: function(text) {
    if (!text) {
      return null;
    }
    if ("datetime" === this.dateBox.option("type")) {
      return new Date(text.replace(/-/g, "/").replace("T", " ").split(".")[0]);
    }
    return ui_date_utils_default.fromStandardDateFormat(text);
  },
  renderPopupContent: noop2,
  _getWidgetName: noop2,
  _getWidgetOptions: noop2,
  _getDateBoxType: function() {
    var type2 = this.dateBox.option("type");
    if (!ui_date_utils_default.SUPPORTED_FORMATS.includes(type2)) {
      type2 = "date";
    } else if ("datetime" === type2 && !inputType(type2)) {
      type2 = "datetime-local";
    }
    return type2;
  },
  customizeButtons: function() {
    var dropDownButton = this.dateBox.getButton("dropDown");
    if (devices_default.real().android && dropDownButton) {
      dropDownButton.on("click", (function() {
        this.dateBox._input().get(0).click();
      }).bind(this));
    }
  },
  getDefaultOptions: function() {
    return {
      mode: this._getDateBoxType()
    };
  },
  getDisplayFormat: function(displayFormat) {
    var type2 = this._getDateBoxType();
    return displayFormat || ui_date_utils_default.FORMATS_MAP[type2];
  },
  renderInputMinMax: function($input) {
    $input.attr({
      min: date_serialization_default.serializeDate(this.dateBox.dateOption("min"), "yyyy-MM-dd"),
      max: date_serialization_default.serializeDate(this.dateBox.dateOption("max"), "yyyy-MM-dd")
    });
  }
});
var ui_date_box_strategy_native_default = NativeStrategy2;

// node_modules/devextreme/esm/ui/box.js
var BOX_CLASS = "dx-box";
var BOX_FLEX_CLASS = "dx-box-flex";
var BOX_ITEM_CLASS = "dx-box-item";
var BOX_ITEM_DATA_KEY = "dxBoxItemData";
var SHRINK = 1;
var MINSIZE_MAP = {
  row: "minWidth",
  col: "minHeight"
};
var MAXSIZE_MAP = {
  row: "maxWidth",
  col: "maxHeight"
};
var FLEX_JUSTIFY_CONTENT_MAP = {
  start: "flex-start",
  end: "flex-end",
  center: "center",
  "space-between": "space-between",
  "space-around": "space-around"
};
var FLEX_ALIGN_ITEMS_MAP = {
  start: "flex-start",
  end: "flex-end",
  center: "center",
  stretch: "stretch"
};
var FLEX_DIRECTION_MAP = {
  row: "row",
  col: "column"
};
var setFlexProp = (element, prop, value2) => {
  value2 = normalizeStyleProp(prop, value2);
  element.style[styleProp(prop)] = value2;
  if (!hasWindow()) {
    if ("" === value2 || !isDefined(value2)) {
      return;
    }
    var cssName = dasherize(prop);
    var styleExpr = cssName + ": " + value2 + ";";
    setStyle(element, styleExpr, false);
  }
};
var BoxItem = class extends item_default {
  _renderVisible(value2, oldValue) {
    super._renderVisible(value2);
    if (isDefined(oldValue)) {
      this._options.fireItemStateChangedAction({
        name: "visible",
        state: value2,
        oldState: oldValue
      });
    }
  }
};
var LayoutStrategy = class {
  constructor($element, option) {
    this._$element = $element;
    this._option = option;
  }
  renderBox() {
    this._$element.css({
      display: stylePropPrefix("flexDirection") + "flex"
    });
    setFlexProp(this._$element.get(0), "flexDirection", FLEX_DIRECTION_MAP[this._option("direction")]);
  }
  renderAlign() {
    this._$element.css({
      justifyContent: this._normalizedAlign()
    });
  }
  _normalizedAlign() {
    var align = this._option("align");
    return align in FLEX_JUSTIFY_CONTENT_MAP ? FLEX_JUSTIFY_CONTENT_MAP[align] : align;
  }
  renderCrossAlign() {
    this._$element.css({
      alignItems: this._normalizedCrossAlign()
    });
  }
  _normalizedCrossAlign() {
    var crossAlign = this._option("crossAlign");
    return crossAlign in FLEX_ALIGN_ITEMS_MAP ? FLEX_ALIGN_ITEMS_MAP[crossAlign] : crossAlign;
  }
  renderItems($items) {
    var flexPropPrefix = stylePropPrefix("flexDirection");
    var direction = this._option("direction");
    each($items, function() {
      var $item = renderer_default(this);
      var item = $item.data(BOX_ITEM_DATA_KEY);
      $item.css({
        display: flexPropPrefix + "flex"
      }).css(MAXSIZE_MAP[direction], item.maxSize || "none").css(MINSIZE_MAP[direction], item.minSize || "0");
      setFlexProp($item.get(0), "flexBasis", item.baseSize || 0);
      setFlexProp($item.get(0), "flexGrow", item.ratio);
      setFlexProp($item.get(0), "flexShrink", isDefined(item.shrink) ? item.shrink : SHRINK);
      $item.children().each((_, itemContent) => {
        renderer_default(itemContent).css({
          width: "auto",
          height: "auto",
          display: stylePropPrefix("flexDirection") + "flex",
          flexBasis: 0
        });
        setFlexProp(itemContent, "flexGrow", 1);
        setFlexProp(itemContent, "flexDirection", renderer_default(itemContent)[0].style.flexDirection || "column");
      });
    });
  }
};
var Box = class _Box extends ui_collection_widget_edit_default {
  _getDefaultOptions() {
    return extend(super._getDefaultOptions(), {
      direction: "row",
      align: "start",
      crossAlign: "stretch",
      activeStateEnabled: false,
      focusStateEnabled: false,
      onItemStateChanged: void 0,
      _queue: void 0
    });
  }
  _itemClass() {
    return BOX_ITEM_CLASS;
  }
  _itemDataKey() {
    return BOX_ITEM_DATA_KEY;
  }
  _itemElements() {
    return this._itemContainer().children(this._itemSelector());
  }
  _init() {
    super._init();
    this.$element().addClass(BOX_FLEX_CLASS);
    this._initLayout();
    this._initBoxQueue();
  }
  _initLayout() {
    this._layout = new LayoutStrategy(this.$element(), this.option.bind(this));
  }
  _initBoxQueue() {
    this._queue = this.option("_queue") || [];
  }
  _queueIsNotEmpty() {
    return this.option("_queue") ? false : !!this._queue.length;
  }
  _pushItemToQueue($item, config3) {
    this._queue.push({
      $item,
      config: config3
    });
  }
  _shiftItemFromQueue() {
    return this._queue.shift();
  }
  _initMarkup() {
    this.$element().addClass(BOX_CLASS);
    this._layout.renderBox();
    super._initMarkup();
    this._renderAlign();
    this._renderActions();
  }
  _renderActions() {
    this._onItemStateChanged = this._createActionByOption("onItemStateChanged");
  }
  _renderAlign() {
    this._layout.renderAlign();
    this._layout.renderCrossAlign();
  }
  _renderItems(items) {
    super._renderItems(items);
    while (this._queueIsNotEmpty()) {
      var item = this._shiftItemFromQueue();
      this._createComponent(item.$item, _Box, extend({
        itemTemplate: this.option("itemTemplate"),
        itemHoldTimeout: this.option("itemHoldTimeout"),
        onItemHold: this.option("onItemHold"),
        onItemClick: this.option("onItemClick"),
        onItemContextMenu: this.option("onItemContextMenu"),
        onItemRendered: this.option("onItemRendered"),
        _queue: this._queue
      }, item.config));
    }
    this._layout.renderItems(this._itemElements());
  }
  _renderItemContent(args) {
    var $itemNode = args.itemData && args.itemData.node;
    if ($itemNode) {
      return this._renderItemContentByNode(args, $itemNode);
    }
    return super._renderItemContent(args);
  }
  _postprocessRenderItem(args) {
    var boxConfig = args.itemData.box;
    if (!boxConfig) {
      return;
    }
    this._pushItemToQueue(args.itemContent, boxConfig);
  }
  _createItemByTemplate(itemTemplate, args) {
    if (args.itemData.box) {
      return itemTemplate.source ? itemTemplate.source() : renderer_default();
    }
    return super._createItemByTemplate(itemTemplate, args);
  }
  _itemOptionChanged(item, property, value2, oldValue) {
    if ("visible" === property) {
      this._onItemStateChanged({
        name: property,
        state: value2,
        oldState: false !== oldValue
      });
    }
    super._itemOptionChanged(item, property, value2);
  }
  _optionChanged(args) {
    switch (args.name) {
      case "_queue":
      case "direction":
        this._invalidate();
        break;
      case "align":
        this._layout.renderAlign();
        break;
      case "crossAlign":
        this._layout.renderCrossAlign();
        break;
      default:
        super._optionChanged(args);
    }
  }
  _itemOptions() {
    var options2 = super._itemOptions();
    options2.fireItemStateChangedAction = (e) => {
      this._onItemStateChanged(e);
    };
    return options2;
  }
};
Box.ItemClass = BoxItem;
component_registrator_default("dxBox", Box);
var box_default = Box;

// node_modules/devextreme/esm/ui/date_box/ui.time_view.js
var TIMEVIEW_CLASS = "dx-timeview";
var TIMEVIEW_CLOCK_CLASS = "dx-timeview-clock";
var TIMEVIEW_FIELD_CLASS = "dx-timeview-field";
var TIMEVIEW_HOURARROW_CLASS = "dx-timeview-hourarrow";
var TIMEVIEW_TIME_SEPARATOR_CLASS = "dx-timeview-time-separator";
var TIMEVIEW_FORMAT12_CLASS = "dx-timeview-format12";
var TIMEVIEW_FORMAT12_AM = -1;
var TIMEVIEW_FORMAT12_PM = 1;
var TIMEVIEW_MINUTEARROW_CLASS = "dx-timeview-minutearrow";
var rotateArrow = function($arrow, angle, offset2) {
  cssRotate($arrow, angle, offset2);
};
var cssRotate = function($arrow, angle, offset2) {
  $arrow.css("transform", "rotate(" + angle + "deg) translate(0," + offset2 + "px)");
};
var TimeView = editor_default.inherit({
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      value: new Date(Date.now()),
      use24HourFormat: true,
      _showClock: true,
      _arrowOffset: 5,
      stylingMode: void 0
    });
  },
  _getValue: function() {
    return this.option("value") || /* @__PURE__ */ new Date();
  },
  _init: function() {
    this.callBase();
    this.$element().addClass(TIMEVIEW_CLASS);
  },
  _render: function() {
    this.callBase();
    this._renderBox();
    this._updateTime();
  },
  _renderBox: function() {
    var $box = renderer_default("<div>").appendTo(this.$element());
    var items = [];
    if (this.option("_showClock")) {
      items.push({
        ratio: 1,
        shrink: 0,
        baseSize: "auto",
        template: this._renderClock.bind(this)
      });
    }
    items.push({
      ratio: 0,
      shrink: 0,
      baseSize: "auto",
      template: this._renderField.bind(this)
    });
    this._createComponent($box, box_default, {
      height: "100%",
      width: "100%",
      direction: "col",
      items
    });
  },
  _renderClock: function(_, __, container) {
    this._$hourArrow = renderer_default("<div>").addClass(TIMEVIEW_HOURARROW_CLASS);
    this._$minuteArrow = renderer_default("<div>").addClass(TIMEVIEW_MINUTEARROW_CLASS);
    var $container = renderer_default(container);
    $container.addClass(TIMEVIEW_CLOCK_CLASS).append(this._$hourArrow).append(this._$minuteArrow);
    this.setAria("role", "presentation", $container);
  },
  _updateClock: function() {
    var time = this._getValue();
    var hourArrowAngle = time.getHours() / 12 * 360 + time.getMinutes() / 60 * 30;
    var minuteArrowAngle = time.getMinutes() / 60 * 360;
    rotateArrow(this._$hourArrow, hourArrowAngle, this.option("_arrowOffset"));
    rotateArrow(this._$minuteArrow, minuteArrowAngle, this.option("_arrowOffset"));
  },
  _getBoxItems: function(is12HourFormat) {
    var items = [{
      ratio: 0,
      shrink: 0,
      baseSize: "auto",
      template: () => this._hourBox.$element()
    }, {
      ratio: 0,
      shrink: 0,
      baseSize: "auto",
      template: renderer_default("<div>").addClass(TIMEVIEW_TIME_SEPARATOR_CLASS).text(date_default3.getTimeSeparator())
    }, {
      ratio: 0,
      shrink: 0,
      baseSize: "auto",
      template: () => this._minuteBox.$element()
    }];
    if (is12HourFormat) {
      items.push({
        ratio: 0,
        shrink: 0,
        baseSize: "auto",
        template: () => this._format12.$element()
      });
    }
    return items;
  },
  _renderField: function() {
    var is12HourFormat = !this.option("use24HourFormat");
    this._createHourBox(is12HourFormat);
    this._createMinuteBox();
    if (is12HourFormat) {
      this._createFormat12Box();
    }
    return this._createComponent(renderer_default("<div>").addClass(TIMEVIEW_FIELD_CLASS), box_default, {
      direction: "row",
      align: "center",
      crossAlign: "center",
      items: this._getBoxItems(is12HourFormat)
    }).$element();
  },
  _createHourBox: function(is12HourFormat) {
    var editor = this._hourBox = this._createComponent(renderer_default("<div>"), number_box_default2, extend({
      min: -1,
      max: is12HourFormat ? 13 : 24,
      value: this._getValue().getHours(),
      onValueChanged: this._onHourBoxValueChanged.bind(this),
      onKeyboardHandled: (opts) => this._keyboardHandler(opts)
    }, this._getNumberBoxConfig()));
    editor.setAria("label", "hours");
  },
  _isPM: function() {
    return !this.option("use24HourFormat") && 1 === this._format12.option("value");
  },
  _onHourBoxValueChanged: function(_ref) {
    var {
      value: value2,
      component
    } = _ref;
    var currentValue = this._getValue();
    var newValue = new Date(currentValue);
    var newHours = this._convertMaxHourToMin(value2);
    component.option("value", newHours);
    if (this._isPM()) {
      newHours += 12;
    }
    newValue.setHours(newHours);
    ui_date_utils_default.normalizeTime(newValue);
    this.option("value", newValue);
  },
  _convertMaxHourToMin: function(hours) {
    var maxHoursValue = this.option("use24HourFormat") ? 24 : 12;
    return (maxHoursValue + hours) % maxHoursValue;
  },
  _createMinuteBox: function() {
    var editor = this._minuteBox = this._createComponent(renderer_default("<div>"), number_box_default2, extend({
      min: -1,
      max: 60,
      value: this._getValue().getMinutes(),
      onKeyboardHandled: (opts) => this._keyboardHandler(opts),
      onValueChanged: (_ref2) => {
        var {
          value: value2,
          component
        } = _ref2;
        var newMinutes = (60 + value2) % 60;
        component.option("value", newMinutes);
        var time = new Date(this._getValue());
        time.setMinutes(newMinutes);
        ui_date_utils_default.normalizeTime(time);
        this.option("value", time);
      }
    }, this._getNumberBoxConfig()));
    editor.setAria("label", "minutes");
  },
  _createFormat12Box: function() {
    var periodNames = date_default3.getPeriodNames();
    var editor = this._format12 = this._createComponent(renderer_default("<div>").addClass(TIMEVIEW_FORMAT12_CLASS), select_box_default, {
      items: [{
        value: TIMEVIEW_FORMAT12_AM,
        text: periodNames[0]
      }, {
        value: TIMEVIEW_FORMAT12_PM,
        text: periodNames[1]
      }],
      valueExpr: "value",
      displayExpr: "text",
      onKeyboardHandled: (opts) => this._keyboardHandler(opts),
      onValueChanged: (_ref3) => {
        var {
          value: value2
        } = _ref3;
        var hours = this._getValue().getHours();
        var time = new Date(this._getValue());
        var newHours = (hours + 12 * value2) % 24;
        time.setHours(newHours);
        this.option("value", time);
      },
      value: this._getValue().getHours() >= 12 ? TIMEVIEW_FORMAT12_PM : TIMEVIEW_FORMAT12_AM,
      stylingMode: this.option("stylingMode")
    });
    editor.setAria("label", "type");
  },
  _refreshFormat12: function() {
    if (this.option("use24HourFormat")) {
      return;
    }
    var value2 = this._getValue();
    var hours = value2.getHours();
    var isPM = hours >= 12;
    var newValue = isPM ? TIMEVIEW_FORMAT12_PM : TIMEVIEW_FORMAT12_AM;
    this._silentEditorValueUpdate(this._format12, newValue);
  },
  _silentEditorValueUpdate: function(editor, value2) {
    if (editor) {
      editor._suppressValueChangeAction();
      editor.option("value", value2);
      editor._resumeValueChangeAction();
    }
  },
  _getNumberBoxConfig: function() {
    return {
      showSpinButtons: true,
      displayValueFormatter: function(value2) {
        return (value2 < 10 ? "0" : "") + value2;
      },
      stylingMode: this.option("stylingMode")
    };
  },
  _normalizeHours: function(hours) {
    return this.option("use24HourFormat") ? hours : hours % 12 || 12;
  },
  _updateField: function() {
    var hours = this._normalizeHours(this._getValue().getHours());
    this._silentEditorValueUpdate(this._hourBox, hours);
    this._silentEditorValueUpdate(this._minuteBox, this._getValue().getMinutes());
    this._refreshFormat12();
  },
  _updateTime: function() {
    if (this.option("_showClock")) {
      this._updateClock();
    }
    this._updateField();
  },
  _visibilityChanged: function(visible2) {
    if (visible2) {
      this._updateTime();
    }
  },
  _optionChanged: function(args) {
    switch (args.name) {
      case "value":
        this._updateTime();
        this.callBase(args);
        break;
      case "_arrowOffset":
        break;
      case "use24HourFormat":
      case "_showClock":
      case "stylingMode":
        this._invalidate();
        break;
      default:
        this.callBase(args);
    }
  }
});
component_registrator_default("dxTimeView", TimeView);
var ui_time_view_default = TimeView;

// node_modules/devextreme/esm/ui/date_box/ui.date_box.strategy.calendar_with_time.js
var window23 = getWindow();
var SHRINK_VIEW_SCREEN_WIDTH = 573;
var DATEBOX_ADAPTIVITY_MODE_CLASS = "dx-datebox-adaptivity-mode";
var DATEBOX_TIMEVIEW_SIDE_CLASS = "dx-datebox-datetime-time-side";
var CalendarWithTimeStrategy = ui_date_box_strategy_calendar_default.inherit({
  NAME: "CalendarWithTime",
  getDefaultOptions: function() {
    return extend(this.callBase(), {
      applyValueMode: "useButtons",
      buttonsLocation: "bottom after",
      "dropDownOptions.showTitle": false
    });
  },
  _closeDropDownByEnter: function() {
    return date_default.sameDate(this._getContouredValue(), this.widgetOption("value"));
  },
  getDisplayFormat: function(displayFormat) {
    return displayFormat || "shortdateshorttime";
  },
  _is24HourFormat: function() {
    return date_default3.is24HourFormat(this.getDisplayFormat(this.dateBox.option("displayFormat")));
  },
  _getContouredValue: function() {
    var viewDate = this.callBase();
    return this._updateDateTime(viewDate);
  },
  _renderWidget: function() {
    this.callBase();
    this._timeView = this.dateBox._createComponent(renderer_default("<div>"), ui_time_view_default, {
      value: this.dateBoxValue(),
      _showClock: !this._isShrinkView(),
      use24HourFormat: this._is24HourFormat(),
      onValueChanged: this._valueChangedHandler.bind(this),
      stylingMode: this.dateBox.option("stylingMode")
    });
  },
  renderOpenedState: function() {
    this.callBase();
    var popup = this._getPopup();
    if (popup) {
      popup.$wrapper().toggleClass(DATEBOX_ADAPTIVITY_MODE_CLASS, this._isSmallScreen());
    }
    clearTimeout(this._repaintTimer);
    this._repaintTimer = setTimeout((function() {
      this._getPopup() && this._getPopup().repaint();
    }).bind(this), 0);
  },
  isAdaptivityChanged: function() {
    var isAdaptiveMode = this._isShrinkView();
    var currentAdaptiveMode = this._currentAdaptiveMode;
    if (isAdaptiveMode !== currentAdaptiveMode) {
      this._currentAdaptiveMode = isAdaptiveMode;
      return void 0 !== currentAdaptiveMode;
    }
    return this.callBase();
  },
  _updateValue: function(preventDefaultValue) {
    var date = this.dateBoxValue();
    if (!date && !preventDefaultValue) {
      date = /* @__PURE__ */ new Date();
      ui_date_utils_default.normalizeTime(date);
    }
    this.callBase();
    if (this._timeView) {
      date && this._timeView.option("value", date);
      this._timeView.option("use24HourFormat", this._is24HourFormat());
    }
  },
  _isSmallScreen: function() {
    return getWidth(window23) <= SHRINK_VIEW_SCREEN_WIDTH;
  },
  _isShrinkView: function() {
    return !this.dateBox.option("showAnalogClock") || this.dateBox.option("adaptivityEnabled") && this._isSmallScreen();
  },
  _getBoxItems: function() {
    var items = [{
      ratio: 0,
      shrink: 0,
      baseSize: "auto",
      name: "calendar"
    }];
    if (!this._isShrinkView()) {
      items.push({
        ratio: 0,
        shrink: 0,
        baseSize: "auto",
        name: "time"
      });
    }
    return items;
  },
  renderPopupContent: function() {
    this.callBase();
    this._currentAdaptiveMode = this._isShrinkView();
    var $popupContent = this._getPopup().$content();
    this._box = this.dateBox._createComponent(renderer_default("<div>").appendTo($popupContent), box_default, {
      direction: "row",
      crossAlign: "stretch",
      items: this._getBoxItems(),
      itemTemplate: (function(data3, i, element) {
        var $container = renderer_default("<div>");
        switch (data3.name) {
          case "calendar":
            $container.append(this._widget.$element());
            if (this._isShrinkView()) {
              this._timeView.$element().addClass(DATEBOX_TIMEVIEW_SIDE_CLASS);
              $container.append(this._timeView.$element());
            }
            break;
          case "time":
            $container.append(this._timeView.$element());
            renderer_default(element).addClass(DATEBOX_TIMEVIEW_SIDE_CLASS);
        }
        return $container;
      }).bind(this)
    });
  },
  popupConfig: function(_popupConfig) {
    var calendarPopupConfig = this.callBase(_popupConfig);
    return extend(calendarPopupConfig, {
      width: "auto"
    });
  },
  _preventFocusOnPopup: function(e) {
    if (!renderer_default(e.target).hasClass("dx-texteditor-input")) {
      this.callBase.apply(this, arguments);
      if (!this.dateBox._hasFocusClass()) {
        this.dateBox.focus();
      }
    }
  },
  _updateDateTime: function(date) {
    var time = this._timeView.option("value");
    date.setHours(time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds());
    return date;
  },
  getValue: function() {
    var _this$_widget$option;
    var date = null !== (_this$_widget$option = this._widget.option("value")) && void 0 !== _this$_widget$option ? _this$_widget$option : this._widget.getContouredDate();
    date = date ? new Date(date) : /* @__PURE__ */ new Date();
    return this._updateDateTime(date);
  },
  dispose: function() {
    clearTimeout(this._removeMinWidthTimer);
    clearTimeout(this._repaintTimer);
    this.callBase();
  }
});
var ui_date_box_strategy_calendar_with_time_default = CalendarWithTimeStrategy;

// node_modules/devextreme/esm/ui/date_box/ui.date_box.strategy.list.js
var window24 = getWindow();
var DATE_FORMAT = "date";
var BOUNDARY_VALUES = {
  min: new Date(0, 0, 0, 0, 0),
  max: new Date(0, 0, 0, 23, 59)
};
var ListStrategy = ui_date_box_strategy_default.inherit({
  NAME: "List",
  supportedKeys: function() {
    return {
      space: noop2,
      home: noop2,
      end: noop2
    };
  },
  getDefaultOptions: function() {
    return extend(this.callBase(), {
      applyValueMode: "instantly"
    });
  },
  getDisplayFormat: function(displayFormat) {
    return displayFormat || "shorttime";
  },
  popupConfig: function(_popupConfig) {
    return _popupConfig;
  },
  getValue: function() {
    var selectedIndex = this._widget.option("selectedIndex");
    if (-1 === selectedIndex) {
      return this.dateBox.option("value");
    }
    var itemData = this._widgetItems[selectedIndex];
    return this._getDateByItemData(itemData);
  },
  useCurrentDateByDefault: function() {
    return true;
  },
  getDefaultDate: function() {
    return /* @__PURE__ */ new Date(null);
  },
  popupShowingHandler: function() {
    this.dateBox._dimensionChanged();
  },
  _renderWidget: function() {
    this.callBase();
    this._refreshItems();
  },
  _getWidgetName: function() {
    return list_light_default;
  },
  _getWidgetOptions: function() {
    return {
      itemTemplate: this._timeListItemTemplate.bind(this),
      onItemClick: this._listItemClickHandler.bind(this),
      tabIndex: -1,
      onFocusedItemChanged: this._refreshActiveDescendant.bind(this),
      selectionMode: "single"
    };
  },
  _refreshActiveDescendant: function(e) {
    this.dateBox.setAria("activedescendant", "");
    this.dateBox.setAria("activedescendant", e.actionValue);
  },
  _refreshItems: function() {
    this._widgetItems = this._getTimeListItems();
    this._widget.option("items", this._widgetItems);
  },
  renderOpenedState: function() {
    if (!this._widget) {
      return;
    }
    this._widget.option("focusedElement", null);
    this._setSelectedItemsByValue();
    if (this._widget.option("templatesRenderAsynchronously")) {
      this._asyncScrollTimeout = setTimeout(this._scrollToSelectedItem.bind(this));
    } else {
      this._scrollToSelectedItem();
    }
  },
  dispose: function() {
    this.callBase();
    clearTimeout(this._asyncScrollTimeout);
  },
  _updateValue: function() {
    if (!this._widget) {
      return;
    }
    this._refreshItems();
    this._setSelectedItemsByValue();
    this._scrollToSelectedItem();
  },
  _setSelectedItemsByValue: function() {
    var value2 = this.dateBoxValue();
    var dateIndex = this._getDateIndex(value2);
    if (-1 === dateIndex) {
      this._widget.option("selectedItems", []);
    } else {
      this._widget.option("selectedIndex", dateIndex);
    }
  },
  _scrollToSelectedItem: function() {
    this._widget.scrollToItem(this._widget.option("selectedIndex"));
  },
  _getDateIndex: function(date) {
    var result2 = -1;
    for (var i = 0, n = this._widgetItems.length; i < n; i++) {
      if (this._areDatesEqual(date, this._widgetItems[i])) {
        result2 = i;
        break;
      }
    }
    return result2;
  },
  _areDatesEqual: function(first, second) {
    return isDate(first) && isDate(second) && first.getHours() === second.getHours() && first.getMinutes() === second.getMinutes();
  },
  _getTimeListItems: function() {
    var min = this.dateBox.dateOption("min") || this._getBoundaryDate("min");
    var max = this.dateBox.dateOption("max") || this._getBoundaryDate("max");
    var value2 = this.dateBox.dateOption("value") || null;
    var delta = max - min;
    var minutes = min.getMinutes() % this.dateBox.option("interval");
    if (delta < 0) {
      return [];
    }
    if (delta > ui_date_utils_default.ONE_DAY) {
      delta = ui_date_utils_default.ONE_DAY;
    }
    if (value2 - min < ui_date_utils_default.ONE_DAY) {
      return this._getRangeItems(min, new Date(min), delta);
    }
    min = this._getBoundaryDate("min");
    min.setMinutes(minutes);
    if (value2 && Math.abs(value2 - max) < ui_date_utils_default.ONE_DAY) {
      delta = (60 * max.getHours() + Math.abs(max.getMinutes() - minutes)) * ui_date_utils_default.ONE_MINUTE;
    }
    return this._getRangeItems(min, new Date(min), delta);
  },
  _getRangeItems: function(startValue, currentValue, rangeDuration) {
    var rangeItems = [];
    var interval = this.dateBox.option("interval");
    while (currentValue - startValue <= rangeDuration) {
      rangeItems.push(new Date(currentValue));
      currentValue.setMinutes(currentValue.getMinutes() + interval);
    }
    return rangeItems;
  },
  _getBoundaryDate: function(boundary) {
    var boundaryValue = BOUNDARY_VALUES[boundary];
    var currentValue = new Date(ensureDefined(this.dateBox.dateOption("value"), 0));
    return new Date(currentValue.getFullYear(), currentValue.getMonth(), currentValue.getDate(), boundaryValue.getHours(), boundaryValue.getMinutes());
  },
  _timeListItemTemplate: function(itemData) {
    var displayFormat = this.dateBox.option("displayFormat");
    return date_default3.format(itemData, this.getDisplayFormat(displayFormat));
  },
  _listItemClickHandler: function(e) {
    if ("useButtons" === this.dateBox.option("applyValueMode")) {
      return;
    }
    var date = this._getDateByItemData(e.itemData);
    this.dateBox.option("opened", false);
    this.dateBoxValue(date, e.event);
  },
  _getDateByItemData: function(itemData) {
    var date = this.dateBox.option("value");
    var hours = itemData.getHours();
    var minutes = itemData.getMinutes();
    var seconds = itemData.getSeconds();
    var year = itemData.getFullYear();
    var month = itemData.getMonth();
    var day = itemData.getDate();
    if (date) {
      if (this.dateBox.option("dateSerializationFormat")) {
        date = date_serialization_default.deserializeDate(date);
      } else {
        date = new Date(date);
      }
      date.setHours(hours);
      date.setMinutes(minutes);
      date.setSeconds(seconds);
      date.setFullYear(year);
      date.setMonth(month);
      date.setDate(day);
    } else {
      date = new Date(year, month, day, hours, minutes, 0, 0);
    }
    return date;
  },
  getKeyboardListener: function() {
    return this._widget;
  },
  _updatePopupHeight: function() {
    var dropDownOptionsHeight = getSizeValue(this.dateBox.option("dropDownOptions.height"));
    if (void 0 === dropDownOptionsHeight || "auto" === dropDownOptionsHeight) {
      this.dateBox._setPopupOption("height", "auto");
      var popupHeight = getOuterHeight(this._widget.$element());
      var maxHeight = 0.45 * getHeight(window24);
      this.dateBox._setPopupOption("height", Math.min(popupHeight, maxHeight));
    }
    this.dateBox._timeList && this.dateBox._timeList.updateDimensions();
  },
  getParsedText: function(text, format2) {
    var value2 = this.callBase(text, format2);
    if (value2) {
      value2 = ui_date_utils_default.mergeDates(value2, /* @__PURE__ */ new Date(null), DATE_FORMAT);
    }
    return value2;
  }
});
var ui_date_box_strategy_list_default = ListStrategy;

// node_modules/devextreme/esm/ui/date_box/ui.date_box.base.js
var window25 = getWindow();
var DATEBOX_CLASS = "dx-datebox";
var DX_AUTO_WIDTH_CLASS = "dx-auto-width";
var DX_INVALID_BADGE_CLASS2 = "dx-show-invalid-badge";
var DX_CLEAR_BUTTON_CLASS = "dx-clear-button-area";
var DATEBOX_WRAPPER_CLASS = "dx-datebox-wrapper";
var DROPDOWNEDITOR_OVERLAY_CLASS = "dx-dropdowneditor-overlay";
var PICKER_TYPE = {
  calendar: "calendar",
  rollers: "rollers",
  list: "list",
  native: "native"
};
var TYPE2 = {
  date: "date",
  datetime: "datetime",
  time: "time"
};
var STRATEGY_NAME = {
  calendar: "Calendar",
  dateView: "DateView",
  native: "Native",
  calendarWithTime: "CalendarWithTime",
  list: "List"
};
var STRATEGY_CLASSES = {
  Calendar: ui_date_box_strategy_calendar_default,
  DateView: ui_date_box_strategy_date_view_default,
  Native: ui_date_box_strategy_native_default,
  CalendarWithTime: ui_date_box_strategy_calendar_with_time_default,
  List: ui_date_box_strategy_list_default
};
var DateBox = ui_drop_down_editor_default.inherit({
  _supportedKeys: function() {
    return extend(this.callBase(), this._strategy.supportedKeys());
  },
  _renderButtonContainers: function() {
    this.callBase.apply(this, arguments);
    this._strategy.customizeButtons();
  },
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      type: "date",
      showAnalogClock: true,
      value: null,
      dateSerializationFormat: void 0,
      min: void 0,
      max: void 0,
      displayFormat: null,
      interval: 30,
      disabledDates: null,
      pickerType: PICKER_TYPE.calendar,
      invalidDateMessage: message_default.format("dxDateBox-validation-datetime"),
      dateOutOfRangeMessage: message_default.format("validation-range"),
      applyButtonText: message_default.format("OK"),
      adaptivityEnabled: false,
      calendarOptions: {},
      useHiddenSubmitElement: true,
      _showValidationIcon: true
    });
  },
  _defaultOptionsRules: function() {
    return this.callBase().concat([{
      device: {
        platform: "ios"
      },
      options: {
        "dropDownOptions.showTitle": true
      }
    }, {
      device: {
        platform: "android"
      },
      options: {
        buttonsLocation: "bottom after"
      }
    }, {
      device: function() {
        var realDevice2 = devices_default.real();
        var platform = realDevice2.platform;
        return "ios" === platform || "android" === platform;
      },
      options: {
        pickerType: PICKER_TYPE.native
      }
    }, {
      device: {
        platform: "generic",
        deviceType: "desktop"
      },
      options: {
        buttonsLocation: "bottom after"
      }
    }]);
  },
  _initOptions: function(options2) {
    this._userOptions = extend({}, options2);
    this.callBase(options2);
    this._updatePickerOptions();
  },
  _updatePickerOptions: function() {
    var pickerType = this.option("pickerType");
    var type2 = this.option("type");
    if (pickerType === PICKER_TYPE.list && (type2 === TYPE2.datetime || type2 === TYPE2.date)) {
      pickerType = PICKER_TYPE.calendar;
    }
    if (type2 === TYPE2.time && pickerType === PICKER_TYPE.calendar) {
      pickerType = PICKER_TYPE.list;
    }
    this._pickerType = pickerType;
    this._setShowDropDownButtonOption();
  },
  _setShowDropDownButtonOption() {
    var platform = devices_default.real().platform;
    var isMozillaOnAndroid = "android" === platform && browser_default.mozilla;
    var isNativePickerType = this._isNativeType();
    var showDropDownButton = "generic" !== platform || !isNativePickerType;
    if (isNativePickerType && isMozillaOnAndroid) {
      showDropDownButton = false;
    }
    this.option({
      showDropDownButton
    });
  },
  _init: function() {
    this._initStrategy();
    this.option(extend({}, this._strategy.getDefaultOptions(), this._userOptions));
    delete this._userOptions;
    this.callBase();
  },
  _toLowerCaseFirstLetter: function(string) {
    return string.charAt(0).toLowerCase() + string.substr(1);
  },
  _initStrategy: function() {
    var strategyName = this._getStrategyName(this._getFormatType());
    var strategy4 = STRATEGY_CLASSES[strategyName];
    if (!(this._strategy && this._strategy.NAME === strategyName)) {
      this._strategy = new strategy4(this);
    }
  },
  _getFormatType: function() {
    var currentType = this.option("type");
    var isTime = /h|m|s/g.test(currentType);
    var isDate2 = /d|M|Y/g.test(currentType);
    var type2 = "";
    if (isDate2) {
      type2 += TYPE2.date;
    }
    if (isTime) {
      type2 += TYPE2.time;
    }
    return type2;
  },
  _getStrategyName: function(type2) {
    var pickerType = this._pickerType;
    if (pickerType === PICKER_TYPE.rollers) {
      return STRATEGY_NAME.dateView;
    } else if (pickerType === PICKER_TYPE.native) {
      return STRATEGY_NAME.native;
    }
    if (type2 === TYPE2.date) {
      return STRATEGY_NAME.calendar;
    }
    if (type2 === TYPE2.datetime) {
      return STRATEGY_NAME.calendarWithTime;
    }
    return STRATEGY_NAME.list;
  },
  _initMarkup: function() {
    this.$element().addClass(DATEBOX_CLASS);
    this.callBase();
    this._refreshFormatClass();
    this._refreshPickerTypeClass();
    this._strategy.renderInputMinMax(this._input());
  },
  _render: function() {
    this.callBase();
    this._formatValidationIcon();
  },
  _renderDimensions: function() {
    this.callBase();
    this.$element().toggleClass(DX_AUTO_WIDTH_CLASS, !this.option("width"));
    this._updatePopupWidth();
    this._updatePopupHeight();
  },
  _dimensionChanged: function() {
    this.callBase();
    this._updatePopupHeight();
  },
  _updatePopupHeight: function() {
    if (this._popup) {
      var _this$_strategy$_upda, _this$_strategy;
      null === (_this$_strategy$_upda = (_this$_strategy = this._strategy)._updatePopupHeight) || void 0 === _this$_strategy$_upda ? void 0 : _this$_strategy$_upda.call(_this$_strategy);
    }
  },
  _refreshFormatClass: function() {
    var $element = this.$element();
    each(TYPE2, function(_, item) {
      $element.removeClass(DATEBOX_CLASS + "-" + item);
    });
    $element.addClass(DATEBOX_CLASS + "-" + this.option("type"));
  },
  _refreshPickerTypeClass: function() {
    var $element = this.$element();
    each(PICKER_TYPE, function(_, item) {
      $element.removeClass(DATEBOX_CLASS + "-" + item);
    });
    $element.addClass(DATEBOX_CLASS + "-" + this._pickerType);
  },
  _formatValidationIcon: function() {
    if (!hasWindow()) {
      return;
    }
    var inputElement = this._input().get(0);
    var isRtlEnabled = this.option("rtlEnabled");
    var clearButtonWidth = this._getClearButtonWidth();
    var longestElementDimensions = this._getLongestElementDimensions();
    var curWidth = parseFloat(window25.getComputedStyle(inputElement).width) - clearButtonWidth;
    var shouldHideValidationIcon = longestElementDimensions.width > curWidth;
    var style = inputElement.style;
    this.$element().toggleClass(DX_INVALID_BADGE_CLASS2, !shouldHideValidationIcon && this.option("_showValidationIcon"));
    if (shouldHideValidationIcon) {
      if (void 0 === this._storedPadding) {
        this._storedPadding = isRtlEnabled ? longestElementDimensions.leftPadding : longestElementDimensions.rightPadding;
      }
      isRtlEnabled ? style.paddingLeft = 0 : style.paddingRight = 0;
    } else {
      isRtlEnabled ? style.paddingLeft = this._storedPadding + "px" : style.paddingRight = this._storedPadding + "px";
    }
  },
  _getClearButtonWidth: function() {
    var clearButtonWidth = 0;
    if (this._isClearButtonVisible() && "" === this._input().val()) {
      var clearButtonElement = this.$element().find("." + DX_CLEAR_BUTTON_CLASS).get(0);
      clearButtonWidth = parseFloat(window25.getComputedStyle(clearButtonElement).width);
    }
    return clearButtonWidth;
  },
  _getLongestElementDimensions: function() {
    var format2 = this._strategy.getDisplayFormat(this.option("displayFormat"));
    var longestValue = date_default3.format(ui_date_utils_default.getLongestDate(format2, date_default3.getMonthNames(), date_default3.getDayNames()), format2);
    var $input = this._input();
    var inputElement = $input.get(0);
    var $longestValueElement = createTextElementHiddenCopy($input, longestValue);
    var isPaddingStored = void 0 !== this._storedPadding;
    var storedPadding = !isPaddingStored ? 0 : this._storedPadding;
    $longestValueElement.appendTo(this.$element());
    var elementWidth = parseFloat(window25.getComputedStyle($longestValueElement.get(0)).width);
    var rightPadding = parseFloat(window25.getComputedStyle(inputElement).paddingRight);
    var leftPadding = parseFloat(window25.getComputedStyle(inputElement).paddingLeft);
    var necessaryWidth = elementWidth + leftPadding + rightPadding + storedPadding;
    $longestValueElement.remove();
    return {
      width: necessaryWidth,
      leftPadding,
      rightPadding
    };
  },
  _getKeyboardListeners() {
    return this.callBase().concat([this._strategy && this._strategy.getKeyboardListener()]);
  },
  _renderPopup: function() {
    this.callBase();
    this._popup.$wrapper().addClass(DATEBOX_WRAPPER_CLASS);
    this._renderPopupWrapper();
  },
  _getPopupToolbarItems() {
    var _this$_strategy$_getP, _this$_strategy$_getP2, _this$_strategy2;
    var defaultItems = this.callBase();
    return null !== (_this$_strategy$_getP = null === (_this$_strategy$_getP2 = (_this$_strategy2 = this._strategy)._getPopupToolbarItems) || void 0 === _this$_strategy$_getP2 ? void 0 : _this$_strategy$_getP2.call(_this$_strategy2, defaultItems)) && void 0 !== _this$_strategy$_getP ? _this$_strategy$_getP : defaultItems;
  },
  _popupConfig: function() {
    var popupConfig = this.callBase();
    return extend(this._strategy.popupConfig(popupConfig), {
      title: this._getPopupTitle(),
      dragEnabled: false
    });
  },
  _renderPopupWrapper: function() {
    if (!this._popup) {
      return;
    }
    var $element = this.$element();
    var classPostfixes = extend({}, TYPE2, PICKER_TYPE);
    each(classPostfixes, (function(_, item) {
      $element.removeClass(DATEBOX_WRAPPER_CLASS + "-" + item);
    }).bind(this));
    this._popup.$wrapper().addClass(DATEBOX_WRAPPER_CLASS + "-" + this.option("type")).addClass(DATEBOX_WRAPPER_CLASS + "-" + this._pickerType).addClass(DROPDOWNEDITOR_OVERLAY_CLASS);
  },
  _renderPopupContent: function() {
    this.callBase();
    this._strategy.renderPopupContent();
  },
  _popupShowingHandler: function() {
    this.callBase();
    this._strategy.popupShowingHandler();
  },
  _popupShownHandler: function() {
    this.callBase();
    this._strategy.renderOpenedState();
  },
  _popupHiddenHandler: function() {
    this.callBase();
    this._strategy.renderOpenedState();
    this._strategy.popupHiddenHandler();
  },
  _visibilityChanged: function(visible2) {
    if (visible2) {
      this._formatValidationIcon();
    }
  },
  _clearValueHandler: function(e) {
    this.option("text", "");
    this.callBase(e);
  },
  _readOnlyPropValue: function() {
    if (this._pickerType === PICKER_TYPE.rollers) {
      return true;
    }
    var platform = devices_default.real().platform;
    var isCustomValueDisabled = this._isNativeType() && ("ios" === platform || "android" === platform);
    if (isCustomValueDisabled) {
      return this.option("readOnly");
    }
    return this.callBase();
  },
  _isClearButtonVisible: function() {
    return this.callBase() && !this._isNativeType();
  },
  _renderValue: function() {
    var value2 = this.dateOption("value");
    this.option("text", this._getDisplayedText(value2));
    this._strategy.renderValue();
    return this.callBase();
  },
  _setSubmitValue: function() {
    var value2 = this.dateOption("value");
    var dateSerializationFormat = this.option("dateSerializationFormat");
    var submitFormat = ui_date_utils_default.SUBMIT_FORMATS_MAP[this.option("type")];
    var submitValue = dateSerializationFormat ? date_serialization_default.serializeDate(value2, dateSerializationFormat) : ui_date_utils_default.toStandardDateFormat(value2, submitFormat);
    this._getSubmitElement().val(submitValue);
  },
  _getDisplayedText: function(value2) {
    var mode = this.option("mode");
    var displayedText;
    if ("text" === mode) {
      var displayFormat = this._strategy.getDisplayFormat(this.option("displayFormat"));
      displayedText = date_default3.format(value2, displayFormat);
    } else {
      var format2 = this._getFormatByMode(mode);
      if (format2) {
        displayedText = date_default3.format(value2, format2);
      } else {
        displayedText = ui_date_utils_default.toStandardDateFormat(value2, mode);
      }
    }
    return displayedText;
  },
  _getFormatByMode: function(mode) {
    return inputType(mode) ? null : ui_date_utils_default.FORMATS_MAP[mode];
  },
  _valueChangeEventHandler: function(e) {
    var {
      text,
      type: type2,
      validationError
    } = this.option();
    var currentValue = this.dateOption("value");
    if (text === this._getDisplayedText(currentValue)) {
      this._recallInternalValidation(currentValue, validationError);
      return;
    }
    var parsedDate = this._getParsedDate(text);
    var value2 = null !== currentValue && void 0 !== currentValue ? currentValue : this._getDateByDefault();
    var newValue = ui_date_utils_default.mergeDates(value2, parsedDate, type2);
    var date = parsedDate && "time" === type2 ? newValue : parsedDate;
    if (this._applyInternalValidation(date).isValid) {
      var displayedText = this._getDisplayedText(newValue);
      if (value2 && newValue && value2.getTime() === newValue.getTime() && displayedText !== text) {
        this._renderValue();
      } else {
        this.dateValue(newValue, e);
      }
    }
  },
  _recallInternalValidation(value2, validationError) {
    if (!validationError || validationError.editorSpecific) {
      this._applyInternalValidation(value2);
      this._applyCustomValidation(value2);
    }
  },
  _getDateByDefault: function() {
    return this._strategy.useCurrentDateByDefault() && this._strategy.getDefaultDate();
  },
  _getParsedDate: function(text) {
    var displayFormat = this._strategy.getDisplayFormat(this.option("displayFormat"));
    var parsedText = this._strategy.getParsedText(text, displayFormat);
    return null !== parsedText && void 0 !== parsedText ? parsedText : void 0;
  },
  _applyInternalValidation(value2) {
    var text = this.option("text");
    var hasText = !!text && null !== value2;
    var isDate2 = !!value2 && isDate(value2) && !isNaN(value2.getTime());
    var isDateInRange = isDate2 && date_default.dateInRange(value2, this.dateOption("min"), this.dateOption("max"), this.option("type"));
    var isValid = !hasText && !value2 || isDateInRange;
    var validationMessage = "";
    if (!isDate2) {
      validationMessage = this.option("invalidDateMessage");
    } else if (!isDateInRange) {
      validationMessage = this.option("dateOutOfRangeMessage");
    }
    this._updateInternalValidationState(isValid, validationMessage);
    return {
      isValid,
      isDate: isDate2
    };
  },
  _updateInternalValidationState(isValid, validationMessage) {
    this.option({
      isValid,
      validationError: isValid ? null : {
        editorSpecific: true,
        message: validationMessage
      }
    });
  },
  _applyCustomValidation: function(value2) {
    this.validationRequest.fire({
      editor: this,
      value: this._serializeDate(value2)
    });
  },
  _isValueChanged: function(newValue) {
    var oldValue = this.dateOption("value");
    var oldTime = oldValue && oldValue.getTime();
    var newTime = newValue && newValue.getTime();
    return oldTime !== newTime;
  },
  _isTextChanged: function(newValue) {
    var oldText = this.option("text");
    var newText = newValue && this._getDisplayedText(newValue) || "";
    return oldText !== newText;
  },
  _renderProps: function() {
    this.callBase();
    this._input().attr("autocomplete", "off");
  },
  _renderOpenedState: function() {
    if (!this._isNativeType()) {
      this.callBase();
    }
    if (this._strategy.isAdaptivityChanged()) {
      this._refreshStrategy();
    }
  },
  _getPopupTitle: function() {
    var placeholder = this.option("placeholder");
    if (placeholder) {
      return placeholder;
    }
    var type2 = this.option("type");
    if (type2 === TYPE2.time) {
      return message_default.format("dxDateBox-simulatedDataPickerTitleTime");
    }
    if (type2 === TYPE2.date || type2 === TYPE2.datetime) {
      return message_default.format("dxDateBox-simulatedDataPickerTitleDate");
    }
    return "";
  },
  _refreshStrategy: function() {
    this._strategy.dispose();
    this._initStrategy();
    this.option(this._strategy.getDefaultOptions());
    this._refresh();
  },
  _applyButtonHandler: function(e) {
    var value2 = this._strategy.getValue();
    this.dateValue(value2, e.event);
    this.callBase();
  },
  _dispose: function() {
    var _this$_strategy3;
    this.callBase();
    null === (_this$_strategy3 = this._strategy) || void 0 === _this$_strategy3 ? void 0 : _this$_strategy3.dispose();
  },
  _isNativeType: function() {
    return this._pickerType === PICKER_TYPE.native;
  },
  _updatePopupTitle: function() {
    var _this$_popup;
    null === (_this$_popup = this._popup) || void 0 === _this$_popup ? void 0 : _this$_popup.option("title", this._getPopupTitle());
  },
  _optionChanged: function(args) {
    switch (args.name) {
      case "showClearButton":
      case "buttons":
        this.callBase.apply(this, arguments);
        this._formatValidationIcon();
        break;
      case "pickerType":
        this._updatePickerOptions({
          pickerType: args.value
        });
        this._refreshStrategy();
        this._refreshPickerTypeClass();
        this._invalidate();
        break;
      case "type":
        this._updatePickerOptions({
          format: args.value
        });
        this._refreshStrategy();
        this._refreshFormatClass();
        this._renderPopupWrapper();
        this._formatValidationIcon();
        this._updateValue();
        break;
      case "placeholder":
        this.callBase.apply(this, arguments);
        this._updatePopupTitle();
        break;
      case "min":
      case "max":
        var isValid = this.option("isValid");
        this._applyInternalValidation(this.dateOption("value"));
        if (!isValid) {
          this._applyCustomValidation(this.dateOption("value"));
        }
        this._invalidate();
        break;
      case "dateSerializationFormat":
      case "interval":
      case "disabledDates":
      case "calendarOptions":
        this._invalidate();
        break;
      case "displayFormat":
        this.option("text", this._getDisplayedText(this.dateOption("value")));
        this._renderInputValue();
        break;
      case "text":
        this._strategy.textChangedHandler(args.value);
        this.callBase.apply(this, arguments);
        break;
      case "isValid":
        this.callBase.apply(this, arguments);
        this._formatValidationIcon();
        break;
      case "showDropDownButton":
        this._formatValidationIcon();
        this.callBase.apply(this, arguments);
        break;
      case "readOnly":
        this.callBase.apply(this, arguments);
        this._formatValidationIcon();
        break;
      case "todayButtonText":
        this._setPopupOption("toolbarItems", this._getPopupToolbarItems());
        break;
      case "invalidDateMessage":
      case "dateOutOfRangeMessage":
      case "adaptivityEnabled":
      case "showAnalogClock":
      case "_showValidationIcon":
        break;
      default:
        this.callBase.apply(this, arguments);
    }
  },
  _getSerializationFormat: function() {
    var value2 = this.option("value");
    if (this.option("dateSerializationFormat") && config_default().forceIsoDateParsing) {
      return this.option("dateSerializationFormat");
    }
    if (isNumeric(value2)) {
      return "number";
    }
    if (!isString(value2)) {
      return;
    }
    return date_serialization_default.getDateSerializationFormat(value2);
  },
  _updateValue: function(value2) {
    this.callBase();
    this._applyInternalValidation(null !== value2 && void 0 !== value2 ? value2 : this.dateOption("value"));
  },
  dateValue: function(value2, dxEvent) {
    var isValueChanged = this._isValueChanged(value2);
    if (isValueChanged && dxEvent) {
      this._saveValueChangeEvent(dxEvent);
    }
    if (!isValueChanged) {
      if (this._isTextChanged(value2)) {
        this._updateValue(value2);
      } else if ("" === this.option("text")) {
        this._applyCustomValidation(value2);
      }
    }
    return this.dateOption("value", value2);
  },
  dateOption: function(optionName, value2) {
    if (1 === arguments.length) {
      return date_serialization_default.deserializeDate(this.option(optionName));
    }
    this.option(optionName, this._serializeDate(value2));
  },
  _serializeDate: function(date) {
    var serializationFormat = this._getSerializationFormat();
    return date_serialization_default.serializeDate(date, serializationFormat);
  },
  _clearValue: function() {
    var value2 = this.option("value");
    this.callBase();
    if (null === value2) {
      this._applyCustomValidation(null);
    }
  },
  clear: function() {
    var value2 = this.option("value");
    this.callBase();
    if (null === value2) {
      this._applyInternalValidation(null);
    }
  }
});
var ui_date_box_base_default = DateBox;

// node_modules/devextreme/esm/ui/date_box/ui.date_box.mask.js
var MASK_EVENT_NAMESPACE2 = "dateBoxMask";
var FORWARD = 1;
var BACKWARD = -1;
var DateBoxMask = ui_date_box_base_default.inherit({
  _supportedKeys(e) {
    var originalHandlers = this.callBase(e);
    var callOriginalHandler = (e2) => {
      var originalHandler = originalHandlers[normalizeKeyName(e2)];
      return originalHandler && originalHandler.apply(this, [e2]);
    };
    var applyHandler = (e2, maskHandler) => {
      if (this._shouldUseOriginalHandler(e2)) {
        return callOriginalHandler.apply(this, [e2]);
      } else {
        return maskHandler.apply(this, [e2]);
      }
    };
    return extend({}, originalHandlers, {
      del: (e2) => applyHandler(e2, (event) => {
        this._revertPart(FORWARD);
        this._isAllSelected() || event.preventDefault();
      }),
      backspace: (e2) => applyHandler(e2, (event) => {
        this._revertPart(BACKWARD);
        this._isAllSelected() || event.preventDefault();
      }),
      home: (e2) => applyHandler(e2, (event) => {
        this._selectFirstPart();
        event.preventDefault();
      }),
      end: (e2) => applyHandler(e2, (event) => {
        this._selectLastPart();
        event.preventDefault();
      }),
      escape: (e2) => applyHandler(e2, (event) => {
        this._revertChanges(event);
      }),
      enter: (e2) => applyHandler(e2, () => {
        this._enterHandler();
      }),
      leftArrow: (e2) => applyHandler(e2, (event) => {
        this._selectNextPart(BACKWARD);
        event.preventDefault();
      }),
      rightArrow: (e2) => applyHandler(e2, (event) => {
        this._selectNextPart(FORWARD);
        event.preventDefault();
      }),
      upArrow: (e2) => applyHandler(e2, (event) => {
        this._upDownArrowHandler(FORWARD);
        event.preventDefault();
      }),
      downArrow: (e2) => applyHandler(e2, (event) => {
        this._upDownArrowHandler(BACKWARD);
        event.preventDefault();
      })
    });
  },
  _shouldUseOriginalHandler(e) {
    var isNotDeletingInCalendar = this.option("opened") && e && -1 === ["backspace", "del"].indexOf(normalizeKeyName(e));
    return !this._useMaskBehavior() || isNotDeletingInCalendar || e && e.altKey;
  },
  _upDownArrowHandler(step) {
    this._setNewDateIfEmpty();
    var originalValue = this._getActivePartValue(this._initialMaskValue);
    var currentValue = this._getActivePartValue();
    var delta = currentValue - originalValue;
    this._loadMaskValue(this._initialMaskValue);
    this._changePartValue(delta + step, true);
  },
  _changePartValue(step, lockOtherParts) {
    var isAmPmPartActive = "a" === this._getActivePartProp("pattern");
    if (isAmPmPartActive) {
      this._toggleAmPm();
    } else {
      this._partIncrease(step, lockOtherParts);
    }
  },
  _toggleAmPm() {
    var currentValue = this._getActivePartProp("text");
    var indexOfCurrentValue = default_date_names_default.getPeriodNames().indexOf(currentValue);
    var newValue = 1 ^ indexOfCurrentValue;
    this._setActivePartValue(newValue);
  },
  _getDefaultOptions() {
    return extend(this.callBase(), {
      useMaskBehavior: false,
      emptyDateValue: new Date(2e3, 0, 1, 0, 0, 0)
    });
  },
  _isSingleCharKey(_ref) {
    var {
      originalEvent,
      alt
    } = _ref;
    var key = originalEvent.data || originalEvent.key;
    return "string" === typeof key && 1 === key.length && !alt && !isCommandKeyPressed(originalEvent);
  },
  _isSingleDigitKey(e) {
    var _e$originalEvent;
    var data3 = null === (_e$originalEvent = e.originalEvent) || void 0 === _e$originalEvent ? void 0 : _e$originalEvent.data;
    return 1 === (null === data3 || void 0 === data3 ? void 0 : data3.length) && parseInt(data3, 10);
  },
  _useBeforeInputEvent: function() {
    return devices_default.real().android;
  },
  _keyInputHandler(e, key) {
    var oldInputValue = this._input().val();
    this._processInputKey(key);
    e.preventDefault();
    var isValueChanged = oldInputValue !== this._input().val();
    isValueChanged && events_engine_default.trigger(this._input(), "input");
  },
  _keyboardHandler(e) {
    var key = e.originalEvent.key;
    var result2 = this.callBase(e);
    if (!this._useMaskBehavior() || this._useBeforeInputEvent()) {
      return result2;
    }
    if (browser_default.chrome && "Process" === e.key && 0 === e.code.indexOf("Digit")) {
      key = e.code.replace("Digit", "");
      this._processInputKey(key);
      this._maskInputHandler = () => {
        this._renderSelectedPart();
      };
    } else if (this._isSingleCharKey(e)) {
      this._keyInputHandler(e.originalEvent, key);
    }
    return result2;
  },
  _maskBeforeInputHandler(e) {
    this._maskInputHandler = null;
    var {
      inputType: inputType2
    } = e.originalEvent;
    if ("insertCompositionText" === inputType2) {
      this._maskInputHandler = () => {
        this._renderSelectedPart();
      };
    }
    var isBackwardDeletion = "deleteContentBackward" === inputType2;
    var isForwardDeletion = "deleteContentForward" === inputType2;
    if (isBackwardDeletion || isForwardDeletion) {
      var direction = isBackwardDeletion ? BACKWARD : FORWARD;
      this._maskInputHandler = () => {
        this._revertPart();
        this._selectNextPart(direction);
      };
    }
    if (!this._useMaskBehavior() || !this._isSingleCharKey(e)) {
      return;
    }
    var key = e.originalEvent.data;
    this._keyInputHandler(e, key);
    return true;
  },
  _keyPressHandler(e) {
    var {
      originalEvent: event
    } = e;
    if ("insertCompositionText" === (null === event || void 0 === event ? void 0 : event.inputType) && this._isSingleDigitKey(e)) {
      this._processInputKey(event.data);
      this._renderDisplayText(this._getDisplayedText(this._maskValue));
      this._selectNextPart();
    }
    this.callBase(e);
    if (this._maskInputHandler) {
      this._maskInputHandler();
      this._maskInputHandler = null;
    }
  },
  _processInputKey(key) {
    if (this._isAllSelected()) {
      this._activePartIndex = 0;
    }
    this._setNewDateIfEmpty();
    if (isNaN(parseInt(key))) {
      this._searchString(key);
    } else {
      this._searchNumber(key);
    }
  },
  _isAllSelected() {
    var caret3 = this._caret();
    return caret3.end - caret3.start === this.option("text").length;
  },
  _getFormatPattern() {
    if (this._formatPattern) {
      return this._formatPattern;
    }
    var format2 = this._strategy.getDisplayFormat(this.option("displayFormat"));
    var isLDMLPattern = isString(format2) && !date_default3._getPatternByFormat(format2);
    if (isLDMLPattern) {
      this._formatPattern = format2;
    } else {
      this._formatPattern = getFormat2(function(value2) {
        return date_default3.format(value2, format2);
      });
    }
    return this._formatPattern;
  },
  _setNewDateIfEmpty() {
    if (!this._maskValue) {
      var value2 = "time" === this.option("type") ? /* @__PURE__ */ new Date(null) : /* @__PURE__ */ new Date();
      this._maskValue = value2;
      this._initialMaskValue = value2;
      this._renderDateParts();
    }
  },
  _partLimitsReached(max) {
    var maxLimitLength = String(max).length;
    var formatLength = this._getActivePartProp("pattern").length;
    var isShortFormat = 1 === formatLength;
    var maxSearchLength = isShortFormat ? maxLimitLength : Math.min(formatLength, maxLimitLength);
    var isLengthExceeded = this._searchValue.length === maxSearchLength;
    var isValueOverflowed = parseInt(this._searchValue + "0") > max;
    return isLengthExceeded || isValueOverflowed;
  },
  _searchNumber(char) {
    var {
      max
    } = this._getActivePartLimits();
    var maxLimitLength = String(max).length;
    this._searchValue = (this._searchValue + char).substr(-maxLimitLength);
    if (isNaN(this._searchValue)) {
      this._searchValue = char;
    }
    this._setActivePartValue(this._searchValue);
    if (this._partLimitsReached(max)) {
      this._selectNextPart(FORWARD);
    }
  },
  _searchString(char) {
    if (!isNaN(parseInt(this._getActivePartProp("text")))) {
      return;
    }
    var limits = this._getActivePartProp("limits")(this._maskValue);
    var startString = this._searchValue + char.toLowerCase();
    var endLimit = limits.max - limits.min;
    for (var i = 0; i <= endLimit; i++) {
      this._loadMaskValue(this._initialMaskValue);
      this._changePartValue(i + 1);
      if (0 === this._getActivePartProp("text").toLowerCase().indexOf(startString)) {
        this._searchValue = startString;
        return;
      }
    }
    this._setNewDateIfEmpty();
    if (this._searchValue) {
      this._clearSearchValue();
      this._searchString(char);
    }
  },
  _clearSearchValue() {
    this._searchValue = "";
  },
  _revertPart: function(direction) {
    if (!this._isAllSelected()) {
      var actual = this._getActivePartValue(this.option("emptyDateValue"));
      this._setActivePartValue(actual);
      this._selectNextPart(direction);
    }
    this._clearSearchValue();
  },
  _useMaskBehavior() {
    return this.option("useMaskBehavior") && "text" === this.option("mode");
  },
  _prepareRegExpInfo() {
    this._regExpInfo = getRegExpInfo(this._getFormatPattern(), date_default3);
    var regexp = this._regExpInfo.regexp;
    var source = regexp.source;
    var flags = regexp.flags;
    var quantifierRegexp = new RegExp(/(\{[0-9]+,?[0-9]*\})/);
    var convertedSource = source.split(quantifierRegexp).map((sourcePart) => quantifierRegexp.test(sourcePart) ? sourcePart : number_default2.convertDigits(sourcePart, false)).join("");
    this._regExpInfo.regexp = new RegExp(convertedSource, flags);
  },
  _initMaskState() {
    this._activePartIndex = 0;
    this._formatPattern = null;
    this._prepareRegExpInfo();
    this._loadMaskValue();
  },
  _renderMask() {
    this.callBase();
    this._detachMaskEvents();
    this._clearMaskState();
    if (this._useMaskBehavior()) {
      this._attachMaskEvents();
      this._initMaskState();
      this._renderDateParts();
    }
  },
  _renderDateParts() {
    if (!this._useMaskBehavior()) {
      return;
    }
    var text = this.option("text") || this._getDisplayedText(this._maskValue);
    if (text) {
      this._dateParts = renderDateParts(text, this._regExpInfo);
      if (!this._input().is(":hidden")) {
        this._selectNextPart();
      }
    }
  },
  _detachMaskEvents() {
    events_engine_default.off(this._input(), "." + MASK_EVENT_NAMESPACE2);
  },
  _attachMaskEvents() {
    events_engine_default.on(this._input(), addNamespace2("dxclick", MASK_EVENT_NAMESPACE2), this._maskClickHandler.bind(this));
    events_engine_default.on(this._input(), addNamespace2("paste", MASK_EVENT_NAMESPACE2), this._maskPasteHandler.bind(this));
    events_engine_default.on(this._input(), addNamespace2("drop", MASK_EVENT_NAMESPACE2), () => {
      this._renderSelectedPart();
    });
    events_engine_default.on(this._input(), addNamespace2("compositionend", MASK_EVENT_NAMESPACE2), this._maskCompositionEndHandler.bind(this));
    if (this._useBeforeInputEvent()) {
      events_engine_default.on(this._input(), addNamespace2("beforeinput", MASK_EVENT_NAMESPACE2), this._maskBeforeInputHandler.bind(this));
    }
  },
  _renderSelectedPart() {
    this._renderDisplayText(this._getDisplayedText(this._maskValue));
    this._selectNextPart();
  },
  _selectLastPart() {
    if (this.option("text")) {
      this._activePartIndex = this._dateParts.length;
      this._selectNextPart(BACKWARD);
    }
  },
  _selectFirstPart() {
    if (this.option("text")) {
      this._activePartIndex = -1;
      this._selectNextPart(FORWARD);
    }
  },
  _onMouseWheel(e) {
    if (this._useMaskBehavior()) {
      this._partIncrease(e.delta > 0 ? FORWARD : BACKWARD, e);
    }
  },
  _selectNextPart() {
    var step = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
    if (!this.option("text") || this._disposed) {
      return;
    }
    if (step) {
      this._initialMaskValue = new Date(this._maskValue);
    }
    var index2 = fitIntoRange(this._activePartIndex + step, 0, this._dateParts.length - 1);
    if (this._dateParts[index2].isStub) {
      var isBoundaryIndex = 0 === index2 && step < 0 || index2 === this._dateParts.length - 1 && step > 0;
      if (!isBoundaryIndex) {
        this._selectNextPart(step >= 0 ? step + 1 : step - 1);
        return;
      } else {
        index2 = this._activePartIndex;
      }
    }
    if (this._activePartIndex !== index2) {
      this._clearSearchValue();
    }
    this._activePartIndex = index2;
    this._caret(this._getActivePartProp("caret"));
  },
  _getRealLimitsPattern() {
    if ("d" === this._getActivePartProp("pattern")[0]) {
      return "dM";
    }
  },
  _getActivePartLimits(lockOtherParts) {
    var limitFunction = this._getActivePartProp("limits");
    return limitFunction(this._maskValue, lockOtherParts && this._getRealLimitsPattern());
  },
  _getActivePartValue(dateValue) {
    dateValue = dateValue || this._maskValue;
    var getter = this._getActivePartProp("getter");
    return isFunction(getter) ? getter(dateValue) : dateValue[getter]();
  },
  _addLeadingZeroes(value2) {
    var zeroes = this._searchValue.match(/^0+/);
    var limits = this._getActivePartLimits();
    var maxLimitLength = String(limits.max).length;
    return ((zeroes && zeroes[0] || "") + String(value2)).substr(-maxLimitLength);
  },
  _setActivePartValue(value2, dateValue) {
    dateValue = dateValue || this._maskValue;
    var setter = this._getActivePartProp("setter");
    var limits = this._getActivePartLimits();
    value2 = inRange(value2, limits.min, limits.max) ? value2 : value2 % 10;
    value2 = this._addLeadingZeroes(fitIntoRange(value2, limits.min, limits.max));
    isFunction(setter) ? setter(dateValue, value2) : dateValue[setter](value2);
    this._renderDisplayText(this._getDisplayedText(dateValue));
    this._renderDateParts();
  },
  _getActivePartProp(property) {
    if (!this._dateParts || !this._dateParts[this._activePartIndex]) {
      return;
    }
    return this._dateParts[this._activePartIndex][property];
  },
  _loadMaskValue() {
    var value2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.dateOption("value");
    this._maskValue = value2 && new Date(value2);
    this._initialMaskValue = value2 && new Date(value2);
  },
  _saveMaskValue() {
    var value2 = this._maskValue && new Date(this._maskValue);
    if (value2 && "date" === this.option("type")) {
      value2.setHours(0, 0, 0, 0);
    }
    this._initialMaskValue = new Date(value2);
    this.dateOption("value", value2);
  },
  _revertChanges() {
    this._loadMaskValue();
    this._renderDisplayText(this._getDisplayedText(this._maskValue));
    this._renderDateParts();
  },
  _renderDisplayText(text) {
    this.callBase(text);
    if (this._useMaskBehavior()) {
      this.option("text", text);
    }
  },
  _partIncrease(step, lockOtherParts) {
    this._setNewDateIfEmpty();
    var {
      max,
      min
    } = this._getActivePartLimits(lockOtherParts);
    var newValue = step + this._getActivePartValue();
    if (newValue > max) {
      newValue = this._applyLimits(newValue, {
        limitBase: min,
        limitClosest: max,
        max
      });
    } else if (newValue < min) {
      newValue = this._applyLimits(newValue, {
        limitBase: max,
        limitClosest: min,
        max
      });
    }
    this._setActivePartValue(newValue);
  },
  _applyLimits(newValue, _ref2) {
    var {
      limitBase,
      limitClosest,
      max
    } = _ref2;
    var delta = (newValue - limitClosest) % max;
    return delta ? limitBase + delta - 1 * sign(delta) : limitClosest;
  },
  _maskClickHandler() {
    this._loadMaskValue(this._maskValue);
    if (this.option("text")) {
      this._activePartIndex = getDatePartIndexByPosition(this._dateParts, this._caret().start);
      if (!this._isAllSelected()) {
        if (isDefined(this._activePartIndex)) {
          this._caret(this._getActivePartProp("caret"));
        } else {
          this._selectLastPart();
        }
      }
    }
  },
  _maskCompositionEndHandler(e) {
    this._input().val(this._getDisplayedText(this._maskValue));
    this._selectNextPart();
    this._maskInputHandler = () => {
      this._renderSelectedPart();
    };
  },
  _maskPasteHandler(e) {
    var newText = this._replaceSelectedText(this.option("text"), this._caret(), clipboardText(e));
    var date = date_default3.parse(newText, this._getFormatPattern());
    if (date && this._isDateValid(date)) {
      this._maskValue = date;
      this._renderDisplayText(this._getDisplayedText(this._maskValue));
      this._renderDateParts();
      this._selectNextPart();
    }
    e.preventDefault();
  },
  _isDateValid: (date) => isDate(date) && !isNaN(date),
  _isValueDirty() {
    var value2 = this.dateOption("value");
    return (this._maskValue && this._maskValue.getTime()) !== (value2 && value2.getTime());
  },
  _fireChangeEvent() {
    this._clearSearchValue();
    if (this._isValueDirty()) {
      events_engine_default.trigger(this._input(), "change");
    }
  },
  _enterHandler() {
    this._fireChangeEvent();
    this._selectNextPart(FORWARD);
  },
  _focusOutHandler(e) {
    var shouldFireChangeEvent = this._useMaskBehavior() && !e.isDefaultPrevented();
    if (shouldFireChangeEvent) {
      this._fireChangeEvent();
      this.callBase(e);
      this._selectFirstPart(e);
    } else {
      this.callBase(e);
    }
  },
  _valueChangeEventHandler(e) {
    var text = this.option("text");
    if (this._useMaskBehavior()) {
      this._saveValueChangeEvent(e);
      if (!text) {
        this._maskValue = null;
      } else if (null === this._maskValue) {
        this._loadMaskValue(text);
      }
      this._saveMaskValue();
    } else {
      this.callBase(e);
    }
  },
  _optionChanged(args) {
    switch (args.name) {
      case "useMaskBehavior":
        this._renderMask();
        break;
      case "displayFormat":
      case "mode":
        this.callBase(args);
        this._renderMask();
        break;
      case "value":
        this._loadMaskValue();
        this.callBase(args);
        this._renderDateParts();
        break;
      case "emptyDateValue":
        break;
      default:
        this.callBase(args);
    }
  },
  _clearMaskState() {
    this._clearSearchValue();
    delete this._dateParts;
    delete this._activePartIndex;
    delete this._maskValue;
  },
  clear() {
    this._clearMaskState();
    this._activePartIndex = 0;
    this.callBase();
  },
  _clean() {
    this.callBase();
    this._detachMaskEvents();
    this._clearMaskState();
  }
});
var ui_date_box_mask_default = DateBoxMask;

// node_modules/devextreme/esm/ui/date_box/ui.date_box.js
component_registrator_default("dxDateBox", ui_date_box_mask_default);

// node_modules/devextreme/esm/ui/shared/ui.editor_factory_mixin.js
var {
  isWrapped: isWrapped2
} = variable_wrapper_default;
var CHECKBOX_SIZE_CLASS = "checkbox-size";
var EDITOR_INLINE_BLOCK = "dx-editor-inline-block";
var EditorFactoryMixin = /* @__PURE__ */ function() {
  var getResultConfig = function(config3, options2) {
    return extend(config3, {
      readOnly: options2.readOnly,
      placeholder: options2.placeholder,
      inputAttr: {
        id: options2.id,
        "aria-labelledby": options2["aria-labelledby"]
      },
      tabIndex: options2.tabIndex
    }, options2.editorOptions);
  };
  var checkEnterBug = function() {
    return browser_default.mozilla || devices_default.real().ios;
  };
  var getTextEditorConfig = function(options2) {
    var data3 = {};
    var isEnterBug = checkEnterBug();
    var sharedData = options2.sharedData || data3;
    return getResultConfig({
      placeholder: options2.placeholder,
      width: options2.width,
      value: options2.value,
      onValueChanged: function(e) {
        var needDelayedUpdate = "filterRow" === options2.parentType || "searchPanel" === options2.parentType;
        var isInputOrKeyUpEvent = e.event && ("input" === e.event.type || "keyup" === e.event.type);
        var updateValue = function(e2, notFireEvent) {
          options2 && options2.setValue(e2.value, notFireEvent);
        };
        clearTimeout(data3.valueChangeTimeout);
        if (isInputOrKeyUpEvent && needDelayedUpdate) {
          sharedData.valueChangeTimeout = data3.valueChangeTimeout = setTimeout(function() {
            updateValue(e, data3.valueChangeTimeout !== sharedData.valueChangeTimeout);
          }, isDefined(options2.updateValueTimeout) ? options2.updateValueTimeout : 0);
        } else {
          updateValue(e);
        }
      },
      onKeyDown: function(e) {
        if (isEnterBug && "enter" === normalizeKeyName(e.event)) {
          events_engine_default.trigger(renderer_default(e.component._input()), "change");
        }
      },
      valueChangeEvent: "change" + ("filterRow" === options2.parentType ? " keyup input" : "")
    }, options2);
  };
  var prepareDateBox = function(options2) {
    options2.editorName = "dxDateBox";
    options2.editorOptions = getResultConfig({
      value: options2.value,
      onValueChanged: function(args) {
        options2.setValue(args.value);
      },
      onKeyDown: function(_ref) {
        var {
          component,
          event
        } = _ref;
        var useMaskBehavior = component.option("useMaskBehavior");
        if ((checkEnterBug() || useMaskBehavior) && "enter" === normalizeKeyName(event)) {
          component.blur();
          component.focus();
        }
      },
      displayFormat: options2.format,
      type: options2.dataType,
      dateSerializationFormat: null,
      width: "filterBuilder" === options2.parentType ? void 0 : "auto"
    }, options2);
  };
  var prepareTextBox = function(options2) {
    var config3 = getTextEditorConfig(options2);
    var isSearching = "searchPanel" === options2.parentType;
    if (options2.editorType && "dxTextBox" !== options2.editorType) {
      config3.value = options2.value;
    } else {
      config3.value = (value2 = options2.value, isDefined(value2) ? value2.toString() : "");
    }
    var value2;
    config3.valueChangeEvent += isSearching ? " keyup input search" : "";
    config3.mode = config3.mode || (isSearching ? "search" : "text");
    options2.editorName = "dxTextBox";
    options2.editorOptions = config3;
  };
  var prepareNumberBox = function(options2) {
    var config3 = getTextEditorConfig(options2);
    config3.value = isDefined(options2.value) ? options2.value : null;
    options2.editorName = "dxNumberBox";
    options2.editorOptions = config3;
  };
  function prepareLookupEditor(options2) {
    var lookup = options2.lookup;
    var displayGetter;
    var dataSource;
    var postProcess2;
    var isFilterRow = "filterRow" === options2.parentType;
    if (lookup) {
      var _options$editorType;
      displayGetter = compileGetter(lookup.displayExpr);
      dataSource = lookup.dataSource;
      if (isFunction(dataSource) && !isWrapped2(dataSource)) {
        dataSource = dataSource(options2.row || {});
        !function(options3) {
          if (options3.row && options3.row.watch && "dataRow" === options3.parentType) {
            var editorOptions = options3.editorOptions || {};
            options3.editorOptions = editorOptions;
            var selectBox;
            var onInitialized = editorOptions.onInitialized;
            editorOptions.onInitialized = function(e) {
              onInitialized && onInitialized.apply(this, arguments);
              selectBox = e.component;
              selectBox.on("disposing", stopWatch);
            };
            var dataSource2;
            var stopWatch = options3.row.watch(() => {
              dataSource2 = options3.lookup.dataSource(options3.row);
              return dataSource2 && dataSource2.filter;
            }, () => {
              selectBox.option("dataSource", dataSource2);
            }, (row) => {
              options3.row = row;
            });
          }
        }(options2);
      }
      if (isObject(dataSource) || Array.isArray(dataSource)) {
        dataSource = normalizeDataSourceOptions(dataSource);
        if (isFilterRow) {
          postProcess2 = dataSource.postProcess;
          dataSource.postProcess = function(items) {
            if (0 === this.pageIndex()) {
              items = items.slice(0);
              items.unshift(null);
            }
            if (postProcess2) {
              return postProcess2.call(this, items);
            }
            return items;
          };
        }
      }
      var allowClearing = Boolean(lookup.allowClearing && !isFilterRow);
      options2.editorName = null !== (_options$editorType = options2.editorType) && void 0 !== _options$editorType ? _options$editorType : "dxSelectBox";
      options2.editorOptions = getResultConfig({
        searchEnabled: true,
        value: options2.value,
        valueExpr: options2.lookup.valueExpr,
        searchExpr: options2.lookup.searchExpr || options2.lookup.displayExpr,
        allowClearing,
        showClearButton: allowClearing,
        displayExpr: function(data3) {
          if (null === data3) {
            return options2.showAllText;
          }
          return displayGetter(data3);
        },
        dataSource,
        onValueChanged: function(e) {
          var params = [e.value];
          !isFilterRow && params.push(e.component.option("text"));
          options2.setValue.apply(this, params);
        }
      }, options2);
    }
  }
  function prepareCheckBox(options2) {
    options2.editorName = "dxCheckBox";
    options2.editorOptions = getResultConfig({
      elementAttr: {
        id: options2.id
      },
      value: isDefined(options2.value) ? options2.value : void 0,
      hoverStateEnabled: !options2.readOnly,
      focusStateEnabled: !options2.readOnly,
      activeStateEnabled: false,
      onValueChanged: function(e) {
        options2.setValue && options2.setValue(e.value, e);
      }
    }, options2);
  }
  var prepareCustomEditor = (options2) => {
    options2.editorName = options2.editorType;
    options2.editorOptions = getResultConfig({
      value: options2.value,
      onValueChanged: function(args) {
        options2.setValue(args.value);
      }
    }, options2);
  };
  var prepareEditor = (options2) => {
    var prepareDefaultEditor = {
      dxDateBox: prepareDateBox,
      dxCheckBox: prepareCheckBox,
      dxNumberBox: prepareNumberBox,
      dxTextBox: prepareTextBox
    };
    if (options2.lookup) {
      prepareLookupEditor(options2);
    } else if (options2.editorType) {
      var _prepareDefaultEditor;
      (null !== (_prepareDefaultEditor = prepareDefaultEditor[options2.editorType]) && void 0 !== _prepareDefaultEditor ? _prepareDefaultEditor : prepareCustomEditor)(options2);
    } else {
      switch (options2.dataType) {
        case "date":
        case "datetime":
          prepareDateBox(options2);
          break;
        case "boolean":
          !function(options3) {
            if ("filterRow" === options3.parentType || "filterBuilder" === options3.parentType) {
              prepareLookupEditor(extend(options3, {
                lookup: {
                  displayExpr: function(data3) {
                    if (true === data3) {
                      return options3.trueText || "true";
                    } else if (false === data3) {
                      return options3.falseText || "false";
                    }
                  },
                  dataSource: [true, false]
                }
              }));
            } else {
              prepareCheckBox(options3);
            }
          }(options2);
          break;
        case "number":
          prepareNumberBox(options2);
          break;
        default:
          prepareTextBox(options2);
      }
    }
  };
  return {
    createEditor: function($container, options2) {
      options2.cancel = false;
      options2.editorElement = getPublicElement($container);
      if (!isDefined(options2.tabIndex)) {
        options2.tabIndex = this.option("tabIndex");
      }
      prepareEditor(options2);
      this.executeAction("onEditorPreparing", options2);
      if (options2.cancel) {
        return;
      }
      if ("dataRow" === options2.parentType && !options2.isOnForm && !isDefined(options2.editorOptions.showValidationMark)) {
        options2.editorOptions.showValidationMark = false;
      }
      !function(that, options3) {
        var $editorElement = renderer_default(options3.editorElement);
        if (options3.editorName && options3.editorOptions && $editorElement[options3.editorName]) {
          if ("dxCheckBox" === options3.editorName || "dxSwitch" === options3.editorName) {
            if (!options3.isOnForm) {
              $editorElement.addClass(that.addWidgetPrefix(CHECKBOX_SIZE_CLASS));
              $editorElement.parent().addClass(EDITOR_INLINE_BLOCK);
            }
          }
          that._createComponent($editorElement, options3.editorName, options3.editorOptions);
          if ("dxDateBox" === options3.editorName) {
            var dateBox = $editorElement.dxDateBox("instance");
            var defaultEnterKeyHandler = dateBox._supportedKeys().enter;
            dateBox.registerKeyHandler("enter", (e) => {
              if (dateBox.option("opened")) {
                defaultEnterKeyHandler(e);
              }
              return true;
            });
          }
          if ("dxTextArea" === options3.editorName) {
            $editorElement.dxTextArea("instance").registerKeyHandler("enter", function(event) {
              if ("enter" === normalizeKeyName(event) && !event.ctrlKey && !event.shiftKey) {
                event.stopPropagation();
              }
            });
          }
        }
      }(this, options2);
      this.executeAction("onEditorPrepared", options2);
    }
  };
}();
var ui_editor_factory_mixin_default = EditorFactoryMixin;

// node_modules/devextreme/esm/__internal/grids/grid_core/editor_factory/m_editor_factory.js
var EDITOR_INLINE_BLOCK2 = "dx-editor-inline-block";
var CELL_FOCUS_DISABLED_CLASS3 = "dx-cell-focus-disabled";
var CELL_MODIFIED_CLASS = "dx-cell-modified";
var CELL_INVALID_CLASS = "invalid";
var FOCUSED_CELL_MODIFIED_CLASS = "dx-focused-cell-modified";
var FOCUSED_CELL_INVALID_CLASS = "dx-focused-cell-invalid";
var FOCUS_OVERLAY_CLASS = "focus-overlay";
var CONTENT_CLASS3 = "content";
var FOCUSED_ELEMENT_CLASS = "dx-focused";
var ROW_CLASS3 = "dx-row";
var MODULE_NAMESPACE = "dxDataGridEditorFactory";
var UPDATE_FOCUS_EVENTS = addNamespace2([pointer_default.down, "focusin", CLICK_EVENT_NAME].join(" "), MODULE_NAMESPACE);
var DX_HIDDEN = "dx-hidden";
var ViewControllerWithMixin = m_modules_default.ViewController.inherit(ui_editor_factory_mixin_default);
var EditorFactory = class extends ViewControllerWithMixin {
  _getFocusedElement($dataGridElement) {
    var rowSelector = this.option("focusedRowEnabled") ? "tr[tabindex]:focus" : "tr[tabindex]:not(.dx-data-row):focus";
    var focusedElementSelector = "td[tabindex]:focus, ".concat(rowSelector, ", input:focus, textarea:focus, .dx-lookup-field:focus, .dx-checkbox:focus, .dx-switch:focus, .dx-dropdownbutton .dx-buttongroup:focus, .dx-adaptive-item-text:focus");
    var $focusedElement = $dataGridElement.find(focusedElementSelector);
    return this.elementIsInsideGrid($focusedElement) && $focusedElement;
  }
  _getFocusCellSelector() {
    return ".dx-row > td";
  }
  _updateFocusCore() {
    var $dataGridElement = this.component && this.component.$element();
    if ($dataGridElement) {
      var $focus = this._getFocusedElement($dataGridElement);
      if ($focus && $focus.length) {
        var isHideBorder;
        if (!$focus.hasClass(CELL_FOCUS_DISABLED_CLASS3) && !$focus.hasClass(ROW_CLASS3)) {
          var $focusCell = $focus.closest("".concat(this._getFocusCellSelector(), ", .").concat(CELL_FOCUS_DISABLED_CLASS3));
          if ($focusCell.get(0) !== $focus.get(0)) {
            isHideBorder = this._needHideBorder($focusCell);
            $focus = $focusCell;
          }
        }
        if ($focus.length && !$focus.hasClass(CELL_FOCUS_DISABLED_CLASS3)) {
          this.focus($focus, isHideBorder);
          return;
        }
      }
    }
    this.loseFocus();
  }
  _needHideBorder($element) {
    return $element.hasClass(EDITOR_INLINE_BLOCK2);
  }
  _updateFocus(e) {
    var that = this;
    var isFocusOverlay = e && e.event && renderer_default(e.event.target).hasClass(that.addWidgetPrefix(FOCUS_OVERLAY_CLASS));
    that._isFocusOverlay = that._isFocusOverlay || isFocusOverlay;
    clearTimeout(that._updateFocusTimeoutID);
    that._updateFocusTimeoutID = setTimeout(() => {
      delete that._updateFocusTimeoutID;
      if (!that._isFocusOverlay) {
        that._updateFocusCore();
      }
      that._isFocusOverlay = false;
    });
  }
  _updateFocusOverlaySize($element, position3) {
    $element.hide();
    var location = position_default.calculate($element, extend({
      collision: "fit"
    }, position3));
    if (location.h.oversize > 0) {
      setOuterWidth($element, getOuterWidth($element) - location.h.oversize);
    }
    if (location.v.oversize > 0) {
      setOuterHeight($element, getOuterHeight($element) - location.v.oversize);
    }
    $element.show();
  }
  callbackNames() {
    return ["focused"];
  }
  focus($element, isHideBorder) {
    var that = this;
    if (void 0 === $element) {
      return that._$focusedElement;
    }
    if ($element) {
      if (!$element.is(that._$focusedElement)) {
        that._$focusedElement && that._$focusedElement.removeClass(FOCUSED_ELEMENT_CLASS);
      }
      that._$focusedElement = $element;
      clearTimeout(that._focusTimeoutID);
      that._focusTimeoutID = setTimeout(() => {
        delete that._focusTimeoutID;
        that.renderFocusOverlay($element, isHideBorder);
        $element.addClass(FOCUSED_ELEMENT_CLASS);
        that.focused.fire($element);
      });
    }
  }
  refocus() {
    var $focus = this.focus();
    this.focus($focus);
  }
  renderFocusOverlay($element, isHideBorder) {
    if (!m_utils_default.isElementInCurrentGrid(this, $element)) {
      return;
    }
    if (!this._$focusOverlay) {
      this._$focusOverlay = renderer_default("<div>").addClass(this.addWidgetPrefix(FOCUS_OVERLAY_CLASS));
    }
    if (isHideBorder) {
      this._$focusOverlay.addClass(DX_HIDDEN);
    } else if ($element.length) {
      var align = browser_default.mozilla ? "right bottom" : "left top";
      var $content = $element.closest(".".concat(this.addWidgetPrefix(CONTENT_CLASS3)));
      var elemCoord = getBoundingRect($element.get(0));
      var isFocusedCellInvalid = $element.hasClass(this.addWidgetPrefix(CELL_INVALID_CLASS));
      var isFocusedCellModified = $element.hasClass(CELL_MODIFIED_CLASS) && !isFocusedCellInvalid;
      this._$focusOverlay.removeClass(DX_HIDDEN).toggleClass(FOCUSED_CELL_INVALID_CLASS, isFocusedCellInvalid).toggleClass(FOCUSED_CELL_MODIFIED_CLASS, isFocusedCellModified).appendTo($content);
      setOuterHeight(this._$focusOverlay, elemCoord.bottom - elemCoord.top + 1);
      setOuterWidth(this._$focusOverlay, elemCoord.right - elemCoord.left + 1);
      var focusOverlayPosition = {
        precise: true,
        my: align,
        at: align,
        of: $element,
        boundary: $content.length && $content
      };
      this._updateFocusOverlaySize(this._$focusOverlay, focusOverlayPosition);
      position_default.setup(this._$focusOverlay, focusOverlayPosition);
      this._$focusOverlay.css("visibility", "visible");
    }
  }
  resize() {
    var $focusedElement = this._$focusedElement;
    if ($focusedElement) {
      this.focus($focusedElement);
    }
  }
  loseFocus() {
    this._$focusedElement && this._$focusedElement.removeClass(FOCUSED_ELEMENT_CLASS);
    this._$focusedElement = null;
    this._$focusOverlay && this._$focusOverlay.addClass(DX_HIDDEN);
  }
  init() {
    this.createAction("onEditorPreparing", {
      excludeValidators: ["disabled", "readOnly"],
      category: "rendering"
    });
    this.createAction("onEditorPrepared", {
      excludeValidators: ["disabled", "readOnly"],
      category: "rendering"
    });
    this._updateFocusHandler = this._updateFocusHandler || this.createAction(this._updateFocus.bind(this));
    this._subscribedContainerRoot = this._getContainerRoot();
    events_engine_default.on(this._subscribedContainerRoot, UPDATE_FOCUS_EVENTS, this._updateFocusHandler);
    this._attachContainerEventHandlers();
  }
  _getContainerRoot() {
    var _a2;
    var $container = null === (_a2 = this.component) || void 0 === _a2 ? void 0 : _a2.$element();
    var root = dom_adapter_default.getRootNode(null === $container || void 0 === $container ? void 0 : $container.get(0));
    if (root.nodeType === Node.DOCUMENT_FRAGMENT_NODE && !root.host) {
      return dom_adapter_default.getDocument();
    }
    return root;
  }
  _attachContainerEventHandlers() {
    var that = this;
    var $container = that.component && that.component.$element();
    if ($container) {
      events_engine_default.on($container, addNamespace2("keydown", MODULE_NAMESPACE), (e) => {
        if ("tab" === normalizeKeyName(e)) {
          that._updateFocusHandler(e);
        }
      });
    }
  }
  dispose() {
    clearTimeout(this._focusTimeoutID);
    clearTimeout(this._updateFocusTimeoutID);
    events_engine_default.off(this._subscribedContainerRoot, UPDATE_FOCUS_EVENTS, this._updateFocusHandler);
  }
};
var editorFactoryModule = {
  defaultOptions: () => ({}),
  controllers: {
    editorFactory: EditorFactory
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/editor_factory.js
m_core_default.registerModule("editorFactory", editorFactoryModule);

// node_modules/devextreme/esm/ui/dialog.js
var window26 = getWindow();
var DEFAULT_BUTTON = {
  text: "OK",
  onClick: function() {
    return true;
  }
};
var DX_DIALOG_CLASSNAME = "dx-dialog";
var DX_DIALOG_WRAPPER_CLASSNAME = "".concat(DX_DIALOG_CLASSNAME, "-wrapper");
var DX_DIALOG_ROOT_CLASSNAME = "".concat(DX_DIALOG_CLASSNAME, "-root");
var DX_DIALOG_CONTENT_CLASSNAME = "".concat(DX_DIALOG_CLASSNAME, "-content");
var DX_DIALOG_MESSAGE_CLASSNAME = "".concat(DX_DIALOG_CLASSNAME, "-message");
var DX_DIALOG_BUTTONS_CLASSNAME = "".concat(DX_DIALOG_CLASSNAME, "-buttons");
var DX_DIALOG_BUTTON_CLASSNAME = "".concat(DX_DIALOG_CLASSNAME, "-button");
var DX_BUTTON_CLASSNAME = "dx-button";
var getApplyButtonConfig = () => {
  if (isFluent()) {
    return {
      stylingMode: "contained",
      type: "default"
    };
  }
  return {};
};
var getCancelButtonConfig = () => {
  if (isFluent()) {
    return {
      stylingMode: "outlined",
      type: "default"
    };
  }
  return {};
};
var custom = function(options2) {
  var _options$title;
  var deferred = new Deferred();
  options2 = options2 || {};
  var $element = renderer_default("<div>").addClass(DX_DIALOG_CLASSNAME).appendTo(value());
  var isMessageDefined = "message" in options2;
  var isMessageHtmlDefined = "messageHtml" in options2;
  if (isMessageDefined) {
    ui_errors_default.log("W1013");
  }
  var messageHtml = String(isMessageHtmlDefined ? options2.messageHtml : options2.message);
  var messageId = options2.title ? null : new guid_default();
  var $message = renderer_default("<div>").addClass(DX_DIALOG_MESSAGE_CLASSNAME).html(messageHtml).attr("id", messageId);
  var popupToolbarItems = [];
  var popupInstance = new ui_popup_default($element, extend({
    title: null !== (_options$title = options2.title) && void 0 !== _options$title ? _options$title : "",
    showTitle: ensureDefined(options2.showTitle, true),
    dragEnabled: ensureDefined(options2.dragEnabled, true),
    height: "auto",
    width: options2.width,
    showCloseButton: options2.showCloseButton || false,
    ignoreChildEvents: false,
    container: $element,
    visualContainer: window26,
    dragAndResizeArea: window26,
    onContentReady: function(args) {
      args.component.$content().addClass(DX_DIALOG_CONTENT_CLASSNAME).append($message);
      if (messageId) {
        args.component.$overlayContent().attr("aria-labelledby", messageId);
      }
    },
    onShowing: function(e) {
      e.component.bottomToolbar().addClass(DX_DIALOG_BUTTONS_CLASSNAME).find(".".concat(DX_BUTTON_CLASSNAME)).addClass(DX_DIALOG_BUTTON_CLASSNAME);
      resetActiveElement();
    },
    onShown: function(e) {
      var $firstButton = e.component.bottomToolbar().find(".".concat(DX_BUTTON_CLASSNAME)).first();
      events_engine_default.trigger($firstButton, "focus");
    },
    onHiding: function() {
      deferred.reject();
    },
    onHidden: function(_ref) {
      var {
        element
      } = _ref;
      renderer_default(element).remove();
    },
    animation: {
      show: {
        type: "pop",
        duration: 400
      },
      hide: {
        type: "pop",
        duration: 400,
        to: {
          opacity: 0,
          scale: 0
        },
        from: {
          opacity: 1,
          scale: 1
        }
      }
    },
    rtlEnabled: config_default().rtlEnabled,
    position: {
      boundaryOffset: {
        h: 10,
        v: 0
      }
    }
  }, options2.popupOptions));
  var buttonOptions = options2.buttons || [DEFAULT_BUTTON];
  buttonOptions.forEach((options3) => {
    var action = new Action(options3.onClick, {
      context: popupInstance
    });
    popupToolbarItems.push({
      toolbar: "bottom",
      location: devices_default.current().android ? "after" : "center",
      widget: "dxButton",
      options: _extends({}, options3, {
        onClick: function() {
          var result2 = action.execute(...arguments);
          hide(result2);
        }
      })
    });
  });
  popupInstance.option("toolbarItems", popupToolbarItems);
  popupInstance.$wrapper().addClass(DX_DIALOG_WRAPPER_CLASSNAME);
  if (options2.position) {
    popupInstance.option("position", options2.position);
  }
  popupInstance.$wrapper().addClass(DX_DIALOG_ROOT_CLASSNAME);
  function hide(value2) {
    deferred.resolve(value2);
    popupInstance.hide();
  }
  return {
    show: function() {
      if ("phone" === devices_default.real().deviceType) {
        var isPortrait = getHeight(window26) > getWidth(window26);
        var width = isPortrait ? "90%" : "60%";
        popupInstance.option({
          width
        });
      }
      popupInstance.show();
      return deferred.promise();
    },
    hide
  };
};
var confirm = function(messageHtml) {
  var title = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
  var showTitle = arguments.length > 2 ? arguments[2] : void 0;
  var options2 = isPlainObject(messageHtml) ? messageHtml : {
    title,
    messageHtml,
    showTitle,
    buttons: [_extends({
      text: message_default.format("Yes"),
      onClick: function() {
        return true;
      }
    }, getApplyButtonConfig()), _extends({
      text: message_default.format("No"),
      onClick: function() {
        return false;
      }
    }, getCancelButtonConfig())],
    dragEnabled: showTitle
  };
  return custom(options2).show();
};

// node_modules/devextreme/esm/__internal/grids/grid_core/editing/const.js
var EDITOR_CELL_CLASS2 = "dx-editor-cell";
var ROW_CLASS4 = "dx-row";
var CELL_MODIFIED_CLASS2 = "dx-cell-modified";
var ROW_SELECTED_CLASS = "dx-selection";
var EDIT_FORM_CLASS = "edit-form";
var DATA_EDIT_DATA_INSERT_TYPE = "insert";
var DATA_EDIT_DATA_REMOVE_TYPE = "remove";
var EDITING_POPUP_OPTION_NAME = "editing.popup";
var EDITING_FORM_OPTION_NAME = "editing.form";
var EDITING_EDITROWKEY_OPTION_NAME = "editing.editRowKey";
var EDITING_EDITCOLUMNNAME_OPTION_NAME = "editing.editColumnName";
var TARGET_COMPONENT_NAME = "targetComponent";
var EDITORS_INPUT_SELECTOR = "input:not([type='hidden'])";
var FOCUSABLE_ELEMENT_SELECTOR = "[tabindex]:not([disabled]), ".concat(EDITORS_INPUT_SELECTOR, ":not([disabled])");
var EDIT_MODE_BATCH = "batch";
var EDIT_MODE_ROW = "row";
var EDIT_MODE_CELL = "cell";
var EDIT_MODE_FORM = "form";
var EDIT_MODE_POPUP = "popup";
var FIRST_NEW_ROW_POSITION = "first";
var LAST_NEW_ROW_POSITION = "last";
var PAGE_BOTTOM_NEW_ROW_POSITION = "pageBottom";
var PAGE_TOP_NEW_ROW_POSITION = "pageTop";
var VIEWPORT_BOTTOM_NEW_ROW_POSITION = "viewportBottom";
var VIEWPORT_TOP_NEW_ROW_POSITION = "viewportTop";
var EDIT_MODES = [EDIT_MODE_BATCH, EDIT_MODE_ROW, EDIT_MODE_CELL, EDIT_MODE_FORM, EDIT_MODE_POPUP];
var ROW_BASED_MODES = [EDIT_MODE_ROW, EDIT_MODE_FORM, EDIT_MODE_POPUP];
var CELL_BASED_MODES = [EDIT_MODE_BATCH, EDIT_MODE_CELL];
var REQUIRED_EDITOR_LABELLEDBY_MODES = [EDIT_MODE_BATCH, EDIT_MODE_ROW, EDIT_MODE_CELL];
var MODES_WITH_DELAYED_FOCUS = [EDIT_MODE_ROW, EDIT_MODE_FORM];
var READONLY_CLASS = "readonly";
var LINK_CLASS = "dx-link";
var LINK_ICON_CLASS = "dx-link-icon";
var ROW_SELECTED = "dx-selection";
var EDIT_BUTTON_CLASS = "dx-edit-button";
var COMMAND_EDIT_CLASS = "dx-command-edit";
var COMMAND_EDIT_WITH_ICONS_CLASS = "".concat(COMMAND_EDIT_CLASS, "-with-icons");
var INSERT_INDEX = "__DX_INSERT_INDEX__";
var ROW_INSERTED = "dx-row-inserted";
var ROW_MODIFIED = "dx-row-modified";
var CELL_MODIFIED = "dx-cell-modified";
var EDITING_NAMESPACE = "dxDataGridEditing";
var CELL_FOCUS_DISABLED_CLASS4 = "dx-cell-focus-disabled";
var DATA_EDIT_DATA_UPDATE_TYPE = "update";
var DEFAULT_START_EDIT_ACTION = "click";
var EDIT_LINK_CLASS = {
  save: "dx-link-save",
  cancel: "dx-link-cancel",
  edit: "dx-link-edit",
  undelete: "dx-link-undelete",
  delete: "dx-link-delete",
  add: "dx-link-add"
};
var EDIT_ICON_CLASS = {
  save: "save",
  cancel: "revert",
  edit: "edit",
  undelete: "revert",
  delete: "trash",
  add: "add"
};
var METHOD_NAMES = {
  edit: "editRow",
  delete: "deleteRow",
  undelete: "undeleteRow",
  save: "saveEditData",
  cancel: "cancelEditData",
  add: "addRowByRowIndex"
};
var ACTION_OPTION_NAMES = {
  add: "allowAdding",
  edit: "allowUpdating",
  delete: "allowDeleting"
};
var BUTTON_NAMES = ["edit", "save", "cancel", "delete", "undelete"];
var EDITING_CHANGES_OPTION_NAME = "editing.changes";
var FOCUS_OVERLAY_CLASS2 = "focus-overlay";
var ADD_ROW_BUTTON_CLASS = "addrow-button";
var DROPDOWN_EDITOR_OVERLAY_CLASS = "dx-dropdowneditor-overlay";
var DATA_ROW_CLASS3 = "dx-data-row";
var ROW_REMOVED = "dx-row-removed";
var isRenovatedScrollable = !!ui_scrollable_default.IS_RENOVATED_WIDGET;
var EDIT_FORM_ITEM_CLASS = "edit-form-item";
var EDIT_POPUP_CLASS = "edit-popup";
var EDIT_POPUP_FORM_CLASS = "edit-popup-form";
var FOCUSABLE_ELEMENT_CLASS = isRenovatedScrollable ? "dx-scrollable" : "dx-scrollable-container";
var BUTTON_CLASS = "dx-button";
var FORM_BUTTONS_CONTAINER_CLASS = "form-buttons-container";
var EDIT_ROW = "dx-edit-row";

// node_modules/devextreme/esm/__internal/grids/grid_core/editing/m_editing_utils.js
var NEW_ROW_TEMP_KEY_PREFIX = "_DX_KEY_";
var GUID_LENGTH = 36;
var createFailureHandler = function(deferred) {
  return function(arg) {
    var error = arg instanceof Error ? arg : new Error(arg && String(arg) || "Unknown error");
    deferred.reject(error);
  };
};
var isEditingCell = function(isEditRow, cellOptions) {
  return cellOptions.isEditing || isEditRow && cellOptions.column.allowEditing;
};
var isEditingOrShowEditorAlwaysDataCell = function(isEditRow, cellOptions) {
  var isCommandCell = !!cellOptions.column.command;
  var isEditing = isEditingCell(isEditRow, cellOptions);
  var isEditorCell2 = !isCommandCell && (isEditing || cellOptions.column.showEditorAlways);
  return "data" === cellOptions.rowType && isEditorCell2;
};
var getEditingTexts = (options2) => {
  var editingTexts = options2.component.option("editing.texts") || {};
  return {
    save: editingTexts.saveRowChanges,
    cancel: editingTexts.cancelRowChanges,
    edit: editingTexts.editRow,
    undelete: editingTexts.undeleteRow,
    delete: editingTexts.deleteRow,
    add: editingTexts.addRowToNode
  };
};
var generateNewRowTempKey = () => "".concat(NEW_ROW_TEMP_KEY_PREFIX).concat(new guid_default());
var isNewRowTempKey = (key) => "string" === typeof key && key.startsWith(NEW_ROW_TEMP_KEY_PREFIX) && key.length === NEW_ROW_TEMP_KEY_PREFIX.length + GUID_LENGTH;
var getButtonIndex = (buttons, name2) => {
  var result2 = -1;
  buttons.some((button, index2) => {
    if (getButtonName(button) === name2) {
      result2 = index2;
      return true;
    }
  });
  return result2;
};
function getButtonName(button) {
  return isObject(button) ? button.name : button;
}
function isEditable($element) {
  return $element && ($element.is("input") || $element.is("textarea"));
}
var getEditorType = (item) => {
  var _a2;
  var {
    column
  } = item;
  return item.isCustomEditorType ? item.editorType : null === (_a2 = column.formItem) || void 0 === _a2 ? void 0 : _a2.editorType;
};
var forEachFormItems = (items, callBack) => {
  items.forEach((item) => {
    if (item.items || item.tabs) {
      forEachFormItems(item.items || item.tabs, callBack);
    } else {
      callBack(item);
    }
  });
};

// node_modules/devextreme/esm/__internal/grids/grid_core/editing/m_editing.js
var EditingControllerImpl = class extends m_modules_default.ViewController {
  init() {
    this._columnsController = this.getController("columns");
    this._dataController = this.getController("data");
    this._rowsView = this.getView("rowsView");
    this._lastOperation = null;
    this._changes = [];
    if (this._deferreds) {
      this._deferreds.forEach((d) => {
        d.reject("cancel");
      });
    }
    this._deferreds = [];
    if (!this._dataChangedHandler) {
      this._dataChangedHandler = this._handleDataChanged.bind(this);
      this._dataController.changed.add(this._dataChangedHandler);
    }
    if (!this._saveEditorHandler) {
      this.createAction("onInitNewRow", {
        excludeValidators: ["disabled", "readOnly"]
      });
      this.createAction("onRowInserting", {
        excludeValidators: ["disabled", "readOnly"]
      });
      this.createAction("onRowInserted", {
        excludeValidators: ["disabled", "readOnly"]
      });
      this.createAction("onEditingStart", {
        excludeValidators: ["disabled", "readOnly"]
      });
      this.createAction("onRowUpdating", {
        excludeValidators: ["disabled", "readOnly"]
      });
      this.createAction("onRowUpdated", {
        excludeValidators: ["disabled", "readOnly"]
      });
      this.createAction("onRowRemoving", {
        excludeValidators: ["disabled", "readOnly"]
      });
      this.createAction("onRowRemoved", {
        excludeValidators: ["disabled", "readOnly"]
      });
      this.createAction("onSaved", {
        excludeValidators: ["disabled", "readOnly"]
      });
      this.createAction("onSaving", {
        excludeValidators: ["disabled", "readOnly"]
      });
      this.createAction("onEditCanceling", {
        excludeValidators: ["disabled", "readOnly"]
      });
      this.createAction("onEditCanceled", {
        excludeValidators: ["disabled", "readOnly"]
      });
    }
    this._updateEditColumn();
    this._updateEditButtons();
    if (!this._internalState) {
      this._internalState = [];
    }
    this.component._optionsByReference[EDITING_EDITROWKEY_OPTION_NAME] = true;
    this.component._optionsByReference[EDITING_CHANGES_OPTION_NAME] = true;
  }
  getEditMode() {
    var _a2;
    var editMode = null !== (_a2 = this.option("editing.mode")) && void 0 !== _a2 ? _a2 : EDIT_MODE_ROW;
    if (EDIT_MODES.includes(editMode)) {
      return editMode;
    }
    return EDIT_MODE_ROW;
  }
  isCellBasedEditMode() {
    var editMode = this.getEditMode();
    return CELL_BASED_MODES.includes(editMode);
  }
  _getDefaultEditorTemplate() {
    return (container, options2) => {
      var $editor = renderer_default("<div>").appendTo(container);
      var editorOptions = extend({}, options2.column, {
        value: options2.value,
        setValue: options2.setValue,
        row: options2.row,
        parentType: "dataRow",
        width: null,
        readOnly: !options2.setValue,
        isOnForm: options2.isOnForm,
        id: options2.id
      });
      var needLabel = REQUIRED_EDITOR_LABELLEDBY_MODES.includes(this.getEditMode());
      if (needLabel) {
        editorOptions["aria-labelledby"] = options2.column.headerId;
      }
      this.getController("editorFactory").createEditor($editor, editorOptions);
    };
  }
  _getNewRowPosition() {
    var newRowPosition = this.option("editing.newRowPosition");
    var scrollingMode = this.option("scrolling.mode");
    if ("virtual" === scrollingMode) {
      switch (newRowPosition) {
        case PAGE_TOP_NEW_ROW_POSITION:
          return VIEWPORT_TOP_NEW_ROW_POSITION;
        case PAGE_BOTTOM_NEW_ROW_POSITION:
          return VIEWPORT_BOTTOM_NEW_ROW_POSITION;
        default:
          return newRowPosition;
      }
    }
    return newRowPosition;
  }
  getChanges() {
    return this.option(EDITING_CHANGES_OPTION_NAME);
  }
  getInsertRowCount() {
    var changes = this.option(EDITING_CHANGES_OPTION_NAME);
    return changes.filter((change) => "insert" === change.type).length;
  }
  resetChanges() {
    var changes = this.getChanges();
    var needReset = null === changes || void 0 === changes ? void 0 : changes.length;
    if (needReset) {
      this._silentOption(EDITING_CHANGES_OPTION_NAME, []);
    }
  }
  _getInternalData(key) {
    return this._internalState.filter((item) => equalByValue(item.key, key))[0];
  }
  _addInternalData(params) {
    var internalData = this._getInternalData(params.key);
    if (internalData) {
      return extend(internalData, params);
    }
    this._internalState.push(params);
    return params;
  }
  _getOldData(key) {
    var _a2;
    return null === (_a2 = this._getInternalData(key)) || void 0 === _a2 ? void 0 : _a2.oldData;
  }
  getUpdatedData(data3) {
    var key = this._dataController.keyOf(data3);
    var changes = this.getChanges();
    var editIndex = m_utils_default.getIndexByKey(key, changes);
    if (changes[editIndex]) {
      return createObjectWithChanges(data3, changes[editIndex].data);
    }
    return data3;
  }
  getInsertedData() {
    return this.getChanges().filter((change) => change.data && change.type === DATA_EDIT_DATA_INSERT_TYPE).map((change) => change.data);
  }
  getRemovedData() {
    return this.getChanges().filter((change) => this._getOldData(change.key) && change.type === DATA_EDIT_DATA_REMOVE_TYPE).map((change) => this._getOldData(change.key));
  }
  _fireDataErrorOccurred(arg) {
    if ("cancel" === arg) {
      return;
    }
    var $popupContent = this.getPopupContent();
    this._dataController.dataErrorOccurred.fire(arg, $popupContent);
  }
  _needToCloseEditableCell($targetElement) {
  }
  _closeEditItem($targetElement) {
  }
  _handleDataChanged(args) {
  }
  _isDefaultButtonVisible(button, options2) {
    var result2 = true;
    switch (button.name) {
      case "delete":
        result2 = this.allowDeleting(options2);
        break;
      case "undelete":
        result2 = false;
    }
    return result2;
  }
  _isButtonVisible(button, options2) {
    var {
      visible: visible2
    } = button;
    if (!isDefined(visible2)) {
      return this._isDefaultButtonVisible(button, options2);
    }
    return isFunction(visible2) ? visible2.call(button, {
      component: options2.component,
      row: options2.row,
      column: options2.column
    }) : visible2;
  }
  _isButtonDisabled(button, options2) {
    var {
      disabled
    } = button;
    return isFunction(disabled) ? disabled.call(button, {
      component: options2.component,
      row: options2.row,
      column: options2.column
    }) : !!disabled;
  }
  _getButtonConfig(button, options2) {
    var config3 = isObject(button) ? button : {};
    var buttonName = getButtonName(button);
    var editingTexts = getEditingTexts(options2);
    var methodName = METHOD_NAMES[buttonName];
    var editingOptions = this.option("editing");
    var actionName = ACTION_OPTION_NAMES[buttonName];
    var allowAction = actionName ? editingOptions[actionName] : true;
    return extend({
      name: buttonName,
      text: editingTexts[buttonName],
      cssClass: EDIT_LINK_CLASS[buttonName]
    }, {
      onClick: methodName && ((e) => {
        var {
          event
        } = e;
        event.stopPropagation();
        event.preventDefault();
        setTimeout(() => {
          options2.row && allowAction && this[methodName] && this[methodName](options2.row.rowIndex);
        });
      })
    }, config3);
  }
  _getEditingButtons(options2) {
    var buttonIndex;
    var haveCustomButtons = !!options2.column.buttons;
    var buttons = (options2.column.buttons || []).slice();
    if (haveCustomButtons) {
      buttonIndex = getButtonIndex(buttons, "edit");
      if (buttonIndex >= 0) {
        if (getButtonIndex(buttons, "save") < 0) {
          buttons.splice(buttonIndex + 1, 0, "save");
        }
        if (getButtonIndex(buttons, "cancel") < 0) {
          buttons.splice(getButtonIndex(buttons, "save") + 1, 0, "cancel");
        }
      }
      buttonIndex = getButtonIndex(buttons, "delete");
      if (buttonIndex >= 0 && getButtonIndex(buttons, "undelete") < 0) {
        buttons.splice(buttonIndex + 1, 0, "undelete");
      }
    } else {
      buttons = BUTTON_NAMES.slice();
    }
    return buttons.map((button) => this._getButtonConfig(button, options2));
  }
  _renderEditingButtons($container, buttons, options2, change) {
    buttons.forEach((button) => {
      if (this._isButtonVisible(button, options2)) {
        this._createButton($container, button, options2, change);
      }
    });
  }
  _getEditCommandCellTemplate() {
    return (container, options2, change) => {
      var $container = renderer_default(container);
      if ("data" === options2.rowType) {
        var buttons = this._getEditingButtons(options2);
        this._renderEditingButtons($container, buttons, options2, change);
        if (options2.watch) {
          var dispose = options2.watch(() => buttons.map((button) => ({
            visible: this._isButtonVisible(button, options2),
            disabled: this._isButtonDisabled(button, options2)
          })), () => {
            $container.empty();
            this._renderEditingButtons($container, buttons, options2);
          });
          events_engine_default.on($container, removeEvent, dispose);
        }
      } else {
        m_utils_default.setEmptyText($container);
      }
    };
  }
  isRowBasedEditMode() {
    var editMode = this.getEditMode();
    return ROW_BASED_MODES.includes(editMode);
  }
  getFirstEditableColumnIndex() {
    var columnsController = this.getController("columns");
    var columnIndex;
    var visibleColumns = columnsController.getVisibleColumns();
    each(visibleColumns, (index2, column) => {
      if (column.allowEditing) {
        columnIndex = index2;
        return false;
      }
    });
    return columnIndex;
  }
  getFirstEditableCellInRow(rowIndex) {
    var rowsView3 = this.getView("rowsView");
    var columnIndex = this.getFirstEditableColumnIndex();
    return null === rowsView3 || void 0 === rowsView3 ? void 0 : rowsView3._getCellElement(rowIndex || 0, columnIndex);
  }
  getFocusedCellInRow(rowIndex) {
    return this.getFirstEditableCellInRow(rowIndex);
  }
  getIndexByKey(key, items) {
    return m_utils_default.getIndexByKey(key, items);
  }
  hasChanges(rowIndex) {
    var changes = this.getChanges();
    var result2 = false;
    for (var i = 0; i < (null === changes || void 0 === changes ? void 0 : changes.length); i++) {
      if (changes[i].type && (!isDefined(rowIndex) || this._dataController.getRowIndexByKey(changes[i].key) === rowIndex)) {
        result2 = true;
        break;
      }
    }
    return result2;
  }
  dispose() {
    super.dispose();
    clearTimeout(this._inputFocusTimeoutID);
    events_engine_default.off(dom_adapter_default.getDocument(), pointer_default.up, this._pointerUpEditorHandler);
    events_engine_default.off(dom_adapter_default.getDocument(), pointer_default.down, this._pointerDownEditorHandler);
    events_engine_default.off(dom_adapter_default.getDocument(), CLICK_EVENT_NAME, this._saveEditorHandler);
  }
  _silentOption(name2, value2) {
    if ("editing.changes" === name2) {
      this._changes = deepExtendArraySafe([], value2);
    }
    super._silentOption(name2, value2);
  }
  optionChanged(args) {
    if ("editing" === args.name) {
      var {
        fullName
      } = args;
      if (fullName === EDITING_EDITROWKEY_OPTION_NAME) {
        this._handleEditRowKeyChange(args);
      } else if (fullName === EDITING_CHANGES_OPTION_NAME) {
        var isEqual2 = equalByValue(args.value, this._changes, {
          maxDepth: 4
        });
        if (!isEqual2) {
          this._changes = deepExtendArraySafe([], args.value);
          this._handleChangesChange(args);
        }
      } else if (!args.handled) {
        this._columnsController.reinit();
        this.init();
        this.resetChanges();
        this._resetEditColumnName();
        this._resetEditRowKey();
      }
      args.handled = true;
    } else {
      super.optionChanged(args);
    }
  }
  _handleEditRowKeyChange(args) {
    var rowIndex = this._dataController.getRowIndexByKey(args.value);
    var oldRowIndexCorrection = this._getEditRowIndexCorrection();
    var oldRowIndex = this._dataController.getRowIndexByKey(args.previousValue) + oldRowIndexCorrection;
    if (isDefined(args.value)) {
      if (args.value !== args.previousValue) {
        this._editRowFromOptionChanged(rowIndex, oldRowIndex);
      }
    } else {
      this.cancelEditData();
    }
  }
  _handleChangesChange(args) {
    var dataController2 = this._dataController;
    var changes = args.value;
    if (!args.value.length && !args.previousValue.length) {
      return;
    }
    changes.forEach((change) => {
      var _a2;
      if ("insert" === change.type) {
        this._addInsertInfo(change);
      } else {
        var items = dataController2.getCachedStoreData() || (null === (_a2 = dataController2.items()) || void 0 === _a2 ? void 0 : _a2.map((item) => item.data));
        var rowIndex = m_utils_default.getIndexByKey(change.key, items, dataController2.key());
        this._addInternalData({
          key: change.key,
          oldData: items[rowIndex]
        });
      }
    });
    dataController2.updateItems({
      repaintChangesOnly: true,
      isLiveUpdate: false,
      isOptionChanged: true
    });
  }
  publicMethods() {
    return ["addRow", "deleteRow", "undeleteRow", "editRow", "saveEditData", "cancelEditData", "hasEditData"];
  }
  refresh() {
    if (!isDefined(this._pageIndex)) {
      return;
    }
    this._refreshCore.apply(this, arguments);
  }
  _refreshCore(params) {
  }
  isEditing() {
    var isEditRowKeyDefined = isDefined(this.option(EDITING_EDITROWKEY_OPTION_NAME));
    return isEditRowKeyDefined;
  }
  isEditRow(rowIndex) {
    return false;
  }
  _setEditRowKey(value2, silent) {
    if (silent) {
      this._silentOption(EDITING_EDITROWKEY_OPTION_NAME, value2);
    } else {
      this.option(EDITING_EDITROWKEY_OPTION_NAME, value2);
    }
    if (this._refocusEditCell) {
      this._refocusEditCell = false;
      this._focusEditingCell();
    }
  }
  _setEditRowKeyByIndex(rowIndex, silent) {
    var key = this._dataController.getKeyByRowIndex(rowIndex);
    if (void 0 === key) {
      this._dataController.fireError("E1043");
      return;
    }
    this._setEditRowKey(key, silent);
  }
  getEditRowIndex() {
    return this._getVisibleEditRowIndex();
  }
  getEditFormRowIndex() {
    return -1;
  }
  isEditRowByIndex(rowIndex) {
    var key = this._dataController.getKeyByRowIndex(rowIndex);
    var isKeyEqual = isDefined(key) && equalByValue(this.option(EDITING_EDITROWKEY_OPTION_NAME), key);
    if (isKeyEqual) {
      return this._getVisibleEditRowIndex() === rowIndex;
    }
    return isKeyEqual;
  }
  isEditCell(visibleRowIndex, columnIndex) {
    return this.isEditRowByIndex(visibleRowIndex) && this._getVisibleEditColumnIndex() === columnIndex;
  }
  getPopupContent() {
  }
  _isProcessedItem(item) {
    return false;
  }
  _getInsertRowIndex(items, change, isProcessedItems) {
    var result2 = -1;
    var dataController2 = this._dataController;
    var key = this._getInsertAfterOrBeforeKey(change);
    if (!isDefined(key) && 0 === items.length) {
      result2 = 0;
    } else if (isDefined(key)) {
      items.some((item, index2) => {
        var isProcessedItem = isProcessedItems || this._isProcessedItem(item);
        if (isObject(item)) {
          if (isProcessedItem || isDefined(item[INSERT_INDEX])) {
            if (equalByValue(item.key, key)) {
              result2 = index2;
            }
          } else if (equalByValue(dataController2.keyOf(item), key)) {
            result2 = index2;
          }
        }
        if (result2 >= 0) {
          var nextItem = items[result2 + 1];
          if (nextItem && ("detail" === nextItem.rowType || "detailAdaptive" === nextItem.rowType) && isDefined(change.insertAfterKey)) {
            return;
          }
          if (isDefined(change.insertAfterKey)) {
            result2 += 1;
          }
          return true;
        }
      });
    }
    return result2;
  }
  _generateNewItem(key) {
    var _a2;
    var item = {
      key
    };
    var insertInfo = null === (_a2 = this._getInternalData(key)) || void 0 === _a2 ? void 0 : _a2.insertInfo;
    if (null === insertInfo || void 0 === insertInfo ? void 0 : insertInfo[INSERT_INDEX]) {
      item[INSERT_INDEX] = insertInfo[INSERT_INDEX];
    }
    return item;
  }
  _getLoadedRowIndex(items, change, isProcessedItems) {
    var loadedRowIndex = this._getInsertRowIndex(items, change, isProcessedItems);
    var dataController2 = this._dataController;
    if (loadedRowIndex < 0) {
      var newRowPosition = this._getNewRowPosition();
      var pageIndex = dataController2.pageIndex();
      var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);
      if (newRowPosition !== LAST_NEW_ROW_POSITION && 0 === pageIndex && !isDefined(insertAfterOrBeforeKey)) {
        loadedRowIndex = 0;
      } else if (newRowPosition === LAST_NEW_ROW_POSITION && dataController2.isLastPageLoaded()) {
        loadedRowIndex = items.length;
      }
    }
    return loadedRowIndex;
  }
  processItems(items, e) {
    var {
      changeType
    } = e;
    this.update(changeType);
    var changes = this.getChanges();
    changes.forEach((change) => {
      var _a2;
      var isInsert = change.type === DATA_EDIT_DATA_INSERT_TYPE;
      if (!isInsert) {
        return;
      }
      var {
        key
      } = change;
      var insertInfo = null === (_a2 = this._getInternalData(key)) || void 0 === _a2 ? void 0 : _a2.insertInfo;
      if (!isDefined(key) || !isDefined(insertInfo)) {
        insertInfo = this._addInsertInfo(change);
        key = insertInfo.key;
      }
      var loadedRowIndex = this._getLoadedRowIndex(items, change);
      var item = this._generateNewItem(key);
      if (loadedRowIndex >= 0) {
        items.splice(loadedRowIndex, 0, item);
      }
    });
    return items;
  }
  processDataItem(item, options2, generateDataValues) {
    var columns2 = options2.visibleColumns;
    var key = item.data[INSERT_INDEX] ? item.data.key : item.key;
    var changes = this.getChanges();
    var editIndex = m_utils_default.getIndexByKey(key, changes);
    item.isEditing = false;
    if (editIndex >= 0) {
      this._processDataItemCore(item, changes[editIndex], key, columns2, generateDataValues);
    }
  }
  _processDataItemCore(item, change, key, columns2, generateDataValues) {
    var {
      data: data3,
      type: type2
    } = change;
    switch (type2) {
      case DATA_EDIT_DATA_INSERT_TYPE:
        item.isNewRow = true;
        item.key = key;
        item.data = data3;
        break;
      case DATA_EDIT_DATA_UPDATE_TYPE:
        item.modified = true;
        item.oldData = item.data;
        item.data = createObjectWithChanges(item.data, data3);
        item.modifiedValues = generateDataValues(data3, columns2, true);
        break;
      case DATA_EDIT_DATA_REMOVE_TYPE:
        item.removed = true;
    }
  }
  _initNewRow(options2) {
    this.executeAction("onInitNewRow", options2);
    if (options2.promise) {
      var deferred = new Deferred();
      when(fromPromise(options2.promise)).done(deferred.resolve).fail(createFailureHandler(deferred)).fail((arg) => this._fireDataErrorOccurred(arg));
      return deferred;
    }
  }
  _createInsertInfo() {
    var insertInfo = {};
    insertInfo[INSERT_INDEX] = this._getInsertIndex();
    return insertInfo;
  }
  _addInsertInfo(change, parentKey) {
    var _a2;
    var insertInfo;
    change.key = this.getChangeKeyValue(change);
    var {
      key
    } = change;
    insertInfo = null === (_a2 = this._getInternalData(key)) || void 0 === _a2 ? void 0 : _a2.insertInfo;
    if (!isDefined(insertInfo)) {
      var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);
      insertInfo = this._createInsertInfo();
      if (!isDefined(insertAfterOrBeforeKey)) {
        this._setInsertAfterOrBeforeKey(change, parentKey);
      }
    }
    this._addInternalData({
      insertInfo,
      key
    });
    return {
      insertInfo,
      key
    };
  }
  getChangeKeyValue(change) {
    if (isDefined(change.key)) {
      return change.key;
    }
    var keyExpr = this._dataController.key();
    var keyValue;
    if (change.data && keyExpr && !Array.isArray(keyExpr)) {
      keyValue = change.data[keyExpr];
    }
    if (!isDefined(keyValue)) {
      keyValue = generateNewRowTempKey();
    }
    return keyValue;
  }
  _setInsertAfterOrBeforeKey(change, parentKey) {
    var dataController2 = this._dataController;
    var allItems = dataController2.items(true);
    var rowsView3 = this.getView("rowsView");
    var newRowPosition = this._getNewRowPosition();
    switch (newRowPosition) {
      case FIRST_NEW_ROW_POSITION:
      case LAST_NEW_ROW_POSITION:
        break;
      case PAGE_TOP_NEW_ROW_POSITION:
      case PAGE_BOTTOM_NEW_ROW_POSITION:
        if (allItems.length) {
          var itemIndex = newRowPosition === PAGE_TOP_NEW_ROW_POSITION ? 0 : allItems.length - 1;
          change[0 === itemIndex ? "insertBeforeKey" : "insertAfterKey"] = allItems[itemIndex].key;
        }
        break;
      default:
        var isViewportBottom = newRowPosition === VIEWPORT_BOTTOM_NEW_ROW_POSITION;
        var visibleItemIndex = isViewportBottom ? null === rowsView3 || void 0 === rowsView3 ? void 0 : rowsView3.getBottomVisibleItemIndex() : null === rowsView3 || void 0 === rowsView3 ? void 0 : rowsView3.getTopVisibleItemIndex();
        var row = dataController2.getVisibleRows()[visibleItemIndex];
        if (row && (!row.isEditing && "detail" === row.rowType || "detailAdaptive" === row.rowType)) {
          visibleItemIndex++;
        }
        var insertKey = dataController2.getKeyByRowIndex(visibleItemIndex);
        if (isDefined(insertKey)) {
          change.insertBeforeKey = insertKey;
        }
    }
  }
  _getInsertIndex() {
    var maxInsertIndex = 0;
    this.getChanges().forEach((editItem) => {
      var _a2;
      var insertInfo = null === (_a2 = this._getInternalData(editItem.key)) || void 0 === _a2 ? void 0 : _a2.insertInfo;
      if (isDefined(insertInfo) && editItem.type === DATA_EDIT_DATA_INSERT_TYPE && insertInfo[INSERT_INDEX] > maxInsertIndex) {
        maxInsertIndex = insertInfo[INSERT_INDEX];
      }
    });
    return maxInsertIndex + 1;
  }
  _getInsertAfterOrBeforeKey(insertChange) {
    var _a2;
    return null !== (_a2 = insertChange.insertAfterKey) && void 0 !== _a2 ? _a2 : insertChange.insertBeforeKey;
  }
  _getPageIndexToInsertRow() {
    var newRowPosition = this._getNewRowPosition();
    var dataController2 = this._dataController;
    var pageIndex = dataController2.pageIndex();
    var lastPageIndex = dataController2.pageCount() - 1;
    if (newRowPosition === FIRST_NEW_ROW_POSITION && 0 !== pageIndex) {
      return 0;
    }
    if (newRowPosition === LAST_NEW_ROW_POSITION && pageIndex !== lastPageIndex) {
      return lastPageIndex;
    }
    return -1;
  }
  addRow(parentKey) {
    var dataController2 = this._dataController;
    var store = dataController2.store();
    if (!store) {
      dataController2.fireError("E1052", this.component.NAME);
      return new Deferred().reject();
    }
    return this._addRow(parentKey);
  }
  _addRow(parentKey) {
    var dataController2 = this._dataController;
    var store = dataController2.store();
    var key = store && store.key();
    var param = {
      data: {}
    };
    var oldEditRowIndex = this._getVisibleEditRowIndex();
    var deferred = new Deferred();
    this.refresh({
      allowCancelEditing: true
    });
    if (!this._allowRowAdding()) {
      when(this._navigateToNewRow(oldEditRowIndex)).done(deferred.resolve).fail(deferred.reject);
      return deferred.promise();
    }
    if (!key) {
      param.data.__KEY__ = String(new guid_default());
    }
    when(this._initNewRow(param, parentKey)).done(() => {
      if (this._allowRowAdding()) {
        when(this._addRowCore(param.data, parentKey, oldEditRowIndex)).done(deferred.resolve).fail(deferred.reject);
      } else {
        deferred.reject("cancel");
      }
    }).fail(deferred.reject);
    return deferred.promise();
  }
  _allowRowAdding(params) {
    var insertIndex = this._getInsertIndex();
    if (insertIndex > 1) {
      return false;
    }
    return true;
  }
  _addRowCore(data3, parentKey, initialOldEditRowIndex) {
    var change = {
      data: data3,
      type: DATA_EDIT_DATA_INSERT_TYPE
    };
    var editRowIndex = this._getVisibleEditRowIndex();
    var insertInfo = this._addInsertInfo(change, parentKey);
    var {
      key
    } = insertInfo;
    this._setEditRowKey(key, true);
    this._addChange(change);
    return this._navigateToNewRow(initialOldEditRowIndex, change, editRowIndex);
  }
  _navigateToNewRow(oldEditRowIndex, change, editRowIndex) {
    var d = new Deferred();
    var dataController2 = this._dataController;
    var focusController = this.getController("focus");
    editRowIndex = null !== editRowIndex && void 0 !== editRowIndex ? editRowIndex : -1;
    change = null !== change && void 0 !== change ? change : this.getChanges().filter((c) => c.type === DATA_EDIT_DATA_INSERT_TYPE)[0];
    if (!change) {
      return d.reject("cancel").promise();
    }
    var pageIndexToInsertRow = this._getPageIndexToInsertRow();
    var rowIndex = this._getLoadedRowIndex(dataController2.items(), change, true);
    var navigateToRowByKey = (key) => {
      when(null === focusController || void 0 === focusController ? void 0 : focusController.navigateToRow(key)).done(() => {
        rowIndex = dataController2.getRowIndexByKey(change.key);
        d.resolve();
      });
    };
    var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);
    if (pageIndexToInsertRow >= 0) {
      dataController2.pageIndex(pageIndexToInsertRow).done(() => {
        navigateToRowByKey(change.key);
      }).fail(d.reject);
    } else if (rowIndex < 0 && isDefined(insertAfterOrBeforeKey)) {
      navigateToRowByKey(insertAfterOrBeforeKey);
    } else {
      dataController2.updateItems({
        changeType: "update",
        rowIndices: [oldEditRowIndex, editRowIndex, rowIndex]
      });
      rowIndex = dataController2.getRowIndexByKey(change.key);
      if (rowIndex < 0) {
        navigateToRowByKey(change.key);
      } else {
        d.resolve();
      }
    }
    d.done(() => {
      var _a2;
      null === (_a2 = this._rowsView) || void 0 === _a2 ? void 0 : _a2.waitAsyncTemplates(true).done(() => {
        this._showAddedRow(rowIndex);
        this._afterInsertRow(change.key);
      });
    });
    return d.promise();
  }
  _showAddedRow(rowIndex) {
    this._focusFirstEditableCellInRow(rowIndex);
  }
  _beforeFocusElementInRow(rowIndex) {
  }
  _focusFirstEditableCellInRow(rowIndex) {
    var dataController2 = this._dataController;
    var keyboardController = this.getController("keyboardNavigation");
    var key = dataController2.getKeyByRowIndex(rowIndex);
    var $firstCell = this.getFirstEditableCellInRow(rowIndex);
    null === keyboardController || void 0 === keyboardController ? void 0 : keyboardController.focus($firstCell);
    this.option("focusedRowKey", key);
    this._editCellInProgress = true;
    this._delayedInputFocus($firstCell, () => {
      rowIndex = dataController2.getRowIndexByKey(key);
      this._editCellInProgress = false;
      this._beforeFocusElementInRow(rowIndex);
    });
  }
  _isEditingStart(options2) {
    this.executeAction("onEditingStart", options2);
    return options2.cancel;
  }
  _beforeUpdateItems(rowIndices, rowIndex) {
  }
  _getVisibleEditColumnIndex() {
    var editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);
    if (!isDefined(editColumnName)) {
      return -1;
    }
    return this._columnsController.getVisibleColumnIndex(editColumnName);
  }
  _setEditColumnNameByIndex(index2, silent) {
    var _a2;
    var visibleColumns = this._columnsController.getVisibleColumns();
    this._setEditColumnName(null === (_a2 = visibleColumns[index2]) || void 0 === _a2 ? void 0 : _a2.name, silent);
  }
  _setEditColumnName(name2, silent) {
    if (silent) {
      this._silentOption(EDITING_EDITCOLUMNNAME_OPTION_NAME, name2);
    } else {
      this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME, name2);
    }
  }
  _resetEditColumnName() {
    this._setEditColumnName(null, true);
  }
  _getEditColumn() {
    var editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);
    return this._getColumnByName(editColumnName);
  }
  _getColumnByName(name2) {
    var visibleColumns = this._columnsController.getVisibleColumns();
    var editColumn;
    isDefined(name2) && visibleColumns.some((column) => {
      if (column.name === name2) {
        editColumn = column;
        return true;
      }
    });
    return editColumn;
  }
  _getVisibleEditRowIndex(columnName) {
    var dataController2 = this._dataController;
    var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);
    var rowIndex = dataController2.getRowIndexByKey(editRowKey);
    if (-1 === rowIndex) {
      return rowIndex;
    }
    return rowIndex + this._getEditRowIndexCorrection(columnName);
  }
  _getEditRowIndexCorrection(columnName) {
    var editColumn = columnName ? this._getColumnByName(columnName) : this._getEditColumn();
    var isColumnHidden = "adaptiveHidden" === (null === editColumn || void 0 === editColumn ? void 0 : editColumn.visibleWidth);
    return isColumnHidden ? 1 : 0;
  }
  _resetEditRowKey() {
    this._refocusEditCell = false;
    this._setEditRowKey(null, true);
  }
  _resetEditIndices() {
    this._resetEditColumnName();
    this._resetEditRowKey();
  }
  editRow(rowIndex) {
    var _a2;
    var dataController2 = this._dataController;
    var items = dataController2.items();
    var item = items[rowIndex];
    var params = {
      data: item && item.data,
      cancel: false
    };
    var oldRowIndex = this._getVisibleEditRowIndex();
    if (!item) {
      return;
    }
    if (rowIndex === oldRowIndex) {
      return true;
    }
    if (void 0 === item.key) {
      this._dataController.fireError("E1043");
      return;
    }
    if (!item.isNewRow) {
      params.key = item.key;
    }
    if (this._isEditingStart(params)) {
      return;
    }
    this.resetChanges();
    this.init();
    this._resetEditColumnName();
    this._pageIndex = dataController2.pageIndex();
    this._addInternalData({
      key: item.key,
      oldData: null !== (_a2 = item.oldData) && void 0 !== _a2 ? _a2 : item.data
    });
    this._setEditRowKey(item.key);
  }
  _editRowFromOptionChanged(rowIndex, oldRowIndex) {
    var rowIndices = [oldRowIndex, rowIndex];
    this._beforeUpdateItems(rowIndices, rowIndex, oldRowIndex);
    this._editRowFromOptionChangedCore(rowIndices, rowIndex);
  }
  _editRowFromOptionChangedCore(rowIndices, rowIndex, preventRendering) {
    this._needFocusEditor = true;
    this._dataController.updateItems({
      changeType: "update",
      rowIndices,
      cancel: preventRendering
    });
  }
  _focusEditorIfNeed() {
  }
  _showEditPopup(rowIndex, repaintForm) {
  }
  _repaintEditPopup() {
  }
  _getEditPopupHiddenHandler() {
    return (e) => {
      if (this.isEditing()) {
        this.cancelEditData();
      }
    };
  }
  _getPopupEditFormTemplate(rowIndex) {
  }
  _getSaveButtonConfig() {
    var buttonConfig = {
      text: this.option("editing.texts.saveRowChanges"),
      onClick: this.saveEditData.bind(this)
    };
    if (isFluent(current())) {
      buttonConfig.stylingMode = "contained";
      buttonConfig.type = "default";
    }
    return buttonConfig;
  }
  _getCancelButtonConfig() {
    var buttonConfig = {
      text: this.option("editing.texts.cancelRowChanges"),
      onClick: this.cancelEditData.bind(this)
    };
    if (isFluent(current())) {
      buttonConfig.stylingMode = "outlined";
    }
    return buttonConfig;
  }
  _removeInternalData(key) {
    var internalData = this._getInternalData(key);
    var index2 = this._internalState.indexOf(internalData);
    if (index2 > -1) {
      this._internalState.splice(index2, 1);
    }
  }
  _updateInsertAfterOrBeforeKeys(changes, index2) {
    var removeChange = changes[index2];
    changes.forEach((change) => {
      var insertAfterOrBeforeKey = this._getInsertAfterOrBeforeKey(change);
      if (equalByValue(insertAfterOrBeforeKey, removeChange.key)) {
        change[isDefined(change.insertAfterKey) ? "insertAfterKey" : "insertBeforeKey"] = this._getInsertAfterOrBeforeKey(removeChange);
      }
    });
  }
  _removeChange(index2) {
    if (index2 >= 0) {
      var changes = [...this.getChanges()];
      var {
        key
      } = changes[index2];
      this._removeInternalData(key);
      this._updateInsertAfterOrBeforeKeys(changes, index2);
      changes.splice(index2, 1);
      this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);
      if (equalByValue(this.option(EDITING_EDITROWKEY_OPTION_NAME), key)) {
        this._resetEditIndices();
      }
    }
  }
  executeOperation(deferred, func) {
    this._lastOperation && this._lastOperation.reject();
    this._lastOperation = deferred;
    this.waitForDeferredOperations().done(() => {
      if ("rejected" === deferred.state()) {
        return;
      }
      func();
      this._lastOperation = null;
    }).fail(() => {
      deferred.reject();
      this._lastOperation = null;
    });
  }
  waitForDeferredOperations() {
    return when(...this._deferreds);
  }
  _processCanceledEditingCell() {
  }
  _repaintEditCell(column, oldColumn, oldEditRowIndex) {
    if (!column || !column.showEditorAlways || oldColumn && !oldColumn.showEditorAlways) {
      this._editCellInProgress = true;
      this._needFocusEditor = true;
      this.getController("editorFactory").loseFocus();
      this._dataController.updateItems({
        changeType: "update",
        rowIndices: [oldEditRowIndex, this._getVisibleEditRowIndex()]
      });
    } else if (column !== oldColumn) {
      this._needFocusEditor = true;
      this._dataController.updateItems({
        changeType: "update",
        rowIndices: []
      });
    }
  }
  _delayedInputFocus($cell, beforeFocusCallback, callBeforeFocusCallbackAlways) {
    var inputFocus = () => {
      if (beforeFocusCallback) {
        beforeFocusCallback();
      }
      if ($cell) {
        var $focusableElement = $cell.find(FOCUSABLE_ELEMENT_SELECTOR).first();
        m_utils_default.focusAndSelectElement(this, $focusableElement);
      }
      this._beforeFocusCallback = null;
    };
    if (devices_default.real().ios || devices_default.real().android) {
      inputFocus();
    } else {
      if (this._beforeFocusCallback) {
        this._beforeFocusCallback();
      }
      clearTimeout(this._inputFocusTimeoutID);
      if (callBeforeFocusCallbackAlways) {
        this._beforeFocusCallback = beforeFocusCallback;
      }
      this._inputFocusTimeoutID = setTimeout(inputFocus);
    }
  }
  _focusEditingCell(beforeFocusCallback, $editCell, callBeforeFocusCallbackAlways) {
    var rowsView3 = this.getView("rowsView");
    var editColumnIndex = this._getVisibleEditColumnIndex();
    $editCell = $editCell || rowsView3 && rowsView3._getCellElement(this._getVisibleEditRowIndex(), editColumnIndex);
    if ($editCell) {
      this._delayedInputFocus($editCell, beforeFocusCallback, callBeforeFocusCallbackAlways);
    }
  }
  deleteRow(rowIndex) {
    this._checkAndDeleteRow(rowIndex);
  }
  _checkAndDeleteRow(rowIndex) {
    var editingOptions = this.option("editing");
    var editingTexts = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.texts;
    var confirmDelete = null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.confirmDelete;
    var confirmDeleteMessage = null === editingTexts || void 0 === editingTexts ? void 0 : editingTexts.confirmDeleteMessage;
    var item = this._dataController.items()[rowIndex];
    var allowDeleting = !this.isEditing() || item.isNewRow;
    if (item && allowDeleting) {
      if (!confirmDelete || !confirmDeleteMessage) {
        this._deleteRowCore(rowIndex);
      } else {
        var confirmDeleteTitle = editingTexts && editingTexts.confirmDeleteTitle;
        var showDialogTitle = isDefined(confirmDeleteTitle) && confirmDeleteTitle.length > 0;
        confirm(confirmDeleteMessage, confirmDeleteTitle, showDialogTitle).done((confirmResult) => {
          if (confirmResult) {
            this._deleteRowCore(rowIndex);
          }
        });
      }
    }
  }
  _deleteRowCore(rowIndex) {
    var dataController2 = this._dataController;
    var item = dataController2.items()[rowIndex];
    var key = item && item.key;
    var oldEditRowIndex = this._getVisibleEditRowIndex();
    this.refresh();
    var changes = this.getChanges();
    var editIndex = m_utils_default.getIndexByKey(key, changes);
    if (editIndex >= 0) {
      if (changes[editIndex].type === DATA_EDIT_DATA_INSERT_TYPE) {
        this._removeChange(editIndex);
      } else {
        this._addChange({
          key,
          type: DATA_EDIT_DATA_REMOVE_TYPE
        });
      }
    } else {
      this._addChange({
        key,
        oldData: item.data,
        type: DATA_EDIT_DATA_REMOVE_TYPE
      });
    }
    return this._afterDeleteRow(rowIndex, oldEditRowIndex);
  }
  _afterDeleteRow(rowIndex, oldEditRowIndex) {
    return this.saveEditData();
  }
  undeleteRow(rowIndex) {
    var dataController2 = this._dataController;
    var item = dataController2.items()[rowIndex];
    var oldEditRowIndex = this._getVisibleEditRowIndex();
    var key = item && item.key;
    var changes = this.getChanges();
    if (item) {
      var editIndex = m_utils_default.getIndexByKey(key, changes);
      if (editIndex >= 0) {
        var {
          data: data3
        } = changes[editIndex];
        if (isEmptyObject(data3)) {
          this._removeChange(editIndex);
        } else {
          this._addChange({
            key,
            type: DATA_EDIT_DATA_UPDATE_TYPE
          });
        }
        dataController2.updateItems({
          changeType: "update",
          rowIndices: [oldEditRowIndex, rowIndex]
        });
      }
    }
  }
  _fireOnSaving() {
    var onSavingParams = {
      cancel: false,
      promise: null,
      changes: [...this.getChanges()]
    };
    this.executeAction("onSaving", onSavingParams);
    var d = new Deferred();
    when(fromPromise(onSavingParams.promise)).done(() => {
      d.resolve(onSavingParams);
    }).fail((arg) => {
      createFailureHandler(d);
      this._fireDataErrorOccurred(arg);
      d.resolve({
        cancel: true
      });
    });
    return d;
  }
  _executeEditingAction(actionName, params, func) {
    if (this.component._disposed) {
      return null;
    }
    var deferred = new Deferred();
    this.executeAction(actionName, params);
    when(fromPromise(params.cancel)).done((cancel2) => {
      if (cancel2) {
        setTimeout(() => {
          deferred.resolve("cancel");
        });
      } else {
        func(params).done(deferred.resolve).fail(createFailureHandler(deferred));
      }
    }).fail(createFailureHandler(deferred));
    return deferred;
  }
  _processChanges(deferreds, results, dataChanges, changes) {
    var store = this._dataController.store();
    each(changes, (index2, change) => {
      var oldData = this._getOldData(change.key);
      var {
        data: data3,
        type: type2
      } = change;
      var changeCopy = _extends({}, change);
      var deferred;
      var params;
      if (this._beforeSaveEditData(change, index2)) {
        return;
      }
      switch (type2) {
        case DATA_EDIT_DATA_REMOVE_TYPE:
          params = {
            data: oldData,
            key: change.key,
            cancel: false
          };
          deferred = this._executeEditingAction("onRowRemoving", params, () => store.remove(change.key).done((key) => {
            dataChanges.push({
              type: "remove",
              key
            });
          }));
          break;
        case DATA_EDIT_DATA_INSERT_TYPE:
          params = {
            data: data3,
            cancel: false
          };
          deferred = this._executeEditingAction("onRowInserting", params, () => store.insert(params.data).done((data4, key) => {
            if (isDefined(key)) {
              changeCopy.key = key;
            }
            if (data4 && isObject(data4) && data4 !== params.data) {
              changeCopy.data = data4;
            }
            dataChanges.push({
              type: "insert",
              data: data4,
              index: 0
            });
          }));
          break;
        case DATA_EDIT_DATA_UPDATE_TYPE:
          params = {
            newData: data3,
            oldData,
            key: change.key,
            cancel: false
          };
          deferred = this._executeEditingAction("onRowUpdating", params, () => store.update(change.key, params.newData).done((data4, key) => {
            if (data4 && isObject(data4) && data4 !== params.newData) {
              changeCopy.data = data4;
            }
            dataChanges.push({
              type: "update",
              key,
              data: data4
            });
          }));
      }
      changes[index2] = changeCopy;
      if (deferred) {
        var doneDeferred = new Deferred();
        deferred.always((data4) => {
          results.push({
            key: change.key,
            result: data4
          });
        }).always(doneDeferred.resolve);
        deferreds.push(doneDeferred.promise());
      }
    });
  }
  _processRemoveIfError(changes, editIndex) {
    var change = changes[editIndex];
    if ((null === change || void 0 === change ? void 0 : change.type) === DATA_EDIT_DATA_REMOVE_TYPE) {
      if (editIndex >= 0) {
        changes.splice(editIndex, 1);
      }
    }
    return true;
  }
  _processRemove(changes, editIndex, cancel2) {
    var change = changes[editIndex];
    if (!cancel2 || !change || change.type === DATA_EDIT_DATA_REMOVE_TYPE) {
      return this._processRemoveCore(changes, editIndex, !cancel2 || !change);
    }
  }
  _processRemoveCore(changes, editIndex, processIfBatch) {
    if (editIndex >= 0) {
      changes.splice(editIndex, 1);
    }
    return true;
  }
  _processSaveEditDataResult(results) {
    var hasSavedData = false;
    var changes = [...this.getChanges()];
    var changesLength = changes.length;
    for (var i = 0; i < results.length; i++) {
      var arg = results[i].result;
      var cancel2 = "cancel" === arg;
      var editIndex = m_utils_default.getIndexByKey(results[i].key, changes);
      var change = changes[editIndex];
      var isError = arg && arg instanceof Error;
      if (isError) {
        if (change) {
          this._addInternalData({
            key: change.key,
            error: arg
          });
        }
        this._fireDataErrorOccurred(arg);
        if (this._processRemoveIfError(changes, editIndex)) {
          break;
        }
      } else if (this._processRemove(changes, editIndex, cancel2)) {
        hasSavedData = !cancel2;
      }
    }
    if (changes.length < changesLength) {
      this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);
    }
    return hasSavedData;
  }
  _fireSaveEditDataEvents(changes) {
    each(changes, (_, _ref) => {
      var {
        data: data3,
        key,
        type: type2
      } = _ref;
      var internalData = this._addInternalData({
        key
      });
      var params = {
        key,
        data: data3
      };
      if (internalData.error) {
        params.error = internalData.error;
      }
      switch (type2) {
        case DATA_EDIT_DATA_REMOVE_TYPE:
          this.executeAction("onRowRemoved", extend({}, params, {
            data: internalData.oldData
          }));
          break;
        case DATA_EDIT_DATA_INSERT_TYPE:
          this.executeAction("onRowInserted", params);
          break;
        case DATA_EDIT_DATA_UPDATE_TYPE:
          this.executeAction("onRowUpdated", params);
      }
    });
    this.executeAction("onSaved", {
      changes
    });
  }
  saveEditData() {
    var deferred = new Deferred();
    this.waitForDeferredOperations().done(() => {
      if (this.isSaving()) {
        this._resolveAfterSave(deferred);
        return;
      }
      when(this._beforeSaveEditData()).done((cancel2) => {
        if (cancel2) {
          this._resolveAfterSave(deferred, {
            cancel: cancel2
          });
          return;
        }
        this._saving = true;
        this._saveEditDataInner().always(() => {
          this._saving = false;
          if (this._refocusEditCell) {
            this._focusEditingCell();
          }
        }).done(deferred.resolve).fail(deferred.reject);
      }).fail(deferred.reject);
    }).fail(deferred.reject);
    return deferred.promise();
  }
  _resolveAfterSave(deferred) {
    var {
      cancel: cancel2,
      error
    } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    when(this._afterSaveEditData(cancel2)).done(() => {
      deferred.resolve(error);
    }).fail(deferred.reject);
  }
  _saveEditDataInner() {
    var result2 = new Deferred();
    var results = [];
    var deferreds = [];
    var dataChanges = [];
    var dataSource = this._dataController.dataSource();
    when(this._fireOnSaving()).done((_ref2) => {
      var {
        cancel: cancel2,
        changes
      } = _ref2;
      if (cancel2) {
        return result2.resolve().promise();
      }
      this._processChanges(deferreds, results, dataChanges, changes);
      if (deferreds.length) {
        this._refocusEditCell = true;
        null === dataSource || void 0 === dataSource ? void 0 : dataSource.beginLoading();
        when(...deferreds).done(() => {
          if (this._processSaveEditDataResult(results)) {
            this._endSaving(dataChanges, changes, result2);
          } else {
            null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();
            result2.resolve();
          }
        }).fail((error) => {
          null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();
          result2.resolve(error);
        });
        return result2.always(() => {
          this._refocusEditCell = true;
        }).promise();
      }
      this._cancelSaving(result2);
    }).fail(result2.reject);
    return result2.promise();
  }
  _beforeEndSaving(changes) {
    this._resetEditIndices();
  }
  _endSaving(dataChanges, changes, deferred) {
    var dataSource = this._dataController.dataSource();
    this._beforeEndSaving(changes);
    null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();
    this._refreshDataAfterSave(dataChanges, changes, deferred);
  }
  _cancelSaving(result2) {
    this.executeAction("onSaved", {
      changes: []
    });
    this._resolveAfterSave(result2);
  }
  _refreshDataAfterSave(dataChanges, changes, deferred) {
    var dataController2 = this._dataController;
    var refreshMode = this.option("editing.refreshMode");
    var isFullRefresh = "reshape" !== refreshMode && "repaint" !== refreshMode;
    if (!isFullRefresh) {
      dataController2.push(dataChanges);
    }
    when(dataController2.refresh({
      selection: isFullRefresh,
      reload: isFullRefresh,
      load: "reshape" === refreshMode,
      changesOnly: this.option("repaintChangesOnly")
    })).always(() => {
      this._fireSaveEditDataEvents(changes);
    }).done(() => {
      this._resolveAfterSave(deferred);
    }).fail((error) => {
      this._resolveAfterSave(deferred, {
        error
      });
    });
  }
  isSaving() {
    return this._saving;
  }
  _updateEditColumn() {
    var isEditColumnVisible = this._isEditColumnVisible();
    var useIcons = this.option("editing.useIcons");
    var cssClass = COMMAND_EDIT_CLASS + (useIcons ? " ".concat(COMMAND_EDIT_WITH_ICONS_CLASS) : "");
    this._columnsController.addCommandColumn({
      type: "buttons",
      command: "edit",
      visible: isEditColumnVisible,
      cssClass,
      width: "auto",
      alignment: "center",
      cellTemplate: this._getEditCommandCellTemplate(),
      fixedPosition: "right"
    });
    this._columnsController.columnOption("command:edit", {
      visible: isEditColumnVisible,
      cssClass
    });
  }
  _isEditColumnVisible() {
    var editingOptions = this.option("editing");
    return editingOptions.allowDeleting;
  }
  _isEditButtonDisabled() {
    var hasChanges = this.hasChanges();
    var isEditRowDefined = isDefined(this.option("editing.editRowKey"));
    return !(isEditRowDefined || hasChanges);
  }
  _updateEditButtons() {
    var headerPanel2 = this.getView("headerPanel");
    var isButtonDisabled = this._isEditButtonDisabled();
    if (headerPanel2) {
      headerPanel2.setToolbarItemDisabled("saveButton", isButtonDisabled);
      headerPanel2.setToolbarItemDisabled("revertButton", isButtonDisabled);
    }
  }
  _applyModified($element, options2) {
    $element && $element.addClass(CELL_MODIFIED);
  }
  _beforeCloseEditCellInBatchMode(rowIndices) {
  }
  cancelEditData() {
    var changes = this.getChanges();
    var params = {
      cancel: false,
      changes
    };
    this.executeAction("onEditCanceling", params);
    if (!params.cancel) {
      this._cancelEditDataCore();
      this.executeAction("onEditCanceled", {
        changes
      });
    }
  }
  _cancelEditDataCore() {
    var rowIndex = this._getVisibleEditRowIndex();
    this._beforeCancelEditData();
    this.init();
    this.resetChanges();
    this._resetEditColumnName();
    this._resetEditRowKey();
    this._afterCancelEditData(rowIndex);
  }
  _afterCancelEditData(rowIndex) {
    var dataController2 = this._dataController;
    dataController2.updateItems({
      repaintChangesOnly: this.option("repaintChangesOnly")
    });
  }
  _hideEditPopup() {
  }
  hasEditData() {
    return this.hasChanges();
  }
  update(changeType) {
    var dataController2 = this._dataController;
    if (dataController2 && this._pageIndex !== dataController2.pageIndex()) {
      if ("refresh" === changeType) {
        this.refresh({
          isPageChanged: true
        });
      }
      this._pageIndex = dataController2.pageIndex();
    }
    this._updateEditButtons();
  }
  _getRowIndicesForCascadeUpdating(row, skipCurrentRow) {
    return skipCurrentRow ? [] : [row.rowIndex];
  }
  addDeferred(deferred) {
    if (!this._deferreds.includes(deferred)) {
      this._deferreds.push(deferred);
      deferred.always(() => {
        var index2 = this._deferreds.indexOf(deferred);
        if (index2 >= 0) {
          this._deferreds.splice(index2, 1);
        }
      });
    }
  }
  _prepareChange(options2, value2, text) {
    var _a2;
    var newData = {};
    var oldData = null === (_a2 = options2.row) || void 0 === _a2 ? void 0 : _a2.data;
    var rowKey = options2.key;
    var deferred = new Deferred();
    if (void 0 !== rowKey) {
      options2.value = value2;
      var setCellValueResult = fromPromise(options2.column.setCellValue(newData, value2, extend(true, {}, oldData), text));
      setCellValueResult.done(() => {
        deferred.resolve({
          data: newData,
          key: rowKey,
          oldData,
          type: DATA_EDIT_DATA_UPDATE_TYPE
        });
      }).fail(createFailureHandler(deferred)).fail((arg) => this._fireDataErrorOccurred(arg));
      if (isDefined(text) && options2.column.displayValueMap) {
        options2.column.displayValueMap[value2] = text;
      }
      this._updateRowValues(options2);
      this.addDeferred(deferred);
    }
    return deferred;
  }
  _updateRowValues(options2) {
    if (options2.values) {
      var dataController2 = this._dataController;
      var rowIndex = dataController2.getRowIndexByKey(options2.key);
      var row = dataController2.getVisibleRows()[rowIndex];
      if (row) {
        options2.row.values = row.values;
        options2.values = row.values;
      }
      options2.values[options2.columnIndex] = options2.value;
    }
  }
  updateFieldValue(options2, value2, text, forceUpdateRow) {
    var rowKey = options2.key;
    var deferred = new Deferred();
    if (void 0 === rowKey) {
      this._dataController.fireError("E1043");
    }
    if (options2.column.setCellValue) {
      this._prepareChange(options2, value2, text).done((params) => {
        when(this._applyChange(options2, params, forceUpdateRow)).always(() => {
          deferred.resolve();
        });
      });
    } else {
      deferred.resolve();
    }
    return deferred.promise();
  }
  _focusPreviousEditingCellIfNeed(options2) {
    if (this.hasEditData() && !this.isEditCell(options2.rowIndex, options2.columnIndex)) {
      this._focusEditingCell();
      this._updateEditRow(options2.row, true);
      return true;
    }
  }
  _needUpdateRow(column) {
    var visibleColumns = this._columnsController.getVisibleColumns();
    if (!column) {
      column = this._getEditColumn();
    }
    var isCustomSetCellValue = column && column.setCellValue !== column.defaultSetCellValue;
    var isCustomCalculateCellValue = visibleColumns.some((visibleColumn) => visibleColumn.calculateCellValue !== visibleColumn.defaultCalculateCellValue);
    return isCustomSetCellValue || isCustomCalculateCellValue;
  }
  _applyChange(options2, params, forceUpdateRow) {
    var changeOptions = _extends(_extends({}, options2), {
      forceUpdateRow
    });
    this._addChange(params, changeOptions);
    this._updateEditButtons();
    return this._applyChangeCore(options2, changeOptions.forceUpdateRow);
  }
  _applyChangeCore(options2, forceUpdateRow) {
    var isCustomSetCellValue = options2.column.setCellValue !== options2.column.defaultSetCellValue;
    var {
      row
    } = options2;
    if (row) {
      if (forceUpdateRow || isCustomSetCellValue) {
        this._updateEditRow(row, forceUpdateRow, isCustomSetCellValue);
      } else if (row.update) {
        row.update();
      }
    }
  }
  _updateEditRowCore(row, skipCurrentRow, isCustomSetCellValue) {
    this._dataController.updateItems({
      changeType: "update",
      rowIndices: this._getRowIndicesForCascadeUpdating(row, skipCurrentRow)
    });
  }
  _updateEditRow(row, forceUpdateRow, isCustomSetCellValue) {
    if (forceUpdateRow) {
      this._updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue);
    } else {
      this._updateRowWithDelay(row, isCustomSetCellValue);
    }
  }
  _updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue) {
    this._updateEditRowCore(row, !forceUpdateRow, isCustomSetCellValue);
    this._validateEditFormAfterUpdate(row, isCustomSetCellValue);
    if (!forceUpdateRow) {
      this._focusEditingCell();
    }
  }
  _updateRowWithDelay(row, isCustomSetCellValue) {
    var deferred = new Deferred();
    this.addDeferred(deferred);
    setTimeout(() => {
      var _a2;
      var elementContainer = (null === (_a2 = this._editForm) || void 0 === _a2 ? void 0 : _a2.element()) || this.component.$element().get(0);
      var $focusedElement = renderer_default(dom_adapter_default.getActiveElement(elementContainer));
      var columnIndex = this._rowsView.getCellIndex($focusedElement, row.rowIndex);
      var focusedElement = $focusedElement.get(0);
      var selectionRange = m_utils_default.getSelectionRange(focusedElement);
      this._updateEditRowCore(row, false, isCustomSetCellValue);
      this._validateEditFormAfterUpdate(row, isCustomSetCellValue);
      if (columnIndex >= 0) {
        var $focusedItem = this._rowsView._getCellElement(row.rowIndex, columnIndex);
        this._delayedInputFocus($focusedItem, () => {
          setTimeout(() => {
            var _a3;
            focusedElement = dom_adapter_default.getActiveElement(null === (_a3 = this.component.$element()) || void 0 === _a3 ? void 0 : _a3.get(0));
            if (selectionRange.selectionStart >= 0) {
              m_utils_default.setSelectionRange(focusedElement, selectionRange);
            }
          });
        });
      }
      deferred.resolve();
    });
  }
  _validateEditFormAfterUpdate() {
  }
  _addChange(changeParams, options2) {
    var _a2;
    var row = null === options2 || void 0 === options2 ? void 0 : options2.row;
    var changes = [...this.getChanges()];
    var index2 = m_utils_default.getIndexByKey(changeParams.key, changes);
    if (index2 < 0) {
      index2 = changes.length;
      this._addInternalData({
        key: changeParams.key,
        oldData: changeParams.oldData
      });
      delete changeParams.oldData;
      changes.push(changeParams);
    }
    var change = _extends({}, changes[index2]);
    if (change) {
      if (changeParams.data) {
        change.data = createObjectWithChanges(change.data, changeParams.data);
      }
      if ((!change.type || !changeParams.data) && changeParams.type) {
        change.type = changeParams.type;
      }
      if (row) {
        row.oldData = this._getOldData(row.key);
        row.data = createObjectWithChanges(row.data, changeParams.data);
      }
    }
    changes[index2] = change;
    this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);
    if (options2 && change !== (null === (_a2 = this.getChanges()) || void 0 === _a2 ? void 0 : _a2[index2])) {
      options2.forceUpdateRow = true;
    }
    return change;
  }
  _getFormEditItemTemplate(cellOptions, column) {
    return column.editCellTemplate || this._getDefaultEditorTemplate();
  }
  getColumnTemplate(options2) {
    var {
      column
    } = options2;
    var rowIndex = options2.row && options2.row.rowIndex;
    var template;
    var isRowMode = this.isRowBasedEditMode();
    var isRowEditing = this.isEditRow(rowIndex);
    var isCellEditing = this.isEditCell(rowIndex, options2.columnIndex);
    var editingStartOptions;
    if ((column.showEditorAlways || column.setCellValue && (isRowEditing && column.allowEditing || isCellEditing)) && ("data" === options2.rowType || "detailAdaptive" === options2.rowType) && !column.command) {
      var allowUpdating = this.allowUpdating(options2);
      if (((allowUpdating || isRowEditing) && column.allowEditing || isCellEditing) && (isRowEditing || !isRowMode)) {
        if (column.showEditorAlways && !isRowMode) {
          editingStartOptions = {
            cancel: false,
            key: options2.row.isNewRow ? void 0 : options2.row.key,
            data: options2.row.data,
            column
          };
          this._isEditingStart(editingStartOptions);
        }
        if (!editingStartOptions || !editingStartOptions.cancel) {
          options2.setValue = (value2, text) => {
            this.updateFieldValue(options2, value2, text);
          };
        }
      }
      template = column.editCellTemplate || this._getDefaultEditorTemplate();
    } else if ("detail" === column.command && "detail" === options2.rowType && isRowEditing) {
      template = null === this || void 0 === this ? void 0 : this.getEditFormTemplate(options2);
    }
    return template;
  }
  _createButton($container, button, options2, change) {
    var icon = EDIT_ICON_CLASS[button.name];
    var useIcons = this.option("editing.useIcons");
    var useLegacyColumnButtonTemplate = this.option("useLegacyColumnButtonTemplate");
    var $button = renderer_default("<a>").attr("href", "#").addClass(LINK_CLASS).addClass(button.cssClass);
    if (button.template && useLegacyColumnButtonTemplate) {
      this._rowsView.renderTemplate($container, button.template, options2, true);
    } else {
      if (button.template) {
        $button = renderer_default("<span>").addClass(button.cssClass);
      } else if (useIcons && icon || button.icon) {
        icon = button.icon || icon;
        var iconType = getImageSourceType(icon);
        if ("image" === iconType || "svg" === iconType) {
          $button = getImageContainer(icon).addClass(button.cssClass);
        } else {
          $button.addClass("dx-icon".concat("dxIcon" === iconType ? "-" : " ").concat(icon)).attr("title", button.text);
        }
        $button.addClass(LINK_ICON_CLASS);
        $container.addClass(COMMAND_EDIT_WITH_ICONS_CLASS);
        var localizationName = this.getButtonLocalizationNames()[button.name];
        localizationName && $button.attr("aria-label", message_default.format(localizationName));
      } else {
        $button.text(button.text);
      }
      if (isDefined(button.hint)) {
        $button.attr("title", button.hint);
      }
      if (this._isButtonDisabled(button, options2)) {
        $button.addClass("dx-state-disabled");
      } else if (!button.template || button.onClick) {
        events_engine_default.on($button, addNamespace2("click", EDITING_NAMESPACE), this.createAction((e) => {
          var _a2;
          null === (_a2 = button.onClick) || void 0 === _a2 ? void 0 : _a2.call(button, extend({}, e, {
            row: options2.row,
            column: options2.column
          }));
          e.event.preventDefault();
          e.event.stopPropagation();
        }));
      }
      $container.append($button, "&nbsp;");
      if (button.template) {
        options2.renderAsync = false;
        this._rowsView.renderTemplate($button, button.template, options2, true, change);
      }
    }
  }
  getButtonLocalizationNames() {
    return {
      edit: "dxDataGrid-editingEditRow",
      save: "dxDataGrid-editingSaveRowChanges",
      delete: "dxDataGrid-editingDeleteRow",
      undelete: "dxDataGrid-editingUndeleteRow",
      cancel: "dxDataGrid-editingCancelRowChanges"
    };
  }
  prepareButtonItem(headerPanel2, name2, methodName, sortIndex) {
    var _a2;
    var editingTexts = null !== (_a2 = this.option("editing.texts")) && void 0 !== _a2 ? _a2 : {};
    var titleButtonTextByClassNames = {
      revert: editingTexts.cancelAllChanges,
      save: editingTexts.saveAllChanges,
      addRow: editingTexts.addRow
    };
    var className = {
      revert: "cancel",
      save: "save",
      addRow: "addrow"
    }[name2];
    var hintText = titleButtonTextByClassNames[name2];
    var isButtonDisabled = ("save" === className || "cancel" === className) && this._isEditButtonDisabled();
    return {
      widget: "dxButton",
      options: {
        onInitialized: (e) => {
          renderer_default(e.element).addClass(headerPanel2._getToolbarButtonClass("".concat(EDIT_BUTTON_CLASS, " ").concat(this.addWidgetPrefix(className), "-button")));
        },
        icon: "edit-button-".concat(className),
        disabled: isButtonDisabled,
        onClick: () => {
          setTimeout(() => {
            this[methodName]();
          });
        },
        text: hintText,
        hint: hintText
      },
      showText: "inMenu",
      name: "".concat(name2, "Button"),
      location: "after",
      locateInMenu: "auto",
      sortIndex
    };
  }
  prepareEditButtons(headerPanel2) {
    var _a2;
    var editingOptions = null !== (_a2 = this.option("editing")) && void 0 !== _a2 ? _a2 : {};
    var buttonItems = [];
    if (editingOptions.allowAdding) {
      buttonItems.push(this.prepareButtonItem(headerPanel2, "addRow", "addRow", 20));
    }
    return buttonItems;
  }
  highlightDataCell($cell, params) {
    this.shouldHighlightCell(params) && $cell.addClass(CELL_MODIFIED);
  }
  _afterInsertRow(key) {
  }
  _beforeSaveEditData(change) {
    if (change && !isDefined(change.key) && isDefined(change.type)) {
      return true;
    }
  }
  _afterSaveEditData() {
  }
  _beforeCancelEditData() {
  }
  _allowEditAction(actionName, options2) {
    var allowEditAction = this.option("editing.".concat(actionName));
    if (isFunction(allowEditAction)) {
      allowEditAction = allowEditAction({
        component: this.component,
        row: options2.row
      });
    }
    return allowEditAction;
  }
  allowUpdating(options2, eventName) {
    var _a2;
    var startEditAction = null !== (_a2 = this.option("editing.startEditAction")) && void 0 !== _a2 ? _a2 : DEFAULT_START_EDIT_ACTION;
    var needCallback = arguments.length > 1 ? startEditAction === eventName || "down" === eventName : true;
    return needCallback && this._allowEditAction("allowUpdating", options2);
  }
  allowDeleting(options2) {
    return this._allowEditAction("allowDeleting", options2);
  }
  isCellModified(parameters) {
    var _a2, _b2, _c;
    var {
      columnIndex
    } = parameters;
    var modifiedValue = null === (_b2 = null === (_a2 = null === parameters || void 0 === parameters ? void 0 : parameters.row) || void 0 === _a2 ? void 0 : _a2.modifiedValues) || void 0 === _b2 ? void 0 : _b2[columnIndex];
    if (null === (_c = null === parameters || void 0 === parameters ? void 0 : parameters.row) || void 0 === _c ? void 0 : _c.isNewRow) {
      modifiedValue = parameters.value;
    }
    return void 0 !== modifiedValue;
  }
  isNewRowInEditMode() {
    var visibleEditRowIndex = this._getVisibleEditRowIndex();
    var rows = this._dataController.items();
    return visibleEditRowIndex >= 0 ? rows[visibleEditRowIndex].isNewRow : false;
  }
  _isRowDeleteAllowed() {
  }
  shouldHighlightCell(parameters) {
    var cellModified = this.isCellModified(parameters);
    return cellModified && parameters.column.setCellValue && (this.getEditMode() !== EDIT_MODE_ROW || !parameters.row.isEditing);
  }
};
var editingModule = {
  defaultOptions: () => ({
    editing: {
      mode: "row",
      refreshMode: "full",
      newRowPosition: VIEWPORT_TOP_NEW_ROW_POSITION,
      allowAdding: false,
      allowUpdating: false,
      allowDeleting: false,
      useIcons: false,
      selectTextOnEditStart: false,
      confirmDelete: true,
      texts: {
        editRow: message_default.format("dxDataGrid-editingEditRow"),
        saveAllChanges: message_default.format("dxDataGrid-editingSaveAllChanges"),
        saveRowChanges: message_default.format("dxDataGrid-editingSaveRowChanges"),
        cancelAllChanges: message_default.format("dxDataGrid-editingCancelAllChanges"),
        cancelRowChanges: message_default.format("dxDataGrid-editingCancelRowChanges"),
        addRow: message_default.format("dxDataGrid-editingAddRow"),
        deleteRow: message_default.format("dxDataGrid-editingDeleteRow"),
        undeleteRow: message_default.format("dxDataGrid-editingUndeleteRow"),
        confirmDeleteMessage: message_default.format("dxDataGrid-editingConfirmDeleteMessage"),
        confirmDeleteTitle: ""
      },
      form: {
        colCount: 2
      },
      popup: {},
      startEditAction: "click",
      editRowKey: null,
      editColumnName: null,
      changes: []
    },
    useLegacyColumnButtonTemplate: false
  }),
  controllers: {
    editing: EditingControllerImpl
  },
  extenders: {
    controllers: {
      data: {
        init() {
          this._editingController = this.getController("editing");
          this.callBase();
        },
        reload(full, repaintChangesOnly) {
          !repaintChangesOnly && this._editingController.refresh();
          return this.callBase.apply(this, arguments);
        },
        repaintRows() {
          if (this.getController("editing").isSaving()) {
            return;
          }
          return this.callBase.apply(this, arguments);
        },
        _updateEditRow(items) {
          var _a2;
          var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);
          var editRowIndex = m_utils_default.getIndexByKey(editRowKey, items);
          var editItem = items[editRowIndex];
          if (editItem) {
            editItem.isEditing = true;
            null === (_a2 = this._updateEditItem) || void 0 === _a2 ? void 0 : _a2.call(this, editItem);
          }
        },
        _updateItemsCore(change) {
          this.callBase(change);
          this._updateEditRow(this.items(true));
        },
        _applyChangeUpdate(change) {
          this._updateEditRow(change.items);
          this.callBase(change);
        },
        _applyChangesOnly(change) {
          this._updateEditRow(change.items);
          this.callBase(change);
        },
        _processItems(items, change) {
          items = this._editingController.processItems(items, change);
          return this.callBase(items, change);
        },
        _processDataItem(dataItem, options2) {
          this._editingController.processDataItem(dataItem, options2, this.generateDataValues);
          return this.callBase(dataItem, options2);
        },
        _processItem(item, options2) {
          item = this.callBase(item, options2);
          if (item.isNewRow) {
            options2.dataIndex--;
            delete item.dataIndex;
          }
          return item;
        },
        _getChangedColumnIndices(oldItem, newItem, rowIndex, isLiveUpdate) {
          if (oldItem.isNewRow !== newItem.isNewRow || oldItem.removed !== newItem.removed) {
            return;
          }
          return this.callBase.apply(this, arguments);
        },
        _isCellChanged(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {
          var editingController = this.getController("editing");
          var cell = oldRow.cells && oldRow.cells[columnIndex];
          var isEditing = editingController && editingController.isEditCell(visibleRowIndex, columnIndex);
          if (isLiveUpdate && isEditing) {
            return false;
          }
          if (cell && cell.column && !cell.column.showEditorAlways && cell.isEditing !== isEditing) {
            return true;
          }
          return this.callBase.apply(this, arguments);
        },
        needToRefreshOnDataSourceChange(args) {
          var editingController = this.getController("editing");
          var isParasiteChange = Array.isArray(args.value) && args.value === args.previousValue && editingController.isSaving();
          return !isParasiteChange;
        },
        _handleDataSourceChange(args) {
          var result2 = this.callBase(args);
          var changes = this.option("editing.changes");
          var dataSource = args.value;
          if (Array.isArray(dataSource) && changes.length) {
            var dataSourceKeys = dataSource.map((item) => this.keyOf(item));
            var newChanges = changes.filter((change) => "insert" === change.type || dataSourceKeys.some((key) => equalByValue(change.key, key)));
            if (newChanges.length !== changes.length) {
              this.option("editing.changes", newChanges);
            }
            var editRowKey = this.option("editing.editRowKey");
            var isEditNewItem = newChanges.some((change) => "insert" === change.type && equalByValue(editRowKey, change.key));
            if (!isEditNewItem && dataSourceKeys.every((key) => !equalByValue(editRowKey, key))) {
              this.option("editing.editRowKey", null);
            }
          }
          return result2;
        }
      }
    },
    views: {
      rowsView: {
        init() {
          this.callBase();
          this._editingController = this.getController("editing");
        },
        getCellIndex($cell, rowIndex) {
          if (!$cell.is("td") && rowIndex >= 0) {
            var $cellElements = this.getCellElements(rowIndex);
            var cellIndex = -1;
            each($cellElements, (index2, cellElement) => {
              if (renderer_default(cellElement).find($cell).length) {
                cellIndex = index2;
              }
            });
            return cellIndex;
          }
          return this.callBase.apply(this, arguments);
        },
        publicMethods() {
          return this.callBase().concat(["cellValue"]);
        },
        _getCellTemplate(options2) {
          var template = this._editingController.getColumnTemplate(options2);
          return template || this.callBase(options2);
        },
        _createRow(row) {
          var $row = this.callBase.apply(this, arguments);
          if (row) {
            var isRowRemoved = !!row.removed;
            var isRowInserted = !!row.isNewRow;
            var isRowModified = !!row.modified;
            isRowInserted && $row.addClass(ROW_INSERTED);
            isRowModified && $row.addClass(ROW_MODIFIED);
            if (isRowInserted || isRowRemoved) {
              $row.removeClass(ROW_SELECTED);
            }
          }
          return $row;
        },
        _getColumnIndexByElement($element) {
          var $tableElement = $element.closest("table");
          var $tableElements = this.getTableElements();
          while ($tableElement.length && !$tableElements.filter($tableElement).length) {
            $element = $tableElement.closest("td");
            $tableElement = $element.closest("table");
          }
          return this._getColumnIndexByElementCore($element);
        },
        _getColumnIndexByElementCore($element) {
          var $targetElement = $element.closest(".".concat(ROW_CLASS4, "> td:not(.dx-master-detail-cell)"));
          return this.getCellIndex($targetElement);
        },
        _editCellByClick(e, eventName) {
          var editingController = this._editingController;
          var $targetElement = renderer_default(e.event.target);
          var columnIndex = this._getColumnIndexByElement($targetElement);
          var row = this._dataController.items()[e.rowIndex];
          var allowUpdating = editingController.allowUpdating({
            row
          }, eventName) || row && row.isNewRow;
          var column = this._columnsController.getVisibleColumns()[columnIndex];
          var isEditedCell = editingController.isEditCell(e.rowIndex, columnIndex);
          var allowEditing = allowUpdating && column && (column.allowEditing || isEditedCell);
          var startEditAction = this.option("editing.startEditAction") || "click";
          var isShowEditorAlways = column && column.showEditorAlways;
          if (isEditedCell) {
            return true;
          }
          if ("down" === eventName) {
            if (devices_default.real().ios || devices_default.real().android) {
              resetActiveElement();
            }
            return isShowEditorAlways && allowEditing && editingController.editCell(e.rowIndex, columnIndex);
          }
          if ("click" === eventName && "dblClick" === startEditAction && this._pointerDownTarget === $targetElement.get(0)) {
            var withoutSaveEditData = null === row || void 0 === row ? void 0 : row.isNewRow;
            editingController.closeEditCell(false, withoutSaveEditData);
          }
          if (allowEditing && eventName === startEditAction) {
            return editingController.editCell(e.rowIndex, columnIndex) || editingController.isEditRow(e.rowIndex);
          }
        },
        _rowPointerDown(e) {
          this._pointerDownTarget = e.event.target;
          this._pointerDownTimeout = setTimeout(() => {
            this._editCellByClick(e, "down");
          });
        },
        _rowClick(e) {
          var isEditForm = renderer_default(e.rowElement).hasClass(this.addWidgetPrefix(EDIT_FORM_CLASS));
          e.event[TARGET_COMPONENT_NAME] = this.component;
          if (!this._editCellByClick(e, "click") && !isEditForm) {
            this.callBase.apply(this, arguments);
          }
        },
        _rowDblClick(e) {
          if (!this._editCellByClick(e, "dblClick")) {
            this.callBase.apply(this, arguments);
          }
        },
        _cellPrepared($cell, parameters) {
          var _a2;
          var editingController = this._editingController;
          var isCommandCell = !!parameters.column.command;
          var isEditableCell = parameters.setValue;
          var isEditRow = editingController.isEditRow(parameters.rowIndex);
          var isEditing = isEditingCell(isEditRow, parameters);
          if (isEditingOrShowEditorAlwaysDataCell(isEditRow, parameters)) {
            var {
              alignment
            } = parameters.column;
            $cell.toggleClass(this.addWidgetPrefix(READONLY_CLASS), !isEditableCell).toggleClass(CELL_FOCUS_DISABLED_CLASS4, !isEditableCell);
            if (alignment) {
              $cell.find(EDITORS_INPUT_SELECTOR).first().css("textAlign", alignment);
            }
          }
          if (isEditing) {
            this._editCellPrepared($cell);
          }
          var hasTemplate3 = !!(null === (_a2 = parameters.column) || void 0 === _a2 ? void 0 : _a2.cellTemplate);
          if (parameters.column && !isCommandCell && (!hasTemplate3 || editingController.shouldHighlightCell(parameters))) {
            editingController.highlightDataCell($cell, parameters);
          }
          this.callBase.apply(this, arguments);
        },
        _editCellPrepared: noop2,
        _formItemPrepared: noop2,
        _getCellOptions(options2) {
          var cellOptions = this.callBase(options2);
          var {
            columnIndex,
            row
          } = options2;
          cellOptions.isEditing = this._editingController.isEditCell(cellOptions.rowIndex, cellOptions.columnIndex);
          cellOptions.removed = row.removed;
          if (row.modified) {
            cellOptions.modified = void 0 !== row.modifiedValues[columnIndex];
          }
          return cellOptions;
        },
        _setCellAriaAttributes($cell, cellOptions) {
          this.callBase($cell, cellOptions);
          if (cellOptions.removed) {
            this.setAria("roledescription", message_default.format("dxDataGrid-ariaDeletedCell"), $cell);
          }
          if (cellOptions.modified) {
            this.setAria("roledescription", message_default.format("dxDataGrid-ariaModifiedCell"), $cell);
          }
          var isEditableCell = cellOptions.column.allowEditing && !cellOptions.removed && !cellOptions.modified && "data" === cellOptions.rowType && cellOptions.column.calculateCellValue === cellOptions.column.defaultCalculateCellValue && this._editingController.isCellBasedEditMode();
          if (isEditableCell) {
            this.setAria("roledescription", message_default.format("dxDataGrid-ariaEditableCell"), $cell);
          }
        },
        _createCell(options2) {
          var $cell = this.callBase(options2);
          var isEditRow = this._editingController.isEditRow(options2.rowIndex);
          isEditingOrShowEditorAlwaysDataCell(isEditRow, options2) && $cell.addClass(EDITOR_CELL_CLASS2);
          return $cell;
        },
        cellValue(rowIndex, columnIdentifier, value2, text) {
          var cellOptions = this.getCellOptions(rowIndex, columnIdentifier);
          if (cellOptions) {
            if (void 0 === value2) {
              return cellOptions.value;
            }
            this._editingController.updateFieldValue(cellOptions, value2, text, true);
          }
        },
        dispose() {
          this.callBase.apply(this, arguments);
          clearTimeout(this._pointerDownTimeout);
        },
        _renderCore() {
          this.callBase.apply(this, arguments);
          return this.waitAsyncTemplates(true).done(() => {
            this._editingController._focusEditorIfNeed();
          });
        }
      },
      headerPanel: {
        _getToolbarItems() {
          var items = this.callBase();
          var editButtonItems = this.getController("editing").prepareEditButtons(this);
          return editButtonItems.concat(items);
        },
        optionChanged(args) {
          var {
            fullName
          } = args;
          switch (args.name) {
            case "editing":
              var excludedOptions = [EDITING_POPUP_OPTION_NAME, EDITING_CHANGES_OPTION_NAME, EDITING_EDITCOLUMNNAME_OPTION_NAME, EDITING_EDITROWKEY_OPTION_NAME];
              var shouldInvalidate = fullName && !excludedOptions.some((optionName) => optionName === fullName);
              shouldInvalidate && this._invalidate();
              this.callBase(args);
              break;
            case "useLegacyColumnButtonTemplate":
              args.handled = true;
              break;
            default:
              this.callBase(args);
          }
        },
        isVisible() {
          var editingOptions = this.getController("editing").option("editing");
          return this.callBase() || (null === editingOptions || void 0 === editingOptions ? void 0 : editingOptions.allowAdding);
        }
      }
    }
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/m_editing.js
m_core_default.registerModule("editing", extend(true, {}, editingModule, {
  extenders: {
    controllers: {
      data: {
        _changeRowExpandCore(key) {
          var editingController = this._editingController;
          if (Array.isArray(key)) {
            editingController && editingController.refresh();
          }
          return this.callBase.apply(this, arguments);
        }
      }
    }
  }
}));

// node_modules/devextreme/esm/__internal/grids/grid_core/editing/m_editing_row_based.js
var editingControllerExtender = (Base) => class extends Base {
  isRowEditMode() {
    return this.getEditMode() === EDIT_MODE_ROW;
  }
  _afterCancelEditData(rowIndex) {
    var dataController2 = this._dataController;
    if (this.isRowBasedEditMode() && rowIndex >= 0) {
      dataController2.updateItems({
        changeType: "update",
        rowIndices: [rowIndex, rowIndex + 1]
      });
    } else {
      super._afterCancelEditData(rowIndex);
    }
  }
  _isDefaultButtonVisible(button, options2) {
    var isRowMode = this.isRowBasedEditMode();
    var isEditRow = options2.row && equalByValue(options2.row.key, this.option(EDITING_EDITROWKEY_OPTION_NAME));
    if (isRowMode) {
      switch (button.name) {
        case "edit":
          return !isEditRow && this.allowUpdating(options2);
        case "delete":
          return super._isDefaultButtonVisible(button, options2) && !isEditRow;
        case "save":
        case "cancel":
          return isEditRow;
        default:
          return super._isDefaultButtonVisible(button, options2);
      }
    }
    return super._isDefaultButtonVisible(button, options2);
  }
  isEditRow(rowIndex) {
    return this.isRowBasedEditMode() && this.isEditRowByIndex(rowIndex);
  }
  _cancelSaving(result2) {
    if (this.isRowBasedEditMode()) {
      if (!this.hasChanges()) {
        this._cancelEditDataCore();
      }
    }
    super._cancelSaving(result2);
  }
  _refreshCore(params) {
    var {
      allowCancelEditing
    } = null !== params && void 0 !== params ? params : {};
    if (this.isRowBasedEditMode()) {
      var hasUpdateChanges = this.getChanges().filter((it) => "update" === it.type).length > 0;
      this.init();
      allowCancelEditing && hasUpdateChanges && this._cancelEditDataCore();
    }
    super._refreshCore(params);
  }
  _isEditColumnVisible() {
    var result2 = super._isEditColumnVisible();
    var editingOptions = this.option("editing");
    var isRowEditMode = this.isRowEditMode();
    var isVisibleInRowEditMode = editingOptions.allowUpdating || editingOptions.allowAdding;
    return result2 || isRowEditMode && isVisibleInRowEditMode;
  }
  _focusEditorIfNeed() {
    var editMode = this.getEditMode();
    if (this._needFocusEditor) {
      if (MODES_WITH_DELAYED_FOCUS.includes(editMode)) {
        var $editingCell = this.getFocusedCellInRow(this._getVisibleEditRowIndex());
        this._delayedInputFocus($editingCell, () => {
          $editingCell && this.component.focus($editingCell);
        });
      }
      this._needFocusEditor = false;
    }
  }
};
var editingRowBasedModule = {
  extenders: {
    controllers: {
      editing: editingControllerExtender,
      data: {
        _getChangedColumnIndices(oldItem, newItem, rowIndex, isLiveUpdate) {
          var editingController = this.getController("editing");
          if (editingController.isRowBasedEditMode() && oldItem.isEditing !== newItem.isEditing) {
            return;
          }
          return this.callBase.apply(this, arguments);
        }
      }
    },
    views: {
      rowsView: {
        _createRow(row) {
          var $row = this.callBase.apply(this, arguments);
          if (row) {
            var editingController = this._editingController;
            var isEditRow = editingController.isEditRow(row.rowIndex);
            if (isEditRow) {
              $row.addClass(EDIT_ROW);
              $row.removeClass(ROW_SELECTED_CLASS);
              if ("detail" === row.rowType) {
                $row.addClass(this.addWidgetPrefix(EDIT_FORM_CLASS));
              }
            }
          }
          return $row;
        },
        _update(change) {
          this.callBase(change);
          if ("updateSelection" === change.changeType) {
            this.getTableElements().children("tbody").children(".".concat(EDIT_ROW)).removeClass(ROW_SELECTED_CLASS);
          }
        }
      }
    }
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/editing_row_based.js
m_core_default.registerModule("editingRowBased", editingRowBasedModule);

// node_modules/devextreme/esm/ui/form/ui.form.items_runtime_info.js
var FormItemsRunTimeInfo = class {
  constructor() {
    this._map = {};
  }
  _findWidgetInstance(condition) {
    var result2;
    each(this._map, function(guid2, _ref) {
      var {
        widgetInstance,
        item
      } = _ref;
      if (condition(item)) {
        result2 = widgetInstance;
        return false;
      }
    });
    return result2;
  }
  _findFieldByCondition(callback, valueExpr) {
    var result2;
    each(this._map, function(key, value2) {
      if (callback(value2)) {
        result2 = "guid" === valueExpr ? key : value2[valueExpr];
        return false;
      }
    });
    return result2;
  }
  clear() {
    this._map = {};
  }
  removeItemsByItems(itemsRunTimeInfo) {
    each(itemsRunTimeInfo.getItems(), (guid2) => this.removeItemByKey(guid2));
  }
  removeItemByKey(key) {
    delete this._map[key];
  }
  add(options2) {
    var key = options2.guid || new guid_default();
    this._map[key] = options2;
    return key;
  }
  addItemsOrExtendFrom(itemsRunTimeInfo) {
    itemsRunTimeInfo.each((key, itemRunTimeInfo) => {
      if (this._map[key]) {
        if (itemRunTimeInfo.widgetInstance) {
          this._map[key].widgetInstance = itemRunTimeInfo.widgetInstance;
        }
        this._map[key].$itemContainer = itemRunTimeInfo.$itemContainer;
      } else {
        this.add({
          item: itemRunTimeInfo.item,
          widgetInstance: itemRunTimeInfo.widgetInstance,
          guid: key,
          $itemContainer: itemRunTimeInfo.$itemContainer
        });
      }
    });
  }
  extendRunTimeItemInfoByKey(key, options2) {
    if (this._map[key]) {
      this._map[key] = extend(this._map[key], options2);
    }
  }
  findWidgetInstanceByItem(item) {
    return this._findWidgetInstance((storedItem) => storedItem === item);
  }
  findGroupOrTabLayoutManagerByPath(targetPath) {
    return this._findFieldByCondition((_ref2) => {
      var {
        path
      } = _ref2;
      return path === targetPath;
    }, "layoutManager");
  }
  findKeyByPath(targetPath) {
    return this._findFieldByCondition((_ref3) => {
      var {
        path
      } = _ref3;
      return path === targetPath;
    }, "guid");
  }
  findWidgetInstanceByName(name2) {
    return this._findWidgetInstance((item) => name2 === item.name);
  }
  findWidgetInstanceByDataField(dataField) {
    return this._findWidgetInstance((item) => dataField === (isString(item) ? item : item.dataField));
  }
  findItemContainerByItem(item) {
    for (var key in this._map) {
      if (this._map[key].item === item) {
        return this._map[key].$itemContainer;
      }
    }
    return null;
  }
  findItemIndexByItem(targetItem) {
    return this._findFieldByCondition((_ref4) => {
      var {
        item
      } = _ref4;
      return item === targetItem;
    }, "itemIndex");
  }
  findPreparedItemByItem(item) {
    return this._findFieldByCondition((_ref5) => {
      var {
        item: currentItem
      } = _ref5;
      return currentItem === item;
    }, "preparedItem");
  }
  getItems() {
    return this._map;
  }
  each(handler) {
    each(this._map, function(key, itemRunTimeInfo) {
      handler(key, itemRunTimeInfo);
    });
  }
  removeItemsByPathStartWith(path) {
    var keys = Object.keys(this._map);
    var filteredKeys = keys.filter((key) => {
      if (this._map[key].path) {
        return this._map[key].path.indexOf(path, 0) > -1;
      }
      return false;
    });
    filteredKeys.forEach((key) => this.removeItemByKey(key));
  }
};

// node_modules/devextreme/esm/ui/multi_view/ui.multi_view.animation.js
var _translator = {
  move($element, position3) {
    move($element, {
      left: position3
    });
  }
};
var animation2 = {
  moveTo($element, position3, duration, completeAction) {
    fx_default.animate($element, {
      type: "slide",
      to: {
        left: position3
      },
      duration,
      complete: completeAction
    });
  },
  complete($element) {
    fx_default.stop($element, true);
  }
};

// node_modules/devextreme/esm/ui/multi_view.js
var MULTIVIEW_CLASS = "dx-multiview";
var MULTIVIEW_WRAPPER_CLASS = "dx-multiview-wrapper";
var MULTIVIEW_ITEM_CONTAINER_CLASS = "dx-multiview-item-container";
var MULTIVIEW_ITEM_CLASS = "dx-multiview-item";
var MULTIVIEW_ITEM_HIDDEN_CLASS = "dx-multiview-item-hidden";
var MULTIVIEW_ITEM_DATA_KEY = "dxMultiViewItemData";
var MULTIVIEW_ANIMATION_DURATION = 200;
var toNumber2 = (value2) => +value2;
var position2 = ($element) => locate($element).left;
var MultiView = ui_collection_widget_live_update_default.inherit({
  _activeStateUnit: "." + MULTIVIEW_ITEM_CLASS,
  _supportedKeys: function() {
    return extend(this.callBase(), {
      pageUp: noop2,
      pageDown: noop2
    });
  },
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      selectedIndex: 0,
      swipeEnabled: true,
      animationEnabled: true,
      loop: false,
      deferRendering: true,
      loopItemFocus: false,
      selectOnFocus: true,
      selectionMode: "single",
      selectionRequired: true,
      selectByClick: false
    });
  },
  _defaultOptionsRules: function() {
    return this.callBase().concat([{
      device: function() {
        return "desktop" === devices_default.real().deviceType && !devices_default.isSimulator();
      },
      options: {
        focusStateEnabled: true
      }
    }]);
  },
  _itemClass: function() {
    return MULTIVIEW_ITEM_CLASS;
  },
  _itemDataKey: function() {
    return MULTIVIEW_ITEM_DATA_KEY;
  },
  _itemContainer: function() {
    return this._$itemContainer;
  },
  _itemElements: function() {
    return this._itemContainer().children(this._itemSelector());
  },
  _itemWidth: function() {
    if (!this._itemWidthValue) {
      this._itemWidthValue = getWidth(this._$wrapper);
    }
    return this._itemWidthValue;
  },
  _clearItemWidthCache: function() {
    delete this._itemWidthValue;
  },
  _itemsCount: function() {
    return this.option("items").length;
  },
  _normalizeIndex: function(index2) {
    var count = this._itemsCount();
    if (index2 < 0) {
      index2 += count;
    }
    if (index2 >= count) {
      index2 -= count;
    }
    return index2;
  },
  _getRTLSignCorrection: function() {
    return this.option("rtlEnabled") ? -1 : 1;
  },
  _init: function() {
    this.callBase.apply(this, arguments);
    var $element = this.$element();
    $element.addClass(MULTIVIEW_CLASS);
    this._$wrapper = renderer_default("<div>").addClass(MULTIVIEW_WRAPPER_CLASS);
    this._$wrapper.appendTo($element);
    this._$itemContainer = renderer_default("<div>").addClass(MULTIVIEW_ITEM_CONTAINER_CLASS);
    this._$itemContainer.appendTo(this._$wrapper);
    this.option("loopItemFocus", this.option("loop"));
    this._findBoundaryIndices();
    this._initSwipeable();
  },
  _initMarkup: function() {
    this._deferredItems = [];
    this.callBase();
    var selectedItemIndices = this._getSelectedItemIndices();
    this._updateItemsVisibility(selectedItemIndices[0]);
    this._setElementAria();
    this._setItemsAria();
  },
  _afterItemElementDeleted: function($item, deletedActionArgs) {
    this.callBase($item, deletedActionArgs);
    if (this._deferredItems) {
      this._deferredItems.splice(deletedActionArgs.itemIndex, 1);
    }
  },
  _beforeItemElementInserted: function(change) {
    this.callBase.apply(this, arguments);
    if (this._deferredItems) {
      this._deferredItems.splice(change.index, 0, null);
    }
  },
  _executeItemRenderAction: function(index2, itemData, itemElement) {
    index2 = (this.option("items") || []).indexOf(itemData);
    this.callBase(index2, itemData, itemElement);
  },
  _renderItemContent: function(args) {
    var renderContentDeferred = new Deferred();
    var that = this;
    var callBase = this.callBase;
    var deferred = new Deferred();
    deferred.done(function() {
      var $itemContent = callBase.call(that, args);
      renderContentDeferred.resolve($itemContent);
    });
    this._deferredItems[args.index] = deferred;
    this.option("deferRendering") || deferred.resolve();
    return renderContentDeferred.promise();
  },
  _render: function() {
    this.callBase();
    deferRender(() => {
      var selectedItemIndices = this._getSelectedItemIndices();
      this._updateItems(selectedItemIndices[0]);
    });
  },
  _getElementAria: () => ({
    role: "group",
    roledescription: message_default.format("dxMultiView-elementAriaRoleDescription"),
    label: message_default.format("dxMultiView-elementAriaLabel")
  }),
  _setElementAria() {
    var aria = this._getElementAria();
    this.setAria(aria, this.$element());
  },
  _setItemsAria() {
    var $itemElements = this._itemElements();
    var itemsCount = this._itemsCount();
    $itemElements.each((itemIndex, item) => {
      var aria = this._getItemAria({
        itemIndex,
        itemsCount
      });
      this.setAria(aria, renderer_default(item));
    });
  },
  _getItemAria(_ref) {
    var {
      itemIndex,
      itemsCount
    } = _ref;
    var aria = {
      role: "group",
      roledescription: message_default.format("dxMultiView-itemAriaRoleDescription"),
      label: message_default.format("dxMultiView-itemAriaLabel", itemIndex + 1, itemsCount)
    };
    return aria;
  },
  _updateItems: function(selectedIndex, newIndex) {
    this._updateItemsPosition(selectedIndex, newIndex);
    this._updateItemsVisibility(selectedIndex, newIndex);
  },
  _modifyByChanges: function() {
    this.callBase.apply(this, arguments);
    var selectedItemIndices = this._getSelectedItemIndices();
    this._updateItemsVisibility(selectedItemIndices[0]);
  },
  _updateItemsPosition: function(selectedIndex, newIndex) {
    var $itemElements = this._itemElements();
    var positionSign = isDefined(newIndex) ? -this._animationDirection(newIndex, selectedIndex) : void 0;
    var $selectedItem = $itemElements.eq(selectedIndex);
    _translator.move($selectedItem, 0);
    if (isDefined(newIndex)) {
      _translator.move($itemElements.eq(newIndex), 100 * positionSign + "%");
    }
  },
  _updateItemsVisibility(selectedIndex, newIndex) {
    var $itemElements = this._itemElements();
    $itemElements.each((itemIndex, item) => {
      var $item = renderer_default(item);
      var isHidden = itemIndex !== selectedIndex && itemIndex !== newIndex;
      if (!isHidden) {
        this._renderSpecificItem(itemIndex);
      }
      $item.toggleClass(MULTIVIEW_ITEM_HIDDEN_CLASS, isHidden);
      this.setAria("hidden", isHidden || void 0, $item);
    });
  },
  _renderSpecificItem: function(index2) {
    var $item = this._itemElements().eq(index2);
    var hasItemContent = $item.find(this._itemContentClass()).length > 0;
    if (isDefined(index2) && !hasItemContent) {
      this._deferredItems[index2].resolve();
      triggerResizeEvent($item);
    }
  },
  _refreshItem: function($item, item) {
    this.callBase($item, item);
    this._updateItemsVisibility(this.option("selectedIndex"));
  },
  _setAriaSelectionAttribute: noop2,
  _updateSelection: function(addedSelection, removedSelection) {
    var newIndex = addedSelection[0];
    var prevIndex = removedSelection[0];
    animation2.complete(this._$itemContainer);
    this._updateItems(prevIndex, newIndex);
    var animationDirection = this._animationDirection(newIndex, prevIndex);
    this._animateItemContainer(animationDirection * this._itemWidth(), (function() {
      _translator.move(this._$itemContainer, 0);
      this._updateItems(newIndex);
      getWidth(this._$itemContainer);
    }).bind(this));
  },
  _animateItemContainer: function(position3, completeCallback) {
    var duration = this.option("animationEnabled") ? MULTIVIEW_ANIMATION_DURATION : 0;
    animation2.moveTo(this._$itemContainer, position3, duration, completeCallback);
  },
  _animationDirection: function(newIndex, prevIndex) {
    var containerPosition = position2(this._$itemContainer);
    var indexDifference = (prevIndex - newIndex) * this._getRTLSignCorrection() * this._getItemFocusLoopSignCorrection();
    var isSwipePresent = 0 !== containerPosition;
    var directionSignVariable = isSwipePresent ? containerPosition : indexDifference;
    return sign(directionSignVariable);
  },
  _getSwipeDisabledState() {
    return !this.option("swipeEnabled") || this._itemsCount() <= 1;
  },
  _initSwipeable() {
    this._createComponent(this.$element(), swipeable_default, {
      disabled: this._getSwipeDisabledState(),
      elastic: false,
      itemSizeFunc: this._itemWidth.bind(this),
      onStart: (args) => this._swipeStartHandler(args.event),
      onUpdated: (args) => this._swipeUpdateHandler(args.event),
      onEnd: (args) => this._swipeEndHandler(args.event)
    });
  },
  _findBoundaryIndices() {
    var _firstIndex2, _lastIndex;
    var items = this.option("items");
    var firstIndex;
    var lastIndex;
    items.forEach((item, index2) => {
      var isDisabled = Boolean(null === item || void 0 === item ? void 0 : item.disabled);
      if (!isDisabled) {
        var _firstIndex;
        null !== (_firstIndex = firstIndex) && void 0 !== _firstIndex ? _firstIndex : firstIndex = index2;
        lastIndex = index2;
      }
    });
    this._boundaryIndices = {
      firstAvailableIndex: null !== (_firstIndex2 = firstIndex) && void 0 !== _firstIndex2 ? _firstIndex2 : 0,
      lastAvailableIndex: null !== (_lastIndex = lastIndex) && void 0 !== _lastIndex ? _lastIndex : items.length - 1,
      firstTrueIndex: 0,
      lastTrueIndex: items.length - 1
    };
  },
  _swipeStartHandler: function(e) {
    animation2.complete(this._$itemContainer);
    var selectedIndex = this.option("selectedIndex");
    var loop = this.option("loop");
    var {
      firstAvailableIndex,
      lastAvailableIndex
    } = this._boundaryIndices;
    var rtl = this.option("rtlEnabled");
    e.maxLeftOffset = toNumber2(loop || (rtl ? selectedIndex > firstAvailableIndex : selectedIndex < lastAvailableIndex));
    e.maxRightOffset = toNumber2(loop || (rtl ? selectedIndex < lastAvailableIndex : selectedIndex > firstAvailableIndex));
    this._swipeDirection = null;
  },
  _swipeUpdateHandler: function(e) {
    var offset2 = e.offset;
    var swipeDirection = sign(offset2) * this._getRTLSignCorrection();
    _translator.move(this._$itemContainer, offset2 * this._itemWidth());
    if (swipeDirection !== this._swipeDirection) {
      this._swipeDirection = swipeDirection;
      var selectedIndex = this.option("selectedIndex");
      var newIndex = this._normalizeIndex(selectedIndex - swipeDirection);
      this._updateItems(selectedIndex, newIndex);
    }
  },
  _findNextAvailableIndex(index2, offset2) {
    var {
      items,
      loop
    } = this.option();
    var {
      firstAvailableIndex,
      lastAvailableIndex,
      firstTrueIndex,
      lastTrueIndex
    } = this._boundaryIndices;
    var isFirstActive = [firstTrueIndex, firstAvailableIndex].includes(index2);
    var isLastActive = [lastTrueIndex, lastAvailableIndex].includes(index2);
    if (loop) {
      if (isFirstActive && offset2 < 0) {
        return lastAvailableIndex;
      } else if (isLastActive && offset2 > 0) {
        return firstAvailableIndex;
      }
    }
    for (var i = index2 + offset2; i >= firstAvailableIndex && i <= lastAvailableIndex; i += offset2) {
      var isDisabled = Boolean(items[i].disabled);
      if (!isDisabled) {
        return i;
      }
    }
    return index2;
  },
  _swipeEndHandler: function(e) {
    var targetOffset = e.targetOffset * this._getRTLSignCorrection();
    if (targetOffset) {
      var newSelectedIndex = this._findNextAvailableIndex(this.option("selectedIndex"), -targetOffset);
      this.option("selectedIndex", newSelectedIndex);
      var $selectedElement = this.itemElements().filter(".dx-item-selected");
      this.option("focusStateEnabled") && this.option("focusedElement", getPublicElement($selectedElement));
    } else {
      this._animateItemContainer(0, noop2);
    }
  },
  _getItemFocusLoopSignCorrection: function() {
    return this._itemFocusLooped ? -1 : 1;
  },
  _moveFocus: function() {
    this.callBase.apply(this, arguments);
    this._itemFocusLooped = false;
  },
  _prevItem: function($items) {
    var $result = this.callBase.apply(this, arguments);
    this._itemFocusLooped = $result.is($items.last());
    return $result;
  },
  _nextItem: function($items) {
    var $result = this.callBase.apply(this, arguments);
    this._itemFocusLooped = $result.is($items.first());
    return $result;
  },
  _dimensionChanged: function() {
    this._clearItemWidthCache();
  },
  _visibilityChanged: function(visible2) {
    if (visible2) {
      this._dimensionChanged();
    }
  },
  _updateSwipeDisabledState() {
    var disabled = this._getSwipeDisabledState();
    swipeable_default.getInstance(this.$element()).option("disabled", disabled);
  },
  _dispose: function() {
    delete this._boundaryIndices;
    this.callBase();
  },
  _optionChanged: function(args) {
    var value2 = args.value;
    switch (args.name) {
      case "loop":
        this.option("loopItemFocus", value2);
        break;
      case "animationEnabled":
        break;
      case "swipeEnabled":
        this._updateSwipeDisabledState();
        break;
      case "deferRendering":
        this._invalidate();
        break;
      case "items":
        this._updateSwipeDisabledState();
        this._findBoundaryIndices();
        this.callBase(args);
        break;
      default:
        this.callBase(args);
    }
  }
});
component_registrator_default("dxMultiView", MultiView);
var multi_view_default = MultiView;

// node_modules/devextreme/esm/ui/tabs/item.js
var TABS_ITEM_BADGE_CLASS = "dx-tabs-item-badge";
var BADGE_CLASS2 = "dx-badge";
var TabsItem = item_default.inherit({
  _renderWatchers: function() {
    this.callBase();
    this._startWatcher("badge", this._renderBadge.bind(this));
  },
  _renderBadge: function(badge) {
    this._$element.children("." + BADGE_CLASS2).remove();
    if (!badge) {
      return;
    }
    var $badge = renderer_default("<div>").addClass(TABS_ITEM_BADGE_CLASS).addClass(BADGE_CLASS2).text(badge);
    this._$element.append($badge);
  }
});
var item_default3 = TabsItem;

// node_modules/devextreme/esm/ui/tabs/constants.js
var TABS_EXPANDED_CLASS = "dx-tabs-expanded";

// node_modules/devextreme/esm/renovation/ui/scroll_view/utils/get_scroll_left_max.js
function getScrollLeftMax(element) {
  return element.scrollWidth - element.clientWidth;
}

// node_modules/devextreme/esm/renovation/ui/scroll_view/utils/get_scroll_top_max.js
function getScrollTopMax(element) {
  return element.scrollHeight - element.clientHeight;
}

// node_modules/devextreme/esm/renovation/ui/scroll_view/utils/get_boundary_props.js
function isReachedLeft(scrollOffsetLeft, epsilon) {
  return Math.round(scrollOffsetLeft) <= epsilon;
}
function isReachedRight(element, scrollOffsetLeft, epsilon) {
  return Math.round(getScrollLeftMax(element) - scrollOffsetLeft) <= epsilon;
}
function isReachedTop(scrollOffsetTop, epsilon) {
  return Math.round(scrollOffsetTop) <= epsilon;
}
function isReachedBottom(element, scrollOffsetTop, pocketHeight, epsilon) {
  return Math.round(getScrollTopMax(element) - scrollOffsetTop - pocketHeight) <= epsilon;
}

// node_modules/devextreme/esm/ui/tabs.js
var TABS_CLASS = "dx-tabs";
var TABS_WRAPPER_CLASS = "dx-tabs-wrapper";
var TABS_STRETCHED_CLASS = "dx-tabs-stretched";
var TABS_SCROLLABLE_CLASS = "dx-tabs-scrollable";
var TABS_NAV_BUTTONS_CLASS = "dx-tabs-nav-buttons";
var OVERFLOW_HIDDEN_CLASS = "dx-overflow-hidden";
var TABS_ITEM_CLASS = "dx-tab";
var TABS_ITEM_SELECTED_CLASS = "dx-tab-selected";
var TABS_SCROLLING_ENABLED_CLASS = "dx-tabs-scrolling-enabled";
var TABS_NAV_BUTTON_CLASS = "dx-tabs-nav-button";
var TABS_LEFT_NAV_BUTTON_CLASS = "dx-tabs-nav-button-left";
var TABS_RIGHT_NAV_BUTTON_CLASS = "dx-tabs-nav-button-right";
var TABS_ITEM_TEXT_CLASS = "dx-tab-text";
var TABS_ITEM_TEXT_SPAN_CLASS = "dx-tab-text-span";
var TABS_ITEM_TEXT_SPAN_PSEUDO_CLASS = "dx-tab-text-span-pseudo";
var STATE_DISABLED_CLASS = "dx-state-disabled";
var FOCUSED_DISABLED_NEXT_TAB_CLASS = "dx-focused-disabled-next-tab";
var FOCUSED_DISABLED_PREV_TAB_CLASS = "dx-focused-disabled-prev-tab";
var TABS_ORIENTATION_CLASS = {
  vertical: "dx-tabs-vertical",
  horizontal: "dx-tabs-horizontal"
};
var INDICATOR_POSITION_CLASS = {
  top: "dx-tab-indicator-position-top",
  right: "dx-tab-indicator-position-right",
  bottom: "dx-tab-indicator-position-bottom",
  left: "dx-tab-indicator-position-left"
};
var TABS_ICON_POSITION_CLASS = {
  top: "dx-tabs-icon-position-top",
  end: "dx-tabs-icon-position-end",
  bottom: "dx-tabs-icon-position-bottom",
  start: "dx-tabs-icon-position-start"
};
var TABS_STYLING_MODE_CLASS = {
  primary: "dx-tabs-styling-mode-primary",
  secondary: "dx-tabs-styling-mode-secondary"
};
var TABS_ITEM_DATA_KEY = "dxTabData";
var BUTTON_NEXT_ICON = "chevronnext";
var BUTTON_PREV_ICON = "chevronprev";
var FEEDBACK_HIDE_TIMEOUT = 100;
var FEEDBACK_DURATION_INTERVAL = 5;
var FEEDBACK_SCROLL_TIMEOUT = 300;
var TAB_OFFSET = 30;
var ORIENTATION = {
  horizontal: "horizontal",
  vertical: "vertical"
};
var INDICATOR_POSITION = {
  top: "top",
  right: "right",
  bottom: "bottom",
  left: "left"
};
var SCROLLABLE_DIRECTION = {
  horizontal: "horizontal",
  vertical: "vertical"
};
var ICON_POSITION = {
  top: "top",
  end: "end",
  bottom: "bottom",
  start: "start"
};
var STYLING_MODE = {
  primary: "primary",
  secondary: "secondary"
};
var Tabs = ui_collection_widget_live_update_default.inherit({
  _activeStateUnit: "." + TABS_ITEM_CLASS,
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      hoverStateEnabled: true,
      showNavButtons: true,
      scrollByContent: true,
      scrollingEnabled: true,
      selectionMode: "single",
      orientation: ORIENTATION.horizontal,
      iconPosition: ICON_POSITION.start,
      stylingMode: STYLING_MODE.primary,
      activeStateEnabled: true,
      selectionRequired: false,
      selectOnFocus: true,
      loopItemFocus: false,
      useInkRipple: false,
      badgeExpr: function(data3) {
        return data3 ? data3.badge : void 0;
      },
      _itemAttributes: {
        role: "tab"
      },
      _indicatorPosition: null
    });
  },
  _defaultOptionsRules: function() {
    var themeName = current();
    return this.callBase().concat([{
      device: () => "desktop" !== devices_default.real().deviceType,
      options: {
        showNavButtons: false
      }
    }, {
      device: {
        deviceType: "desktop"
      },
      options: {
        scrollByContent: false
      }
    }, {
      device: () => "desktop" === devices_default.real().deviceType && !devices_default.isSimulator(),
      options: {
        focusStateEnabled: true
      }
    }, {
      device: () => isFluent(themeName),
      options: {
        iconPosition: ICON_POSITION.top,
        stylingMode: STYLING_MODE.secondary
      }
    }, {
      device: () => isMaterial(themeName),
      options: {
        useInkRipple: true,
        selectOnFocus: false,
        iconPosition: ICON_POSITION.top
      }
    }]);
  },
  _init() {
    var {
      orientation,
      stylingMode,
      scrollingEnabled
    } = this.option();
    var indicatorPosition = this._getIndicatorPosition();
    this.callBase();
    this.$element().addClass(TABS_CLASS);
    this._toggleScrollingEnabledClass(scrollingEnabled);
    this._toggleOrientationClass(orientation);
    this._toggleIndicatorPositionClass(indicatorPosition);
    this._toggleIconPositionClass();
    this._toggleStylingModeClass(stylingMode);
    this._renderWrapper();
    this._renderMultiple();
    this._feedbackHideTimeout = FEEDBACK_HIDE_TIMEOUT;
  },
  _prepareDefaultItemTemplate(data3, $container) {
    var text = isPlainObject(data3) ? null === data3 || void 0 === data3 ? void 0 : data3.text : data3;
    if (isDefined(text)) {
      var $tabTextSpan = renderer_default("<span>").addClass(TABS_ITEM_TEXT_SPAN_CLASS);
      $tabTextSpan.text(text);
      var $tabTextSpanPseudo = renderer_default("<span>").addClass(TABS_ITEM_TEXT_SPAN_PSEUDO_CLASS);
      $tabTextSpanPseudo.text(text);
      $tabTextSpanPseudo.appendTo($tabTextSpan);
      $tabTextSpan.appendTo($container);
    }
    if (isDefined(data3.html)) {
      $container.html(data3.html);
    }
  },
  _initTemplates() {
    this.callBase();
    this._templateManager.addDefaultTemplates({
      item: new BindableTemplate((($container, data3) => {
        this._prepareDefaultItemTemplate(data3, $container);
        var $iconElement = getImageContainer(data3.icon);
        $iconElement && $iconElement.prependTo($container);
        var $tabItem = renderer_default("<div>").addClass(TABS_ITEM_TEXT_CLASS);
        $container.wrapInner($tabItem);
      }).bind(this), ["text", "html", "icon"], this.option("integrationOptions.watchMethod"))
    });
  },
  _createItemByTemplate: function(itemTemplate, renderArgs) {
    var {
      itemData,
      container,
      index: index2
    } = renderArgs;
    this._deferredTemplates[index2] = new Deferred();
    return itemTemplate.render({
      model: itemData,
      container,
      index: index2,
      onRendered: () => this._deferredTemplates[index2].resolve()
    });
  },
  _itemClass: function() {
    return TABS_ITEM_CLASS;
  },
  _selectedItemClass: function() {
    return TABS_ITEM_SELECTED_CLASS;
  },
  _itemDataKey: function() {
    return TABS_ITEM_DATA_KEY;
  },
  _initMarkup: function() {
    this._deferredTemplates = [];
    this.callBase();
    this.option("useInkRipple") && this._renderInkRipple();
    this.$element().addClass(OVERFLOW_HIDDEN_CLASS);
  },
  _render: function() {
    this.callBase();
    this._deferRenderScrolling();
  },
  _deferRenderScrolling() {
    when.apply(this, this._deferredTemplates).done(() => this._renderScrolling());
  },
  _renderScrolling() {
    var removeClasses = [TABS_STRETCHED_CLASS, TABS_EXPANDED_CLASS, OVERFLOW_HIDDEN_CLASS];
    this.$element().removeClass(removeClasses.join(" "));
    if (this.option("scrollingEnabled") && this._isItemsSizeExceeded()) {
      if (!this._scrollable) {
        this._renderScrollable();
        this._renderNavButtons();
      }
      var scrollable = this.getScrollable();
      scrollable.update();
      if (this.option("rtlEnabled")) {
        var maxLeftOffset = getScrollLeftMax(renderer_default(this.getScrollable().container()).get(0));
        scrollable.scrollTo({
          left: maxLeftOffset
        });
      }
      this._updateNavButtonsState();
      this._scrollToItem(this.option("selectedItem"));
    }
    if (!(this.option("scrollingEnabled") && this._isItemsSizeExceeded())) {
      this._cleanScrolling();
      if (this._needStretchItems()) {
        this.$element().addClass(TABS_STRETCHED_CLASS);
      }
      this.$element().removeClass(TABS_NAV_BUTTONS_CLASS).addClass(TABS_EXPANDED_CLASS);
    }
  },
  _isVertical() {
    return this.option("orientation") === ORIENTATION.vertical;
  },
  _isItemsSizeExceeded() {
    var isVertical = this._isVertical();
    var isItemsSizeExceeded = isVertical ? this._isItemsHeightExceeded() : this._isItemsWidthExceeded();
    return isItemsSizeExceeded;
  },
  _isItemsWidthExceeded() {
    var $visibleItems = this._getVisibleItems();
    var tabItemTotalWidth = this._getSummaryItemsSize("width", $visibleItems, true);
    var elementWidth = getWidth(this.$element());
    if ([tabItemTotalWidth, elementWidth].includes(0)) {
      return false;
    }
    var isItemsWidthExceeded = tabItemTotalWidth > elementWidth - 1;
    return isItemsWidthExceeded;
  },
  _isItemsHeightExceeded() {
    var $visibleItems = this._getVisibleItems();
    var itemsHeight = this._getSummaryItemsSize("height", $visibleItems, true);
    var elementHeight = getHeight(this.$element());
    var isItemsHeightExceeded = itemsHeight - 1 > elementHeight;
    return isItemsHeightExceeded;
  },
  _needStretchItems() {
    var $visibleItems = this._getVisibleItems();
    var elementWidth = getWidth(this.$element());
    var itemsWidth = [];
    each($visibleItems, (_, item) => {
      itemsWidth.push(getOuterWidth(item, true));
    });
    var maxTabItemWidth = Math.max.apply(null, itemsWidth);
    var requireWidth = elementWidth / $visibleItems.length;
    var needStretchItems = maxTabItemWidth > requireWidth + 1;
    return needStretchItems;
  },
  _cleanNavButtons: function() {
    if (!this._leftButton || !this._rightButton) {
      return;
    }
    this._leftButton.$element().remove();
    this._rightButton.$element().remove();
    this._leftButton = null;
    this._rightButton = null;
  },
  _cleanScrolling: function() {
    if (!this._scrollable) {
      return;
    }
    this._$wrapper.appendTo(this.$element());
    this._scrollable.$element().remove();
    this._scrollable = null;
    this._cleanNavButtons();
  },
  _renderInkRipple: function() {
    this._inkRipple = render();
  },
  _getPointerEvent: () => pointer_default.up,
  _toggleActiveState: function($element, value2, e) {
    this.callBase.apply(this, arguments);
    if (!this._inkRipple) {
      return;
    }
    var config3 = {
      element: $element,
      event: e
    };
    if (value2) {
      this._inkRipple.showWave(config3);
    } else {
      this._inkRipple.hideWave(config3);
    }
  },
  _renderMultiple: function() {
    if ("multiple" === this.option("selectionMode")) {
      this.option("selectOnFocus", false);
    }
  },
  _renderWrapper: function() {
    this._$wrapper = renderer_default("<div>").addClass(TABS_WRAPPER_CLASS);
    this.setAria("role", "tablist", this._$wrapper);
    this.$element().append(this._$wrapper);
  },
  _itemContainer: function() {
    return this._$wrapper;
  },
  _getScrollableDirection() {
    var isVertical = this._isVertical();
    var scrollableDirection = isVertical ? SCROLLABLE_DIRECTION.vertical : SCROLLABLE_DIRECTION.horizontal;
    return scrollableDirection;
  },
  _updateScrollable() {
    if (this.getScrollable()) {
      this._cleanScrolling();
    }
    this._renderScrolling();
  },
  _renderScrollable() {
    var $itemContainer = this.$element().wrapInner(renderer_default("<div>").addClass(TABS_SCROLLABLE_CLASS)).children();
    this._scrollable = this._createComponent($itemContainer, ui_scrollable_default, {
      direction: this._getScrollableDirection(),
      showScrollbar: "never",
      useKeyboard: false,
      useNative: false,
      scrollByContent: this.option("scrollByContent"),
      onScroll: () => {
        this._updateNavButtonsState();
      }
    });
    this.$element().append(this._scrollable.$element());
  },
  _scrollToItem: function(itemData) {
    if (!this._scrollable) {
      return;
    }
    var $item = this._editStrategy.getItemElement(itemData);
    this._scrollable.scrollToElement($item);
  },
  _renderNavButtons: function() {
    this.$element().toggleClass(TABS_NAV_BUTTONS_CLASS, this.option("showNavButtons"));
    if (!this.option("showNavButtons")) {
      return;
    }
    var rtlEnabled = this.option("rtlEnabled");
    this._leftButton = this._createNavButton(-TAB_OFFSET, rtlEnabled ? BUTTON_NEXT_ICON : BUTTON_PREV_ICON);
    var $leftButton = this._leftButton.$element();
    $leftButton.addClass(TABS_LEFT_NAV_BUTTON_CLASS);
    this.$element().prepend($leftButton);
    this._rightButton = this._createNavButton(TAB_OFFSET, rtlEnabled ? BUTTON_PREV_ICON : BUTTON_NEXT_ICON);
    var $rightButton = this._rightButton.$element();
    $rightButton.addClass(TABS_RIGHT_NAV_BUTTON_CLASS);
    this.$element().append($rightButton);
  },
  _updateNavButtonsState() {
    var isVertical = this._isVertical();
    var scrollable = this.getScrollable();
    if (isVertical) {
      var _this$_leftButton, _this$_rightButton;
      null === (_this$_leftButton = this._leftButton) || void 0 === _this$_leftButton ? void 0 : _this$_leftButton.option("disabled", isReachedTop(scrollable.scrollTop(), 1));
      null === (_this$_rightButton = this._rightButton) || void 0 === _this$_rightButton ? void 0 : _this$_rightButton.option("disabled", isReachedBottom(renderer_default(scrollable.container()).get(0), scrollable.scrollTop(), 0, 1));
    } else {
      var _this$_leftButton2, _this$_rightButton2;
      null === (_this$_leftButton2 = this._leftButton) || void 0 === _this$_leftButton2 ? void 0 : _this$_leftButton2.option("disabled", isReachedLeft(scrollable.scrollLeft(), 1));
      null === (_this$_rightButton2 = this._rightButton) || void 0 === _this$_rightButton2 ? void 0 : _this$_rightButton2.option("disabled", isReachedRight(renderer_default(scrollable.container()).get(0), scrollable.scrollLeft(), 1));
    }
  },
  _updateScrollPosition: function(offset2, duration) {
    this._scrollable.update();
    this._scrollable.scrollBy(offset2 / duration);
  },
  _createNavButton: function(offset2, icon) {
    var that = this;
    var holdAction = that._createAction(function() {
      that._holdInterval = setInterval(function() {
        that._updateScrollPosition(offset2, FEEDBACK_DURATION_INTERVAL);
      }, FEEDBACK_DURATION_INTERVAL);
    });
    var holdEventName = addNamespace2(hold_default.name, "dxNavButton");
    var pointerUpEventName = addNamespace2(pointer_default.up, "dxNavButton");
    var pointerOutEventName = addNamespace2(pointer_default.out, "dxNavButton");
    var navButton = this._createComponent(renderer_default("<div>").addClass(TABS_NAV_BUTTON_CLASS), button_default, {
      focusStateEnabled: false,
      icon,
      onClick: function() {
        that._updateScrollPosition(offset2, 1);
      },
      integrationOptions: {}
    });
    var $navButton = navButton.$element();
    events_engine_default.on($navButton, holdEventName, {
      timeout: FEEDBACK_SCROLL_TIMEOUT
    }, (function(e) {
      holdAction({
        event: e
      });
    }).bind(this));
    events_engine_default.on($navButton, pointerUpEventName, function() {
      that._clearInterval();
    });
    events_engine_default.on($navButton, pointerOutEventName, function() {
      that._clearInterval();
    });
    return navButton;
  },
  _clearInterval: function() {
    if (this._holdInterval) {
      clearInterval(this._holdInterval);
    }
  },
  _updateSelection: function(addedSelection) {
    this._scrollable && this._scrollable.scrollToElement(this.itemElements().eq(addedSelection[0]));
  },
  _visibilityChanged: function(visible2) {
    if (visible2) {
      this._dimensionChanged();
    }
  },
  _dimensionChanged: function() {
    this._renderScrolling();
  },
  _itemSelectHandler: function(e) {
    if ("single" === this.option("selectionMode") && this.isItemSelected(e.currentTarget)) {
      return;
    }
    this.callBase(e);
  },
  _refreshActiveDescendant: function() {
    this.callBase(this._$wrapper);
  },
  _clean: function() {
    this._deferredTemplates = [];
    this._cleanScrolling();
    this.callBase();
  },
  _toggleTabsVerticalClass(value2) {
    this.$element().toggleClass(TABS_ORIENTATION_CLASS.vertical, value2);
  },
  _toggleTabsHorizontalClass(value2) {
    this.$element().toggleClass(TABS_ORIENTATION_CLASS.horizontal, value2);
  },
  _getIndicatorPositionClass: (indicatorPosition) => INDICATOR_POSITION_CLASS[indicatorPosition],
  _getIndicatorPosition() {
    var {
      _indicatorPosition,
      rtlEnabled
    } = this.option();
    if (_indicatorPosition) {
      return _indicatorPosition;
    }
    var isVertical = this._isVertical();
    if (rtlEnabled) {
      return isVertical ? INDICATOR_POSITION.left : INDICATOR_POSITION.bottom;
    } else {
      return isVertical ? INDICATOR_POSITION.right : INDICATOR_POSITION.bottom;
    }
  },
  _toggleIndicatorPositionClass(indicatorPosition) {
    var newClass = this._getIndicatorPositionClass(indicatorPosition);
    this._toggleElementClasses(INDICATOR_POSITION_CLASS, newClass);
  },
  _toggleScrollingEnabledClass(scrollingEnabled) {
    this.$element().toggleClass(TABS_SCROLLING_ENABLED_CLASS, Boolean(scrollingEnabled));
  },
  _toggleOrientationClass(orientation) {
    var isVertical = orientation === ORIENTATION.vertical;
    this._toggleTabsVerticalClass(isVertical);
    this._toggleTabsHorizontalClass(!isVertical);
  },
  _getTabsIconPositionClass() {
    var position3 = this.option("iconPosition");
    switch (position3) {
      case ICON_POSITION.top:
        return TABS_ICON_POSITION_CLASS.top;
      case ICON_POSITION.end:
        return TABS_ICON_POSITION_CLASS.end;
      case ICON_POSITION.bottom:
        return TABS_ICON_POSITION_CLASS.bottom;
      case ICON_POSITION.start:
      default:
        return TABS_ICON_POSITION_CLASS.start;
    }
  },
  _toggleIconPositionClass() {
    var newClass = this._getTabsIconPositionClass();
    this._toggleElementClasses(TABS_ICON_POSITION_CLASS, newClass);
  },
  _toggleStylingModeClass(value2) {
    var _TABS_STYLING_MODE_CL;
    var newClass = null !== (_TABS_STYLING_MODE_CL = TABS_STYLING_MODE_CLASS[value2]) && void 0 !== _TABS_STYLING_MODE_CL ? _TABS_STYLING_MODE_CL : TABS_STYLING_MODE_CLASS.primary;
    this._toggleElementClasses(TABS_STYLING_MODE_CLASS, newClass);
  },
  _toggleElementClasses(classMap, newClass) {
    for (var key in classMap) {
      this.$element().removeClass(classMap[key]);
    }
    this.$element().addClass(newClass);
  },
  _toggleFocusedDisabledNextClass(currentIndex, isNextDisabled) {
    this._itemElements().eq(currentIndex).toggleClass(FOCUSED_DISABLED_NEXT_TAB_CLASS, isNextDisabled);
  },
  _toggleFocusedDisabledPrevClass(currentIndex, isPrevDisabled) {
    this._itemElements().eq(currentIndex).toggleClass(FOCUSED_DISABLED_PREV_TAB_CLASS, isPrevDisabled);
  },
  _toggleFocusedDisabledClasses(value2) {
    var {
      selectedIndex: currentIndex
    } = this.option();
    this._itemElements().removeClass(FOCUSED_DISABLED_NEXT_TAB_CLASS).removeClass(FOCUSED_DISABLED_PREV_TAB_CLASS);
    var prevItemIndex = currentIndex - 1;
    var nextItemIndex = currentIndex + 1;
    var nextFocusedIndex = renderer_default(value2).index();
    var isNextDisabled = this._itemElements().eq(nextItemIndex).hasClass(STATE_DISABLED_CLASS);
    var isPrevDisabled = this._itemElements().eq(prevItemIndex).hasClass(STATE_DISABLED_CLASS);
    var shouldNextClassBeSetted = isNextDisabled && nextFocusedIndex === nextItemIndex;
    var shouldPrevClassBeSetted = isPrevDisabled && nextFocusedIndex === prevItemIndex;
    this._toggleFocusedDisabledNextClass(currentIndex, shouldNextClassBeSetted);
    this._toggleFocusedDisabledPrevClass(currentIndex, shouldPrevClassBeSetted);
  },
  _updateFocusedElement() {
    var {
      focusStateEnabled,
      selectedIndex
    } = this.option();
    var itemElements = this._itemElements();
    if (focusStateEnabled && itemElements.length) {
      var selectedItem = itemElements.get(selectedIndex);
      this.option({
        focusedElement: selectedItem
      });
    }
  },
  _optionChanged: function(args) {
    switch (args.name) {
      case "useInkRipple":
      case "scrollingEnabled":
        this._toggleScrollingEnabledClass(args.value);
        this._invalidate();
        break;
      case "showNavButtons":
        this._invalidate();
        break;
      case "scrollByContent":
        this._scrollable && this._scrollable.option(args.name, args.value);
        break;
      case "width":
      case "height":
        this.callBase(args);
        this._dimensionChanged();
        break;
      case "selectionMode":
        this._renderMultiple();
        this.callBase(args);
        break;
      case "badgeExpr":
        this._invalidate();
        break;
      case "focusedElement":
        this._toggleFocusedDisabledClasses(args.value);
        this.callBase(args);
        this._scrollToItem(args.value);
        break;
      case "rtlEnabled":
        this.callBase(args);
        var indicatorPosition = this._getIndicatorPosition();
        this._toggleIndicatorPositionClass(indicatorPosition);
        break;
      case "orientation":
        this._toggleOrientationClass(args.value);
        var _indicatorPosition2 = this._getIndicatorPosition();
        this._toggleIndicatorPositionClass(_indicatorPosition2);
        if (hasWindow()) {
          this._updateScrollable();
        }
        break;
      case "iconPosition":
        this._toggleIconPositionClass();
        if (hasWindow()) {
          this._dimensionChanged();
        }
        break;
      case "stylingMode":
        this._toggleStylingModeClass(args.value);
        if (hasWindow()) {
          this._dimensionChanged();
        }
        break;
      case "_indicatorPosition":
        this._toggleIndicatorPositionClass(args.value);
        break;
      case "selectedIndex":
      case "selectedItem":
      case "selectedItems":
        this.callBase(args);
        this._updateFocusedElement();
        break;
      default:
        this.callBase(args);
    }
  },
  _afterItemElementInserted() {
    this.callBase();
    this._deferRenderScrolling();
  },
  _afterItemElementDeleted($item, deletedActionArgs) {
    this.callBase($item, deletedActionArgs);
    this._renderScrolling();
  },
  getScrollable() {
    return this._scrollable;
  }
});
Tabs.ItemClass = item_default3;
component_registrator_default("dxTabs", Tabs);
var tabs_default = Tabs;

// node_modules/devextreme/esm/ui/tab_panel/item.js
var TabPanelItem = class extends item_default {
  _renderWatchers() {
    this._startWatcher("badge", noop2);
    return super._renderWatchers();
  }
};

// node_modules/devextreme/esm/ui/tab_panel.js
var TABPANEL_CLASS = "dx-tabpanel";
var TABPANEL_TABS_CLASS = "dx-tabpanel-tabs";
var TABPANEL_TABS_ITEM_CLASS = "dx-tabpanel-tab";
var TABPANEL_CONTAINER_CLASS = "dx-tabpanel-container";
var TABS_ITEM_TEXT_CLASS2 = "dx-tab-text";
var DISABLED_FOCUSED_TAB_CLASS = "dx-disabled-focused-tab";
var TABS_ITEM_TEXT_SPAN_CLASS2 = "dx-tab-text-span";
var TABS_ITEM_TEXT_SPAN_PSEUDO_CLASS2 = "dx-tab-text-span-pseudo";
var TABPANEL_TABS_POSITION_CLASS = {
  top: "dx-tabpanel-tabs-position-top",
  right: "dx-tabpanel-tabs-position-right",
  bottom: "dx-tabpanel-tabs-position-bottom",
  left: "dx-tabpanel-tabs-position-left"
};
var TABS_POSITION = {
  top: "top",
  right: "right",
  bottom: "bottom",
  left: "left"
};
var TABS_INDICATOR_POSITION_BY_TABS_POSITION = {
  top: "bottom",
  right: "left",
  bottom: "top",
  left: "right"
};
var TABS_ORIENTATION = {
  horizontal: "horizontal",
  vertical: "vertical"
};
var ICON_POSITION2 = {
  top: "top",
  end: "end",
  bottom: "bottom",
  start: "start"
};
var STYLING_MODE2 = {
  primary: "primary",
  secondary: "secondary"
};
var TabPanel = multi_view_default.inherit({
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      itemTitleTemplate: "title",
      hoverStateEnabled: true,
      showNavButtons: false,
      scrollByContent: true,
      scrollingEnabled: true,
      tabsPosition: TABS_POSITION.top,
      iconPosition: ICON_POSITION2.start,
      stylingMode: STYLING_MODE2.primary,
      onTitleClick: null,
      onTitleHold: null,
      onTitleRendered: null,
      badgeExpr: function(data3) {
        return data3 ? data3.badge : void 0;
      },
      _tabsIndicatorPosition: null
    });
  },
  _defaultOptionsRules: function() {
    var themeName = current();
    return this.callBase().concat([{
      device: function() {
        return "desktop" === devices_default.real().deviceType && !devices_default.isSimulator();
      },
      options: {
        focusStateEnabled: true
      }
    }, {
      device: function() {
        return !touch;
      },
      options: {
        swipeEnabled: false
      }
    }, {
      device: {
        platform: "generic"
      },
      options: {
        animationEnabled: false
      }
    }, {
      device: () => isFluent(themeName),
      options: {
        stylingMode: STYLING_MODE2.secondary
      }
    }, {
      device: () => isMaterialBased(themeName),
      options: {
        iconPosition: ICON_POSITION2.top
      }
    }]);
  },
  _init: function() {
    this.callBase();
    this.$element().addClass(TABPANEL_CLASS);
    this._toggleTabPanelTabsPositionClass();
  },
  _getElementAria: () => ({
    role: "tabpanel"
  }),
  _getItemAria: () => ({
    role: "tabpanel"
  }),
  _initMarkup: function() {
    this.callBase();
    this._createTitleActions();
    this._renderLayout();
  },
  _prepareTabsItemTemplate(data3, $container) {
    var $iconElement = getImageContainer(null === data3 || void 0 === data3 ? void 0 : data3.icon);
    if ($iconElement) {
      $container.append($iconElement);
    }
    var title = isPlainObject(data3) ? null === data3 || void 0 === data3 ? void 0 : data3.title : data3;
    if (isDefined(title) && !isPlainObject(title)) {
      var $tabTextSpan = renderer_default("<span>").addClass(TABS_ITEM_TEXT_SPAN_CLASS2);
      $tabTextSpan.append(dom_adapter_default.createTextNode(title));
      var $tabTextSpanPseudo = renderer_default("<span>").addClass(TABS_ITEM_TEXT_SPAN_PSEUDO_CLASS2);
      $tabTextSpanPseudo.append(dom_adapter_default.createTextNode(title));
      $tabTextSpanPseudo.appendTo($tabTextSpan);
      $tabTextSpan.appendTo($container);
    }
  },
  _initTemplates() {
    this.callBase();
    this._templateManager.addDefaultTemplates({
      title: new BindableTemplate(($container, data3) => {
        this._prepareTabsItemTemplate(data3, $container);
        var $tabItem = renderer_default("<div>").addClass(TABS_ITEM_TEXT_CLASS2);
        $container.wrapInner($tabItem);
      }, ["title", "icon"], this.option("integrationOptions.watchMethod"))
    });
  },
  _createTitleActions: function() {
    this._createTitleClickAction();
    this._createTitleHoldAction();
    this._createTitleRenderedAction();
  },
  _createTitleClickAction: function() {
    this._titleClickAction = this._createActionByOption("onTitleClick");
  },
  _createTitleHoldAction: function() {
    this._titleHoldAction = this._createActionByOption("onTitleHold");
  },
  _createTitleRenderedAction: function() {
    this._titleRenderedAction = this._createActionByOption("onTitleRendered");
  },
  _renderLayout: function() {
    if (this._tabs) {
      return;
    }
    var $element = this.$element();
    this._$tabContainer = renderer_default("<div>").addClass(TABPANEL_TABS_CLASS).appendTo($element);
    var $tabs = renderer_default("<div>").appendTo(this._$tabContainer);
    this._tabs = this._createComponent($tabs, tabs_default, this._tabConfig());
    this._$container = renderer_default("<div>").addClass(TABPANEL_CONTAINER_CLASS).appendTo($element);
    this._$container.append(this._$wrapper);
  },
  _refreshActiveDescendant: function() {
    if (!this._tabs) {
      return;
    }
    var tabs = this._tabs;
    var tabItems = tabs.itemElements();
    var $activeTab = renderer_default(tabItems[tabs.option("selectedIndex")]);
    var id = this.getFocusedItemId();
    this.setAria("controls", void 0, renderer_default(tabItems));
    this.setAria("controls", id, $activeTab);
  },
  _getTabsIndicatorPosition() {
    var {
      _tabsIndicatorPosition,
      tabsPosition
    } = this.option();
    return null !== _tabsIndicatorPosition && void 0 !== _tabsIndicatorPosition ? _tabsIndicatorPosition : TABS_INDICATOR_POSITION_BY_TABS_POSITION[tabsPosition];
  },
  _tabConfig() {
    var tabsIndicatorPosition = this._getTabsIndicatorPosition();
    return {
      selectOnFocus: true,
      focusStateEnabled: this.option("focusStateEnabled"),
      hoverStateEnabled: this.option("hoverStateEnabled"),
      repaintChangesOnly: this.option("repaintChangesOnly"),
      tabIndex: this.option("tabIndex"),
      selectedIndex: this.option("selectedIndex"),
      badgeExpr: this.option("badgeExpr"),
      onItemClick: this._titleClickAction.bind(this),
      onItemHold: this._titleHoldAction.bind(this),
      itemHoldTimeout: this.option("itemHoldTimeout"),
      onSelectionChanged: (function(e) {
        this.option("selectedIndex", e.component.option("selectedIndex"));
        this._refreshActiveDescendant();
      }).bind(this),
      onItemRendered: this._titleRenderedAction.bind(this),
      itemTemplate: this._getTemplateByOption("itemTitleTemplate"),
      items: this.option("items"),
      noDataText: null,
      scrollingEnabled: this.option("scrollingEnabled"),
      scrollByContent: this.option("scrollByContent"),
      showNavButtons: this.option("showNavButtons"),
      itemTemplateProperty: "tabTemplate",
      loopItemFocus: this.option("loop"),
      selectionRequired: true,
      onOptionChanged: (function(args) {
        if ("focusedElement" === args.name) {
          if (args.value) {
            var $value = renderer_default(args.value);
            var $newItem = this._itemElements().eq($value.index());
            this.option("focusedElement", getPublicElement($newItem));
          } else {
            this.option("focusedElement", args.value);
          }
        }
      }).bind(this),
      onFocusIn: (function(args) {
        this._focusInHandler(args.event);
      }).bind(this),
      onFocusOut: (function(args) {
        if (!this._isFocusOutHandlerExecuting) {
          this._focusOutHandler(args.event);
        }
      }).bind(this),
      orientation: this._getTabsOrientation(),
      iconPosition: this.option("iconPosition"),
      stylingMode: this.option("stylingMode"),
      _itemAttributes: {
        class: TABPANEL_TABS_ITEM_CLASS
      },
      _indicatorPosition: tabsIndicatorPosition
    };
  },
  _renderFocusTarget: function() {
    this._focusTarget().attr("tabIndex", -1);
  },
  _getTabsOrientation() {
    var {
      tabsPosition
    } = this.option();
    if ([TABS_POSITION.right, TABS_POSITION.left].includes(tabsPosition)) {
      return TABS_ORIENTATION.vertical;
    }
    return TABS_ORIENTATION.horizontal;
  },
  _getTabPanelTabsPositionClass() {
    var position3 = this.option("tabsPosition");
    switch (position3) {
      case TABS_POSITION.right:
        return TABPANEL_TABS_POSITION_CLASS.right;
      case TABS_POSITION.bottom:
        return TABPANEL_TABS_POSITION_CLASS.bottom;
      case TABS_POSITION.left:
        return TABPANEL_TABS_POSITION_CLASS.left;
      case TABS_POSITION.top:
      default:
        return TABPANEL_TABS_POSITION_CLASS.top;
    }
  },
  _toggleTabPanelTabsPositionClass() {
    for (var key in TABPANEL_TABS_POSITION_CLASS) {
      this.$element().removeClass(TABPANEL_TABS_POSITION_CLASS[key]);
    }
    var newClass = this._getTabPanelTabsPositionClass();
    this.$element().addClass(newClass);
  },
  _updateTabsOrientation() {
    var orientation = this._getTabsOrientation();
    this._setTabsOption("orientation", orientation);
  },
  _toggleWrapperFocusedClass(isFocused) {
    this._toggleFocusClass(isFocused, this._$wrapper);
  },
  _toggleDisabledFocusedClass(isFocused) {
    this._focusTarget().toggleClass(DISABLED_FOCUSED_TAB_CLASS, isFocused);
  },
  _updateFocusState: function(e, isFocused) {
    this.callBase(e, isFocused);
    var isTabsTarget = e.target === this._tabs._focusTarget().get(0);
    var isMultiViewTarget = e.target === this._focusTarget().get(0);
    if (isTabsTarget) {
      this._toggleFocusClass(isFocused, this._focusTarget());
    }
    if (isTabsTarget || isMultiViewTarget) {
      var isDisabled = this._isDisabled(this.option("focusedElement"));
      this._toggleWrapperFocusedClass(isFocused && !isDisabled);
      this._toggleDisabledFocusedClass(isFocused && isDisabled);
    }
    if (isMultiViewTarget) {
      this._toggleFocusClass(isFocused, this._tabs.option("focusedElement"));
    }
  },
  _focusOutHandler: function(e) {
    this._isFocusOutHandlerExecuting = true;
    this.callBase.apply(this, arguments);
    this._tabs._focusOutHandler(e);
    this._isFocusOutHandlerExecuting = false;
  },
  _setTabsOption(name2, value2) {
    if (this._tabs) {
      this._tabs.option(name2, value2);
    }
  },
  _visibilityChanged: function(visible2) {
    if (visible2) {
      this._tabs._dimensionChanged();
    }
  },
  registerKeyHandler: function(key, handler) {
    this.callBase(key, handler);
    if (this._tabs) {
      this._tabs.registerKeyHandler(key, handler);
    }
  },
  repaint: function() {
    this.callBase();
    this._tabs.repaint();
  },
  _updateTabsIndicatorPosition() {
    var value2 = this._getTabsIndicatorPosition();
    this._setTabsOption("_indicatorPosition", value2);
  },
  _optionChanged: function(args) {
    var {
      name: name2,
      value: value2,
      fullName
    } = args;
    switch (name2) {
      case "dataSource":
        this.callBase(args);
        break;
      case "items":
        this._setTabsOption(name2, this.option(name2));
        if (!this.option("repaintChangesOnly")) {
          this._tabs.repaint();
        }
        this.callBase(args);
        break;
      case "width":
        this.callBase(args);
        this._tabs.repaint();
        break;
      case "selectedIndex":
      case "selectedItem":
        this._setTabsOption(fullName, value2);
        this.callBase(args);
        if (true === this.option("focusStateEnabled")) {
          var selectedIndex = this.option("selectedIndex");
          var selectedTabContent = this._itemElements().eq(selectedIndex);
          this.option("focusedElement", getPublicElement(selectedTabContent));
        }
        break;
      case "itemHoldTimeout":
      case "focusStateEnabled":
      case "hoverStateEnabled":
        this._setTabsOption(fullName, value2);
        this.callBase(args);
        break;
      case "scrollingEnabled":
      case "scrollByContent":
      case "showNavButtons":
        this._setTabsOption(fullName, value2);
        break;
      case "focusedElement":
        var id = value2 ? renderer_default(value2).index() : value2;
        var newItem = value2 ? this._tabs._itemElements().eq(id) : value2;
        this._setTabsOption("focusedElement", getPublicElement(newItem));
        if (value2) {
          var isDisabled = this._isDisabled(value2);
          this._toggleWrapperFocusedClass(!isDisabled);
          this._toggleDisabledFocusedClass(isDisabled);
        }
        this.callBase(args);
        break;
      case "itemTitleTemplate":
        this._setTabsOption("itemTemplate", this._getTemplateByOption("itemTitleTemplate"));
        break;
      case "onTitleClick":
        this._createTitleClickAction();
        this._setTabsOption("onItemClick", this._titleClickAction.bind(this));
        break;
      case "onTitleHold":
        this._createTitleHoldAction();
        this._setTabsOption("onItemHold", this._titleHoldAction.bind(this));
        break;
      case "onTitleRendered":
        this._createTitleRenderedAction();
        this._setTabsOption("onItemRendered", this._titleRenderedAction.bind(this));
        break;
      case "loop":
        this._setTabsOption("loopItemFocus", value2);
        break;
      case "badgeExpr":
        this._invalidate();
        break;
      case "tabsPosition":
        this._toggleTabPanelTabsPositionClass();
        this._updateTabsIndicatorPosition();
        this._updateTabsOrientation();
        break;
      case "iconPosition":
        this._setTabsOption("iconPosition", value2);
        break;
      case "stylingMode":
        this._setTabsOption("stylingMode", value2);
        break;
      case "_tabsIndicatorPosition":
        this._setTabsOption("_indicatorPosition", value2);
        break;
      default:
        this.callBase(args);
    }
  }
});
TabPanel.ItemClass = TabPanelItem;
component_registrator_default("dxTabPanel", TabPanel);
var tab_panel_default = TabPanel;

// node_modules/devextreme/esm/ui/form/ui.form.item_option_action.js
var ItemOptionAction = class {
  constructor(options2) {
    this._options = options2;
    this._itemsRunTimeInfo = this._options.itemsRunTimeInfo;
  }
  findInstance() {
    return this._itemsRunTimeInfo.findWidgetInstanceByItem(this._options.item);
  }
  findItemContainer() {
    return this._itemsRunTimeInfo.findItemContainerByItem(this._options.item);
  }
  findPreparedItem() {
    return this._itemsRunTimeInfo.findPreparedItemByItem(this._options.item);
  }
  tryExecute() {
    class_default.abstract();
  }
};

// node_modules/devextreme/esm/ui/form/ui.form.utils.js
var createItemPathByIndex = (index2, isTabs) => "".concat(isTabs ? "tabs" : "items", "[").concat(index2, "]");
var concatPaths = (path1, path2) => {
  if (isDefined(path1) && isDefined(path2)) {
    return "".concat(path1, ".").concat(path2);
  }
  return path1 || path2;
};
var getTextWithoutSpaces = (text) => text ? text.replace(/\s/g, "") : void 0;
var isEqualToDataFieldOrNameOrTitleOrCaption = (item, fieldName) => {
  if (item) {
    return item.dataField === fieldName || item.name === fieldName || getTextWithoutSpaces(item.title) === fieldName || "group" === item.itemType && getTextWithoutSpaces(item.caption) === fieldName;
  }
  return false;
};
var getFullOptionName = (path, optionName) => "".concat(path, ".").concat(optionName);
var getOptionNameFromFullName = (fullName) => {
  var parts = fullName.split(".");
  return parts[parts.length - 1].replace(/\[\d+]/, "");
};
var tryGetTabPath = (fullPath) => {
  var pathParts = fullPath.split(".");
  var resultPathParts = [...pathParts];
  for (var i = pathParts.length - 1; i >= 0; i--) {
    if (isFullPathContainsTabs(pathParts[i])) {
      return resultPathParts.join(".");
    }
    resultPathParts.splice(i, 1);
  }
  return "";
};
var isFullPathContainsTabs = (fullPath) => fullPath.indexOf("tabs") > -1;
var getItemPath = (items, item, isTabs) => {
  var index2 = items.indexOf(item);
  if (index2 > -1) {
    return createItemPathByIndex(index2, isTabs);
  }
  for (var i = 0; i < items.length; i++) {
    var targetItem = items[i];
    var tabOrGroupItems = targetItem.tabs || targetItem.items;
    if (tabOrGroupItems) {
      var itemPath = getItemPath(tabOrGroupItems, item, targetItem.tabs);
      if (itemPath) {
        return concatPaths(createItemPathByIndex(i, isTabs), itemPath);
      }
    }
  }
};
function convertToLayoutManagerOptions(_ref) {
  var {
    form,
    $formElement,
    formOptions,
    items,
    validationGroup,
    extendedLayoutManagerOptions,
    onFieldDataChanged,
    onContentReady,
    onDisposing,
    onFieldItemRendered
  } = _ref;
  var baseOptions = {
    form,
    items,
    $formElement,
    validationGroup,
    onFieldDataChanged,
    onContentReady,
    onDisposing,
    onFieldItemRendered,
    validationBoundary: formOptions.scrollingEnabled ? $formElement : void 0,
    scrollingEnabled: formOptions.scrollingEnabled,
    showRequiredMark: formOptions.showRequiredMark,
    showOptionalMark: formOptions.showOptionalMark,
    requiredMark: formOptions.requiredMark,
    optionalMark: formOptions.optionalMark,
    requiredMessage: formOptions.requiredMessage,
    screenByWidth: formOptions.screenByWidth,
    layoutData: formOptions.formData,
    labelLocation: formOptions.labelLocation,
    customizeItem: formOptions.customizeItem,
    minColWidth: formOptions.minColWidth,
    showColonAfterLabel: formOptions.showColonAfterLabel,
    onEditorEnterKey: formOptions.onEditorEnterKey,
    labelMode: formOptions.labelMode
  };
  var result2 = extend(baseOptions, {
    isRoot: extendedLayoutManagerOptions.isRoot,
    colCount: extendedLayoutManagerOptions.colCount,
    alignItemLabels: extendedLayoutManagerOptions.alignItemLabels,
    cssItemClass: extendedLayoutManagerOptions.cssItemClass,
    colCountByScreen: extendedLayoutManagerOptions.colCountByScreen,
    onLayoutChanged: extendedLayoutManagerOptions.onLayoutChanged,
    width: extendedLayoutManagerOptions.width
  });
  return result2;
}

// node_modules/devextreme/esm/ui/form/ui.form.item_options_actions.js
var WidgetOptionItemOptionAction = class extends ItemOptionAction {
  tryExecute() {
    var {
      value: value2
    } = this._options;
    var instance = this.findInstance();
    if (instance) {
      instance.option(value2);
      return true;
    }
    return false;
  }
};
var TabOptionItemOptionAction = class extends ItemOptionAction {
  tryExecute() {
    var tabPanel = this.findInstance();
    if (tabPanel) {
      var {
        optionName,
        item,
        value: value2
      } = this._options;
      var itemIndex = this._itemsRunTimeInfo.findItemIndexByItem(item);
      if (itemIndex >= 0) {
        tabPanel.option(getFullOptionName("items[".concat(itemIndex, "]"), optionName), value2);
        return true;
      }
    }
    return false;
  }
};
var SimpleItemTemplateChangedAction = class extends ItemOptionAction {
  tryExecute() {
    return false;
  }
};
var GroupItemTemplateChangedAction = class extends ItemOptionAction {
  tryExecute() {
    var preparedItem = this.findPreparedItem();
    if (null != preparedItem && preparedItem._prepareGroupItemTemplate && preparedItem._renderGroupContentTemplate) {
      preparedItem._prepareGroupItemTemplate(this._options.item.template);
      preparedItem._renderGroupContentTemplate();
      return true;
    }
    return false;
  }
};
var TabsOptionItemOptionAction = class extends ItemOptionAction {
  tryExecute() {
    var tabPanel = this.findInstance();
    if (tabPanel) {
      var {
        value: value2
      } = this._options;
      tabPanel.option("dataSource", value2);
      return true;
    }
    return false;
  }
};
var ValidationRulesItemOptionAction = class extends ItemOptionAction {
  tryExecute() {
    var {
      item
    } = this._options;
    var instance = this.findInstance();
    var validator = instance && data(instance.$element()[0], "dxValidator");
    if (validator && item) {
      var filterRequired = (item2) => "required" === item2.type;
      var oldContainsRequired = (validator.option("validationRules") || []).some(filterRequired);
      var newContainsRequired = (item.validationRules || []).some(filterRequired);
      if (!oldContainsRequired && !newContainsRequired || oldContainsRequired && newContainsRequired) {
        validator.option("validationRules", item.validationRules);
        return true;
      }
    }
    return false;
  }
};
var CssClassItemOptionAction = class extends ItemOptionAction {
  tryExecute() {
    var $itemContainer = this.findItemContainer();
    var {
      previousValue,
      value: value2
    } = this._options;
    if ($itemContainer) {
      $itemContainer.removeClass(previousValue).addClass(value2);
      return true;
    }
    return false;
  }
};
var tryCreateItemOptionAction = (optionName, itemActionOptions) => {
  switch (optionName) {
    case "editorOptions":
    case "buttonOptions":
      return new WidgetOptionItemOptionAction(itemActionOptions);
    case "validationRules":
      return new ValidationRulesItemOptionAction(itemActionOptions);
    case "cssClass":
      return new CssClassItemOptionAction(itemActionOptions);
    case "badge":
    case "disabled":
    case "icon":
    case "tabTemplate":
    case "title":
      return new TabOptionItemOptionAction(extend(itemActionOptions, {
        optionName
      }));
    case "tabs":
      return new TabsOptionItemOptionAction(itemActionOptions);
    case "template":
      var _itemActionOptions$it, _itemActionOptions$it2, _itemActionOptions$it3;
      var itemType = null !== (_itemActionOptions$it = null === itemActionOptions || void 0 === itemActionOptions ? void 0 : null === (_itemActionOptions$it2 = itemActionOptions.item) || void 0 === _itemActionOptions$it2 ? void 0 : _itemActionOptions$it2.itemType) && void 0 !== _itemActionOptions$it ? _itemActionOptions$it : null === (_itemActionOptions$it3 = itemActionOptions.itemsRunTimeInfo.findPreparedItemByItem(null === itemActionOptions || void 0 === itemActionOptions ? void 0 : itemActionOptions.item)) || void 0 === _itemActionOptions$it3 ? void 0 : _itemActionOptions$it3.itemType;
      if ("simple" === itemType) {
        return new SimpleItemTemplateChangedAction(itemActionOptions);
      } else if ("group" === itemType) {
        return new GroupItemTemplateChangedAction(itemActionOptions);
      }
      return new TabOptionItemOptionAction(extend(itemActionOptions, {
        optionName
      }));
    default:
      return null;
  }
};
var ui_form_item_options_actions_default = tryCreateItemOptionAction;

// node_modules/devextreme/esm/ui/responsive_box.js
var RESPONSIVE_BOX_CLASS = "dx-responsivebox";
var SCREEN_SIZE_CLASS_PREFIX = RESPONSIVE_BOX_CLASS + "-screen-";
var BOX_ITEM_CLASS2 = "dx-box-item";
var BOX_ITEM_DATA_KEY2 = "dxBoxItemData";
var HD_SCREEN_WIDTH = 1920;
var ResponsiveBox = ui_collection_widget_edit_default.inherit({
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      rows: [],
      cols: [],
      screenByWidth: null,
      singleColumnScreen: "",
      height: "100%",
      width: "100%",
      activeStateEnabled: false,
      focusStateEnabled: false,
      onItemStateChanged: void 0,
      onLayoutChanged: null,
      currentScreenFactor: void 0
    });
  },
  _init: function() {
    if (!this.option("screenByWidth")) {
      this._options.silent("screenByWidth", defaultScreenFactorFunc);
    }
    this.callBase();
    this._initLayoutChangedAction();
  },
  _initLayoutChangedAction: function() {
    this._layoutChangedAction = this._createActionByOption("onLayoutChanged", {
      excludeValidators: ["disabled", "readonly"]
    });
  },
  _itemClass: function() {
    return BOX_ITEM_CLASS2;
  },
  _itemDataKey: function() {
    return BOX_ITEM_DATA_KEY2;
  },
  _initMarkup: function() {
    this.callBase();
    this.$element().addClass(RESPONSIVE_BOX_CLASS);
  },
  _renderItems: function() {
    this._setScreenSize();
    this._screenItems = this._itemsByScreen();
    this._prepareGrid();
    this._spreadItems();
    this._layoutItems();
    this._linkNodeToItem();
  },
  _itemOptionChanged: function(item) {
    var $item = this._findItemElementByItem(item);
    if (!$item.length) {
      return;
    }
    this._refreshItem($item, item);
    this._clearItemNodeTemplates();
    this._update(true);
  },
  _setScreenSize: function() {
    var currentScreen = this._getCurrentScreen();
    this._removeScreenSizeClass();
    this.$element().addClass(SCREEN_SIZE_CLASS_PREFIX + currentScreen);
    this.option("currentScreenFactor", currentScreen);
  },
  _removeScreenSizeClass: function() {
    var currentScreenFactor = this.option("currentScreenFactor");
    currentScreenFactor && this.$element().removeClass(SCREEN_SIZE_CLASS_PREFIX + currentScreenFactor);
  },
  _prepareGrid: function() {
    var grid = this._grid = [];
    this._prepareRowsAndCols();
    each(this._rows, (function() {
      var row = [];
      grid.push(row);
      each(this._cols, (function() {
        row.push(this._createEmptyCell());
      }).bind(this));
    }).bind(this));
  },
  getSingleColumnRows: function() {
    var rows = this.option("rows");
    var screenItemsLength = this._screenItems.length;
    if (rows.length) {
      var filteredRows = this._filterByScreen(rows);
      var result2 = [];
      for (var i = 0; i < screenItemsLength; i++) {
        var sizeConfig = this._defaultSizeConfig();
        if (i < filteredRows.length && isDefined(filteredRows[i].shrink)) {
          sizeConfig.shrink = filteredRows[i].shrink;
        }
        result2.push(sizeConfig);
      }
      return result2;
    } else {
      return this._defaultSizeConfig(screenItemsLength);
    }
  },
  _prepareRowsAndCols: function() {
    if (this._isSingleColumnScreen()) {
      this._prepareSingleColumnScreenItems();
      this._rows = this.getSingleColumnRows();
      this._cols = this._defaultSizeConfig(1);
    } else {
      this._rows = this._sizesByScreen(this.option("rows"));
      this._cols = this._sizesByScreen(this.option("cols"));
    }
  },
  _isSingleColumnScreen: function() {
    return this._screenRegExp().test(this.option("singleColumnScreen")) || !this.option("rows").length || !this.option("cols").length;
  },
  _prepareSingleColumnScreenItems: function() {
    this._screenItems.sort(function(item1, item2) {
      return item1.location.row - item2.location.row || item1.location.col - item2.location.col;
    });
    each(this._screenItems, function(index2, item) {
      extend(item.location, {
        row: index2,
        col: 0,
        rowspan: 1,
        colspan: 1
      });
    });
  },
  _sizesByScreen: function(sizeConfigs) {
    return map(this._filterByScreen(sizeConfigs), (function(sizeConfig) {
      return extend(this._defaultSizeConfig(), sizeConfig);
    }).bind(this));
  },
  _createDefaultSizeConfig: function() {
    return {
      ratio: 1,
      baseSize: 0,
      minSize: 0,
      maxSize: 0
    };
  },
  _defaultSizeConfig: function(size) {
    var defaultSizeConfig = this._createDefaultSizeConfig();
    if (!arguments.length) {
      return defaultSizeConfig;
    }
    var result2 = [];
    for (var i = 0; i < size; i++) {
      result2.push(defaultSizeConfig);
    }
    return result2;
  },
  _filterByScreen: function(items) {
    var screenRegExp = this._screenRegExp();
    return grep(items, function(item) {
      return !item.screen || screenRegExp.test(item.screen);
    });
  },
  _screenRegExp: function() {
    var screen = this._getCurrentScreen();
    return new RegExp("(^|\\s)" + screen + "($|\\s)", "i");
  },
  _getCurrentScreen: function() {
    var width = this._screenWidth();
    return this.option("screenByWidth")(width);
  },
  _screenWidth: function() {
    return hasWindow() ? getWidth(getWindow()) : HD_SCREEN_WIDTH;
  },
  _createEmptyCell: function() {
    return {
      item: {},
      location: {
        colspan: 1,
        rowspan: 1
      }
    };
  },
  _spreadItems: function() {
    each(this._screenItems, (function(_, itemInfo) {
      var location = itemInfo.location || {};
      var itemCol = location.col;
      var itemRow = location.row;
      var row = this._grid[itemRow];
      var itemCell = row && row[itemCol];
      this._occupyCells(itemCell, itemInfo);
    }).bind(this));
  },
  _itemsByScreen: function() {
    return this.option("items").reduce((result2, item) => {
      var locations = item.location || {};
      locations = isPlainObject(locations) ? [locations] : locations;
      this._filterByScreen(locations).forEach((location) => {
        result2.push({
          item,
          location: extend({
            rowspan: 1,
            colspan: 1
          }, location)
        });
      });
      return result2;
    }, []);
  },
  _occupyCells: function(itemCell, itemInfo) {
    if (!itemCell || this._isItemCellOccupied(itemCell, itemInfo)) {
      return;
    }
    extend(itemCell, itemInfo);
    this._markSpanningCell(itemCell);
  },
  _isItemCellOccupied: function(itemCell, itemInfo) {
    if (!isEmptyObject(itemCell.item)) {
      return true;
    }
    var result2 = false;
    this._loopOverSpanning(itemInfo.location, function(cell) {
      result2 = result2 || !isEmptyObject(cell.item);
    });
    return result2;
  },
  _loopOverSpanning: function(location, callback) {
    var rowEnd = location.row + location.rowspan - 1;
    var colEnd = location.col + location.colspan - 1;
    var boundRowEnd = Math.min(rowEnd, this._rows.length - 1);
    var boundColEnd = Math.min(colEnd, this._cols.length - 1);
    location.rowspan -= rowEnd - boundRowEnd;
    location.colspan -= colEnd - boundColEnd;
    for (var rowIndex = location.row; rowIndex <= boundRowEnd; rowIndex++) {
      for (var colIndex = location.col; colIndex <= boundColEnd; colIndex++) {
        if (rowIndex !== location.row || colIndex !== location.col) {
          callback(this._grid[rowIndex][colIndex]);
        }
      }
    }
  },
  _markSpanningCell: function(itemCell) {
    this._loopOverSpanning(itemCell.location, function(cell) {
      extend(cell, {
        item: itemCell.item,
        spanningCell: itemCell
      });
    });
  },
  _linkNodeToItem: function() {
    each(this._itemElements(), function(_, itemNode) {
      var $item = renderer_default(itemNode);
      var item = $item.data(BOX_ITEM_DATA_KEY2);
      if (!item.box) {
        item.node = $item.children();
      }
    });
  },
  _layoutItems: function() {
    var rowsCount = this._grid.length;
    var colsCount = rowsCount && this._grid[0].length;
    if (!rowsCount && !colsCount) {
      return;
    }
    var result2 = this._layoutBlock({
      direction: "col",
      row: {
        start: 0,
        end: rowsCount - 1
      },
      col: {
        start: 0,
        end: colsCount - 1
      }
    });
    var rootBox = this._prepareBoxConfig(result2.box || {
      direction: "row",
      items: [extend(result2, {
        ratio: 1
      })]
    });
    extend(rootBox, this._rootBoxConfig(rootBox.items));
    this._$root = renderer_default("<div>").appendTo(this._itemContainer());
    this._createComponent(this._$root, box_default, rootBox);
  },
  _rootBoxConfig: function(items) {
    var rootItems = each(items, (function(index2, item) {
      this._needApplyAutoBaseSize(item) && extend(item, {
        baseSize: "auto"
      });
    }).bind(this));
    return {
      width: "100%",
      height: "100%",
      items: rootItems,
      itemTemplate: this._getTemplateByOption("itemTemplate"),
      itemHoldTimeout: this.option("itemHoldTimeout"),
      onItemHold: this._createActionByOption("onItemHold"),
      onItemClick: this._createActionByOption("onItemClick"),
      onItemContextMenu: this._createActionByOption("onItemContextMenu"),
      onItemRendered: this._createActionByOption("onItemRendered")
    };
  },
  _needApplyAutoBaseSize: function(item) {
    return !item.baseSize && (!item.minSize || "auto" === item.minSize) && (!item.maxSize || "auto" === item.maxSize);
  },
  _prepareBoxConfig: function(config3) {
    return extend(config3 || {}, {
      crossAlign: "stretch",
      onItemStateChanged: this.option("onItemStateChanged")
    });
  },
  _layoutBlock: function(options2) {
    if (this._isSingleItem(options2)) {
      return this._itemByCell(options2.row.start, options2.col.start);
    }
    return this._layoutDirection(options2);
  },
  _isSingleItem: function(options2) {
    var firstCellLocation = this._grid[options2.row.start][options2.col.start].location;
    var isItemRowSpanned = options2.row.end - options2.row.start === firstCellLocation.rowspan - 1;
    var isItemColSpanned = options2.col.end - options2.col.start === firstCellLocation.colspan - 1;
    return isItemRowSpanned && isItemColSpanned;
  },
  _itemByCell: function(rowIndex, colIndex) {
    var itemCell = this._grid[rowIndex][colIndex];
    return itemCell.spanningCell ? null : itemCell.item;
  },
  _layoutDirection: function(options2) {
    var items = [];
    var direction = options2.direction;
    var crossDirection = this._crossDirection(direction);
    var block;
    while (block = this._nextBlock(options2)) {
      if (this._isBlockIndivisible(options2.prevBlockOptions, block)) {
        throw ui_errors_default.Error("E1025");
      }
      var item = this._layoutBlock({
        direction: crossDirection,
        row: block.row,
        col: block.col,
        prevBlockOptions: options2
      });
      if (item) {
        extend(item, this._blockSize(block, crossDirection));
        items.push(item);
      }
      options2[crossDirection].start = block[crossDirection].end + 1;
    }
    return {
      box: this._prepareBoxConfig({
        direction,
        items
      })
    };
  },
  _isBlockIndivisible: function(options2, block) {
    return options2 && options2.col.start === block.col.start && options2.col.end === block.col.end && options2.row.start === block.row.start && options2.row.end === block.row.end;
  },
  _crossDirection: function(direction) {
    return "col" === direction ? "row" : "col";
  },
  _nextBlock: function(options2) {
    var direction = options2.direction;
    var crossDirection = this._crossDirection(direction);
    var startIndex = options2[direction].start;
    var endIndex = options2[direction].end;
    var crossStartIndex = options2[crossDirection].start;
    if (crossStartIndex > options2[crossDirection].end) {
      return null;
    }
    var crossSpan = 1;
    for (var crossIndex = crossStartIndex; crossIndex < crossStartIndex + crossSpan; crossIndex++) {
      var lineCrossSpan = 1;
      for (var index2 = startIndex; index2 <= endIndex; index2++) {
        var cell = this._cellByDirection(direction, index2, crossIndex);
        lineCrossSpan = Math.max(lineCrossSpan, cell.location[crossDirection + "span"]);
      }
      var lineCrossEndIndex = crossIndex + lineCrossSpan;
      var crossEndIndex = crossStartIndex + crossSpan;
      if (lineCrossEndIndex > crossEndIndex) {
        crossSpan += lineCrossEndIndex - crossEndIndex;
      }
    }
    var result2 = {};
    result2[direction] = {
      start: startIndex,
      end: endIndex
    };
    result2[crossDirection] = {
      start: crossStartIndex,
      end: crossStartIndex + crossSpan - 1
    };
    return result2;
  },
  _cellByDirection: function(direction, index2, crossIndex) {
    return "col" === direction ? this._grid[crossIndex][index2] : this._grid[index2][crossIndex];
  },
  _blockSize: function(block, direction) {
    var defaultMinSize = "row" === direction ? "auto" : 0;
    var sizeConfigs = "row" === direction ? this._rows : this._cols;
    var result2 = extend(this._createDefaultSizeConfig(), {
      ratio: 0
    });
    for (var index2 = block[direction].start; index2 <= block[direction].end; index2++) {
      var sizeConfig = sizeConfigs[index2];
      result2.ratio += sizeConfig.ratio;
      result2.baseSize += sizeConfig.baseSize;
      result2.minSize += sizeConfig.minSize;
      result2.maxSize += sizeConfig.maxSize;
      if (isDefined(sizeConfig.shrink)) {
        result2.shrink = sizeConfig.shrink;
      }
    }
    result2.minSize = result2.minSize ? result2.minSize : defaultMinSize;
    result2.maxSize = result2.maxSize ? result2.maxSize : "auto";
    this._isSingleColumnScreen() && (result2.baseSize = "auto");
    return result2;
  },
  _update: function(forceRemoveRoot) {
    var $existingRoot = this._$root;
    this._renderItems();
    if ($existingRoot) {
      if (forceRemoveRoot) {
        $existingRoot.remove();
      } else {
        $existingRoot.detach();
        this._saveAssistantRoot($existingRoot);
      }
    }
    this._layoutChangedAction();
  },
  _saveAssistantRoot: function($root) {
    this._assistantRoots = this._assistantRoots || [];
    this._assistantRoots.push($root);
  },
  _dispose: function() {
    this._clearItemNodeTemplates();
    this._cleanUnusedRoots();
    this.callBase.apply(this, arguments);
  },
  _cleanUnusedRoots: function() {
    if (!this._assistantRoots) {
      return;
    }
    each(this._assistantRoots, function(_, item) {
      renderer_default(item).remove();
    });
  },
  _clearItemNodeTemplates: function() {
    each(this.option("items"), function() {
      delete this.node;
    });
  },
  _attachClickEvent: noop2,
  _optionChanged: function(args) {
    switch (args.name) {
      case "rows":
      case "cols":
      case "screenByWidth":
      case "singleColumnScreen":
        this._clearItemNodeTemplates();
        this._invalidate();
        break;
      case "width":
      case "height":
        this.callBase(args);
        this._update();
        break;
      case "onLayoutChanged":
        this._initLayoutChangedAction();
        break;
      case "itemTemplate":
        this._clearItemNodeTemplates();
        this.callBase(args);
        break;
      case "currentScreenFactor":
        break;
      default:
        this.callBase(args);
    }
  },
  _dimensionChanged: function() {
    if (this._getCurrentScreen() !== this.option("currentScreenFactor")) {
      this._update();
    }
  },
  repaint: function() {
    this._update();
  }
});
component_registrator_default("dxResponsiveBox", ResponsiveBox);
var responsive_box_default = ResponsiveBox;

// node_modules/devextreme/esm/ui/form/constants.js
var FORM_CLASS = "dx-form";
var FORM_GROUP_CLASS = "dx-form-group";
var FORM_GROUP_CAPTION_CLASS = "dx-form-group-caption";
var FORM_FIELD_ITEM_COL_CLASS = "dx-col-";
var FIELD_ITEM_CLASS = "dx-field-item";
var LAYOUT_MANAGER_ONE_COLUMN = "dx-layout-manager-one-col";
var FIELD_ITEM_LABEL_CONTENT_CLASS = "dx-field-item-label-content";
var FORM_LAYOUT_MANAGER_CLASS = "dx-layout-manager";
var FIELD_ITEM_LABEL_CLASS = "dx-field-item-label";
var FIELD_ITEM_CONTENT_CLASS = "dx-field-item-content";
var SINGLE_COLUMN_ITEM_CONTENT = "dx-single-column-item-content";
var ROOT_SIMPLE_ITEM_CLASS = "dx-root-simple-item";
var FORM_GROUP_CONTENT_CLASS = "dx-form-group-content";
var FIELD_ITEM_CONTENT_HAS_GROUP_CLASS = "dx-field-item-has-group";
var FIELD_ITEM_CONTENT_HAS_TABS_CLASS = "dx-field-item-has-tabs";
var FORM_GROUP_WITH_CAPTION_CLASS = "dx-form-group-with-caption";
var FIELD_ITEM_TAB_CLASS = "dx-field-item-tab";
var GROUP_COL_COUNT_CLASS = "dx-group-colcount-";
var GROUP_COL_COUNT_ATTR = "group-col-count";
var FORM_VALIDATION_SUMMARY = "dx-form-validation-summary";
var FORM_UNDERLINED_CLASS = "dx-form-styling-mode-underlined";
var SIMPLE_ITEM_TYPE = "simple";

// node_modules/devextreme/esm/ui/validation/default_adapter.js
var DefaultAdapter = class_default.inherit({
  ctor(editor, validator) {
    this.editor = editor;
    this.validator = validator;
    this.validationRequestsCallbacks = [];
    var handler = (args) => {
      this.validationRequestsCallbacks.forEach((item) => item(args));
    };
    editor.validationRequest.add(handler);
    editor.on("disposing", function() {
      editor.validationRequest.remove(handler);
    });
  },
  getValue() {
    return this.editor.option("value");
  },
  getCurrentValidationError() {
    return this.editor.option("validationError");
  },
  bypass() {
    return this.editor.option("disabled");
  },
  applyValidationResults(params) {
    this.editor.option({
      validationErrors: params.brokenRules,
      validationStatus: params.status
    });
  },
  reset() {
    this.editor.clear();
  },
  focus() {
    this.editor.focus();
  }
});
var default_adapter_default = DefaultAdapter;

// node_modules/devextreme/esm/ui/validator.js
var VALIDATOR_CLASS = "dx-validator";
var VALIDATION_STATUS_VALID2 = "valid";
var VALIDATION_STATUS_INVALID2 = "invalid";
var VALIDATION_STATUS_PENDING = "pending";
var Validator = dom_component_default.inherit({
  _initOptions: function(options2) {
    this.callBase.apply(this, arguments);
    this.option(validation_engine_default.initValidationOptions(options2));
  },
  _getDefaultOptions() {
    return extend(this.callBase(), {
      validationRules: []
    });
  },
  _init() {
    this.callBase();
    this._initGroupRegistration();
    this.focused = callbacks_default();
    this._initAdapter();
    this._validationInfo = {
      result: null,
      deferred: null,
      skipValidation: false
    };
  },
  _initGroupRegistration() {
    var group = this._findGroup();
    if (!this._groupWasInit) {
      this.on("disposing", function(args) {
        validation_engine_default.removeRegisteredValidator(args.component._validationGroup, args.component);
      });
    }
    if (!this._groupWasInit || this._validationGroup !== group) {
      validation_engine_default.removeRegisteredValidator(this._validationGroup, this);
      this._groupWasInit = true;
      this._validationGroup = group;
      validation_engine_default.registerValidatorInGroup(group, this);
    }
  },
  _setOptionsByReference() {
    this.callBase();
    extend(this._optionsByReference, {
      validationGroup: true
    });
  },
  _getEditor() {
    var element = this.$element()[0];
    return data(element, "dx-validation-target");
  },
  _initAdapter() {
    var dxStandardEditor = this._getEditor();
    var adapter = this.option("adapter");
    if (!adapter) {
      if (dxStandardEditor) {
        adapter = new default_adapter_default(dxStandardEditor, this);
        adapter.validationRequestsCallbacks.push((args) => {
          if (this._validationInfo.skipValidation) {
            return;
          }
          this.validate(args);
        });
        this.option("adapter", adapter);
        return;
      }
      throw ui_errors_default.Error("E0120");
    }
    var callbacks2 = adapter.validationRequestsCallbacks;
    if (callbacks2) {
      callbacks2.push((args) => {
        this.validate(args);
      });
    }
  },
  _toggleRTLDirection(isRtl) {
    var _this$option$editor$o, _this$option, _this$option$editor;
    var rtlEnabled = null !== (_this$option$editor$o = null === (_this$option = this.option("adapter")) || void 0 === _this$option ? void 0 : null === (_this$option$editor = _this$option.editor) || void 0 === _this$option$editor ? void 0 : _this$option$editor.option("rtlEnabled")) && void 0 !== _this$option$editor$o ? _this$option$editor$o : isRtl;
    this.callBase(rtlEnabled);
  },
  _initMarkup() {
    this.$element().addClass(VALIDATOR_CLASS);
    this.callBase();
  },
  _render() {
    this.callBase();
    this._toggleAccessibilityAttributes();
  },
  _toggleAccessibilityAttributes() {
    var dxStandardEditor = this._getEditor();
    if (dxStandardEditor) {
      var rules = this.option("validationRules") || [];
      var isRequired = rules.some((_ref) => {
        var {
          type: type2
        } = _ref;
        return "required" === type2;
      }) || null;
      if (dxStandardEditor.isInitialized()) {
        dxStandardEditor.setAria("required", isRequired);
      }
      dxStandardEditor.option("_onMarkupRendered", () => {
        dxStandardEditor.setAria("required", isRequired);
      });
    }
  },
  _visibilityChanged(visible2) {
    if (visible2) {
      this._initGroupRegistration();
    }
  },
  _optionChanged(args) {
    switch (args.name) {
      case "validationGroup":
        this._initGroupRegistration();
        return;
      case "validationRules":
        this._resetValidationRules();
        this._toggleAccessibilityAttributes();
        void 0 !== this.option("isValid") && this.validate();
        return;
      case "adapter":
        this._initAdapter();
        break;
      case "isValid":
      case "validationStatus":
        this.option(validation_engine_default.synchronizeValidationOptions(args, this.option()));
        break;
      default:
        this.callBase(args);
    }
  },
  _getValidationRules() {
    if (!this._validationRules) {
      this._validationRules = map(this.option("validationRules"), (rule, index2) => extend({}, rule, {
        validator: this,
        index: index2
      }));
    }
    return this._validationRules;
  },
  _findGroup() {
    var $element = this.$element();
    return this.option("validationGroup") || validation_engine_default.findGroup($element, this._modelByElement($element));
  },
  _resetValidationRules() {
    delete this._validationRules;
  },
  validate(args) {
    var adapter = this.option("adapter");
    var name2 = this.option("name");
    var bypass = adapter.bypass && adapter.bypass();
    var value2 = args && void 0 !== args.value ? args.value : adapter.getValue();
    var currentError = adapter.getCurrentValidationError && adapter.getCurrentValidationError();
    var rules = this._getValidationRules();
    var currentResult = this._validationInfo && this._validationInfo.result;
    if (currentResult && currentResult.status === VALIDATION_STATUS_PENDING && currentResult.value === value2) {
      return extend({}, currentResult);
    }
    var result2;
    if (bypass) {
      result2 = {
        isValid: true,
        status: VALIDATION_STATUS_VALID2
      };
    } else if (currentError && currentError.editorSpecific) {
      currentError.validator = this;
      result2 = {
        isValid: false,
        status: VALIDATION_STATUS_INVALID2,
        brokenRule: currentError,
        brokenRules: [currentError]
      };
    } else {
      result2 = validation_engine_default.validate(value2, rules, name2);
    }
    result2.id = new guid_default().toString();
    this._applyValidationResult(result2, adapter);
    result2.complete && result2.complete.then((res) => {
      if (res.id === this._validationInfo.result.id) {
        this._applyValidationResult(res, adapter);
      }
    });
    return extend({}, this._validationInfo.result);
  },
  reset() {
    var adapter = this.option("adapter");
    var result2 = {
      id: null,
      isValid: true,
      brokenRule: null,
      brokenRules: null,
      pendingRules: null,
      status: VALIDATION_STATUS_VALID2,
      complete: null
    };
    this._validationInfo.skipValidation = true;
    adapter.reset();
    this._validationInfo.skipValidation = false;
    this._resetValidationRules();
    this._applyValidationResult(result2, adapter);
  },
  _updateValidationResult(result2) {
    if (!this._validationInfo.result || this._validationInfo.result.id !== result2.id) {
      var complete = this._validationInfo.deferred && this._validationInfo.result.complete;
      this._validationInfo.result = extend({}, result2, {
        complete
      });
    } else {
      for (var prop in result2) {
        if ("id" !== prop && "complete" !== prop) {
          this._validationInfo.result[prop] = result2[prop];
        }
      }
    }
  },
  _applyValidationResult(result2, adapter) {
    var validatedAction = this._createActionByOption("onValidated", {
      excludeValidators: ["readOnly"]
    });
    result2.validator = this;
    this._updateValidationResult(result2);
    adapter.applyValidationResults && adapter.applyValidationResults(this._validationInfo.result);
    this.option({
      validationStatus: this._validationInfo.result.status
    });
    if (this._validationInfo.result.status === VALIDATION_STATUS_PENDING) {
      if (!this._validationInfo.deferred) {
        this._validationInfo.deferred = new Deferred();
        this._validationInfo.result.complete = this._validationInfo.deferred.promise();
      }
      this._eventsStrategy.fireEvent("validating", [this._validationInfo.result]);
      return;
    }
    if (this._validationInfo.result.status !== VALIDATION_STATUS_PENDING) {
      validatedAction(result2);
      if (this._validationInfo.deferred) {
        this._validationInfo.deferred.resolve(result2);
        this._validationInfo.deferred = null;
      }
    }
  },
  focus() {
    var adapter = this.option("adapter");
    adapter && adapter.focus && adapter.focus();
  },
  _useTemplates: function() {
    return false;
  }
});
component_registrator_default("dxValidator", Validator);
var validator_default = Validator;

// node_modules/devextreme/esm/ui/form/ui.form.layout_manager.utils.js
var EDITORS_WITH_ARRAY_VALUE = ["dxTagBox", "dxRangeSlider", "dxDateRangeBox"];
var EDITORS_WITHOUT_LABELS = ["dxCalendar", "dxCheckBox", "dxHtmlEditor", "dxRadioGroup", "dxRangeSlider", "dxSlider", "dxSwitch"];
function convertToRenderFieldItemOptions(_ref) {
  var {
    $parent,
    rootElementCssClassList,
    formOrLayoutManager,
    createComponentCallback,
    item,
    template,
    labelTemplate,
    name: name2,
    formLabelLocation,
    requiredMessageTemplate,
    validationGroup,
    editorValue,
    canAssignUndefinedValueToEditor,
    editorValidationBoundary,
    editorStylingMode,
    showColonAfterLabel,
    managerLabelLocation,
    itemId,
    managerMarkOptions,
    labelMode,
    onLabelTemplateRendered
  } = _ref;
  var isRequired = isDefined(item.isRequired) ? item.isRequired : !!_hasRequiredRuleInSet(item.validationRules);
  var isSimpleItem = item.itemType === SIMPLE_ITEM_TYPE;
  var helpID = item.helpText ? "dx-" + new guid_default() : null;
  var labelOptions = _convertToLabelOptions({
    item,
    id: itemId,
    isRequired,
    managerMarkOptions,
    showColonAfterLabel,
    labelLocation: managerLabelLocation,
    formLabelMode: labelMode,
    labelTemplate,
    onLabelTemplateRendered
  });
  var needRenderLabel = labelOptions.visible && (labelOptions.text || labelOptions.labelTemplate && isSimpleItem);
  var {
    location: labelLocation,
    labelID
  } = labelOptions;
  var labelNeedBaselineAlign = "top" !== labelLocation && ["dxTextArea", "dxRadioGroup", "dxCalendar", "dxHtmlEditor"].includes(item.editorType);
  var editorOptions = _convertToEditorOptions({
    editorType: item.editorType,
    editorValue,
    defaultEditorName: item.dataField,
    canAssignUndefinedValueToEditor,
    externalEditorOptions: item.editorOptions,
    editorInputId: itemId,
    editorValidationBoundary,
    editorStylingMode,
    formLabelMode: labelMode,
    labelText: labelOptions.textWithoutColon,
    labelMark: labelOptions.markOptions.showRequiredMark ? String.fromCharCode(160) + labelOptions.markOptions.requiredMark : ""
  });
  var needRenderOptionalMarkAsHelpText = labelOptions.markOptions.showOptionalMark && !labelOptions.visible && "hidden" !== editorOptions.labelMode && !isDefined(item.helpText);
  var helpText = needRenderOptionalMarkAsHelpText ? labelOptions.markOptions.optionalMark : item.helpText;
  return {
    $parent,
    rootElementCssClassList,
    formOrLayoutManager,
    createComponentCallback,
    labelOptions,
    labelNeedBaselineAlign,
    labelLocation,
    needRenderLabel,
    item,
    isSimpleItem,
    isRequired,
    template,
    helpID,
    labelID,
    name: name2,
    helpText,
    formLabelLocation,
    requiredMessageTemplate,
    validationGroup,
    editorOptions
  };
}
function getLabelMarkText(_ref2) {
  var {
    showRequiredMark,
    requiredMark,
    showOptionalMark,
    optionalMark
  } = _ref2;
  if (!showRequiredMark && !showOptionalMark) {
    return "";
  }
  return String.fromCharCode(160) + (showRequiredMark ? requiredMark : optionalMark);
}
function convertToLabelMarkOptions(_ref3, isRequired) {
  var {
    showRequiredMark,
    requiredMark,
    showOptionalMark,
    optionalMark
  } = _ref3;
  return {
    showRequiredMark: showRequiredMark && isRequired,
    requiredMark,
    showOptionalMark: showOptionalMark && !isRequired,
    optionalMark
  };
}
function _convertToEditorOptions(_ref4) {
  var {
    editorType,
    defaultEditorName,
    editorValue,
    canAssignUndefinedValueToEditor,
    externalEditorOptions,
    editorInputId,
    editorValidationBoundary,
    editorStylingMode,
    formLabelMode,
    labelText,
    labelMark
  } = _ref4;
  var editorOptionsWithValue = {};
  if (void 0 !== editorValue || canAssignUndefinedValueToEditor) {
    editorOptionsWithValue.value = editorValue;
  }
  if (-1 !== EDITORS_WITH_ARRAY_VALUE.indexOf(editorType)) {
    editorOptionsWithValue.value = editorOptionsWithValue.value || [];
  }
  var labelMode = null === externalEditorOptions || void 0 === externalEditorOptions ? void 0 : externalEditorOptions.labelMode;
  if (!isDefined(labelMode)) {
    labelMode = "outside" === formLabelMode ? "hidden" : formLabelMode;
  }
  var stylingMode = (null === externalEditorOptions || void 0 === externalEditorOptions ? void 0 : externalEditorOptions.stylingMode) || editorStylingMode;
  var result2 = extend(true, editorOptionsWithValue, externalEditorOptions, {
    inputAttr: {
      id: editorInputId
    },
    validationBoundary: editorValidationBoundary,
    stylingMode,
    label: labelText,
    labelMode,
    labelMark
  });
  if (externalEditorOptions) {
    if (result2.dataSource) {
      result2.dataSource = externalEditorOptions.dataSource;
    }
    if (result2.items) {
      result2.items = externalEditorOptions.items;
    }
  }
  if (defaultEditorName && !result2.name) {
    result2.name = defaultEditorName;
  }
  return result2;
}
function _hasRequiredRuleInSet(rules) {
  var hasRequiredRule;
  if (rules && rules.length) {
    each(rules, function(index2, rule) {
      if ("required" === rule.type) {
        hasRequiredRule = true;
        return false;
      }
    });
  }
  return hasRequiredRule;
}
function _convertToLabelOptions(_ref5) {
  var {
    item,
    id,
    isRequired,
    managerMarkOptions,
    showColonAfterLabel,
    labelLocation,
    labelTemplate,
    formLabelMode,
    onLabelTemplateRendered
  } = _ref5;
  var isEditorWithoutLabels = EDITORS_WITHOUT_LABELS.includes(item.editorType);
  var labelOptions = extend({
    showColon: showColonAfterLabel,
    location: labelLocation,
    id,
    visible: "outside" === formLabelMode || isEditorWithoutLabels && "hidden" !== formLabelMode,
    isRequired
  }, item ? item.label : {}, {
    markOptions: convertToLabelMarkOptions(managerMarkOptions, isRequired),
    labelTemplate,
    onLabelTemplateRendered
  });
  if (["dxRadioGroup", "dxCheckBox", "dxLookup", "dxSlider", "dxRangeSlider", "dxSwitch", "dxHtmlEditor", "dxDateRangeBox"].includes(item.editorType)) {
    labelOptions.labelID = "dx-label-".concat(new guid_default());
  }
  if (!labelOptions.text && item.dataField) {
    labelOptions.text = captionize(item.dataField);
  }
  if (labelOptions.text) {
    labelOptions.textWithoutColon = labelOptions.text;
    labelOptions.text += labelOptions.showColon ? ":" : "";
  }
  return labelOptions;
}

// node_modules/devextreme/esm/ui/form/components/label.js
var FIELD_ITEM_REQUIRED_MARK_CLASS = "dx-field-item-required-mark";
var FIELD_ITEM_LABEL_LOCATION_CLASS = "dx-field-item-label-location-";
var FIELD_ITEM_OPTIONAL_MARK_CLASS = "dx-field-item-optional-mark";
var FIELD_ITEM_LABEL_TEXT_CLASS = "dx-field-item-label-text";
function renderLabel(_ref) {
  var {
    text,
    id,
    location,
    alignment,
    labelID = null,
    markOptions = {},
    labelTemplate,
    labelTemplateData,
    onLabelTemplateRendered
  } = _ref;
  if ((!isDefined(text) || text.length <= 0) && !isDefined(labelTemplate)) {
    return null;
  }
  var $label = renderer_default("<label>").addClass(FIELD_ITEM_LABEL_CLASS + " " + FIELD_ITEM_LABEL_LOCATION_CLASS + location).attr("for", id).attr("id", labelID).css("textAlign", alignment);
  var $labelContainer = renderer_default("<span>").addClass(FIELD_ITEM_LABEL_CONTENT_CLASS);
  var $labelContent = renderer_default("<span>").addClass(FIELD_ITEM_LABEL_TEXT_CLASS).text(text);
  if (labelTemplate) {
    $labelContent = renderer_default("<div>").addClass("dx-field-item-custom-label-content");
    labelTemplateData.text = text;
    labelTemplate.render({
      container: getPublicElement($labelContent),
      model: labelTemplateData,
      onRendered() {
        null === onLabelTemplateRendered || void 0 === onLabelTemplateRendered ? void 0 : onLabelTemplateRendered();
      }
    });
  }
  return $label.append($labelContainer.append($labelContent, _renderLabelMark(markOptions)));
}
function _renderLabelMark(markOptions) {
  var markText = getLabelMarkText(markOptions);
  if ("" === markText) {
    return null;
  }
  return renderer_default("<span>").addClass(markOptions.showRequiredMark ? FIELD_ITEM_REQUIRED_MARK_CLASS : FIELD_ITEM_OPTIONAL_MARK_CLASS).text(markText);
}
function setLabelWidthByMaxLabelWidth($targetContainer, labelsSelector, labelMarkOptions) {
  var FIELD_ITEM_LABEL_CONTENT_CLASS_Selector = "".concat(labelsSelector, " > .").concat(FIELD_ITEM_LABEL_CLASS, ":not(.").concat(FIELD_ITEM_LABEL_LOCATION_CLASS, "top) > .").concat(FIELD_ITEM_LABEL_CONTENT_CLASS);
  var $FIELD_ITEM_LABEL_CONTENT_CLASS_Items = $targetContainer.find(FIELD_ITEM_LABEL_CONTENT_CLASS_Selector);
  var FIELD_ITEM_LABEL_CONTENT_CLASS_Length = $FIELD_ITEM_LABEL_CONTENT_CLASS_Items.length;
  var labelWidth;
  var i;
  var maxWidth = 0;
  for (i = 0; i < FIELD_ITEM_LABEL_CONTENT_CLASS_Length; i++) {
    labelWidth = getLabelWidthByHTML($FIELD_ITEM_LABEL_CONTENT_CLASS_Items[i]);
    if (labelWidth > maxWidth) {
      maxWidth = labelWidth;
    }
  }
  for (i = 0; i < FIELD_ITEM_LABEL_CONTENT_CLASS_Length; i++) {
    $FIELD_ITEM_LABEL_CONTENT_CLASS_Items[i].style.width = maxWidth + "px";
  }
}
function getLabelWidthByHTML(labelContent) {
  var result2 = 0;
  var itemsCount = labelContent.children.length;
  for (var i = 0; i < itemsCount; i++) {
    var child = labelContent.children[i];
    result2 += child.offsetWidth;
  }
  return result2;
}

// node_modules/devextreme/esm/ui/form/components/field_item.js
var FLEX_LAYOUT_CLASS = "dx-flex-layout";
var FIELD_ITEM_OPTIONAL_CLASS = "dx-field-item-optional";
var FIELD_ITEM_REQUIRED_CLASS = "dx-field-item-required";
var FIELD_ITEM_CONTENT_WRAPPER_CLASS = "dx-field-item-content-wrapper";
var FIELD_ITEM_CONTENT_LOCATION_CLASS = "dx-field-item-content-location-";
var FIELD_ITEM_LABEL_ALIGN_CLASS = "dx-field-item-label-align";
var FIELD_ITEM_HELP_TEXT_CLASS = "dx-field-item-help-text";
var LABEL_VERTICAL_ALIGNMENT_CLASS = "dx-label-v-align";
var LABEL_HORIZONTAL_ALIGNMENT_CLASS = "dx-label-h-align";
var TOGGLE_CONTROLS_PADDING_CLASS = "dx-toggle-controls-paddings";
var TEMPLATE_WRAPPER_CLASS4 = "dx-template-wrapper";
var VALIDATION_TARGET_CLASS = "dx-validation-target";
var INVALID_CLASS2 = "dx-invalid";
function renderFieldItem(_ref) {
  var {
    $parent,
    rootElementCssClassList,
    formOrLayoutManager,
    createComponentCallback,
    labelOptions,
    labelNeedBaselineAlign,
    labelLocation,
    needRenderLabel,
    formLabelLocation,
    item,
    editorOptions,
    isSimpleItem,
    isRequired,
    template,
    helpID,
    labelID,
    name: name2,
    helpText,
    requiredMessageTemplate,
    validationGroup
  } = _ref;
  var $rootElement = renderer_default("<div>").addClass(rootElementCssClassList.join(" ")).appendTo($parent);
  $rootElement.addClass(isRequired ? FIELD_ITEM_REQUIRED_CLASS : FIELD_ITEM_OPTIONAL_CLASS);
  if (isSimpleItem) {
    $rootElement.addClass(FLEX_LAYOUT_CLASS);
  }
  if (isSimpleItem && labelNeedBaselineAlign) {
    $rootElement.addClass(FIELD_ITEM_LABEL_ALIGN_CLASS);
  }
  var $fieldEditorContainer = renderer_default("<div>");
  $fieldEditorContainer.data("dx-form-item", item);
  $fieldEditorContainer.addClass(FIELD_ITEM_CONTENT_CLASS).addClass(FIELD_ITEM_CONTENT_LOCATION_CLASS + {
    right: "left",
    left: "right",
    top: "bottom"
  }[formLabelLocation]);
  var $label = null;
  if (needRenderLabel) {
    if (labelOptions.labelTemplate) {
      labelOptions.labelTemplateData = getTemplateData(item, editorOptions, formOrLayoutManager);
    }
    $label = renderLabel(labelOptions);
  }
  if ($label) {
    var {
      editorType
    } = item;
    $rootElement.append($label);
    if ("top" === labelLocation || "left" === labelLocation) {
      $rootElement.append($fieldEditorContainer);
    }
    if ("right" === labelLocation) {
      $rootElement.prepend($fieldEditorContainer);
    }
    if ("top" === labelLocation) {
      $rootElement.addClass(LABEL_VERTICAL_ALIGNMENT_CLASS);
    } else {
      $rootElement.addClass(LABEL_HORIZONTAL_ALIGNMENT_CLASS);
    }
    if ("dxCheckBox" === editorType || "dxSwitch" === editorType) {
      events_engine_default.on($label, CLICK_EVENT_NAME, function() {
        events_engine_default.trigger($fieldEditorContainer.children(), CLICK_EVENT_NAME);
      });
    }
    var isToggleControls = ["dxCheckBox", "dxSwitch", "dxRadioGroup"].includes(editorType);
    var labelAlignment = labelOptions.alignment;
    var isLabelAlignmentLeft = "left" === labelAlignment || !labelAlignment;
    var hasNotTemplate = !template;
    var isLabelOnTop = "top" === labelLocation;
    if (hasNotTemplate && isToggleControls && isLabelOnTop && isLabelAlignmentLeft) {
      $fieldEditorContainer.addClass(TOGGLE_CONTROLS_PADDING_CLASS);
    }
  } else {
    $rootElement.append($fieldEditorContainer);
  }
  var widgetInstance;
  if (template) {
    template.render({
      container: getPublicElement($fieldEditorContainer),
      model: getTemplateData(item, editorOptions, formOrLayoutManager),
      onRendered() {
        var $validationTarget2 = getValidationTarget($fieldEditorContainer);
        var validationTargetInstance2 = tryGetValidationTargetInstance($validationTarget2);
        subscribeWrapperInvalidClassToggle(validationTargetInstance2);
      }
    });
  } else {
    var $div = renderer_default("<div>").appendTo($fieldEditorContainer);
    try {
      widgetInstance = createComponentCallback($div, item.editorType, editorOptions);
      widgetInstance.setAria("describedby", helpID);
      if (labelID) {
        widgetInstance.setAria("labelledby", labelID);
      }
      widgetInstance.setAria("required", isRequired);
    } catch (e) {
      ui_errors_default.log("E1035", e.message);
    }
  }
  var $validationTarget = getValidationTarget($fieldEditorContainer);
  var validationTargetInstance = $validationTarget && $validationTarget.data(VALIDATION_TARGET_CLASS);
  if (validationTargetInstance) {
    var isItemHaveCustomLabel = item.label && item.label.text;
    var itemName = isItemHaveCustomLabel ? null : name2;
    var fieldName = isItemHaveCustomLabel ? item.label.text : itemName && captionize(itemName);
    var validationRules;
    if (isSimpleItem) {
      if (item.validationRules) {
        validationRules = item.validationRules;
      } else {
        var requiredMessage = format(requiredMessageTemplate, fieldName || "");
        validationRules = item.isRequired ? [{
          type: "required",
          message: requiredMessage
        }] : null;
      }
    }
    if (Array.isArray(validationRules) && validationRules.length) {
      createComponentCallback($validationTarget, validator_default, {
        validationRules,
        validationGroup,
        dataGetter: function() {
          return {
            formItem: item
          };
        }
      });
    }
    subscribeWrapperInvalidClassToggle(validationTargetInstance);
  }
  if (helpText && isSimpleItem) {
    var $editorParent = $fieldEditorContainer.parent();
    $editorParent.append(renderer_default("<div>").addClass(FIELD_ITEM_CONTENT_WRAPPER_CLASS).append($fieldEditorContainer).append(renderer_default("<div>").addClass(FIELD_ITEM_HELP_TEXT_CLASS).attr("id", helpID).text(helpText)));
  }
  return {
    $fieldEditorContainer,
    $rootElement,
    widgetInstance
  };
}
function getValidationTarget($fieldEditorContainer) {
  var $editor = $fieldEditorContainer.children().first();
  return $editor.hasClass(TEMPLATE_WRAPPER_CLASS4) ? $editor.children().first() : $editor;
}
function tryGetValidationTargetInstance($validationTarget) {
  var _$validationTarget$pa, _$validationTarget$pa2;
  return (null === $validationTarget || void 0 === $validationTarget ? void 0 : $validationTarget.data(VALIDATION_TARGET_CLASS)) || (null === $validationTarget || void 0 === $validationTarget ? void 0 : null === (_$validationTarget$pa = $validationTarget.parent) || void 0 === _$validationTarget$pa ? void 0 : null === (_$validationTarget$pa2 = _$validationTarget$pa.call($validationTarget)) || void 0 === _$validationTarget$pa2 ? void 0 : _$validationTarget$pa2.data(VALIDATION_TARGET_CLASS));
}
function subscribeWrapperInvalidClassToggle(validationTargetInstance) {
  if (validationTargetInstance && isMaterialBased()) {
    var wrapperClass = ".".concat(FIELD_ITEM_CONTENT_WRAPPER_CLASS);
    var toggleInvalidClass = (_ref2) => {
      var {
        element,
        component
      } = _ref2;
      var {
        isValid,
        validationMessageMode
      } = component.option();
      renderer_default(element).parents(wrapperClass).toggleClass(INVALID_CLASS2, false === isValid && (component._isFocused() || "always" === validationMessageMode));
    };
    validationTargetInstance.on("optionChanged", (e) => {
      if ("isValid" !== e.name) {
        return;
      }
      toggleInvalidClass(e);
    });
    validationTargetInstance.on("focusIn", toggleInvalidClass).on("focusOut", toggleInvalidClass).on("enterKey", toggleInvalidClass);
  }
}
function getTemplateData(item, editorOptions, formOrLayoutManager) {
  return {
    dataField: item.dataField,
    editorType: item.editorType,
    editorOptions,
    component: formOrLayoutManager,
    name: item.name
  };
}

// node_modules/devextreme/esm/ui/form/components/button_item.js
var FIELD_BUTTON_ITEM_CLASS = "dx-field-button-item";
function renderButtonItem(_ref) {
  var {
    item,
    $parent,
    rootElementCssClassList,
    validationGroup,
    createComponentCallback
  } = _ref;
  var $rootElement = renderer_default("<div>").appendTo($parent).addClass(rootElementCssClassList.join(" ")).addClass(FIELD_BUTTON_ITEM_CLASS).css("textAlign", convertAlignmentToTextAlign(item.horizontalAlignment));
  $parent.css("justifyContent", convertAlignmentToJustifyContent(item.verticalAlignment));
  var $button = renderer_default("<div>").appendTo($rootElement);
  return {
    $rootElement,
    buttonInstance: createComponentCallback($button, "dxButton", extend({
      validationGroup
    }, item.buttonOptions))
  };
}
function convertAlignmentToTextAlign(horizontalAlignment) {
  return isDefined(horizontalAlignment) ? horizontalAlignment : "right";
}
function convertAlignmentToJustifyContent(verticalAlignment) {
  switch (verticalAlignment) {
    case "center":
      return "center";
    case "bottom":
      return "flex-end";
    default:
      return "flex-start";
  }
}

// node_modules/devextreme/esm/ui/form/components/empty_item.js
var FIELD_EMPTY_ITEM_CLASS = "dx-field-empty-item";
function renderEmptyItem(_ref) {
  var {
    $parent,
    rootElementCssClassList
  } = _ref;
  return renderer_default("<div>").addClass(FIELD_EMPTY_ITEM_CLASS).html("&nbsp;").addClass(rootElementCssClassList.join(" ")).appendTo($parent);
}

// node_modules/devextreme/esm/ui/form/ui.form.layout_manager.js
var FORM_EDITOR_BY_DEFAULT = "dxTextBox";
var LAYOUT_MANAGER_FIRST_ROW_CLASS = "dx-first-row";
var LAYOUT_MANAGER_LAST_ROW_CLASS = "dx-last-row";
var LAYOUT_MANAGER_FIRST_COL_CLASS = "dx-first-col";
var LAYOUT_MANAGER_LAST_COL_CLASS = "dx-last-col";
var LayoutManager = ui_widget_default.inherit({
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      layoutData: {},
      readOnly: false,
      colCount: 1,
      colCountByScreen: void 0,
      labelLocation: "left",
      onFieldDataChanged: null,
      onEditorEnterKey: null,
      customizeItem: null,
      alignItemLabels: true,
      minColWidth: 200,
      showRequiredMark: true,
      screenByWidth: null,
      showOptionalMark: false,
      requiredMark: "*",
      labelMode: "outside",
      optionalMark: message_default.format("dxForm-optionalMark"),
      requiredMessage: message_default.getFormatter("dxForm-requiredMessage")
    });
  },
  _setOptionsByReference: function() {
    this.callBase();
    extend(this._optionsByReference, {
      layoutData: true,
      validationGroup: true
    });
  },
  _init: function() {
    var layoutData = this.option("layoutData");
    this.callBase();
    this._itemWatchers = [];
    this._itemsRunTimeInfo = new FormItemsRunTimeInfo();
    this._updateReferencedOptions(layoutData);
    this._initDataAndItems(layoutData);
  },
  _dispose: function() {
    this.callBase();
    this._cleanItemWatchers();
  },
  _initDataAndItems: function(initialData) {
    this._syncDataWithItems();
    this._updateItems(initialData);
  },
  _syncDataWithItems: function() {
    var layoutData = this.option("layoutData");
    var userItems = this.option("items");
    if (isDefined(userItems)) {
      userItems.forEach((item) => {
        if (item.dataField && void 0 === this._getDataByField(item.dataField)) {
          var value2;
          if (item.editorOptions) {
            value2 = item.editorOptions.value;
          }
          if (isDefined(value2) || item.dataField in layoutData) {
            this._updateFieldValue(item.dataField, value2);
          }
        }
      });
    }
  },
  _getDataByField: function(dataField) {
    return dataField ? this.option("layoutData." + dataField) : null;
  },
  _isCheckboxUndefinedStateEnabled: function(_ref) {
    var {
      allowIndeterminateState,
      editorType,
      dataField
    } = _ref;
    if (true === allowIndeterminateState && "dxCheckBox" === editorType) {
      var nameParts = ["layoutData", ...dataField.split(".")];
      var propertyName = nameParts.pop();
      var layoutData = this.option(nameParts.join("."));
      return layoutData && propertyName in layoutData;
    }
    return false;
  },
  _updateFieldValue: function(dataField, value2) {
    var layoutData = this.option("layoutData");
    var newValue = value2;
    if (!variable_wrapper_default.isWrapped(layoutData[dataField]) && isDefined(dataField)) {
      this.option("layoutData." + dataField, newValue);
    } else if (variable_wrapper_default.isWritableWrapped(layoutData[dataField])) {
      newValue = isFunction(newValue) ? newValue() : newValue;
      layoutData[dataField](newValue);
    }
    this._triggerOnFieldDataChanged({
      dataField,
      value: newValue
    });
  },
  _triggerOnFieldDataChanged: function(args) {
    this._createActionByOption("onFieldDataChanged")(args);
  },
  _updateItems: function(layoutData) {
    var that = this;
    var userItems = this.option("items");
    var isUserItemsExist = isDefined(userItems);
    var customizeItem = that.option("customizeItem");
    var items = isUserItemsExist ? userItems : this._generateItemsByData(layoutData);
    if (isDefined(items)) {
      var processedItems = [];
      each(items, function(index2, item) {
        if (that._isAcceptableItem(item)) {
          item = that._processItem(item);
          customizeItem && customizeItem(item);
          if (isObject(item) && false !== variable_wrapper_default.unwrap(item.visible)) {
            processedItems.push(item);
          }
        }
      });
      if (!that._itemWatchers.length || !isUserItemsExist) {
        that._updateItemWatchers(items);
      }
      this._setItems(processedItems);
      this._sortItems();
    }
  },
  _cleanItemWatchers: function() {
    this._itemWatchers.forEach(function(dispose) {
      dispose();
    });
    this._itemWatchers = [];
  },
  _updateItemWatchers: function(items) {
    var that = this;
    var watch = that._getWatch();
    items.forEach(function(item) {
      if (isObject(item) && isDefined(item.visible) && isFunction(watch)) {
        that._itemWatchers.push(watch(function() {
          return variable_wrapper_default.unwrap(item.visible);
        }, function() {
          that._updateItems(that.option("layoutData"));
          that.repaint();
        }, {
          skipImmediate: true
        }));
      }
    });
  },
  _generateItemsByData: function(layoutData) {
    var result2 = [];
    if (isDefined(layoutData)) {
      each(layoutData, function(dataField) {
        result2.push({
          dataField
        });
      });
    }
    return result2;
  },
  _isAcceptableItem: function(item) {
    var itemField = item.dataField || item;
    var itemData = this._getDataByField(itemField);
    return !(isFunction(itemData) && !variable_wrapper_default.isWrapped(itemData));
  },
  _processItem: function(item) {
    if ("string" === typeof item) {
      item = {
        dataField: item
      };
    }
    if ("object" === typeof item && !item.itemType) {
      item.itemType = SIMPLE_ITEM_TYPE;
    }
    if (!isDefined(item.editorType) && isDefined(item.dataField)) {
      var value2 = this._getDataByField(item.dataField);
      item.editorType = isDefined(value2) ? this._getEditorTypeByDataType(type(value2)) : FORM_EDITOR_BY_DEFAULT;
    }
    if ("dxCheckBox" === item.editorType) {
      var _item$allowIndetermin;
      item.allowIndeterminateState = null !== (_item$allowIndetermin = item.allowIndeterminateState) && void 0 !== _item$allowIndetermin ? _item$allowIndetermin : true;
    }
    return item;
  },
  _getEditorTypeByDataType: function(dataType) {
    switch (dataType) {
      case "number":
        return "dxNumberBox";
      case "date":
        return "dxDateBox";
      case "boolean":
        return "dxCheckBox";
      default:
        return "dxTextBox";
    }
  },
  _sortItems: function() {
    normalizeIndexes(this._items, "visibleIndex");
    this._sortIndexes();
  },
  _sortIndexes: function() {
    this._items.sort(function(itemA, itemB) {
      var indexA = itemA.visibleIndex;
      var indexB = itemB.visibleIndex;
      var result2;
      if (indexA > indexB) {
        result2 = 1;
      } else if (indexA < indexB) {
        result2 = -1;
      } else {
        result2 = 0;
      }
      return result2;
    });
  },
  _initMarkup: function() {
    this._itemsRunTimeInfo.clear();
    this.$element().addClass(FORM_LAYOUT_MANAGER_CLASS);
    this.callBase();
    this._renderResponsiveBox();
  },
  _renderResponsiveBox: function() {
    var templatesInfo = [];
    if (this._items && this._items.length) {
      var colCount = this._getColCount();
      var $container = renderer_default("<div>").appendTo(this.$element());
      this._prepareItemsWithMerging(colCount);
      var layoutItems = this._generateLayoutItems();
      this._responsiveBox = this._createComponent($container, responsive_box_default, this._getResponsiveBoxConfig(layoutItems, colCount, templatesInfo));
      if (!hasWindow()) {
        this._renderTemplates(templatesInfo);
      }
    }
  },
  _itemStateChangedHandler: function(e) {
    this._refresh();
  },
  _renderTemplates: function(templatesInfo) {
    var that = this;
    var itemsWithLabelTemplateCount = 0;
    templatesInfo.forEach((_ref2) => {
      var _item$label;
      var {
        item
      } = _ref2;
      if (null !== item && void 0 !== item && null !== (_item$label = item.label) && void 0 !== _item$label && _item$label.template) {
        itemsWithLabelTemplateCount++;
      }
    });
    each(templatesInfo, function(index2, info) {
      switch (info.itemType) {
        case "empty":
          renderEmptyItem(info);
          break;
        case "button":
          that._renderButtonItem(info);
          break;
        default:
          that._renderFieldItem(info, itemsWithLabelTemplateCount);
      }
    });
  },
  _getResponsiveBoxConfig: function(layoutItems, colCount, templatesInfo) {
    var that = this;
    var colCountByScreen = that.option("colCountByScreen");
    var xsColCount = colCountByScreen && colCountByScreen.xs;
    return {
      onItemStateChanged: this._itemStateChangedHandler.bind(this),
      onLayoutChanged: function() {
        var onLayoutChanged = that.option("onLayoutChanged");
        var isSingleColumnMode = that.isSingleColumnMode();
        if (onLayoutChanged) {
          that.$element().toggleClass(LAYOUT_MANAGER_ONE_COLUMN, isSingleColumnMode);
          onLayoutChanged(isSingleColumnMode);
        }
      },
      onContentReady: function(e) {
        if (hasWindow()) {
          that._renderTemplates(templatesInfo);
        }
        if (that.option("onLayoutChanged")) {
          that.$element().toggleClass(LAYOUT_MANAGER_ONE_COLUMN, that.isSingleColumnMode(e.component));
        }
      },
      itemTemplate: function(e, itemData, itemElement) {
        if (!e.location) {
          return;
        }
        var $itemElement = renderer_default(itemElement);
        var itemRenderedCountInPreviousRows = e.location.row * colCount;
        var item = that._items[e.location.col + itemRenderedCountInPreviousRows];
        if (!item) {
          return;
        }
        var itemCssClassList = [item.cssClass];
        $itemElement.toggleClass(SINGLE_COLUMN_ITEM_CONTENT, that.isSingleColumnMode(this));
        if (0 === e.location.row) {
          itemCssClassList.push(LAYOUT_MANAGER_FIRST_ROW_CLASS);
        }
        if (0 === e.location.col) {
          itemCssClassList.push(LAYOUT_MANAGER_FIRST_COL_CLASS);
        }
        if (item.itemType === SIMPLE_ITEM_TYPE && that.option("isRoot")) {
          $itemElement.addClass(ROOT_SIMPLE_ITEM_CLASS);
        }
        var isLastColumn = e.location.col === colCount - 1 || e.location.col + e.location.colspan === colCount;
        var rowsCount = that._getRowsCount();
        var isLastRow = e.location.row === rowsCount - 1;
        if (isLastColumn) {
          itemCssClassList.push(LAYOUT_MANAGER_LAST_COL_CLASS);
        }
        if (isLastRow) {
          itemCssClassList.push(LAYOUT_MANAGER_LAST_ROW_CLASS);
        }
        if ("empty" !== item.itemType) {
          itemCssClassList.push(FIELD_ITEM_CLASS);
          itemCssClassList.push(that.option("cssItemClass"));
          if (isDefined(item.col)) {
            itemCssClassList.push("dx-col-" + item.col);
          }
        }
        templatesInfo.push({
          itemType: item.itemType,
          item,
          $parent: $itemElement,
          rootElementCssClassList: itemCssClassList
        });
      },
      cols: that._generateRatio(colCount),
      rows: that._generateRatio(that._getRowsCount(), true),
      dataSource: layoutItems,
      screenByWidth: that.option("screenByWidth"),
      singleColumnScreen: xsColCount ? false : "xs"
    };
  },
  _getColCount: function() {
    var colCount = this.option("colCount");
    var colCountByScreen = this.option("colCountByScreen");
    if (colCountByScreen) {
      var screenFactor = this.option("form").getTargetScreenFactor();
      if (!screenFactor) {
        screenFactor = hasWindow() ? getCurrentScreenFactor(this.option("screenByWidth")) : "lg";
      }
      colCount = colCountByScreen[screenFactor] || colCount;
    }
    if ("auto" === colCount) {
      if (this._cashedColCount) {
        return this._cashedColCount;
      }
      this._cashedColCount = colCount = this._getMaxColCount();
    }
    return colCount < 1 ? 1 : colCount;
  },
  _getMaxColCount: function() {
    if (!hasWindow()) {
      return 1;
    }
    var minColWidth = this.option("minColWidth");
    var width = getWidth(this.$element());
    var itemsCount = this._items.length;
    var maxColCount = Math.floor(width / minColWidth) || 1;
    return itemsCount < maxColCount ? itemsCount : maxColCount;
  },
  isCachedColCountObsolete: function() {
    return this._cashedColCount && this._getMaxColCount() !== this._cashedColCount;
  },
  _prepareItemsWithMerging: function(colCount) {
    var items = this._items.slice(0);
    var item;
    var itemsMergedByCol;
    var result2 = [];
    var j;
    var i;
    for (i = 0; i < items.length; i++) {
      item = items[i];
      result2.push(item);
      if (this.option("alignItemLabels") || item.alignItemLabels || item.colSpan) {
        item.col = this._getColByIndex(result2.length - 1, colCount);
      }
      if (item.colSpan > 1 && item.col + item.colSpan <= colCount) {
        itemsMergedByCol = [];
        for (j = 0; j < item.colSpan - 1; j++) {
          itemsMergedByCol.push({
            merged: true
          });
        }
        result2 = result2.concat(itemsMergedByCol);
      } else {
        delete item.colSpan;
      }
    }
    this._setItems(result2);
  },
  _getColByIndex: function(index2, colCount) {
    return index2 % colCount;
  },
  _setItems: function(items) {
    this._items = items;
    this._cashedColCount = null;
  },
  _generateLayoutItems: function() {
    var items = this._items;
    var colCount = this._getColCount();
    var result2 = [];
    var item;
    var i;
    for (i = 0; i < items.length; i++) {
      item = items[i];
      if (!item.merged) {
        var generatedItem = {
          location: {
            row: parseInt(i / colCount),
            col: this._getColByIndex(i, colCount)
          }
        };
        if (isDefined(item.disabled)) {
          generatedItem.disabled = item.disabled;
        }
        if (isDefined(item.visible)) {
          generatedItem.visible = item.visible;
        }
        if (isDefined(item.colSpan)) {
          generatedItem.location.colspan = item.colSpan;
        }
        if (isDefined(item.rowSpan)) {
          generatedItem.location.rowspan = item.rowSpan;
        }
        result2.push(generatedItem);
      }
    }
    return result2;
  },
  _renderEmptyItem: function($container) {
    renderEmptyItem({
      $container
    });
  },
  _renderButtonItem: function(_ref3) {
    var {
      item,
      $parent,
      rootElementCssClassList
    } = _ref3;
    var {
      $rootElement,
      buttonInstance
    } = renderButtonItem({
      item,
      $parent,
      rootElementCssClassList,
      validationGroup: this.option("validationGroup"),
      createComponentCallback: this._createComponent.bind(this)
    });
    this._itemsRunTimeInfo.add({
      item,
      widgetInstance: buttonInstance,
      guid: item.guid,
      $itemContainer: $rootElement
    });
  },
  _renderFieldItem: function(_ref4, itemsWithLabelTemplateCount) {
    var _item$label2, _this$option;
    var {
      item,
      $parent,
      rootElementCssClassList
    } = _ref4;
    var editorValue = this._getDataByField(item.dataField);
    var canAssignUndefinedValueToEditor = false;
    if (void 0 === editorValue) {
      var {
        allowIndeterminateState,
        editorType,
        dataField
      } = item;
      canAssignUndefinedValueToEditor = this._isCheckboxUndefinedStateEnabled({
        allowIndeterminateState,
        editorType,
        dataField
      });
    }
    var name2 = item.dataField || item.name;
    var formOrLayoutManager = this._getFormOrThis();
    var {
      $fieldEditorContainer,
      widgetInstance,
      $rootElement
    } = renderFieldItem(convertToRenderFieldItemOptions({
      $parent,
      rootElementCssClassList,
      item,
      name: name2,
      editorValue,
      canAssignUndefinedValueToEditor,
      formOrLayoutManager: this._getFormOrThis(),
      createComponentCallback: this._createComponent.bind(this),
      formLabelLocation: this.option("labelLocation"),
      requiredMessageTemplate: this.option("requiredMessage"),
      validationGroup: this.option("validationGroup"),
      editorValidationBoundary: this.option("validationBoundary"),
      editorStylingMode: this.option("form") && this.option("form").option("stylingMode"),
      showColonAfterLabel: this.option("showColonAfterLabel"),
      managerLabelLocation: this.option("labelLocation"),
      template: item.template ? this._getTemplate(item.template) : null,
      labelTemplate: null !== (_item$label2 = item.label) && void 0 !== _item$label2 && _item$label2.template ? this._getTemplate(item.label.template) : null,
      itemId: this.option("form") && this.option("form").getItemID(name2),
      managerMarkOptions: this._getMarkOptions(),
      labelMode: this.option("labelMode"),
      onLabelTemplateRendered: () => {
        this._incTemplateRenderedCallCount();
        if (this._shouldAlignLabelsOnTemplateRendered(formOrLayoutManager, itemsWithLabelTemplateCount)) {
          formOrLayoutManager._alignLabels(this, this.isSingleColumnMode(formOrLayoutManager));
        }
      }
    }));
    null === (_this$option = this.option("onFieldItemRendered")) || void 0 === _this$option ? void 0 : _this$option();
    if (widgetInstance && item.dataField) {
      this._bindDataField(widgetInstance, item.dataField, item.editorType, $fieldEditorContainer);
    }
    this._itemsRunTimeInfo.add({
      item,
      widgetInstance,
      guid: item.guid,
      $itemContainer: $rootElement
    });
  },
  _incTemplateRenderedCallCount() {
    var _this$_labelTemplateR;
    this._labelTemplateRenderedCallCount = (null !== (_this$_labelTemplateR = this._labelTemplateRenderedCallCount) && void 0 !== _this$_labelTemplateR ? _this$_labelTemplateR : 0) + 1;
  },
  _shouldAlignLabelsOnTemplateRendered(formOrLayoutManager, totalItemsWithLabelTemplate) {
    return formOrLayoutManager.option("templatesRenderAsynchronously") && this._labelTemplateRenderedCallCount === totalItemsWithLabelTemplate;
  },
  _getMarkOptions: function() {
    return {
      showRequiredMark: this.option("showRequiredMark"),
      requiredMark: this.option("requiredMark"),
      showOptionalMark: this.option("showOptionalMark"),
      optionalMark: this.option("optionalMark")
    };
  },
  _getFormOrThis: function() {
    return this.option("form") || this;
  },
  _bindDataField: function(editorInstance, dataField, editorType, $container) {
    var formOrThis = this._getFormOrThis();
    editorInstance.on("enterKey", function(args) {
      formOrThis._createActionByOption("onEditorEnterKey")(extend(args, {
        dataField
      }));
    });
    this._createWatcher(editorInstance, $container, dataField);
    this.linkEditorToDataField(editorInstance, dataField, editorType);
  },
  _createWatcher: function(editorInstance, $container, dataField) {
    var that = this;
    var watch = that._getWatch();
    if (!isFunction(watch)) {
      return;
    }
    var dispose = watch(function() {
      return that._getDataByField(dataField);
    }, function() {
      var fieldValue = that._getDataByField(dataField);
      if ("dxTagBox" === editorInstance.NAME) {
        var editorValue = editorInstance.option("value");
        if (fieldValue !== editorValue && function(array1, array2) {
          if (!Array.isArray(array1) || !Array.isArray(array2) || array1.length !== array2.length) {
            return false;
          }
          for (var i = 0; i < array1.length; i++) {
            if (array1[i] !== array2[i]) {
              return false;
            }
          }
          return true;
        }(fieldValue, editorValue)) {
          return;
        }
      }
      editorInstance.option("value", fieldValue);
    }, {
      deep: true,
      skipImmediate: true
    });
    events_engine_default.on($container, removeEvent, dispose);
  },
  _getWatch: function() {
    if (!isDefined(this._watch)) {
      var formInstance = this.option("form");
      this._watch = formInstance && formInstance.option("integrationOptions.watchMethod");
    }
    return this._watch;
  },
  _createComponent: function($editor, type2, editorOptions) {
    var readOnlyState = this.option("readOnly");
    var hasEditorReadOnly = Object.hasOwn(editorOptions, "readOnly");
    var instance = this.callBase($editor, type2, _extends({}, editorOptions, {
      readOnly: !hasEditorReadOnly ? readOnlyState : editorOptions.readOnly
    }));
    var isChangeByForm = false;
    instance.on("optionChanged", (args) => {
      if ("readOnly" === args.name && !isChangeByForm) {
        hasEditorReadOnly = true;
      }
    });
    this.on("optionChanged", function(args) {
      if ("readOnly" === args.name && !hasEditorReadOnly) {
        isChangeByForm = true;
        instance.option(args.name, args.value);
        isChangeByForm = false;
      }
    });
    return instance;
  },
  _generateRatio: function(count, isAutoSize) {
    var result2 = [];
    var ratio;
    var i;
    for (i = 0; i < count; i++) {
      ratio = {
        ratio: 1
      };
      if (isAutoSize) {
        ratio.baseSize = "auto";
      }
      result2.push(ratio);
    }
    return result2;
  },
  _getRowsCount: function() {
    return Math.ceil(this._items.length / this._getColCount());
  },
  _updateReferencedOptions: function(newLayoutData) {
    var layoutData = this.option("layoutData");
    if (isObject(layoutData)) {
      Object.getOwnPropertyNames(layoutData).forEach((property) => delete this._optionsByReference["layoutData." + property]);
    }
    if (isObject(newLayoutData)) {
      Object.getOwnPropertyNames(newLayoutData).forEach((property) => this._optionsByReference["layoutData." + property] = true);
    }
  },
  _clearWidget(instance) {
    this._disableEditorValueChangedHandler = true;
    instance.clear();
    this._disableEditorValueChangedHandler = false;
    instance.option("isValid", true);
  },
  _optionChanged(args) {
    if (0 === args.fullName.search("layoutData.")) {
      return;
    }
    switch (args.name) {
      case "showRequiredMark":
      case "showOptionalMark":
      case "requiredMark":
      case "optionalMark":
        this._cashedRequiredConfig = null;
        this._invalidate();
        break;
      case "layoutData":
        this._updateReferencedOptions(args.value);
        if (this.option("items")) {
          if (!isEmptyObject(args.value)) {
            this._itemsRunTimeInfo.each((_, itemRunTimeInfo) => {
              if (isDefined(itemRunTimeInfo.item)) {
                var dataField = itemRunTimeInfo.item.dataField;
                if (dataField && isDefined(itemRunTimeInfo.widgetInstance)) {
                  var valueGetter = compileGetter(dataField);
                  var dataValue = valueGetter(args.value);
                  var {
                    allowIndeterminateState,
                    editorType
                  } = itemRunTimeInfo.item;
                  if (void 0 !== dataValue || this._isCheckboxUndefinedStateEnabled({
                    allowIndeterminateState,
                    editorType,
                    dataField
                  })) {
                    itemRunTimeInfo.widgetInstance.option("value", dataValue);
                  } else {
                    this._clearWidget(itemRunTimeInfo.widgetInstance);
                  }
                }
              }
            });
          }
        } else {
          this._initDataAndItems(args.value);
          this._invalidate();
        }
        break;
      case "items":
        this._cleanItemWatchers();
        this._initDataAndItems(args.value);
        this._invalidate();
        break;
      case "alignItemLabels":
      case "labelLocation":
      case "labelMode":
      case "requiredMessage":
        this._invalidate();
        break;
      case "customizeItem":
        this._updateItems(this.option("layoutData"));
        this._invalidate();
        break;
      case "colCount":
      case "colCountByScreen":
        this._resetColCount();
        break;
      case "minColWidth":
        if ("auto" === this.option("colCount")) {
          this._resetColCount();
        }
        break;
      case "readOnly":
        break;
      case "width":
        this.callBase(args);
        if ("auto" === this.option("colCount")) {
          this._resetColCount();
        }
        break;
      case "onFieldDataChanged":
        break;
      default:
        this.callBase(args);
    }
  },
  _resetColCount: function() {
    this._cashedColCount = null;
    this._invalidate();
  },
  linkEditorToDataField(editorInstance, dataField) {
    this.on("optionChanged", (args) => {
      if (args.fullName === "layoutData.".concat(dataField)) {
        editorInstance._setOptionWithoutOptionChange("value", args.value);
      }
    });
    editorInstance.on("valueChanged", (args) => {
      var isValueReferenceType = isObject(args.value) || Array.isArray(args.value);
      if (!this._disableEditorValueChangedHandler && !(isValueReferenceType && args.value === args.previousValue)) {
        this._updateFieldValue(dataField, args.value);
      }
    });
  },
  _dimensionChanged: function() {
    if ("auto" === this.option("colCount") && this.isCachedColCountObsolete()) {
      this._eventsStrategy.fireEvent("autoColCountChanged");
    }
  },
  updateData: function(data3, value2) {
    var that = this;
    if (isObject(data3)) {
      each(data3, function(dataField, fieldValue) {
        that._updateFieldValue(dataField, fieldValue);
      });
    } else if ("string" === typeof data3) {
      that._updateFieldValue(data3, value2);
    }
  },
  getEditor: function(field) {
    return this._itemsRunTimeInfo.findWidgetInstanceByDataField(field) || this._itemsRunTimeInfo.findWidgetInstanceByName(field);
  },
  isSingleColumnMode: function(component) {
    var responsiveBox = this._responsiveBox || component;
    if (responsiveBox) {
      return responsiveBox.option("currentScreenFactor") === responsiveBox.option("singleColumnScreen");
    }
  },
  getItemsRunTimeInfo: function() {
    return this._itemsRunTimeInfo;
  }
});
component_registrator_default("dxLayoutManager", LayoutManager);

// node_modules/devextreme/esm/ui/validation_summary.js
var VALIDATION_SUMMARY_CLASS = "dx-validationsummary";
var ITEM_CLASS4 = VALIDATION_SUMMARY_CLASS + "-item";
var ITEM_DATA_KEY3 = VALIDATION_SUMMARY_CLASS + "-item-data";
var ValidationSummary = ui_collection_widget_edit_default.inherit({
  _getDefaultOptions() {
    return extend(this.callBase(), {
      focusStateEnabled: false,
      noDataText: null
    });
  },
  _setOptionsByReference() {
    this.callBase();
    extend(this._optionsByReference, {
      validationGroup: true
    });
  },
  _init() {
    this.callBase();
    this._initGroupRegistration();
  },
  _initGroupRegistration() {
    var $element = this.$element();
    var group = this.option("validationGroup") || validation_engine_default.findGroup($element, this._modelByElement($element));
    var groupConfig = validation_engine_default.addGroup(group);
    this._unsubscribeGroup();
    this._groupWasInit = true;
    this._validationGroup = group;
    this.groupSubscription = this._groupValidationHandler.bind(this);
    groupConfig.on("validated", this.groupSubscription);
  },
  _unsubscribeGroup() {
    var groupConfig = validation_engine_default.getGroupConfig(this._validationGroup);
    groupConfig && groupConfig.off("validated", this.groupSubscription);
  },
  _getOrderedItems(validators, items) {
    var orderedItems = [];
    each(validators, function(_, validator) {
      var foundItems = grep(items, function(item) {
        if (item.validator === validator) {
          return true;
        }
      });
      if (foundItems.length) {
        orderedItems = orderedItems.concat(foundItems);
      }
    });
    return orderedItems;
  },
  _groupValidationHandler(params) {
    var items = this._getOrderedItems(params.validators, map(params.brokenRules, function(rule) {
      return {
        text: rule.message,
        validator: rule.validator,
        index: rule.index
      };
    }));
    this.validators = params.validators;
    each(this.validators, (_, validator) => {
      if (validator._validationSummary !== this) {
        var handler = this._itemValidationHandler.bind(this);
        validator.on("validated", handler);
        validator.on("disposing", function() {
          validator.off("validated", handler);
          validator._validationSummary = null;
          handler = null;
        });
        validator._validationSummary = this;
      }
    });
    this.option("items", items);
  },
  _itemValidationHandler(_ref) {
    var {
      isValid,
      validator,
      brokenRules
    } = _ref;
    var items = this.option("items");
    var itemsChanged = false;
    var itemIndex = 0;
    var _loop = function() {
      var item = items[itemIndex];
      if (item.validator === validator) {
        var foundRule = grep(brokenRules || [], function(rule) {
          return rule.index === item.index;
        })[0];
        if (isValid || !foundRule) {
          items.splice(itemIndex, 1);
          itemsChanged = true;
          return 1;
        }
        if (foundRule.message !== item.text) {
          item.text = foundRule.message;
          itemsChanged = true;
        }
      }
      itemIndex++;
    };
    while (itemIndex < items.length) {
      if (_loop()) {
        continue;
      }
    }
    each(brokenRules, function(_, rule) {
      var foundItem = grep(items, function(item) {
        return item.validator === validator && item.index === rule.index;
      })[0];
      if (!foundItem) {
        items.push({
          text: rule.message,
          validator,
          index: rule.index
        });
        itemsChanged = true;
      }
    });
    if (itemsChanged) {
      items = this._getOrderedItems(this.validators, items);
      this.option("items", items);
    }
  },
  _initMarkup() {
    this.$element().addClass(VALIDATION_SUMMARY_CLASS);
    this.callBase();
  },
  _optionChanged(args) {
    switch (args.name) {
      case "validationGroup":
        this._initGroupRegistration();
        break;
      default:
        this.callBase(args);
    }
  },
  _itemClass: () => ITEM_CLASS4,
  _itemDataKey: () => ITEM_DATA_KEY3,
  _postprocessRenderItem(params) {
    events_engine_default.on(params.itemElement, "click", function() {
      params.itemData.validator && params.itemData.validator.focus && params.itemData.validator.focus();
    });
  },
  _dispose() {
    this.callBase();
    this._unsubscribeGroup();
  },
  refreshValidationGroup() {
    this._initGroupRegistration();
  }
});
component_registrator_default("dxValidationSummary", ValidationSummary);
var validation_summary_default = ValidationSummary;

// node_modules/devextreme/esm/ui/validation_group.js
var VALIDATION_ENGINE_CLASS = "dx-validationgroup";
var VALIDATOR_CLASS2 = "dx-validator";
var VALIDATION_SUMMARY_CLASS2 = "dx-validationsummary";
var ValidationGroup = class extends dom_component_default {
  _getDefaultOptions() {
    return super._getDefaultOptions();
  }
  _init() {
    super._init();
    validation_engine_default.addGroup(this);
  }
  _initMarkup() {
    var $element = this.$element();
    $element.addClass(VALIDATION_ENGINE_CLASS);
    $element.find(".".concat(VALIDATOR_CLASS2)).each(function(_, validatorContainer) {
      validator_default.getInstance(renderer_default(validatorContainer))._initGroupRegistration();
    });
    $element.find(".".concat(VALIDATION_SUMMARY_CLASS2)).each(function(_, summaryContainer) {
      validation_summary_default.getInstance(renderer_default(summaryContainer)).refreshValidationGroup();
    });
    super._initMarkup();
  }
  validate() {
    return validation_engine_default.validateGroup(this);
  }
  reset() {
    return validation_engine_default.resetGroup(this);
  }
  _dispose() {
    validation_engine_default.removeGroup(this);
    this.$element().removeClass(VALIDATION_ENGINE_CLASS);
    super._dispose();
  }
  _useTemplates() {
    return false;
  }
};
component_registrator_default("dxValidationGroup", ValidationGroup);

// node_modules/devextreme/esm/ui/form/ui.form.js
var FOCUSED_STATE_CLASS2 = "dx-state-focused";
var ITEM_OPTIONS_FOR_VALIDATION_UPDATING = ["items", "isRequired", "validationRules", "visible"];
var Form = ui_widget_default.inherit({
  _init: function() {
    this.callBase();
    this._dirtyFields = /* @__PURE__ */ new Set();
    this._cachedColCountOptions = [];
    this._itemsRunTimeInfo = new FormItemsRunTimeInfo();
    this._groupsColCount = [];
    this._attachSyncSubscriptions();
  },
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      formID: "dx-" + new guid_default(),
      formData: {},
      colCount: 1,
      screenByWidth: defaultScreenFactorFunc,
      colCountByScreen: void 0,
      labelLocation: "left",
      readOnly: false,
      onFieldDataChanged: null,
      customizeItem: null,
      onEditorEnterKey: null,
      minColWidth: 200,
      alignItemLabels: true,
      alignItemLabelsInAllGroups: true,
      alignRootItemLabels: true,
      showColonAfterLabel: true,
      showRequiredMark: true,
      showOptionalMark: false,
      requiredMark: "*",
      optionalMark: message_default.format("dxForm-optionalMark"),
      requiredMessage: message_default.getFormatter("dxForm-requiredMessage"),
      showValidationSummary: false,
      items: void 0,
      scrollingEnabled: false,
      validationGroup: void 0,
      stylingMode: config_default().editorStylingMode,
      labelMode: "outside",
      isDirty: false
    });
  },
  _defaultOptionsRules: function() {
    return this.callBase().concat([{
      device: function() {
        return isMaterialBased();
      },
      options: {
        labelLocation: "top"
      }
    }, {
      device: function() {
        return isMaterial();
      },
      options: {
        showColonAfterLabel: false
      }
    }]);
  },
  _setOptionsByReference: function() {
    this.callBase();
    extend(this._optionsByReference, {
      formData: true,
      validationGroup: true
    });
  },
  _getGroupColCount: function($element) {
    return parseInt($element.attr(GROUP_COL_COUNT_ATTR));
  },
  _applyLabelsWidthByCol: function($container, index2) {
    var options2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
    var labelMarkOptions = arguments.length > 3 ? arguments[3] : void 0;
    var fieldItemClass = options2.inOneColumn ? FIELD_ITEM_CLASS : FORM_FIELD_ITEM_COL_CLASS + index2;
    var cssExcludeTabbedSelector = options2.excludeTabbed ? ":not(.".concat(FIELD_ITEM_TAB_CLASS, ")") : "";
    setLabelWidthByMaxLabelWidth($container, ".".concat(fieldItemClass).concat(cssExcludeTabbedSelector), labelMarkOptions);
    return;
  },
  _applyLabelsWidth: function($container, excludeTabbed, inOneColumn, colCount, labelMarkOptions) {
    colCount = inOneColumn ? 1 : colCount || this._getGroupColCount($container);
    var applyLabelsOptions = {
      excludeTabbed,
      inOneColumn
    };
    var i;
    for (i = 0; i < colCount; i++) {
      this._applyLabelsWidthByCol($container, i, applyLabelsOptions, labelMarkOptions);
    }
  },
  _getGroupElementsInColumn: function($container, columnIndex, colCount) {
    var cssColCountSelector = isDefined(colCount) ? "." + GROUP_COL_COUNT_CLASS + colCount : "";
    var groupSelector = "." + FORM_FIELD_ITEM_COL_CLASS + columnIndex + " > ." + FIELD_ITEM_CONTENT_CLASS + " > ." + FORM_GROUP_CLASS + cssColCountSelector;
    return $container.find(groupSelector);
  },
  _applyLabelsWidthWithGroups: function($container, colCount, excludeTabbed, labelMarkOptions) {
    if (true === this.option("alignRootItemLabels")) {
      var $rootSimpleItems = $container.find(".".concat(ROOT_SIMPLE_ITEM_CLASS));
      for (var colIndex = 0; colIndex < colCount; colIndex++) {
        this._applyLabelsWidthByCol($rootSimpleItems, colIndex, excludeTabbed, labelMarkOptions);
      }
    }
    var alignItemLabelsInAllGroups = this.option("alignItemLabelsInAllGroups");
    if (alignItemLabelsInAllGroups) {
      this._applyLabelsWidthWithNestedGroups($container, colCount, excludeTabbed, labelMarkOptions);
    } else {
      var $groups = this.$element().find("." + FORM_GROUP_CLASS);
      var i;
      for (i = 0; i < $groups.length; i++) {
        this._applyLabelsWidth($groups.eq(i), excludeTabbed, void 0, void 0, labelMarkOptions);
      }
    }
  },
  _applyLabelsWidthWithNestedGroups: function($container, colCount, excludeTabbed, labelMarkOptions) {
    var applyLabelsOptions = {
      excludeTabbed
    };
    var colIndex;
    var groupsColIndex;
    var groupColIndex;
    var $groupsByCol;
    for (colIndex = 0; colIndex < colCount; colIndex++) {
      $groupsByCol = this._getGroupElementsInColumn($container, colIndex);
      this._applyLabelsWidthByCol($groupsByCol, 0, applyLabelsOptions, labelMarkOptions);
      for (groupsColIndex = 0; groupsColIndex < this._groupsColCount.length; groupsColIndex++) {
        $groupsByCol = this._getGroupElementsInColumn($container, colIndex, this._groupsColCount[groupsColIndex]);
        var groupColCount = this._getGroupColCount($groupsByCol);
        for (groupColIndex = 1; groupColIndex < groupColCount; groupColIndex++) {
          this._applyLabelsWidthByCol($groupsByCol, groupColIndex, applyLabelsOptions, labelMarkOptions);
        }
      }
    }
  },
  _labelLocation: function() {
    return this.option("labelLocation");
  },
  _alignLabelsInColumn: function(_ref) {
    var {
      layoutManager,
      inOneColumn,
      $container,
      excludeTabbed,
      items
    } = _ref;
    if (!hasWindow() || "top" === this._labelLocation()) {
      return;
    }
    var labelMarkOptions = convertToLabelMarkOptions(layoutManager._getMarkOptions());
    if (inOneColumn) {
      this._applyLabelsWidth($container, excludeTabbed, true, void 0, labelMarkOptions);
    } else if (this._checkGrouping(items)) {
      this._applyLabelsWidthWithGroups($container, layoutManager._getColCount(), excludeTabbed, labelMarkOptions);
    } else {
      this._applyLabelsWidth($container, excludeTabbed, false, layoutManager._getColCount(), labelMarkOptions);
    }
  },
  _prepareFormData: function() {
    if (!isDefined(this.option("formData"))) {
      this.option("formData", {});
    }
  },
  _setStylingModeClass: function() {
    if ("underlined" === this.option("stylingMode")) {
      this.$element().addClass(FORM_UNDERLINED_CLASS);
    }
  },
  _initMarkup: function() {
    validation_engine_default.addGroup(this._getValidationGroup());
    this._clearCachedInstances();
    this._prepareFormData();
    this.$element().addClass(FORM_CLASS);
    this._setStylingModeClass();
    this.callBase();
    this.setAria("role", "form", this.$element());
    if (this.option("scrollingEnabled")) {
      this._renderScrollable();
    }
    this._renderLayout();
    this._renderValidationSummary();
    this._lastMarkupScreenFactor = this._targetScreenFactor || this._getCurrentScreenFactor();
    this._attachResizeObserverSubscription();
  },
  _attachResizeObserverSubscription: function() {
    if (hasWindow()) {
      var formRootElement = this.$element().get(0);
      resize_observer_default.unobserve(formRootElement);
      resize_observer_default.observe(formRootElement, () => {
        this._resizeHandler();
      });
    }
  },
  _resizeHandler: function() {
    if (this._cachedLayoutManagers.length) {
      each(this._cachedLayoutManagers, (_, layoutManager) => {
        var _layoutManager$option;
        null === (_layoutManager$option = layoutManager.option("onLayoutChanged")) || void 0 === _layoutManager$option ? void 0 : _layoutManager$option(layoutManager.isSingleColumnMode());
      });
    }
  },
  _getCurrentScreenFactor: function() {
    return hasWindow() ? getCurrentScreenFactor(this.option("screenByWidth")) : "lg";
  },
  _clearCachedInstances: function() {
    this._itemsRunTimeInfo.clear();
    this._cachedLayoutManagers = [];
  },
  _alignLabels: function(layoutManager, inOneColumn) {
    this._alignLabelsInColumn({
      $container: this.$element(),
      layoutManager,
      excludeTabbed: true,
      items: this.option("items"),
      inOneColumn
    });
    triggerResizeEvent(this.$element().find(".".concat(TOOLBAR_CLASS)));
  },
  _clean: function() {
    this._clearValidationSummary();
    this.callBase();
    this._groupsColCount = [];
    this._cachedColCountOptions = [];
    this._lastMarkupScreenFactor = void 0;
    resize_observer_default.unobserve(this.$element().get(0));
  },
  _renderScrollable: function() {
    var useNativeScrolling = this.option("useNativeScrolling");
    this._scrollable = new ui_scrollable_default(this.$element(), {
      useNative: !!useNativeScrolling,
      useSimulatedScrollbar: !useNativeScrolling,
      useKeyboard: false,
      direction: "both",
      bounceEnabled: false
    });
  },
  _getContent: function() {
    return this.option("scrollingEnabled") ? renderer_default(this._scrollable.content()) : this.$element();
  },
  _clearValidationSummary: function() {
    var _this$_$validationSum;
    null === (_this$_$validationSum = this._$validationSummary) || void 0 === _this$_$validationSum ? void 0 : _this$_$validationSum.remove();
    this._$validationSummary = void 0;
    this._validationSummary = void 0;
  },
  _renderValidationSummary: function() {
    this._clearValidationSummary();
    if (this.option("showValidationSummary")) {
      this._$validationSummary = renderer_default("<div>").addClass(FORM_VALIDATION_SUMMARY).appendTo(this._getContent());
      this._validationSummary = this._$validationSummary.dxValidationSummary({
        validationGroup: this._getValidationGroup()
      }).dxValidationSummary("instance");
    }
  },
  _prepareItems(items, parentIsTabbedItem, currentPath, isTabs) {
    if (items) {
      var result2 = [];
      for (var i = 0; i < items.length; i++) {
        var item = items[i];
        var path = concatPaths(currentPath, createItemPathByIndex(i, isTabs));
        var itemRunTimeInfo = {
          item,
          itemIndex: i,
          path
        };
        var guid2 = this._itemsRunTimeInfo.add(itemRunTimeInfo);
        if (isString(item)) {
          item = {
            dataField: item
          };
        }
        if (isObject(item)) {
          var preparedItem = _extends({}, item);
          itemRunTimeInfo.preparedItem = preparedItem;
          preparedItem.guid = guid2;
          this._tryPrepareGroupItem(preparedItem);
          this._tryPrepareTabbedItem(preparedItem, path);
          this._tryPrepareItemTemplate(preparedItem);
          if (parentIsTabbedItem) {
            preparedItem.cssItemClass = FIELD_ITEM_TAB_CLASS;
          }
          if (preparedItem.items) {
            preparedItem.items = this._prepareItems(preparedItem.items, parentIsTabbedItem, path);
          }
          result2.push(preparedItem);
        } else {
          result2.push(item);
        }
      }
      return result2;
    }
  },
  _tryPrepareGroupItem: function(item) {
    if ("group" === item.itemType) {
      item.alignItemLabels = ensureDefined(item.alignItemLabels, true);
      item._prepareGroupItemTemplate = (itemTemplate) => {
        if (item.template) {
          item.groupContentTemplate = this._getTemplate(itemTemplate);
        }
        item.template = this._itemGroupTemplate.bind(this, item);
      };
      item._prepareGroupItemTemplate(item.template);
    }
  },
  _tryPrepareTabbedItem: function(item, path) {
    if ("tabbed" === item.itemType) {
      item.template = this._itemTabbedTemplate.bind(this, item);
      item.tabs = this._prepareItems(item.tabs, true, path, true);
    }
  },
  _tryPrepareItemTemplate: function(item) {
    if (item.template) {
      item.template = this._getTemplate(item.template);
    }
  },
  _checkGrouping: function(items) {
    if (items) {
      for (var i = 0; i < items.length; i++) {
        var item = items[i];
        if ("group" === item.itemType) {
          return true;
        }
      }
    }
  },
  _renderLayout: function() {
    var that = this;
    var items = that.option("items");
    var $content = that._getContent();
    items = that._prepareItems(items);
    that._rootLayoutManager = that._renderLayoutManager($content, this._createLayoutManagerOptions(items, {
      isRoot: true,
      colCount: that.option("colCount"),
      alignItemLabels: that.option("alignItemLabels"),
      screenByWidth: this.option("screenByWidth"),
      colCountByScreen: this.option("colCountByScreen"),
      onLayoutChanged: function(inOneColumn) {
        that._alignLabels.bind(that)(that._rootLayoutManager, inOneColumn);
      },
      onContentReady: function(e) {
        that._alignLabels(e.component, e.component.isSingleColumnMode());
      }
    }));
  },
  _tryGetItemsForTemplate: function(item) {
    return item.items || [];
  },
  _itemTabbedTemplate: function(item, e, $container) {
    var _item$tabs;
    var $tabPanel = renderer_default("<div>").appendTo($container);
    var tabPanelOptions = extend({}, item.tabPanelOptions, {
      dataSource: item.tabs,
      onItemRendered: (args) => {
        var _item$tabPanelOptions, _item$tabPanelOptions2;
        null === (_item$tabPanelOptions = item.tabPanelOptions) || void 0 === _item$tabPanelOptions ? void 0 : null === (_item$tabPanelOptions2 = _item$tabPanelOptions.onItemRendered) || void 0 === _item$tabPanelOptions2 ? void 0 : _item$tabPanelOptions2.call(_item$tabPanelOptions, args);
        triggerShownEvent(args.itemElement);
      },
      itemTemplate: (itemData, e2, container) => {
        var $container2 = renderer_default(container);
        var alignItemLabels = ensureDefined(itemData.alignItemLabels, true);
        var layoutManager = this._renderLayoutManager($container2, this._createLayoutManagerOptions(this._tryGetItemsForTemplate(itemData), {
          colCount: itemData.colCount,
          alignItemLabels,
          screenByWidth: this.option("screenByWidth"),
          colCountByScreen: itemData.colCountByScreen,
          cssItemClass: itemData.cssItemClass,
          onLayoutChanged: (inOneColumn) => {
            this._alignLabelsInColumn({
              $container: $container2,
              layoutManager,
              items: itemData.items,
              inOneColumn
            });
          }
        }));
        if (this._itemsRunTimeInfo) {
          this._itemsRunTimeInfo.extendRunTimeItemInfoByKey(itemData.guid, {
            layoutManager
          });
        }
        if (alignItemLabels) {
          this._alignLabelsInColumn({
            $container: $container2,
            layoutManager,
            items: itemData.items,
            inOneColumn: layoutManager.isSingleColumnMode()
          });
        }
      }
    });
    var tryUpdateTabPanelInstance = (items, instance) => {
      if (Array.isArray(items)) {
        items.forEach((item2) => this._itemsRunTimeInfo.extendRunTimeItemInfoByKey(item2.guid, {
          widgetInstance: instance
        }));
      }
    };
    var tabPanel = this._createComponent($tabPanel, tab_panel_default, tabPanelOptions);
    renderer_default($container).parent().addClass(FIELD_ITEM_CONTENT_HAS_TABS_CLASS);
    tabPanel.on("optionChanged", (e2) => {
      if ("dataSource" === e2.fullName) {
        tryUpdateTabPanelInstance(e2.value, e2.component);
      }
    });
    tryUpdateTabPanelInstance([{
      guid: item.guid
    }, ...null !== (_item$tabs = item.tabs) && void 0 !== _item$tabs ? _item$tabs : []], tabPanel);
  },
  _itemGroupTemplate: function(item, options2, $container) {
    var id = options2.editorOptions.inputAttr.id;
    var $group = renderer_default("<div>").toggleClass(FORM_GROUP_WITH_CAPTION_CLASS, isDefined(item.caption) && item.caption.length).addClass(FORM_GROUP_CLASS).appendTo($container);
    var groupAria = {
      role: "group",
      labelledby: id
    };
    this.setAria(groupAria, $group);
    renderer_default($container).parent().addClass(FIELD_ITEM_CONTENT_HAS_GROUP_CLASS);
    if (item.caption) {
      renderer_default("<span>").addClass(FORM_GROUP_CAPTION_CLASS).text(item.caption).attr("id", id).appendTo($group);
    }
    var $groupContent = renderer_default("<div>").addClass(FORM_GROUP_CONTENT_CLASS).appendTo($group);
    if (item.groupContentTemplate) {
      item._renderGroupContentTemplate = () => {
        $groupContent.empty();
        var data3 = {
          formData: this.option("formData"),
          component: this
        };
        item.groupContentTemplate.render({
          model: data3,
          container: getPublicElement($groupContent)
        });
      };
      item._renderGroupContentTemplate();
    } else {
      var layoutManager = this._renderLayoutManager($groupContent, this._createLayoutManagerOptions(this._tryGetItemsForTemplate(item), {
        colCount: item.colCount,
        colCountByScreen: item.colCountByScreen,
        alignItemLabels: item.alignItemLabels,
        cssItemClass: item.cssItemClass
      }));
      this._itemsRunTimeInfo && this._itemsRunTimeInfo.extendRunTimeItemInfoByKey(item.guid, {
        layoutManager
      });
      var colCount = layoutManager._getColCount();
      if (!this._groupsColCount.includes(colCount)) {
        this._groupsColCount.push(colCount);
      }
      $group.addClass(GROUP_COL_COUNT_CLASS + colCount);
      $group.attr(GROUP_COL_COUNT_ATTR, colCount);
    }
  },
  _createLayoutManagerOptions: function(items, extendedLayoutManagerOptions) {
    return convertToLayoutManagerOptions({
      form: this,
      formOptions: this.option(),
      $formElement: this.$element(),
      items,
      validationGroup: this._getValidationGroup(),
      extendedLayoutManagerOptions,
      onFieldDataChanged: (args) => {
        if (!this._isDataUpdating) {
          this._triggerOnFieldDataChanged(args);
        }
      },
      onContentReady: (args) => {
        this._itemsRunTimeInfo.addItemsOrExtendFrom(args.component._itemsRunTimeInfo);
        extendedLayoutManagerOptions.onContentReady && extendedLayoutManagerOptions.onContentReady(args);
      },
      onDisposing: (_ref2) => {
        var {
          component
        } = _ref2;
        var nestedItemsRunTimeInfo = component.getItemsRunTimeInfo();
        this._itemsRunTimeInfo.removeItemsByItems(nestedItemsRunTimeInfo);
      },
      onFieldItemRendered: () => {
        var _this$_validationSumm;
        null === (_this$_validationSumm = this._validationSummary) || void 0 === _this$_validationSumm ? void 0 : _this$_validationSumm.refreshValidationGroup();
      }
    });
  },
  _renderLayoutManager: function($parent, layoutManagerOptions) {
    var baseColCountByScreen = {
      lg: layoutManagerOptions.colCount,
      md: layoutManagerOptions.colCount,
      sm: layoutManagerOptions.colCount,
      xs: 1
    };
    this._cachedColCountOptions.push({
      colCountByScreen: extend(baseColCountByScreen, layoutManagerOptions.colCountByScreen)
    });
    var $element = renderer_default("<div>");
    $element.appendTo($parent);
    var instance = this._createComponent($element, "dxLayoutManager", layoutManagerOptions);
    instance.on("autoColCountChanged", () => {
      this._clearAutoColCountChangedTimeout();
      this.autoColCountChangedTimeoutId = setTimeout(() => !this._disposed && this._refresh(), 0);
    });
    this._cachedLayoutManagers.push(instance);
    return instance;
  },
  _getValidationGroup: function() {
    return this.option("validationGroup") || this;
  },
  _createComponent: function($element, type2, config3) {
    config3 = config3 || {};
    this._extendConfig(config3, {
      readOnly: this.option("readOnly")
    });
    return this.callBase($element, type2, config3);
  },
  _attachSyncSubscriptions: function() {
    var that = this;
    that.on("optionChanged", function(args) {
      var optionFullName = args.fullName;
      if ("formData" === optionFullName) {
        if (!isDefined(args.value)) {
          that._options.silent("formData", args.value = {});
        }
        that._triggerOnFieldDataChangedByDataSet(args.value);
      }
      if (that._cachedLayoutManagers.length) {
        each(that._cachedLayoutManagers, function(index2, layoutManager) {
          if ("formData" === optionFullName) {
            that._isDataUpdating = true;
            layoutManager.option("layoutData", args.value);
            that._isDataUpdating = false;
          }
          if ("readOnly" === args.name || "disabled" === args.name) {
            layoutManager.option(optionFullName, args.value);
          }
        });
      }
    });
  },
  _optionChanged: function(args) {
    var splitFullName = args.fullName.split(".");
    if (splitFullName.length > 1 && -1 !== splitFullName[0].search("items") && this._itemsOptionChangedHandler(args)) {
      return;
    }
    if (splitFullName.length > 1 && -1 !== splitFullName[0].search("formData") && this._formDataOptionChangedHandler(args)) {
      return;
    }
    this._defaultOptionChangedHandler(args);
  },
  _defaultOptionChangedHandler: function(args) {
    switch (args.name) {
      case "formData":
        if (!this.option("items")) {
          this._invalidate();
        } else if (isEmptyObject(args.value)) {
          this._clear();
        }
        break;
      case "onFieldDataChanged":
        break;
      case "items":
      case "colCount":
      case "onEditorEnterKey":
      case "labelLocation":
      case "labelMode":
      case "alignItemLabels":
      case "showColonAfterLabel":
      case "customizeItem":
      case "alignItemLabelsInAllGroups":
      case "showRequiredMark":
      case "showOptionalMark":
      case "requiredMark":
      case "optionalMark":
      case "requiredMessage":
      case "scrollingEnabled":
      case "formID":
      case "colCountByScreen":
      case "screenByWidth":
      case "stylingMode":
        this._invalidate();
        break;
      case "showValidationSummary":
        this._renderValidationSummary();
        break;
      case "minColWidth":
        if ("auto" === this.option("colCount")) {
          this._invalidate();
        }
        break;
      case "alignRootItemLabels":
      case "readOnly":
      case "isDirty":
        break;
      case "width":
        this.callBase(args);
        this._rootLayoutManager.option(args.name, args.value);
        this._alignLabels(this._rootLayoutManager, this._rootLayoutManager.isSingleColumnMode());
        break;
      case "validationGroup":
        validation_engine_default.removeGroup(args.previousValue || this);
        this._invalidate();
        break;
      default:
        this.callBase(args);
    }
  },
  _itemsOptionChangedHandler: function(args) {
    var nameParts = args.fullName.split(".");
    var value2 = args.value;
    var itemPath = this._getItemPath(nameParts);
    var item = this.option(itemPath);
    var optionNameWithoutPath = args.fullName.replace(itemPath + ".", "");
    var simpleOptionName = optionNameWithoutPath.split(".")[0].replace(/\[\d+]/, "");
    var itemAction = this._tryCreateItemOptionAction(simpleOptionName, item, item[simpleOptionName], args.previousValue, itemPath);
    var result2 = this._tryExecuteItemOptionAction(itemAction) || this._tryChangeLayoutManagerItemOption(args.fullName, value2);
    if (!result2 && item) {
      this._changeItemOption(item, optionNameWithoutPath, value2);
      var items = this._generateItemsFromData(this.option("items"));
      this.option("items", items);
      result2 = true;
    }
    return result2;
  },
  _formDataOptionChangedHandler: function(args) {
    var nameParts = args.fullName.split(".");
    var value2 = args.value;
    var dataField = nameParts.slice(1).join(".");
    var editor = this.getEditor(dataField);
    if (editor) {
      editor.option("value", value2);
    } else {
      this._triggerOnFieldDataChanged({
        dataField,
        value: value2
      });
    }
    return true;
  },
  _tryCreateItemOptionAction: function(optionName, item, value2, previousValue, itemPath) {
    if ("tabs" === optionName) {
      this._itemsRunTimeInfo.removeItemsByPathStartWith("".concat(itemPath, ".tabs"));
      value2 = this._prepareItems(value2, true, itemPath, true);
    }
    return ui_form_item_options_actions_default(optionName, {
      item,
      value: value2,
      previousValue,
      itemsRunTimeInfo: this._itemsRunTimeInfo
    });
  },
  _tryExecuteItemOptionAction: function(action) {
    return action && action.tryExecute();
  },
  _updateValidationGroupAndSummaryIfNeeded: function(fullName) {
    var optionName = getOptionNameFromFullName(fullName);
    if (ITEM_OPTIONS_FOR_VALIDATION_UPDATING.indexOf(optionName) > -1) {
      validation_engine_default.addGroup(this._getValidationGroup());
      if (this.option("showValidationSummary")) {
        var _this$_validationSumm2;
        null === (_this$_validationSumm2 = this._validationSummary) || void 0 === _this$_validationSumm2 ? void 0 : _this$_validationSumm2.refreshValidationGroup();
      }
    }
  },
  _setLayoutManagerItemOption(layoutManager, optionName, value2, path) {
    if (this._updateLockCount > 0) {
      !layoutManager._updateLockCount && layoutManager.beginUpdate();
      var key = this._itemsRunTimeInfo.findKeyByPath(path);
      this.postponedOperations.add(key, () => {
        !layoutManager._disposed && layoutManager.endUpdate();
        return new Deferred().resolve();
      });
    }
    var contentReadyHandler = (e) => {
      e.component.off("contentReady", contentReadyHandler);
      if (isFullPathContainsTabs(path)) {
        var tabPath = tryGetTabPath(path);
        var tabLayoutManager = this._itemsRunTimeInfo.findGroupOrTabLayoutManagerByPath(tabPath);
        if (tabLayoutManager) {
          this._alignLabelsInColumn({
            items: tabLayoutManager.option("items"),
            layoutManager: tabLayoutManager,
            $container: tabLayoutManager.$element(),
            inOneColumn: tabLayoutManager.isSingleColumnMode()
          });
        }
      } else {
        this._alignLabels(this._rootLayoutManager, this._rootLayoutManager.isSingleColumnMode());
      }
    };
    layoutManager.on("contentReady", contentReadyHandler);
    layoutManager.option(optionName, value2);
    this._updateValidationGroupAndSummaryIfNeeded(optionName);
  },
  _tryChangeLayoutManagerItemOption(fullName, value2) {
    var nameParts = fullName.split(".");
    var optionName = getOptionNameFromFullName(fullName);
    if ("items" === optionName && nameParts.length > 1) {
      var itemPath = this._getItemPath(nameParts);
      var layoutManager = this._itemsRunTimeInfo.findGroupOrTabLayoutManagerByPath(itemPath);
      if (layoutManager) {
        this._itemsRunTimeInfo.removeItemsByItems(layoutManager.getItemsRunTimeInfo());
        var items = this._prepareItems(value2, false, itemPath);
        this._setLayoutManagerItemOption(layoutManager, optionName, items, itemPath);
        return true;
      }
    } else if (nameParts.length > 2) {
      var endPartIndex = nameParts.length - 2;
      var _itemPath = this._getItemPath(nameParts.slice(0, endPartIndex));
      var _layoutManager = this._itemsRunTimeInfo.findGroupOrTabLayoutManagerByPath(_itemPath);
      if (_layoutManager) {
        var fullOptionName = getFullOptionName(nameParts[endPartIndex], optionName);
        if ("editorType" === optionName) {
          if (_layoutManager.option(fullOptionName) !== value2) {
            return false;
          }
        }
        if ("visible" === optionName) {
          var formItems = this.option(getFullOptionName(_itemPath, "items"));
          if (formItems && formItems.length) {
            var layoutManagerItems = _layoutManager.option("items");
            formItems.forEach((item, index2) => {
              var layoutItem = layoutManagerItems[index2];
              layoutItem.visibleIndex = item.visibleIndex;
            });
          }
        }
        this._setLayoutManagerItemOption(_layoutManager, fullOptionName, value2, _itemPath);
        return true;
      }
    }
    return false;
  },
  _tryChangeLayoutManagerItemOptions(itemPath, options2) {
    var result2;
    this.beginUpdate();
    each(options2, (optionName, optionValue) => {
      result2 = this._tryChangeLayoutManagerItemOption(getFullOptionName(itemPath, optionName), optionValue);
      if (!result2) {
        return false;
      }
    });
    this.endUpdate();
    return result2;
  },
  _getItemPath: function(nameParts) {
    var itemPath = nameParts[0];
    var i;
    for (i = 1; i < nameParts.length; i++) {
      if (-1 !== nameParts[i].search(/items\[\d+]|tabs\[\d+]/)) {
        itemPath += "." + nameParts[i];
      } else {
        break;
      }
    }
    return itemPath;
  },
  _triggerOnFieldDataChanged: function(args) {
    this._updateIsDirty(args.dataField);
    this._createActionByOption("onFieldDataChanged")(args);
  },
  _triggerOnFieldDataChangedByDataSet: function(data3) {
    var that = this;
    if (data3 && isObject(data3)) {
      each(data3, function(dataField, value2) {
        that._triggerOnFieldDataChanged({
          dataField,
          value: value2
        });
      });
    }
  },
  _updateFieldValue: function(dataField, value2) {
    if (isDefined(this.option("formData"))) {
      var editor = this.getEditor(dataField);
      this.option("formData." + dataField, value2);
      if (editor) {
        var editorValue = editor.option("value");
        if (editorValue !== value2) {
          editor.option("value", value2);
        }
      }
    }
  },
  _generateItemsFromData: function(items) {
    var formData = this.option("formData");
    var result2 = [];
    if (!items && isDefined(formData)) {
      each(formData, function(dataField) {
        result2.push({
          dataField
        });
      });
    }
    if (items) {
      each(items, function(index2, item) {
        if (isObject(item)) {
          result2.push(item);
        } else {
          result2.push({
            dataField: item
          });
        }
      });
    }
    return result2;
  },
  _getItemByField: function(field, items) {
    var that = this;
    var fieldParts = isObject(field) ? field : that._getFieldParts(field);
    var fieldName = fieldParts.fieldName;
    var fieldPath = fieldParts.fieldPath;
    var resultItem;
    if (items.length) {
      each(items, function(index2, item) {
        var itemType = item.itemType;
        if (fieldPath.length) {
          var path = fieldPath.slice();
          item = that._getItemByFieldPath(path, fieldName, item);
        } else if ("group" === itemType && !(item.caption || item.name) || "tabbed" === itemType && !item.name) {
          var subItemsField = that._getSubItemField(itemType);
          item.items = that._generateItemsFromData(item.items);
          item = that._getItemByField({
            fieldName,
            fieldPath
          }, item[subItemsField]);
        }
        if (isEqualToDataFieldOrNameOrTitleOrCaption(item, fieldName)) {
          resultItem = item;
          return false;
        }
      });
    }
    return resultItem;
  },
  _getFieldParts: function(field) {
    var fieldName = field;
    var separatorIndex = fieldName.indexOf(".");
    var resultPath = [];
    while (-1 !== separatorIndex) {
      resultPath.push(fieldName.substr(0, separatorIndex));
      fieldName = fieldName.substr(separatorIndex + 1);
      separatorIndex = fieldName.indexOf(".");
    }
    return {
      fieldName,
      fieldPath: resultPath.reverse()
    };
  },
  _getItemByFieldPath: function(path, fieldName, item) {
    var itemType = item.itemType;
    var subItemsField = this._getSubItemField(itemType);
    var isItemWithSubItems = "group" === itemType || "tabbed" === itemType || item.title;
    var result2;
    do {
      if (isItemWithSubItems) {
        var name2 = item.name || item.caption || item.title;
        var isGroupWithName = isDefined(name2);
        var nameWithoutSpaces = getTextWithoutSpaces(name2);
        var pathNode = void 0;
        item[subItemsField] = this._generateItemsFromData(item[subItemsField]);
        if (isGroupWithName) {
          pathNode = path.pop();
        }
        if (!path.length) {
          result2 = this._getItemByField(fieldName, item[subItemsField]);
          if (result2) {
            break;
          }
        }
        if (!isGroupWithName || isGroupWithName && nameWithoutSpaces === pathNode) {
          if (path.length) {
            result2 = this._searchItemInEverySubItem(path, fieldName, item[subItemsField]);
          }
        }
      } else {
        break;
      }
    } while (path.length && !isDefined(result2));
    return result2;
  },
  _getSubItemField: function(itemType) {
    return "tabbed" === itemType ? "tabs" : "items";
  },
  _searchItemInEverySubItem: function(path, fieldName, items) {
    var that = this;
    var result2;
    each(items, function(index2, groupItem) {
      result2 = that._getItemByFieldPath(path.slice(), fieldName, groupItem);
      if (result2) {
        return false;
      }
    });
    if (!result2) {
      result2 = false;
    }
    return result2;
  },
  _changeItemOption: function(item, option, value2) {
    if (isObject(item)) {
      item[option] = value2;
    }
  },
  _dimensionChanged: function() {
    var currentScreenFactor = this._getCurrentScreenFactor();
    if (this._lastMarkupScreenFactor !== currentScreenFactor) {
      if (this._isColCountChanged(this._lastMarkupScreenFactor, currentScreenFactor)) {
        this._targetScreenFactor = currentScreenFactor;
        this._refresh();
        this._targetScreenFactor = void 0;
      }
      this._lastMarkupScreenFactor = currentScreenFactor;
    }
  },
  _isColCountChanged: function(oldScreenSize, newScreenSize) {
    var isChanged = false;
    each(this._cachedColCountOptions, function(index2, item) {
      if (item.colCountByScreen[oldScreenSize] !== item.colCountByScreen[newScreenSize]) {
        isChanged = true;
        return false;
      }
    });
    return isChanged;
  },
  _refresh: function() {
    var editorSelector = ".".concat(FOCUSED_STATE_CLASS2, " > :not(.dx-dropdowneditor-input-wrapper) input,") + " .".concat(FOCUSED_STATE_CLASS2, " textarea");
    events_engine_default.trigger(this.$element().find(editorSelector), "change");
    this.callBase();
  },
  _updateIsDirty: function(dataField) {
    var editor = this.getEditor(dataField);
    if (!editor) {
      return;
    }
    if (editor.option("isDirty")) {
      this._dirtyFields.add(dataField);
    } else {
      this._dirtyFields.delete(dataField);
    }
    this.option("isDirty", !!this._dirtyFields.size);
  },
  updateRunTimeInfoForEachEditor: function(editorAction) {
    this._itemsRunTimeInfo.each(function(_, itemRunTimeInfo) {
      var widgetInstance = itemRunTimeInfo.widgetInstance;
      if (isDefined(widgetInstance) && editor_default.isEditor(widgetInstance)) {
        editorAction(widgetInstance);
      }
    });
  },
  _clear: function() {
    this.updateRunTimeInfoForEachEditor((editor) => {
      editor.clear();
      editor.option("isValid", true);
    });
    validation_engine_default.resetGroup(this._getValidationGroup());
  },
  _updateData: function(data3, value2, isComplexData) {
    var that = this;
    var _data = isComplexData ? value2 : data3;
    if (isObject(_data)) {
      each(_data, function(dataField, fieldValue) {
        that._updateData(isComplexData ? data3 + "." + dataField : dataField, fieldValue, isObject(fieldValue));
      });
    } else if (isString(data3)) {
      that._updateFieldValue(data3, value2);
    }
  },
  registerKeyHandler: function(key, handler) {
    this.callBase(key, handler);
    this._itemsRunTimeInfo.each(function(_, itemRunTimeInfo) {
      if (isDefined(itemRunTimeInfo.widgetInstance)) {
        itemRunTimeInfo.widgetInstance.registerKeyHandler(key, handler);
      }
    });
  },
  _focusTarget: function() {
    return this.$element().find("." + FIELD_ITEM_CONTENT_CLASS + " [tabindex]").first();
  },
  _visibilityChanged: function() {
    this._alignLabels(this._rootLayoutManager, this._rootLayoutManager.isSingleColumnMode());
  },
  _clearAutoColCountChangedTimeout: function() {
    if (this.autoColCountChangedTimeoutId) {
      clearTimeout(this.autoColCountChangedTimeoutId);
      this.autoColCountChangedTimeoutId = void 0;
    }
  },
  _dispose: function() {
    this._clearAutoColCountChangedTimeout();
    validation_engine_default.removeGroup(this._getValidationGroup());
    this.callBase();
  },
  clear: function() {
    this._clear();
  },
  resetValues: function() {
    this._clear();
  },
  reset: function(editorsData) {
    this.updateRunTimeInfoForEachEditor((editor) => {
      var editorName = editor.option("name");
      if (editorsData && editorName in editorsData) {
        editor.reset(editorsData[editorName]);
      } else {
        editor.reset();
      }
    });
    this._renderValidationSummary();
  },
  updateData: function(data3, value2) {
    this._updateData(data3, value2);
  },
  getEditor: function(dataField) {
    return this._itemsRunTimeInfo.findWidgetInstanceByDataField(dataField) || this._itemsRunTimeInfo.findWidgetInstanceByName(dataField);
  },
  getButton: function(name2) {
    return this._itemsRunTimeInfo.findWidgetInstanceByName(name2);
  },
  updateDimensions: function() {
    var that = this;
    var deferred = new Deferred();
    if (that._scrollable) {
      that._scrollable.update().done(function() {
        deferred.resolveWith(that);
      });
    } else {
      deferred.resolveWith(that);
    }
    return deferred.promise();
  },
  itemOption: function(id, option, value2) {
    var items = this._generateItemsFromData(this.option("items"));
    var item = this._getItemByField(id, items);
    var path = getItemPath(items, item);
    if (!item) {
      return;
    }
    switch (arguments.length) {
      case 1:
        return item;
      case 3:
        var itemAction = this._tryCreateItemOptionAction(option, item, value2, item[option], path);
        this._changeItemOption(item, option, value2);
        var fullName = getFullOptionName(path, option);
        if (!this._tryExecuteItemOptionAction(itemAction) && !this._tryChangeLayoutManagerItemOption(fullName, value2)) {
          this.option("items", items);
        }
        break;
      default:
        if (isObject(option)) {
          if (!this._tryChangeLayoutManagerItemOptions(path, option)) {
            var allowUpdateItems;
            each(option, (optionName, optionValue) => {
              var itemAction2 = this._tryCreateItemOptionAction(optionName, item, optionValue, item[optionName], path);
              this._changeItemOption(item, optionName, optionValue);
              if (!allowUpdateItems && !this._tryExecuteItemOptionAction(itemAction2)) {
                allowUpdateItems = true;
              }
            });
            allowUpdateItems && this.option("items", items);
          }
        }
    }
  },
  validate: function() {
    return validation_engine_default.validateGroup(this._getValidationGroup());
  },
  getItemID: function(name2) {
    return "dx_" + this.option("formID") + "_" + (name2 || new guid_default());
  },
  getTargetScreenFactor: function() {
    return this._targetScreenFactor;
  }
});
component_registrator_default("dxForm", Form);
var ui_form_default = Form;

// node_modules/devextreme/esm/ui/form.js
var form_default = ui_form_default;

// node_modules/devextreme/esm/__internal/grids/grid_core/editing/m_editing_form_based.js
var editingControllerExtender2 = (Base) => class extends Base {
  init() {
    this._editForm = null;
    this._updateEditFormDeferred = null;
    super.init();
  }
  isFormOrPopupEditMode() {
    return this.isPopupEditMode() || this.isFormEditMode();
  }
  isPopupEditMode() {
    var editMode = this.option("editing.mode");
    return editMode === EDIT_MODE_POPUP;
  }
  isFormEditMode() {
    var editMode = this.option("editing.mode");
    return editMode === EDIT_MODE_FORM;
  }
  getFirstEditableColumnIndex() {
    var firstFormItem = this._firstFormItem;
    if (this.isFormEditMode() && firstFormItem) {
      var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);
      var editRowIndex = this._dataController.getRowIndexByKey(editRowKey);
      var $editFormElements = this._rowsView.getCellElements(editRowIndex);
      return this._rowsView._getEditFormEditorVisibleIndex($editFormElements, firstFormItem.column);
    }
    return super.getFirstEditableColumnIndex();
  }
  getEditFormRowIndex() {
    return this.isFormOrPopupEditMode() ? this._getVisibleEditRowIndex() : super.getEditFormRowIndex();
  }
  _isEditColumnVisible() {
    var result2 = super._isEditColumnVisible();
    var editingOptions = this.option("editing");
    return this.isFormOrPopupEditMode() ? editingOptions.allowUpdating || result2 : result2;
  }
  _handleDataChanged(args) {
    var _a2, _b2;
    if (this.isPopupEditMode()) {
      var editRowKey = this.option("editing.editRowKey");
      var hasEditRow = null === (_a2 = null === args || void 0 === args ? void 0 : args.items) || void 0 === _a2 ? void 0 : _a2.some((item) => equalByValue(item.key, editRowKey));
      var onlyInsertChanges = (null === (_b2 = args.changeTypes) || void 0 === _b2 ? void 0 : _b2.length) && args.changeTypes.every((item) => "insert" === item);
      if (("refresh" === args.changeType || hasEditRow && args.isOptionChanged) && !onlyInsertChanges) {
        this._repaintEditPopup();
      }
    }
    super._handleDataChanged(args);
  }
  getPopupContent() {
    var _a2;
    var popupVisible = null === (_a2 = this._editPopup) || void 0 === _a2 ? void 0 : _a2.option("visible");
    if (this.isPopupEditMode() && popupVisible) {
      return this._$popupContent;
    }
  }
  _showAddedRow(rowIndex) {
    if (this.isPopupEditMode()) {
      this._showEditPopup(rowIndex);
    } else {
      super._showAddedRow(rowIndex);
    }
  }
  _cancelEditDataCore() {
    super._cancelEditDataCore();
    if (this.isPopupEditMode()) {
      this._hideEditPopup();
    }
  }
  _updateEditRowCore(row, skipCurrentRow, isCustomSetCellValue) {
    var _a2;
    var editForm = this._editForm;
    if (this.isPopupEditMode()) {
      if (this.option("repaintChangesOnly")) {
        null === (_a2 = row.update) || void 0 === _a2 ? void 0 : _a2.call(row, row);
        this._rowsView.renderDelayedTemplates();
      } else if (editForm) {
        this._updateEditFormDeferred = new Deferred().done(() => editForm.repaint());
        if (!this._updateLockCount) {
          this._updateEditFormDeferred.resolve();
        }
      }
    } else {
      super._updateEditRowCore(row, skipCurrentRow, isCustomSetCellValue);
    }
  }
  _showEditPopup(rowIndex, repaintForm) {
    var isMobileDevice = "desktop" !== devices_default.current().deviceType;
    var editPopupClass = this.addWidgetPrefix(EDIT_POPUP_CLASS);
    var popupOptions = extend({
      showTitle: false,
      fullScreen: isMobileDevice,
      wrapperAttr: {
        class: editPopupClass
      },
      toolbarItems: [{
        toolbar: "bottom",
        location: "after",
        widget: "dxButton",
        options: this._getSaveButtonConfig()
      }, {
        toolbar: "bottom",
        location: "after",
        widget: "dxButton",
        options: this._getCancelButtonConfig()
      }],
      contentTemplate: this._getPopupEditFormTemplate(rowIndex)
    }, this.option(EDITING_POPUP_OPTION_NAME));
    if (!this._editPopup) {
      var $popupContainer = renderer_default("<div>").appendTo(this.component.$element()).addClass(editPopupClass);
      this._editPopup = this._createComponent($popupContainer, ui_popup_default);
      this._editPopup.on("hiding", this._getEditPopupHiddenHandler());
      this._editPopup.on("shown", (e) => {
        var _a2;
        events_engine_default.trigger(e.component.$content().find(FOCUSABLE_ELEMENT_SELECTOR).not(".".concat(FOCUSABLE_ELEMENT_CLASS)).first(), "focus");
        if (repaintForm) {
          null === (_a2 = this._editForm) || void 0 === _a2 ? void 0 : _a2.repaint();
        }
      });
    }
    this._editPopup.option(popupOptions);
    this._editPopup.show();
    super._showEditPopup(rowIndex, repaintForm);
  }
  _getPopupEditFormTemplate(rowIndex) {
    var row = this.component.getVisibleRows()[rowIndex];
    var templateOptions = {
      row,
      values: row.values,
      rowType: row.rowType,
      key: row.key,
      rowIndex
    };
    this._rowsView._addWatchMethod(templateOptions, row);
    return (container) => {
      var formTemplate = this.getEditFormTemplate();
      var scrollable = this._createComponent(renderer_default("<div>").appendTo(container), ui_scrollable_default);
      this._$popupContent = renderer_default(scrollable.content());
      formTemplate(this._$popupContent, templateOptions, {
        isPopupForm: true
      });
      this._rowsView.renderDelayedTemplates();
      renderer_default(container).parent().attr("aria-label", this.localize("dxDataGrid-ariaEditForm"));
    };
  }
  _repaintEditPopup() {
    var _a2, _b2;
    var rowIndex = this._getVisibleEditRowIndex();
    if (rowIndex >= 0) {
      var defaultAnimation = null === (_a2 = this._editPopup) || void 0 === _a2 ? void 0 : _a2.option("animation");
      null === (_b2 = this._editPopup) || void 0 === _b2 ? void 0 : _b2.option("animation", null);
      this._showEditPopup(rowIndex, true);
      if (void 0 !== defaultAnimation) {
        this._editPopup.option("animation", defaultAnimation);
      }
    }
  }
  _hideEditPopup() {
    var _a2;
    null === (_a2 = this._editPopup) || void 0 === _a2 ? void 0 : _a2.option("visible", false);
  }
  optionChanged(args) {
    if ("editing" === args.name && this.isFormOrPopupEditMode()) {
      var {
        fullName
      } = args;
      if (0 === fullName.indexOf(EDITING_FORM_OPTION_NAME)) {
        this._handleFormOptionChange(args);
        args.handled = true;
      } else if (0 === fullName.indexOf(EDITING_POPUP_OPTION_NAME)) {
        this._handlePopupOptionChange(args);
        args.handled = true;
      }
    }
    super.optionChanged(args);
  }
  _handleFormOptionChange(args) {
    var _a2;
    if (this.isFormEditMode()) {
      var editRowIndex = this._getVisibleEditRowIndex();
      if (editRowIndex >= 0) {
        this._dataController.updateItems({
          changeType: "update",
          rowIndices: [editRowIndex]
        });
      }
    } else if ((null === (_a2 = this._editPopup) || void 0 === _a2 ? void 0 : _a2.option("visible")) && 0 === args.fullName.indexOf(EDITING_FORM_OPTION_NAME)) {
      this._repaintEditPopup();
    }
  }
  _handlePopupOptionChange(args) {
    var editPopup = this._editPopup;
    if (editPopup) {
      var popupOptionName = args.fullName.slice(EDITING_POPUP_OPTION_NAME.length + 1);
      if (popupOptionName) {
        editPopup.option(popupOptionName, args.value);
      } else {
        editPopup.option(args.value);
      }
    }
  }
  renderFormEditorTemplate(detailCellOptions, item, formTemplateOptions, container, isReadOnly) {
    var that = this;
    var $container = renderer_default(container);
    var {
      column
    } = item;
    var editorType = getEditorType(item);
    var rowData = null === detailCellOptions || void 0 === detailCellOptions ? void 0 : detailCellOptions.row.data;
    var form = formTemplateOptions.component;
    var {
      label,
      labelMark,
      labelMode
    } = formTemplateOptions.editorOptions || {};
    var cellOptions = extend({}, detailCellOptions, {
      data: rowData,
      cellElement: null,
      isOnForm: true,
      item,
      id: form.getItemID(item.name || item.dataField),
      column: extend({}, column, {
        editorType,
        editorOptions: extend({
          label,
          labelMark,
          labelMode
        }, column.editorOptions, item.editorOptions)
      }),
      columnIndex: column.index,
      setValue: !isReadOnly && column.allowEditing && function(value2, text) {
        that.updateFieldValue(cellOptions, value2, text);
      }
    });
    cellOptions.value = column.calculateCellValue(rowData);
    var template = this._getFormEditItemTemplate.bind(this)(cellOptions, column);
    this._rowsView.renderTemplate($container, template, cellOptions, !!isElementInDom($container)).done(() => {
      this._rowsView._updateCell($container, cellOptions);
    });
    return cellOptions;
  }
  getFormEditorTemplate(cellOptions, item) {
    var column = this.component.columnOption(item.name || item.dataField);
    return (options2, container) => {
      var $container = renderer_default(container);
      var {
        row
      } = cellOptions;
      if (null === row || void 0 === row ? void 0 : row.watch) {
        var dispose = row.watch(() => column.selector(row.data), () => {
          var $editorElement = $container.find(".dx-widget").first();
          var validator = $editorElement.data("dxValidator");
          var validatorOptions = null === validator || void 0 === validator ? void 0 : validator.option();
          $container.contents().remove();
          cellOptions = this.renderFormEditorTemplate.bind(this)(cellOptions, item, options2, $container);
          $editorElement = $container.find(".dx-widget").first();
          validator = $editorElement.data("dxValidator");
          if (validatorOptions && !validator) {
            $editorElement.dxValidator({
              validationRules: validatorOptions.validationRules,
              validationGroup: validatorOptions.validationGroup,
              dataGetter: validatorOptions.dataGetter
            });
          }
        });
        events_engine_default.on($container, removeEvent, dispose);
      }
      cellOptions = this.renderFormEditorTemplate.bind(this)(cellOptions, item, options2, $container);
    };
  }
  getEditFormOptions(detailOptions) {
    var _b2;
    var editFormOptions = null === (_b2 = this._getValidationGroupsInForm) || void 0 === _b2 ? void 0 : _b2.call(this, detailOptions);
    var userCustomizeItem = this.option("editing.form.customizeItem");
    var editFormItemClass = this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS);
    var items = this.option("editing.form.items");
    var isCustomEditorType = {};
    if (!items) {
      var columns2 = this.getController("columns").getColumns();
      items = [];
      each(columns2, (_, column) => {
        if (!column.isBand && !column.type) {
          items.push({
            column,
            name: column.name,
            dataField: column.dataField
          });
        }
      });
    } else {
      forEachFormItems(items, (item) => {
        var itemId = (null === item || void 0 === item ? void 0 : item.name) || (null === item || void 0 === item ? void 0 : item.dataField);
        if (itemId) {
          isCustomEditorType[itemId] = !!item.editorType;
        }
      });
    }
    return extend({}, editFormOptions, {
      items,
      formID: "dx-".concat(new guid_default()),
      customizeItem: (item) => {
        var column;
        var itemId = item.name || item.dataField;
        if (item.column || itemId) {
          column = item.column || this._columnsController.columnOption(item.name ? "name:".concat(item.name) : "dataField:".concat(item.dataField));
        }
        if (column) {
          item.label = item.label || {};
          item.label.text = item.label.text || column.caption;
          if ("boolean" === column.dataType && void 0 === item.label.visible) {
            var labelMode = this.option("editing.form.labelMode");
            if ("floating" === labelMode || "static" === labelMode) {
              item.label.visible = true;
            }
          }
          item.template = item.template || this.getFormEditorTemplate(detailOptions, item);
          item.column = column;
          item.isCustomEditorType = isCustomEditorType[itemId];
          if (column.formItem) {
            extend(item, column.formItem);
          }
          if (void 0 === item.isRequired && column.validationRules) {
            item.isRequired = column.validationRules.some((rule) => "required" === rule.type);
            item.validationRules = [];
          }
          var itemVisible = isDefined(item.visible) ? item.visible : true;
          if (!this._firstFormItem && itemVisible) {
            this._firstFormItem = item;
          }
        }
        null === userCustomizeItem || void 0 === userCustomizeItem ? void 0 : userCustomizeItem.call(this, item);
        item.cssClass = isString(item.cssClass) ? "".concat(item.cssClass, " ").concat(editFormItemClass) : editFormItemClass;
      }
    });
  }
  getEditFormTemplate() {
    return ($container, detailOptions, options2) => {
      var editFormOptions = this.option(EDITING_FORM_OPTION_NAME);
      var baseEditFormOptions = this.getEditFormOptions(detailOptions);
      var $formContainer = renderer_default("<div>").appendTo($container);
      var isPopupForm = null === options2 || void 0 === options2 ? void 0 : options2.isPopupForm;
      this._firstFormItem = void 0;
      if (isPopupForm) {
        $formContainer.addClass(this.addWidgetPrefix(EDIT_POPUP_FORM_CLASS));
      }
      this._editForm = this._createComponent($formContainer, form_default, extend({}, editFormOptions, baseEditFormOptions));
      if (!isPopupForm) {
        var $buttonsContainer = renderer_default("<div>").addClass(this.addWidgetPrefix(FORM_BUTTONS_CONTAINER_CLASS)).appendTo($container);
        this._createComponent(renderer_default("<div>").appendTo($buttonsContainer), button_default, this._getSaveButtonConfig());
        this._createComponent(renderer_default("<div>").appendTo($buttonsContainer), button_default, this._getCancelButtonConfig());
      }
      this._editForm.on("contentReady", () => {
        var _a2;
        this._rowsView.renderDelayedTemplates();
        null === (_a2 = this._editPopup) || void 0 === _a2 ? void 0 : _a2.repaint();
      });
    };
  }
  getEditForm() {
    return this._editForm;
  }
  _endUpdateCore() {
    var _a2;
    null === (_a2 = this._updateEditFormDeferred) || void 0 === _a2 ? void 0 : _a2.resolve();
  }
  _beforeEndSaving(changes) {
    var _a2;
    super._beforeEndSaving(changes);
    if (this.isPopupEditMode()) {
      null === (_a2 = this._editPopup) || void 0 === _a2 ? void 0 : _a2.hide();
    }
  }
  _processDataItemCore(item, change, key, columns2, generateDataValues) {
    var {
      type: type2
    } = change;
    if (this.isPopupEditMode() && type2 === DATA_EDIT_DATA_INSERT_TYPE) {
      item.visible = false;
    }
    super._processDataItemCore(item, change, key, columns2, generateDataValues);
  }
  _editRowFromOptionChangedCore(rowIndices, rowIndex) {
    var isPopupEditMode = this.isPopupEditMode();
    super._editRowFromOptionChangedCore(rowIndices, rowIndex, isPopupEditMode);
    if (isPopupEditMode) {
      this._showEditPopup(rowIndex);
    }
  }
};
var editingFormBasedModule = {
  extenders: {
    controllers: {
      editing: editingControllerExtender2,
      data: {
        _updateEditItem(item) {
          if (this._editingController.isFormEditMode()) {
            item.rowType = "detail";
          }
        },
        _getChangedColumnIndices(oldItem, newItem, visibleRowIndex, isLiveUpdate) {
          if (false === isLiveUpdate && newItem.isEditing && this._editingController.isFormEditMode()) {
            return;
          }
          return this.callBase.apply(this, arguments);
        }
      }
    },
    views: {
      rowsView: {
        _renderCellContent($cell, options2) {
          if ("data" === options2.rowType && this._editingController.isPopupEditMode() && false === options2.row.visible) {
            return;
          }
          this.callBase.apply(this, arguments);
        },
        getCellElements(rowIndex) {
          var $cellElements = this.callBase(rowIndex);
          var editingController = this._editingController;
          var editForm = editingController.getEditForm();
          var editFormRowIndex = editingController.getEditFormRowIndex();
          if (editFormRowIndex === rowIndex && $cellElements && editForm) {
            return editForm.$element().find(".".concat(this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS), ", .").concat(BUTTON_CLASS));
          }
          return $cellElements;
        },
        _getVisibleColumnIndex($cells, rowIndex, columnIdentifier) {
          var editFormRowIndex = this._editingController.getEditFormRowIndex();
          if (editFormRowIndex === rowIndex && isString(columnIdentifier)) {
            var column = this._columnsController.columnOption(columnIdentifier);
            return this._getEditFormEditorVisibleIndex($cells, column);
          }
          return this.callBase.apply(this, arguments);
        },
        _getEditFormEditorVisibleIndex($cells, column) {
          var visibleIndex = -1;
          each($cells, (index2, cellElement) => {
            var item = renderer_default(cellElement).find(".dx-field-item-content").data("dx-form-item");
            if ((null === item || void 0 === item ? void 0 : item.column) && column && item.column.index === column.index) {
              visibleIndex = index2;
              return false;
            }
          });
          return visibleIndex;
        },
        _isFormItem(parameters) {
          var isDetailRow2 = "detail" === parameters.rowType || "detailAdaptive" === parameters.rowType;
          var isPopupEditing = "data" === parameters.rowType && this._editingController.isPopupEditMode();
          return (isDetailRow2 || isPopupEditing) && parameters.item;
        },
        _updateCell($cell, parameters) {
          if (this._isFormItem(parameters)) {
            this._formItemPrepared(parameters, $cell);
          } else {
            this.callBase($cell, parameters);
          }
        },
        _updateContent() {
          var editingController = this._editingController;
          var oldEditForm = editingController.getEditForm();
          var validationGroup = null === oldEditForm || void 0 === oldEditForm ? void 0 : oldEditForm.option("validationGroup");
          var deferred = this.callBase.apply(this, arguments);
          return deferred.done(() => {
            var newEditForm = editingController.getEditForm();
            if (validationGroup && newEditForm && newEditForm !== oldEditForm) {
              newEditForm.option("validationGroup", validationGroup);
            }
          });
        }
      }
    }
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/editing_form_based.js
m_core_default.registerModule("editingFormBased", editingFormBasedModule);

// node_modules/devextreme/esm/__internal/grids/grid_core/editing/m_editing_cell_based.js
var editingControllerExtender3 = (Base) => class extends Base {
  init() {
    var needCreateHandlers = !this._saveEditorHandler;
    super.init();
    if (needCreateHandlers) {
      var $pointerDownTarget;
      var isResizing;
      this._pointerUpEditorHandler = () => {
        var _a2;
        isResizing = null === (_a2 = this.getController("columnsResizer")) || void 0 === _a2 ? void 0 : _a2.isResizing();
      };
      this._pointerDownEditorHandler = (e) => $pointerDownTarget = renderer_default(e.target);
      this._saveEditorHandler = this.createAction(function(e) {
        var {
          event
        } = e;
        var $target = renderer_default(event.target);
        var targetComponent = event[TARGET_COMPONENT_NAME];
        var {
          component
        } = this;
        if (isEditable($pointerDownTarget) && !$pointerDownTarget.is($target)) {
          return;
        }
        function checkEditorPopup($element) {
          if (!$element) {
            return false;
          }
          var $dropDownEditorOverlay = $element.closest(".".concat(DROPDOWN_EDITOR_OVERLAY_CLASS));
          var $componentElement = component.$element();
          return $dropDownEditorOverlay.length > 0 && 0 === $componentElement.closest($dropDownEditorOverlay).length;
        }
        if (this.isCellOrBatchEditMode() && !this._editCellInProgress) {
          var isEditorPopup = checkEditorPopup($target) || checkEditorPopup(null === targetComponent || void 0 === targetComponent ? void 0 : targetComponent.$element());
          var isAnotherComponent = targetComponent && !targetComponent._disposed && targetComponent !== this.component;
          var isAddRowButton = !!$target.closest(".".concat(this.addWidgetPrefix(ADD_ROW_BUTTON_CLASS))).length;
          var isFocusOverlay = $target.hasClass(this.addWidgetPrefix(FOCUS_OVERLAY_CLASS2));
          var isCellEditMode = this.isCellEditMode();
          if (!isResizing && !isEditorPopup && !isFocusOverlay && !(isAddRowButton && isCellEditMode && this.isEditing()) && (isElementInDom($target) || isAnotherComponent)) {
            this._closeEditItem.bind(this)($target);
          }
        }
      });
      events_engine_default.on(dom_adapter_default.getDocument(), pointer_default.up, this._pointerUpEditorHandler);
      events_engine_default.on(dom_adapter_default.getDocument(), pointer_default.down, this._pointerDownEditorHandler);
      events_engine_default.on(dom_adapter_default.getDocument(), CLICK_EVENT_NAME, this._saveEditorHandler);
    }
  }
  isCellEditMode() {
    return this.option("editing.mode") === EDIT_MODE_CELL;
  }
  isBatchEditMode() {
    return this.option("editing.mode") === EDIT_MODE_BATCH;
  }
  isCellOrBatchEditMode() {
    return this.isCellEditMode() || this.isBatchEditMode();
  }
  _needToCloseEditableCell($targetElement) {
    var _a2;
    var $element = this.component.$element();
    var result2 = this.isEditing();
    var isCurrentComponentElement = !$element || !!$targetElement.closest($element).length;
    if (isCurrentComponentElement) {
      var isDataRow2 = $targetElement.closest(".".concat(DATA_ROW_CLASS3)).length;
      if (isDataRow2) {
        var rowsView3 = this.getView("rowsView");
        var $targetCell = $targetElement.closest(".".concat(ROW_CLASS4, "> td"));
        var rowIndex = rowsView3.getRowIndex($targetCell.parent());
        var cellElements = rowsView3.getCellElements(rowIndex);
        if (null === cellElements || void 0 === cellElements ? void 0 : cellElements.length) {
          var columnIndex = cellElements.index($targetCell);
          var visibleColumns = this._columnsController.getVisibleColumns();
          var allowEditing = null === (_a2 = visibleColumns[columnIndex]) || void 0 === _a2 ? void 0 : _a2.allowEditing;
          var isEditingCell2 = this.isEditCell(rowIndex, columnIndex);
          result2 = result2 && !allowEditing && !isEditingCell2;
        }
      }
    }
    return result2 || super._needToCloseEditableCell($targetElement);
  }
  _closeEditItem($targetElement) {
    if (this._needToCloseEditableCell($targetElement)) {
      this.closeEditCell();
    }
  }
  _focusEditorIfNeed() {
    var _a2;
    if (this._needFocusEditor && this.isCellOrBatchEditMode()) {
      var editColumnIndex = this._getVisibleEditColumnIndex();
      var $cell = null === (_a2 = this._rowsView) || void 0 === _a2 ? void 0 : _a2._getCellElement(this._getVisibleEditRowIndex(), editColumnIndex);
      if ($cell && !$cell.find(":focus").length) {
        this._focusEditingCell(() => {
          this._editCellInProgress = false;
        }, $cell, true);
      } else {
        this._editCellInProgress = false;
      }
      this._needFocusEditor = false;
    } else {
      super._focusEditorIfNeed();
    }
  }
  isEditing() {
    if (this.isCellOrBatchEditMode()) {
      var isEditRowKeyDefined = isDefined(this.option(EDITING_EDITROWKEY_OPTION_NAME));
      var isEditColumnNameDefined = isDefined(this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME));
      return isEditRowKeyDefined && isEditColumnNameDefined;
    }
    return super.isEditing();
  }
  _handleEditColumnNameChange(args) {
    var oldRowIndex = this._getVisibleEditRowIndex(args.previousValue);
    if (this.isCellOrBatchEditMode() && -1 !== oldRowIndex && isDefined(args.value) && args.value !== args.previousValue) {
      var columnIndex = this._columnsController.getVisibleColumnIndex(args.value);
      var oldColumnIndex = this._columnsController.getVisibleColumnIndex(args.previousValue);
      this._editCellFromOptionChanged(columnIndex, oldColumnIndex, oldRowIndex);
    }
  }
  _addRow(parentKey) {
    if (this.isCellEditMode() && this.hasChanges()) {
      var deferred = new Deferred();
      this.saveEditData().done(() => {
        if (!this.hasChanges()) {
          this.addRow(parentKey).done(deferred.resolve).fail(deferred.reject);
        } else {
          deferred.reject("cancel");
        }
      });
      return deferred.promise();
    }
    return super._addRow(parentKey);
  }
  editCell(rowIndex, columnIndex) {
    return this._editCell({
      rowIndex,
      columnIndex
    });
  }
  _editCell(options2) {
    var d = new Deferred();
    var coreResult;
    this.executeOperation(d, () => {
      coreResult = this._editCellCore(options2);
      when(coreResult).done(d.resolve).fail(d.reject);
    });
    return void 0 !== coreResult ? coreResult : d.promise();
  }
  _editCellCore(options2) {
    var dataController2 = this._dataController;
    var isEditByOptionChanged = isDefined(options2.oldColumnIndex) || isDefined(options2.oldRowIndex);
    var {
      columnIndex,
      rowIndex,
      column,
      item
    } = this._getNormalizedEditCellOptions(options2);
    var params = {
      data: null === item || void 0 === item ? void 0 : item.data,
      cancel: false,
      column
    };
    if (void 0 === item.key) {
      this._dataController.fireError("E1043");
      return;
    }
    if (column && ("data" === item.rowType || "detailAdaptive" === item.rowType) && !item.removed && this.isCellOrBatchEditMode()) {
      if (!isEditByOptionChanged && this.isEditCell(rowIndex, columnIndex)) {
        return true;
      }
      var editRowIndex = rowIndex + dataController2.getRowIndexOffset();
      return when(this._beforeEditCell(rowIndex, columnIndex, item)).done((cancel2) => {
        if (cancel2) {
          return;
        }
        if (!this._prepareEditCell(params, item, columnIndex, editRowIndex)) {
          this._processCanceledEditingCell();
        }
      });
    }
    return false;
  }
  _beforeEditCell(rowIndex, columnIndex, item) {
    if (this.isCellEditMode() && !item.isNewRow && this.hasChanges()) {
      var isSaving = new Deferred();
      this.saveEditData().always(() => {
        isSaving.resolve(this.hasChanges());
      });
      this.addDeferred(isSaving);
      return isSaving;
    }
    return false;
  }
  publicMethods() {
    var publicMethods = super.publicMethods();
    return publicMethods.concat(["editCell", "closeEditCell"]);
  }
  _getNormalizedEditCellOptions(_ref) {
    var {
      oldColumnIndex,
      oldRowIndex,
      columnIndex,
      rowIndex
    } = _ref;
    var columnsController = this._columnsController;
    var visibleColumns = columnsController.getVisibleColumns();
    var items = this._dataController.items();
    var item = items[rowIndex];
    var oldColumn;
    if (isDefined(oldColumnIndex)) {
      oldColumn = visibleColumns[oldColumnIndex];
    } else {
      oldColumn = this._getEditColumn();
    }
    if (!isDefined(oldRowIndex)) {
      oldRowIndex = this._getVisibleEditRowIndex();
    }
    if (isString(columnIndex)) {
      columnIndex = columnsController.columnOption(columnIndex, "index");
      columnIndex = columnsController.getVisibleIndex(columnIndex);
    }
    var column = visibleColumns[columnIndex];
    return {
      oldColumn,
      columnIndex,
      oldRowIndex,
      rowIndex,
      column,
      item
    };
  }
  _prepareEditCell(params, item, editColumnIndex, editRowIndex) {
    var _a2;
    if (!item.isNewRow) {
      params.key = item.key;
    }
    if (this._isEditingStart(params)) {
      return false;
    }
    this._pageIndex = this._dataController.pageIndex();
    this._setEditRowKey(item.key);
    this._setEditColumnNameByIndex(editColumnIndex);
    if (!params.column.showEditorAlways) {
      this._addInternalData({
        key: item.key,
        oldData: null !== (_a2 = item.oldData) && void 0 !== _a2 ? _a2 : item.data
      });
    }
    return true;
  }
  closeEditCell(isError, withoutSaveEditData) {
    var result2 = when();
    var oldEditRowIndex = this._getVisibleEditRowIndex();
    if (this.isCellOrBatchEditMode()) {
      var deferred = new Deferred();
      result2 = new Deferred();
      this.executeOperation(deferred, () => {
        this._closeEditCellCore(isError, oldEditRowIndex, withoutSaveEditData).always(result2.resolve);
      });
    }
    return result2.promise();
  }
  _closeEditCellCore(isError, oldEditRowIndex, withoutSaveEditData) {
    var dataController2 = this._dataController;
    var deferred = new Deferred();
    var promise = deferred.promise();
    if (this.isCellEditMode() && this.hasChanges()) {
      if (!withoutSaveEditData) {
        this.saveEditData().done((error) => {
          if (!this.hasChanges()) {
            this.closeEditCell(!!error).always(deferred.resolve);
            return;
          }
          deferred.resolve();
        });
        return promise;
      }
    } else {
      this._resetEditRowKey();
      this._resetEditColumnName();
      if (oldEditRowIndex >= 0) {
        var rowIndices = [oldEditRowIndex];
        this._beforeCloseEditCellInBatchMode(rowIndices);
        if (!isError) {
          dataController2.updateItems({
            changeType: "update",
            rowIndices
          });
        }
      }
    }
    deferred.resolve();
    return promise;
  }
  _resetModifiedClassCells(changes) {
    if (this.isBatchEditMode()) {
      var columnsCount = this._columnsController.getVisibleColumns().length;
      changes.forEach((_ref2) => {
        var {
          key
        } = _ref2;
        var rowIndex = this._dataController.getRowIndexByKey(key);
        for (var columnIndex = 0; columnIndex < columnsCount; columnIndex++) {
          var cellElement = this._rowsView._getCellElement(rowIndex, columnIndex);
          null === cellElement || void 0 === cellElement ? void 0 : cellElement.removeClass(CELL_MODIFIED_CLASS2);
        }
      });
    }
  }
  _prepareChange(options2, value2, text) {
    var $cellElement = renderer_default(options2.cellElement);
    if (this.isBatchEditMode() && void 0 !== options2.key) {
      this._applyModified($cellElement, options2);
    }
    return super._prepareChange(options2, value2, text);
  }
  _cancelSaving(result2) {
    var dataController2 = this._dataController;
    if (this.isCellOrBatchEditMode()) {
      if (this.isBatchEditMode()) {
        this._resetEditIndices();
      }
      dataController2.updateItems();
    }
    super._cancelSaving(result2);
  }
  optionChanged(args) {
    var {
      fullName
    } = args;
    if ("editing" === args.name && fullName === EDITING_EDITCOLUMNNAME_OPTION_NAME) {
      this._handleEditColumnNameChange(args);
      args.handled = true;
    } else {
      super.optionChanged(args);
    }
  }
  _editCellFromOptionChanged(columnIndex, oldColumnIndex, oldRowIndex) {
    var columns2 = this._columnsController.getVisibleColumns();
    if (columnIndex > -1) {
      deferRender(() => {
        this._repaintEditCell(columns2[columnIndex], columns2[oldColumnIndex], oldRowIndex);
      });
    }
  }
  _handleEditRowKeyChange(args) {
    var _a2;
    if (this.isCellOrBatchEditMode()) {
      var columnIndex = this._getVisibleEditColumnIndex();
      var oldRowIndexCorrection = this._getEditRowIndexCorrection();
      var oldRowIndex = this._dataController.getRowIndexByKey(args.previousValue) + oldRowIndexCorrection;
      if (isDefined(args.value) && args.value !== args.previousValue) {
        null === (_a2 = this._editCellFromOptionChanged) || void 0 === _a2 ? void 0 : _a2.call(this, columnIndex, columnIndex, oldRowIndex);
      }
    } else {
      super._handleEditRowKeyChange(args);
    }
  }
  deleteRow(rowIndex) {
    if (this.isCellEditMode() && this.isEditing()) {
      var {
        isNewRow
      } = this._dataController.items()[rowIndex];
      var rowKey = this._dataController.getKeyByRowIndex(rowIndex);
      this.closeEditCell(null, isNewRow).always(() => {
        rowIndex = this._dataController.getRowIndexByKey(rowKey);
        this._checkAndDeleteRow(rowIndex);
      });
    } else {
      super.deleteRow(rowIndex);
    }
  }
  _checkAndDeleteRow(rowIndex) {
    if (this.isBatchEditMode()) {
      this._deleteRowCore(rowIndex);
    } else {
      super._checkAndDeleteRow(rowIndex);
    }
  }
  _refreshCore(params) {
    var {
      isPageChanged
    } = null !== params && void 0 !== params ? params : {};
    var needResetIndexes = this.isBatchEditMode() || isPageChanged && "virtual" !== this.option("scrolling.mode");
    if (this.isCellOrBatchEditMode()) {
      if (needResetIndexes) {
        this._resetEditColumnName();
        this._resetEditRowKey();
      }
    } else {
      super._refreshCore(params);
    }
  }
  _allowRowAdding(params) {
    if (this.isBatchEditMode()) {
      return true;
    }
    return super._allowRowAdding(params);
  }
  _afterDeleteRow(rowIndex, oldEditRowIndex) {
    var dataController2 = this._dataController;
    if (this.isBatchEditMode()) {
      dataController2.updateItems({
        changeType: "update",
        rowIndices: [oldEditRowIndex, rowIndex]
      });
      return new Deferred().resolve();
    }
    return super._afterDeleteRow(rowIndex, oldEditRowIndex);
  }
  _updateEditRow(row, forceUpdateRow, isCustomSetCellValue) {
    if (this.isCellOrBatchEditMode()) {
      this._updateRowImmediately(row, forceUpdateRow, isCustomSetCellValue);
    } else {
      super._updateEditRow(row, forceUpdateRow, isCustomSetCellValue);
    }
  }
  _isDefaultButtonVisible(button, options2) {
    if (this.isCellOrBatchEditMode()) {
      var isBatchMode = this.isBatchEditMode();
      switch (button.name) {
        case "save":
        case "cancel":
        case "edit":
          return false;
        case "delete":
          return super._isDefaultButtonVisible(button, options2) && (!isBatchMode || !options2.row.removed);
        case "undelete":
          return isBatchMode && this.allowDeleting(options2) && options2.row.removed;
        default:
          return super._isDefaultButtonVisible(button, options2);
      }
    }
    return super._isDefaultButtonVisible(button, options2);
  }
  _isRowDeleteAllowed() {
    var callBaseResult = super._isRowDeleteAllowed();
    return callBaseResult || this.isBatchEditMode();
  }
  _beforeEndSaving(changes) {
    var _a2;
    if (this.isCellEditMode()) {
      if ("update" !== (null === (_a2 = changes[0]) || void 0 === _a2 ? void 0 : _a2.type)) {
        super._beforeEndSaving(changes);
      }
    } else {
      if (this.isBatchEditMode()) {
        this._resetModifiedClassCells(changes);
      }
      super._beforeEndSaving(changes);
    }
  }
  prepareEditButtons(headerPanel2) {
    var _a2;
    var editingOptions = null !== (_a2 = this.option("editing")) && void 0 !== _a2 ? _a2 : {};
    var buttonItems = super.prepareEditButtons(headerPanel2);
    var needEditingButtons = editingOptions.allowUpdating || editingOptions.allowAdding || editingOptions.allowDeleting;
    if (needEditingButtons && this.isBatchEditMode()) {
      buttonItems.push(this.prepareButtonItem(headerPanel2, "save", "saveEditData", 21));
      buttonItems.push(this.prepareButtonItem(headerPanel2, "revert", "cancelEditData", 22));
    }
    return buttonItems;
  }
  _saveEditDataInner() {
    var editRow = this._dataController.getVisibleRows()[this.getEditRowIndex()];
    var editColumn = this._getEditColumn();
    var showEditorAlways = null === editColumn || void 0 === editColumn ? void 0 : editColumn.showEditorAlways;
    var isUpdateInCellMode = this.isCellEditMode() && !(null === editRow || void 0 === editRow ? void 0 : editRow.isNewRow);
    var deferred;
    if (isUpdateInCellMode && showEditorAlways) {
      deferred = new Deferred();
      this.addDeferred(deferred);
    }
    return super._saveEditDataInner().always(null === deferred || void 0 === deferred ? void 0 : deferred.resolve);
  }
  _applyChange(options2, params, forceUpdateRow) {
    var isUpdateInCellMode = this.isCellEditMode() && options2.row && !options2.row.isNewRow;
    var {
      showEditorAlways
    } = options2.column;
    var isCustomSetCellValue = options2.column.setCellValue !== options2.column.defaultSetCellValue;
    var focusPreviousEditingCell = showEditorAlways && !forceUpdateRow && isUpdateInCellMode && this.hasEditData() && !this.isEditCell(options2.rowIndex, options2.columnIndex);
    if (focusPreviousEditingCell) {
      this._focusEditingCell();
      this._updateEditRow(options2.row, true, isCustomSetCellValue);
      return;
    }
    return super._applyChange(options2, params, forceUpdateRow);
  }
  _applyChangeCore(options2, forceUpdateRow) {
    var {
      showEditorAlways
    } = options2.column;
    var isUpdateInCellMode = this.isCellEditMode() && options2.row && !options2.row.isNewRow;
    if (showEditorAlways && !forceUpdateRow) {
      if (isUpdateInCellMode) {
        this._setEditRowKey(options2.row.key, true);
        this._setEditColumnNameByIndex(options2.columnIndex, true);
        return this.saveEditData();
      }
      if (this.isBatchEditMode()) {
        forceUpdateRow = this._needUpdateRow(options2.column);
        return super._applyChangeCore(options2, forceUpdateRow);
      }
    }
    return super._applyChangeCore(options2, forceUpdateRow);
  }
  _processDataItemCore(item, change, key, columns2, generateDataValues) {
    var {
      data: data3,
      type: type2
    } = change;
    if (this.isBatchEditMode() && type2 === DATA_EDIT_DATA_REMOVE_TYPE) {
      item.data = createObjectWithChanges(item.data, data3);
    }
    super._processDataItemCore(item, change, key, columns2, generateDataValues);
  }
  _processRemoveCore(changes, editIndex, processIfBatch) {
    if (this.isBatchEditMode() && !processIfBatch) {
      return;
    }
    return super._processRemoveCore(changes, editIndex, processIfBatch);
  }
  _processRemoveIfError(changes, editIndex) {
    if (this.isBatchEditMode()) {
      return;
    }
    return super._processRemoveIfError(changes, editIndex);
  }
  _beforeFocusElementInRow(rowIndex) {
    super._beforeFocusElementInRow(rowIndex);
    var editRowIndex = rowIndex >= 0 ? rowIndex : 0;
    var columnIndex = this.getFirstEditableColumnIndex();
    columnIndex >= 0 && this.editCell(editRowIndex, columnIndex);
  }
};
var editingCellBasedModule = {
  extenders: {
    controllers: {
      editing: editingControllerExtender3
    },
    views: {
      rowsView: {
        _createTable() {
          var $table = this.callBase.apply(this, arguments);
          var editingController = this._editingController;
          if (editingController.isCellOrBatchEditMode() && this.option("editing.allowUpdating")) {
            events_engine_default.on($table, addNamespace2(hold_default.name, "dxDataGridRowsView"), "td:not(.".concat(EDITOR_CELL_CLASS2, ")"), this.createAction(() => {
              if (editingController.isEditing()) {
                editingController.closeEditCell();
              }
            }));
          }
          return $table;
        },
        _createRow(row) {
          var $row = this.callBase.apply(this, arguments);
          if (row) {
            var editingController = this._editingController;
            var isRowRemoved = !!row.removed;
            if (editingController.isBatchEditMode()) {
              isRowRemoved && $row.addClass(ROW_REMOVED);
            }
          }
          return $row;
        }
      },
      headerPanel: {
        isVisible() {
          var editingOptions = this.getController("editing").option("editing");
          return this.callBase() || editingOptions && (editingOptions.allowUpdating || editingOptions.allowDeleting) && editingOptions.mode === EDIT_MODE_BATCH;
        }
      }
    }
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/editing_cell_based.js
m_core_default.registerModule("editingCellBased", editingCellBasedModule);

// node_modules/devextreme/esm/__internal/grids/grid_core/validating/m_validating.js
var INVALIDATE_CLASS = "invalid";
var REVERT_TOOLTIP_CLASS = "revert-tooltip";
var INVALID_MESSAGE_CLASS = "dx-invalid-message";
var INVALID_MESSAGE_ID = "dxInvalidMessage";
var WIDGET_INVALID_MESSAGE_CLASS = "invalid-message";
var INVALID_MESSAGE_ALWAYS_CLASS = "dx-invalid-message-always";
var REVERT_BUTTON_CLASS = "dx-revert-button";
var REVERT_BUTTON_ID = "dxRevertButton";
var VALIDATOR_CLASS3 = "validator";
var PENDING_INDICATOR_CLASS = "dx-pending-indicator";
var VALIDATION_PENDING_CLASS = "dx-validation-pending";
var CONTENT_CLASS4 = "content";
var INSERT_INDEX2 = "__DX_INSERT_INDEX__";
var PADDING_BETWEEN_TOOLTIPS = 2;
var EDIT_MODE_ROW2 = "row";
var EDIT_MODE_FORM2 = "form";
var EDIT_MODE_BATCH2 = "batch";
var EDIT_MODE_CELL2 = "cell";
var EDIT_MODE_POPUP2 = "popup";
var GROUP_CELL_CLASS3 = "dx-group-cell";
var FORM_BASED_MODES = [EDIT_MODE_POPUP2, EDIT_MODE_FORM2];
var COMMAND_TRANSPARENT = "transparent";
var VALIDATION_STATUS = {
  valid: "valid",
  invalid: "invalid",
  pending: "pending"
};
var EDIT_DATA_INSERT_TYPE = "insert";
var EDIT_DATA_REMOVE_TYPE = "remove";
var VALIDATION_CANCELLED = "cancel";
var validationResultIsValid = function(result2) {
  return isDefined(result2) && result2 !== VALIDATION_CANCELLED;
};
var cellValueShouldBeValidated = function(value2, rowOptions) {
  return void 0 !== value2 || void 0 === value2 && rowOptions && !rowOptions.isNewRow;
};
var ValidatingController = m_modules_default.Controller.inherit({
  init() {
    this._editingController = this.getController("editing");
    this.createAction("onRowValidating");
    if (!this._validationState) {
      this.initValidationState();
    }
  },
  initValidationState() {
    this._validationState = [];
    this._validationStateCache = {};
  },
  _rowIsValidated(change) {
    var validationData = this._getValidationData(null === change || void 0 === change ? void 0 : change.key);
    return !!validationData && !!validationData.validated;
  },
  _getValidationData(key, create2) {
    var keyHash = getKeyHash(key);
    var isObjectKeyHash = isObject(keyHash);
    var validationData;
    if (isObjectKeyHash) {
      validationData = this._validationState.filter((data3) => equalByValue(data3.key, key))[0];
    } else {
      validationData = this._validationStateCache[keyHash];
    }
    if (!validationData && create2) {
      validationData = {
        key,
        isValid: true
      };
      this._validationState.push(validationData);
      if (!isObjectKeyHash) {
        this._validationStateCache[keyHash] = validationData;
      }
    }
    return validationData;
  },
  _getBrokenRules(validationData, validationResults) {
    var brokenRules;
    if (validationResults) {
      brokenRules = validationResults.brokenRules || validationResults.brokenRule && [validationResults.brokenRule];
    } else {
      brokenRules = validationData.brokenRules || [];
    }
    return brokenRules;
  },
  _rowValidating(validationData, validationResults) {
    var deferred = new Deferred();
    var change = this._editingController.getChangeByKey(null === validationData || void 0 === validationData ? void 0 : validationData.key);
    var brokenRules = this._getBrokenRules(validationData, validationResults);
    var isValid = validationResults ? validationResults.isValid : validationData.isValid;
    var parameters = {
      brokenRules,
      isValid,
      key: change.key,
      newData: change.data,
      oldData: this._editingController._getOldData(change.key),
      promise: null,
      errorText: this.getHiddenValidatorsErrorText(brokenRules)
    };
    this.executeAction("onRowValidating", parameters);
    when(fromPromise(parameters.promise)).always(() => {
      validationData.isValid = parameters.isValid;
      validationData.errorText = parameters.errorText;
      deferred.resolve(parameters);
    });
    return deferred.promise();
  },
  getHiddenValidatorsErrorText(brokenRules) {
    var brokenRulesMessages = [];
    each(brokenRules, (_, brokenRule) => {
      var {
        column
      } = brokenRule;
      var isGroupExpandColumn = column && void 0 !== column.groupIndex && !column.showWhenGrouped;
      var isVisibleColumn = column && column.visible;
      if (!brokenRule.validator.$element().parent().length && (!isVisibleColumn || isGroupExpandColumn)) {
        brokenRulesMessages.push(brokenRule.message);
      }
    });
    return brokenRulesMessages.join(", ");
  },
  validate(isFull) {
    var isValid = true;
    var editingController = this._editingController;
    var deferred = new Deferred();
    var completeList = [];
    var editMode = editingController.getEditMode();
    isFull = isFull || editMode === EDIT_MODE_ROW2;
    if (this._isValidationInProgress) {
      return deferred.resolve(false).promise();
    }
    this._isValidationInProgress = true;
    if (isFull) {
      editingController.addDeferred(deferred);
      var changes = editingController.getChanges();
      each(changes, (index2, _ref) => {
        var {
          type: type2,
          key
        } = _ref;
        if ("remove" !== type2) {
          var validationData = this._getValidationData(key, true);
          var validationResult2 = this.validateGroup(validationData);
          completeList.push(validationResult2);
          validationResult2.done((validationResult3) => {
            validationData.validated = true;
            isValid = isValid && validationResult3.isValid;
          });
        }
      });
    } else if (this._currentCellValidator) {
      var validationResult = this.validateGroup(this._currentCellValidator._findGroup());
      completeList.push(validationResult);
      validationResult.done((validationResult2) => {
        isValid = validationResult2.isValid;
      });
    }
    when(...completeList).done(() => {
      this._isValidationInProgress = false;
      deferred.resolve(isValid);
    });
    return deferred.promise();
  },
  validateGroup(validationData) {
    var result2 = new Deferred();
    var validateGroup = validationData && validation_engine_default.getGroupConfig(validationData);
    var validationResult;
    if (null === validateGroup || void 0 === validateGroup ? void 0 : validateGroup.validators.length) {
      this.resetRowValidationResults(validationData);
      validationResult = validation_engine_default.validateGroup(validationData);
    }
    when((null === validationResult || void 0 === validationResult ? void 0 : validationResult.complete) || validationResult).done((validationResult2) => {
      when(this._rowValidating(validationData, validationResult2)).done(result2.resolve);
    });
    return result2.promise();
  },
  isRowDataModified: (change) => !isEmptyObject(change.data),
  updateValidationState(change) {
    var editMode = this._editingController.getEditMode();
    var {
      key
    } = change;
    var validationData = this._getValidationData(key, true);
    if (!FORM_BASED_MODES.includes(editMode)) {
      if (change.type === EDIT_DATA_INSERT_TYPE && !this.isRowDataModified(change)) {
        validationData.isValid = true;
        return;
      }
      this.setDisableApplyValidationResults(true);
      var groupConfig = validation_engine_default.getGroupConfig(validationData);
      if (groupConfig) {
        var validationResult = validation_engine_default.validateGroup(validationData);
        when(validationResult.complete || validationResult).done((validationResult2) => {
          validationData.isValid = validationResult2.isValid;
          validationData.brokenRules = validationResult2.brokenRules;
        });
      } else if (!validationData.brokenRules || !validationData.brokenRules.length) {
        validationData.isValid = true;
      }
      this.setDisableApplyValidationResults(false);
    } else {
      validationData.isValid = true;
    }
  },
  setValidator(validator) {
    this._currentCellValidator = validator;
  },
  renderCellPendingIndicator($container) {
    var $indicator = $container.find(".".concat(PENDING_INDICATOR_CLASS));
    if (!$indicator.length) {
      var $indicatorContainer = $container;
      $indicator = renderer_default("<div>").appendTo($indicatorContainer).addClass(PENDING_INDICATOR_CLASS);
      this._createComponent($indicator, load_indicator_default);
      $container.addClass(VALIDATION_PENDING_CLASS);
    }
  },
  disposeCellPendingIndicator($container) {
    var $indicator = $container.find(".".concat(PENDING_INDICATOR_CLASS));
    if ($indicator.length) {
      var indicator = load_indicator_default.getInstance($indicator);
      if (indicator) {
        indicator.dispose();
        indicator.$element().remove();
      }
      $container.removeClass(VALIDATION_PENDING_CLASS);
    }
  },
  validationStatusChanged(result2) {
    var {
      validator
    } = result2;
    var validationGroup = validator.option("validationGroup");
    var {
      column
    } = validator.option("dataGetter")();
    this.updateCellValidationResult({
      rowKey: validationGroup.key,
      columnIndex: column.index,
      validationResult: result2
    });
  },
  validatorInitialized(arg) {
    arg.component.on("validating", this.validationStatusChanged.bind(this));
    arg.component.on("validated", this.validationStatusChanged.bind(this));
  },
  validatorDisposing(arg) {
    var validator = arg.component;
    var validationGroup = validator.option("validationGroup");
    var {
      column
    } = validator.option("dataGetter")();
    var result2 = this.getCellValidationResult({
      rowKey: null === validationGroup || void 0 === validationGroup ? void 0 : validationGroup.key,
      columnIndex: column.index
    });
    if (validationResultIsValid(result2) && result2.status === VALIDATION_STATUS.pending) {
      this.cancelCellValidationResult({
        change: validationGroup,
        columnIndex: column.index
      });
    }
  },
  applyValidationResult($container, result2) {
    var {
      validator
    } = result2;
    var validationGroup = validator.option("validationGroup");
    var {
      column
    } = validator.option("dataGetter")();
    result2.brokenRules && result2.brokenRules.forEach((rule) => {
      rule.columnIndex = column.index;
      rule.column = column;
    });
    if ($container) {
      var validationResult = this.getCellValidationResult({
        rowKey: validationGroup.key,
        columnIndex: column.index
      });
      var requestIsDisabled = validationResultIsValid(validationResult) && validationResult.disabledPendingId === result2.id;
      if (this._disableApplyValidationResults || requestIsDisabled) {
        return;
      }
      if (result2.status === VALIDATION_STATUS.invalid) {
        var $focus = $container.find(":focus");
        if (!focused($focus)) {
          events_engine_default.trigger($focus, "focus");
          events_engine_default.trigger($focus, pointer_default.down);
        }
      }
      var editor = !column.editCellTemplate && this.getController("editorFactory").getEditorInstance($container);
      if (result2.status === VALIDATION_STATUS.pending) {
        if (editor) {
          editor.option("validationStatus", VALIDATION_STATUS.pending);
        } else {
          this.renderCellPendingIndicator($container);
        }
      } else if (editor) {
        editor.option("validationStatus", VALIDATION_STATUS.valid);
      } else {
        this.disposeCellPendingIndicator($container);
      }
      $container.toggleClass(this.addWidgetPrefix(INVALIDATE_CLASS), result2.status === VALIDATION_STATUS.invalid);
    }
  },
  _syncInternalEditingData(parameters) {
    var _a2;
    var editingController = this._editingController;
    var change = editingController.getChangeByKey(parameters.key);
    var oldDataFromState = editingController._getOldData(parameters.key);
    var oldData = null === (_a2 = parameters.row) || void 0 === _a2 ? void 0 : _a2.oldData;
    if (change && oldData && !oldDataFromState) {
      editingController._addInternalData({
        key: parameters.key,
        oldData
      });
    }
  },
  createValidator(parameters, $container) {
    var _a2, _b2;
    var editingController = this._editingController;
    var {
      column
    } = parameters;
    var {
      showEditorAlways
    } = column;
    if (isDefined(column.command) || !column.validationRules || !Array.isArray(column.validationRules) || !column.validationRules.length) {
      return;
    }
    var editIndex = editingController.getIndexByKey(parameters.key, editingController.getChanges());
    var needCreateValidator = editIndex > -1;
    if (!needCreateValidator) {
      if (!showEditorAlways) {
        var columnsController = this.getController("columns");
        var visibleColumns = (null === columnsController || void 0 === columnsController ? void 0 : columnsController.getVisibleColumns()) || [];
        showEditorAlways = visibleColumns.some((column2) => column2.showEditorAlways);
      }
      var isEditRow = equalByValue(this.option("editing.editRowKey"), parameters.key);
      var isCellOrBatchEditingAllowed = editingController.isCellOrBatchEditMode() && editingController.allowUpdating({
        row: parameters.row
      });
      needCreateValidator = isEditRow || isCellOrBatchEditingAllowed && showEditorAlways;
      if (isCellOrBatchEditingAllowed && showEditorAlways) {
        editingController._addInternalData({
          key: parameters.key,
          oldData: null !== (_b2 = null === (_a2 = parameters.row) || void 0 === _a2 ? void 0 : _a2.oldData) && void 0 !== _b2 ? _b2 : parameters.data
        });
      }
    }
    if (needCreateValidator) {
      if ($container && !$container.length) {
        ui_errors_default.log("E1050");
        return;
      }
      this._syncInternalEditingData(parameters);
      var validationData = this._getValidationData(parameters.key, true);
      var getValue = () => {
        var change = editingController.getChangeByKey(null === validationData || void 0 === validationData ? void 0 : validationData.key);
        var value2 = column.calculateCellValue((null === change || void 0 === change ? void 0 : change.data) || {});
        return void 0 !== value2 ? value2 : parameters.value;
      };
      var useDefaultValidator = $container && $container.hasClass("dx-widget");
      $container && $container.addClass(this.addWidgetPrefix(VALIDATOR_CLASS3));
      var validator = new validator_default($container || renderer_default("<div>"), {
        name: column.caption,
        validationRules: extend(true, [], column.validationRules),
        validationGroup: validationData,
        adapter: useDefaultValidator ? null : {
          getValue,
          applyValidationResults: (result2) => {
            this.applyValidationResult($container, result2);
          }
        },
        dataGetter() {
          var key = null === validationData || void 0 === validationData ? void 0 : validationData.key;
          var change = editingController.getChangeByKey(key);
          var oldData = editingController._getOldData(key);
          return {
            data: createObjectWithChanges(oldData, null === change || void 0 === change ? void 0 : change.data),
            column
          };
        },
        onInitialized: this.validatorInitialized.bind(this),
        onDisposing: this.validatorDisposing.bind(this)
      });
      if (useDefaultValidator) {
        var adapter = validator.option("adapter");
        if (adapter) {
          var originBypass = adapter.bypass;
          var defaultAdapterBypass = () => parameters.row.isNewRow && !this._isValidationInProgress && !editingController.isCellModified(parameters);
          adapter.getValue = getValue;
          adapter.validationRequestsCallbacks = [];
          adapter.bypass = () => originBypass.call(adapter) || defaultAdapterBypass();
        }
      }
      return validator;
    }
    return;
  },
  setDisableApplyValidationResults(flag) {
    this._disableApplyValidationResults = flag;
  },
  getDisableApplyValidationResults() {
    return this._disableApplyValidationResults;
  },
  isCurrentValidatorProcessing(_ref2) {
    var {
      rowKey,
      columnIndex
    } = _ref2;
    return this._currentCellValidator && equalByValue(this._currentCellValidator.option("validationGroup").key, rowKey) && this._currentCellValidator.option("dataGetter")().column.index === columnIndex;
  },
  validateCell(validator) {
    var cellParams = {
      rowKey: validator.option("validationGroup").key,
      columnIndex: validator.option("dataGetter")().column.index
    };
    var validationResult = this.getCellValidationResult(cellParams);
    var stateRestored = validationResultIsValid(validationResult);
    var adapter = validator.option("adapter");
    if (!stateRestored) {
      validationResult = validator.validate();
    } else {
      var currentCellValue = adapter.getValue();
      if (!equalByValue(currentCellValue, validationResult.value)) {
        validationResult = validator.validate();
      }
    }
    var deferred = new Deferred();
    if (stateRestored && validationResult.status === VALIDATION_STATUS.pending) {
      this.updateCellValidationResult(cellParams);
      adapter.applyValidationResults(validationResult);
    }
    when(validationResult.complete || validationResult).done((validationResult2) => {
      stateRestored && adapter.applyValidationResults(validationResult2);
      deferred.resolve(validationResult2);
    });
    return deferred.promise();
  },
  updateCellValidationResult(_ref3) {
    var {
      rowKey,
      columnIndex,
      validationResult
    } = _ref3;
    var validationData = this._getValidationData(rowKey);
    if (!validationData) {
      return;
    }
    if (!validationData.validationResults) {
      validationData.validationResults = {};
    }
    var result2;
    if (validationResult) {
      result2 = extend({}, validationResult);
      validationData.validationResults[columnIndex] = result2;
      if (validationResult.status === VALIDATION_STATUS.pending) {
        if (this._editingController.getEditMode() === EDIT_MODE_CELL2) {
          result2.deferred = new Deferred();
          result2.complete.always(() => {
            result2.deferred.resolve();
          });
          this._editingController.addDeferred(result2.deferred);
        }
        if (this._disableApplyValidationResults) {
          result2.disabledPendingId = validationResult.id;
          return;
        }
      }
    } else {
      result2 = validationData.validationResults[columnIndex];
    }
    if (result2 && result2.disabledPendingId) {
      delete result2.disabledPendingId;
    }
  },
  getCellValidationResult(_ref4) {
    var {
      rowKey,
      columnIndex
    } = _ref4;
    var _a2;
    var validationData = this._getValidationData(rowKey, true);
    return null === (_a2 = null === validationData || void 0 === validationData ? void 0 : validationData.validationResults) || void 0 === _a2 ? void 0 : _a2[columnIndex];
  },
  removeCellValidationResult(_ref5) {
    var {
      change,
      columnIndex
    } = _ref5;
    var validationData = this._getValidationData(null === change || void 0 === change ? void 0 : change.key);
    if (validationData && validationData.validationResults) {
      this.cancelCellValidationResult({
        change,
        columnIndex
      });
      delete validationData.validationResults[columnIndex];
    }
  },
  cancelCellValidationResult(_ref6) {
    var {
      change,
      columnIndex
    } = _ref6;
    var validationData = this._getValidationData(change.key);
    if (change && validationData.validationResults) {
      var result2 = validationData.validationResults[columnIndex];
      if (result2) {
        result2.deferred && result2.deferred.reject(VALIDATION_CANCELLED);
        validationData.validationResults[columnIndex] = VALIDATION_CANCELLED;
      }
    }
  },
  resetRowValidationResults(validationData) {
    if (validationData) {
      validationData.validationResults && delete validationData.validationResults;
      delete validationData.validated;
    }
  },
  isInvalidCell(_ref7) {
    var {
      rowKey,
      columnIndex
    } = _ref7;
    var result2 = this.getCellValidationResult({
      rowKey,
      columnIndex
    });
    return validationResultIsValid(result2) && result2.status === VALIDATION_STATUS.invalid;
  },
  getCellValidator(_ref8) {
    var {
      rowKey,
      columnIndex
    } = _ref8;
    var validationData = this._getValidationData(rowKey);
    var groupConfig = validationData && validation_engine_default.getGroupConfig(validationData);
    var validators = groupConfig && groupConfig.validators;
    return validators && validators.filter((v) => {
      var {
        column
      } = v.option("dataGetter")();
      return column ? column.index === columnIndex : false;
    })[0];
  },
  setCellValidationStatus(cellOptions) {
    var validationResult = this.getCellValidationResult({
      rowKey: cellOptions.key,
      columnIndex: cellOptions.column.index
    });
    if (isDefined(validationResult)) {
      cellOptions.validationStatus = validationResult !== VALIDATION_CANCELLED ? validationResult.status : VALIDATION_CANCELLED;
    } else {
      delete cellOptions.validationStatus;
    }
  }
});
var validatingModule = {
  defaultOptions: () => ({
    editing: {
      texts: {
        validationCancelChanges: message_default.format("dxDataGrid-validationCancelChanges")
      }
    }
  }),
  controllers: {
    validating: ValidatingController
  },
  extenders: {
    controllers: {
      editing: {
        _addChange(changeParams) {
          var change = this.callBase.apply(this, arguments);
          var validatingController = this.getController("validating");
          if (change && changeParams.type !== EDIT_DATA_REMOVE_TYPE) {
            validatingController.updateValidationState(change);
          }
          return change;
        },
        _handleChangesChange(args) {
          this.callBase.apply(this, arguments);
          var validatingController = this.getController("validating");
          args.value.forEach((change) => {
            if (void 0 === validatingController._getValidationData(change.key)) {
              validatingController.updateValidationState(change);
            }
          });
        },
        _updateRowAndPageIndices() {
          var that = this;
          var startInsertIndex = that.getView("rowsView").getTopVisibleItemIndex();
          var rowIndex = startInsertIndex;
          each(that.getChanges(), (_, _ref9) => {
            var {
              key,
              type: type2
            } = _ref9;
            var validationData = this.getController("validating")._getValidationData(key);
            if (validationData && !validationData.isValid && validationData.pageIndex !== that._pageIndex) {
              validationData.pageIndex = that._pageIndex;
              if (type2 === EDIT_DATA_INSERT_TYPE) {
                validationData.rowIndex = startInsertIndex;
              } else {
                validationData.rowIndex = rowIndex;
              }
              rowIndex++;
            }
          });
        },
        _getValidationGroupsInForm(detailOptions) {
          var validatingController = this.getController("validating");
          var validationData = validatingController._getValidationData(detailOptions.key, true);
          return {
            validationGroup: validationData
          };
        },
        _validateEditFormAfterUpdate(row, isCustomSetCellValue) {
          if (isCustomSetCellValue && this._editForm) {
            this._editForm.validate();
          }
          this.callBase.apply(this, arguments);
        },
        _prepareEditCell(params) {
          var isNotCanceled = this.callBase.apply(this, arguments);
          var validatingController = this.getController("validating");
          if (isNotCanceled && params.column.showEditorAlways) {
            validatingController.updateValidationState({
              key: params.key
            });
          }
          return isNotCanceled;
        },
        processItems(items, changeType) {
          var changes = this.getChanges();
          var dataController2 = this.getController("data");
          var validatingController = this.getController("validating");
          items = this.callBase(items, changeType);
          var itemsCount = items.length;
          var addInValidItem = function(change, validationData) {
            var data3 = {
              key: change.key
            };
            var index2 = function(change2, items2) {
              var index3 = -1;
              var isInsert = change2.type === EDIT_DATA_INSERT_TYPE;
              var {
                key
              } = change2;
              each(items2, (i, item) => {
                if (equalByValue(key, isInsert ? item.key : dataController2.keyOf(item))) {
                  index3 = i;
                  return false;
                }
                return;
              });
              return index3;
            }(change, items);
            if (index2 >= 0) {
              return;
            }
            validationData.rowIndex = validationData.rowIndex > itemsCount ? validationData.rowIndex % itemsCount : validationData.rowIndex;
            var {
              rowIndex
            } = validationData;
            data3[INSERT_INDEX2] = 1;
            items.splice(rowIndex, 0, data3);
          };
          if (this.getEditMode() === EDIT_MODE_BATCH2 && "prepend" !== changeType && "append" !== changeType) {
            changes.forEach((change) => {
              var {
                key
              } = change;
              var validationData = validatingController._getValidationData(key);
              if (validationData && change.type && validationData.pageIndex === this._pageIndex && (null === change || void 0 === change ? void 0 : change.pageIndex) !== this._pageIndex) {
                addInValidItem(change, validationData);
              }
            });
          }
          return items;
        },
        processDataItem(item) {
          var isInserted = item.data[INSERT_INDEX2];
          var key = isInserted ? item.data.key : item.key;
          var editMode = this.getEditMode();
          if (editMode === EDIT_MODE_BATCH2 && isInserted && key) {
            var changes = this.getChanges();
            var editIndex = m_utils_default.getIndexByKey(key, changes);
            if (editIndex >= 0) {
              var change = changes[editIndex];
              if (change.type !== EDIT_DATA_INSERT_TYPE) {
                var oldData = this._getOldData(change.key);
                item.data = extend(true, {}, oldData, change.data);
                item.key = key;
              }
            }
          }
          this.callBase.apply(this, arguments);
        },
        _createInvisibleColumnValidators(changes) {
          var that = this;
          var validatingController = this.getController("validating");
          var columnsController = this.getController("columns");
          var columns2 = columnsController.getColumns();
          var invisibleColumns = columnsController.getInvisibleColumns().filter((column) => !column.isBand);
          var groupColumns = columnsController.getGroupColumns().filter((column) => !column.showWhenGrouped && -1 === invisibleColumns.indexOf(column));
          var invisibleColumnValidators = [];
          var isCellVisible = (column, rowKey) => this._dataController.getRowIndexByKey(rowKey) >= 0 && invisibleColumns.indexOf(column) < 0;
          invisibleColumns.push(...groupColumns);
          if (!FORM_BASED_MODES.includes(this.getEditMode())) {
            each(columns2, (_, column) => {
              changes.forEach((change) => {
                var data3;
                if (isCellVisible(column, change.key)) {
                  return;
                }
                if (change.type === EDIT_DATA_INSERT_TYPE) {
                  data3 = change.data;
                } else if ("update" === change.type) {
                  var oldData = that._getOldData(change.key);
                  if (!isDefined(oldData)) {
                    return;
                  }
                  data3 = createObjectWithChanges(oldData, change.data);
                }
                if (data3) {
                  var validator = validatingController.createValidator({
                    column,
                    key: change.key,
                    value: column.calculateCellValue(data3)
                  });
                  if (validator) {
                    invisibleColumnValidators.push(validator);
                  }
                }
              });
            });
          }
          return function() {
            invisibleColumnValidators.forEach((validator) => {
              validator.dispose();
            });
          };
        },
        _beforeSaveEditData(change, editIndex) {
          var result2 = this.callBase.apply(this, arguments);
          var validatingController = this.getController("validating");
          var validationData = validatingController._getValidationData(null === change || void 0 === change ? void 0 : change.key);
          if (change) {
            var isValid = "remove" === change.type || validationData.isValid;
            result2 = result2 || !isValid;
          } else {
            var disposeValidators = this._createInvisibleColumnValidators(this.getChanges());
            result2 = new Deferred();
            this.executeOperation(result2, () => {
              validatingController.validate(true).done((isFullValid) => {
                disposeValidators();
                this._updateRowAndPageIndices();
                switch (this.getEditMode()) {
                  case EDIT_MODE_CELL2:
                    if (!isFullValid) {
                      this._focusEditingCell();
                    }
                    break;
                  case EDIT_MODE_BATCH2:
                    if (!isFullValid) {
                      this._resetEditRowKey();
                      this._resetEditColumnName();
                      this.getController("data").updateItems();
                    }
                }
                result2.resolve(!isFullValid);
              });
            });
          }
          return result2.promise ? result2.promise() : result2;
        },
        _beforeEditCell(rowIndex, columnIndex, item) {
          var result2 = this.callBase(rowIndex, columnIndex, item);
          if (this.getEditMode() === EDIT_MODE_CELL2) {
            var $cell = this._rowsView._getCellElement(rowIndex, columnIndex);
            var validator = $cell && $cell.data("dxValidator");
            var rowOptions = $cell && $cell.closest(".dx-row").data("options");
            var value2 = validator && validator.option("adapter").getValue();
            if (validator && cellValueShouldBeValidated(value2, rowOptions)) {
              var validatingController = this.getController("validating");
              var deferred = new Deferred();
              when(validatingController.validateCell(validator), result2).done((validationResult, result3) => {
                deferred.resolve(validationResult.status === VALIDATION_STATUS.valid && result3);
              });
              return deferred.promise();
            }
            if (!validator) {
              return result2;
            }
          }
          return false;
        },
        _afterSaveEditData(cancel2) {
          var $firstErrorRow;
          var isCellEditMode = this.getEditMode() === EDIT_MODE_CELL2;
          each(this.getChanges(), (_, change) => {
            var $errorRow = this._showErrorRow(change);
            $firstErrorRow = $firstErrorRow || $errorRow;
          });
          if ($firstErrorRow) {
            var scrollable = this._rowsView.getScrollable();
            if (scrollable) {
              scrollable.update();
              scrollable.scrollToElement($firstErrorRow);
            }
          }
          if (cancel2 && isCellEditMode && this._needUpdateRow()) {
            var editRowIndex = this.getEditRowIndex();
            this._dataController.updateItems({
              changeType: "update",
              rowIndices: [editRowIndex]
            });
            this._focusEditingCell();
          } else if (!cancel2) {
            var shouldResetValidationState = true;
            if (isCellEditMode) {
              var columns2 = this.getController("columns").getColumns();
              var columnsWithValidatingEditors = columns2.filter((col) => {
                var _a2;
                return col.showEditorAlways && (null === (_a2 = col.validationRules) || void 0 === _a2 ? void 0 : _a2.length) > 0;
              }).length > 0;
              shouldResetValidationState = !columnsWithValidatingEditors;
            }
            if (shouldResetValidationState) {
              this.getController("validating").initValidationState();
            }
          }
        },
        _handleDataChanged(args) {
          var validationState = this.getController("validating")._validationState;
          if ("standard" === this.option("scrolling.mode")) {
            this.resetRowAndPageIndices();
          }
          if ("prepend" === args.changeType) {
            each(validationState, (_, validationData) => {
              validationData.rowIndex += args.items.length;
            });
          }
          this.callBase(args);
        },
        resetRowAndPageIndices() {
          var validationState = this.getController("validating")._validationState;
          each(validationState, (_, validationData) => {
            if (validationData.pageIndex !== this._pageIndex) {
              delete validationData.pageIndex;
              delete validationData.rowIndex;
            }
          });
        },
        _beforeCancelEditData() {
          this.getController("validating").initValidationState();
          this.callBase();
        },
        _showErrorRow(change) {
          var $popupContent;
          var errorHandling = this.getController("errorHandling");
          var items = this.getController("data").items();
          var rowIndex = this.getIndexByKey(change.key, items);
          var validationData = this.getController("validating")._getValidationData(change.key);
          if (!(null === validationData || void 0 === validationData ? void 0 : validationData.isValid) && (null === validationData || void 0 === validationData ? void 0 : validationData.errorText) && rowIndex >= 0) {
            $popupContent = this.getPopupContent();
            return errorHandling && errorHandling.renderErrorRow(null === validationData || void 0 === validationData ? void 0 : validationData.errorText, rowIndex, $popupContent);
          }
        },
        updateFieldValue(e) {
          var validatingController = this.getController("validating");
          var deferred = new Deferred();
          validatingController.removeCellValidationResult({
            change: this.getChangeByKey(e.key),
            columnIndex: e.column.index
          });
          this.callBase.apply(this, arguments).done(() => {
            var currentValidator = validatingController.getCellValidator({
              rowKey: e.key,
              columnIndex: e.column.index
            });
            when(currentValidator && validatingController.validateCell(currentValidator)).done((validationResult) => {
              this.getController("editorFactory").refocus();
              deferred.resolve(validationResult);
            });
          });
          return deferred.promise();
        },
        highlightDataCell($cell, parameters) {
          this.callBase.apply(this, arguments);
          var validatingController = this.getController("validating");
          validatingController.setCellValidationStatus(parameters);
          var isEditableCell = !!parameters.setValue;
          var cellModified = this.isCellModified(parameters);
          var isValidated = isDefined(parameters.validationStatus);
          var needValidation = cellModified && parameters.column.setCellValue || isEditableCell && !cellModified && !(parameters.row.isNewRow || !isValidated);
          if (needValidation) {
            var validator = $cell.data("dxValidator");
            if (validator) {
              when(this.getController("validating").validateCell(validator)).done(() => {
                validatingController.setCellValidationStatus(parameters);
              });
            }
          }
        },
        getChangeByKey(key) {
          var changes = this.getChanges();
          return changes[m_utils_default.getIndexByKey(key, changes)];
        },
        isCellModified(parameters) {
          var cellModified = this.callBase(parameters);
          var change = this.getChangeByKey(parameters.key);
          var isCellInvalid = !!parameters.row && this.getController("validating").isInvalidCell({
            rowKey: parameters.key,
            columnIndex: parameters.column.index
          });
          return cellModified || this.getController("validating")._rowIsValidated(change) && isCellInvalid;
        }
      },
      editorFactory: {
        _showRevertButton($container) {
          var _a2;
          var $tooltipElement = null === (_a2 = this._revertTooltip) || void 0 === _a2 ? void 0 : _a2.$element();
          if (!$container || !$container.length) {
            null === $tooltipElement || void 0 === $tooltipElement ? void 0 : $tooltipElement.remove();
            this._revertTooltip = void 0;
            return;
          }
          if ($container.find($tooltipElement).length) {
            return;
          }
          var $overlayContainer = $container.closest(".".concat(this.addWidgetPrefix(CONTENT_CLASS4))).parent();
          var revertTooltipClass = this.addWidgetPrefix(REVERT_TOOLTIP_CLASS);
          null === $tooltipElement || void 0 === $tooltipElement ? void 0 : $tooltipElement.remove();
          $tooltipElement = renderer_default("<div>").addClass(revertTooltipClass).appendTo($container);
          var tooltipOptions = {
            animation: null,
            visible: true,
            width: "auto",
            height: "auto",
            shading: false,
            container: $overlayContainer,
            propagateOutsideClick: true,
            hideOnOutsideClick: false,
            wrapperAttr: {
              class: revertTooltipClass
            },
            contentTemplate: () => {
              var $buttonElement = renderer_default("<div>").addClass(REVERT_BUTTON_CLASS);
              var buttonOptions = {
                icon: "revert",
                hint: this.option("editing.texts.validationCancelChanges"),
                elementAttr: {
                  id: REVERT_BUTTON_ID,
                  "aria-label": message_default.format("dxDataGrid-ariaRevertButton")
                },
                onClick: () => {
                  this._editingController.cancelEditData();
                }
              };
              return new button_default($buttonElement, buttonOptions).$element();
            },
            position: {
              my: "left top",
              at: "right top",
              offset: "1 0",
              collision: "flip",
              boundaryOffset: "0 0",
              boundary: this._rowsView.element(),
              of: $container
            },
            onPositioned: this._positionedHandler.bind(this)
          };
          this._revertTooltip = new ui_overlay_default($tooltipElement, tooltipOptions);
        },
        _hideFixedGroupCell($cell, overlayOptions) {
          var $nextFixedRowElement;
          var $groupCellElement;
          var isFixedColumns = this._rowsView.isFixedColumns();
          var isFormOrPopupEditMode = this._editingController.isFormOrPopupEditMode();
          if (isFixedColumns && !isFormOrPopupEditMode) {
            var nextRowOptions = $cell.closest(".dx-row").next().data("options");
            if (nextRowOptions && "group" === nextRowOptions.rowType) {
              $nextFixedRowElement = renderer_default(this._rowsView.getRowElement(nextRowOptions.rowIndex)).last();
              $groupCellElement = $nextFixedRowElement.find(".".concat(GROUP_CELL_CLASS3));
              if ($groupCellElement.length && "hidden" !== $groupCellElement.get(0).style.visibility) {
                $groupCellElement.css("visibility", "hidden");
                overlayOptions.onDisposing = function() {
                  $groupCellElement.css("visibility", "");
                };
              }
            }
          }
        },
        _positionedHandler(e, isOverlayVisible) {
          if (!e.component.__skipPositionProcessing) {
            var isRevertButton = renderer_default(e.element).hasClass(this.addWidgetPrefix(REVERT_TOOLTIP_CLASS));
            var needRepaint = !isRevertButton && this._rowsView.updateFreeSpaceRowHeight();
            var normalizedPosition = this._normalizeValidationMessagePositionAndMaxWidth(e, isRevertButton, isOverlayVisible);
            e.component.__skipPositionProcessing = !!(needRepaint || normalizedPosition);
            if (normalizedPosition) {
              e.component.option(normalizedPosition);
            } else if (needRepaint) {
              e.component.repaint();
            }
          }
        },
        _showValidationMessage($cell, messages, alignment) {
          var _a2;
          var editorPopup = $cell.find(".dx-dropdowneditor-overlay").data("dxPopup");
          var isOverlayVisible = editorPopup && editorPopup.option("visible");
          var myPosition = isOverlayVisible ? "top right" : "top ".concat(alignment);
          var atPosition = isOverlayVisible ? "top left" : "bottom ".concat(alignment);
          var hasFixedColumns = (null === (_a2 = this._columnsController.getFixedColumns()) || void 0 === _a2 ? void 0 : _a2.length) > 0;
          var $overlayContainer = hasFixedColumns ? this.getView("rowsView").element() : $cell.closest(".".concat(this.addWidgetPrefix(CONTENT_CLASS4)));
          var errorMessageText = "";
          messages && messages.forEach((message) => {
            errorMessageText += (errorMessageText.length ? "<br/>" : "") + encodeHtml(message);
          });
          var invalidMessageClass = this.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS);
          this._rowsView.element().find(".".concat(invalidMessageClass)).remove();
          var $overlayElement = renderer_default("<div>").addClass(INVALID_MESSAGE_CLASS).addClass(INVALID_MESSAGE_ALWAYS_CLASS).addClass(invalidMessageClass).html(errorMessageText).appendTo($cell);
          var overlayOptions = {
            container: $overlayContainer,
            shading: false,
            width: "auto",
            height: "auto",
            visible: true,
            animation: false,
            propagateOutsideClick: true,
            hideOnOutsideClick: false,
            wrapperAttr: {
              id: INVALID_MESSAGE_ID,
              class: "".concat(INVALID_MESSAGE_CLASS, " ").concat(INVALID_MESSAGE_ALWAYS_CLASS, " ").concat(invalidMessageClass)
            },
            position: {
              collision: "flip",
              boundary: this._rowsView.element(),
              boundaryOffset: "0 0",
              offset: {
                x: 0,
                y: !isOverlayVisible && browser_default.mozilla ? -1 : 0
              },
              my: myPosition,
              at: atPosition,
              of: $cell
            },
            onPositioned: (e) => {
              this._positionedHandler(e, isOverlayVisible);
              this._shiftValidationMessageIfNeed(e.component.$content(), $cell);
            }
          };
          this._hideFixedGroupCell($cell, overlayOptions);
          new ui_overlay_default($overlayElement, overlayOptions);
        },
        _hideValidationMessage() {
          var _a2;
          var validationMessages = null === (_a2 = this._rowsView.element()) || void 0 === _a2 ? void 0 : _a2.find(this._getValidationMessagesSelector());
          null === validationMessages || void 0 === validationMessages ? void 0 : validationMessages.remove();
        },
        _normalizeValidationMessagePositionAndMaxWidth(options2, isRevertButton, isOverlayVisible) {
          var fixedColumns = this._columnsController.getFixedColumns();
          if (!fixedColumns || !fixedColumns.length) {
            return;
          }
          var position3;
          var visibleTableWidth = !isRevertButton && (that = this, element = options2.element, rowIndex = renderer_default(element).closest("tr").index(), $cellElements = renderer_default(that._rowsView.getRowElement(rowIndex)).first().children().filter(":not(.dx-hidden-cell)"), that._rowsView._getWidths($cellElements).reduce((w1, w2) => w1 + w2, 0));
          var that, element, rowIndex, $cellElements;
          var $overlayContentElement = options2.component.$content();
          var validationMessageWidth = getOuterWidth($overlayContentElement, true);
          var needMaxWidth = !isRevertButton && validationMessageWidth > visibleTableWidth;
          var columnIndex = this._rowsView.getCellIndex(renderer_default(options2.element).closest("td"));
          var boundaryNonFixedColumnsInfo = function(fixedColumns2) {
            var firstNonFixedColumnIndex;
            var lastNonFixedColumnIndex;
            fixedColumns2.some((column, index2) => {
              if (column.command === COMMAND_TRANSPARENT) {
                firstNonFixedColumnIndex = 0 === index2 ? -1 : index2;
                lastNonFixedColumnIndex = index2 === fixedColumns2.length - 1 ? -1 : index2 + column.colspan - 1;
                return true;
              }
              return;
            });
            return {
              startColumnIndex: firstNonFixedColumnIndex,
              endColumnIndex: lastNonFixedColumnIndex
            };
          }(fixedColumns);
          if (!isRevertButton && (columnIndex === boundaryNonFixedColumnsInfo.startColumnIndex || needMaxWidth)) {
            position3 = {
              collision: "none flip",
              my: "top left",
              at: isOverlayVisible ? "top right" : "bottom left"
            };
          } else if (columnIndex === boundaryNonFixedColumnsInfo.endColumnIndex) {
            position3 = {
              collision: "none flip",
              my: "top right",
              at: isRevertButton || isOverlayVisible ? "top left" : "bottom right"
            };
            if (isRevertButton) {
              position3.offset = "-1 0";
            }
          }
          return position3 && {
            position: position3,
            maxWidth: needMaxWidth ? visibleTableWidth - 2 : void 0
          };
        },
        _shiftValidationMessageIfNeed($content, $cell) {
          var $revertContent = this._revertTooltip && this._revertTooltip.$content();
          if (!$revertContent) {
            return;
          }
          var contentOffset = $content.offset();
          var revertContentOffset = $revertContent.offset();
          if (contentOffset.top === revertContentOffset.top && contentOffset.left + getWidth($content) > revertContentOffset.left) {
            var left = getWidth($revertContent) + PADDING_BETWEEN_TOOLTIPS;
            $content.css("left", revertContentOffset.left < $cell.offset().left ? -left : left);
          }
        },
        _getRevertTooltipsSelector() {
          var revertTooltipClass = this.addWidgetPrefix(REVERT_TOOLTIP_CLASS);
          return ".dx-editor-cell .".concat(revertTooltipClass);
        },
        _getValidationMessagesSelector() {
          var invalidMessageClass = this.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS);
          return ".dx-editor-cell .".concat(invalidMessageClass, ", .dx-cell-modified .").concat(invalidMessageClass);
        },
        init() {
          this.callBase();
          this._editingController = this.getController("editing");
          this._columnsController = this.getController("columns");
          this._rowsView = this.getView("rowsView");
        },
        loseFocus(skipValidator) {
          if (!skipValidator) {
            this.getController("validating").setValidator(null);
          }
          this.callBase();
        },
        updateCellState($element, validationResult, isHideBorder) {
          var _a2;
          var $focus = null === $element || void 0 === $element ? void 0 : $element.closest(this._getFocusCellSelector());
          var $cell = (null === $focus || void 0 === $focus ? void 0 : $focus.is("td")) ? $focus : null;
          var rowOptions = null === $focus || void 0 === $focus ? void 0 : $focus.closest(".dx-row").data("options");
          var change = rowOptions ? this.getController("editing").getChangeByKey(rowOptions.key) : null;
          var column = $cell && this.getController("columns").getVisibleColumns()[$cell.index()];
          var isCellModified = void 0 !== (null === (_a2 = null === change || void 0 === change ? void 0 : change.data) || void 0 === _a2 ? void 0 : _a2[null === column || void 0 === column ? void 0 : column.name]) && !this._editingController.isSaving();
          var validationDescriptionValues = [];
          if (this._editingController.getEditMode() === EDIT_MODE_CELL2) {
            if ((null === validationResult || void 0 === validationResult ? void 0 : validationResult.status) === VALIDATION_STATUS.invalid || isCellModified) {
              this._showRevertButton($focus);
              validationDescriptionValues.push(REVERT_BUTTON_ID);
            } else {
              this._revertTooltip && this._revertTooltip.$element().remove();
            }
          }
          var showValidationMessage = validationResult && validationResult.status === VALIDATION_STATUS.invalid;
          if (showValidationMessage && $cell && column && validationResult && validationResult.brokenRules) {
            var errorMessages = [];
            validationResult.brokenRules.forEach((rule) => {
              if (rule.message) {
                errorMessages.push(rule.message);
              }
            });
            if (errorMessages.length) {
              this._showValidationMessage($focus, errorMessages, column.alignment || "left");
              validationDescriptionValues.push(INVALID_MESSAGE_ID);
            }
          }
          this._updateAriaValidationAttributes($focus, validationDescriptionValues);
          !isHideBorder && this._rowsView.element() && this._rowsView.updateFreeSpaceRowHeight();
        },
        _updateAriaValidationAttributes($focus, inputDescriptionValues) {
          if (0 === inputDescriptionValues.length) {
            return;
          }
          var editMode = this._editingController.getEditMode();
          var shouldSetValidationAriaAttributes = [EDIT_MODE_CELL2, EDIT_MODE_BATCH2, EDIT_MODE_ROW2].includes(editMode);
          if (shouldSetValidationAriaAttributes) {
            var $focusElement = this._getCurrentFocusElement($focus);
            $focusElement.attr("aria-labelledby", inputDescriptionValues.join(" "));
            $focusElement.attr("aria-invalid", true);
          }
        },
        _getCurrentFocusElement($focus) {
          if (this._editingController.isEditing()) {
            return $focus.find(EDITORS_INPUT_SELECTOR).first();
          }
          return $focus;
        },
        focus($element, isHideBorder) {
          if (!arguments.length) {
            return this.callBase();
          }
          this._hideValidationMessage();
          if ((null === $element || void 0 === $element ? void 0 : $element.hasClass("dx-row")) || (null === $element || void 0 === $element ? void 0 : $element.hasClass("dx-master-detail-cell"))) {
            return this.callBase($element, isHideBorder);
          }
          var $focus = null === $element || void 0 === $element ? void 0 : $element.closest(this._getFocusCellSelector());
          var {
            callBase
          } = this;
          var validator = $focus && ($focus.data("dxValidator") || $element.find(".".concat(this.addWidgetPrefix(VALIDATOR_CLASS3))).eq(0).data("dxValidator"));
          var rowOptions = $focus && $focus.closest(".dx-row").data("options");
          var editingController = this.getController("editing");
          var change = rowOptions ? editingController.getChangeByKey(rowOptions.key) : null;
          var validatingController = this.getController("validating");
          var validationResult;
          if (validator) {
            validatingController.setValidator(validator);
            var value2 = validator.option("adapter").getValue();
            if (cellValueShouldBeValidated(value2, rowOptions) || validatingController._rowIsValidated(change)) {
              editingController.waitForDeferredOperations().done(() => {
                when(validatingController.validateCell(validator)).done((result2) => {
                  validationResult = result2;
                  var {
                    column
                  } = validationResult.validator.option("dataGetter")();
                  if (change && column && !validatingController.isCurrentValidatorProcessing({
                    rowKey: change.key,
                    columnIndex: column.index
                  })) {
                    return;
                  }
                  if (!isFluent(current()) && validationResult.status === VALIDATION_STATUS.invalid) {
                    isHideBorder = true;
                  }
                  this.updateCellState($element, validationResult, isHideBorder);
                  callBase.call(this, $element, isHideBorder);
                });
              });
              return this.callBase($element, isHideBorder);
            }
          }
          this.updateCellState($element, validationResult, isHideBorder);
          return this.callBase($element, isHideBorder);
        },
        getEditorInstance($container) {
          var $editor = $container.find(".dx-texteditor").eq(0);
          return m_utils_default.getWidgetInstance($editor);
        }
      },
      data: {
        _getValidationStatus(validationResult) {
          var validationStatus = validationResultIsValid(validationResult) ? validationResult.status : validationResult;
          return validationStatus || VALIDATION_STATUS.valid;
        },
        _isCellChanged(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {
          var _a2, _b2;
          var cell = null === (_a2 = oldRow.cells) || void 0 === _a2 ? void 0 : _a2[columnIndex];
          var oldValidationStatus = this._getValidationStatus({
            status: null === cell || void 0 === cell ? void 0 : cell.validationStatus
          });
          var validatingController = this.getController("validating");
          var validationResult = validatingController.getCellValidationResult({
            rowKey: oldRow.key,
            columnIndex
          });
          var validationData = validatingController._getValidationData(oldRow.key);
          var newValidationStatus = this._getValidationStatus(validationResult);
          var rowIsModified = JSON.stringify(newRow.modifiedValues) !== JSON.stringify(oldRow.modifiedValues);
          var validationStatusChanged = oldValidationStatus !== newValidationStatus && rowIsModified;
          var cellIsMarkedAsInvalid = renderer_default(null === cell || void 0 === cell ? void 0 : cell.cellElement).hasClass(this.addWidgetPrefix(INVALIDATE_CLASS));
          var hasValidationRules = null === (_b2 = null === cell || void 0 === cell ? void 0 : cell.column.validationRules) || void 0 === _b2 ? void 0 : _b2.length;
          var rowEditStateChanged = oldRow.isEditing !== newRow.isEditing && hasValidationRules;
          var cellValidationStateChanged = validationStatusChanged || validationData.isValid && cellIsMarkedAsInvalid;
          if (rowEditStateChanged || cellValidationStateChanged) {
            return true;
          }
          return this.callBase.apply(this, arguments);
        }
      }
    },
    views: {
      rowsView: {
        updateFreeSpaceRowHeight($table) {
          var $rowElements;
          var $freeSpaceRowElement;
          var $freeSpaceRowElements;
          var $element = this.element();
          var $tooltipContent = $element && $element.find(".".concat(this.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS), " .dx-overlay-content"));
          this.callBase($table);
          if ($tooltipContent && $tooltipContent.length) {
            $rowElements = this._getRowElements();
            $freeSpaceRowElements = this._getFreeSpaceRowElements($table);
            $freeSpaceRowElement = $freeSpaceRowElements.first();
            if ($freeSpaceRowElement && 1 === $rowElements.length && (!$freeSpaceRowElement.is(":visible") || getOuterHeight($tooltipContent) > getOuterHeight($freeSpaceRowElement))) {
              $freeSpaceRowElements.show();
              setHeight2($freeSpaceRowElements, getOuterHeight($tooltipContent));
              return true;
            }
          }
          return;
        },
        _formItemPrepared(cellOptions, $container) {
          this.callBase.apply(this, arguments);
          deferUpdate(() => {
            var $editor = $container.find(".dx-widget").first();
            var isEditorDisposed = $editor.length && !$editor.children().length;
            if (!isEditorDisposed) {
              this.getController("validating").createValidator(cellOptions, $editor);
            }
          });
        },
        _cellPrepared($cell, parameters) {
          if (!this.getController("editing").isFormOrPopupEditMode()) {
            this.getController("validating").createValidator(parameters, $cell);
          }
          this.callBase.apply(this, arguments);
        },
        _restoreErrorRow(contentTable) {
          var editingController = this.getController("editing");
          editingController && editingController.hasChanges() && this._getRowElements(contentTable).each((_, item) => {
            var rowOptions = renderer_default(item).data("options");
            if (rowOptions) {
              var change = editingController.getChangeByKey(rowOptions.key);
              change && editingController._showErrorRow(change);
            }
          });
        }
      }
    }
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/validating.js
m_core_default.registerModule("validating", validatingModule);

// node_modules/devextreme/esm/__internal/grids/grid_core/virtual_data_loader/m_virtual_data_loader.js
var LEGACY_SCROLLING_MODE2 = "scrolling.legacyMode";
var needTwoPagesLoading = (that) => that.option("scrolling.loadTwoPagesOnStart") || that._controller.isVirtual() || that._controller.getViewportItemIndex() > 0;
var getBeginPageIndex = (that) => that._cache.length ? that._cache[0].pageIndex : -1;
var getEndPageIndex = (that) => that._cache.length ? that._cache[that._cache.length - 1].pageIndex : -1;
var fireChanged = (that, changed, args) => {
  that._isChangedFiring = true;
  changed(args);
  that._isChangedFiring = false;
};
var processDelayChanged = (that, changed, args) => {
  if (that._isDelayChanged) {
    that._isDelayChanged = false;
    fireChanged(that, changed, args);
    return true;
  }
};
var getViewportPageCount = (that) => {
  var pageSize = that._dataOptions.pageSize();
  var preventPreload = that.option("scrolling.preventPreload");
  if (preventPreload) {
    return 0;
  }
  var realViewportSize = that._controller.viewportSize();
  if (that._controller.isVirtualMode() && that.option("scrolling.removeInvisiblePages")) {
    realViewportSize = 0;
    var viewportSize = that._controller.viewportSize() * that._controller.viewportItemSize();
    var offset2 = that._controller.getContentOffset();
    var position3 = that._controller.getViewportPosition();
    var virtualItemsCount = that._controller.virtualItemsCount();
    var totalItemsCount = that._dataOptions.totalItemsCount();
    for (var itemIndex = virtualItemsCount.begin; itemIndex < totalItemsCount; itemIndex++) {
      if (offset2 >= position3 + viewportSize) {
        break;
      }
      var itemSize = that._controller.getItemSizes()[itemIndex] || that._controller.viewportItemSize();
      offset2 += itemSize;
      if (offset2 >= position3) {
        realViewportSize++;
      }
    }
  }
  return pageSize && realViewportSize > 0 ? Math.ceil(realViewportSize / pageSize) : 1;
};
var getPreloadPageCount = (that, previous) => {
  var preloadEnabled = that.option("scrolling.preloadEnabled");
  var pageCount = getViewportPageCount(that);
  var isAppendMode3 = that._controller.isAppendMode();
  if (pageCount) {
    if (previous) {
      pageCount = preloadEnabled ? 1 : 0;
    } else {
      if (preloadEnabled) {
        pageCount++;
      }
      if (isAppendMode3 || !needTwoPagesLoading(that)) {
        pageCount--;
      }
    }
  }
  return pageCount;
};
var getPageIndexForLoad = (that) => {
  var result2 = -1;
  var beginPageIndex = getBeginPageIndex(that);
  var dataOptions = that._dataOptions;
  if (beginPageIndex < 0) {
    result2 = that._pageIndex;
  } else if (!that._cache[that._pageIndex - beginPageIndex]) {
    result2 = that._pageIndex;
  } else if (beginPageIndex >= 0 && that._controller.viewportSize() >= 0) {
    if (beginPageIndex > 0) {
      var needToLoadPageBeforeLast = getEndPageIndex(that) + 1 === dataOptions.pageCount() && that._cache.length < getPreloadPageCount(that) + 1;
      var needToLoadPrevPage = needToLoadPageBeforeLast || that._pageIndex === beginPageIndex && getPreloadPageCount(that, true);
      if (needToLoadPrevPage) {
        result2 = beginPageIndex - 1;
      }
    }
    if (result2 < 0) {
      var needToLoadNextPage = beginPageIndex + that._cache.length <= that._pageIndex + getPreloadPageCount(that);
      if (needToLoadNextPage) {
        result2 = beginPageIndex + that._cache.length;
      }
    }
  }
  if (that._loadingPageIndexes[result2]) {
    result2 = -1;
  }
  return result2;
};
var loadCore = (that, pageIndex) => {
  var dataOptions = that._dataOptions;
  if (pageIndex === that.pageIndex() || !dataOptions.isLoading() && pageIndex < dataOptions.pageCount() || !dataOptions.hasKnownLastPage() && pageIndex === dataOptions.pageCount()) {
    dataOptions.pageIndex(pageIndex);
    that._loadingPageIndexes[pageIndex] = true;
    return when(dataOptions.load()).always(() => {
      that._loadingPageIndexes[pageIndex] = false;
    });
  }
};
var processChanged = (that, changed, changeType, isDelayChanged, removeCacheItem) => {
  var dataOptions = that._dataOptions;
  var items = dataOptions.items().slice();
  var change = isObject(changeType) ? changeType : void 0;
  var isPrepend = "prepend" === changeType;
  var viewportItems = dataOptions.viewportItems();
  if (changeType && isString(changeType) && !that._isDelayChanged) {
    change = {
      changeType,
      items
    };
    if (removeCacheItem) {
      change.removeCount = removeCacheItem.itemsCount;
      if (change.removeCount && dataOptions.correctCount) {
        change.removeCount = dataOptions.correctCount(viewportItems, change.removeCount, isPrepend);
      }
    }
  }
  var removeItemCount = removeCacheItem ? removeCacheItem.itemsLength : 0;
  if (removeItemCount && dataOptions.correctCount) {
    removeItemCount = dataOptions.correctCount(viewportItems, removeItemCount, isPrepend);
  }
  if ("append" === changeType) {
    viewportItems.push.apply(viewportItems, items);
    if (removeCacheItem) {
      viewportItems.splice(0, removeItemCount);
    }
  } else if (isPrepend) {
    viewportItems.unshift.apply(viewportItems, items);
    if (removeCacheItem) {
      viewportItems.splice(-removeItemCount);
    }
  } else {
    that._dataOptions.viewportItems(items);
  }
  dataOptions.updateLoading();
  that._lastPageIndex = that.pageIndex();
  that._isDelayChanged = isDelayChanged;
  if (!isDelayChanged) {
    fireChanged(that, changed, change);
  }
};
var VirtualDataLoader = class {
  constructor(controller, dataOptions) {
    this._dataOptions = dataOptions;
    this._controller = controller;
    this._pageIndex = this._lastPageIndex = dataOptions.pageIndex();
    this._cache = [];
    this._loadingPageIndexes = {};
  }
  option() {
    return this._controller.option.apply(this._controller, arguments);
  }
  viewportItemIndexChanged(itemIndex) {
    var pageSize = this._dataOptions.pageSize();
    var pageCount = this._dataOptions.pageCount();
    var virtualMode = this._controller.isVirtualMode();
    var appendMode = this._controller.isAppendMode();
    var totalItemsCount = this._dataOptions.totalItemsCount();
    var newPageIndex;
    if (pageSize && (virtualMode || appendMode) && totalItemsCount >= 0) {
      var viewportSize = this._controller.viewportSize();
      if (viewportSize && itemIndex + viewportSize >= totalItemsCount && !this._controller.isVirtual()) {
        if (this._dataOptions.hasKnownLastPage()) {
          newPageIndex = pageCount - 1;
          var lastPageSize = totalItemsCount % pageSize;
          if (newPageIndex > 0 && lastPageSize > 0 && lastPageSize < viewportSize) {
            newPageIndex--;
          }
        } else {
          newPageIndex = pageCount;
        }
      } else {
        newPageIndex = Math.floor(itemIndex / pageSize);
        var maxPageIndex = pageCount - 1;
        newPageIndex = Math.max(newPageIndex, 0);
        newPageIndex = Math.min(newPageIndex, maxPageIndex);
      }
      this.pageIndex(newPageIndex);
      return this.load();
    }
  }
  pageIndex(pageIndex) {
    var isVirtualMode3 = this._controller.isVirtualMode();
    var isAppendMode3 = this._controller.isAppendMode();
    if (false !== this.option(LEGACY_SCROLLING_MODE2) && (isVirtualMode3 || isAppendMode3)) {
      if (void 0 !== pageIndex) {
        this._pageIndex = pageIndex;
      }
      return this._pageIndex;
    }
    return this._dataOptions.pageIndex(pageIndex);
  }
  beginPageIndex(defaultPageIndex) {
    var index2 = getBeginPageIndex(this);
    if (index2 < 0) {
      index2 = void 0 !== defaultPageIndex ? defaultPageIndex : this.pageIndex();
    }
    return index2;
  }
  endPageIndex() {
    var endPageIndex = getEndPageIndex(this);
    return endPageIndex > 0 ? endPageIndex : this._lastPageIndex;
  }
  pageSize() {
    return this._dataOptions.pageSize();
  }
  load() {
    var dataOptions = this._dataOptions;
    var result2;
    var isVirtualMode3 = this._controller.isVirtualMode();
    var isAppendMode3 = this._controller.isAppendMode();
    if (false !== this.option(LEGACY_SCROLLING_MODE2) && (isVirtualMode3 || isAppendMode3)) {
      var pageIndexForLoad = getPageIndexForLoad(this);
      if (pageIndexForLoad >= 0) {
        var loadResult = loadCore(this, pageIndexForLoad);
        if (loadResult) {
          result2 = new Deferred();
          loadResult.done(() => {
            var delayDeferred = this._delayDeferred;
            if (delayDeferred) {
              delayDeferred.done(result2.resolve).fail(result2.reject);
            } else {
              result2.resolve();
            }
          }).fail(result2.reject);
          dataOptions.updateLoading();
        }
      }
    } else {
      result2 = dataOptions.load();
    }
    if (!result2 && this._lastPageIndex !== this.pageIndex()) {
      this._dataOptions.onChanged({
        changeType: "pageIndex"
      });
    }
    return result2 || new Deferred().resolve();
  }
  loadIfNeed() {
    var isVirtualMode3 = this._controller.isVirtualMode();
    var isAppendMode3 = this._controller.isAppendMode();
    if ((isVirtualMode3 || isAppendMode3) && !this._dataOptions.isLoading() && (!this._isChangedFiring || this._controller.isVirtual())) {
      var position3 = this._controller.getViewportPosition();
      if (position3 > 0) {
        this._controller._setViewportPositionCore(position3);
      } else {
        this.load();
      }
    }
  }
  handleDataChanged(callBase, e) {
    var dataOptions = this._dataOptions;
    var lastCacheLength = this._cache.length;
    var changeType;
    var removeInvisiblePages;
    var isVirtualMode3 = this._controller.isVirtualMode();
    var isAppendMode3 = this._controller.isAppendMode();
    if (e && e.changes) {
      fireChanged(this, callBase, e);
    } else if (false !== this.option(LEGACY_SCROLLING_MODE2) && (isVirtualMode3 || isAppendMode3)) {
      var beginPageIndex = getBeginPageIndex(this);
      if (beginPageIndex >= 0) {
        if (isVirtualMode3 && beginPageIndex + this._cache.length !== dataOptions.pageIndex() && beginPageIndex - 1 !== dataOptions.pageIndex()) {
          lastCacheLength = 0;
          this._cache = [];
        }
        if (isAppendMode3) {
          if (0 === dataOptions.pageIndex()) {
            this._cache = [];
          } else if (dataOptions.pageIndex() < getEndPageIndex(this)) {
            fireChanged(this, callBase, {
              changeType: "append",
              items: []
            });
            return;
          }
        }
      }
      var cacheItem = {
        pageIndex: dataOptions.pageIndex(),
        itemsLength: dataOptions.items(true).length,
        itemsCount: this.itemsCount(true)
      };
      if (this.option("scrolling.removeInvisiblePages") && isVirtualMode3) {
        removeInvisiblePages = this._cache.length > Math.max(getPreloadPageCount(this) + (this.option("scrolling.preloadEnabled") ? 1 : 0), 2);
      } else {
        processDelayChanged(this, callBase, {
          isDelayed: true
        });
      }
      var removeCacheItem;
      if (beginPageIndex === dataOptions.pageIndex() + 1) {
        if (removeInvisiblePages) {
          removeCacheItem = this._cache.pop();
        }
        changeType = "prepend";
        this._cache.unshift(cacheItem);
      } else {
        if (removeInvisiblePages) {
          removeCacheItem = this._cache.shift();
        }
        changeType = "append";
        this._cache.push(cacheItem);
      }
      var isDelayChanged = isVirtualMode3 && 0 === lastCacheLength && needTwoPagesLoading(this);
      processChanged(this, callBase, this._cache.length > 1 ? changeType : void 0, isDelayChanged, removeCacheItem);
      this._delayDeferred = this.load().done(() => {
        if (processDelayChanged(this, callBase)) {
          this.load();
        }
      });
    } else {
      processChanged(this, callBase, e);
    }
  }
  getDelayDeferred() {
    return this._delayDeferred;
  }
  itemsCount(isBase) {
    var count = 0;
    var isVirtualMode3 = this._controller.isVirtualMode();
    if (!isBase && isVirtualMode3) {
      this._cache.forEach((cacheItem) => {
        count += cacheItem.itemsCount;
      });
    } else {
      count = this._dataOptions.itemsCount();
    }
    return count;
  }
  virtualItemsCount() {
    var pageIndex = getBeginPageIndex(this);
    if (pageIndex < 0) {
      pageIndex = this._dataOptions.pageIndex();
    }
    var beginItemsCount = pageIndex * this._dataOptions.pageSize();
    var itemsCount = this._cache.length * this._dataOptions.pageSize();
    var endItemsCount = Math.max(0, this._dataOptions.totalItemsCount() - itemsCount - beginItemsCount);
    return {
      begin: beginItemsCount,
      end: endItemsCount
    };
  }
  reset() {
    this._loadingPageIndexes = {};
    this._cache = [];
  }
};

// node_modules/devextreme/esm/__internal/grids/grid_core/virtual_scrolling/m_virtual_scrolling_core.js
var SCROLLING_MODE_INFINITE2 = "infinite";
var SCROLLING_MODE_VIRTUAL2 = "virtual";
var LEGACY_SCROLLING_MODE3 = "scrolling.legacyMode";
var isVirtualMode = (that) => that.option("scrolling.mode") === SCROLLING_MODE_VIRTUAL2 || that._isVirtual;
var isAppendMode = (that) => that.option("scrolling.mode") === SCROLLING_MODE_INFINITE2 && !that._isVirtual;
function subscribeToExternalScrollers($element, scrollChangedHandler, $targetElement) {
  var $scrollElement;
  var scrollableArray = [];
  var scrollToArray = [];
  var disposeArray = [];
  $targetElement = $targetElement || $element;
  function getElementOffset(scrollable) {
    var $scrollableElement = scrollable.element ? scrollable.$element() : scrollable;
    var scrollableOffset = position_default.offset($scrollableElement);
    if (!scrollableOffset) {
      return $element.offset().top;
    }
    return scrollable.scrollTop() - (scrollableOffset.top - $element.offset().top);
  }
  var widgetScrollStrategy = {
    on(scrollable, eventName, handler) {
      scrollable.on("scroll", handler);
    },
    off(scrollable, eventName, handler) {
      scrollable.off("scroll", handler);
    }
  };
  function subscribeToScrollEvents($scrollElement2) {
    var isDocument = "#document" === $scrollElement2.get(0).nodeName;
    var isElement = $scrollElement2.get(0).nodeType === getWindow().Node.ELEMENT_NODE;
    var scrollable = $scrollElement2.data("dxScrollable");
    var eventsStrategy = widgetScrollStrategy;
    if (!scrollable) {
      scrollable = isDocument && renderer_default(getWindow()) || isElement && "auto" === $scrollElement2.css("overflowY") && $scrollElement2;
      eventsStrategy = events_engine_default;
      if (!scrollable) {
        return;
      }
    }
    var handler = /* @__PURE__ */ function(scrollable2) {
      return function() {
        var scrollTop = scrollable2.scrollTop() - getElementOffset(scrollable2);
        scrollTop = scrollTop > 0 ? scrollTop : 0;
        scrollChangedHandler(scrollTop);
      };
    }(scrollable);
    eventsStrategy.on(scrollable, "scroll", handler);
    scrollToArray.push((pos) => {
      var topOffset = getElementOffset(scrollable);
      var scrollMethod = scrollable.scrollTo ? "scrollTo" : "scrollTop";
      if (pos - topOffset >= 0) {
        scrollable[scrollMethod](pos + topOffset);
      }
    });
    scrollableArray.push(scrollable);
    disposeArray.push(() => {
      eventsStrategy.off(scrollable, "scroll", handler);
    });
  }
  var getScrollElementParent = ($element2) => {
    var _a2;
    return renderer_default(null !== (_a2 = $element2.get(0).parentNode) && void 0 !== _a2 ? _a2 : $element2.get(0).host);
  };
  for ($scrollElement = $targetElement.parent(); $scrollElement.length; $scrollElement = getScrollElementParent($scrollElement)) {
    subscribeToScrollEvents($scrollElement);
  }
  return {
    scrollTo(pos) {
      each(scrollToArray, (_, scrollTo) => {
        scrollTo(pos);
      });
    },
    dispose() {
      each(disposeArray, (_, dispose) => {
        dispose();
      });
    }
  };
}
var VirtualScrollController = class_default.inherit(function() {
  var members = {
    ctor(component, dataOptions, isVirtual) {
      this._dataOptions = dataOptions;
      this.component = component;
      this._viewportSize = false === component.option(LEGACY_SCROLLING_MODE3) ? 15 : 0;
      this._viewportItemSize = 20;
      this._viewportItemIndex = 0;
      this._position = 0;
      this._isScrollingBack = false;
      this._contentSize = 0;
      this._itemSizes = {};
      this._sizeRatio = 1;
      this._isVirtual = isVirtual;
      this.positionChanged = callbacks_default();
      this._dataLoader = new VirtualDataLoader(this, this._dataOptions);
    },
    getItemSizes() {
      return this._itemSizes;
    },
    option() {
      return this.component.option.apply(this.component, arguments);
    },
    isVirtual() {
      return this._isVirtual;
    },
    virtualItemsCount() {
      if (isVirtualMode(this)) {
        var dataOptions = this._dataOptions;
        var totalItemsCount = dataOptions.totalItemsCount();
        if (false === this.option(LEGACY_SCROLLING_MODE3) && -1 !== totalItemsCount) {
          var viewportParams = this.getViewportParams();
          var loadedOffset = dataOptions.loadedOffset();
          var loadedItemCount = dataOptions.loadedItemCount();
          var skip = Math.max(viewportParams.skip, loadedOffset);
          var take = Math.min(viewportParams.take, loadedItemCount);
          var endItemsCount = Math.max(totalItemsCount - (skip + take), 0);
          return {
            begin: skip,
            end: endItemsCount
          };
        }
        return this._dataLoader.virtualItemsCount.apply(this._dataLoader, arguments);
      }
    },
    getScrollingTimeout() {
      var _a2;
      var renderAsync = this.option("scrolling.renderAsync");
      var scrollingTimeout = 0;
      if (!isDefined(renderAsync)) {
        scrollingTimeout = Math.min(this.option("scrolling.timeout") || 0, this._dataOptions.changingDuration());
        if (scrollingTimeout < this.option("scrolling.renderingThreshold")) {
          scrollingTimeout = this.option("scrolling.minTimeout") || 0;
        }
      } else if (renderAsync) {
        scrollingTimeout = null !== (_a2 = this.option("scrolling.timeout")) && void 0 !== _a2 ? _a2 : 0;
      }
      return scrollingTimeout;
    },
    setViewportPosition(position3) {
      var result2 = new Deferred();
      var scrollingTimeout = this.getScrollingTimeout();
      clearTimeout(this._scrollTimeoutID);
      if (scrollingTimeout > 0) {
        this._scrollTimeoutID = setTimeout(() => {
          this._setViewportPositionCore(position3);
          result2.resolve();
        }, scrollingTimeout);
      } else {
        this._setViewportPositionCore(position3);
        result2.resolve();
      }
      return result2.promise();
    },
    getViewportPosition() {
      return this._position;
    },
    getItemIndexByPosition(position3, viewportItemIndex, height) {
      position3 = null !== position3 && void 0 !== position3 ? position3 : this._position;
      var defaultItemSize = this.getItemSize();
      var offset2 = 0;
      var itemOffset = 0;
      var itemOffsetsWithSize = Object.keys(this._itemSizes).concat(-1);
      for (var i = 0; i < itemOffsetsWithSize.length && offset2 < position3; i++) {
        var itemOffsetWithSize = parseInt(itemOffsetsWithSize[i]);
        var itemOffsetDiff = (position3 - offset2) / defaultItemSize;
        if (itemOffsetWithSize < 0 || itemOffset + itemOffsetDiff < itemOffsetWithSize) {
          itemOffset += itemOffsetDiff;
          if (this._sizeRatio < 1 && isDefined(viewportItemIndex)) {
            itemOffset = viewportItemIndex + height / this._viewportItemSize;
          }
          break;
        } else {
          itemOffsetDiff = itemOffsetWithSize - itemOffset;
          offset2 += itemOffsetDiff * defaultItemSize;
          itemOffset += itemOffsetDiff;
        }
        var itemSize = this._itemSizes[itemOffsetWithSize];
        offset2 += itemSize;
        itemOffset += offset2 < position3 ? 1 : (position3 - offset2 + itemSize) / itemSize;
      }
      return Math.round(50 * itemOffset) / 50;
    },
    isScrollingBack() {
      return this._isScrollingBack;
    },
    _setViewportPositionCore(position3) {
      var prevPosition = this._position || 0;
      this._position = position3;
      if (prevPosition !== this._position) {
        this._isScrollingBack = this._position < prevPosition;
      }
      var itemIndex = this.getItemIndexByPosition();
      var result2 = this.setViewportItemIndex(itemIndex);
      this.positionChanged.fire();
      return result2;
    },
    setContentItemSizes(sizes) {
      var virtualItemsCount = this.virtualItemsCount();
      this._contentSize = sizes.reduce((a, b) => a + b, 0);
      if (virtualItemsCount) {
        sizes.forEach((size, index2) => {
          this._itemSizes[virtualItemsCount.begin + index2] = size;
        });
        var virtualContentSize = (virtualItemsCount.begin + virtualItemsCount.end + this.itemsCount()) * this._viewportItemSize;
        var contentHeightLimit = m_utils_default.getContentHeightLimit(browser_default);
        if (virtualContentSize > contentHeightLimit) {
          this._sizeRatio = contentHeightLimit / virtualContentSize;
        } else {
          this._sizeRatio = 1;
        }
      }
    },
    getItemSize() {
      return this._viewportItemSize * this._sizeRatio;
    },
    getItemOffset(itemIndex, isEnd) {
      var virtualItemsCount = this.virtualItemsCount();
      var itemCount = itemIndex;
      if (!virtualItemsCount) {
        return 0;
      }
      var offset2 = 0;
      var totalItemsCount = this._dataOptions.totalItemsCount();
      Object.keys(this._itemSizes).forEach((currentItemIndex) => {
        if (!itemCount) {
          return;
        }
        if (isEnd ? currentItemIndex >= totalItemsCount - itemIndex : currentItemIndex < itemIndex) {
          offset2 += this._itemSizes[currentItemIndex];
          itemCount--;
        }
      });
      return Math.floor(offset2 + itemCount * this._viewportItemSize * this._sizeRatio);
    },
    getContentOffset(type2) {
      var isEnd = "end" === type2;
      var virtualItemsCount = this.virtualItemsCount();
      if (!virtualItemsCount) {
        return 0;
      }
      return this.getItemOffset(isEnd ? virtualItemsCount.end : virtualItemsCount.begin, isEnd);
    },
    getVirtualContentSize() {
      var virtualItemsCount = this.virtualItemsCount();
      return virtualItemsCount ? this.getContentOffset("begin") + this.getContentOffset("end") + this._contentSize : 0;
    },
    getViewportItemIndex() {
      return this._viewportItemIndex;
    },
    setViewportItemIndex(itemIndex) {
      this._viewportItemIndex = itemIndex;
      if (false === this.option(LEGACY_SCROLLING_MODE3)) {
        return;
      }
      return this._dataLoader.viewportItemIndexChanged.apply(this._dataLoader, arguments);
    },
    viewportItemSize(size) {
      if (void 0 !== size) {
        this._viewportItemSize = size;
      }
      return this._viewportItemSize;
    },
    viewportSize(size) {
      if (void 0 !== size) {
        this._viewportSize = size;
      }
      return this._viewportSize;
    },
    viewportHeight(height, scrollTop) {
      var position3 = null !== scrollTop && void 0 !== scrollTop ? scrollTop : this._position;
      var begin = this.getItemIndexByPosition(position3);
      var end = this.getItemIndexByPosition(position3 + height, begin, height);
      this.viewportSize(Math.ceil(end - begin));
      if (!isDefined(scrollTop) && this._viewportItemIndex !== begin) {
        this._setViewportPositionCore(position3);
      }
    },
    reset(isRefresh) {
      this._dataLoader.reset();
      if (!isRefresh) {
        this._itemSizes = {};
      }
    },
    subscribeToWindowScrollEvents($element) {
      this._windowScroll = this._windowScroll || subscribeToExternalScrollers($element, (scrollTop) => {
        if (this.viewportItemSize()) {
          this.setViewportPosition(scrollTop);
        }
      });
    },
    dispose() {
      clearTimeout(this._scrollTimeoutID);
      this._windowScroll && this._windowScroll.dispose();
      this._windowScroll = null;
    },
    scrollTo(pos) {
      this._windowScroll && this._windowScroll.scrollTo(pos);
    },
    isVirtualMode() {
      return isVirtualMode(this);
    },
    isAppendMode() {
      return isAppendMode(this);
    },
    getViewportParams() {
      var _a2;
      var virtualMode = this.option("scrolling.mode") === SCROLLING_MODE_VIRTUAL2;
      var totalItemsCount = this._dataOptions.totalItemsCount();
      var hasKnownLastPage = this._dataOptions.hasKnownLastPage();
      var topIndex = hasKnownLastPage && this._viewportItemIndex > totalItemsCount ? totalItemsCount : this._viewportItemIndex;
      var bottomIndex = this._viewportSize + topIndex;
      var maxGap = this.option("scrolling.prerenderedRowChunkSize") || 1;
      var isScrollingBack = this.isScrollingBack();
      var minGap = null !== (_a2 = this.option("scrolling.prerenderedRowCount")) && void 0 !== _a2 ? _a2 : 1;
      var topMinGap = isScrollingBack ? minGap : 0;
      var bottomMinGap = isScrollingBack ? 0 : minGap;
      var skip = Math.floor(Math.max(0, topIndex - topMinGap) / maxGap) * maxGap;
      var take = Math.ceil((bottomIndex + bottomMinGap - skip) / maxGap) * maxGap;
      if (virtualMode) {
        var remainedItems = Math.max(0, totalItemsCount - skip);
        take = Math.min(take, remainedItems);
      }
      return {
        skip,
        take
      };
    },
    itemsCount() {
      var result2 = 0;
      if (this.option(LEGACY_SCROLLING_MODE3)) {
        result2 = this._dataLoader.itemsCount.apply(this._dataLoader, arguments);
      } else {
        result2 = this._dataOptions.itemsCount();
      }
      return result2;
    }
  };
  ["pageIndex", "beginPageIndex", "endPageIndex", "pageSize", "load", "loadIfNeed", "handleDataChanged", "getDelayDeferred"].forEach((name2) => {
    members[name2] = function() {
      return this._dataLoader[name2].apply(this._dataLoader, arguments);
    };
  });
  return members;
}());

// node_modules/devextreme/esm/__internal/grids/grid_core/virtual_scrolling/m_virtual_scrolling.js
var BOTTOM_LOAD_PANEL_CLASS = "bottom-load-panel";
var GROUP_SPACE_CLASS2 = "group-space";
var FREESPACE_CLASS = "dx-freespace-row";
var COLUMN_LINES_CLASS3 = "dx-column-lines";
var VIRTUAL_ROW_CLASS = "dx-virtual-row";
var ROW_INSERTED2 = "dx-row-inserted";
var SCROLLING_MODE_INFINITE3 = "infinite";
var SCROLLING_MODE_VIRTUAL3 = "virtual";
var LOAD_TIMEOUT = 300;
var LEGACY_SCROLLING_MODE4 = "scrolling.legacyMode";
var VISIBLE_PAGE_INDEX = "paging.pageIndex";
var isVirtualMode2 = function(that) {
  return that.option("scrolling.mode") === SCROLLING_MODE_VIRTUAL3;
};
var isAppendMode2 = function(that) {
  return that.option("scrolling.mode") === SCROLLING_MODE_INFINITE3;
};
var isVirtualPaging = function(that) {
  return isVirtualMode2(that) || isAppendMode2(that);
};
var correctCount = function(items, count, fromEnd, isItemCountableFunc) {
  for (var i = 0; i < count + 1; i++) {
    var item = items[fromEnd ? items.length - 1 - i : i];
    if (item && !isItemCountableFunc(item, i === count, fromEnd)) {
      count++;
    }
  }
  return count;
};
var isItemCountableByDataSource = function(item, dataSource) {
  return "data" === item.rowType && !item.isNewRow || "group" === item.rowType && dataSource.isGroupItemCountable(item.data);
};
var updateItemIndices = function(items) {
  items.forEach((item, index2) => {
    item.rowIndex = index2;
  });
  return items;
};
var VirtualScrollingDataSourceAdapterExtender = function() {
  var updateLoading = function(that) {
    var beginPageIndex = that._virtualScrollController.beginPageIndex(-1);
    if (isVirtualMode2(that)) {
      if (beginPageIndex < 0 || that.viewportSize() >= 0 && that.getViewportItemIndex() >= 0 && (beginPageIndex * that.pageSize() > that.getViewportItemIndex() || beginPageIndex * that.pageSize() + that.itemsCount() < that.getViewportItemIndex() + that.viewportSize()) && that._dataSource.isLoading()) {
        if (!that._isLoading) {
          that._isLoading = true;
          that.loadingChanged.fire(true);
        }
      } else if (that._isLoading) {
        that._isLoading = false;
        that.loadingChanged.fire(false);
      }
    }
  };
  var result2 = {
    init() {
      this.callBase.apply(this, arguments);
      this._items = [];
      this._totalCount = -1;
      this._isLoaded = true;
      this._loadPageCount = 1;
      this._virtualScrollController = new VirtualScrollController(this.component, this._getVirtualScrollDataOptions());
    },
    _getVirtualScrollDataOptions() {
      var that = this;
      return {
        pageSize: () => that.pageSize(),
        totalItemsCount: () => that.totalItemsCount(),
        hasKnownLastPage: () => that.hasKnownLastPage(),
        pageIndex: (index2) => that._dataSource.pageIndex(index2),
        isLoading: () => that._dataSource.isLoading() && !that.isCustomLoading(),
        pageCount: () => that.pageCount(),
        load: () => that._dataSource.load(),
        updateLoading() {
          updateLoading(that);
        },
        itemsCount: () => that.itemsCount(true),
        items: () => that._dataSource.items(),
        viewportItems(items) {
          if (items) {
            that._items = items;
          }
          return that._items;
        },
        onChanged(e) {
          that.changed.fire(e);
        },
        changingDuration() {
          if (that.isLoading()) {
            return LOAD_TIMEOUT;
          }
          return that._renderTime || 0;
        }
      };
    },
    _handleLoadingChanged(isLoading) {
      if (false === this.option(LEGACY_SCROLLING_MODE4)) {
        this.callBase.apply(this, arguments);
        return;
      }
      if (!isVirtualMode2(this) || this._isLoadingAll) {
        this._isLoading = isLoading;
        this.callBase.apply(this, arguments);
      }
      if (isLoading) {
        this._startLoadTime = /* @__PURE__ */ new Date();
      } else {
        this._startLoadTime = void 0;
      }
    },
    _handleLoadError() {
      if (false !== this.option(LEGACY_SCROLLING_MODE4)) {
        this._isLoading = false;
        this.loadingChanged.fire(false);
      }
      this.callBase.apply(this, arguments);
    },
    _handleDataChanged(e) {
      if (false === this.option(LEGACY_SCROLLING_MODE4)) {
        this._items = this._dataSource.items().slice();
        this._totalCount = this._dataSourceTotalCount(true);
        this.callBase.apply(this, arguments);
        return;
      }
      var callBase = this.callBase.bind(this);
      this._virtualScrollController.handleDataChanged(callBase, e);
    },
    _customizeRemoteOperations(options2, operationTypes) {
      var newMode = false === this.option(LEGACY_SCROLLING_MODE4);
      var renderAsync = this.option("scrolling.renderAsync");
      if (!isDefined(renderAsync)) {
        renderAsync = this._renderTime >= this.option("scrolling.renderingThreshold");
      }
      if ((isVirtualMode2(this) || isAppendMode2(this) && newMode) && !operationTypes.reload && (operationTypes.skip || newMode) && !renderAsync) {
        options2.delay = void 0;
      }
      this.callBase.apply(this, arguments);
    },
    items() {
      return this._items;
    },
    _dataSourceTotalCount(isBase) {
      return false === this.option(LEGACY_SCROLLING_MODE4) && isVirtualMode2(this) && !isBase ? this._totalCount : this.callBase();
    },
    itemsCount(isBase) {
      if (isBase || false === this.option(LEGACY_SCROLLING_MODE4)) {
        return this.callBase();
      }
      return this._virtualScrollController.itemsCount();
    },
    load(loadOptions) {
      if (false === this.option(LEGACY_SCROLLING_MODE4) || loadOptions) {
        return this.callBase(loadOptions);
      }
      return this._virtualScrollController.load();
    },
    isLoading() {
      return false === this.option(LEGACY_SCROLLING_MODE4) ? this._dataSource.isLoading() : this._isLoading;
    },
    isLoaded() {
      return this._dataSource.isLoaded() && this._isLoaded;
    },
    resetPagesCache(isLiveUpdate) {
      if (!isLiveUpdate) {
        this._virtualScrollController.reset(true);
      }
      this.callBase.apply(this, arguments);
    },
    _changeRowExpandCore() {
      var result3 = this.callBase.apply(this, arguments);
      if (false === this.option(LEGACY_SCROLLING_MODE4)) {
        return result3;
      }
      this.resetPagesCache();
      updateLoading(this);
      return result3;
    },
    reload() {
      this._dataSource.pageIndex(this.pageIndex());
      var virtualScrollController = this._virtualScrollController;
      if (false !== this.option(LEGACY_SCROLLING_MODE4) && virtualScrollController) {
        var d = new Deferred();
        this.callBase.apply(this, arguments).done((r) => {
          var delayDeferred = virtualScrollController.getDelayDeferred();
          if (delayDeferred) {
            delayDeferred.done(d.resolve).fail(d.reject);
          } else {
            d.resolve(r);
          }
        }).fail(d.reject);
        return d;
      }
      return this.callBase.apply(this, arguments);
    },
    refresh(options2, operationTypes) {
      if (false !== this.option(LEGACY_SCROLLING_MODE4)) {
        var {
          storeLoadOptions
        } = options2;
        var dataSource = this._dataSource;
        if (operationTypes.reload) {
          this._virtualScrollController.reset();
          dataSource.items().length = 0;
          this._isLoaded = false;
          updateLoading(this);
          this._isLoaded = true;
          if (isAppendMode2(this)) {
            this.pageIndex(0);
            dataSource.pageIndex(0);
            storeLoadOptions.pageIndex = 0;
            options2.pageIndex = 0;
            storeLoadOptions.skip = 0;
          } else {
            dataSource.pageIndex(this.pageIndex());
            if (dataSource.paginate()) {
              options2.pageIndex = this.pageIndex();
              storeLoadOptions.skip = this.pageIndex() * this.pageSize();
            }
          }
        } else if (isAppendMode2(this) && storeLoadOptions.skip && this._totalCountCorrection < 0) {
          storeLoadOptions.skip += this._totalCountCorrection;
        }
      }
      return this.callBase.apply(this, arguments);
    },
    dispose() {
      this._virtualScrollController.dispose();
      this.callBase.apply(this, arguments);
    },
    loadPageCount(count) {
      if (!isDefined(count)) {
        return this._loadPageCount;
      }
      this._loadPageCount = count;
    },
    _handleDataLoading(options2) {
      var loadPageCount = this.loadPageCount();
      var pageSize = this.pageSize();
      var newMode = false === this.option(LEGACY_SCROLLING_MODE4);
      var {
        storeLoadOptions
      } = options2;
      var takeIsDefined = isDefined(storeLoadOptions.take);
      options2.loadPageCount = loadPageCount;
      if (!options2.isCustomLoading && newMode && takeIsDefined && loadPageCount > 1 && pageSize > 0) {
        storeLoadOptions.take = loadPageCount * pageSize;
      }
      this.callBase.apply(this, arguments);
    },
    _loadPageSize() {
      return this.callBase.apply(this, arguments) * this.loadPageCount();
    }
  };
  ["beginPageIndex", "endPageIndex", "pageIndex"].forEach((name2) => {
    result2[name2] = function() {
      if (false === this.option(LEGACY_SCROLLING_MODE4)) {
        var dataSource = this._dataSource;
        return dataSource.pageIndex.apply(dataSource, arguments);
      }
      var virtualScrollController = this._virtualScrollController;
      return virtualScrollController[name2].apply(virtualScrollController, arguments);
    };
  });
  ["virtualItemsCount", "getContentOffset", "getVirtualContentSize", "setContentItemSizes", "setViewportPosition", "getViewportItemIndex", "setViewportItemIndex", "getItemIndexByPosition", "viewportSize", "viewportItemSize", "getItemSize", "getItemSizes", "loadIfNeed"].forEach((name2) => {
    result2[name2] = function() {
      var virtualScrollController = this._virtualScrollController;
      return virtualScrollController[name2].apply(virtualScrollController, arguments);
    };
  });
  return result2;
}();
var VirtualScrollingRowsViewExtender = /* @__PURE__ */ function() {
  var removeEmptyRows = function($emptyRows, className) {
    var tBodies = $emptyRows.toArray().map((row) => renderer_default(row).parent(".".concat(className)).get(0)).filter((row) => row);
    if (tBodies.length) {
      $emptyRows = renderer_default(tBodies);
    }
    var rowCount = className === FREESPACE_CLASS ? $emptyRows.length - 1 : $emptyRows.length;
    for (var i = 0; i < rowCount; i++) {
      $emptyRows.eq(i).remove();
    }
  };
  return {
    init() {
      var _a2;
      var dataController2 = this.getController("data");
      this.callBase();
      dataController2.pageChanged.add((pageIndex) => {
        var scrollTop = this._scrollTop;
        this.scrollToPage(null !== pageIndex && void 0 !== pageIndex ? pageIndex : dataController2.pageIndex());
        if (false === this.option(LEGACY_SCROLLING_MODE4) && this._scrollTop === scrollTop) {
          dataController2.updateViewport();
        }
      });
      dataController2.dataSourceChanged.add(() => {
        !this._scrollTop && this._scrollToCurrentPageOnResize();
      });
      null === (_a2 = dataController2.stateLoaded) || void 0 === _a2 ? void 0 : _a2.add(() => {
        this._scrollToCurrentPageOnResize();
      });
      this._scrollToCurrentPageOnResize();
    },
    _scrollToCurrentPageOnResize() {
      var dataController2 = this.getController("data");
      if (dataController2.pageIndex() > 0) {
        var resizeHandler = () => {
          this.resizeCompleted.remove(resizeHandler);
          this.scrollToPage(dataController2.pageIndex());
        };
        this.resizeCompleted.add(resizeHandler);
      }
    },
    scrollToPage(pageIndex) {
      var dataController2 = this._dataController;
      var pageSize = dataController2 ? dataController2.pageSize() : 0;
      var scrollPosition;
      if (isVirtualMode2(this) || isAppendMode2(this)) {
        var itemSize = dataController2.getItemSize();
        var itemSizes = dataController2.getItemSizes();
        var itemIndex = pageIndex * pageSize;
        scrollPosition = itemIndex * itemSize;
        for (var index2 in itemSizes) {
          if (parseInt(index2) < itemIndex) {
            scrollPosition += itemSizes[index2] - itemSize;
          }
        }
      } else {
        scrollPosition = 0;
      }
      this.scrollTo({
        y: scrollPosition,
        x: this._scrollLeft
      });
    },
    renderDelayedTemplates() {
      this.waitAsyncTemplates().done(() => {
        this._updateContentPosition(true);
      });
      this.callBase.apply(this, arguments);
    },
    _renderCore(e) {
      var startRenderTime = /* @__PURE__ */ new Date();
      var deferred = this.callBase.apply(this, arguments);
      var dataSource = this._dataController._dataSource;
      if (dataSource && e) {
        var itemCount = e.items ? e.items.length : 20;
        var viewportSize = this._dataController.viewportSize() || 20;
        if (m_utils_default.isVirtualRowRendering(this) && itemCount > 0 && false !== this.option(LEGACY_SCROLLING_MODE4)) {
          dataSource._renderTime = (/* @__PURE__ */ new Date() - startRenderTime) * viewportSize / itemCount;
        } else {
          dataSource._renderTime = /* @__PURE__ */ new Date() - startRenderTime;
        }
      }
      return deferred;
    },
    _getRowElements(tableElement) {
      var $rows = this.callBase(tableElement);
      return $rows && $rows.not(".".concat(VIRTUAL_ROW_CLASS));
    },
    _removeRowsElements(contentTable, removeCount, changeType) {
      var rowElements = this._getRowElements(contentTable).toArray();
      if ("append" === changeType) {
        rowElements = rowElements.slice(0, removeCount);
      } else {
        rowElements = rowElements.slice(-removeCount);
      }
      var errorHandlingController = this.getController("errorHandling");
      rowElements.map((rowElement) => {
        var $rowElement = renderer_default(rowElement);
        errorHandlingController && errorHandlingController.removeErrorRow($rowElement.next());
        $rowElement.remove();
      });
    },
    _updateContent(tableElement, change) {
      var $freeSpaceRowElements;
      var contentElement = this._findContentElement();
      var changeType = change && change.changeType;
      var d = Deferred();
      var contentTable = contentElement.children().first();
      if ("append" === changeType || "prepend" === changeType) {
        this.waitAsyncTemplates().done(() => {
          var $tBodies = this._getBodies(tableElement);
          if (1 === $tBodies.length) {
            this._getBodies(contentTable)["append" === changeType ? "append" : "prepend"]($tBodies.children());
          } else {
            $tBodies["append" === changeType ? "appendTo" : "prependTo"](contentTable);
          }
          tableElement.remove();
          $freeSpaceRowElements = this._getFreeSpaceRowElements(contentTable);
          removeEmptyRows($freeSpaceRowElements, FREESPACE_CLASS);
          if (change.removeCount) {
            this._removeRowsElements(contentTable, change.removeCount, changeType);
          }
          this._restoreErrorRow(contentTable);
          d.resolve();
        }).fail(d.reject);
      } else {
        this.callBase.apply(this, arguments).done(() => {
          if ("update" === changeType) {
            this._restoreErrorRow(contentTable);
          }
          d.resolve();
        }).fail(d.reject);
      }
      return d.promise().done(() => {
        this._updateBottomLoading();
      });
    },
    _addVirtualRow($table, isFixed, location, position3) {
      if (!position3) {
        return;
      }
      var $virtualRow = this._createEmptyRow(VIRTUAL_ROW_CLASS, isFixed, position3);
      $virtualRow = this._wrapRowIfNeed($table, $virtualRow);
      this._appendEmptyRow($table, $virtualRow, location);
    },
    _updateContentItemSizes() {
      var rowHeights = this._getRowHeights();
      var correctedRowHeights = this._correctRowHeights(rowHeights);
      this._dataController.setContentItemSizes(correctedRowHeights);
    },
    _updateViewportSize(viewportHeight, scrollTop) {
      if (!isDefined(viewportHeight)) {
        viewportHeight = this._hasHeight ? getOuterHeight(this.element()) : getOuterHeight(getWindow());
      }
      this._dataController.viewportHeight(viewportHeight, scrollTop);
    },
    _getRowHeights() {
      var _a2, _b2;
      var isPopupEditMode = null === (_b2 = null === (_a2 = this.getController("editing")) || void 0 === _a2 ? void 0 : _a2.isPopupEditMode) || void 0 === _b2 ? void 0 : _b2.call(_a2);
      var rowElements = this._getRowElements(this._tableElement).toArray();
      if (isPopupEditMode) {
        rowElements = rowElements.filter((row) => !renderer_default(row).hasClass(ROW_INSERTED2));
      }
      return rowElements.map((row) => getBoundingRect(row).height);
    },
    _correctRowHeights(rowHeights) {
      var dataController2 = this._dataController;
      var dataSource = dataController2._dataSource;
      var correctedRowHeights = [];
      var visibleRows = dataController2.getVisibleRows();
      var itemSize = 0;
      var firstCountableItem = true;
      var lastLoadIndex = -1;
      for (var i = 0; i < rowHeights.length; i++) {
        var currentItem = visibleRows[i];
        if (!isDefined(currentItem)) {
          continue;
        }
        if (false === this.option(LEGACY_SCROLLING_MODE4)) {
          if (lastLoadIndex >= 0 && lastLoadIndex !== currentItem.loadIndex) {
            correctedRowHeights.push(itemSize);
            itemSize = 0;
          }
          lastLoadIndex = currentItem.loadIndex;
        } else if (isItemCountableByDataSource(currentItem, dataSource)) {
          if (firstCountableItem) {
            firstCountableItem = false;
          } else {
            correctedRowHeights.push(itemSize);
            itemSize = 0;
          }
        }
        itemSize += rowHeights[i];
      }
      itemSize > 0 && correctedRowHeights.push(itemSize);
      return correctedRowHeights;
    },
    _updateContentPosition(isRender) {
      var dataController2 = this._dataController;
      var rowHeight = this._rowHeight || 20;
      dataController2.viewportItemSize(rowHeight);
      if (isVirtualMode2(this) || m_utils_default.isVirtualRowRendering(this)) {
        if (!isRender) {
          this._updateContentItemSizes();
        }
        var top = dataController2.getContentOffset("begin");
        var bottom = dataController2.getContentOffset("end");
        var $tables = this.getTableElements();
        var $virtualRows = $tables.children("tbody").children(".".concat(VIRTUAL_ROW_CLASS));
        removeEmptyRows($virtualRows, VIRTUAL_ROW_CLASS);
        $tables.each((index2, element) => {
          var isFixed = index2 > 0;
          var prevFixed = this._isFixedTableRendering;
          this._isFixedTableRendering = isFixed;
          this._addVirtualRow(renderer_default(element), isFixed, "top", top);
          this._addVirtualRow(renderer_default(element), isFixed, "bottom", bottom);
          this._isFixedTableRendering = prevFixed;
        });
      }
    },
    _isTableLinesDisplaysCorrect(table) {
      var hasColumnLines = table.find(".".concat(COLUMN_LINES_CLASS3)).length > 0;
      return hasColumnLines === this.option("showColumnLines");
    },
    _isColumnElementsEqual($columns, $virtualColumns) {
      var result2 = $columns.length === $virtualColumns.length;
      if (result2) {
        each($columns, (index2, element) => {
          if (element.style.width !== $virtualColumns[index2].style.width) {
            result2 = false;
            return result2;
          }
          return;
        });
      }
      return result2;
    },
    _getCellClasses(column) {
      var classes = [];
      var {
        cssClass
      } = column;
      var isExpandColumn = "expand" === column.command;
      cssClass && classes.push(cssClass);
      isExpandColumn && classes.push(this.addWidgetPrefix(GROUP_SPACE_CLASS2));
      return classes;
    },
    _findBottomLoadPanel($contentElement) {
      var $element = $contentElement || this.element();
      var $bottomLoadPanel = $element && $element.find(".".concat(this.addWidgetPrefix(BOTTOM_LOAD_PANEL_CLASS)));
      if ($bottomLoadPanel && $bottomLoadPanel.length) {
        return $bottomLoadPanel;
      }
    },
    _updateBottomLoading() {
      var virtualMode = isVirtualMode2(this);
      var appendMode = isAppendMode2(this);
      var showBottomLoading = !this._dataController.hasKnownLastPage() && this._dataController.isLoaded() && (virtualMode || appendMode);
      var $contentElement = this._findContentElement();
      var bottomLoadPanelElement = this._findBottomLoadPanel($contentElement);
      if (showBottomLoading) {
        if (!bottomLoadPanelElement) {
          renderer_default("<div>").addClass(this.addWidgetPrefix(BOTTOM_LOAD_PANEL_CLASS)).append(this._createComponent(renderer_default("<div>"), load_indicator_default).$element()).appendTo($contentElement);
        }
      } else if (bottomLoadPanelElement) {
        bottomLoadPanelElement.remove();
      }
    },
    _handleScroll(e) {
      var legacyScrollingMode = true === this.option(LEGACY_SCROLLING_MODE4);
      var zeroTopPosition = 0 === e.scrollOffset.top;
      var isScrollTopChanged = this._scrollTop !== e.scrollOffset.top;
      var hasScrolled = isScrollTopChanged || e.forceUpdateScrollPosition;
      var isValidScrollTarget = this._hasHeight || !legacyScrollingMode && zeroTopPosition;
      if (hasScrolled && isValidScrollTarget && this._rowHeight) {
        this._scrollTop = e.scrollOffset.top;
        var isVirtualRowRendering = isVirtualMode2(this) || "standard" !== this.option("scrolling.rowRenderingMode");
        if (isVirtualRowRendering && false === this.option(LEGACY_SCROLLING_MODE4)) {
          this._updateContentItemSizes();
          this._updateViewportSize(null, this._scrollTop);
        }
        this._dataController.setViewportPosition(e.scrollOffset.top);
      }
      this.callBase.apply(this, arguments);
    },
    _needUpdateRowHeight(itemsCount) {
      return this.callBase.apply(this, arguments) || itemsCount > 0 && isAppendMode2(this) && !m_utils_default.isVirtualRowRendering(this);
    },
    _updateRowHeight() {
      this.callBase.apply(this, arguments);
      if (this._rowHeight) {
        this._updateContentPosition();
        var viewportHeight = this._hasHeight ? getOuterHeight(this.element()) : getOuterHeight(getWindow());
        var dataController2 = this._dataController;
        if (false === this.option(LEGACY_SCROLLING_MODE4)) {
          this._updateViewportSize(viewportHeight);
          dataController2.updateViewport();
        } else {
          dataController2.viewportSize(Math.ceil(viewportHeight / this._rowHeight));
        }
      }
    },
    updateFreeSpaceRowHeight() {
      var result2 = this.callBase.apply(this, arguments);
      if (result2) {
        this._updateContentPosition();
      }
      return result2;
    },
    setLoading(isLoading, messageText) {
      var dataController2 = this._dataController;
      var hasBottomLoadPanel = dataController2.pageIndex() > 0 && dataController2.isLoaded() && !!this._findBottomLoadPanel();
      if (false === this.option(LEGACY_SCROLLING_MODE4) && isLoading && dataController2.isViewportChanging()) {
        return;
      }
      if (hasBottomLoadPanel) {
        isLoading = false;
      }
      this.callBase.call(this, isLoading, messageText);
    },
    throwHeightWarningIfNeed() {
      if (void 0 === this._hasHeight) {
        return;
      }
      var needToThrow = !this._hasHeight && isVirtualPaging(this);
      if (needToThrow && !this._heightWarningIsThrown) {
        this._heightWarningIsThrown = true;
        ui_errors_default.log("W1025");
      }
    },
    _resizeCore() {
      var that = this;
      var $element = that.element();
      that.callBase();
      this.throwHeightWarningIfNeed();
      if (that.component.$element() && !that._windowScroll && isElementInDom($element)) {
        that._windowScroll = subscribeToExternalScrollers($element, (scrollPos) => {
          if (!that._hasHeight && that._rowHeight) {
            that._dataController.setViewportPosition(scrollPos);
          }
        }, that.component.$element());
        that.on("disposing", () => {
          that._windowScroll.dispose();
        });
      }
      if (false !== this.option(LEGACY_SCROLLING_MODE4)) {
        that.loadIfNeed();
      }
    },
    loadIfNeed() {
      var _a2;
      var dataController2 = this._dataController;
      null === (_a2 = null === dataController2 || void 0 === dataController2 ? void 0 : dataController2.loadIfNeed) || void 0 === _a2 ? void 0 : _a2.call(dataController2);
    },
    _restoreErrorRow() {
      if (false === this.option(LEGACY_SCROLLING_MODE4)) {
        var errorHandling = this.getController("errorHandling");
        null === errorHandling || void 0 === errorHandling ? void 0 : errorHandling.removeErrorRow();
      }
      this.callBase.apply(this, arguments);
    },
    dispose() {
      clearTimeout(this._scrollTimeoutID);
      this.callBase();
    }
  };
}();
var virtualScrollingModule = {
  defaultOptions: () => ({
    scrolling: {
      timeout: 300,
      updateTimeout: 300,
      minTimeout: 0,
      renderingThreshold: 100,
      removeInvisiblePages: true,
      rowPageSize: 5,
      prerenderedRowChunkSize: 1,
      mode: "standard",
      preloadEnabled: false,
      rowRenderingMode: "standard",
      loadTwoPagesOnStart: false,
      legacyMode: false,
      prerenderedRowCount: 1
    }
  }),
  extenders: {
    dataSourceAdapter: VirtualScrollingDataSourceAdapterExtender,
    controllers: {
      data: function() {
        var members = {
          _refreshDataSource() {
            var baseResult = this.callBase.apply(this, arguments) || new Deferred().resolve().promise();
            baseResult.done(this.initVirtualRows.bind(this));
            return baseResult;
          },
          _loadDataSource() {
            var _a2;
            if (this._rowsScrollController && isVirtualPaging(this)) {
              var {
                loadPageCount
              } = isDefined(this._loadViewportParams) ? this.getLoadPageParams() : {
                loadPageCount: void 0
              };
              loadPageCount >= 1 && (null === (_a2 = this._dataSource) || void 0 === _a2 ? void 0 : _a2.loadPageCount(loadPageCount));
            }
            return this.callBase.apply(this, arguments);
          },
          getRowPageSize() {
            var rowPageSize = this.option("scrolling.rowPageSize");
            var pageSize = this.pageSize();
            return pageSize && pageSize < rowPageSize ? pageSize : rowPageSize;
          },
          reload() {
            var rowsScrollController = this._rowsScrollController || this._dataSource;
            var itemIndex = rowsScrollController && rowsScrollController.getItemIndexByPosition();
            var result2 = this.callBase.apply(this, arguments);
            return result2 && result2.done(() => {
              var _a2;
              if (isVirtualMode2(this) || m_utils_default.isVirtualRowRendering(this)) {
                var rowIndexOffset = this.getRowIndexOffset();
                var rowIndex = Math.floor(itemIndex) - rowIndexOffset;
                var {
                  component
                } = this;
                var scrollable = component.getScrollable && component.getScrollable();
                var isSortingOperation = this.dataSource().operationTypes().sorting;
                if (scrollable && !isSortingOperation && rowIndex >= 0) {
                  var rowElement = component.getRowElement(rowIndex);
                  var $rowElement = rowElement && rowElement[0] && renderer_default(rowElement[0]);
                  var top = $rowElement && $rowElement.position().top;
                  var isChromeLatest = browser_default.chrome && Number(null !== (_a2 = browser_default.version) && void 0 !== _a2 ? _a2 : 0) >= 91;
                  var allowedTopOffset = browser_default.mozilla || isChromeLatest ? 1 : 0;
                  if (top > allowedTopOffset) {
                    top = Math.round(top + getOuterHeight($rowElement) * (itemIndex % 1));
                    scrollable.scrollTo({
                      y: top
                    });
                  }
                }
              }
            });
          },
          initVirtualRows() {
            var virtualRowsRendering = m_utils_default.isVirtualRowRendering(this);
            this._allItems = null;
            this._loadViewportParams = null;
            if ("virtual" !== this.option("scrolling.mode") && !virtualRowsRendering || !virtualRowsRendering || false !== this.option(LEGACY_SCROLLING_MODE4) && !this.option("scrolling.rowPageSize")) {
              this._visibleItems = null;
              this._rowsScrollController = null;
              return;
            }
            var pageIndex = !isVirtualMode2(this) && this.pageIndex() >= this.pageCount() ? this.pageCount() - 1 : this.pageIndex();
            this._rowPageIndex = Math.ceil(pageIndex * this.pageSize() / this.getRowPageSize());
            this._visibleItems = false === this.option(LEGACY_SCROLLING_MODE4) ? null : [];
            this._viewportChanging = false;
            this._needUpdateViewportAfterLoading = false;
            if (!this._rowsScrollController) {
              this._rowsScrollController = new VirtualScrollController(this.component, this._getRowsScrollDataOptions(), true);
              this._rowsScrollController.positionChanged.add(() => {
                var _a2;
                if (false === this.option(LEGACY_SCROLLING_MODE4)) {
                  this._viewportChanging = true;
                  this.loadViewport();
                  this._viewportChanging = false;
                  return;
                }
                null === (_a2 = this._dataSource) || void 0 === _a2 ? void 0 : _a2.setViewportItemIndex(this._rowsScrollController.getViewportItemIndex());
              });
            }
            if (false === this.option(LEGACY_SCROLLING_MODE4)) {
              this._updateLoadViewportParams();
            }
            if (this.isLoaded() && false !== this.option(LEGACY_SCROLLING_MODE4)) {
              this._rowsScrollController.load();
            }
          },
          isViewportChanging() {
            return this._viewportChanging;
          },
          _getRowsScrollDataOptions() {
            var that = this;
            var isItemCountable = function(item) {
              return isItemCountableByDataSource(item, that._dataSource);
            };
            return {
              pageSize: () => that.getRowPageSize(),
              loadedOffset() {
                var _a2;
                return isVirtualMode2(that) && (null === (_a2 = that._dataSource) || void 0 === _a2 ? void 0 : _a2.lastLoadOptions().skip) || 0;
              },
              loadedItemCount: () => that._itemCount,
              totalItemsCount() {
                if (isVirtualPaging(that)) {
                  return that.totalItemsCount();
                }
                return false === that.option(LEGACY_SCROLLING_MODE4) ? that._itemCount : that._items.filter(isItemCountable).length;
              },
              hasKnownLastPage: () => false === that.option(LEGACY_SCROLLING_MODE4) ? that.hasKnownLastPage() : true,
              pageIndex(index2) {
                if (void 0 !== index2) {
                  that._rowPageIndex = index2;
                }
                return that._rowPageIndex;
              },
              isLoading: () => that.isLoading(),
              pageCount() {
                var pageCount = Math.ceil(this.totalItemsCount() / this.pageSize());
                return pageCount || 1;
              },
              load() {
                if (that._rowsScrollController.pageIndex() >= this.pageCount()) {
                  that._rowPageIndex = this.pageCount() - 1;
                  that._rowsScrollController.pageIndex(that._rowPageIndex);
                }
                if (!this.items().length && this.totalItemsCount()) {
                  return;
                }
                that._rowsScrollController.handleDataChanged((change) => {
                  change = change || {};
                  change.changeType = change.changeType || "refresh";
                  change.items = change.items || that._visibleItems;
                  that._visibleItems.forEach((item, index2) => {
                    item.rowIndex = index2;
                  });
                  that._fireChanged(change);
                });
              },
              updateLoading() {
              },
              itemsCount() {
                return this.items(true).length;
              },
              correctCount: (items, count, fromEnd) => correctCount(items, count, fromEnd, (item, isNextAfterLast, fromEnd2) => {
                if (item.isNewRow) {
                  return isNextAfterLast && !fromEnd2;
                }
                if (isNextAfterLast && fromEnd2) {
                  return !item.isNewRow;
                }
                return isItemCountable(item);
              }),
              items(countableOnly) {
                var result2 = that._items;
                if (that.option(LEGACY_SCROLLING_MODE4)) {
                  var dataSource = that.dataSource();
                  var virtualItemsCount = null === dataSource || void 0 === dataSource ? void 0 : dataSource.virtualItemsCount();
                  var begin = virtualItemsCount ? virtualItemsCount.begin : 0;
                  var rowPageSize = that.getRowPageSize();
                  var skip = that._rowPageIndex * rowPageSize - begin;
                  var take = rowPageSize;
                  if (skip < 0) {
                    return [];
                  }
                  if (skip) {
                    skip = this.correctCount(result2, skip);
                    result2 = result2.slice(skip);
                  }
                  if (take) {
                    take = this.correctCount(result2, take);
                    result2 = result2.slice(0, take);
                  }
                }
                return countableOnly ? result2.filter(isItemCountable) : result2;
              },
              viewportItems(items) {
                if (items && false !== that.option(LEGACY_SCROLLING_MODE4)) {
                  that._visibleItems = items;
                }
                return that._visibleItems;
              },
              onChanged() {
              },
              changingDuration() {
                var dataSource = that.dataSource();
                if ((null === dataSource || void 0 === dataSource ? void 0 : dataSource.isLoading()) && false !== that.option(LEGACY_SCROLLING_MODE4)) {
                  return LOAD_TIMEOUT;
                }
                return (null === dataSource || void 0 === dataSource ? void 0 : dataSource._renderTime) || 0;
              }
            };
          },
          _updateItemsCore(change) {
            var delta = this.getRowIndexDelta();
            this.callBase.apply(this, arguments);
            if (false === this.option(LEGACY_SCROLLING_MODE4) && m_utils_default.isVirtualRowRendering(this)) {
              if ("update" === change.changeType && 0 === change.rowIndices.length && change.cancelEmptyChanges) {
                change.cancel = true;
              }
              return;
            }
            var rowsScrollController = this._rowsScrollController;
            if (rowsScrollController) {
              var visibleItems = this._visibleItems;
              var isRefresh = "refresh" === change.changeType || change.isLiveUpdate;
              if ("append" === change.changeType && change.items && !change.items.length) {
                return;
              }
              if (isRefresh || "append" === change.changeType || "prepend" === change.changeType) {
                change.cancel = true;
                isRefresh && rowsScrollController.reset(true);
                rowsScrollController.load();
              } else {
                if ("update" === change.changeType) {
                  change.rowIndices.forEach((rowIndex, index2) => {
                    var changeType = change.changeTypes[index2];
                    var newItem = change.items[index2];
                    if ("update" === changeType) {
                      visibleItems[rowIndex] = newItem;
                    } else if ("insert" === changeType) {
                      visibleItems.splice(rowIndex, 0, newItem);
                    } else if ("remove" === changeType) {
                      visibleItems.splice(rowIndex, 1);
                    }
                  });
                } else {
                  visibleItems.forEach((item, index2) => {
                    visibleItems[index2] = this._items[index2 + delta] || visibleItems[index2];
                  });
                  change.items = visibleItems;
                }
                updateItemIndices(visibleItems);
              }
            }
          },
          _updateLoadViewportParams() {
            var viewportParams = this._rowsScrollController.getViewportParams();
            var pageSize = this.pageSize();
            if (viewportParams && !isVirtualPaging(this) && pageSize > 0) {
              var pageOffset = this.pageIndex() * pageSize;
              viewportParams.skip += pageOffset;
            }
            this._loadViewportParams = viewportParams;
          },
          _processItems() {
            var _a2;
            var resultItems = this.callBase.apply(this, arguments);
            if (false === this.option(LEGACY_SCROLLING_MODE4)) {
              var dataSource = this._dataSource;
              var currentIndex = null !== (_a2 = null === dataSource || void 0 === dataSource ? void 0 : dataSource.lastLoadOptions().skip) && void 0 !== _a2 ? _a2 : 0;
              var prevCountable;
              var prevRowType;
              var isPrevRowNew;
              var wasCountableItem = false;
              var newRows = [];
              resultItems.forEach((item) => {
                var {
                  rowType
                } = item;
                var itemCountable = isItemCountableByDataSource(item, dataSource);
                var isNextGroupItem = "group" === rowType && (prevCountable || itemCountable || "group" !== prevRowType && currentIndex > 0);
                var isNextDataItem = "data" === rowType && itemCountable && (prevCountable || "group" !== prevRowType);
                if (!item.isNewRow && isDefined(prevCountable)) {
                  var isPrevNewRowFirst = isPrevRowNew && !wasCountableItem;
                  if ((isNextGroupItem || isNextDataItem) && !isPrevNewRowFirst) {
                    currentIndex++;
                  }
                }
                if (isNextGroupItem || isNextDataItem) {
                  wasCountableItem = true;
                }
                if (item.isNewRow) {
                  newRows.push(item);
                } else {
                  newRows.forEach((it) => {
                    it.loadIndex = currentIndex;
                  });
                  newRows = [];
                }
                item.loadIndex = currentIndex;
                prevCountable = itemCountable;
                prevRowType = rowType;
                isPrevRowNew = item.isNewRow;
              });
              newRows.forEach((it) => {
                it.loadIndex = currentIndex;
              });
            }
            return resultItems;
          },
          _afterProcessItems(items) {
            this._itemCount = items.filter((item) => isItemCountableByDataSource(item, this._dataSource)).length;
            if (isDefined(this._loadViewportParams)) {
              this._updateLoadViewportParams();
              var result2 = items;
              this._allItems = items;
              if (items.length) {
                var {
                  skipForCurrentPage
                } = this.getLoadPageParams(true);
                var skip = items[0].loadIndex + skipForCurrentPage;
                var {
                  take
                } = this._loadViewportParams;
                result2 = items.filter((it) => {
                  var isNewRowInEmptyData = it.isNewRow && it.loadIndex === skip && 0 === take;
                  var isLoadIndexGreaterStart = it.loadIndex >= skip;
                  var isLoadIndexLessEnd = it.loadIndex < skip + take || isNewRowInEmptyData;
                  return isLoadIndexGreaterStart && isLoadIndexLessEnd;
                });
              }
              return result2;
            }
            return this.callBase.apply(this, arguments);
          },
          _applyChange(change) {
            var that = this;
            var {
              items
            } = change;
            var {
              changeType
            } = change;
            var {
              removeCount
            } = change;
            if (removeCount) {
              var fromEnd = "prepend" === changeType;
              removeCount = correctCount(that._items, removeCount, fromEnd, (item, isNextAfterLast) => "data" === item.rowType && !item.isNewRow || "group" === item.rowType && (that._dataSource.isGroupItemCountable(item.data) || isNextAfterLast));
              change.removeCount = removeCount;
            }
            switch (changeType) {
              case "prepend":
                that._items.unshift.apply(that._items, items);
                if (removeCount) {
                  that._items.splice(-removeCount);
                }
                break;
              case "append":
                that._items.push.apply(that._items, items);
                if (removeCount) {
                  that._items.splice(0, removeCount);
                }
                break;
              default:
                that.callBase(change);
            }
          },
          items(allItems) {
            return allItems ? this._allItems || this._items : this._visibleItems || this._items;
          },
          getRowIndexDelta() {
            var delta = 0;
            if (this.option(LEGACY_SCROLLING_MODE4)) {
              var visibleItems = this._visibleItems;
              if (visibleItems && visibleItems[0]) {
                delta = this._items.indexOf(visibleItems[0]);
              }
            }
            return delta < 0 ? 0 : delta;
          },
          getRowIndexOffset(byLoadedRows, needGroupOffset) {
            var _a2, _b2;
            var offset2 = 0;
            var dataSource = this.dataSource();
            var rowsScrollController = this._rowsScrollController;
            var newMode = false === this.option(LEGACY_SCROLLING_MODE4);
            var virtualPaging = isVirtualPaging(this);
            if (rowsScrollController && !byLoadedRows) {
              if (newMode && isDefined(this._loadViewportParams)) {
                var {
                  skipForCurrentPage,
                  pageIndex
                } = this.getLoadPageParams(true);
                var items = this.items(true);
                offset2 = virtualPaging ? pageIndex * this.pageSize() : 0;
                if (items.length) {
                  var firstLoadIndex = items[0].loadIndex;
                  offset2 += items.filter((item) => item.loadIndex < firstLoadIndex + skipForCurrentPage).length;
                }
              } else {
                offset2 = rowsScrollController.beginPageIndex() * rowsScrollController.pageSize();
              }
            } else if (virtualPaging && newMode && dataSource) {
              var lastLoadOptions = dataSource.lastLoadOptions();
              if (needGroupOffset && (null === (_a2 = lastLoadOptions.skips) || void 0 === _a2 ? void 0 : _a2.length)) {
                offset2 = lastLoadOptions.skips.reduce((res, skip) => res + skip, 0);
              } else {
                offset2 = null !== (_b2 = lastLoadOptions.skip) && void 0 !== _b2 ? _b2 : 0;
              }
            } else if (isVirtualMode2(this) && dataSource) {
              offset2 = dataSource.beginPageIndex() * dataSource.pageSize();
            }
            return offset2;
          },
          getDataIndex() {
            if (false === this.option(LEGACY_SCROLLING_MODE4)) {
              return this.getRowIndexOffset(true, true);
            }
            return this.callBase.apply(this, arguments);
          },
          viewportSize() {
            var rowsScrollController = this._rowsScrollController;
            var dataSource = this._dataSource;
            var result2 = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.viewportSize.apply(rowsScrollController, arguments);
            if (false === this.option(LEGACY_SCROLLING_MODE4)) {
              return result2;
            }
            return null === dataSource || void 0 === dataSource ? void 0 : dataSource.viewportSize.apply(dataSource, arguments);
          },
          viewportHeight(height, scrollTop) {
            var _a2;
            null === (_a2 = this._rowsScrollController) || void 0 === _a2 ? void 0 : _a2.viewportHeight(height, scrollTop);
          },
          viewportItemSize() {
            var rowsScrollController = this._rowsScrollController;
            var dataSource = this._dataSource;
            var result2 = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.viewportItemSize.apply(rowsScrollController, arguments);
            if (false === this.option(LEGACY_SCROLLING_MODE4)) {
              return result2;
            }
            return null === dataSource || void 0 === dataSource ? void 0 : dataSource.viewportItemSize.apply(dataSource, arguments);
          },
          setViewportPosition() {
            var rowsScrollController = this._rowsScrollController;
            var dataSource = this._dataSource;
            this._isPaging = false;
            if (rowsScrollController) {
              rowsScrollController.setViewportPosition.apply(rowsScrollController, arguments);
            } else {
              null === dataSource || void 0 === dataSource ? void 0 : dataSource.setViewportPosition.apply(dataSource, arguments);
            }
          },
          setContentItemSizes(sizes) {
            var rowsScrollController = this._rowsScrollController;
            var dataSource = this._dataSource;
            var result2 = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.setContentItemSizes(sizes);
            if (false === this.option(LEGACY_SCROLLING_MODE4)) {
              return result2;
            }
            return null === dataSource || void 0 === dataSource ? void 0 : dataSource.setContentItemSizes(sizes);
          },
          getPreloadedRowCount() {
            var preloadCount = this.option("scrolling.preloadedRowCount");
            var preloadEnabled = this.option("scrolling.preloadEnabled");
            if (isDefined(preloadCount)) {
              return preloadCount;
            }
            var viewportSize = this.viewportSize();
            return preloadEnabled ? 2 * viewportSize : viewportSize;
          },
          getLoadPageParams(byLoadedPage) {
            var _a2, _b2;
            var pageSize = this.pageSize();
            var viewportParams = this._loadViewportParams;
            var lastLoadOptions = null === (_a2 = this._dataSource) || void 0 === _a2 ? void 0 : _a2.lastLoadOptions();
            var loadedPageIndex = (null === lastLoadOptions || void 0 === lastLoadOptions ? void 0 : lastLoadOptions.pageIndex) || 0;
            var loadedTake = (null === lastLoadOptions || void 0 === lastLoadOptions ? void 0 : lastLoadOptions.take) || 0;
            var isScrollingBack = this._rowsScrollController.isScrollingBack();
            var topPreloadCount = isScrollingBack ? this.getPreloadedRowCount() : 0;
            var bottomPreloadCount = isScrollingBack ? 0 : this.getPreloadedRowCount();
            var totalCountCorrection = (null === (_b2 = this._dataSource) || void 0 === _b2 ? void 0 : _b2.totalCountCorrection()) || 0;
            var skipWithPreload = Math.max(0, viewportParams.skip - topPreloadCount);
            var pageIndex = byLoadedPage ? loadedPageIndex : Math.floor(pageSize ? skipWithPreload / pageSize : 0);
            var pageOffset = pageIndex * pageSize;
            var skipForCurrentPage = viewportParams.skip - pageOffset;
            var loadingTake = viewportParams.take + skipForCurrentPage + bottomPreloadCount - totalCountCorrection;
            var take = byLoadedPage ? loadedTake : loadingTake;
            var loadPageCount = Math.ceil(pageSize ? take / pageSize : 0);
            return {
              pageIndex,
              loadPageCount: Math.max(1, loadPageCount),
              skipForCurrentPage: Math.max(0, skipForCurrentPage)
            };
          },
          _updateVisiblePageIndex(currentPageIndex) {
            if (!this._rowsScrollController) {
              return;
            }
            if (isDefined(currentPageIndex)) {
              this._silentOption(VISIBLE_PAGE_INDEX, currentPageIndex);
              this.pageChanged.fire();
              return;
            }
            var viewPortItemIndex = this._rowsScrollController.getViewportItemIndex();
            var newPageIndex = Math.floor(viewPortItemIndex / this.pageSize());
            if (this.pageIndex() !== newPageIndex) {
              this._silentOption(VISIBLE_PAGE_INDEX, newPageIndex);
              this.updateItems({
                changeType: "pageIndex"
              });
            }
          },
          _getChangedLoadParams() {
            var loadedPageParams = this.getLoadPageParams(true);
            var {
              pageIndex,
              loadPageCount
            } = this.getLoadPageParams();
            var pageIndexIsValid = this._pageIndexIsValid(pageIndex);
            var result2 = null;
            if (!this._isLoading && pageIndexIsValid && (pageIndex !== loadedPageParams.pageIndex || loadPageCount !== loadedPageParams.loadPageCount)) {
              result2 = {
                pageIndex,
                loadPageCount
              };
            }
            return result2;
          },
          _pageIndexIsValid(pageIndex) {
            var result2 = true;
            if (isAppendMode2(this) && this.hasKnownLastPage() || isVirtualMode2(this)) {
              result2 = pageIndex * this.pageSize() < this.totalItemsCount();
            }
            return result2;
          },
          _loadItems(checkLoading, viewportIsFilled) {
            var _a2, _b2;
            var virtualPaging = isVirtualPaging(this);
            var dataSourceAdapter = this._dataSource;
            var changedParams = this._getChangedLoadParams();
            var currentLoadPageCount = null !== (_a2 = null === dataSourceAdapter || void 0 === dataSourceAdapter ? void 0 : dataSourceAdapter.loadPageCount()) && void 0 !== _a2 ? _a2 : 0;
            var lastRequiredItemCount = this.pageSize() * currentLoadPageCount;
            var currentPageIndex = null !== (_b2 = null === dataSourceAdapter || void 0 === dataSourceAdapter ? void 0 : dataSourceAdapter.pageIndex()) && void 0 !== _b2 ? _b2 : 0;
            var pageIndexNotChanged = (null === changedParams || void 0 === changedParams ? void 0 : changedParams.pageIndex) === currentPageIndex;
            var allLoadedInAppendMode = isAppendMode2(this) && this.totalItemsCount() < lastRequiredItemCount;
            var isRepaintMode = "repaint" === this.option("editing.refreshMode");
            var pageIndexIncreased = (null === changedParams || void 0 === changedParams ? void 0 : changedParams.pageIndex) > currentPageIndex;
            var result2 = false;
            if (!dataSourceAdapter || virtualPaging && checkLoading && (isRepaintMode && viewportIsFilled || pageIndexIncreased || pageIndexNotChanged && allLoadedInAppendMode)) {
              return result2;
            }
            if (virtualPaging && this._isLoading) {
              this._needUpdateViewportAfterLoading = true;
            }
            if (virtualPaging && changedParams) {
              result2 = true;
              dataSourceAdapter.pageIndex(changedParams.pageIndex);
              dataSourceAdapter.loadPageCount(changedParams.loadPageCount);
              this._repaintChangesOnly = true;
              this._needUpdateDimensions = true;
              var viewportChanging = this._viewportChanging;
              this.load().always(() => {
                this._repaintChangesOnly = void 0;
                this._needUpdateDimensions = void 0;
              }).done(() => {
                var isLastPage = this.pageCount() > 0 && this.pageIndex() === this.pageCount() - 1;
                (viewportChanging || isLastPage) && this._updateVisiblePageIndex();
                if (this._needUpdateViewportAfterLoading) {
                  this._needUpdateViewportAfterLoading = false;
                  this.loadViewport({
                    checkLoadedParamsOnly: true
                  });
                }
              });
            }
            return result2;
          },
          loadViewport(params) {
            var _a2, _b2, _c;
            var {
              checkLoadedParamsOnly,
              checkLoading,
              viewportIsNotFilled
            } = null !== params && void 0 !== params ? params : {};
            var virtualPaging = isVirtualPaging(this);
            if (virtualPaging || m_utils_default.isVirtualRowRendering(this)) {
              this._updateLoadViewportParams();
              var loadingItemsStarted = this._loadItems(checkLoading, !viewportIsNotFilled);
              var isCustomLoading = null === (_a2 = this._dataSource) || void 0 === _a2 ? void 0 : _a2.isCustomLoading();
              var isLoading = checkLoading && !isCustomLoading && this._isLoading;
              var needToUpdateItems = !(loadingItemsStarted || isLoading || checkLoadedParamsOnly);
              if (needToUpdateItems) {
                var noPendingChangesInEditing = !(null === (_c = null === (_b2 = this.getController("editing")) || void 0 === _b2 ? void 0 : _b2.getChanges()) || void 0 === _c ? void 0 : _c.length);
                this.updateItems({
                  repaintChangesOnly: true,
                  needUpdateDimensions: true,
                  useProcessedItemsCache: noPendingChangesInEditing,
                  cancelEmptyChanges: true
                });
              }
            }
          },
          updateViewport() {
            var _a2, _b2;
            var viewportSize = this.viewportSize();
            var itemCount = this.items().length;
            var viewportIsNotFilled = viewportSize > itemCount;
            var currentTake = null !== (_b2 = null === (_a2 = this._loadViewportParams) || void 0 === _a2 ? void 0 : _a2.take) && void 0 !== _b2 ? _b2 : 0;
            var rowsScrollController = this._rowsScrollController;
            var newTake = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.getViewportParams().take;
            (viewportIsNotFilled || currentTake < newTake) && !this._isPaging && itemCount && this.loadViewport({
              checkLoading: true,
              viewportIsNotFilled
            });
          },
          loadIfNeed() {
            if (false === this.option(LEGACY_SCROLLING_MODE4)) {
              return;
            }
            var rowsScrollController = this._rowsScrollController;
            rowsScrollController && rowsScrollController.loadIfNeed();
            var dataSource = this._dataSource;
            return dataSource && dataSource.loadIfNeed();
          },
          getItemSize() {
            var rowsScrollController = this._rowsScrollController;
            if (rowsScrollController) {
              return rowsScrollController.getItemSize.apply(rowsScrollController, arguments);
            }
            var dataSource = this._dataSource;
            return dataSource && dataSource.getItemSize.apply(dataSource, arguments);
          },
          getItemSizes() {
            var rowsScrollController = this._rowsScrollController;
            if (rowsScrollController) {
              return rowsScrollController.getItemSizes.apply(rowsScrollController, arguments);
            }
            var dataSource = this._dataSource;
            return dataSource && dataSource.getItemSizes.apply(dataSource, arguments);
          },
          getContentOffset() {
            var rowsScrollController = this._rowsScrollController;
            if (rowsScrollController) {
              return rowsScrollController.getContentOffset.apply(rowsScrollController, arguments);
            }
            var dataSource = this._dataSource;
            return dataSource && dataSource.getContentOffset.apply(dataSource, arguments);
          },
          refresh(options2) {
            var dataSource = this._dataSource;
            if (dataSource && options2 && options2.load && isAppendMode2(this)) {
              dataSource.resetCurrentTotalCount();
            }
            return this.callBase.apply(this, arguments);
          },
          dispose() {
            var rowsScrollController = this._rowsScrollController;
            rowsScrollController && rowsScrollController.dispose();
            this.callBase.apply(this, arguments);
          },
          topItemIndex() {
            var _a2;
            return null === (_a2 = this._loadViewportParams) || void 0 === _a2 ? void 0 : _a2.skip;
          },
          bottomItemIndex() {
            var viewportParams = this._loadViewportParams;
            return viewportParams && viewportParams.skip + viewportParams.take;
          },
          virtualItemsCount() {
            var rowsScrollController = this._rowsScrollController;
            if (rowsScrollController) {
              return rowsScrollController.virtualItemsCount.apply(rowsScrollController, arguments);
            }
            var dataSource = this._dataSource;
            return null === dataSource || void 0 === dataSource ? void 0 : dataSource.virtualItemsCount.apply(dataSource, arguments);
          },
          pageIndex(pageIndex) {
            var _a2;
            var virtualPaging = isVirtualPaging(this);
            var rowsScrollController = this._rowsScrollController;
            if (false === this.option(LEGACY_SCROLLING_MODE4) && virtualPaging && rowsScrollController) {
              if (void 0 === pageIndex) {
                return null !== (_a2 = this.option(VISIBLE_PAGE_INDEX)) && void 0 !== _a2 ? _a2 : 0;
              }
            }
            return this.callBase.apply(this, arguments);
          },
          _fireChanged(e) {
            this.callBase.apply(this, arguments);
            var {
              operationTypes
            } = e;
            if (false === this.option(LEGACY_SCROLLING_MODE4) && isVirtualPaging(this) && operationTypes) {
              var {
                fullReload,
                pageIndex
              } = operationTypes;
              if (e.isDataChanged && !fullReload && pageIndex) {
                this._updateVisiblePageIndex(this._dataSource.pageIndex());
              }
            }
          },
          _getPagingOptionValue(optionName) {
            var result2 = this.callBase.apply(this, arguments);
            if (false === this.option(LEGACY_SCROLLING_MODE4) && isVirtualPaging(this)) {
              result2 = this[optionName]();
            }
            return result2;
          },
          isEmpty() {
            return false === this.option(LEGACY_SCROLLING_MODE4) ? !this.items(true).length : this.callBase(this, arguments);
          },
          isLastPageLoaded() {
            var result2 = false;
            if (false === this.option(LEGACY_SCROLLING_MODE4) && isVirtualPaging(this)) {
              var {
                pageIndex,
                loadPageCount
              } = this.getLoadPageParams(true);
              var pageCount = this.pageCount();
              result2 = pageIndex + loadPageCount >= pageCount;
            } else {
              result2 = this.callBase.apply(this, arguments);
            }
            return result2;
          },
          reset() {
            this._itemCount = 0;
            this._allItems = null;
            this.callBase.apply(this, arguments);
          },
          _applyFilter() {
            var _a2;
            null === (_a2 = this._dataSource) || void 0 === _a2 ? void 0 : _a2.loadPageCount(1);
            return this.callBase.apply(this, arguments);
          }
        };
        m_utils_default.proxyMethod(members, "getVirtualContentSize");
        m_utils_default.proxyMethod(members, "setViewportItemIndex");
        return members;
      }(),
      resizing: {
        _updateMasterDataGridCore(masterDataGrid) {
          return when(this.callBase.apply(this, arguments)).done((masterDataGridUpdated) => {
            var isNewVirtualMode = isVirtualMode2(masterDataGrid) && false === masterDataGrid.option(LEGACY_SCROLLING_MODE4);
            if (!masterDataGridUpdated && isNewVirtualMode) {
              var scrollable = masterDataGrid.getScrollable();
              if (scrollable) {
                masterDataGrid.updateDimensions();
              }
            }
          });
        },
        hasResizeTimeout() {
          return !!this._resizeTimeout;
        },
        resize() {
          var {
            callBase
          } = this;
          var result2;
          if (isVirtualMode2(this) || m_utils_default.isVirtualRowRendering(this)) {
            clearTimeout(this._resizeTimeout);
            this._resizeTimeout = null;
            var diff = /* @__PURE__ */ new Date() - this._lastTime;
            var updateTimeout = this.option("scrolling.updateTimeout");
            if (this._lastTime && diff < updateTimeout) {
              result2 = new Deferred();
              this._resizeTimeout = setTimeout(() => {
                this._resizeTimeout = null;
                callBase.apply(this).done(result2.resolve).fail(result2.reject);
                this._lastTime = /* @__PURE__ */ new Date();
              }, updateTimeout);
              this._lastTime = /* @__PURE__ */ new Date();
            } else {
              result2 = callBase.apply(this);
              if (this._dataController.isLoaded()) {
                this._lastTime = /* @__PURE__ */ new Date();
              }
            }
          } else {
            result2 = callBase.apply(this);
          }
          return result2;
        },
        dispose() {
          this.callBase.apply(this, arguments);
          clearTimeout(this._resizeTimeout);
        }
      }
    },
    views: {
      rowsView: VirtualScrollingRowsViewExtender
    }
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/virtual_scrolling.js
m_core_default.registerModule("virtualScrolling", virtualScrollingModule);
m_data_source_adapter_default2.extend(virtualScrollingModule.extenders.dataSourceAdapter);

// node_modules/devextreme/esm/ui/overlay/utils.js
var WINDOW_HEIGHT_PERCENT = 0.9;
var getElementMaxHeightByWindow = ($element, startLocation) => {
  var $window = renderer_default(getWindow());
  var {
    top: elementOffset
  } = $element.offset();
  var actualOffset;
  if (isNumeric(startLocation)) {
    if (startLocation < elementOffset) {
      return elementOffset - startLocation;
    } else {
      actualOffset = getInnerHeight($window) - startLocation + $window.scrollTop();
    }
  } else {
    var offsetTop = elementOffset - $window.scrollTop();
    var offsetBottom = getInnerHeight($window) - offsetTop - getOuterHeight($element);
    actualOffset = Math.max(offsetTop, offsetBottom);
  }
  return actualOffset * WINDOW_HEIGHT_PERCENT;
};

// node_modules/devextreme/esm/ui/menu/ui.submenu.js
var DX_CONTEXT_MENU_CONTENT_DELIMITER_CLASS = "dx-context-menu-content-delimiter";
var DX_SUBMENU_CLASS2 = "dx-submenu";
var Submenu = class extends context_menu_default {
  _getDefaultOptions() {
    return extend(super._getDefaultOptions(), {
      orientation: "horizontal",
      tabIndex: null,
      onHoverStart: noop2
    });
  }
  _initDataAdapter() {
    this._dataAdapter = this.option("_dataAdapter");
    if (!this._dataAdapter) {
      super._initDataAdapter();
    }
  }
  _renderContentImpl() {
    this._renderContextMenuOverlay();
    super._renderContentImpl();
    var node = this._dataAdapter.getNodeByKey(this.option("_parentKey"));
    node && this._renderItems(this._getChildNodes(node));
    this._renderDelimiter();
  }
  _renderDelimiter() {
    this.$contentDelimiter = renderer_default("<div>").appendTo(this._itemContainer()).addClass(DX_CONTEXT_MENU_CONTENT_DELIMITER_CLASS);
  }
  _getOverlayOptions() {
    return extend(true, super._getOverlayOptions(), {
      onPositioned: this._overlayPositionedActionHandler.bind(this),
      position: {
        precise: true
      }
    });
  }
  _overlayPositionedActionHandler(arg) {
    this._showDelimiter(arg);
  }
  _hoverEndHandler(e) {
    super._hoverEndHandler(e);
    this._toggleFocusClass(false, e.currentTarget);
  }
  _isMenuHorizontal() {
    return "horizontal" === this.option("orientation");
  }
  _hoverStartHandler(e) {
    var hoverStartAction = this.option("onHoverStart");
    hoverStartAction(e);
    super._hoverStartHandler(e);
    this._toggleFocusClass(true, e.currentTarget);
  }
  _drawSubmenu($rootItem) {
    this._actions.onShowing({
      rootItem: getPublicElement($rootItem),
      submenu: this
    });
    super._drawSubmenu($rootItem);
    this._actions.onShown({
      rootItem: getPublicElement($rootItem),
      submenu: this
    });
  }
  _hideSubmenu($rootItem) {
    this._actions.onHiding({
      cancel: true,
      rootItem: getPublicElement($rootItem),
      submenu: this
    });
    super._hideSubmenu($rootItem);
    this._actions.onHidden({
      rootItem: getPublicElement($rootItem),
      submenu: this
    });
  }
  _showDelimiter(arg) {
    if (!this.$contentDelimiter) {
      return;
    }
    var $submenu = this._itemContainer().children(".".concat(DX_SUBMENU_CLASS2)).eq(0);
    var $rootItem = this.option("position").of.find(".dx-context-menu-container-border");
    var position3 = {
      of: $submenu,
      precise: true
    };
    var containerOffset = arg.position;
    var vLocation = containerOffset.v.location;
    var hLocation = containerOffset.h.location;
    var rootOffset = $rootItem.offset();
    var offsetLeft = Math.round(rootOffset.left);
    var offsetTop = Math.round(rootOffset.top);
    var rootWidth = getWidth($rootItem);
    var rootHeight = getHeight($rootItem);
    var submenuWidth = getWidth($submenu);
    var submenuHeight = getHeight($submenu);
    this.$contentDelimiter.css("display", "block");
    setWidth2(this.$contentDelimiter, this._isMenuHorizontal() ? rootWidth < submenuWidth ? rootWidth : submenuWidth : 3);
    setHeight2(this.$contentDelimiter, this._isMenuHorizontal() ? 3 : rootHeight < submenuHeight ? rootHeight : submenuHeight);
    if (this._isMenuHorizontal()) {
      if (vLocation > offsetTop) {
        if (Math.round(hLocation) === offsetLeft) {
          position3.offset = "0 -2.5";
          position3.at = position3.my = "left top";
        } else {
          position3.offset = "0 -2.5";
          position3.at = position3.my = "right top";
        }
      } else {
        setHeight2(this.$contentDelimiter, 5);
        if (Math.round(hLocation) === offsetLeft) {
          position3.offset = "0 5";
          position3.at = position3.my = "left bottom";
        } else {
          position3.offset = "0 5";
          position3.at = position3.my = "right bottom";
        }
      }
    } else if (hLocation > offsetLeft) {
      if (Math.round(vLocation) === offsetTop) {
        position3.offset = "-2.5 0";
        position3.at = position3.my = "left top";
      } else {
        position3.offset = "-2.5 0";
        position3.at = position3.my = "left bottom";
      }
    } else if (Math.round(vLocation) === offsetTop) {
      position3.offset = "2.5 0";
      position3.at = position3.my = "right top";
    } else {
      position3.offset = "2.5 0";
      position3.at = position3.my = "right bottom";
    }
    position_default.setup(this.$contentDelimiter, position3);
  }
  _getContextMenuPosition() {
    return this.option("position");
  }
  isOverlayVisible() {
    return this._overlay.option("visible");
  }
  getOverlayContent() {
    return this._overlay.$content();
  }
};
var ui_submenu_default = Submenu;

// node_modules/devextreme/esm/ui/menu/ui.menu.js
var DX_MENU_CLASS3 = "dx-menu";
var DX_MENU_VERTICAL_CLASS = DX_MENU_CLASS3 + "-vertical";
var DX_MENU_HORIZONTAL_CLASS = DX_MENU_CLASS3 + "-horizontal";
var DX_MENU_ITEM_CLASS2 = DX_MENU_CLASS3 + "-item";
var DX_MENU_ITEMS_CONTAINER_CLASS3 = DX_MENU_CLASS3 + "-items-container";
var DX_MENU_ITEM_EXPANDED_CLASS3 = DX_MENU_ITEM_CLASS2 + "-expanded";
var DX_CONTEXT_MENU_CLASS2 = "dx-context-menu";
var DX_CONTEXT_MENU_CONTAINER_BORDER_CLASS = DX_CONTEXT_MENU_CLASS2 + "-container-border";
var DX_CONTEXT_MENU_CONTENT_DELIMITER_CLASS2 = "dx-context-menu-content-delimiter";
var DX_SUBMENU_CLASS3 = "dx-submenu";
var DX_STATE_DISABLED_CLASS2 = "dx-state-disabled";
var DX_STATE_HOVER_CLASS2 = "dx-state-hover";
var DX_STATE_ACTIVE_CLASS = "dx-state-active";
var DX_ADAPTIVE_MODE_CLASS = DX_MENU_CLASS3 + "-adaptive-mode";
var DX_ADAPTIVE_HAMBURGER_BUTTON_CLASS = DX_MENU_CLASS3 + "-hamburger-button";
var DX_ADAPTIVE_MODE_OVERLAY_WRAPPER_CLASS = DX_ADAPTIVE_MODE_CLASS + "-overlay-wrapper";
var FOCUS_UP3 = "up";
var FOCUS_DOWN3 = "down";
var FOCUS_LEFT3 = "left";
var FOCUS_RIGHT3 = "right";
var SHOW_SUBMENU_OPERATION = "showSubmenu";
var NEXTITEM_OPERATION = "nextItem";
var PREVITEM_OPERATION = "prevItem";
var DEFAULT_DELAY2 = {
  show: 50,
  hide: 300
};
var ACTIONS2 = ["onSubmenuShowing", "onSubmenuShown", "onSubmenuHiding", "onSubmenuHidden", "onItemContextMenu", "onItemClick", "onSelectionChanged", "onItemRendered"];
var Menu = class extends ui_menu_base_default {
  _getDefaultOptions() {
    return extend(super._getDefaultOptions(), {
      orientation: "horizontal",
      submenuDirection: "auto",
      showFirstSubmenuMode: {
        name: "onClick",
        delay: {
          show: 50,
          hide: 300
        }
      },
      hideSubmenuOnMouseLeave: false,
      onSubmenuShowing: null,
      onSubmenuShown: null,
      onSubmenuHiding: null,
      onSubmenuHidden: null,
      adaptivityEnabled: false
    });
  }
  _setOptionsByReference() {
    super._setOptionsByReference();
    extend(this._optionsByReference, {
      animation: true,
      selectedItem: true
    });
  }
  _itemElements() {
    var rootMenuElements = super._itemElements();
    var submenuElements = this._submenuItemElements();
    return rootMenuElements.add(submenuElements);
  }
  _submenuItemElements() {
    var elements = [];
    var itemSelector = ".".concat(DX_MENU_ITEM_CLASS2);
    var currentSubmenu = this._submenus.length && this._submenus[0];
    if (currentSubmenu && currentSubmenu.itemsContainer()) {
      elements = currentSubmenu.itemsContainer().find(itemSelector);
    }
    return elements;
  }
  _focusTarget() {
    return this.$element();
  }
  _isMenuHorizontal() {
    return "horizontal" === this.option("orientation");
  }
  _moveFocus(location) {
    var $items = this._getAvailableItems();
    var isMenuHorizontal = this._isMenuHorizontal();
    var $activeItem = this._getActiveItem(true);
    var argument;
    var operation;
    var navigationAction;
    var $newTarget;
    switch (location) {
      case FOCUS_UP3:
        operation = isMenuHorizontal ? SHOW_SUBMENU_OPERATION : this._getItemsNavigationOperation(PREVITEM_OPERATION);
        argument = isMenuHorizontal ? $activeItem : $items;
        navigationAction = this._getKeyboardNavigationAction(operation, argument);
        $newTarget = navigationAction();
        break;
      case FOCUS_DOWN3:
        operation = isMenuHorizontal ? SHOW_SUBMENU_OPERATION : this._getItemsNavigationOperation(NEXTITEM_OPERATION);
        argument = isMenuHorizontal ? $activeItem : $items;
        navigationAction = this._getKeyboardNavigationAction(operation, argument);
        $newTarget = navigationAction();
        break;
      case FOCUS_RIGHT3:
        operation = isMenuHorizontal ? this._getItemsNavigationOperation(NEXTITEM_OPERATION) : SHOW_SUBMENU_OPERATION;
        argument = isMenuHorizontal ? $items : $activeItem;
        navigationAction = this._getKeyboardNavigationAction(operation, argument);
        $newTarget = navigationAction();
        break;
      case FOCUS_LEFT3:
        operation = isMenuHorizontal ? this._getItemsNavigationOperation(PREVITEM_OPERATION) : SHOW_SUBMENU_OPERATION;
        argument = isMenuHorizontal ? $items : $activeItem;
        navigationAction = this._getKeyboardNavigationAction(operation, argument);
        $newTarget = navigationAction();
        break;
      default:
        return super._moveFocus(location);
    }
    if ($newTarget && 0 !== $newTarget.length) {
      this.option("focusedElement", getPublicElement($newTarget));
    }
  }
  _getItemsNavigationOperation(operation) {
    var navOperation = operation;
    if (this.option("rtlEnabled")) {
      navOperation = operation === PREVITEM_OPERATION ? NEXTITEM_OPERATION : PREVITEM_OPERATION;
    }
    return navOperation;
  }
  _getKeyboardNavigationAction(operation, argument) {
    var action = noop2;
    switch (operation) {
      case SHOW_SUBMENU_OPERATION:
        if (!argument.hasClass(DX_STATE_DISABLED_CLASS2)) {
          action = this._showSubmenu.bind(this, argument);
        }
        break;
      case NEXTITEM_OPERATION:
        action = this._nextItem.bind(this, argument);
        break;
      case PREVITEM_OPERATION:
        action = this._prevItem.bind(this, argument);
    }
    return action;
  }
  _clean() {
    super._clean();
    this.option("templatesRenderAsynchronously") && clearTimeout(this._resizeEventTimer);
  }
  _visibilityChanged(visible2) {
    if (visible2) {
      if (!this._menuItemsWidth) {
        this._updateItemsWidthCache();
      }
      this._dimensionChanged();
    }
  }
  _isAdaptivityEnabled() {
    return this.option("adaptivityEnabled") && "horizontal" === this.option("orientation");
  }
  _updateItemsWidthCache() {
    var $menuItems = this.$element().find("ul").first().children("li").children(".".concat(DX_MENU_ITEM_CLASS2));
    this._menuItemsWidth = this._getSummaryItemsSize("width", $menuItems, true);
  }
  _dimensionChanged() {
    if (!this._isAdaptivityEnabled()) {
      return;
    }
    var containerWidth = getOuterWidth(this.$element());
    this._toggleAdaptiveMode(this._menuItemsWidth > containerWidth);
  }
  _init() {
    super._init();
    this._submenus = [];
  }
  _initActions() {
    this._actions = {};
    each(ACTIONS2, (index2, action) => {
      this._actions[action] = this._createActionByOption(action);
    });
  }
  _initMarkup() {
    this._visibleSubmenu = null;
    this.$element().addClass(DX_MENU_CLASS3);
    super._initMarkup();
    this._addCustomCssClass(this.$element());
    this.setAria("role", "menubar");
  }
  _render() {
    super._render();
    this._initAdaptivity();
  }
  _renderHamburgerButton() {
    this._hamburger = new button_default(renderer_default("<div>").addClass(DX_ADAPTIVE_HAMBURGER_BUTTON_CLASS), {
      icon: "menu",
      activeStateEnabled: false,
      onClick: this._toggleTreeView.bind(this)
    });
    return this._hamburger.$element();
  }
  _toggleTreeView(state) {
    if (isPlainObject(state)) {
      state = !this._overlay.option("visible");
    }
    this._overlay.option("visible", state);
    if (state) {
      this._treeView.focus();
    }
    this._toggleHamburgerActiveState(state);
  }
  _toggleHamburgerActiveState(state) {
    this._hamburger && this._hamburger.$element().toggleClass(DX_STATE_ACTIVE_CLASS, state);
  }
  _toggleAdaptiveMode(state) {
    var $menuItemsContainer = this.$element().find(".".concat(DX_MENU_HORIZONTAL_CLASS));
    var $adaptiveElements = this.$element().find(".".concat(DX_ADAPTIVE_MODE_CLASS));
    if (state) {
      this._hideVisibleSubmenu();
    } else {
      this._treeView && this._treeView.collapseAll();
      this._overlay && this._toggleTreeView(state);
    }
    $menuItemsContainer.toggle(!state);
    $adaptiveElements.toggle(state);
  }
  _removeAdaptivity() {
    if (!this._$adaptiveContainer) {
      return;
    }
    this._toggleAdaptiveMode(false);
    this._$adaptiveContainer.remove();
    this._$adaptiveContainer = null;
    this._treeView = null;
    this._hamburger = null;
    this._overlay = null;
  }
  _treeviewItemClickHandler(e) {
    this._actions.onItemClick(e);
    if (!e.node.children.length) {
      this._toggleTreeView(false);
    }
  }
  _getAdaptiveOverlayOptions() {
    var rtl = this.option("rtlEnabled");
    var position3 = rtl ? "right" : "left";
    return {
      _ignoreFunctionValueDeprecation: true,
      maxHeight: () => getElementMaxHeightByWindow(this.$element()),
      deferRendering: false,
      shading: false,
      animation: false,
      hideOnParentScroll: true,
      onHidden: () => {
        this._toggleHamburgerActiveState(false);
      },
      height: "auto",
      hideOnOutsideClick: (e) => !renderer_default(e.target).closest(".".concat(DX_ADAPTIVE_HAMBURGER_BUTTON_CLASS)).length,
      position: {
        collision: "flipfit",
        at: "bottom " + position3,
        my: "top " + position3,
        of: this._hamburger.$element()
      }
    };
  }
  _getTreeViewOptions() {
    var menuOptions = {};
    each(["rtlEnabled", "width", "accessKey", "activeStateEnabled", "animation", "dataSource", "disabled", "displayExpr", "displayExpr", "focusStateEnabled", "hint", "hoverStateEnabled", "itemsExpr", "items", "itemTemplate", "selectedExpr", "selectionMode", "tabIndex", "visible"], (_, option) => {
      menuOptions[option] = this.option(option);
    });
    each(["onItemContextMenu", "onSelectionChanged", "onItemRendered"], (_, actionName) => {
      menuOptions[actionName] = (e) => {
        this._actions[actionName](e);
      };
    });
    return extend(menuOptions, {
      dataSource: this.getDataSource(),
      animationEnabled: !!this.option("animation"),
      onItemClick: this._treeviewItemClickHandler.bind(this),
      onItemExpanded: (e) => {
        this._overlay.repaint();
        this._actions.onSubmenuShown(e);
      },
      onItemCollapsed: (e) => {
        this._overlay.repaint();
        this._actions.onSubmenuHidden(e);
      },
      selectNodesRecursive: false,
      selectByClick: this.option("selectByClick"),
      expandEvent: "click"
    });
  }
  _initAdaptivity() {
    if (!this._isAdaptivityEnabled()) {
      return;
    }
    this._$adaptiveContainer = renderer_default("<div>").addClass(DX_ADAPTIVE_MODE_CLASS);
    var $hamburger = this._renderHamburgerButton();
    this._treeView = this._createComponent(renderer_default("<div>"), tree_view_default, this._getTreeViewOptions());
    this._overlay = this._createComponent(renderer_default("<div>"), ui_overlay_default, this._getAdaptiveOverlayOptions());
    this._overlay.$content().append(this._treeView.$element()).addClass(DX_ADAPTIVE_MODE_CLASS).addClass(this.option("cssClass"));
    this._overlay.$wrapper().addClass(DX_ADAPTIVE_MODE_OVERLAY_WRAPPER_CLASS);
    this._$adaptiveContainer.append($hamburger);
    this._$adaptiveContainer.append(this._overlay.$element());
    this.$element().append(this._$adaptiveContainer);
    this._updateItemsWidthCache();
    this._dimensionChanged();
  }
  _getDelay(delayType) {
    var delay = this.option("showFirstSubmenuMode").delay;
    if (!isDefined(delay)) {
      return DEFAULT_DELAY2[delayType];
    } else {
      return isObject(delay) ? delay[delayType] : delay;
    }
  }
  _keyboardHandler(e) {
    return super._keyboardHandler(e, !!this._visibleSubmenu);
  }
  _renderContainer() {
    var $wrapper = renderer_default("<div>");
    $wrapper.appendTo(this.$element()).addClass(this._isMenuHorizontal() ? DX_MENU_HORIZONTAL_CLASS : DX_MENU_VERTICAL_CLASS);
    return super._renderContainer($wrapper);
  }
  _renderSubmenuItems(node, $itemFrame) {
    var submenu = this._createSubmenu(node, $itemFrame);
    this._submenus.push(submenu);
    this._renderBorderElement($itemFrame);
    return submenu;
  }
  _getKeyboardListeners() {
    return super._getKeyboardListeners().concat(this._visibleSubmenu);
  }
  _createSubmenu(node, $rootItem) {
    var $submenuContainer = renderer_default("<div>").addClass(DX_CONTEXT_MENU_CLASS2).appendTo($rootItem);
    var items = this._getChildNodes(node);
    var subMenu = this._createComponent($submenuContainer, ui_submenu_default, extend(this._getSubmenuOptions(), {
      _dataAdapter: this._dataAdapter,
      _parentKey: node.internalFields.key,
      items,
      onHoverStart: this._clearTimeouts.bind(this),
      position: this.getSubmenuPosition($rootItem)
    }));
    this._attachSubmenuHandlers($rootItem, subMenu);
    return subMenu;
  }
  _getSubmenuOptions() {
    var $submenuTarget = renderer_default("<div>");
    var isMenuHorizontal = this._isMenuHorizontal();
    return {
      itemTemplate: this.option("itemTemplate"),
      target: $submenuTarget,
      orientation: this.option("orientation"),
      selectionMode: this.option("selectionMode"),
      cssClass: this.option("cssClass"),
      selectByClick: this.option("selectByClick"),
      hoverStateEnabled: this.option("hoverStateEnabled"),
      activeStateEnabled: this.option("activeStateEnabled"),
      focusStateEnabled: this.option("focusStateEnabled"),
      animation: this.option("animation"),
      showSubmenuMode: this.option("showSubmenuMode"),
      displayExpr: this.option("displayExpr"),
      disabledExpr: this.option("disabledExpr"),
      selectedExpr: this.option("selectedExpr"),
      itemsExpr: this.option("itemsExpr"),
      onFocusedItemChanged: (e) => {
        if (!e.component.option("visible")) {
          return;
        }
        this.option("focusedElement", e.component.option("focusedElement"));
      },
      onSelectionChanged: this._nestedItemOnSelectionChangedHandler.bind(this),
      onItemClick: this._nestedItemOnItemClickHandler.bind(this),
      onItemRendered: this._nestedItemOnItemRenderedHandler.bind(this),
      onLeftFirstItem: isMenuHorizontal ? null : this._moveMainMenuFocus.bind(this, PREVITEM_OPERATION),
      onLeftLastItem: isMenuHorizontal ? null : this._moveMainMenuFocus.bind(this, NEXTITEM_OPERATION),
      onCloseRootSubmenu: this._moveMainMenuFocus.bind(this, isMenuHorizontal ? PREVITEM_OPERATION : null),
      onExpandLastSubmenu: isMenuHorizontal ? this._moveMainMenuFocus.bind(this, NEXTITEM_OPERATION) : null
    };
  }
  _getShowFirstSubmenuMode() {
    if (!this._isDesktopDevice()) {
      return "onClick";
    }
    var optionValue = this.option("showFirstSubmenuMode");
    return isObject(optionValue) ? optionValue.name : optionValue;
  }
  _moveMainMenuFocus(direction) {
    var $items = this._getAvailableItems();
    var itemCount = $items.length;
    var $currentItem = $items.filter(".".concat(DX_MENU_ITEM_EXPANDED_CLASS3)).eq(0);
    var itemIndex = $items.index($currentItem);
    this._hideSubmenu(this._visibleSubmenu);
    itemIndex += direction === PREVITEM_OPERATION ? -1 : 1;
    if (itemIndex >= itemCount) {
      itemIndex = 0;
    } else if (itemIndex < 0) {
      itemIndex = itemCount - 1;
    }
    var $newItem = $items.eq(itemIndex);
    this.option("focusedElement", getPublicElement($newItem));
  }
  _nestedItemOnSelectionChangedHandler(args) {
    var selectedItem = args.addedItems.length && args.addedItems[0];
    var submenu = ui_submenu_default.getInstance(args.element);
    var onSelectionChanged = this._actions.onSelectionChanged;
    onSelectionChanged(args);
    selectedItem && this._clearSelectionInSubmenus(selectedItem[0], submenu);
    this._clearRootSelection();
    this._setOptionWithoutOptionChange("selectedItem", selectedItem);
  }
  _clearSelectionInSubmenus(item, targetSubmenu) {
    var cleanAllSubmenus = !arguments.length;
    each(this._submenus, (index2, submenu) => {
      var $submenu = submenu._itemContainer();
      var isOtherItem = !$submenu.is(targetSubmenu && targetSubmenu._itemContainer());
      var $selectedItem = $submenu.find(".".concat(this._selectedItemClass()));
      if (isOtherItem && $selectedItem.length || cleanAllSubmenus) {
        $selectedItem.removeClass(this._selectedItemClass());
        var selectedItemData = this._getItemData($selectedItem);
        if (selectedItemData) {
          selectedItemData.selected = false;
        }
        submenu._clearSelectedItems();
      }
    });
  }
  _clearRootSelection() {
    var $prevSelectedItem = this.$element().find(".".concat(DX_MENU_ITEMS_CONTAINER_CLASS3)).first().children().children().filter(".".concat(this._selectedItemClass()));
    if ($prevSelectedItem.length) {
      var prevSelectedItemData = this._getItemData($prevSelectedItem);
      prevSelectedItemData.selected = false;
      $prevSelectedItem.removeClass(this._selectedItemClass());
    }
  }
  _nestedItemOnItemClickHandler(e) {
    this._actions.onItemClick(e);
  }
  _nestedItemOnItemRenderedHandler(e) {
    this._actions.onItemRendered(e);
  }
  _attachSubmenuHandlers($rootItem, submenu) {
    var $submenuOverlayContent = submenu.getOverlayContent();
    var submenus = $submenuOverlayContent.find(".".concat(DX_SUBMENU_CLASS3));
    var submenuMouseLeaveName = addNamespace2(HOVEREND, this.NAME + "_submenu");
    submenu.option({
      onShowing: this._submenuOnShowingHandler.bind(this, $rootItem, submenu),
      onShown: this._submenuOnShownHandler.bind(this, $rootItem, submenu),
      onHiding: this._submenuOnHidingHandler.bind(this, $rootItem, submenu),
      onHidden: this._submenuOnHiddenHandler.bind(this, $rootItem, submenu)
    });
    each(submenus, (index2, submenu2) => {
      events_engine_default.off(submenu2, submenuMouseLeaveName);
      events_engine_default.on(submenu2, submenuMouseLeaveName, null, this._submenuMouseLeaveHandler.bind(this, $rootItem));
    });
  }
  _submenuOnShowingHandler($rootItem, submenu) {
    var $border = $rootItem.children(".".concat(DX_CONTEXT_MENU_CONTAINER_BORDER_CLASS));
    this._actions.onSubmenuShowing({
      rootItem: getPublicElement($rootItem),
      submenu
    });
    $border.show();
    $rootItem.addClass(DX_MENU_ITEM_EXPANDED_CLASS3);
  }
  _submenuOnShownHandler($rootItem, submenu) {
    this._actions.onSubmenuShown({
      rootItem: getPublicElement($rootItem),
      submenu
    });
  }
  _submenuOnHidingHandler($rootItem, submenu, eventArgs) {
    var $border = $rootItem.children(".".concat(DX_CONTEXT_MENU_CONTAINER_BORDER_CLASS));
    var args = eventArgs;
    args.rootItem = getPublicElement($rootItem);
    args.submenu = submenu;
    this._actions.onSubmenuHiding(args);
    eventArgs = args;
    if (!eventArgs.cancel) {
      if (this._visibleSubmenu === submenu) {
        this._visibleSubmenu = null;
      }
      $border.hide();
      $rootItem.removeClass(DX_MENU_ITEM_EXPANDED_CLASS3);
    }
  }
  _submenuOnHiddenHandler($rootItem, submenu) {
    this._actions.onSubmenuHidden({
      rootItem: getPublicElement($rootItem),
      submenu
    });
  }
  _submenuMouseLeaveHandler($rootItem, eventArgs) {
    var target = renderer_default(eventArgs.relatedTarget).parents(".".concat(DX_CONTEXT_MENU_CLASS2))[0];
    var contextMenu = this._getSubmenuByRootElement($rootItem).getOverlayContent()[0];
    if (this.option("hideSubmenuOnMouseLeave") && target !== contextMenu) {
      this._clearTimeouts();
      setTimeout(this._hideSubmenuAfterTimeout.bind(this), this._getDelay("hide"));
    }
  }
  _hideSubmenuAfterTimeout() {
    if (!this._visibleSubmenu) {
      return;
    }
    var isRootItemHovered = renderer_default(this._visibleSubmenu.$element().context).hasClass(DX_STATE_HOVER_CLASS2);
    var isSubmenuItemHovered = this._visibleSubmenu.getOverlayContent().find(".".concat(DX_STATE_HOVER_CLASS2)).length;
    var hoveredElementFromSubMenu = this._visibleSubmenu.getOverlayContent().get(0).querySelector(":hover");
    if (!hoveredElementFromSubMenu && !isSubmenuItemHovered && !isRootItemHovered) {
      this._visibleSubmenu.hide();
    }
  }
  _getSubmenuByRootElement($rootItem) {
    if (!$rootItem) {
      return false;
    }
    var $submenu = $rootItem.children(".".concat(DX_CONTEXT_MENU_CLASS2));
    return $submenu.length && ui_submenu_default.getInstance($submenu);
  }
  getSubmenuPosition($rootItem) {
    var isHorizontalMenu = this._isMenuHorizontal();
    var submenuDirection = this.option("submenuDirection").toLowerCase();
    var rtlEnabled = this.option("rtlEnabled");
    var submenuPosition = {
      collision: "flip",
      of: $rootItem,
      precise: true
    };
    switch (submenuDirection) {
      case "leftortop":
        submenuPosition.at = "left top";
        submenuPosition.my = isHorizontalMenu ? "left bottom" : "right top";
        break;
      case "rightorbottom":
        submenuPosition.at = isHorizontalMenu ? "left bottom" : "right top";
        submenuPosition.my = "left top";
        break;
      default:
        if (isHorizontalMenu) {
          submenuPosition.at = rtlEnabled ? "right bottom" : "left bottom";
          submenuPosition.my = rtlEnabled ? "right top" : "left top";
        } else {
          submenuPosition.at = rtlEnabled ? "left top" : "right top";
          submenuPosition.my = rtlEnabled ? "right top" : "left top";
        }
    }
    return submenuPosition;
  }
  _renderBorderElement($item) {
    renderer_default("<div>").appendTo($item).addClass(DX_CONTEXT_MENU_CONTAINER_BORDER_CLASS).hide();
  }
  _itemPointerDownHandler(e) {
    var $target = renderer_default(e.target);
    var $closestItem = $target.closest(this._itemElements());
    if ($closestItem.hasClass("dx-menu-item-has-submenu")) {
      this.option("focusedElement", null);
      return;
    }
    super._itemPointerDownHandler(e);
  }
  _hoverStartHandler(e) {
    var mouseMoveEventName = addNamespace2(pointer_default.move, this.NAME);
    var $item = this._getItemElementByEventArgs(e);
    var node = this._dataAdapter.getNodeByItem(this._getItemData($item));
    var isSelectionActive = isDefined(e.buttons) && 1 === e.buttons || !isDefined(e.buttons) && 1 === e.which;
    if (this._isItemDisabled($item)) {
      return;
    }
    events_engine_default.off($item, mouseMoveEventName);
    if (!this._hasChildren(node)) {
      this._showSubmenuTimer = setTimeout(this._hideSubmenuAfterTimeout.bind(this), this._getDelay("hide"));
      return;
    }
    if ("onHover" === this._getShowFirstSubmenuMode() && !isSelectionActive) {
      var submenu = this._getSubmenuByElement($item);
      this._clearTimeouts();
      if (!submenu.isOverlayVisible()) {
        events_engine_default.on($item, mouseMoveEventName, this._itemMouseMoveHandler.bind(this));
        this._showSubmenuTimer = this._getDelay("hide");
      }
    }
  }
  _hoverEndHandler(eventArg) {
    var $item = this._getItemElementByEventArgs(eventArg);
    var relatedTarget = renderer_default(eventArg.relatedTarget);
    super._hoverEndHandler(eventArg);
    this._clearTimeouts();
    if (this._isItemDisabled($item)) {
      return;
    }
    if (relatedTarget.hasClass(DX_CONTEXT_MENU_CONTENT_DELIMITER_CLASS2)) {
      return;
    }
    if (this.option("hideSubmenuOnMouseLeave") && !relatedTarget.hasClass(DX_MENU_ITEMS_CONTAINER_CLASS3)) {
      this._hideSubmenuTimer = setTimeout(() => {
        this._hideSubmenuAfterTimeout();
      }, this._getDelay("hide"));
    }
  }
  _hideVisibleSubmenu() {
    if (!this._visibleSubmenu) {
      return false;
    }
    this._hideSubmenu(this._visibleSubmenu);
    return true;
  }
  _showSubmenu($itemElement) {
    var submenu = this._getSubmenuByElement($itemElement);
    if (this._visibleSubmenu !== submenu) {
      this._hideVisibleSubmenu();
    }
    if (submenu) {
      this._clearTimeouts();
      this.focus();
      submenu.show();
      this.option("focusedElement", submenu.option("focusedElement"));
    }
    this._visibleSubmenu = submenu;
    this._hoveredRootItem = $itemElement;
  }
  _hideSubmenu(submenu) {
    submenu && submenu.hide();
    if (this._visibleSubmenu === submenu) {
      this._visibleSubmenu = null;
    }
    this._hoveredRootItem = null;
  }
  _itemMouseMoveHandler(e) {
    if (e.pointers && e.pointers.length) {
      return;
    }
    var $item = renderer_default(e.currentTarget);
    if (!isDefined(this._showSubmenuTimer)) {
      return;
    }
    this._clearTimeouts();
    this._showSubmenuTimer = setTimeout(() => {
      var submenu = this._getSubmenuByElement($item);
      if (submenu && !submenu.isOverlayVisible()) {
        this._showSubmenu($item);
      }
    }, this._getDelay("show"));
  }
  _clearTimeouts() {
    clearTimeout(this._hideSubmenuTimer);
    clearTimeout(this._showSubmenuTimer);
  }
  _getSubmenuByElement($itemElement, itemData) {
    var submenu = this._getSubmenuByRootElement($itemElement);
    if (submenu) {
      return submenu;
    } else {
      itemData = itemData || this._getItemData($itemElement);
      var node = this._dataAdapter.getNodeByItem(itemData);
      return this._hasChildren(node) && this._renderSubmenuItems(node, $itemElement);
    }
  }
  _updateSubmenuVisibilityOnClick(actionArgs) {
    var args = actionArgs.args.length && actionArgs.args[0];
    if (!args || this._disabledGetter(args.itemData)) {
      return;
    }
    var $itemElement = renderer_default(args.itemElement);
    var currentSubmenu = this._getSubmenuByElement($itemElement, args.itemData);
    this._updateSelectedItemOnClick(actionArgs);
    if (this._visibleSubmenu) {
      if (this._visibleSubmenu === currentSubmenu) {
        if ("onClick" === this.option("showFirstSubmenuMode")) {
          this._hideSubmenu(this._visibleSubmenu);
        }
        return;
      } else {
        this._hideSubmenu(this._visibleSubmenu);
      }
    }
    if (!currentSubmenu) {
      return;
    }
    if (!currentSubmenu.isOverlayVisible()) {
      this._showSubmenu($itemElement);
      return;
    }
  }
  _optionChanged(args) {
    if (ACTIONS2.indexOf(args.name) >= 0) {
      this._initActions();
      return;
    }
    switch (args.name) {
      case "orientation":
      case "submenuDirection":
        this._invalidate();
        break;
      case "showFirstSubmenuMode":
      case "hideSubmenuOnMouseLeave":
        break;
      case "showSubmenuMode":
        this._changeSubmenusOption(args.name, args.value);
        break;
      case "adaptivityEnabled":
        args.value ? this._initAdaptivity() : this._removeAdaptivity();
        break;
      case "width":
        if (this._isAdaptivityEnabled()) {
          this._treeView.option(args.name, args.value);
          this._overlay.option(args.name, args.value);
        }
        super._optionChanged(args);
        this._dimensionChanged();
        break;
      case "animation":
        if (this._isAdaptivityEnabled()) {
          this._treeView.option("animationEnabled", !!args.value);
        }
        super._optionChanged(args);
        break;
      default:
        if (this._isAdaptivityEnabled() && (args.name === args.fullName || "items" === args.name)) {
          this._treeView.option(args.fullName, args.value);
        }
        super._optionChanged(args);
    }
  }
  _changeSubmenusOption(name2, value2) {
    each(this._submenus, (index2, submenu) => {
      submenu.option(name2, value2);
    });
  }
  selectItem(itemElement) {
    this._hideSubmenu(this._visibleSubmenu);
    super.selectItem(itemElement);
  }
  unselectItem(itemElement) {
    this._hideSubmenu(this._visibleSubmenu);
    super.selectItem(itemElement);
  }
};
component_registrator_default("dxMenu", Menu);
var ui_menu_default = Menu;

// node_modules/devextreme/esm/ui/menu.js
var menu_default = ui_menu_default;

// node_modules/devextreme/esm/__internal/grids/grid_core/filter/m_filter_row.js
var OPERATION_ICONS = {
  "=": "filter-operation-equals",
  "<>": "filter-operation-not-equals",
  "<": "filter-operation-less",
  "<=": "filter-operation-less-equal",
  ">": "filter-operation-greater",
  ">=": "filter-operation-greater-equal",
  default: "filter-operation-default",
  notcontains: "filter-operation-not-contains",
  contains: "filter-operation-contains",
  startswith: "filter-operation-starts-with",
  endswith: "filter-operation-ends-with",
  between: "filter-operation-between"
};
var OPERATION_DESCRIPTORS = {
  "=": "equal",
  "<>": "notEqual",
  "<": "lessThan",
  "<=": "lessThanOrEqual",
  ">": "greaterThan",
  ">=": "greaterThanOrEqual",
  startswith: "startsWith",
  contains: "contains",
  notcontains: "notContains",
  endswith: "endsWith",
  between: "between"
};
var FILTERING_TIMEOUT = 700;
var CORRECT_FILTER_RANGE_OVERLAY_WIDTH = 1;
var FILTER_ROW_CLASS2 = "filter-row";
var FILTER_RANGE_OVERLAY_CLASS = "filter-range-overlay";
var FILTER_RANGE_START_CLASS = "filter-range-start";
var FILTER_RANGE_END_CLASS = "filter-range-end";
var MENU_CLASS = "dx-menu";
var EDITOR_WITH_MENU_CLASS = "dx-editor-with-menu";
var EDITOR_CONTAINER_CLASS = "dx-editor-container";
var EDITOR_CELL_CLASS3 = "dx-editor-cell";
var FILTER_MENU = "dx-filter-menu";
var APPLY_BUTTON_CLASS = "dx-apply-button";
var HIGHLIGHT_OUTLINE_CLASS = "dx-highlight-outline";
var FOCUSED_CLASS = "dx-focused";
var CELL_FOCUS_DISABLED_CLASS5 = "dx-cell-focus-disabled";
var FILTER_RANGE_CONTENT_CLASS = "dx-filter-range-content";
var FILTER_MODIFIED_CLASS = "dx-filter-modified";
var EDITORS_INPUT_SELECTOR2 = "input:not([type='hidden'])";
var BETWEEN_OPERATION_DATA_TYPES = ["date", "datetime", "number"];
var ARIA_SEARCH_BOX = message_default.format("dxDataGrid-ariaSearchBox");
function isOnClickApplyFilterMode(that) {
  return "onClick" === that.option("filterRow.applyFilter");
}
var getEditorInstance = function($editorContainer) {
  var $editor = $editorContainer && $editorContainer.children();
  var componentNames2 = $editor && $editor.data("dxComponents");
  var editor = componentNames2 && componentNames2.length && $editor.data(componentNames2[0]);
  if (editor instanceof editor_default) {
    return editor;
  }
  return null;
};
var ColumnHeadersViewFilterRowExtender = /* @__PURE__ */ function() {
  var getRangeTextByFilterValue = function(that, column) {
    var result2 = "";
    var rangeEnd = "";
    var filterValue = getColumnFilterValue(that, column);
    var formatOptions = m_utils_default.getFormatOptionsByColumn(column, "filterRow");
    if (Array.isArray(filterValue)) {
      result2 = m_utils_default.formatValue(filterValue[0], formatOptions);
      rangeEnd = m_utils_default.formatValue(filterValue[1], formatOptions);
      if ("" !== rangeEnd) {
        result2 += " - ".concat(rangeEnd);
      }
    } else if (isDefined(filterValue)) {
      result2 = m_utils_default.formatValue(filterValue, formatOptions);
    }
    return result2;
  };
  function getColumnFilterValue(that, column) {
    if (column) {
      return isOnClickApplyFilterMode(that) && void 0 !== column.bufferedFilterValue ? column.bufferedFilterValue : column.filterValue;
    }
  }
  var getColumnSelectedFilterOperation = function(that, column) {
    if (column) {
      return isOnClickApplyFilterMode(that) && void 0 !== column.bufferedSelectedFilterOperation ? column.bufferedSelectedFilterOperation : column.selectedFilterOperation;
    }
  };
  var getFilterValue2 = function(that, columnIndex, $editorContainer) {
    var column = that._columnsController.columnOption(columnIndex);
    var filterValue = getColumnFilterValue(that, column);
    var isFilterRange = $editorContainer.closest(".".concat(that.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS))).length;
    var isRangeStart = $editorContainer.hasClass(that.addWidgetPrefix(FILTER_RANGE_START_CLASS));
    if (filterValue && Array.isArray(filterValue) && "between" === getColumnSelectedFilterOperation(that, column)) {
      if (isRangeStart) {
        return filterValue[0];
      }
      return filterValue[1];
    }
    return !isFilterRange && function(filterValue2, column2) {
      if (column2 && BETWEEN_OPERATION_DATA_TYPES.includes(column2.dataType) && Array.isArray(filterValue2)) {
        return false;
      }
      return void 0 !== filterValue2;
    }(filterValue, column) ? filterValue : null;
  };
  var updateFilterValue = function(that, options2) {
    var value2 = "" === options2.value ? null : options2.value;
    var $editorContainer = options2.container;
    var column = that._columnsController.columnOption(options2.column.index);
    var filterValue = getFilterValue2(that, column.index, $editorContainer);
    if (!isDefined(filterValue) && !isDefined(value2)) {
      return;
    }
    that._applyFilterViewController.setHighLight($editorContainer, filterValue !== value2);
    var columnOptionName = isOnClickApplyFilterMode(that) ? "bufferedFilterValue" : "filterValue";
    var normalizedValue = function(that2, filterValue2, column2, $editorContainer2) {
      if ("between" === getColumnSelectedFilterOperation(that2, column2)) {
        var columnFilterValue = getColumnFilterValue(that2, column2);
        if ($editorContainer2.hasClass(that2.addWidgetPrefix(FILTER_RANGE_START_CLASS))) {
          return [filterValue2, Array.isArray(columnFilterValue) ? columnFilterValue[1] : void 0];
        }
        return [Array.isArray(columnFilterValue) ? columnFilterValue[0] : columnFilterValue, filterValue2];
      }
      return filterValue2;
    }(that, value2, column, $editorContainer);
    var isBetween = "between" === getColumnSelectedFilterOperation(that, column);
    var notFireEvent = options2.notFireEvent || isBetween && Array.isArray(normalizedValue) && normalizedValue.includes(void 0);
    that._columnsController.columnOption(column.index, columnOptionName, normalizedValue, notFireEvent);
  };
  return {
    _updateEditorValue(column, $editorContainer) {
      var editor = getEditorInstance($editorContainer);
      editor && editor.option("value", getFilterValue2(this, column.index, $editorContainer));
    },
    _columnOptionChanged(e) {
      var {
        optionNames
      } = e;
      var $cell;
      var $editorContainer;
      var $editorRangeElements;
      var $menu;
      if (m_utils_default.checkChanges(optionNames, ["filterValue", "bufferedFilterValue", "selectedFilterOperation", "bufferedSelectedFilterOperation", "filterValues", "filterType"]) && void 0 !== e.columnIndex) {
        var visibleIndex = this._columnsController.getVisibleIndex(e.columnIndex);
        var column = this._columnsController.columnOption(e.columnIndex);
        $cell = this._getCellElement(this.element().find(".".concat(this.addWidgetPrefix(FILTER_ROW_CLASS2))).index(), visibleIndex) || renderer_default();
        $editorContainer = $cell.find(".".concat(EDITOR_CONTAINER_CLASS)).first();
        if (optionNames.filterValue || optionNames.bufferedFilterValue) {
          this._updateEditorValue(column, $editorContainer);
          var overlayInstance = $cell.find(".".concat(this.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS))).data("dxOverlay");
          if (overlayInstance) {
            $editorRangeElements = overlayInstance.$content().find(".".concat(EDITOR_CONTAINER_CLASS));
            this._updateEditorValue(column, $editorRangeElements.first());
            this._updateEditorValue(column, $editorRangeElements.last());
          }
          if (!overlayInstance || !overlayInstance.option("visible")) {
            this._updateFilterRangeContent($cell, getRangeTextByFilterValue(this, column));
          }
        }
        if (optionNames.selectedFilterOperation || optionNames.bufferedSelectedFilterOperation) {
          if (visibleIndex >= 0 && column) {
            $menu = $cell.find(".".concat(MENU_CLASS));
            if ($menu.length) {
              this._updateFilterOperationChooser($menu, column, $editorContainer);
              if ("between" === getColumnSelectedFilterOperation(this, column)) {
                this._renderFilterRangeContent($cell, column);
              } else if ($editorContainer.find(".".concat(FILTER_RANGE_CONTENT_CLASS)).length) {
                this._renderEditor($editorContainer, this._getEditorOptions($editorContainer, column));
                this._hideFilterRange();
              }
            }
          }
        }
        return;
      }
      this.callBase(e);
    },
    _renderCore() {
      this._filterRangeOverlayInstance = null;
      return this.callBase.apply(this, arguments);
    },
    _resizeCore() {
      this.callBase.apply(this, arguments);
      this._filterRangeOverlayInstance && this._filterRangeOverlayInstance.repaint();
    },
    isFilterRowVisible() {
      return this._isElementVisible(this.option("filterRow"));
    },
    isVisible() {
      return this.callBase() || this.isFilterRowVisible();
    },
    init() {
      this.callBase();
      this._applyFilterViewController = this.getController("applyFilter");
    },
    _initFilterRangeOverlay($cell, column) {
      var that = this;
      var sharedData = {};
      var $editorContainer = $cell.find(".dx-editor-container");
      var filterRangeOverlayClass = that.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS);
      var $overlay = renderer_default("<div>").addClass(filterRangeOverlayClass).appendTo($cell);
      return that._createComponent($overlay, ui_overlay_default, {
        height: "auto",
        shading: false,
        showTitle: false,
        focusStateEnabled: false,
        hideOnOutsideClick: true,
        wrapperAttr: {
          class: filterRangeOverlayClass
        },
        animation: false,
        position: {
          my: "top",
          at: "top",
          of: $editorContainer.length && $editorContainer || $cell,
          offset: "0 -1"
        },
        contentTemplate(contentElement) {
          var editorOptions;
          var $editor = renderer_default("<div>").addClass("".concat(EDITOR_CONTAINER_CLASS, " ").concat(that.addWidgetPrefix(FILTER_RANGE_START_CLASS))).appendTo(contentElement);
          column = that._columnsController.columnOption(column.index);
          editorOptions = that._getEditorOptions($editor, column);
          editorOptions.sharedData = sharedData;
          that._renderEditor($editor, editorOptions);
          events_engine_default.on($editor.find(EDITORS_INPUT_SELECTOR2), "keydown", (e) => {
            var $prevElement = $cell.find("[tabindex]").not(e.target).first();
            if ("tab" === normalizeKeyName(e) && e.shiftKey) {
              e.preventDefault();
              that._hideFilterRange();
              if (!$prevElement.length) {
                $prevElement = $cell.prev().find("[tabindex]").last();
              }
              events_engine_default.trigger($prevElement, "focus");
            }
          });
          $editor = renderer_default("<div>").addClass("".concat(EDITOR_CONTAINER_CLASS, " ").concat(that.addWidgetPrefix(FILTER_RANGE_END_CLASS))).appendTo(contentElement);
          editorOptions = that._getEditorOptions($editor, column);
          editorOptions.sharedData = sharedData;
          that._renderEditor($editor, editorOptions);
          events_engine_default.on($editor.find(EDITORS_INPUT_SELECTOR2), "keydown", (e) => {
            if ("tab" === normalizeKeyName(e) && !e.shiftKey) {
              e.preventDefault();
              that._hideFilterRange();
              events_engine_default.trigger($cell.next().find("[tabindex]").first(), "focus");
            }
          });
          return renderer_default(contentElement).addClass(that.getWidgetContainerClass());
        },
        onShown(e) {
          var $editor = e.component.$content().find(".".concat(EDITOR_CONTAINER_CLASS)).first();
          events_engine_default.trigger($editor.find(EDITORS_INPUT_SELECTOR2), "focus");
        },
        onHidden() {
          column = that._columnsController.columnOption(column.index);
          $cell.find(".".concat(MENU_CLASS)).parent().addClass(EDITOR_WITH_MENU_CLASS);
          if ("between" === getColumnSelectedFilterOperation(that, column)) {
            that._updateFilterRangeContent($cell, getRangeTextByFilterValue(that, column));
            that.component.updateDimensions();
          }
        }
      });
    },
    _updateFilterRangeOverlay(options2) {
      var overlayInstance = this._filterRangeOverlayInstance;
      overlayInstance && overlayInstance.option(options2);
    },
    _showFilterRange($cell, column) {
      var $overlay = $cell.children(".".concat(this.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS)));
      var overlayInstance = $overlay.length && $overlay.data("dxOverlay");
      if (!overlayInstance && column) {
        overlayInstance = this._initFilterRangeOverlay($cell, column);
      }
      if (!overlayInstance.option("visible")) {
        this._filterRangeOverlayInstance && this._filterRangeOverlayInstance.hide();
        this._filterRangeOverlayInstance = overlayInstance;
        this._updateFilterRangeOverlay({
          width: getOuterWidth($cell, true) + CORRECT_FILTER_RANGE_OVERLAY_WIDTH
        });
        this._filterRangeOverlayInstance && this._filterRangeOverlayInstance.show();
      }
    },
    _hideFilterRange() {
      var overlayInstance = this._filterRangeOverlayInstance;
      overlayInstance && overlayInstance.hide();
    },
    getFilterRangeOverlayInstance() {
      return this._filterRangeOverlayInstance;
    },
    _createRow(row) {
      var $row = this.callBase(row);
      if ("filter" === row.rowType) {
        $row.addClass(this.addWidgetPrefix(FILTER_ROW_CLASS2));
        if (!this.option("useLegacyKeyboardNavigation")) {
          events_engine_default.on($row, "keydown", (event) => selectView("filterRow", this, event));
        }
      }
      return $row;
    },
    _getRows() {
      var result2 = this.callBase();
      if (this.isFilterRowVisible()) {
        result2.push({
          rowType: "filter"
        });
      }
      return result2;
    },
    _renderFilterCell(cell, options2) {
      var {
        column
      } = options2;
      var $cell = renderer_default(cell);
      if (this.component.option("showColumnHeaders")) {
        this.setAria("describedby", column.headerId, $cell);
      }
      this.setAria("label", message_default.format("dxDataGrid-ariaFilterCell"), $cell);
      $cell.addClass(EDITOR_CELL_CLASS3);
      var $container = renderer_default("<div>").appendTo($cell);
      var $editorContainer = renderer_default("<div>").addClass(EDITOR_CONTAINER_CLASS).appendTo($container);
      if ("between" === getColumnSelectedFilterOperation(this, column)) {
        this._renderFilterRangeContent($cell, column);
      } else {
        var editorOptions = this._getEditorOptions($editorContainer, column);
        this._renderEditor($editorContainer, editorOptions);
      }
      var {
        alignment
      } = column;
      if (alignment && "center" !== alignment) {
        $cell.find(EDITORS_INPUT_SELECTOR2).first().css("textAlign", column.alignment);
      }
      if (column.filterOperations && column.filterOperations.length) {
        this._renderFilterOperationChooser($container, column, $editorContainer);
      }
    },
    _renderCellContent($cell, options2) {
      var that = this;
      var {
        column
      } = options2;
      if ("filter" === options2.rowType) {
        if (column.command) {
          $cell.html("&nbsp;");
        } else if (column.allowFiltering) {
          that.renderTemplate($cell, that._renderFilterCell.bind(that), options2).done(() => {
            that._updateCell($cell, options2);
          });
          return;
        }
      }
      this.callBase.apply(this, arguments);
    },
    _getEditorOptions($editorContainer, column) {
      var that = this;
      var accessibilityOptions = {
        editorOptions: {
          inputAttr: that._getFilterInputAccessibilityAttributes(column)
        }
      };
      var result2 = extend(accessibilityOptions, column, {
        value: getFilterValue2(that, column.index, $editorContainer),
        parentType: "filterRow",
        showAllText: that.option("filterRow.showAllText"),
        updateValueTimeout: "onClick" === that.option("filterRow.applyFilter") ? 0 : FILTERING_TIMEOUT,
        width: null,
        setValue(value2, notFireEvent) {
          updateFilterValue(that, {
            column,
            value: value2,
            container: $editorContainer,
            notFireEvent
          });
        }
      });
      if ("between" === getColumnSelectedFilterOperation(that, column)) {
        if ($editorContainer.hasClass(that.addWidgetPrefix(FILTER_RANGE_START_CLASS))) {
          result2.placeholder = that.option("filterRow.betweenStartText");
        } else {
          result2.placeholder = that.option("filterRow.betweenEndText");
        }
      }
      return result2;
    },
    _getFilterInputAccessibilityAttributes(column) {
      var columnAriaLabel = message_default.format("dxDataGrid-ariaFilterCell");
      if (this.component.option("showColumnHeaders")) {
        return {
          "aria-label": columnAriaLabel,
          "aria-describedby": column.headerId
        };
      }
      return {
        "aria-label": columnAriaLabel
      };
    },
    _renderEditor($editorContainer, options2) {
      $editorContainer.empty();
      var $element = renderer_default("<div>").appendTo($editorContainer);
      var editorController = this.getController("editorFactory");
      var dataSource = this.getController("data").dataSource();
      var filterRowController = this.getController("applyFilter");
      if (options2.lookup && this.option("syncLookupFilterValues")) {
        filterRowController.setCurrentColumnForFiltering(options2);
        var filter = this.getController("data").getCombinedFilter();
        filterRowController.setCurrentColumnForFiltering(null);
        var lookupDataSource = m_utils_default.getWrappedLookupDataSource(options2, dataSource, filter);
        var lookupOptions = _extends(_extends({}, options2), {
          lookup: _extends(_extends({}, options2.lookup), {
            dataSource: lookupDataSource
          })
        });
        return editorController.createEditor($element, lookupOptions);
      }
      return editorController.createEditor($element, options2);
    },
    _renderFilterRangeContent($cell, column) {
      var that = this;
      var $editorContainer = $cell.find(".".concat(EDITOR_CONTAINER_CLASS)).first();
      $editorContainer.empty();
      var $filterRangeContent = renderer_default("<div>").addClass(FILTER_RANGE_CONTENT_CLASS).attr("tabindex", this.option("tabIndex"));
      events_engine_default.on($filterRangeContent, "focusin", () => {
        that._showFilterRange($cell, column);
      });
      $filterRangeContent.appendTo($editorContainer);
      that._updateFilterRangeContent($cell, getRangeTextByFilterValue(that, column));
    },
    _updateFilterRangeContent($cell, value2) {
      var $filterRangeContent = $cell.find(".".concat(FILTER_RANGE_CONTENT_CLASS));
      if ($filterRangeContent.length) {
        if ("" === value2) {
          $filterRangeContent.html("&nbsp;");
        } else {
          $filterRangeContent.text(value2);
        }
      }
    },
    _updateFilterOperationChooser($menu, column, $editorContainer) {
      var that = this;
      var isCellWasFocused;
      var restoreFocus3 = function() {
        var menu = menu_default.getInstance($menu);
        menu && menu.option("focusedElement", null);
        isCellWasFocused && that._focusEditor($editorContainer);
      };
      that._createComponent($menu, menu_default, {
        integrationOptions: {},
        activeStateEnabled: false,
        selectionMode: "single",
        cssClass: "".concat(that.getWidgetContainerClass(), " ").concat(CELL_FOCUS_DISABLED_CLASS5, " ").concat(FILTER_MENU),
        showFirstSubmenuMode: "onHover",
        hideSubmenuOnMouseLeave: true,
        items: [{
          disabled: !(column.filterOperations && column.filterOperations.length),
          icon: OPERATION_ICONS[getColumnSelectedFilterOperation(that, column) || "default"],
          selectable: false,
          items: that._getFilterOperationMenuItems(column)
        }],
        onItemRendered: (_ref) => {
          var {
            itemElement
          } = _ref;
          this.setAria("label", ARIA_SEARCH_BOX, renderer_default(itemElement));
        },
        onItemClick(properties) {
          var selectedFilterOperation = properties.itemData.name;
          var columnSelectedFilterOperation = getColumnSelectedFilterOperation(that, column);
          var notFocusEditor = false;
          var isOnClickMode = isOnClickApplyFilterMode(that);
          var options2 = {};
          if (properties.itemData.items || selectedFilterOperation && selectedFilterOperation === columnSelectedFilterOperation) {
            return;
          }
          if (selectedFilterOperation) {
            options2[isOnClickMode ? "bufferedSelectedFilterOperation" : "selectedFilterOperation"] = selectedFilterOperation;
            if ("between" === selectedFilterOperation || "between" === columnSelectedFilterOperation) {
              notFocusEditor = "between" === selectedFilterOperation;
              options2[isOnClickMode ? "bufferedFilterValue" : "filterValue"] = null;
            }
          } else {
            options2[isOnClickMode ? "bufferedFilterValue" : "filterValue"] = null;
            options2[isOnClickMode ? "bufferedSelectedFilterOperation" : "selectedFilterOperation"] = column.defaultSelectedFilterOperation || null;
          }
          that._columnsController.columnOption(column.index, options2);
          that._applyFilterViewController.setHighLight($editorContainer, true);
          if (!selectedFilterOperation) {
            var editor = getEditorInstance($editorContainer);
            if (editor && "dxDateBox" === editor.NAME && !editor.option("isValid")) {
              editor.clear();
              editor.option("isValid", true);
            }
          }
          if (!notFocusEditor) {
            that._focusEditor($editorContainer);
          } else {
            that._showFilterRange($editorContainer.closest(".".concat(EDITOR_CELL_CLASS3)), column);
          }
        },
        onSubmenuShowing() {
          isCellWasFocused = that._isEditorFocused($editorContainer);
          that.getController("editorFactory").loseFocus();
        },
        onSubmenuHiding() {
          events_engine_default.trigger($menu, "blur");
          restoreFocus3();
        },
        onContentReady(e) {
          events_engine_default.on($menu, "blur", () => {
            var menu = e.component;
            menu._hideSubmenuAfterTimeout();
            restoreFocus3();
          });
        },
        rtlEnabled: that.option("rtlEnabled")
      });
    },
    _isEditorFocused: ($container) => $container.hasClass(FOCUSED_CLASS) || $container.parents(".".concat(FOCUSED_CLASS)).length,
    _focusEditor($container) {
      this.getController("editorFactory").focus($container);
      events_engine_default.trigger($container.find(EDITORS_INPUT_SELECTOR2), "focus");
    },
    _renderFilterOperationChooser($container, column, $editorContainer) {
      var $menu;
      if (this.option("filterRow.showOperationChooser")) {
        $container.addClass(EDITOR_WITH_MENU_CLASS);
        $menu = renderer_default("<div>").prependTo($container);
        this._updateFilterOperationChooser($menu, column, $editorContainer);
      }
    },
    _getFilterOperationMenuItems(column) {
      var that = this;
      var result2 = [{}];
      var filterRowOptions = that.option("filterRow");
      var operationDescriptions = filterRowOptions && filterRowOptions.operationDescriptions || {};
      if (column.filterOperations && column.filterOperations.length) {
        var availableFilterOperations = column.filterOperations.filter((value2) => isDefined(OPERATION_DESCRIPTORS[value2]));
        result2 = map(availableFilterOperations, (value2) => {
          var descriptionName = OPERATION_DESCRIPTORS[value2];
          return {
            name: value2,
            selected: (getColumnSelectedFilterOperation(that, column) || column.defaultFilterOperation) === value2,
            text: operationDescriptions[descriptionName],
            icon: OPERATION_ICONS[value2]
          };
        });
        result2.push({
          name: null,
          text: filterRowOptions && filterRowOptions.resetOperationText,
          icon: OPERATION_ICONS.default
        });
      }
      return result2;
    },
    _handleDataChanged(e) {
      var _a2, _b2, _c, _d, _e, _f;
      var dataSource = null === (_b2 = null === (_a2 = this._dataController) || void 0 === _a2 ? void 0 : _a2.dataSource) || void 0 === _b2 ? void 0 : _b2.call(_a2);
      var lastLoadOptions = null === (_c = null === dataSource || void 0 === dataSource ? void 0 : dataSource.lastLoadOptions) || void 0 === _c ? void 0 : _c.call(dataSource);
      this.callBase.apply(this, arguments);
      if ((null === (_d = e.operationTypes) || void 0 === _d ? void 0 : _d.filtering) || (null === (_e = e.operationTypes) || void 0 === _e ? void 0 : _e.fullReload)) {
        this.updateLookupDataSource((null === (_f = e.operationTypes) || void 0 === _f ? void 0 : _f.filtering) || (null === lastLoadOptions || void 0 === lastLoadOptions ? void 0 : lastLoadOptions.filter));
      }
    },
    updateLookupDataSource(filterChanged) {
      if (!this.option("syncLookupFilterValues")) {
        return;
      }
      if (!this.element()) {
        return;
      }
      var columns2 = this._columnsController.getVisibleColumns();
      var dataSource = this._dataController.dataSource();
      var applyFilterViewController = this._applyFilterViewController;
      var rowIndex = this.element().find(".".concat(this.addWidgetPrefix(FILTER_ROW_CLASS2))).index();
      if (-1 === rowIndex) {
        return;
      }
      columns2.forEach((column, index2) => {
        if (!column.lookup || column.calculateCellValue !== column.defaultCalculateCellValue) {
          return;
        }
        var $cell = this._getCellElement(rowIndex, index2);
        var editor = getEditorInstance(null === $cell || void 0 === $cell ? void 0 : $cell.find(".dx-editor-container"));
        if (editor) {
          applyFilterViewController.setCurrentColumnForFiltering(column);
          var filter = this._dataController.getCombinedFilter() || null;
          applyFilterViewController.setCurrentColumnForFiltering(null);
          var editorDataSource = editor.option("dataSource");
          var shouldUpdateFilter = !filterChanged || !equalByValue(editorDataSource.__dataGridSourceFilter || null, filter);
          if (shouldUpdateFilter) {
            var lookupDataSource = m_utils_default.getWrappedLookupDataSource(column, dataSource, filter);
            editor.option("dataSource", lookupDataSource);
          }
        }
      });
    },
    optionChanged(args) {
      switch (args.name) {
        case "filterRow":
        case "showColumnLines":
          this._invalidate(true, true);
          args.handled = true;
          break;
        case "syncLookupFilterValues":
          if (args.value) {
            this.updateLookupDataSource();
          } else {
            this.render();
          }
          args.handled = true;
          break;
        default:
          this.callBase(args);
      }
    }
  };
}();
var DataControllerFilterRowExtender = {
  skipCalculateColumnFilters: () => false,
  _calculateAdditionalFilter() {
    if (this.skipCalculateColumnFilters()) {
      return this.callBase();
    }
    var filters = [this.callBase()];
    var columns2 = this._columnsController.getVisibleColumns(null, true);
    var filterRowController = this.getController("applyFilter");
    each(columns2, function() {
      var _a2;
      var shouldSkip = (null === (_a2 = filterRowController.getCurrentColumnForFiltering()) || void 0 === _a2 ? void 0 : _a2.index) === this.index;
      if (this.allowFiltering && this.calculateFilterExpression && isDefined(this.filterValue) && !shouldSkip) {
        var filter = this.createFilterExpression(this.filterValue, this.selectedFilterOperation || this.defaultFilterOperation, "filterRow");
        filters.push(filter);
      }
    });
    return m_utils_default.combineFilters(filters);
  }
};
var ApplyFilterViewController = m_modules_default.ViewController.inherit({
  _getHeaderPanel() {
    if (!this._headerPanel) {
      this._headerPanel = this.getView("headerPanel");
    }
    return this._headerPanel;
  },
  setHighLight($element, value2) {
    if (isOnClickApplyFilterMode(this)) {
      $element && $element.toggleClass(HIGHLIGHT_OUTLINE_CLASS, value2) && $element.closest(".".concat(EDITOR_CELL_CLASS3)).toggleClass(FILTER_MODIFIED_CLASS, value2);
      this._getHeaderPanel().enableApplyButton(value2);
    }
  },
  applyFilter() {
    var columnsController = this.getController("columns");
    var columns2 = columnsController.getColumns();
    columnsController.beginUpdate();
    for (var i = 0; i < columns2.length; i++) {
      var column = columns2[i];
      if (void 0 !== column.bufferedFilterValue) {
        columnsController.columnOption(i, "filterValue", column.bufferedFilterValue);
        column.bufferedFilterValue = void 0;
      }
      if (void 0 !== column.bufferedSelectedFilterOperation) {
        columnsController.columnOption(i, "selectedFilterOperation", column.bufferedSelectedFilterOperation);
        column.bufferedSelectedFilterOperation = void 0;
      }
    }
    columnsController.endUpdate();
    this.removeHighLights();
  },
  removeHighLights() {
    if (isOnClickApplyFilterMode(this)) {
      var columnHeadersViewElement = this.getView("columnHeadersView").element();
      columnHeadersViewElement.find(".".concat(this.addWidgetPrefix(FILTER_ROW_CLASS2), " .").concat(HIGHLIGHT_OUTLINE_CLASS)).removeClass(HIGHLIGHT_OUTLINE_CLASS);
      columnHeadersViewElement.find(".".concat(this.addWidgetPrefix(FILTER_ROW_CLASS2), " .").concat(FILTER_MODIFIED_CLASS)).removeClass(FILTER_MODIFIED_CLASS);
      this._getHeaderPanel().enableApplyButton(false);
    }
  },
  setCurrentColumnForFiltering(column) {
    this._currentColumn = column;
  },
  getCurrentColumnForFiltering() {
    return this._currentColumn;
  }
});
var filterRowModule = {
  defaultOptions: () => ({
    syncLookupFilterValues: true,
    filterRow: {
      visible: false,
      showOperationChooser: true,
      showAllText: message_default.format("dxDataGrid-filterRowShowAllText"),
      resetOperationText: message_default.format("dxDataGrid-filterRowResetOperationText"),
      applyFilter: "auto",
      applyFilterText: message_default.format("dxDataGrid-applyFilterText"),
      operationDescriptions: {
        equal: message_default.format("dxDataGrid-filterRowOperationEquals"),
        notEqual: message_default.format("dxDataGrid-filterRowOperationNotEquals"),
        lessThan: message_default.format("dxDataGrid-filterRowOperationLess"),
        lessThanOrEqual: message_default.format("dxDataGrid-filterRowOperationLessOrEquals"),
        greaterThan: message_default.format("dxDataGrid-filterRowOperationGreater"),
        greaterThanOrEqual: message_default.format("dxDataGrid-filterRowOperationGreaterOrEquals"),
        startsWith: message_default.format("dxDataGrid-filterRowOperationStartsWith"),
        contains: message_default.format("dxDataGrid-filterRowOperationContains"),
        notContains: message_default.format("dxDataGrid-filterRowOperationNotContains"),
        endsWith: message_default.format("dxDataGrid-filterRowOperationEndsWith"),
        between: message_default.format("dxDataGrid-filterRowOperationBetween"),
        isBlank: message_default.format("dxFilterBuilder-filterOperationIsBlank"),
        isNotBlank: message_default.format("dxFilterBuilder-filterOperationIsNotBlank")
      },
      betweenStartText: message_default.format("dxDataGrid-filterRowOperationBetweenStartText"),
      betweenEndText: message_default.format("dxDataGrid-filterRowOperationBetweenEndText")
    }
  }),
  controllers: {
    applyFilter: ApplyFilterViewController
  },
  extenders: {
    controllers: {
      data: DataControllerFilterRowExtender,
      columnsResizer: {
        _startResizing() {
          this.callBase.apply(this, arguments);
          if (this.isResizing()) {
            var overlayInstance = this._columnHeadersView.getFilterRangeOverlayInstance();
            if (overlayInstance) {
              var cellIndex = overlayInstance.$element().closest("td").index();
              if (cellIndex === this._targetPoint.columnIndex || cellIndex === this._targetPoint.columnIndex + 1) {
                overlayInstance.$content().hide();
              }
            }
          }
        },
        _endResizing() {
          var $cell;
          if (this.isResizing()) {
            var overlayInstance = this._columnHeadersView.getFilterRangeOverlayInstance();
            if (overlayInstance) {
              $cell = overlayInstance.$element().closest("td");
              this._columnHeadersView._updateFilterRangeOverlay({
                width: getOuterWidth($cell, true) + CORRECT_FILTER_RANGE_OVERLAY_WIDTH
              });
              overlayInstance.$content().show();
            }
          }
          this.callBase.apply(this, arguments);
        }
      },
      editing: {
        updateFieldValue(options2) {
          if (options2.column.lookup) {
            this._needUpdateLookupDataSource = true;
          }
          return this.callBase.apply(this, arguments);
        },
        _afterSaveEditData(cancel2) {
          var _a2;
          if (this._needUpdateLookupDataSource && !cancel2) {
            null === (_a2 = this.getView("columnHeadersView")) || void 0 === _a2 ? void 0 : _a2.updateLookupDataSource();
          }
          this._needUpdateLookupDataSource = false;
          return this.callBase.apply(this, arguments);
        },
        _afterCancelEditData() {
          this._needUpdateLookupDataSource = false;
          return this.callBase.apply(this, arguments);
        }
      }
    },
    views: {
      columnHeadersView: ColumnHeadersViewFilterRowExtender,
      headerPanel: {
        _getToolbarItems() {
          var items = this.callBase();
          var filterItem = this._prepareFilterItem(items);
          return filterItem.concat(items);
        },
        _prepareFilterItem() {
          var that = this;
          var filterItem = [];
          if (that._isShowApplyFilterButton()) {
            var hintText = that.option("filterRow.applyFilterText");
            var columns2 = that._columnsController.getColumns();
            var disabled = !columns2.filter((column) => void 0 !== column.bufferedFilterValue).length;
            var toolbarItem = {
              widget: "dxButton",
              options: {
                icon: "apply-filter",
                disabled,
                onClick: function() {
                  that._applyFilterViewController.applyFilter();
                },
                hint: hintText,
                text: hintText,
                onInitialized: function(e) {
                  renderer_default(e.element).addClass(that._getToolbarButtonClass(APPLY_BUTTON_CLASS));
                }
              },
              showText: "inMenu",
              name: "applyFilterButton",
              location: "after",
              locateInMenu: "auto",
              sortIndex: 10
            };
            filterItem.push(toolbarItem);
          }
          return filterItem;
        },
        _isShowApplyFilterButton() {
          var filterRowOptions = this.option("filterRow");
          return filterRowOptions && filterRowOptions.visible && "onClick" === filterRowOptions.applyFilter;
        },
        init() {
          this.callBase();
          this._dataController = this.getController("data");
          this._applyFilterViewController = this.getController("applyFilter");
        },
        enableApplyButton(value2) {
          this.setToolbarItemDisabled("applyFilterButton", !value2);
        },
        isVisible() {
          return this.callBase() || this._isShowApplyFilterButton();
        },
        optionChanged(args) {
          if ("filterRow" === args.name) {
            this._invalidate();
            args.handled = true;
          } else {
            this.callBase(args);
          }
        }
      }
    }
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/filter_row.js
m_core_default.registerModule("filterRow", filterRowModule);

// node_modules/devextreme/esm/ui/list/modules/search.js
ui_search_box_mixin_default.setEditorClass(text_box_default2);

// node_modules/devextreme/esm/__internal/grids/grid_core/header_filter/m_header_filter_core.js
var HEADER_FILTER_CLASS = "dx-header-filter";
var HEADER_FILTER_MENU_CLASS = "dx-header-filter-menu";
var DEFAULT_SEARCH_EXPRESSION = "text";
function resetChildrenItemSelection(items) {
  items = items || [];
  for (var i = 0; i < items.length; i++) {
    items[i].selected = false;
    resetChildrenItemSelection(items[i].items);
  }
}
function getSelectAllCheckBox(listComponent) {
  var selector = "dxTreeView" === listComponent.NAME ? ".dx-treeview-select-all-item" : ".dx-list-select-all-checkbox";
  return listComponent.$element().find(selector).dxCheckBox("instance");
}
function updateListSelectAllState(e, filterValues) {
  if (e.component.option("searchValue")) {
    return;
  }
  var selectAllCheckBox = getSelectAllCheckBox(e.component);
  if (selectAllCheckBox && filterValues && filterValues.length) {
    selectAllCheckBox.option("value", void 0);
  }
}
function updateHeaderFilterItemSelectionState(item, filterValuesMatch, isExcludeFilter) {
  if (filterValuesMatch ^ isExcludeFilter) {
    item.selected = true;
    if (isExcludeFilter && item.items) {
      for (var j = 0; j < item.items.length; j++) {
        if (!item.items[j].selected) {
          item.selected = void 0;
          break;
        }
      }
    }
  } else if (isExcludeFilter || item.selected) {
    item.selected = false;
    resetChildrenItemSelection(item.items);
  }
}
var HeaderFilterView = m_modules_default.View.inherit({
  getPopupContainer() {
    return this._popupContainer;
  },
  getListComponent() {
    return this._listComponent;
  },
  applyHeaderFilter(options2) {
    var list = this.getListComponent();
    var searchValue = list.option("searchValue");
    var selectAllCheckBox = getSelectAllCheckBox(list);
    var isAllSelected = !searchValue && !options2.isFilterBuilder && (null === selectAllCheckBox || void 0 === selectAllCheckBox ? void 0 : selectAllCheckBox.option("value"));
    var filterValues = [];
    if (!isAllSelected) {
      if ("tree" === options2.type) {
        if (options2.filterType) {
          options2.filterType = "include";
        }
        !function fillSelectedItemKeys(filterValues2, items, isExclude) {
          each(items, (_, item) => {
            if (void 0 !== item.selected && !!item.selected ^ isExclude) {
              var node = list._getNode(item);
              var hasChildren2 = list._hasChildren(node);
              var hasChildrenWithSelection = hasChildren2 && item.items && item.items.some((item2) => item2.selected);
              if (!searchValue || !hasChildrenWithSelection) {
                filterValues2.push(item.value);
                return;
              }
            }
            if (item.items && item.items.length) {
              fillSelectedItemKeys(filterValues2, item.items, isExclude);
            }
          });
        }(filterValues, list.option("items"), false);
        options2.filterValues = filterValues;
      }
    } else {
      if ("tree" === options2.type) {
        options2.filterType = "exclude";
      }
      if (Array.isArray(options2.filterValues)) {
        options2.filterValues = [];
      }
    }
    if (options2.filterValues && !options2.filterValues.length) {
      options2.filterValues = null;
    }
    options2.apply();
    this.hideHeaderFilterMenu();
  },
  showHeaderFilterMenu($columnElement, options2) {
    if (options2) {
      this._initializePopupContainer(options2);
      var popupContainer = this.getPopupContainer();
      this.hideHeaderFilterMenu();
      this.updatePopup($columnElement, options2);
      popupContainer.show();
    }
  },
  hideHeaderFilterMenu() {
    var headerFilterMenu = this.getPopupContainer();
    headerFilterMenu && headerFilterMenu.hide();
  },
  updatePopup($element, options2) {
    var showColumnLines = this.option("showColumnLines");
    var alignment = "right" === options2.alignment ^ !showColumnLines ? "left" : "right";
    this._popupContainer.setAria({
      role: "dialog",
      label: message_default.format("dxDataGrid-headerFilterLabel")
    });
    if (this._popupContainer) {
      this._cleanPopupContent();
      this._popupContainer.option("position", {
        my: "".concat(alignment, " top"),
        at: "".concat(alignment, " bottom"),
        of: $element,
        collision: "fit fit"
      });
    }
  },
  _getSearchExpr(options2, headerFilterOptions) {
    var {
      lookup
    } = options2;
    var {
      useDefaultSearchExpr
    } = options2;
    var headerFilterDataSource = headerFilterOptions.dataSource;
    var filterSearchExpr = headerFilterOptions.search.searchExpr;
    if (filterSearchExpr) {
      return filterSearchExpr;
    }
    if (useDefaultSearchExpr || isDefined(headerFilterDataSource) && !isFunction(headerFilterDataSource)) {
      return DEFAULT_SEARCH_EXPRESSION;
    }
    if (lookup) {
      return lookup.displayExpr || "this";
    }
    if (options2.dataSource) {
      var {
        group
      } = options2.dataSource;
      if (Array.isArray(group) && group.length > 0) {
        return group[0].selector;
      }
      if (isFunction(group) && !options2.remoteFiltering) {
        return group;
      }
    }
    return options2.dataField || options2.selector;
  },
  _cleanPopupContent() {
    this._popupContainer && this._popupContainer.$content().empty();
  },
  _initializePopupContainer(options2) {
    var that = this;
    var $element = that.element();
    var headerFilterOptions = this._normalizeHeaderFilterOptions(options2);
    var {
      height,
      width
    } = headerFilterOptions;
    var dxPopupOptions = {
      width,
      height,
      visible: false,
      shading: false,
      showTitle: false,
      showCloseButton: false,
      hideOnParentScroll: false,
      dragEnabled: false,
      hideOnOutsideClick: true,
      wrapperAttr: {
        class: HEADER_FILTER_MENU_CLASS
      },
      focusStateEnabled: false,
      toolbarItems: [{
        toolbar: "bottom",
        location: "after",
        widget: "dxButton",
        options: {
          text: headerFilterOptions.texts.ok,
          onClick() {
            that.applyHeaderFilter(options2);
          }
        }
      }, {
        toolbar: "bottom",
        location: "after",
        widget: "dxButton",
        options: {
          text: headerFilterOptions.texts.cancel,
          onClick() {
            that.hideHeaderFilterMenu();
          }
        }
      }],
      resizeEnabled: true,
      onShowing(e) {
        e.component.$content().parent().addClass("dx-dropdowneditor-overlay");
        that._initializeListContainer(options2, headerFilterOptions);
        options2.onShowing && options2.onShowing(e);
      },
      onShown() {
        that.getListComponent().focus();
      },
      onHidden: options2.onHidden,
      onInitialized(e) {
        var {
          component
        } = e;
        component.option("animation", component._getDefaultOptions().animation);
      }
    };
    if (!isDefined(that._popupContainer)) {
      that._popupContainer = that._createComponent($element, ui_popup_default, dxPopupOptions);
    } else {
      that._popupContainer.option(dxPopupOptions);
    }
  },
  _initializeListContainer(options2, headerFilterOptions) {
    var that = this;
    var $content = that._popupContainer.$content();
    var needShowSelectAllCheckbox = !options2.isFilterBuilder && headerFilterOptions.allowSelectAll;
    var widgetOptions = {
      searchEnabled: headerFilterOptions.search.enabled,
      searchTimeout: headerFilterOptions.search.timeout,
      searchEditorOptions: headerFilterOptions.search.editorOptions,
      searchMode: headerFilterOptions.search.mode || "",
      dataSource: options2.dataSource,
      onContentReady() {
        that.renderCompleted.fire();
      },
      itemTemplate(data3, _, element) {
        var $element = renderer_default(element);
        if (options2.encodeHtml) {
          return $element.text(data3.text);
        }
        return $element.html(data3.text);
      }
    };
    function onOptionChanged(e) {
      if ("searchValue" === e.fullName && needShowSelectAllCheckbox && false !== that.option("headerFilter.hideSelectAllOnSearch")) {
        if ("tree" === options2.type) {
          e.component.option("showCheckBoxesMode", e.value ? "normal" : "selectAll");
        } else {
          e.component.option("selectionMode", e.value ? "multiple" : "all");
        }
      }
    }
    if ("tree" === options2.type) {
      that._listComponent = that._createComponent(renderer_default("<div>").appendTo($content), tree_view_default, extend(widgetOptions, {
        showCheckBoxesMode: needShowSelectAllCheckbox ? "selectAll" : "normal",
        onOptionChanged,
        keyExpr: "id"
      }));
    } else {
      that._listComponent = that._createComponent(renderer_default("<div>").appendTo($content), list_light_default, extend(widgetOptions, {
        searchExpr: that._getSearchExpr(options2, headerFilterOptions),
        pageLoadMode: "scrollBottom",
        showSelectionControls: true,
        selectionMode: needShowSelectAllCheckbox ? "all" : "multiple",
        onOptionChanged,
        onSelectionChanged(e) {
          var items = e.component.option("items");
          var selectedItems = e.component.option("selectedItems");
          if (!e.component._selectedItemsUpdating && !e.component.option("searchValue") && !options2.isFilterBuilder) {
            var filterValues = options2.filterValues || [];
            var isExclude = "exclude" === options2.filterType;
            if (0 === selectedItems.length && items.length && (filterValues.length <= 1 || isExclude && filterValues.length === items.length - 1)) {
              options2.filterType = "include";
              options2.filterValues = [];
            } else if (selectedItems.length === items.length) {
              options2.filterType = "exclude";
              options2.filterValues = [];
            }
          }
          each(items, (index2, item) => {
            var selected = m_utils_default.getIndexByKey(item, selectedItems, null) >= 0;
            var oldSelected = !!item.selected;
            if (oldSelected !== selected) {
              item.selected = selected;
              options2.filterValues = options2.filterValues || [];
              var filterValueIndex = m_utils_default.getIndexByKey(item.value, options2.filterValues, null);
              if (filterValueIndex >= 0) {
                options2.filterValues.splice(filterValueIndex, 1);
              }
              var isExcludeFilterType = "exclude" === options2.filterType;
              if (selected ^ isExcludeFilterType) {
                options2.filterValues.push(item.value);
              }
            }
          });
          updateListSelectAllState(e, options2.filterValues);
        },
        onContentReady(e) {
          var {
            component
          } = e;
          var items = component.option("items");
          var selectedItems = [];
          each(items, function() {
            if (this.selected) {
              selectedItems.push(this);
            }
          });
          component._selectedItemsUpdating = true;
          component.option("selectedItems", selectedItems);
          component._selectedItemsUpdating = false;
          updateListSelectAllState(e, options2.filterValues);
        }
      }));
    }
  },
  _normalizeHeaderFilterOptions(options2) {
    var generalHeaderFilter = this.option("headerFilter") || {};
    var specificHeaderFilter = options2.headerFilter || {};
    var generalDeprecated = {
      search: {
        enabled: generalHeaderFilter.allowSearch,
        timeout: generalHeaderFilter.searchTimeout
      }
    };
    var specificDeprecated = {
      search: {
        enabled: specificHeaderFilter.allowSearch,
        mode: specificHeaderFilter.searchMode,
        timeout: specificHeaderFilter.searchTimeout
      }
    };
    return extend(true, {}, generalHeaderFilter, generalDeprecated, specificHeaderFilter, specificDeprecated);
  },
  _renderCore() {
    this.element().addClass(HEADER_FILTER_MENU_CLASS);
  }
});
var allowHeaderFiltering = function(column) {
  return isDefined(column.allowHeaderFiltering) ? column.allowHeaderFiltering : column.allowFiltering;
};
var headerFilterMixin = {
  _applyColumnState(options2) {
    var $headerFilterIndicator;
    var {
      rootElement
    } = options2;
    var {
      column
    } = options2;
    if ("headerFilter" === options2.name) {
      rootElement.find(".".concat(HEADER_FILTER_CLASS)).remove();
      if (allowHeaderFiltering(column)) {
        $headerFilterIndicator = this.callBase(options2).toggleClass("dx-header-filter-empty", this._isHeaderFilterEmpty(column));
        if (!this.option("useLegacyKeyboardNavigation")) {
          $headerFilterIndicator.attr("tabindex", this.option("tabindex") || 0);
        }
        var indicatorLabel = message_default.format("dxDataGrid-headerFilterIndicatorLabel", column.caption);
        $headerFilterIndicator.attr("aria-label", indicatorLabel);
        $headerFilterIndicator.attr("aria-haspopup", "dialog");
        $headerFilterIndicator.attr("role", "button");
      }
      return $headerFilterIndicator;
    }
    return this.callBase(options2);
  },
  _isHeaderFilterEmpty: (column) => !column.filterValues || !column.filterValues.length,
  _getIndicatorClassName(name2) {
    if ("headerFilter" === name2) {
      return HEADER_FILTER_CLASS;
    }
    return this.callBase(name2);
  },
  _renderIndicator(options2) {
    var $container = options2.container;
    var $indicator = options2.indicator;
    if ("headerFilter" === options2.name) {
      var rtlEnabled = this.option("rtlEnabled");
      if ($container.children().length && (!rtlEnabled && "right" === options2.columnAlignment || rtlEnabled && "left" === options2.columnAlignment)) {
        $container.prepend($indicator);
        return;
      }
    }
    this.callBase(options2);
  },
  optionChanged(args) {
    if ("headerFilter" === args.name) {
      var requireReady = "columnHeadersView" === this.name;
      this._invalidate(requireReady, requireReady);
      args.handled = true;
    } else {
      this.callBase(args);
    }
  }
};

// node_modules/devextreme/esm/__internal/grids/grid_core/header_filter/m_header_filter.js
var DATE_INTERVAL_FORMATS = {
  month: (value2) => date_default3.getMonthNames()[value2 - 1],
  quarter: (value2) => date_default3.format(new Date(2e3, 3 * value2 - 1), "quarter")
};
function ungroupUTCDates(items, dateParts, dates) {
  dateParts = dateParts || [];
  dates = dates || [];
  items.forEach((item) => {
    if (isDefined(item.key)) {
      var isMonthPart = 1 === dateParts.length;
      dateParts.push(isMonthPart ? item.key - 1 : item.key);
      if (item.items) {
        ungroupUTCDates(item.items, dateParts, dates);
      } else {
        var date = new Date(Date.UTC.apply(Date, dateParts));
        dates.push(date);
      }
      dateParts.pop();
    } else {
      dates.push(null);
    }
  });
  return dates;
}
function convertDataFromUTCToLocal(data3, column) {
  var dates = ungroupUTCDates(data3);
  var query2 = query_default(dates);
  var group = m_utils_default.getHeaderFilterGroupParameters(_extends(_extends({}, column), {
    calculateCellValue: (date) => date
  }));
  return store_helper_default.queryByOptions(query2, {
    group
  }).toArray();
}
function isUTCFormat(format2) {
  return "Z" === (null === format2 || void 0 === format2 ? void 0 : format2.slice(-1)) || "'Z'" === (null === format2 || void 0 === format2 ? void 0 : format2.slice(-3));
}
var HeaderFilterController = m_modules_default.ViewController.inherit({
  init() {
    this._columnsController = this.getController("columns");
    this._dataController = this.getController("data");
    this._headerFilterView = this.getView("headerFilterView");
  },
  _updateSelectedState(items, column) {
    var i = items.length;
    var isExclude = "exclude" === column.filterType;
    while (i--) {
      var item = items[i];
      if ("items" in items[i]) {
        this._updateSelectedState(items[i].items, column);
      }
      updateHeaderFilterItemSelectionState(item, m_utils_default.getIndexByKey(items[i].value, column.filterValues, null) > -1, isExclude);
    }
  },
  _normalizeGroupItem(item, currentLevel, options2) {
    var value2;
    var displayValue;
    var {
      path
    } = options2;
    var {
      valueSelector
    } = options2;
    var {
      displaySelector
    } = options2;
    var {
      column
    } = options2;
    if (valueSelector && displaySelector) {
      value2 = valueSelector(item);
      displayValue = displaySelector(item);
    } else {
      value2 = item.key;
      displayValue = value2;
    }
    if (!isObject(item)) {
      item = {};
    } else {
      item = extend({}, item);
    }
    path.push(value2);
    if (1 === path.length) {
      item.value = path[0];
    } else {
      item.value = path.join("/");
    }
    item.text = this.getHeaderItemText(displayValue, column, currentLevel, options2.headerFilterOptions);
    return item;
  },
  getHeaderItemText(displayValue, column, currentLevel, headerFilterOptions) {
    var text = m_utils_default.formatValue(displayValue, function(value2, column2, currentLevel2) {
      var groupInterval = filtering_default.getGroupInterval(column2);
      var result2 = m_utils_default.getFormatOptionsByColumn(column2, "headerFilter");
      if (groupInterval) {
        result2.groupInterval = groupInterval[currentLevel2];
        if (m_utils_default.isDateType(column2.dataType)) {
          result2.format = DATE_INTERVAL_FORMATS[groupInterval[currentLevel2]];
        } else if ("number" === column2.dataType) {
          result2.getDisplayFormat = function() {
            var formatOptions = {
              format: column2.format,
              target: "headerFilter"
            };
            var firstValueText = m_utils_default.formatValue(value2, formatOptions);
            var secondValue = value2 + groupInterval[currentLevel2];
            var secondValueText = m_utils_default.formatValue(secondValue, formatOptions);
            return firstValueText && secondValueText ? "".concat(firstValueText, " - ").concat(secondValueText) : "";
          };
        }
      }
      return result2;
    }(displayValue, column, currentLevel));
    if (!text) {
      text = headerFilterOptions.texts.emptyValue;
    }
    return text;
  },
  _processGroupItems(groupItems, currentLevel, path, options2) {
    var displaySelector;
    var valueSelector;
    var {
      column
    } = options2;
    var {
      lookup
    } = column;
    var {
      level
    } = options2;
    path = path || [];
    currentLevel = currentLevel || 0;
    if (lookup) {
      displaySelector = compileGetter(lookup.displayExpr);
      valueSelector = compileGetter(lookup.valueExpr);
    }
    for (var i = 0; i < groupItems.length; i++) {
      groupItems[i] = this._normalizeGroupItem(groupItems[i], currentLevel, {
        column: options2.column,
        headerFilterOptions: options2.headerFilterOptions,
        displaySelector,
        valueSelector,
        path
      });
      if ("items" in groupItems[i]) {
        if (currentLevel === level || !isDefined(groupItems[i].value)) {
          delete groupItems[i].items;
        } else {
          this._processGroupItems(groupItems[i].items, currentLevel + 1, path, options2);
        }
      }
      path.pop();
    }
  },
  getDataSource(column) {
    var _a2;
    var dataSource = this._dataController.dataSource();
    var remoteGrouping = null === dataSource || void 0 === dataSource ? void 0 : dataSource.remoteOperations().grouping;
    var group = m_utils_default.getHeaderFilterGroupParameters(column, remoteGrouping);
    var headerFilterDataSource = null === (_a2 = column.headerFilter) || void 0 === _a2 ? void 0 : _a2.dataSource;
    var headerFilterOptions = this.option("headerFilter");
    var isLookup = false;
    var options2 = {
      component: this.component
    };
    if (!dataSource) {
      return;
    }
    if (isDefined(headerFilterDataSource) && !isFunction(headerFilterDataSource)) {
      options2.dataSource = normalizeDataSourceOptions(headerFilterDataSource);
    } else if (column.lookup) {
      isLookup = true;
      if (this.option("syncLookupFilterValues")) {
        this._currentColumn = column;
        var filter = this._dataController.getCombinedFilter();
        this._currentColumn = null;
        options2.dataSource = m_utils_default.getWrappedLookupDataSource(column, dataSource, filter);
      } else {
        options2.dataSource = m_utils_default.normalizeLookupDataSource(column.lookup);
      }
    } else {
      var cutoffLevel = Array.isArray(group) ? group.length - 1 : 0;
      this._currentColumn = column;
      var _filter = this._dataController.getCombinedFilter();
      this._currentColumn = null;
      options2.dataSource = {
        filter: _filter,
        group,
        useDefaultSearch: true,
        load: (options3) => {
          var d = new Deferred();
          options3.dataField = column.dataField || column.name;
          dataSource.load(options3).done((data3) => {
            var convertUTCDates = remoteGrouping && isUTCFormat(column.serializationFormat) && cutoffLevel > 3;
            if (convertUTCDates) {
              data3 = convertDataFromUTCToLocal(data3, column);
            }
            that._processGroupItems(data3, null, null, {
              level: cutoffLevel,
              column,
              headerFilterOptions
            });
            d.resolve(data3);
          }).fail(d.reject);
          return d;
        }
      };
    }
    if (isFunction(headerFilterDataSource)) {
      headerFilterDataSource.call(column, options2);
    }
    var origPostProcess = options2.dataSource.postProcess;
    var that = this;
    options2.dataSource.postProcess = function(data3) {
      var items = data3;
      if (isLookup) {
        items = items.filter((item) => null !== item[column.lookup.valueExpr]);
        if (0 === this.pageIndex() && !this.searchValue()) {
          items = items.slice(0);
          items.unshift(null);
        }
        that._processGroupItems(items, null, null, {
          level: 0,
          column,
          headerFilterOptions
        });
      }
      items = origPostProcess && origPostProcess.call(this, items) || items;
      that._updateSelectedState(items, column);
      return items;
    };
    return options2.dataSource;
  },
  getCurrentColumn() {
    return this._currentColumn;
  },
  showHeaderFilterMenu(columnIndex, isGroupPanel) {
    var columnsController = this._columnsController;
    var column = extend(true, {}, this._columnsController.getColumns()[columnIndex]);
    if (column) {
      var visibleIndex = columnsController.getVisibleIndex(columnIndex);
      var view = isGroupPanel ? this.getView("headerPanel") : this.getView("columnHeadersView");
      var $columnElement = view.getColumnElements().eq(isGroupPanel ? column.groupIndex : visibleIndex);
      this.showHeaderFilterMenuBase({
        columnElement: $columnElement,
        column,
        applyFilter: true,
        apply() {
          columnsController.columnOption(columnIndex, {
            filterValues: this.filterValues,
            filterType: this.filterType
          });
        }
      });
    }
  },
  showHeaderFilterMenuBase(options2) {
    var that = this;
    var {
      column
    } = options2;
    if (column) {
      var groupInterval = filtering_default.getGroupInterval(column);
      var dataSource = that._dataController.dataSource();
      var remoteFiltering = dataSource && dataSource.remoteOperations().filtering;
      var previousOnHidden = options2.onHidden;
      extend(options2, column, {
        type: groupInterval && groupInterval.length > 1 ? "tree" : "list",
        remoteFiltering,
        onShowing(e) {
          var dxResizableInstance = e.component.$overlayContent().dxResizable("instance");
          dxResizableInstance && dxResizableInstance.option("onResizeEnd", (e2) => {
            var columnsController = that.getController("columns");
            var headerFilterByColumn = columnsController.columnOption(options2.dataField, "headerFilter");
            headerFilterByColumn = headerFilterByColumn || {};
            headerFilterByColumn.width = e2.width;
            headerFilterByColumn.height = e2.height;
            columnsController.columnOption(options2.dataField, "headerFilter", headerFilterByColumn, true);
          });
        },
        onHidden: () => {
          null === previousOnHidden || void 0 === previousOnHidden ? void 0 : previousOnHidden();
          restoreFocus(this);
        }
      });
      options2.dataSource = that.getDataSource(options2);
      if (options2.isFilterBuilder) {
        options2.dataSource.filter = null;
        options2.alignment = "right";
      }
      that._headerFilterView.showHeaderFilterMenu(options2.columnElement, options2);
    }
  },
  hideHeaderFilterMenu() {
    this._headerFilterView.hideHeaderFilterMenu();
  }
});
var ColumnHeadersViewHeaderFilterExtender = extend({}, headerFilterMixin, {
  _renderCellContent($cell, options2) {
    var $headerFilterIndicator;
    var {
      column
    } = options2;
    if (!column.command && allowHeaderFiltering(column) && this.option("headerFilter.visible") && "header" === options2.rowType) {
      $headerFilterIndicator = this._applyColumnState({
        name: "headerFilter",
        rootElement: $cell,
        column,
        showColumnLines: this.option("showColumnLines")
      });
      $headerFilterIndicator && this._subscribeToIndicatorEvent($headerFilterIndicator, column, "headerFilter");
    }
    this.callBase.apply(this, arguments);
  },
  _subscribeToIndicatorEvent($indicator, column, indicatorName) {
    if ("headerFilter" === indicatorName) {
      events_engine_default.on($indicator, CLICK_EVENT_NAME, this.createAction((e) => {
        e.event.stopPropagation();
        saveFocusedElementInfo($indicator, this);
        this.getController("headerFilter").showHeaderFilterMenu(column.index, false);
      }));
    }
  },
  _updateIndicator($cell, column, indicatorName) {
    var $indicator = this.callBase($cell, column, indicatorName);
    $indicator && this._subscribeToIndicatorEvent($indicator, column, indicatorName);
  },
  _updateHeaderFilterIndicators() {
    if (this.option("headerFilter.visible")) {
      this._updateIndicators("headerFilter");
    }
  },
  _needUpdateFilterIndicators: () => true,
  _columnOptionChanged(e) {
    var {
      optionNames
    } = e;
    var isFilterRowAndHeaderFilterValuesChanged = m_utils_default.checkChanges(optionNames, ["filterValues", "filterValue"]);
    var isHeaderFilterValuesAndTypeChanged = m_utils_default.checkChanges(optionNames, ["filterValues", "filterType"]);
    var shouldUpdateFilterIndicators = (isFilterRowAndHeaderFilterValuesChanged || isHeaderFilterValuesAndTypeChanged) && this._needUpdateFilterIndicators();
    if (shouldUpdateFilterIndicators) {
      this._updateHeaderFilterIndicators();
    }
    if (!isHeaderFilterValuesAndTypeChanged) {
      this.callBase(e);
    }
  }
});
var HeaderPanelHeaderFilterExtender = extend({}, headerFilterMixin, {
  _createGroupPanelItem($rootElement, groupColumn) {
    var that = this;
    var $item = that.callBase.apply(that, arguments);
    var $headerFilterIndicator;
    if (!groupColumn.command && allowHeaderFiltering(groupColumn) && that.option("headerFilter.visible")) {
      $headerFilterIndicator = that._applyColumnState({
        name: "headerFilter",
        rootElement: $item,
        column: {
          alignment: getDefaultAlignment(that.option("rtlEnabled")),
          filterValues: groupColumn.filterValues,
          allowHeaderFiltering: true,
          caption: groupColumn.caption
        },
        showColumnLines: true
      });
      $headerFilterIndicator && events_engine_default.on($headerFilterIndicator, CLICK_EVENT_NAME, that.createAction((e) => {
        var {
          event
        } = e;
        event.stopPropagation();
        that.getController("headerFilter").showHeaderFilterMenu(groupColumn.index, true);
      }));
    }
    return $item;
  }
});
var DataControllerFilterRowExtender2 = {
  skipCalculateColumnFilters: () => false,
  _calculateAdditionalFilter() {
    if (this.skipCalculateColumnFilters()) {
      return this.callBase();
    }
    var filters = [this.callBase()];
    var columns2 = this._columnsController.getVisibleColumns(null, true);
    var headerFilterController = this.getController("headerFilter");
    var currentColumn = headerFilterController.getCurrentColumn();
    each(columns2, (_, column) => {
      var filter;
      if (currentColumn && currentColumn.index === column.index) {
        return;
      }
      if (allowHeaderFiltering(column) && column.calculateFilterExpression && Array.isArray(column.filterValues) && column.filterValues.length) {
        var filterValues = [];
        each(column.filterValues, (_2, filterValue) => {
          if (Array.isArray(filterValue)) {
            filter = filterValue;
          } else {
            if (column.deserializeValue && !m_utils_default.isDateType(column.dataType) && "number" !== column.dataType) {
              filterValue = column.deserializeValue(filterValue);
            }
            filter = column.createFilterExpression(filterValue, "=", "headerFilter");
          }
          if (filter) {
            filter.columnIndex = column.index;
          }
          filterValues.push(filter);
        });
        filterValues = m_utils_default.combineFilters(filterValues, "or");
        filters.push("exclude" === column.filterType ? ["!", filterValues] : filterValues);
      }
    });
    return m_utils_default.combineFilters(filters);
  }
};
var headerFilterModule = {
  defaultOptions: () => ({
    syncLookupFilterValues: true,
    headerFilter: {
      visible: false,
      width: 252,
      height: 325,
      allowSelectAll: true,
      search: {
        enabled: false,
        timeout: 500,
        mode: "contains",
        editorOptions: {}
      },
      texts: {
        emptyValue: message_default.format("dxDataGrid-headerFilterEmptyValue"),
        ok: message_default.format("dxDataGrid-headerFilterOK"),
        cancel: message_default.format("dxDataGrid-headerFilterCancel")
      }
    }
  }),
  controllers: {
    headerFilter: HeaderFilterController
  },
  views: {
    headerFilterView: HeaderFilterView
  },
  extenders: {
    controllers: {
      data: DataControllerFilterRowExtender2
    },
    views: {
      columnHeadersView: ColumnHeadersViewHeaderFilterExtender,
      headerPanel: HeaderPanelHeaderFilterExtender
    }
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/header_filter.js
m_core_default.registerModule("headerFilter", headerFilterModule);

// node_modules/devextreme/esm/__internal/filter_builder/m_between.js
var FILTER_BUILDER_RANGE_CLASS = "dx-filterbuilder-range";
var FILTER_BUILDER_RANGE_START_CLASS = "".concat(FILTER_BUILDER_RANGE_CLASS, "-start");
var FILTER_BUILDER_RANGE_END_CLASS = "".concat(FILTER_BUILDER_RANGE_CLASS, "-end");
var FILTER_BUILDER_RANGE_SEPARATOR_CLASS = "".concat(FILTER_BUILDER_RANGE_CLASS, "-separator");
var SEPARATOR = "–";
function editorTemplate(conditionInfo, container) {
  var $editorStart = renderer_default("<div>").addClass(FILTER_BUILDER_RANGE_START_CLASS);
  var $editorEnd = renderer_default("<div>").addClass(FILTER_BUILDER_RANGE_END_CLASS);
  var values = conditionInfo.value || [];
  var getStartValue = function(values2) {
    return values2 && values2.length > 0 ? values2[0] : null;
  };
  var getEndValue = function(values2) {
    return values2 && 2 === values2.length ? values2[1] : null;
  };
  container.append($editorStart);
  container.append(renderer_default("<span>").addClass(FILTER_BUILDER_RANGE_SEPARATOR_CLASS).text(SEPARATOR));
  container.append($editorEnd);
  container.addClass(FILTER_BUILDER_RANGE_CLASS);
  this._editorFactory.createEditor.call(this, $editorStart, extend({}, conditionInfo.field, conditionInfo, {
    value: getStartValue(values),
    parentType: "filterBuilder",
    setValue(value2) {
      values = [value2, getEndValue(values)];
      conditionInfo.setValue(values);
    }
  }));
  this._editorFactory.createEditor.call(this, $editorEnd, extend({}, conditionInfo.field, conditionInfo, {
    value: getEndValue(values),
    parentType: "filterBuilder",
    setValue(value2) {
      values = [getStartValue(values), value2];
      conditionInfo.setValue(values);
    }
  }));
}
function getConfig(caption, context2) {
  return {
    name: "between",
    caption,
    icon: "range",
    valueSeparator: SEPARATOR,
    dataTypes: ["number", "date", "datetime"],
    editorTemplate: editorTemplate.bind(context2),
    notForLookup: true
  };
}

// node_modules/devextreme/esm/__internal/filter_builder/m_filter_operations_dictionary.js
var OPERATION_ICONS2 = {
  "=": "equal",
  "<>": "notequal",
  "<": "less",
  "<=": "lessorequal",
  ">": "greater",
  ">=": "greaterorequal",
  notcontains: "doesnotcontain",
  contains: "contains",
  startswith: "startswith",
  endswith: "endswith",
  isblank: "isblank",
  isnotblank: "isnotblank"
};
var OPERATION_NAME = {
  "=": "equal",
  "<>": "notEqual",
  "<": "lessThan",
  "<=": "lessThanOrEqual",
  ">": "greaterThan",
  ">=": "greaterThanOrEqual",
  startswith: "startsWith",
  contains: "contains",
  notcontains: "notContains",
  endswith: "endsWith",
  isblank: "isBlank",
  isnotblank: "isNotBlank",
  between: "between"
};
var m_filter_operations_dictionary_default = {
  getIconByFilterOperation: (filterOperation) => OPERATION_ICONS2[filterOperation],
  getNameByFilterOperation: (filterOperation) => OPERATION_NAME[filterOperation]
};

// node_modules/devextreme/esm/__internal/filter_builder/m_utils.js
var DEFAULT_DATA_TYPE = "string";
var EMPTY_MENU_ICON = "icon-none";
var AND_GROUP_OPERATION = "and";
var EQUAL_OPERATION = "=";
var NOT_EQUAL_OPERATION = "<>";
var DATATYPE_OPERATIONS2 = {
  number: ["=", "<>", "<", ">", "<=", ">=", "isblank", "isnotblank"],
  string: ["contains", "notcontains", "startswith", "endswith", "=", "<>", "isblank", "isnotblank"],
  date: ["=", "<>", "<", ">", "<=", ">=", "isblank", "isnotblank"],
  datetime: ["=", "<>", "<", ">", "<=", ">=", "isblank", "isnotblank"],
  boolean: ["=", "<>", "isblank", "isnotblank"],
  object: ["isblank", "isnotblank"]
};
var DEFAULT_FORMAT = {
  date: "shortDate",
  datetime: "shortDateShortTime"
};
var LOOKUP_OPERATIONS = ["=", "<>", "isblank", "isnotblank"];
var AVAILABLE_FIELD_PROPERTIES = ["caption", "customizeText", "dataField", "dataType", "editorTemplate", "falseText", "editorOptions", "filterOperations", "format", "lookup", "trueText", "calculateFilterExpression", "name"];
var FILTER_BUILDER_CLASS = "dx-filterbuilder";
var FILTER_BUILDER_ITEM_TEXT_CLASS = "".concat(FILTER_BUILDER_CLASS, "-text");
var FILTER_BUILDER_ITEM_TEXT_PART_CLASS = "".concat(FILTER_BUILDER_ITEM_TEXT_CLASS, "-part");
var FILTER_BUILDER_ITEM_TEXT_SEPARATOR_CLASS = "".concat(FILTER_BUILDER_ITEM_TEXT_CLASS, "-separator");
var FILTER_BUILDER_ITEM_TEXT_SEPARATOR_EMPTY_CLASS = "".concat(FILTER_BUILDER_ITEM_TEXT_SEPARATOR_CLASS, "-empty");
function getFormattedValueText(field, value2) {
  var fieldFormat = field.format || DEFAULT_FORMAT[field.dataType];
  return format_helper_default.format(value2, fieldFormat);
}
function isNegationGroup(group) {
  return group && group.length > 1 && "!" === group[0] && !isCondition(group);
}
function getGroupCriteria(group) {
  return isNegationGroup(group) ? group[1] : group;
}
function setGroupCriteria(group, criteria) {
  if (isNegationGroup(group)) {
    group[1] = criteria;
  } else {
    group = criteria;
  }
  return group;
}
function convertGroupToNewStructure(group, value2) {
  if (function(value3) {
    return -1 !== value3.indexOf("!");
  }(value2)) {
    if (!isNegationGroup(group)) {
      !function(group2) {
        var criteria = group2.slice(0);
        group2.length = 0;
        group2.push("!", criteria);
      }(group);
    }
  } else if (isNegationGroup(group)) {
    !function(group2) {
      var criteria = getGroupCriteria(group2);
      group2.length = 0;
      [].push.apply(group2, criteria);
    }(group);
  }
}
function setGroupValue(group, value2) {
  convertGroupToNewStructure(group, value2);
  var criteria = getGroupCriteria(group);
  var i;
  value2 = function(value3) {
    return -1 === value3.indexOf("!") ? value3 : value3.substring(1);
  }(value2);
  !function(criteria2, value3) {
    for (i = 0; i < criteria2.length; i++) {
      if (!Array.isArray(criteria2[i])) {
        criteria2[i] = value3;
      }
    }
  }(criteria, value2);
  return group;
}
function getGroupMenuItem(group, availableGroups) {
  var groupValue = getGroupValue(group);
  return availableGroups.filter((item) => item.value === groupValue)[0];
}
function getCriteriaOperation(criteria) {
  if (isCondition(criteria)) {
    return AND_GROUP_OPERATION;
  }
  var value2 = "";
  for (var i = 0; i < criteria.length; i++) {
    var item = criteria[i];
    if (!Array.isArray(item)) {
      if (value2 && value2 !== item) {
        throw new errors.Error("E4019");
      }
      if ("!" !== item) {
        value2 = item;
      }
    }
  }
  return value2;
}
function getGroupValue(group) {
  var criteria = getGroupCriteria(group);
  var value2 = getCriteriaOperation(criteria);
  if (!value2) {
    value2 = AND_GROUP_OPERATION;
  }
  if (criteria !== group) {
    value2 = "!".concat(value2);
  }
  return value2;
}
function getDefaultFilterOperations(field) {
  return field.lookup && LOOKUP_OPERATIONS || DATATYPE_OPERATIONS2[field.dataType || DEFAULT_DATA_TYPE];
}
function containItems(entity) {
  return Array.isArray(entity) && entity.length;
}
function getFilterOperations(field) {
  var result2 = containItems(field.filterOperations) ? field.filterOperations : getDefaultFilterOperations(field);
  return extend([], result2);
}
function getCaptionByOperation(operation, filterOperationDescriptions) {
  var operationName = m_filter_operations_dictionary_default.getNameByFilterOperation(operation);
  return filterOperationDescriptions && filterOperationDescriptions[operationName] ? filterOperationDescriptions[operationName] : operationName;
}
function getOperationFromAvailable(operation, availableOperations) {
  for (var i = 0; i < availableOperations.length; i++) {
    if (availableOperations[i].value === operation) {
      return availableOperations[i];
    }
  }
  throw new ui_errors_default.Error("E1048", operation);
}
function getCustomOperation(customOperations, name2) {
  var filteredOperations = customOperations.filter((item) => item.name === name2);
  return filteredOperations.length ? filteredOperations[0] : null;
}
function getAvailableOperations(field, filterOperationDescriptions, customOperations) {
  var filterOperations = getFilterOperations(field);
  var isLookupField = !!field.lookup;
  customOperations.forEach((customOperation) => {
    if (!field.filterOperations && -1 === filterOperations.indexOf(customOperation.name)) {
      var dataTypes = customOperation && customOperation.dataTypes;
      var isOperationForbidden = isLookupField ? !!customOperation.notForLookup : false;
      if (!isOperationForbidden && dataTypes && dataTypes.indexOf(field.dataType || DEFAULT_DATA_TYPE) >= 0) {
        filterOperations.push(customOperation.name);
      }
    }
  });
  return filterOperations.map((operation) => {
    var customOperation = getCustomOperation(customOperations, operation);
    if (customOperation) {
      return {
        icon: customOperation.icon || EMPTY_MENU_ICON,
        text: customOperation.caption || captionize(customOperation.name),
        value: customOperation.name,
        isCustom: true
      };
    }
    return {
      icon: m_filter_operations_dictionary_default.getIconByFilterOperation(operation) || EMPTY_MENU_ICON,
      text: getCaptionByOperation(operation, filterOperationDescriptions),
      value: operation
    };
  });
}
function getDefaultOperation(field) {
  return field.defaultFilterOperation || getFilterOperations(field)[0];
}
function createCondition(field, customOperations) {
  var condition = [field.dataField, "", ""];
  var filterOperation = getDefaultOperation(field);
  updateConditionByOperation(condition, filterOperation, customOperations);
  return condition;
}
function removeItem(group, item) {
  var criteria = getGroupCriteria(group);
  var index2 = criteria.indexOf(item);
  criteria.splice(index2, 1);
  if (1 !== criteria.length) {
    criteria.splice(index2, 1);
  }
  return group;
}
function createEmptyGroup(value2) {
  var isNegation = isNegationGroupOperation(value2);
  var groupOperation = isNegation ? getGroupOperationFromNegationOperation(value2) : value2;
  return isNegation ? ["!", [groupOperation]] : [groupOperation];
}
function addItem(item, group) {
  var criteria = getGroupCriteria(group);
  var groupValue = getGroupValue(criteria);
  1 === criteria.length ? criteria.unshift(item) : criteria.push(item, groupValue);
  return group;
}
function getField(dataField, fields) {
  for (var i = 0; i < fields.length; i++) {
    if (fields[i].name === dataField) {
      return fields[i];
    }
    if (fields[i].dataField.toLowerCase() === dataField.toLowerCase()) {
      return fields[i];
    }
  }
  var extendedFields = getItems2(fields, true).filter((item) => item.dataField.toLowerCase() === dataField.toLowerCase());
  if (extendedFields.length > 0) {
    return extendedFields[0];
  }
  throw new ui_errors_default.Error("E1047", dataField);
}
function isGroup(criteria) {
  if (!Array.isArray(criteria)) {
    return false;
  }
  return criteria.length < 2 || Array.isArray(criteria[0]) || Array.isArray(criteria[1]);
}
function isCondition(criteria) {
  if (!Array.isArray(criteria)) {
    return false;
  }
  return criteria.length > 1 && !Array.isArray(criteria[0]) && !Array.isArray(criteria[1]);
}
function convertToInnerGroup(group, customOperations, defaultGroupOperation) {
  defaultGroupOperation = defaultGroupOperation || AND_GROUP_OPERATION;
  var groupOperation = getCriteriaOperation(group).toLowerCase() || defaultGroupOperation;
  var innerGroup = [];
  for (var i = 0; i < group.length; i++) {
    if (isGroup(group[i])) {
      innerGroup.push(convertToInnerStructure(group[i], customOperations, defaultGroupOperation));
      innerGroup = appendGroupOperationToGroup(innerGroup, groupOperation);
    } else if (isCondition(group[i])) {
      innerGroup.push(convertToInnerCondition(group[i], customOperations));
      innerGroup = appendGroupOperationToGroup(innerGroup, groupOperation);
    }
  }
  if (0 === innerGroup.length) {
    innerGroup = appendGroupOperationToGroup(innerGroup, groupOperation);
  }
  return innerGroup;
}
function conditionHasCustomOperation(condition, customOperations) {
  var customOperation = getCustomOperation(customOperations, condition[1]);
  return customOperation && customOperation.name === condition[1];
}
function convertToInnerCondition(condition, customOperations) {
  if (conditionHasCustomOperation(condition, customOperations)) {
    return condition;
  }
  if (condition.length < 3) {
    condition[2] = condition[1];
    condition[1] = EQUAL_OPERATION;
  }
  return condition;
}
function isNegationGroupOperation(operation) {
  return -1 !== operation.indexOf("not");
}
function getGroupOperationFromNegationOperation(operation) {
  return operation.substring(3).toLowerCase();
}
function appendGroupOperationToCriteria(criteria, groupOperation) {
  var isNegation = isNegationGroupOperation(groupOperation);
  groupOperation = isNegation ? getGroupOperationFromNegationOperation(groupOperation) : groupOperation;
  return isNegation ? ["!", criteria, groupOperation] : [criteria, groupOperation];
}
function appendGroupOperationToGroup(group, groupOperation) {
  var isNegation = isNegationGroupOperation(groupOperation);
  groupOperation = isNegation ? getGroupOperationFromNegationOperation(groupOperation) : groupOperation;
  group.push(groupOperation);
  var result2 = group;
  if (isNegation) {
    result2 = ["!", result2];
  }
  return result2;
}
function convertToInnerStructure(value2, customOperations, defaultGroupOperation) {
  defaultGroupOperation = defaultGroupOperation || AND_GROUP_OPERATION;
  if (!value2) {
    return createEmptyGroup(defaultGroupOperation);
  }
  value2 = extend(true, [], value2);
  if (isCondition(value2)) {
    return appendGroupOperationToCriteria(convertToInnerCondition(value2, customOperations), defaultGroupOperation);
  }
  if (isNegationGroup(value2)) {
    return ["!", isCondition(value2[1]) ? appendGroupOperationToCriteria(convertToInnerCondition(value2[1], customOperations), defaultGroupOperation) : isNegationGroup(value2[1]) ? appendGroupOperationToCriteria(convertToInnerStructure(value2[1], customOperations), defaultGroupOperation) : convertToInnerGroup(value2[1], customOperations, defaultGroupOperation)];
  }
  return convertToInnerGroup(value2, customOperations, defaultGroupOperation);
}
function getNormalizedFields(fields) {
  return fields.reduce((result2, field) => {
    if (isDefined(field.dataField)) {
      var normalizedField = {};
      for (var key in field) {
        if (field[key] && AVAILABLE_FIELD_PROPERTIES.includes(key)) {
          normalizedField[key] = field[key];
        }
      }
      normalizedField.defaultCalculateFilterExpression = filtering_default.defaultCalculateFilterExpression;
      if (!isDefined(normalizedField.dataType)) {
        normalizedField.dataType = DEFAULT_DATA_TYPE;
      }
      if (!isDefined(normalizedField.trueText)) {
        normalizedField.trueText = message_default.format("dxDataGrid-trueText");
      }
      if (!isDefined(normalizedField.falseText)) {
        normalizedField.falseText = message_default.format("dxDataGrid-falseText");
      }
      result2.push(normalizedField);
    }
    return result2;
  }, []);
}
function getConditionFilterExpression(condition, fields, customOperations, target) {
  var field = getField(condition[0], fields);
  var filterExpression = convertToInnerCondition(condition, customOperations);
  var customOperation = customOperations.length && getCustomOperation(customOperations, filterExpression[1]);
  if (customOperation && customOperation.calculateFilterExpression) {
    return customOperation.calculateFilterExpression.apply(customOperation, [filterExpression[2], field, fields]);
  }
  if (field.createFilterExpression) {
    return field.createFilterExpression.apply(field, [filterExpression[2], filterExpression[1], target]);
  }
  if (field.calculateFilterExpression) {
    return field.calculateFilterExpression.apply(field, [filterExpression[2], filterExpression[1], target]);
  }
  return field.defaultCalculateFilterExpression.apply(field, [filterExpression[2], filterExpression[1], target]);
}
function getFilterExpression(value2, fields, customOperations, target) {
  if (!isDefined(value2)) {
    return null;
  }
  if (isNegationGroup(value2)) {
    var _filterExpression = getFilterExpression(value2[1], fields, customOperations, target);
    return ["!", _filterExpression];
  }
  var criteria = getGroupCriteria(value2);
  if (isCondition(criteria)) {
    return getConditionFilterExpression(criteria, fields, customOperations, target) || null;
  }
  var result2 = [];
  var filterExpression;
  var groupValue = getGroupValue(criteria);
  for (var i = 0; i < criteria.length; i++) {
    if (isGroup(criteria[i])) {
      filterExpression = getFilterExpression(criteria[i], fields, customOperations, target);
      if (filterExpression) {
        i && result2.push(groupValue);
        result2.push(filterExpression);
      }
    } else if (isCondition(criteria[i])) {
      filterExpression = getConditionFilterExpression(criteria[i], fields, customOperations, target);
      if (filterExpression) {
        result2.length && result2.push(groupValue);
        result2.push(filterExpression);
      }
    }
  }
  if (1 === result2.length) {
    result2 = result2[0];
  }
  return result2.length ? result2 : null;
}
function getNormalizedFilter(group) {
  var criteria = getGroupCriteria(group);
  var i;
  if (0 === criteria.length) {
    return null;
  }
  var itemsForRemove = [];
  for (i = 0; i < criteria.length; i++) {
    if (isGroup(criteria[i])) {
      var normalizedGroupValue = getNormalizedFilter(criteria[i]);
      if (normalizedGroupValue) {
        criteria[i] = normalizedGroupValue;
      } else {
        itemsForRemove.push(criteria[i]);
      }
    } else if (isCondition(criteria[i])) {
      if (!isValidCondition(criteria[i])) {
        itemsForRemove.push(criteria[i]);
      }
    }
  }
  for (i = 0; i < itemsForRemove.length; i++) {
    removeItem(criteria, itemsForRemove[i]);
  }
  if (1 === criteria.length) {
    return null;
  }
  criteria.splice(criteria.length - 1, 1);
  if (1 === criteria.length) {
    group = setGroupCriteria(group, criteria[0]);
  }
  if (0 === group.length) {
    return null;
  }
  return group;
}
function getCurrentLookupValueText(field, value2, handler) {
  if ("" === value2) {
    handler("");
    return;
  }
  var {
    lookup
  } = field;
  if (lookup.items) {
    handler(lookup.calculateCellValue(value2) || "");
  } else {
    var lookupDataSource = isFunction(lookup.dataSource) ? lookup.dataSource({}) : lookup.dataSource;
    var dataSource = new DataSource(lookupDataSource);
    dataSource.loadSingle(lookup.valueExpr, value2).done((result2) => {
      var valueText = "";
      if (result2) {
        valueText = lookup.displayExpr ? compileGetter(lookup.displayExpr)(result2) : result2;
      }
      if (field.customizeText) {
        valueText = field.customizeText({
          value: value2,
          valueText
        });
      }
      handler(valueText);
    }).fail(() => {
      handler("");
    });
  }
}
function getPrimitiveValueText(field, value2, customOperation, target, options2) {
  var valueText;
  if (true === value2) {
    valueText = field.trueText || message_default.format("dxDataGrid-trueText");
  } else if (false === value2) {
    valueText = field.falseText || message_default.format("dxDataGrid-falseText");
  } else {
    valueText = getFormattedValueText(field, value2);
  }
  if (field.customizeText) {
    valueText = field.customizeText.call(field, {
      value: value2,
      valueText,
      target
    });
  }
  if (customOperation && customOperation.customizeText) {
    valueText = customOperation.customizeText.call(customOperation, {
      value: value2,
      valueText,
      field,
      target
    }, options2);
  }
  return valueText;
}
function getArrayValueText(field, value2, customOperation, target) {
  var options2 = {
    values: value2
  };
  return value2.map((v) => getPrimitiveValueText(field, v, customOperation, target, options2));
}
function checkDefaultValue(value2) {
  return "" === value2 || null === value2;
}
function getCurrentValueText(field, value2, customOperation) {
  var target = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "filterBuilder";
  if (checkDefaultValue(value2)) {
    return "";
  }
  if (Array.isArray(value2)) {
    var result2 = new Deferred();
    when.apply(this, getArrayValueText(field, value2, customOperation, target)).done(function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var text = args.some((item) => !checkDefaultValue(item)) ? args.map((item) => !checkDefaultValue(item) ? item : "?") : "";
      result2.resolve(text);
    });
    return result2;
  }
  return getPrimitiveValueText(field, value2, customOperation, target);
}
function itemExists(plainItems, parentId) {
  return plainItems.some((item) => item.dataField === parentId);
}
function pushItemAndCheckParent(originalItems, plainItems, item) {
  var {
    dataField
  } = item;
  if (hasParent(dataField)) {
    item.parentId = getParentIdFromItemDataField(dataField);
    if (!itemExists(plainItems, item.parentId) && !itemExists(originalItems, item.parentId)) {
      pushItemAndCheckParent(originalItems, plainItems, {
        id: item.parentId,
        dataType: "object",
        dataField: item.parentId,
        caption: generateCaptionByDataField(item.parentId, true),
        filterOperations: ["isblank", "isnotblank"],
        defaultCalculateFilterExpression: filtering_default.defaultCalculateFilterExpression
      });
    }
  }
  plainItems.push(item);
}
function generateCaptionByDataField(dataField, allowHierarchicalFields) {
  var caption = "";
  if (allowHierarchicalFields) {
    dataField = dataField.substring(dataField.lastIndexOf(".") + 1);
  } else if (hasParent(dataField)) {
    dataField.split(".").forEach((field, index2, arr) => {
      caption += captionize(field);
      if (index2 !== arr.length - 1) {
        caption += ".";
      }
    });
    return caption;
  }
  return captionize(dataField);
}
function getItems2(fields, allowHierarchicalFields) {
  var items = [];
  for (var i = 0; i < fields.length; i++) {
    var item = extend(true, {
      caption: generateCaptionByDataField(fields[i].dataField, allowHierarchicalFields)
    }, fields[i]);
    item.id = item.name || item.dataField;
    if (allowHierarchicalFields) {
      pushItemAndCheckParent(fields, items, item);
    } else {
      items.push(item);
    }
  }
  return items;
}
function hasParent(dataField) {
  return -1 !== dataField.lastIndexOf(".");
}
function getParentIdFromItemDataField(dataField) {
  return dataField.substring(0, dataField.lastIndexOf("."));
}
function getCaptionWithParents(item, plainItems) {
  if (hasParent(item.dataField)) {
    var parentId = getParentIdFromItemDataField(item.dataField);
    for (var i = 0; i < plainItems.length; i++) {
      if (plainItems[i].dataField === parentId) {
        return "".concat(getCaptionWithParents(plainItems[i], plainItems), ".").concat(item.caption);
      }
    }
  }
  return item.caption;
}
function updateConditionByOperation(condition, operation, customOperations) {
  var customOperation = getCustomOperation(customOperations, operation);
  if (customOperation) {
    if (false === customOperation.hasValue) {
      condition[1] = operation;
      condition.length = 2;
    } else {
      condition[1] = operation;
      condition[2] = "";
    }
    return condition;
  }
  if ("isblank" === operation) {
    condition[1] = EQUAL_OPERATION;
    condition[2] = null;
  } else if ("isnotblank" === operation) {
    condition[1] = NOT_EQUAL_OPERATION;
    condition[2] = null;
  } else {
    customOperation = getCustomOperation(customOperations, condition[1]);
    if (customOperation || 2 === condition.length || null === condition[2]) {
      condition[2] = "";
    }
    condition[1] = operation;
  }
  return condition;
}
function getOperationValue(condition) {
  var caption;
  if (null === condition[2]) {
    if (condition[1] === EQUAL_OPERATION) {
      caption = "isblank";
    } else {
      caption = "isnotblank";
    }
  } else {
    caption = condition[1];
  }
  return caption;
}
function isValidCondition(condition) {
  return "" !== condition[2];
}
function getMergedOperations(customOperations, betweenCaption, context2) {
  var result2 = extend(true, [], customOperations);
  var betweenIndex = -1;
  result2.some((customOperation, index2) => {
    if ("between" === customOperation.name) {
      betweenIndex = index2;
      return true;
    }
    return;
  });
  if (-1 !== betweenIndex) {
    result2[betweenIndex] = extend(getConfig(betweenCaption, context2), result2[betweenIndex]);
  } else {
    result2.unshift(getConfig(betweenCaption, context2));
  }
  return result2;
}
function isMatchedCondition(filter, addedFilterDataField) {
  return filter[0] === addedFilterDataField;
}
function removeFieldConditionsFromFilter(filter, dataField) {
  if (!filter || 0 === filter.length) {
    return null;
  }
  if (isCondition(filter)) {
    var hasMatchedCondition = isMatchedCondition(filter, dataField);
    return !hasMatchedCondition ? filter : null;
  }
  return syncConditionIntoGroup(filter, [dataField], false);
}
function syncConditionIntoGroup(filter, addedFilter, canPush) {
  var result2 = [];
  filter.forEach((item) => {
    if (isCondition(item)) {
      if (isMatchedCondition(item, addedFilter[0])) {
        if (canPush) {
          result2.push(addedFilter);
          canPush = false;
        } else {
          result2.splice(result2.length - 1, 1);
        }
      } else {
        result2.push(item);
      }
    } else {
      (result2.length || isGroup(item)) && result2.push(item);
    }
  });
  if (0 === result2.length) {
    return null;
  }
  if (canPush) {
    result2.push(AND_GROUP_OPERATION);
    result2.push(addedFilter);
  }
  return 1 === result2.length ? result2[0] : result2;
}
function syncFilters(filter, addedFilter) {
  if (null === filter || 0 === filter.length) {
    return addedFilter;
  }
  if (isCondition(filter)) {
    if (isMatchedCondition(filter, addedFilter[0])) {
      return addedFilter;
    }
    return [filter, AND_GROUP_OPERATION, addedFilter];
  }
  var groupValue = getGroupValue(filter);
  if (groupValue !== AND_GROUP_OPERATION) {
    return [addedFilter, "and", filter];
  }
  return syncConditionIntoGroup(filter, addedFilter, true);
}
function getMatchedConditions(filter, dataField) {
  if (null === filter || 0 === filter.length) {
    return [];
  }
  if (isCondition(filter)) {
    if (isMatchedCondition(filter, dataField)) {
      return [filter];
    }
    return [];
  }
  var groupValue = getGroupValue(filter);
  if (groupValue !== AND_GROUP_OPERATION) {
    return [];
  }
  var result2 = filter.filter((item) => isCondition(item) && isMatchedCondition(item, dataField));
  return result2;
}
function filterHasField(filter, dataField) {
  if (null === filter || 0 === filter.length) {
    return false;
  }
  if (isCondition(filter)) {
    return filter[0] === dataField;
  }
  return filter.some((item) => (isCondition(item) || isGroup(item)) && filterHasField(item, dataField));
}
var renderValueText = function($container, value2, customOperation) {
  if (Array.isArray(value2)) {
    var lastItemIndex = value2.length - 1;
    $container.empty();
    value2.forEach((t, i) => {
      renderer_default("<span>").addClass(FILTER_BUILDER_ITEM_TEXT_PART_CLASS).text(t).appendTo($container);
      if (i !== lastItemIndex) {
        renderer_default("<span>").addClass(FILTER_BUILDER_ITEM_TEXT_SEPARATOR_CLASS).text(customOperation && customOperation.valueSeparator ? customOperation.valueSeparator : "|").addClass(FILTER_BUILDER_ITEM_TEXT_SEPARATOR_EMPTY_CLASS).appendTo($container);
      }
    });
  } else if (value2) {
    $container.text(value2);
  } else {
    $container.text(message_default.format("dxFilterBuilder-enterValueText"));
  }
};

// node_modules/devextreme/esm/__internal/grids/grid_core/filter/m_filter_custom_operations.js
function baseOperation(grid) {
  var getFullText = function(itemText, parentText) {
    return parentText ? "".concat(parentText, "/").concat(itemText) : itemText;
  };
  var headerFilterController = grid && grid.getController("headerFilter");
  return {
    dataTypes: ["string", "date", "datetime", "number", "boolean", "object"],
    calculateFilterExpression: function(filterValue, field, fields) {
      var result2 = [];
      var lastIndex = filterValue.length - 1;
      filterValue && filterValue.forEach((value2, index2) => {
        if (isCondition(value2) || isGroup(value2)) {
          var filterExpression = getFilterExpression(value2, fields, [], "headerFilter");
          result2.push(filterExpression);
        } else {
          var _filterExpression = getFilterExpression([field.dataField, "=", value2], fields, [], "headerFilter");
          result2.push(_filterExpression);
        }
        index2 !== lastIndex && result2.push("or");
      });
      if (1 === result2.length) {
        return result2[0];
      }
      return result2;
    },
    editorTemplate(conditionInfo, container) {
      var div = renderer_default("<div>").addClass("dx-filterbuilder-item-value-text").appendTo(container);
      var column = extend(true, {}, grid.columnOption(conditionInfo.field.dataField));
      renderValueText(div, conditionInfo.text && conditionInfo.text.split("|"));
      column.filterType = "include";
      column.filterValues = conditionInfo.value ? conditionInfo.value.slice() : [];
      headerFilterController.showHeaderFilterMenuBase({
        columnElement: div,
        column,
        apply() {
          value2 = this.filterValues, void conditionInfo.setValue(value2);
          var value2;
          headerFilterController.hideHeaderFilterMenu();
          conditionInfo.closeEditor();
        },
        onHidden() {
          conditionInfo.closeEditor();
        },
        isFilterBuilder: true
      });
      return container;
    },
    customizeText: function(fieldInfo, options2) {
      options2 = options2 || {};
      var {
        value: value2
      } = fieldInfo;
      var column = grid.columnOption(fieldInfo.field.dataField);
      var headerFilter = column && column.headerFilter;
      var lookup = column && column.lookup;
      var values = options2.values || [value2];
      if (headerFilter && headerFilter.dataSource || lookup && lookup.dataSource) {
        var result2 = new Deferred();
        var itemsDeferred = options2.items || new Deferred();
        if (!options2.items) {
          column = extend({}, column, {
            filterType: "include",
            filterValues: values
          });
          var dataSourceOptions = headerFilterController.getDataSource(column);
          dataSourceOptions.paginate = false;
          var dataSource = new DataSource(dataSourceOptions);
          var key = dataSource.store().key();
          if (key) {
            var {
              values: _values
            } = options2;
            if (_values && _values.length > 1) {
              var filter = _values.reduce((result3, value3) => {
                if (result3.length) {
                  result3.push("or");
                }
                result3.push([key, "=", value3]);
                return result3;
              }, []);
              dataSource.filter(filter);
            } else {
              dataSource.filter([key, "=", fieldInfo.value]);
            }
          } else if (fieldInfo.field.calculateDisplayValue) {
            ui_errors_default.log("W1017");
          }
          options2.items = itemsDeferred;
          dataSource.load().done(itemsDeferred.resolve);
        }
        itemsDeferred.done((items) => {
          var index2 = values.indexOf(fieldInfo.value);
          result2.resolve(function getSelectedItemsTexts(items2, parentText) {
            var result3 = [];
            items2.forEach((item) => {
              if (item.items) {
                var selectedItemsTexts = getSelectedItemsTexts(item.items, getFullText(item.text, parentText));
                result3 = result3.concat(selectedItemsTexts);
              }
              item.selected && result3.push(getFullText(item.text, parentText));
            });
            return result3;
          }(items, null)[index2]);
        });
        return result2;
      }
      var text = headerFilterController.getHeaderItemText(value2, column, 0, grid.option("headerFilter"));
      return text;
    }
  };
}
function anyOf(grid) {
  return extend(baseOperation(grid), {
    name: "anyof",
    icon: "selectall",
    caption: message_default.format("dxFilterBuilder-filterOperationAnyOf")
  });
}
function noneOf(grid) {
  var baseOp = baseOperation(grid);
  return extend({}, baseOp, {
    calculateFilterExpression(filterValue, field, fields) {
      var baseFilter = baseOp.calculateFilterExpression(filterValue, field, fields);
      if (!baseFilter || 0 === baseFilter.length) {
        return null;
      }
      return "!" === baseFilter[0] ? baseFilter : ["!", baseFilter];
    },
    name: "noneof",
    icon: "unselectall",
    caption: message_default.format("dxFilterBuilder-filterOperationNoneOf")
  });
}

// node_modules/devextreme/esm/__internal/grids/grid_core/filter/m_filter_sync.js
var FILTER_ROW_OPERATIONS = ["=", "<>", "<", "<=", ">", ">=", "notcontains", "contains", "startswith", "endswith", "between"];
var FILTER_TYPES_INCLUDE = "include";
var FILTER_TYPES_EXCLUDE = "exclude";
function getColumnIdentifier(column) {
  return column.name || column.dataField;
}
function checkForErrors(columns2) {
  columns2.forEach((column) => {
    var identifier = getColumnIdentifier(column);
    if (!isDefined(identifier) && column.allowFiltering) {
      throw new ui_errors_default.Error("E1049", column.caption);
    }
  });
}
var FilterSyncController = m_modules_default.Controller.inherit(/* @__PURE__ */ function() {
  var getEmptyFilterValues = function() {
    return {
      filterType: FILTER_TYPES_INCLUDE,
      filterValues: void 0
    };
  };
  var canSyncHeaderFilterWithFilterRow = function(column) {
    var filterValues = column.filterValues || [];
    return !filtering_default.getGroupInterval(column) && !(column.headerFilter && column.headerFilter.dataSource) || 1 === filterValues.length && null === filterValues[0];
  };
  var getConditionFromFilterRow = function(column) {
    var value2 = column.filterValue;
    if (isDefined(value2)) {
      var operation = column.selectedFilterOperation || column.defaultFilterOperation || getDefaultOperation(column);
      var filter = [getColumnIdentifier(column), operation, column.filterValue];
      return filter;
    }
    return null;
  };
  var getConditionFromHeaderFilter = function(column) {
    var selectedOperation;
    var value2;
    var {
      filterValues
    } = column;
    if (!filterValues) {
      return null;
    }
    if (1 === filterValues.length && canSyncHeaderFilterWithFilterRow(column) && !Array.isArray(filterValues[0])) {
      column.filterType === FILTER_TYPES_EXCLUDE ? selectedOperation = "<>" : selectedOperation = "=";
      value2 = filterValues[0];
    } else {
      column.filterType === FILTER_TYPES_EXCLUDE ? selectedOperation = "noneof" : selectedOperation = "anyof";
      value2 = filterValues;
    }
    return [getColumnIdentifier(column), selectedOperation, value2];
  };
  var updateHeaderFilterCondition = function(columnsController, column, headerFilterCondition) {
    var headerFilter = function(headerFilterCondition2, column2) {
      if (!headerFilterCondition2) {
        return getEmptyFilterValues();
      }
      var filterType;
      var selectedFilterOperation = headerFilterCondition2[1];
      var value2 = headerFilterCondition2[2];
      var hasArrayValue = Array.isArray(value2);
      if (!hasArrayValue) {
        if (!canSyncHeaderFilterWithFilterRow(column2)) {
          return getEmptyFilterValues();
        }
      }
      switch (selectedFilterOperation) {
        case "anyof":
        case "=":
          filterType = FILTER_TYPES_INCLUDE;
          break;
        case "noneof":
        case "<>":
          filterType = FILTER_TYPES_EXCLUDE;
          break;
        default:
          return getEmptyFilterValues();
      }
      return {
        filterType,
        filterValues: hasArrayValue ? value2 : [value2]
      };
    }(headerFilterCondition, column);
    columnsController.columnOption(getColumnIdentifier(column), headerFilter);
  };
  var updateFilterRowCondition = function(columnsController, column, condition) {
    var filterRowOptions;
    var selectedFilterOperation = null === condition || void 0 === condition ? void 0 : condition[1];
    var filterValue = null === condition || void 0 === condition ? void 0 : condition[2];
    var filterOperations = column.filterOperations || column.defaultFilterOperations;
    if ((!filterOperations || filterOperations.indexOf(selectedFilterOperation) >= 0 || selectedFilterOperation === column.defaultFilterOperation) && FILTER_ROW_OPERATIONS.includes(selectedFilterOperation) && null !== filterValue) {
      if (selectedFilterOperation === column.defaultFilterOperation && !isDefined(column.selectedFilterOperation)) {
        selectedFilterOperation = column.selectedFilterOperation;
      }
      filterRowOptions = {
        filterValue,
        selectedFilterOperation
      };
    } else {
      filterRowOptions = {
        filterValue: void 0,
        selectedFilterOperation: void 0
      };
    }
    columnsController.columnOption(getColumnIdentifier(column), filterRowOptions);
  };
  return {
    syncFilterValue() {
      var that = this;
      var columnsController = that.getController("columns");
      var columns2 = columnsController.getFilteringColumns();
      this._skipSyncColumnOptions = true;
      columns2.forEach((column) => {
        var filterConditions = getMatchedConditions(that.option("filterValue"), getColumnIdentifier(column));
        if (1 === filterConditions.length) {
          var filterCondition = filterConditions[0];
          updateHeaderFilterCondition(columnsController, column, filterCondition);
          updateFilterRowCondition(columnsController, column, filterCondition);
        } else {
          isDefined(column.filterValues) && updateHeaderFilterCondition(columnsController, column, null);
          isDefined(column.filterValue) && updateFilterRowCondition(columnsController, column, null);
        }
      });
      this._skipSyncColumnOptions = false;
    },
    _initSync() {
      var columns2 = this.getController("columns").getColumns();
      var dataController2 = this.getController("data");
      var pageIndex = dataController2.pageIndex();
      checkForErrors(columns2);
      if (!this.option("filterValue")) {
        var filteringColumns = this.getController("columns").getFilteringColumns();
        var filterValue = this.getFilterValueFromColumns(filteringColumns);
        this._silentOption("filterValue", filterValue);
      }
      this.syncFilterValue();
      dataController2.pageIndex(pageIndex);
    },
    init() {
      var dataController2 = this.getController("data");
      if (dataController2.isFilterSyncActive()) {
        if (this.getController("columns").isAllDataTypesDefined()) {
          this._initSync();
        } else {
          dataController2.dataSourceChanged.add(() => this._initSync());
        }
      }
    },
    _getSyncFilterRow(filterValue, column) {
      var filter = getConditionFromFilterRow(column);
      if (isDefined(filter)) {
        return syncFilters(filterValue, filter);
      }
      return removeFieldConditionsFromFilter(filterValue, getColumnIdentifier(column));
    },
    _getSyncHeaderFilter(filterValue, column) {
      var filter = getConditionFromHeaderFilter(column);
      if (filter) {
        return syncFilters(filterValue, filter);
      }
      return removeFieldConditionsFromFilter(filterValue, getColumnIdentifier(column));
    },
    getFilterValueFromColumns(columns2) {
      if (!this.getController("data").isFilterSyncActive()) {
        return null;
      }
      var filterValue = ["and"];
      columns2 && columns2.forEach((column) => {
        var headerFilter = getConditionFromHeaderFilter(column);
        var filterRow = getConditionFromFilterRow(column);
        headerFilter && addItem(headerFilter, filterValue);
        filterRow && addItem(filterRow, filterValue);
      });
      return getNormalizedFilter(filterValue);
    },
    syncFilterRow(column) {
      this.option("filterValue", this._getSyncFilterRow(this.option("filterValue"), column));
    },
    syncHeaderFilter(column) {
      this.option("filterValue", this._getSyncHeaderFilter(this.option("filterValue"), column));
    },
    getCustomFilterOperations() {
      var filterBuilderCustomOperations = this.option("filterBuilder.customOperations") || [];
      return [anyOf(this.component), noneOf(this.component)].concat(filterBuilderCustomOperations);
    },
    publicMethods: () => ["getCustomFilterOperations"]
  };
}());
var DataControllerFilterSyncExtender = {
  isFilterSyncActive() {
    var filterSyncEnabledValue = this.option("filterSyncEnabled");
    return "auto" === filterSyncEnabledValue ? this.option("filterPanel.visible") : filterSyncEnabledValue;
  },
  skipCalculateColumnFilters() {
    var filterSyncController = this.getController("filterSync");
    return (isDefined(this.option("filterValue")) || filterSyncController._skipSyncColumnOptions) && this.isFilterSyncActive();
  },
  _calculateAdditionalFilter() {
    if (false === this.option("filterPanel.filterEnabled")) {
      return this.callBase();
    }
    var filters = [this.callBase()];
    var columns2 = this.getController("columns").getFilteringColumns();
    var filterValue = this.option("filterValue");
    if (this.isFilterSyncActive()) {
      var currentColumnForHeaderFilter = this.getController("headerFilter").getCurrentColumn();
      var currentColumnForFilterRow = this.getController("applyFilter").getCurrentColumnForFiltering();
      var currentColumn = currentColumnForHeaderFilter || currentColumnForFilterRow;
      var needRemoveCurrentColumnFilter = currentColumnForHeaderFilter || isDefined(null === currentColumnForFilterRow || void 0 === currentColumnForFilterRow ? void 0 : currentColumnForFilterRow.filterValue);
      if (needRemoveCurrentColumnFilter && filterValue) {
        filterValue = removeFieldConditionsFromFilter(filterValue, getColumnIdentifier(currentColumn));
      }
    }
    var customOperations = this.getController("filterSync").getCustomFilterOperations();
    var calculatedFilterValue = getFilterExpression(filterValue, columns2, customOperations, "filterBuilder");
    if (calculatedFilterValue) {
      filters.push(calculatedFilterValue);
    }
    return m_utils_default.combineFilters(filters);
  },
  _parseColumnPropertyName(fullName) {
    var matched = fullName.match(/.*\.(.*)/);
    if (matched) {
      return matched[1];
    }
    return null;
  },
  clearFilter(filterName) {
    this.component.beginUpdate();
    if (arguments.length > 0) {
      if ("filterValue" === filterName) {
        this.option("filterValue", null);
      }
      this.callBase(filterName);
    } else {
      this.option("filterValue", null);
      this.callBase();
    }
    this.component.endUpdate();
  },
  optionChanged(args) {
    switch (args.name) {
      case "filterValue":
        this._applyFilter();
        this.isFilterSyncActive() && this.getController("filterSync").syncFilterValue();
        args.handled = true;
        break;
      case "filterSyncEnabled":
        args.handled = true;
        break;
      case "columns":
        if (this.isFilterSyncActive()) {
          var column = this.getController("columns").getColumnByPath(args.fullName);
          var filterSyncController = this.getController("filterSync");
          if (column && !filterSyncController._skipSyncColumnOptions) {
            var propertyName = this._parseColumnPropertyName(args.fullName);
            filterSyncController._skipSyncColumnOptions = true;
            if ("filterType" === propertyName) {
              if (FILTER_TYPES_EXCLUDE === args.value || FILTER_TYPES_EXCLUDE === args.previousValue) {
                filterSyncController.syncHeaderFilter(column);
              }
            } else if ("filterValues" === propertyName) {
              filterSyncController.syncHeaderFilter(column);
            } else if (["filterValue", "selectedFilterOperation"].includes(propertyName)) {
              filterSyncController.syncFilterRow(column, column.filterValue);
            }
            filterSyncController._skipSyncColumnOptions = false;
          }
        }
        this.callBase(args);
        break;
      default:
        this.callBase(args);
    }
  },
  _applyFilter() {
    var filterSyncController = this.getController("filterSync");
    if (filterSyncController._skipSyncColumnOptions) {
      return new Deferred().resolve();
    }
    return this.callBase.apply(this, arguments);
  }
};
var ColumnHeadersViewFilterSyncExtender = {
  _isHeaderFilterEmpty(column) {
    if (this.getController("data").isFilterSyncActive()) {
      return !filterHasField(this.option("filterValue"), getColumnIdentifier(column));
    }
    return this.callBase(column);
  },
  _needUpdateFilterIndicators() {
    return !this.getController("data").isFilterSyncActive();
  },
  optionChanged(args) {
    if ("filterValue" === args.name) {
      this._updateHeaderFilterIndicators();
    } else {
      this.callBase(args);
    }
  }
};
var filterSyncModule = {
  defaultOptions: () => ({
    filterValue: null,
    filterSyncEnabled: "auto"
  }),
  controllers: {
    filterSync: FilterSyncController
  },
  extenders: {
    controllers: {
      data: DataControllerFilterSyncExtender
    },
    views: {
      columnHeadersView: ColumnHeadersViewFilterSyncExtender
    }
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/filter_sync.js
m_core_default.registerModule("filterSync", filterSyncModule);

// node_modules/devextreme/esm/__internal/filter_builder/m_filter_builder.js
var FILTER_BUILDER_CLASS2 = "dx-filterbuilder";
var FILTER_BUILDER_GROUP_CLASS = "".concat(FILTER_BUILDER_CLASS2, "-group");
var FILTER_BUILDER_GROUP_ITEM_CLASS = "".concat(FILTER_BUILDER_GROUP_CLASS, "-item");
var FILTER_BUILDER_GROUP_CONTENT_CLASS = "".concat(FILTER_BUILDER_GROUP_CLASS, "-content");
var FILTER_BUILDER_GROUP_OPERATIONS_CLASS = "".concat(FILTER_BUILDER_GROUP_CLASS, "-operations");
var FILTER_BUILDER_GROUP_OPERATION_CLASS = "".concat(FILTER_BUILDER_GROUP_CLASS, "-operation");
var FILTER_BUILDER_ACTION_CLASS = "".concat(FILTER_BUILDER_CLASS2, "-action");
var FILTER_BUILDER_IMAGE_CLASS = "".concat(FILTER_BUILDER_ACTION_CLASS, "-icon");
var FILTER_BUILDER_IMAGE_ADD_CLASS = "dx-icon-plus";
var FILTER_BUILDER_IMAGE_REMOVE_CLASS = "dx-icon-remove";
var FILTER_BUILDER_ITEM_TEXT_CLASS2 = "".concat(FILTER_BUILDER_CLASS2, "-text");
var FILTER_BUILDER_ITEM_FIELD_CLASS = "".concat(FILTER_BUILDER_CLASS2, "-item-field");
var FILTER_BUILDER_ITEM_OPERATION_CLASS = "".concat(FILTER_BUILDER_CLASS2, "-item-operation");
var FILTER_BUILDER_ITEM_VALUE_CLASS = "".concat(FILTER_BUILDER_CLASS2, "-item-value");
var FILTER_BUILDER_ITEM_VALUE_TEXT_CLASS = "".concat(FILTER_BUILDER_CLASS2, "-item-value-text");
var FILTER_BUILDER_OVERLAY_CLASS = "".concat(FILTER_BUILDER_CLASS2, "-overlay");
var FILTER_BUILDER_FILTER_OPERATIONS_CLASS = "".concat(FILTER_BUILDER_CLASS2, "-operations");
var FILTER_BUILDER_FIELDS_CLASS = "".concat(FILTER_BUILDER_CLASS2, "-fields");
var FILTER_BUILDER_ADD_CONDITION_CLASS = "".concat(FILTER_BUILDER_CLASS2, "-add-condition");
var ACTIVE_CLASS = "dx-state-active";
var FILTER_BUILDER_MENU_CUSTOM_OPERATION_CLASS = "".concat(FILTER_BUILDER_CLASS2, "-menu-custom-operation");
var SOURCE = "filterBuilder";
var DISABLED_STATE_CLASS5 = "dx-state-disabled";
var TAB_KEY2 = "tab";
var ENTER_KEY = "enter";
var ESCAPE_KEY = "escape";
var ACTIONS3 = [{
  name: "onEditorPreparing",
  config: {
    excludeValidators: ["disabled", "readOnly"],
    category: "rendering"
  }
}, {
  name: "onEditorPrepared",
  config: {
    excludeValidators: ["disabled", "readOnly"],
    category: "rendering"
  }
}, {
  name: "onValueChanged",
  config: {
    excludeValidators: ["disabled", "readOnly"]
  }
}];
var OPERATORS = {
  and: "and",
  or: "or",
  notAnd: "!and",
  notOr: "!or"
};
var EditorFactory2 = class_default.inherit(ui_editor_factory_mixin_default);
var FilterBuilder = class extends ui_widget_default {
  _getDefaultOptions() {
    return extend(super._getDefaultOptions(), {
      onEditorPreparing: null,
      onEditorPrepared: null,
      onValueChanged: null,
      fields: [],
      groupOperations: ["and", "or", "notAnd", "notOr"],
      maxGroupLevel: void 0,
      value: null,
      allowHierarchicalFields: false,
      groupOperationDescriptions: {
        and: message_default.format("dxFilterBuilder-and"),
        or: message_default.format("dxFilterBuilder-or"),
        notAnd: message_default.format("dxFilterBuilder-notAnd"),
        notOr: message_default.format("dxFilterBuilder-notOr")
      },
      customOperations: [],
      closePopupOnTargetScroll: true,
      filterOperationDescriptions: {
        between: message_default.format("dxFilterBuilder-filterOperationBetween"),
        equal: message_default.format("dxFilterBuilder-filterOperationEquals"),
        notEqual: message_default.format("dxFilterBuilder-filterOperationNotEquals"),
        lessThan: message_default.format("dxFilterBuilder-filterOperationLess"),
        lessThanOrEqual: message_default.format("dxFilterBuilder-filterOperationLessOrEquals"),
        greaterThan: message_default.format("dxFilterBuilder-filterOperationGreater"),
        greaterThanOrEqual: message_default.format("dxFilterBuilder-filterOperationGreaterOrEquals"),
        startsWith: message_default.format("dxFilterBuilder-filterOperationStartsWith"),
        contains: message_default.format("dxFilterBuilder-filterOperationContains"),
        notContains: message_default.format("dxFilterBuilder-filterOperationNotContains"),
        endsWith: message_default.format("dxFilterBuilder-filterOperationEndsWith"),
        isBlank: message_default.format("dxFilterBuilder-filterOperationIsBlank"),
        isNotBlank: message_default.format("dxFilterBuilder-filterOperationIsNotBlank")
      }
    });
  }
  _optionChanged(args) {
    switch (args.name) {
      case "closePopupOnTargetScroll":
        break;
      case "onEditorPreparing":
      case "onEditorPrepared":
      case "onValueChanged":
        this._initActions();
        break;
      case "customOperations":
        this._initCustomOperations();
        this._invalidate();
        break;
      case "fields":
      case "maxGroupLevel":
      case "groupOperations":
      case "allowHierarchicalFields":
      case "groupOperationDescriptions":
      case "filterOperationDescriptions":
        this._invalidate();
        break;
      case "value":
        if (args.value !== args.previousValue) {
          var disableInvalidateForValue = this._disableInvalidateForValue;
          if (!disableInvalidateForValue) {
            this._initModel();
            this._invalidate();
          }
          this._disableInvalidateForValue = false;
          this.executeAction("onValueChanged", {
            value: args.value,
            previousValue: args.previousValue
          });
          this._disableInvalidateForValue = disableInvalidateForValue;
        }
        break;
      default:
        super._optionChanged(args);
    }
  }
  getFilterExpression() {
    var fields = this._getNormalizedFields();
    var value2 = extend(true, [], this._model);
    return getFilterExpression(getNormalizedFilter(value2), fields, this._customOperations, SOURCE);
  }
  _getNormalizedFields() {
    return getNormalizedFields(this.option("fields"));
  }
  _updateFilter() {
    this._disableInvalidateForValue = true;
    var value2 = extend(true, [], this._model);
    var normalizedValue = getNormalizedFilter(value2);
    var oldValue = getNormalizedFilter(this._getModel(this.option("value")));
    if (JSON.stringify(oldValue) !== JSON.stringify(normalizedValue)) {
      this.option("value", normalizedValue);
    }
    this._disableInvalidateForValue = false;
    this._fireContentReadyAction();
  }
  _init() {
    this._initCustomOperations();
    this._initModel();
    this._initEditorFactory();
    this._initActions();
    super._init();
  }
  _initEditorFactory() {
    this._editorFactory = new EditorFactory2();
  }
  _initCustomOperations() {
    this._customOperations = getMergedOperations(this.option("customOperations"), this.option("filterOperationDescriptions.between"), this);
  }
  _getDefaultGroupOperation() {
    var _a2, _b2;
    return null !== (_b2 = null === (_a2 = this.option("groupOperations")) || void 0 === _a2 ? void 0 : _a2[0]) && void 0 !== _b2 ? _b2 : OPERATORS.and;
  }
  _getModel(value2) {
    return convertToInnerStructure(value2, this._customOperations, this._getDefaultGroupOperation());
  }
  _initModel() {
    this._model = this._getModel(this.option("value"));
  }
  _initActions() {
    var that = this;
    that._actions = {};
    ACTIONS3.forEach((action) => {
      var actionConfig = extend({}, action.config);
      that._actions[action.name] = that._createActionByOption(action.name, actionConfig);
    });
  }
  executeAction(actionName, options2) {
    var action = this._actions[actionName];
    return action && action(options2);
  }
  _initMarkup() {
    this.$element().addClass(FILTER_BUILDER_CLASS2);
    super._initMarkup();
    this._createGroupElementByCriteria(this._model).appendTo(this.$element());
  }
  _createConditionElement(condition, parent) {
    return renderer_default("<div>").addClass(FILTER_BUILDER_GROUP_CLASS).append(this._createConditionItem(condition, parent));
  }
  _createGroupElementByCriteria(criteria, parent) {
    var groupLevel = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
    var $group = this._createGroupElement(criteria, parent, groupLevel);
    var $groupContent = $group.find(".".concat(FILTER_BUILDER_GROUP_CONTENT_CLASS));
    var groupCriteria = getGroupCriteria(criteria);
    for (var i = 0; i < groupCriteria.length; i++) {
      var innerCriteria = groupCriteria[i];
      if (isGroup(innerCriteria)) {
        this._createGroupElementByCriteria(innerCriteria, criteria, groupLevel + 1).appendTo($groupContent);
      } else if (isCondition(innerCriteria)) {
        this._createConditionElement(innerCriteria, criteria).appendTo($groupContent);
      }
    }
    return $group;
  }
  _createGroupElement(criteria, parent, groupLevel) {
    var $groupItem = renderer_default("<div>").addClass(FILTER_BUILDER_GROUP_ITEM_CLASS);
    var $groupContent = renderer_default("<div>").addClass(FILTER_BUILDER_GROUP_CONTENT_CLASS);
    var $group = renderer_default("<div>").addClass(FILTER_BUILDER_GROUP_CLASS).append($groupItem).append($groupContent);
    if (null != parent) {
      this._createRemoveButton(() => {
        removeItem(parent, criteria);
        $group.remove();
        this._updateFilter();
      }).appendTo($groupItem);
    }
    this._createGroupOperationButton(criteria).appendTo($groupItem);
    this._createAddButton(() => {
      var newGroup = createEmptyGroup(this._getDefaultGroupOperation());
      addItem(newGroup, criteria);
      this._createGroupElement(newGroup, criteria, groupLevel + 1).appendTo($groupContent);
      this._updateFilter();
    }, () => {
      var field = this.option("fields")[0];
      var newCondition = createCondition(field, this._customOperations);
      addItem(newCondition, criteria);
      this._createConditionElement(newCondition, criteria).appendTo($groupContent);
      this._updateFilter();
    }, groupLevel).appendTo($groupItem);
    return $group;
  }
  _createButton(caption) {
    return renderer_default("<div>").text(caption);
  }
  _createGroupOperationButton(criteria) {
    var groupOperations = this._getGroupOperations(criteria);
    var groupMenuItem = getGroupMenuItem(criteria, groupOperations);
    var caption = groupMenuItem.text;
    var $operationButton = groupOperations && groupOperations.length < 2 ? this._createButton(caption).addClass(DISABLED_STATE_CLASS5) : this._createButtonWithMenu({
      caption,
      menu: {
        items: groupOperations,
        displayExpr: "text",
        keyExpr: "value",
        onItemClick: (e) => {
          if (groupMenuItem !== e.itemData) {
            setGroupValue(criteria, e.itemData.value);
            $operationButton.text(e.itemData.text);
            groupMenuItem = e.itemData;
            this._updateFilter();
          }
        },
        onContentReady(e) {
          e.component.selectItem(groupMenuItem);
        },
        cssClass: FILTER_BUILDER_GROUP_OPERATIONS_CLASS
      }
    });
    return $operationButton.addClass(FILTER_BUILDER_ITEM_TEXT_CLASS2).addClass(FILTER_BUILDER_GROUP_OPERATION_CLASS).attr("tabindex", 0);
  }
  _createButtonWithMenu(options2) {
    var that = this;
    var removeMenu = function() {
      that.$element().find(".".concat(ACTIVE_CLASS)).removeClass(ACTIVE_CLASS);
      that.$element().find(".dx-overlay .dx-treeview").remove();
      that.$element().find(".dx-overlay").remove();
    };
    var rtlEnabled = this.option("rtlEnabled");
    var position3 = rtlEnabled ? "right" : "left";
    var $button = this._createButton(options2.caption);
    extend(options2.menu, {
      focusStateEnabled: true,
      selectionMode: "single",
      onItemClick: (handler = options2.menu.onItemClick, function(e) {
        handler(e);
        if ("dxclick" === e.event.type) {
          removeMenu();
        }
      }),
      onHiding() {
        $button.removeClass(ACTIVE_CLASS);
      },
      position: {
        my: "".concat(position3, " top"),
        at: "".concat(position3, " bottom"),
        offset: "0 1",
        of: $button,
        collision: "flip"
      },
      animation: null,
      onHidden() {
        removeMenu();
      },
      cssClass: "".concat(FILTER_BUILDER_OVERLAY_CLASS, " ").concat(options2.menu.cssClass),
      rtlEnabled
    });
    var handler;
    options2.popup = {
      onShown(info) {
        var treeViewElement = renderer_default(info.component.content()).find(".dx-treeview");
        var treeView = treeViewElement.dxTreeView("instance");
        events_engine_default.on(treeViewElement, "keyup keydown", (e) => {
          var keyName = normalizeKeyName(e);
          if ("keydown" === e.type && keyName === TAB_KEY2 || "keyup" === e.type && (keyName === ESCAPE_KEY || keyName === ENTER_KEY)) {
            info.component.hide();
            events_engine_default.trigger(options2.menu.position.of, "focus");
          }
        });
        treeView.focus();
        treeView.option("focusedElement", null);
      }
    };
    this._subscribeOnClickAndEnterKey($button, () => {
      removeMenu();
      that._createPopupWithTreeView(options2, that.$element());
      $button.addClass(ACTIVE_CLASS);
    });
    return $button;
  }
  _hasValueButton(condition) {
    var customOperation = getCustomOperation(this._customOperations, condition[1]);
    return customOperation ? false !== customOperation.hasValue : null !== condition[2];
  }
  _createOperationButtonWithMenu(condition, field) {
    var that = this;
    var availableOperations = getAvailableOperations(field, this.option("filterOperationDescriptions"), this._customOperations);
    var currentOperation = getOperationFromAvailable(getOperationValue(condition), availableOperations);
    var $operationButton = this._createButtonWithMenu({
      caption: currentOperation.text,
      menu: {
        items: availableOperations,
        displayExpr: "text",
        onItemRendered(e) {
          e.itemData.isCustom && renderer_default(e.itemElement).addClass(FILTER_BUILDER_MENU_CUSTOM_OPERATION_CLASS);
        },
        onContentReady(e) {
          e.component.selectItem(currentOperation);
        },
        onItemClick: (e) => {
          if (currentOperation !== e.itemData) {
            currentOperation = e.itemData;
            updateConditionByOperation(condition, currentOperation.value, that._customOperations);
            var $valueButton = $operationButton.siblings().filter(".".concat(FILTER_BUILDER_ITEM_VALUE_CLASS));
            if (that._hasValueButton(condition)) {
              if (0 !== $valueButton.length) {
                $valueButton.remove();
              }
              that._createValueButton(condition, field).appendTo($operationButton.parent());
            } else {
              $valueButton.remove();
            }
            $operationButton.html(currentOperation.text);
            this._updateFilter();
          }
        },
        cssClass: FILTER_BUILDER_FILTER_OPERATIONS_CLASS
      }
    }).addClass(FILTER_BUILDER_ITEM_TEXT_CLASS2).addClass(FILTER_BUILDER_ITEM_OPERATION_CLASS).attr("tabindex", 0);
    return $operationButton;
  }
  _createOperationAndValueButtons(condition, field, $item) {
    this._createOperationButtonWithMenu(condition, field).appendTo($item);
    if (this._hasValueButton(condition)) {
      this._createValueButton(condition, field).appendTo($item);
    }
  }
  _createFieldButtonWithMenu(fields, condition, field) {
    var that = this;
    var allowHierarchicalFields = this.option("allowHierarchicalFields");
    var items = getItems2(fields, allowHierarchicalFields);
    var item = getField(field.name || field.dataField, items);
    var getFullCaption = function(item2, items2) {
      return allowHierarchicalFields ? getCaptionWithParents(item2, items2) : item2.caption;
    };
    var $fieldButton = this._createButtonWithMenu({
      caption: getFullCaption(item, items),
      menu: {
        items,
        dataStructure: "plain",
        keyExpr: "id",
        parentId: "parentId",
        displayExpr: "caption",
        onItemClick: (e) => {
          if (item !== e.itemData) {
            item = e.itemData;
            condition[0] = item.name || item.dataField;
            condition[2] = "object" === item.dataType ? null : "";
            updateConditionByOperation(condition, getDefaultOperation(item), that._customOperations);
            $fieldButton.siblings().filter(".".concat(FILTER_BUILDER_ITEM_TEXT_CLASS2)).remove();
            that._createOperationAndValueButtons(condition, item, $fieldButton.parent());
            var caption = getFullCaption(item, e.component.option("items"));
            $fieldButton.html(caption);
            this._updateFilter();
          }
        },
        onContentReady(e) {
          e.component.selectItem(item);
        },
        cssClass: FILTER_BUILDER_FIELDS_CLASS
      }
    }).addClass(FILTER_BUILDER_ITEM_TEXT_CLASS2).addClass(FILTER_BUILDER_ITEM_FIELD_CLASS).attr("tabindex", 0);
    return $fieldButton;
  }
  _createConditionItem(condition, parent) {
    var $item = renderer_default("<div>").addClass(FILTER_BUILDER_GROUP_ITEM_CLASS);
    var fields = this._getNormalizedFields();
    var field = getField(condition[0], fields);
    this._createRemoveButton(() => {
      removeItem(parent, condition);
      var isSingleChild = 1 === $item.parent().children().length;
      if (isSingleChild) {
        $item.parent().remove();
      } else {
        $item.remove();
      }
      this._updateFilter();
    }).appendTo($item);
    this._createFieldButtonWithMenu(fields, condition, field).appendTo($item);
    this._createOperationAndValueButtons(condition, field, $item);
    return $item;
  }
  _getGroupOperations(criteria) {
    var groupOperations = this.option("groupOperations");
    var groupOperationDescriptions = this.option("groupOperationDescriptions");
    if (!groupOperations || !groupOperations.length) {
      groupOperations = [getGroupValue(criteria).replace("!", "not")];
    }
    return groupOperations.map((operation) => ({
      text: groupOperationDescriptions[operation],
      value: OPERATORS[operation]
    }));
  }
  _createRemoveButton(handler) {
    var $removeButton = renderer_default("<div>").addClass(FILTER_BUILDER_IMAGE_CLASS).addClass(FILTER_BUILDER_IMAGE_REMOVE_CLASS).addClass(FILTER_BUILDER_ACTION_CLASS).attr("tabindex", 0);
    this._subscribeOnClickAndEnterKey($removeButton, handler);
    return $removeButton;
  }
  _createAddButton(addGroupHandler, addConditionHandler, groupLevel) {
    var $button;
    var maxGroupLevel = this.option("maxGroupLevel");
    if (isDefined(maxGroupLevel) && groupLevel >= maxGroupLevel) {
      $button = this._createButton();
      this._subscribeOnClickAndEnterKey($button, addConditionHandler);
    } else {
      $button = this._createButtonWithMenu({
        menu: {
          items: [{
            caption: message_default.format("dxFilterBuilder-addCondition"),
            click: addConditionHandler
          }, {
            caption: message_default.format("dxFilterBuilder-addGroup"),
            click: addGroupHandler
          }],
          displayExpr: "caption",
          onItemClick(e) {
            e.itemData.click();
          },
          cssClass: FILTER_BUILDER_ADD_CONDITION_CLASS
        }
      });
    }
    return $button.addClass(FILTER_BUILDER_IMAGE_CLASS).addClass(FILTER_BUILDER_IMAGE_ADD_CLASS).addClass(FILTER_BUILDER_ACTION_CLASS).attr("tabindex", 0);
  }
  _createValueText(item, field, $container) {
    var that = this;
    var $text = renderer_default("<div>").html("&nbsp;").addClass(FILTER_BUILDER_ITEM_VALUE_TEXT_CLASS).attr("tabindex", 0).appendTo($container);
    var value2 = item[2];
    var customOperation = getCustomOperation(that._customOperations, item[1]);
    if (!customOperation && field.lookup) {
      getCurrentLookupValueText(field, value2, (result2) => {
        renderValueText($text, result2);
      });
    } else {
      when(getCurrentValueText(field, value2, customOperation)).done((result2) => {
        renderValueText($text, result2, customOperation);
      });
    }
    that._subscribeOnClickAndEnterKey($text, (e) => {
      if ("keyup" === e.type) {
        e.stopPropagation();
      }
      that._createValueEditorWithEvents(item, field, $container);
    });
    return $text;
  }
  _updateConditionValue(item, value2, callback) {
    var areValuesDifferent = item[2] !== value2;
    if (areValuesDifferent) {
      item[2] = value2;
    }
    callback();
    this._updateFilter();
  }
  _addDocumentKeyUp($editor, handler) {
    var isComposing = false;
    var hasCompositionJustEnded = false;
    var document2 = dom_adapter_default.getDocument();
    var documentKeyUpHandler = (e) => {
      if (isComposing || hasCompositionJustEnded) {
        hasCompositionJustEnded = false;
        return;
      }
      handler(e);
    };
    events_engine_default.on(document2, "keyup", documentKeyUpHandler);
    var input = $editor.find("input");
    events_engine_default.on(input, "compositionstart", () => {
      isComposing = true;
    });
    events_engine_default.on(input, "compositionend", () => {
      isComposing = false;
      hasCompositionJustEnded = true;
    });
    events_engine_default.on(input, "keydown", (event) => {
      if (229 !== event.which) {
        hasCompositionJustEnded = false;
      }
    });
    this._documentKeyUpHandler = documentKeyUpHandler;
  }
  _addDocumentClick($editor, closeEditorFunc) {
    var document2 = dom_adapter_default.getDocument();
    var documentClickHandler = (e) => {
      if (!this._isFocusOnEditorParts($editor, e.target)) {
        events_engine_default.trigger($editor.find("input"), "change");
        closeEditorFunc();
      }
    };
    events_engine_default.on(document2, "dxpointerdown", documentClickHandler);
    this._documentClickHandler = documentClickHandler;
  }
  _isFocusOnEditorParts($editor, target) {
    var activeElement = target || dom_adapter_default.getActiveElement();
    return renderer_default(activeElement).closest($editor.children()).length || renderer_default(activeElement).closest(".dx-dropdowneditor-overlay").length;
  }
  _removeEvents() {
    var document2 = dom_adapter_default.getDocument();
    isDefined(this._documentKeyUpHandler) && events_engine_default.off(document2, "keyup", this._documentKeyUpHandler);
    isDefined(this._documentClickHandler) && events_engine_default.off(document2, "dxpointerdown", this._documentClickHandler);
  }
  _dispose() {
    this._removeEvents();
    super._dispose();
  }
  _createValueEditorWithEvents(item, field, $container) {
    var value2 = item[2];
    var createValueText = () => {
      $container.empty();
      this._removeEvents();
      return this._createValueText(item, field, $container);
    };
    var closeEditor = () => {
      this._updateConditionValue(item, value2, () => {
        createValueText();
      });
    };
    var options2 = {
      value: "" === value2 ? null : value2,
      filterOperation: getOperationValue(item),
      setValue(data3) {
        value2 = null === data3 ? "" : data3;
      },
      closeEditor,
      text: $container.text()
    };
    $container.empty();
    var $editor = this._createValueEditor($container, field, options2);
    events_engine_default.trigger($editor.find("input").not(":hidden").eq(0), "focus");
    this._removeEvents();
    this._addDocumentClick($editor, closeEditor);
    this._addDocumentKeyUp($editor, (e) => {
      var keyName = normalizeKeyName(e);
      if (keyName === TAB_KEY2) {
        if (this._isFocusOnEditorParts($editor)) {
          return;
        }
        this._updateConditionValue(item, value2, () => {
          createValueText();
          if (e.shiftKey) {
            events_engine_default.trigger($container.prev(), "focus");
          }
        });
      }
      if (keyName === ESCAPE_KEY) {
        events_engine_default.trigger(createValueText(), "focus");
      }
      if (keyName === ENTER_KEY) {
        this._updateConditionValue(item, value2, () => {
          events_engine_default.trigger(createValueText(), "focus");
        });
      }
    });
    this._fireContentReadyAction();
  }
  _createValueButton(item, field) {
    var $valueButton = renderer_default("<div>").addClass(FILTER_BUILDER_ITEM_TEXT_CLASS2).addClass(FILTER_BUILDER_ITEM_VALUE_CLASS);
    this._createValueText(item, field, $valueButton);
    return $valueButton;
  }
  _createValueEditor($container, field, options2) {
    var $editor = renderer_default("<div>").attr("tabindex", 0).appendTo($container);
    var customOperation = getCustomOperation(this._customOperations, options2.filterOperation);
    var editorTemplate2 = customOperation && customOperation.editorTemplate ? customOperation.editorTemplate : field.editorTemplate;
    if (editorTemplate2) {
      var template = this._getTemplate(editorTemplate2);
      template.render({
        model: extend({
          field
        }, options2),
        container: $editor
      });
    } else {
      this._editorFactory.createEditor.call(this, $editor, extend({}, field, options2, {
        parentType: SOURCE
      }));
    }
    return $editor;
  }
  _createPopupWithTreeView(options2, $container) {
    var that = this;
    var $popup = renderer_default("<div>").addClass(options2.menu.cssClass).appendTo($container);
    this._createComponent($popup, popup_default, {
      onHiding: options2.menu.onHiding,
      onHidden: options2.menu.onHidden,
      rtlEnabled: options2.menu.rtlEnabled,
      position: options2.menu.position,
      animation: options2.menu.animation,
      contentTemplate(contentElement) {
        var $menuContainer = renderer_default("<div>").appendTo(contentElement);
        that._createComponent($menuContainer, tree_view_default, options2.menu);
        this.repaint();
      },
      _ignoreFunctionValueDeprecation: true,
      maxHeight: () => getElementMaxHeightByWindow(options2.menu.position.of),
      visible: true,
      focusStateEnabled: false,
      hideOnParentScroll: this.option("closePopupOnTargetScroll"),
      hideOnOutsideClick: true,
      onShown: options2.popup.onShown,
      shading: false,
      width: "auto",
      height: "auto",
      showTitle: false,
      _wrapperClassExternal: options2.menu.cssClass
    });
  }
  _subscribeOnClickAndEnterKey($button, handler) {
    events_engine_default.on($button, "dxclick", handler);
    events_engine_default.on($button, "keyup", (e) => {
      if (normalizeKeyName(e) === ENTER_KEY) {
        handler(e);
      }
    });
  }
};
component_registrator_default("dxFilterBuilder", FilterBuilder);
var m_filter_builder_default = FilterBuilder;

// node_modules/devextreme/esm/ui/filter_builder.js
var filter_builder_default = m_filter_builder_default;

// node_modules/devextreme/esm/__internal/grids/grid_core/filter/m_filter_builder.js
var FilterBuilderView = m_modules_default.View.inherit({
  _renderCore() {
    this._updatePopupOptions();
  },
  _updatePopupOptions() {
    if (this.option("filterBuilderPopup.visible")) {
      this._initPopup();
    } else if (this._filterBuilderPopup) {
      this._filterBuilderPopup.hide();
    }
  },
  _disposePopup() {
    if (this._filterBuilderPopup) {
      this._filterBuilderPopup.dispose();
      this._filterBuilderPopup = void 0;
    }
    if (this._filterBuilder) {
      this._filterBuilder.dispose();
      this._filterBuilder = void 0;
    }
  },
  _initPopup() {
    var that = this;
    that._disposePopup();
    that._filterBuilderPopup = that._createComponent(that.element(), ui_popup_default, extend({
      title: message_default.format("dxDataGrid-filterBuilderPopupTitle"),
      contentTemplate: ($contentElement) => that._getPopupContentTemplate($contentElement),
      onOptionChanged(args) {
        if ("visible" === args.name) {
          that.option("filterBuilderPopup.visible", args.value);
        }
      },
      toolbarItems: that._getPopupToolbarItems()
    }, that.option("filterBuilderPopup"), {
      onHidden() {
        restoreFocus(that);
        that._disposePopup();
      }
    }));
  },
  _getPopupContentTemplate(contentElement) {
    var $contentElement = renderer_default(contentElement);
    var $filterBuilderContainer = renderer_default("<div>").appendTo(renderer_default(contentElement));
    this._filterBuilder = this._createComponent($filterBuilderContainer, filter_builder_default, extend({
      value: this.option("filterValue"),
      fields: this.getController("columns").getFilteringColumns()
    }, this.option("filterBuilder"), {
      customOperations: this.getController("filterSync").getCustomFilterOperations()
    }));
    this._createComponent($contentElement, scroll_view_default, {
      direction: "both"
    });
  },
  _getPopupToolbarItems() {
    var that = this;
    return [{
      toolbar: "bottom",
      location: "after",
      widget: "dxButton",
      options: {
        text: message_default.format("OK"),
        onClick() {
          var filter = that._filterBuilder.option("value");
          that.option("filterValue", filter);
          that._filterBuilderPopup.hide();
        }
      }
    }, {
      toolbar: "bottom",
      location: "after",
      widget: "dxButton",
      options: {
        text: message_default.format("Cancel"),
        onClick() {
          that._filterBuilderPopup.hide();
        }
      }
    }];
  },
  optionChanged(args) {
    switch (args.name) {
      case "filterBuilder":
      case "filterBuilderPopup":
        this._invalidate();
        args.handled = true;
        break;
      default:
        this.callBase(args);
    }
  }
});
var filterBuilderModule = {
  defaultOptions: () => ({
    filterBuilder: {
      groupOperationDescriptions: {
        and: message_default.format("dxFilterBuilder-and"),
        or: message_default.format("dxFilterBuilder-or"),
        notAnd: message_default.format("dxFilterBuilder-notAnd"),
        notOr: message_default.format("dxFilterBuilder-notOr")
      },
      filterOperationDescriptions: {
        between: message_default.format("dxFilterBuilder-filterOperationBetween"),
        equal: message_default.format("dxFilterBuilder-filterOperationEquals"),
        notEqual: message_default.format("dxFilterBuilder-filterOperationNotEquals"),
        lessThan: message_default.format("dxFilterBuilder-filterOperationLess"),
        lessThanOrEqual: message_default.format("dxFilterBuilder-filterOperationLessOrEquals"),
        greaterThan: message_default.format("dxFilterBuilder-filterOperationGreater"),
        greaterThanOrEqual: message_default.format("dxFilterBuilder-filterOperationGreaterOrEquals"),
        startsWith: message_default.format("dxFilterBuilder-filterOperationStartsWith"),
        contains: message_default.format("dxFilterBuilder-filterOperationContains"),
        notContains: message_default.format("dxFilterBuilder-filterOperationNotContains"),
        endsWith: message_default.format("dxFilterBuilder-filterOperationEndsWith"),
        isBlank: message_default.format("dxFilterBuilder-filterOperationIsBlank"),
        isNotBlank: message_default.format("dxFilterBuilder-filterOperationIsNotBlank")
      }
    },
    filterBuilderPopup: {}
  }),
  views: {
    filterBuilderView: FilterBuilderView
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/filter_builder.js
m_core_default.registerModule("filterBuilder", filterBuilderModule);

// node_modules/devextreme/esm/__internal/grids/grid_core/filter/m_filter_panel.js
var FILTER_PANEL_CLASS = "filter-panel";
var FILTER_PANEL_TEXT_CLASS = "".concat(FILTER_PANEL_CLASS, "-text");
var FILTER_PANEL_CHECKBOX_CLASS = "".concat(FILTER_PANEL_CLASS, "-checkbox");
var FILTER_PANEL_CLEAR_FILTER_CLASS = "".concat(FILTER_PANEL_CLASS, "-clear-filter");
var FILTER_PANEL_LEFT_CONTAINER = "".concat(FILTER_PANEL_CLASS, "-left");
var FILTER_PANEL_TARGET = "filterPanel";
var FilterPanelView = m_modules_default.View.inherit({
  isVisible() {
    return this.option("filterPanel.visible") && this.getController("data").dataSource();
  },
  init() {
    this.getController("data").dataSourceChanged.add(() => this.render());
    this._columnsController = this.getController("columns");
  },
  _renderCore() {
    var $element = this.element();
    $element.empty();
    var isColumnsDefined = !!this._columnsController.getColumns().length;
    if (!isColumnsDefined) {
      return;
    }
    $element.addClass(this.addWidgetPrefix(FILTER_PANEL_CLASS));
    var $leftContainer = renderer_default("<div>").addClass(this.addWidgetPrefix(FILTER_PANEL_LEFT_CONTAINER)).appendTo($element);
    this._renderFilterBuilderText($element, $leftContainer);
  },
  _renderFilterBuilderText($element, $leftContainer) {
    var $filterElement = this._getFilterElement();
    var $textElement = this._getTextElement();
    if (this.option("filterValue") || this._filterValueBuffer) {
      var $checkElement = this._getCheckElement();
      var $removeButtonElement = this._getRemoveButtonElement();
      $leftContainer.append($checkElement).append($filterElement).append($textElement);
      $element.append($removeButtonElement);
      return;
    }
    $leftContainer.append($filterElement).append($textElement);
  },
  _getCheckElement() {
    var that = this;
    var $element = renderer_default("<div>").addClass(this.addWidgetPrefix(FILTER_PANEL_CHECKBOX_CLASS));
    that._createComponent($element, check_box_default, {
      value: that.option("filterPanel.filterEnabled"),
      onValueChanged(e) {
        that.option("filterPanel.filterEnabled", e.value);
      }
    });
    $element.attr("title", this.option("filterPanel.texts.filterEnabledHint"));
    return $element;
  },
  _getFilterElement() {
    var that = this;
    var $element = renderer_default("<div>").addClass("dx-icon-filter");
    events_engine_default.on($element, "click", () => that._showFilterBuilder());
    registerKeyboardAction2("filterPanel", that, $element, void 0, () => that._showFilterBuilder());
    that._addTabIndexToElement($element);
    return $element;
  },
  _getTextElement() {
    var that = this;
    var $textElement = renderer_default("<div>").addClass(that.addWidgetPrefix(FILTER_PANEL_TEXT_CLASS));
    var filterText;
    var filterValue = that.option("filterValue");
    if (filterValue) {
      when(that.getFilterText(filterValue, that.getController("filterSync").getCustomFilterOperations())).done((filterText2) => {
        var customizeText = that.option("filterPanel.customizeText");
        if (customizeText) {
          var customText = customizeText({
            component: that.component,
            filterValue,
            text: filterText2
          });
          if ("string" === typeof customText) {
            filterText2 = customText;
          }
        }
        $textElement.text(filterText2);
      });
    } else {
      filterText = that.option("filterPanel.texts.createFilter");
      $textElement.text(filterText);
    }
    events_engine_default.on($textElement, "click", () => that._showFilterBuilder());
    registerKeyboardAction2("filterPanel", that, $textElement, void 0, () => that._showFilterBuilder());
    that._addTabIndexToElement($textElement);
    return $textElement;
  },
  _showFilterBuilder() {
    this.option("filterBuilderPopup.visible", true);
  },
  _getRemoveButtonElement() {
    var that = this;
    var clearFilterValue = () => that.option("filterValue", null);
    var $element = renderer_default("<div>").addClass(that.addWidgetPrefix(FILTER_PANEL_CLEAR_FILTER_CLASS)).text(that.option("filterPanel.texts.clearFilter"));
    events_engine_default.on($element, "click", clearFilterValue);
    registerKeyboardAction2("filterPanel", this, $element, void 0, clearFilterValue);
    that._addTabIndexToElement($element);
    return $element;
  },
  _addTabIndexToElement($element) {
    if (!this.option("useLegacyKeyboardNavigation")) {
      var tabindex = this.option("tabindex") || 0;
      $element.attr("tabindex", tabindex);
    }
  },
  optionChanged(args) {
    switch (args.name) {
      case "filterValue":
        this._invalidate();
        this.option("filterPanel.filterEnabled", true);
        args.handled = true;
        break;
      case "filterPanel":
        this._invalidate();
        args.handled = true;
        break;
      default:
        this.callBase(args);
    }
  },
  _getConditionText(fieldText, operationText, valueText) {
    var result2 = "[".concat(fieldText, "] ").concat(operationText);
    if (isDefined(valueText)) {
      result2 += valueText;
    }
    return result2;
  },
  _getValueMaskedText: (value2) => Array.isArray(value2) ? "('".concat(value2.join("', '"), "')") : " '".concat(value2, "'"),
  _getValueText(field, customOperation, value2) {
    var deferred = new Deferred();
    var hasCustomOperation = customOperation && customOperation.customizeText;
    if (isDefined(value2) || hasCustomOperation) {
      if (!hasCustomOperation && field.lookup) {
        getCurrentLookupValueText(field, value2, (data3) => {
          deferred.resolve(this._getValueMaskedText(data3));
        });
      } else {
        var displayValue = Array.isArray(value2) ? value2 : m_utils_default.getDisplayValue(field, value2, null);
        when(getCurrentValueText(field, displayValue, customOperation, FILTER_PANEL_TARGET)).done((data3) => {
          deferred.resolve(this._getValueMaskedText(data3));
        });
      }
    } else {
      deferred.resolve("");
    }
    return deferred.promise();
  },
  getConditionText(filterValue, options2) {
    var that = this;
    var operation = filterValue[1];
    var deferred = new Deferred();
    var customOperation = getCustomOperation(options2.customOperations, operation);
    var operationText;
    var field = getField(filterValue[0], options2.columns);
    var fieldText = field.caption || "";
    var value2 = filterValue[2];
    if (customOperation) {
      operationText = customOperation.caption || captionize(customOperation.name);
    } else if (null === value2) {
      operationText = getCaptionByOperation("=" === operation ? "isblank" : "isnotblank", options2.filterOperationDescriptions);
    } else {
      operationText = getCaptionByOperation(operation, options2.filterOperationDescriptions);
    }
    this._getValueText(field, customOperation, value2).done((valueText) => {
      deferred.resolve(that._getConditionText(fieldText, operationText, valueText));
    });
    return deferred;
  },
  getGroupText(filterValue, options2, isInnerGroup) {
    var that = this;
    var result2 = new Deferred();
    var textParts = [];
    var groupValue = getGroupValue(filterValue);
    filterValue.forEach((item) => {
      if (isCondition(item)) {
        textParts.push(that.getConditionText(item, options2));
      } else if (isGroup(item)) {
        textParts.push(that.getGroupText(item, options2, true));
      }
    });
    when.apply(this, textParts).done(function() {
      var text;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      if (groupValue.startsWith("!")) {
        var groupText = options2.groupOperationDescriptions["not".concat(groupValue.substring(1, 2).toUpperCase()).concat(groupValue.substring(2))].split(" ");
        text = "".concat(groupText[0], " ").concat(args[0]);
      } else {
        text = args.join(" ".concat(options2.groupOperationDescriptions[groupValue], " "));
      }
      if (isInnerGroup) {
        text = "(".concat(text, ")");
      }
      result2.resolve(text);
    });
    return result2;
  },
  getFilterText(filterValue, customOperations) {
    var options2 = {
      customOperations,
      columns: this.getController("columns").getFilteringColumns(),
      filterOperationDescriptions: this.option("filterBuilder.filterOperationDescriptions"),
      groupOperationDescriptions: this.option("filterBuilder.groupOperationDescriptions")
    };
    return isCondition(filterValue) ? this.getConditionText(filterValue, options2) : this.getGroupText(filterValue, options2);
  }
});
var filterPanelModule = {
  defaultOptions: () => ({
    filterPanel: {
      visible: false,
      filterEnabled: true,
      texts: {
        createFilter: message_default.format("dxDataGrid-filterPanelCreateFilter"),
        clearFilter: message_default.format("dxDataGrid-filterPanelClearFilter"),
        filterEnabledHint: message_default.format("dxDataGrid-filterPanelFilterEnabledHint")
      }
    }
  }),
  views: {
    filterPanelView: FilterPanelView
  },
  extenders: {
    controllers: {
      data: {
        optionChanged(args) {
          switch (args.name) {
            case "filterPanel":
              this._applyFilter();
              args.handled = true;
              break;
            default:
              this.callBase(args);
          }
        }
      }
    }
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/filter_panel.js
m_core_default.registerModule("filterPanel", filterPanelModule);

// node_modules/devextreme/esm/__internal/grids/grid_core/search/m_search.js
var SEARCH_PANEL_CLASS = "search-panel";
var SEARCH_TEXT_CLASS = "search-text";
var HEADER_PANEL_CLASS2 = "header-panel";
var FILTERING_TIMEOUT2 = 700;
function allowSearch(column) {
  var _a2;
  return !!(null !== (_a2 = column.allowSearch) && void 0 !== _a2 ? _a2 : column.allowFiltering);
}
function parseValue2(column, text) {
  var {
    lookup
  } = column;
  if (!column.parseValue) {
    return text;
  }
  if (lookup) {
    return column.parseValue.call(lookup, text);
  }
  return column.parseValue(text);
}
var dataController = (base2) => class extends base2 {
  publicMethods() {
    return super.publicMethods().concat(["searchByText"]);
  }
  _calculateAdditionalFilter() {
    var filter = super._calculateAdditionalFilter();
    var searchFilter = this.calculateSearchFilter(this.option("searchPanel.text"));
    return m_utils_default.combineFilters([filter, searchFilter]);
  }
  searchByText(text) {
    this.option("searchPanel.text", text);
  }
  optionChanged(args) {
    switch (args.fullName) {
      case "searchPanel.text":
      case "searchPanel":
        this._applyFilter();
        args.handled = true;
        break;
      default:
        super.optionChanged(args);
    }
  }
  calculateSearchFilter(text) {
    var i;
    var column;
    var columns2 = this._columnsController.getColumns();
    var searchVisibleColumnsOnly = this.option("searchPanel.searchVisibleColumnsOnly");
    var lookup;
    var filters = [];
    if (!text) {
      return null;
    }
    function onQueryDone(items) {
      var valueGetter = compileGetter(lookup.valueExpr);
      for (var _i = 0; _i < items.length; _i++) {
        var value2 = valueGetter(items[_i]);
        filters.push(column.createFilterExpression(value2, null, "search"));
      }
    }
    for (i = 0; i < columns2.length; i++) {
      column = columns2[i];
      if (searchVisibleColumnsOnly && !column.visible) {
        continue;
      }
      if (allowSearch(column) && column.calculateFilterExpression) {
        lookup = column.lookup;
        var filterValue = parseValue2(column, text);
        if (lookup && lookup.items) {
          query_default(lookup.items).filter(column.createFilterExpression.call({
            dataField: lookup.displayExpr,
            dataType: lookup.dataType,
            calculateFilterExpression: column.calculateFilterExpression
          }, filterValue, null, "search")).enumerate().done(onQueryDone);
        } else if (void 0 !== filterValue) {
          filters.push(column.createFilterExpression(filterValue, null, "search"));
        }
      }
    }
    if (0 === filters.length) {
      return ["!"];
    }
    return m_utils_default.combineFilters(filters, "or");
  }
};
var headerPanel = (Base) => class extends Base {
  _getToolbarItems() {
    var items = super._getToolbarItems();
    return this._prepareSearchItem(items);
  }
  _prepareSearchItem(items) {
    var that = this;
    var dataController2 = that.getController("data");
    var searchPanelOptions = this.option("searchPanel");
    if (searchPanelOptions && searchPanelOptions.visible) {
      var toolbarItem = {
        template(data3, index2, container) {
          var $search = renderer_default("<div>").addClass(that.addWidgetPrefix(SEARCH_PANEL_CLASS)).appendTo(container);
          that.getController("editorFactory").createEditor($search, {
            width: searchPanelOptions.width,
            placeholder: searchPanelOptions.placeholder,
            parentType: "searchPanel",
            value: that.option("searchPanel.text"),
            updateValueTimeout: FILTERING_TIMEOUT2,
            setValue(value2) {
              dataController2.searchByText(value2);
            },
            editorOptions: {
              inputAttr: {
                "aria-label": message_default.format("".concat(that.component.NAME, "-ariaSearchInGrid"))
              }
            }
          });
          that.resize();
        },
        name: "searchPanel",
        location: "after",
        locateInMenu: "never",
        sortIndex: 40
      };
      items.push(toolbarItem);
    }
    return items;
  }
  getSearchTextEditor() {
    var that = this;
    var $element = that.element();
    var $searchPanel = $element.find(".".concat(that.addWidgetPrefix(SEARCH_PANEL_CLASS))).filter(function() {
      return renderer_default(this).closest(".".concat(that.addWidgetPrefix(HEADER_PANEL_CLASS2))).is($element);
    });
    if ($searchPanel.length) {
      return $searchPanel.dxTextBox("instance");
    }
    return null;
  }
  isVisible() {
    var searchPanelOptions = this.option("searchPanel");
    return super.isVisible() || !!(null === searchPanelOptions || void 0 === searchPanelOptions ? void 0 : searchPanelOptions.visible);
  }
  optionChanged(args) {
    if ("searchPanel" === args.name) {
      if ("searchPanel.text" === args.fullName) {
        var editor = this.getSearchTextEditor();
        if (editor) {
          editor.option("value", args.value);
        }
      } else {
        this._invalidate();
      }
      args.handled = true;
    } else {
      super.optionChanged(args);
    }
  }
};
var rowsView = (Base) => class extends Base {
  init() {
    super.init.apply(this, arguments);
    this._searchParams = [];
    this._dataController = this.getController("data");
  }
  _getFormattedSearchText(column, searchText) {
    var value2 = parseValue2(column, searchText);
    var formatOptions = m_utils_default.getFormatOptionsByColumn(column, "search");
    return m_utils_default.formatValue(value2, formatOptions);
  }
  _getStringNormalizer() {
    var _a2, _b2, _c, _d;
    var isCaseSensitive = this.option("searchPanel.highlightCaseSensitive");
    var dataSource = null === (_b2 = null === (_a2 = this._dataController) || void 0 === _a2 ? void 0 : _a2.getDataSource) || void 0 === _b2 ? void 0 : _b2.call(_a2);
    var langParams = null === (_d = null === (_c = null === dataSource || void 0 === dataSource ? void 0 : dataSource.loadOptions) || void 0 === _c ? void 0 : _c.call(dataSource)) || void 0 === _d ? void 0 : _d.langParams;
    return (str) => toComparable(str, isCaseSensitive, langParams);
  }
  _findHighlightingTextNodes(column, cellElement, searchText) {
    var $parent = cellElement.parent();
    var $items;
    var stringNormalizer = this._getStringNormalizer();
    var normalizedSearchText = stringNormalizer(searchText);
    var resultTextNodes = [];
    if (!$parent.length) {
      $parent = renderer_default("<div>").append(cellElement);
    } else if (column) {
      if (column.groupIndex >= 0 && !column.showWhenGrouped) {
        $items = cellElement;
      } else {
        var columnIndex = this._columnsController.getVisibleIndex(column.index);
        $items = $parent.children("td").eq(columnIndex).find("*");
      }
    }
    $items = (null === $items || void 0 === $items ? void 0 : $items.length) ? $items : $parent.find("*");
    $items.each((_, element) => {
      var _a2, _b2;
      var $contents = renderer_default(element).contents();
      for (var i = 0; i < $contents.length; i++) {
        var node = $contents.get(i);
        if (3 === node.nodeType) {
          var normalizedText = stringNormalizer(null !== (_b2 = null !== (_a2 = node.textContent) && void 0 !== _a2 ? _a2 : node.nodeValue) && void 0 !== _b2 ? _b2 : "");
          if (normalizedText.includes(normalizedSearchText)) {
            resultTextNodes.push(node);
          }
        }
      }
    });
    return resultTextNodes;
  }
  _highlightSearchTextCore($textNode, searchText) {
    var $searchTextSpan = renderer_default("<span>").addClass(this.addWidgetPrefix(SEARCH_TEXT_CLASS));
    var text = $textNode.text();
    var firstContentElement = $textNode[0];
    var stringNormalizer = this._getStringNormalizer();
    var index2 = stringNormalizer(text).indexOf(stringNormalizer(searchText));
    if (index2 >= 0) {
      if (firstContentElement.textContent) {
        firstContentElement.textContent = text.substr(0, index2);
      } else {
        firstContentElement.nodeValue = text.substr(0, index2);
      }
      $textNode.after($searchTextSpan.text(text.substr(index2, searchText.length)));
      $textNode = renderer_default(dom_adapter_default.createTextNode(text.substr(index2 + searchText.length))).insertAfter($searchTextSpan);
      return this._highlightSearchTextCore($textNode, searchText);
    }
  }
  _highlightSearchText(cellElement, isEquals, column) {
    var that = this;
    var stringNormalizer = this._getStringNormalizer();
    var searchText = that.option("searchPanel.text");
    if (isEquals && column) {
      searchText = searchText && that._getFormattedSearchText(column, searchText);
    }
    if (searchText && that.option("searchPanel.highlightSearchText")) {
      var textNodes = that._findHighlightingTextNodes(column, cellElement, searchText);
      textNodes.forEach((textNode) => {
        if (isEquals) {
          if (stringNormalizer(renderer_default(textNode).text()) === stringNormalizer(null !== searchText && void 0 !== searchText ? searchText : "")) {
            renderer_default(textNode).replaceWith(renderer_default("<span>").addClass(that.addWidgetPrefix(SEARCH_TEXT_CLASS)).text(renderer_default(textNode).text()));
          }
        } else {
          that._highlightSearchTextCore(renderer_default(textNode), searchText);
        }
      });
    }
  }
  _renderCore() {
    var deferred = super._renderCore.apply(this, arguments);
    if (this.option().rowTemplate || this.option("dataRowTemplate")) {
      if (this.option("templatesRenderAsynchronously")) {
        clearTimeout(this._highlightTimer);
        this._highlightTimer = setTimeout(() => {
          this._highlightSearchText(this.getTableElement());
        });
      } else {
        this._highlightSearchText(this.getTableElement());
      }
    }
    return deferred;
  }
  _updateCell($cell, parameters) {
    var {
      column
    } = parameters;
    var dataType = column.lookup && column.lookup.dataType || column.dataType;
    var isEquals = "string" !== dataType;
    if (allowSearch(column) && !parameters.isOnForm) {
      if (this.option("templatesRenderAsynchronously")) {
        if (!this._searchParams.length) {
          clearTimeout(this._highlightTimer);
          this._highlightTimer = setTimeout(() => {
            this._searchParams.forEach((params) => {
              this._highlightSearchText.apply(this, params);
            });
            this._searchParams = [];
          });
        }
        this._searchParams.push([$cell, isEquals, column]);
      } else {
        this._highlightSearchText($cell, isEquals, column);
      }
    }
    super._updateCell($cell, parameters);
  }
  dispose() {
    clearTimeout(this._highlightTimer);
    super.dispose();
  }
};
var searchModule = {
  defaultOptions: () => ({
    searchPanel: {
      visible: false,
      width: 160,
      placeholder: message_default.format("dxDataGrid-searchPanelPlaceholder"),
      highlightSearchText: true,
      highlightCaseSensitive: false,
      text: "",
      searchVisibleColumnsOnly: false
    }
  }),
  extenders: {
    controllers: {
      data: dataController
    },
    views: {
      headerPanel,
      rowsView
    }
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/search.js
m_core_default.registerModule("search", searchModule);

// node_modules/devextreme/esm/renovation/component_wrapper/grid_pager.js
var GridPagerWrapper = class extends ComponentWrapper {
  _optionChanged(args) {
    switch (args.name) {
      case "pageIndex":
        var pageIndexChanged = this.option("pageIndexChanged");
        if (pageIndexChanged) {
          pageIndexChanged(args.value);
        }
        break;
      case "pageSize":
        var pageSizeChanged = this.option("pageSizeChanged");
        if (pageSizeChanged) {
          pageSizeChanged(args.value);
        }
    }
    super._optionChanged(args);
  }
};

// node_modules/devextreme/esm/renovation/ui/pager/utils/get_element_width.js
function getElementStyle2(name2, element) {
  var _getElementComputedSt;
  var computedStyle = null !== (_getElementComputedSt = getElementComputedStyle2(element)) && void 0 !== _getElementComputedSt ? _getElementComputedSt : {};
  return toNumber(computedStyle[name2]);
}
function getElementContentWidth(element) {
  var padding = getElementStyle2("paddingLeft", element) + getElementStyle2("paddingRight", element);
  var width = getElementStyle2("width", element);
  return width - padding;
}
function getElementWidth2(element) {
  var margin = getElementStyle2("marginLeft", element) + getElementStyle2("marginRight", element);
  var width = getElementStyle2("width", element);
  return margin + width;
}
function getElementMinWidth(element) {
  return getElementStyle2("minWidth", element);
}

// node_modules/devextreme/esm/renovation/ui/pager/resizable_container.js
var _excluded14 = ["contentTemplate", "pagerProps"];
var viewFunction11 = (_ref) => {
  var {
    contentAttributes,
    infoTextRef,
    infoTextVisible,
    isLargeDisplayMode,
    pageSizesRef,
    pagesRef,
    parentRef,
    props: {
      contentTemplate: Content
    }
  } = _ref;
  return Content(_extends({
    rootElementRef: parentRef,
    pageSizesRef,
    infoTextRef,
    pagesRef,
    infoTextVisible,
    isLargeDisplayMode
  }, contentAttributes));
};
function calculateLargeDisplayMode(_ref2) {
  var {
    pageSizes: pageSizesWidth,
    pages: pagesWidth,
    parent: parentWidth
  } = _ref2;
  return parentWidth - (pageSizesWidth + pagesWidth) > 0;
}
function calculateInfoTextVisible(_ref3) {
  var {
    info: infoWidth,
    pageSizes: pageSizesWidth,
    pages: pagesWidth,
    parent: parentWidth
  } = _ref3;
  var minimalWidth = pageSizesWidth + pagesWidth + infoWidth;
  return parentWidth - minimalWidth > 0;
}
function getElementsWidth(_ref4) {
  var {
    info,
    pageSizes,
    pages,
    parent
  } = _ref4;
  var parentWidth = getElementContentWidth(parent);
  var pageSizesWidth = getElementWidth2(pageSizes);
  var infoWidth = getElementWidth2(info);
  var pagesHtmlWidth = getElementWidth2(pages);
  return {
    parent: parentWidth,
    pageSizes: pageSizesWidth,
    info: infoWidth + getElementStyle2("marginLeft", info) + getElementStyle2("marginRight", info),
    pages: pagesHtmlWidth
  };
}
var ResizableContainerProps = {};
var getTemplate3 = (TemplateProp) => TemplateProp && (TemplateProp.defaultProps ? (props) => normalizeProps(createComponentVNode(2, TemplateProp, _extends({}, props))) : TemplateProp);
var ResizableContainer = class extends InfernoComponent {
  constructor(props) {
    super(props);
    this.parentRef = createRef();
    this.pageSizesRef = createRef();
    this.infoTextRef = createRef();
    this.pagesRef = createRef();
    this.actualIsLargeDisplayMode = true;
    this.actualInfoTextVisible = true;
    this.state = {
      infoTextVisible: true,
      isLargeDisplayMode: true
    };
    this.subscribeToResize = this.subscribeToResize.bind(this);
    this.effectUpdateChildProps = this.effectUpdateChildProps.bind(this);
    this.updateAdaptivityProps = this.updateAdaptivityProps.bind(this);
  }
  createEffects() {
    return [new InfernoEffect(this.subscribeToResize, [this.state.infoTextVisible, this.state.isLargeDisplayMode]), new InfernoEffect(this.effectUpdateChildProps, [this.props, this.state.infoTextVisible, this.state.isLargeDisplayMode, this.props.pagerProps, this.props.contentTemplate])];
  }
  updateEffects() {
    var _this$_effects$, _this$_effects$2;
    null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.state.infoTextVisible, this.state.isLargeDisplayMode]);
    null === (_this$_effects$2 = this._effects[1]) || void 0 === _this$_effects$2 ? void 0 : _this$_effects$2.update([this.props, this.state.infoTextVisible, this.state.isLargeDisplayMode, this.props.pagerProps, this.props.contentTemplate]);
  }
  subscribeToResize() {
    var callback = () => {
      this.parentWidth > 0 && this.updateAdaptivityProps();
    };
    resize_callbacks_default.add(callback);
    return () => {
      resize_callbacks_default.remove(callback);
    };
  }
  effectUpdateChildProps() {
    if (this.parentWidth > 0) {
      this.updateAdaptivityProps();
    }
  }
  get contentAttributes() {
    var {
      className,
      displayMode,
      gridCompatibility,
      hasKnownLastPage,
      infoText,
      label,
      lightModeEnabled,
      maxPagesCount,
      onKeyDown,
      pageCount,
      pageIndex,
      pageIndexChange,
      pageSize,
      pageSizeChange,
      pageSizes,
      pagesCountText,
      pagesNavigatorVisible,
      rtlEnabled,
      showInfo,
      showNavigationButtons,
      showPageSizes,
      totalCount,
      visible: visible2
    } = this.props.pagerProps;
    return _extends({}, this.restAttributes, {
      pageSize,
      pageIndex,
      pageIndexChange,
      pageSizeChange,
      gridCompatibility,
      className,
      showInfo,
      infoText,
      lightModeEnabled,
      displayMode,
      maxPagesCount,
      pageCount,
      pagesCountText,
      visible: visible2,
      hasKnownLastPage,
      pagesNavigatorVisible,
      showPageSizes,
      pageSizes,
      rtlEnabled,
      showNavigationButtons,
      totalCount,
      onKeyDown,
      label
    });
  }
  get parentWidth() {
    return this.parentRef.current ? getElementWidth2(this.parentRef.current) : 0;
  }
  updateAdaptivityProps() {
    var currentElementsWidth = getElementsWidth({
      parent: this.parentRef.current,
      pageSizes: this.pageSizesRef.current,
      info: this.infoTextRef.current,
      pages: this.pagesRef.current
    });
    if (this.actualInfoTextVisible !== this.state.infoTextVisible || this.actualIsLargeDisplayMode !== this.state.isLargeDisplayMode) {
      return;
    }
    var isEmpty3 = !isDefined(this.elementsWidth);
    if (isEmpty3) {
      this.elementsWidth = {};
    }
    if (isEmpty3 || this.state.isLargeDisplayMode) {
      this.elementsWidth.pageSizes = currentElementsWidth.pageSizes;
      this.elementsWidth.pages = currentElementsWidth.pages;
    }
    if (isEmpty3 || this.state.infoTextVisible) {
      this.elementsWidth.info = currentElementsWidth.info;
    }
    this.actualIsLargeDisplayMode = calculateLargeDisplayMode(_extends({
      parent: currentElementsWidth.parent
    }, {
      pageSizes: this.elementsWidth.pageSizes,
      pages: this.elementsWidth.pages
    }));
    this.actualInfoTextVisible = calculateInfoTextVisible(_extends({}, currentElementsWidth, {
      info: this.elementsWidth.info
    }));
    this.setState((__state_argument) => ({
      infoTextVisible: this.actualInfoTextVisible
    }));
    this.setState((__state_argument) => ({
      isLargeDisplayMode: this.actualIsLargeDisplayMode
    }));
  }
  get restAttributes() {
    var _this$props = this.props, restProps = _objectWithoutPropertiesLoose(_this$props, _excluded14);
    return restProps;
  }
  render() {
    var props = this.props;
    return viewFunction11({
      props: _extends({}, props, {
        contentTemplate: getTemplate3(props.contentTemplate)
      }),
      infoTextVisible: this.state.infoTextVisible,
      isLargeDisplayMode: this.state.isLargeDisplayMode,
      parentRef: this.parentRef,
      pageSizesRef: this.pageSizesRef,
      infoTextRef: this.infoTextRef,
      pagesRef: this.pagesRef,
      contentAttributes: this.contentAttributes,
      parentWidth: this.parentWidth,
      updateAdaptivityProps: this.updateAdaptivityProps,
      restAttributes: this.restAttributes
    });
  }
};
ResizableContainer.defaultProps = ResizableContainerProps;

// node_modules/devextreme/esm/renovation/ui/pager/common/base_pager_props.js
var BasePagerProps = {
  gridCompatibility: true,
  showInfo: false,
  displayMode: "adaptive",
  maxPagesCount: 10,
  pageCount: 10,
  visible: true,
  hasKnownLastPage: true,
  pagesNavigatorVisible: "auto",
  showPageSizes: true,
  pageSizes: Object.freeze([5, 10]),
  showNavigationButtons: false,
  totalCount: 0,
  get label() {
    return message_default.format("dxPager-ariaLabel");
  }
};

// node_modules/devextreme/esm/renovation/ui/pager/common/pager_props.js
var PagerProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(BasePagerProps), Object.getOwnPropertyDescriptors({
  defaultPageSize: 5,
  pageSizeChange: () => {
  },
  defaultPageIndex: 1,
  pageIndexChange: () => {
  }
})));
var InternalPagerProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(BasePagerProps), Object.getOwnPropertyDescriptors({
  pageSize: 5,
  pageIndex: 1
})));

// node_modules/devextreme/esm/renovation/ui/pager/info.js
var _excluded15 = ["infoText", "pageCount", "pageIndex", "rootElementRef", "totalCount"];
var PAGER_INFO_CLASS = "dx-info";
var viewFunction12 = (_ref) => {
  var {
    props: {
      rootElementRef
    },
    text
  } = _ref;
  return createVNode(1, "div", PAGER_INFO_CLASS, text, 0, null, null, rootElementRef);
};
var InfoTextPropsType = {
  get pageIndex() {
    return InternalPagerProps.pageIndex;
  },
  get pageCount() {
    return InternalPagerProps.pageCount;
  },
  get totalCount() {
    return InternalPagerProps.totalCount;
  }
};
var InfoText = class extends BaseInfernoComponent {
  constructor(props) {
    super(props);
    this.state = {};
  }
  get infoText() {
    var _this$props$infoText;
    return (null !== (_this$props$infoText = this.props.infoText) && void 0 !== _this$props$infoText ? _this$props$infoText : "") || message_default.getFormatter("dxPager-infoText")();
  }
  get text() {
    var {
      pageCount,
      pageIndex,
      totalCount
    } = this.props;
    return format(this.infoText, (pageIndex + 1).toString(), pageCount.toString(), totalCount.toString());
  }
  get restAttributes() {
    var _this$props = this.props, restProps = _objectWithoutPropertiesLoose(_this$props, _excluded15);
    return restProps;
  }
  render() {
    var props = this.props;
    return viewFunction12({
      props: _extends({}, props),
      infoText: this.infoText,
      text: this.text,
      restAttributes: this.restAttributes
    });
  }
};
InfoText.defaultProps = InfoTextPropsType;

// node_modules/devextreme/esm/renovation/ui/pager/common/keyboard_action_context.js
var KeyboardActionContext = createContext(void 0);

// node_modules/devextreme/esm/renovation/ui/pager/common/light_button.js
var _excluded16 = ["children", "className", "label", "onClick", "selected", "tabIndex"];
var viewFunction13 = (_ref) => {
  var {
    props: {
      children,
      className,
      label,
      selected,
      tabIndex
    },
    widgetRef
  } = _ref;
  return createVNode(1, "div", className, children, 0, {
    tabIndex,
    role: "button",
    "aria-label": label,
    "aria-current": selected ? "page" : void 0
  }, null, widgetRef);
};
var LightButtonProps = {
  className: "",
  label: "",
  tabIndex: 0,
  selected: false
};
var LightButton = class extends InfernoComponent {
  constructor(props) {
    super(props);
    this.state = {};
    this.widgetRef = createRef();
    this.keyboardEffect = this.keyboardEffect.bind(this);
    this.subscribeToClick = this.subscribeToClick.bind(this);
  }
  get keyboardContext() {
    if (this.context[KeyboardActionContext.id]) {
      return this.context[KeyboardActionContext.id];
    }
    return KeyboardActionContext.defaultValue;
  }
  createEffects() {
    return [new InfernoEffect(this.keyboardEffect, [this.keyboardContext, this.props.onClick]), new InfernoEffect(this.subscribeToClick, [this.props.onClick])];
  }
  updateEffects() {
    var _this$_effects$, _this$_effects$2;
    null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.keyboardContext, this.props.onClick]);
    null === (_this$_effects$2 = this._effects[1]) || void 0 === _this$_effects$2 ? void 0 : _this$_effects$2.update([this.props.onClick]);
  }
  keyboardEffect() {
    return this.keyboardContext.registerKeyboardAction(this.widgetRef.current, this.props.onClick);
  }
  subscribeToClick() {
    return subscribeToClickEvent(this.widgetRef.current, this.props.onClick);
  }
  get restAttributes() {
    var _this$props = this.props, restProps = _objectWithoutPropertiesLoose(_this$props, _excluded16);
    return restProps;
  }
  render() {
    var props = this.props;
    return viewFunction13({
      props: _extends({}, props),
      widgetRef: this.widgetRef,
      keyboardContext: this.keyboardContext,
      restAttributes: this.restAttributes
    });
  }
};
LightButton.defaultProps = LightButtonProps;

// node_modules/devextreme/esm/renovation/ui/pager/common/consts.js
var PAGER_CLASS = "dx-pager";
var LIGHT_MODE_CLASS = "dx-light-mode";
var PAGER_PAGES_CLASS = "dx-pages";
var PAGER_PAGE_INDEXES_CLASS = "dx-page-indexes";
var PAGER_PAGE_CLASS = "dx-page";
var PAGER_SELECTION_CLASS = "dx-selection";
var PAGER_PAGE_SIZE_CLASS = "dx-page-size";
var PAGER_PAGE_SIZES_CLASS = "dx-page-sizes";
var PAGER_SELECTED_PAGE_SIZE_CLASS = "".concat(PAGER_PAGE_SIZE_CLASS, " ").concat(PAGER_SELECTION_CLASS);
var FIRST_CHILD_CLASS = "dx-first-child";

// node_modules/devextreme/esm/renovation/ui/pager/pages/page.js
var _excluded17 = ["className", "index", "onClick", "selected"];
var viewFunction14 = (_ref) => {
  var {
    className,
    label,
    props: {
      onClick,
      selected
    },
    value: value2
  } = _ref;
  return createComponentVNode(2, LightButton, {
    className,
    label,
    onClick,
    selected,
    children: value2
  });
};
var PageProps = {
  index: 0,
  selected: false,
  className: PAGER_PAGE_CLASS
};
var Page = class extends BaseInfernoComponent {
  constructor(props) {
    super(props);
    this.state = {};
  }
  get label() {
    return format(message_default.getFormatter("dxPager-page"), this.value);
  }
  get value() {
    return this.props.index + 1;
  }
  get className() {
    var {
      selected
    } = this.props;
    return combineClasses({
      ["".concat(this.props.className)]: !!this.props.className,
      [PAGER_SELECTION_CLASS]: !!selected
    });
  }
  get restAttributes() {
    var _this$props = this.props, restProps = _objectWithoutPropertiesLoose(_this$props, _excluded17);
    return restProps;
  }
  render() {
    var props = this.props;
    return viewFunction14({
      props: _extends({}, props),
      label: this.label,
      value: this.value,
      className: this.className,
      restAttributes: this.restAttributes
    });
  }
};
Page.defaultProps = PageProps;

// node_modules/devextreme/esm/renovation/ui/pager/pages/large.js
var _excluded18 = ["pageIndexes"];
var _excluded23 = ["maxPagesCount", "pageCount", "pageIndex", "pageIndexChange"];
var PAGER_PAGE_SEPARATOR_CLASS = "dx-separator";
var viewFunction15 = (_ref) => {
  var {
    pages
  } = _ref;
  var PagesMarkup = pages.map((_ref2) => {
    var {
      key,
      pageProps
    } = _ref2;
    return pageProps ? createComponentVNode(2, Page, {
      index: pageProps.index,
      selected: pageProps.selected,
      onClick: pageProps.onClick
    }, key) : createVNode(1, "div", PAGER_PAGE_SEPARATOR_CLASS, ". . .", 16, null, key);
  });
  return createFragment(PagesMarkup, 0);
};
var PAGES_LIMITER = 4;
function getDelimiterType(startIndex, slidingWindowSize, pageCount) {
  if (1 === startIndex) {
    return "high";
  }
  if (startIndex + slidingWindowSize === pageCount - 1) {
    return "low";
  }
  return "both";
}
function createPageIndexesBySlidingWindowIndexes(slidingWindowIndexes, pageCount, delimiter) {
  var pageIndexes = [];
  var indexesForReuse = [];
  switch (delimiter) {
    case "none":
      pageIndexes = [...slidingWindowIndexes];
      break;
    case "both":
      pageIndexes = [0, "low", ...slidingWindowIndexes, "high", pageCount - 1];
      indexesForReuse = slidingWindowIndexes.slice(1, -1);
      break;
    case "high":
      pageIndexes = [0, ...slidingWindowIndexes, "high", pageCount - 1];
      indexesForReuse = slidingWindowIndexes.slice(0, -1);
      break;
    case "low":
      pageIndexes = [0, "low", ...slidingWindowIndexes, pageCount - 1];
      indexesForReuse = slidingWindowIndexes.slice(1);
  }
  return {
    slidingWindowIndexes,
    indexesForReuse,
    pageIndexes
  };
}
function createPageIndexes(startIndex, slidingWindowSize, pageCount, delimiter) {
  var slidingWindowIndexes = [];
  for (var i = 0; i < slidingWindowSize; i += 1) {
    slidingWindowIndexes.push(i + startIndex);
  }
  return createPageIndexesBySlidingWindowIndexes(slidingWindowIndexes, pageCount, delimiter);
}
var PagesLargePropsType = {
  get pageIndex() {
    return InternalPagerProps.pageIndex;
  },
  get maxPagesCount() {
    return InternalPagerProps.maxPagesCount;
  },
  get pageCount() {
    return InternalPagerProps.pageCount;
  }
};
var PagesLarge = class extends BaseInfernoComponent {
  constructor(props) {
    super(props);
    this.state = {};
    this.canReuseSlidingWindow = this.canReuseSlidingWindow.bind(this);
    this.generatePageIndexes = this.generatePageIndexes.bind(this);
    this.isSlidingWindowMode = this.isSlidingWindowMode.bind(this);
    this.onPageClick = this.onPageClick.bind(this);
  }
  get config() {
    if (this.context[ConfigContext.id]) {
      return this.context[ConfigContext.id];
    }
    return ConfigContext.defaultValue;
  }
  get slidingWindowState() {
    var slidingWindowState = this.slidingWindowStateHolder;
    if (!slidingWindowState) {
      return {
        indexesForReuse: [],
        slidingWindowIndexes: []
      };
    }
    return slidingWindowState;
  }
  canReuseSlidingWindow(currentPageCount, pageIndex) {
    var {
      indexesForReuse
    } = this.slidingWindowState;
    var lastPageIsFartherThanWindow = indexesForReuse.slice(-1)[0] < currentPageCount - 1;
    var pageIndexExistInIndexes = indexesForReuse.includes(pageIndex);
    return lastPageIsFartherThanWindow && pageIndexExistInIndexes;
  }
  generatePageIndexes() {
    var {
      pageCount,
      pageIndex
    } = this.props;
    var startIndex = 0;
    var {
      slidingWindowIndexes
    } = this.slidingWindowState;
    if (pageIndex === slidingWindowIndexes[0]) {
      startIndex = pageIndex - 1;
    } else if (pageIndex === slidingWindowIndexes[slidingWindowIndexes.length - 1]) {
      startIndex = pageIndex + 2 - PAGES_LIMITER;
    } else if (pageIndex < PAGES_LIMITER) {
      startIndex = 1;
    } else if (pageIndex >= pageCount - PAGES_LIMITER) {
      startIndex = pageCount - PAGES_LIMITER - 1;
    } else {
      startIndex = pageIndex - 1;
    }
    var slidingWindowSize = PAGES_LIMITER;
    var delimiter = getDelimiterType(startIndex, slidingWindowSize, pageCount);
    var _createPageIndexes = createPageIndexes(startIndex, slidingWindowSize, pageCount, delimiter), {
      pageIndexes
    } = _createPageIndexes, slidingWindowState = _objectWithoutPropertiesLoose(_createPageIndexes, _excluded18);
    this.slidingWindowStateHolder = slidingWindowState;
    return pageIndexes;
  }
  isSlidingWindowMode() {
    var {
      maxPagesCount,
      pageCount
    } = this.props;
    return pageCount <= PAGES_LIMITER || pageCount <= maxPagesCount;
  }
  onPageClick(pageIndex) {
    this.props.pageIndexChange(pageIndex);
  }
  get pageIndexes() {
    var {
      pageCount
    } = this.props;
    if (this.isSlidingWindowMode()) {
      return createPageIndexes(0, pageCount, pageCount, "none").pageIndexes;
    }
    if (this.canReuseSlidingWindow(pageCount, this.props.pageIndex)) {
      var {
        slidingWindowIndexes
      } = this.slidingWindowState;
      var delimiter = getDelimiterType(slidingWindowIndexes[0], PAGES_LIMITER, pageCount);
      return createPageIndexesBySlidingWindowIndexes(slidingWindowIndexes, pageCount, delimiter).pageIndexes;
    }
    return this.generatePageIndexes();
  }
  get pages() {
    var _this$config;
    var {
      pageIndex
    } = this.props;
    var createPage = (index2) => {
      var pagerProps = "low" === index2 || "high" === index2 ? null : {
        index: index2,
        onClick: () => this.onPageClick(index2),
        selected: pageIndex === index2
      };
      return {
        key: index2.toString(),
        pageProps: pagerProps
      };
    };
    var rtlPageIndexes = null !== (_this$config = this.config) && void 0 !== _this$config && _this$config.rtlEnabled ? [...this.pageIndexes].reverse() : this.pageIndexes;
    return rtlPageIndexes.map((index2) => createPage(index2));
  }
  get restAttributes() {
    var _this$props = this.props, restProps = _objectWithoutPropertiesLoose(_this$props, _excluded23);
    return restProps;
  }
  render() {
    var props = this.props;
    return viewFunction15({
      props: _extends({}, props),
      config: this.config,
      pageIndexes: this.pageIndexes,
      pages: this.pages,
      restAttributes: this.restAttributes
    });
  }
};
PagesLarge.defaultProps = PagesLargePropsType;

// node_modules/devextreme/esm/renovation/ui/editors/common/editor_state_props.js
var EditorStateProps = {
  hoverStateEnabled: true,
  activeStateEnabled: true,
  get focusStateEnabled() {
    return "desktop" === devices_default.real().deviceType && !devices_default.isSimulator();
  }
};

// node_modules/devextreme/esm/renovation/ui/editors/common/editor_label_props.js
var EditorLabelProps = {
  label: "",
  get labelMode() {
    return isMaterial(current()) ? "floating" : "static";
  }
};

// node_modules/devextreme/esm/renovation/ui/editors/number_box.js
var _excluded19 = ["accessKey", "activeStateEnabled", "className", "defaultValue", "disabled", "focusStateEnabled", "height", "hint", "hoverStateEnabled", "inputAttr", "invalidValueMessage", "isDirty", "isValid", "label", "labelMode", "max", "min", "mode", "name", "onClick", "onFocusIn", "onKeyDown", "readOnly", "rtlEnabled", "showSpinButtons", "step", "tabIndex", "useLargeSpinButtons", "validationError", "validationErrors", "validationMessageMode", "validationMessagePosition", "validationStatus", "value", "valueChange", "visible", "width"];
var DEFAULT_VALUE = 0;
var viewFunction16 = (_ref) => {
  var {
    componentProps,
    restAttributes
  } = _ref;
  return normalizeProps(createComponentVNode(2, DomComponentWrapper, _extends({
    componentType: number_box_default2,
    componentProps,
    templateNames: []
  }, restAttributes)));
};
var NumberBoxProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(EditorProps), Object.getOwnPropertyDescriptors({
  defaultValue: DEFAULT_VALUE,
  isReactComponentWrapper: true
})));
var NumberBoxPropsType = {
  get defaultValue() {
    return NumberBoxProps.defaultValue;
  },
  get readOnly() {
    return NumberBoxProps.readOnly;
  },
  get name() {
    return NumberBoxProps.name;
  },
  get validationError() {
    return NumberBoxProps.validationError;
  },
  get validationErrors() {
    return NumberBoxProps.validationErrors;
  },
  get validationMessageMode() {
    return NumberBoxProps.validationMessageMode;
  },
  get validationMessagePosition() {
    return NumberBoxProps.validationMessagePosition;
  },
  get validationStatus() {
    return NumberBoxProps.validationStatus;
  },
  get isValid() {
    return NumberBoxProps.isValid;
  },
  get isDirty() {
    return NumberBoxProps.isDirty;
  },
  get inputAttr() {
    return NumberBoxProps.inputAttr;
  },
  get className() {
    return NumberBoxProps.className;
  },
  get activeStateEnabled() {
    return EditorStateProps.activeStateEnabled;
  },
  get disabled() {
    return NumberBoxProps.disabled;
  },
  get focusStateEnabled() {
    return EditorStateProps.focusStateEnabled;
  },
  get hoverStateEnabled() {
    return EditorStateProps.hoverStateEnabled;
  },
  get tabIndex() {
    return NumberBoxProps.tabIndex;
  },
  get visible() {
    return NumberBoxProps.visible;
  },
  get label() {
    return EditorLabelProps.label;
  },
  get labelMode() {
    return EditorLabelProps.labelMode;
  },
  isReactComponentWrapper: true
};
var NumberBox = class extends BaseInfernoComponent {
  constructor(props) {
    super(props);
    this.state = {
      value: void 0 !== this.props.value ? this.props.value : this.props.defaultValue
    };
  }
  get componentProps() {
    return _extends({}, this.props, {
      value: void 0 !== this.props.value ? this.props.value : this.state.value
    });
  }
  get restAttributes() {
    var _this$props$value = _extends({}, this.props, {
      value: void 0 !== this.props.value ? this.props.value : this.state.value
    }), restProps = _objectWithoutPropertiesLoose(_this$props$value, _excluded19);
    return restProps;
  }
  render() {
    var props = this.props;
    return viewFunction16({
      props: _extends({}, props, {
        value: void 0 !== this.props.value ? this.props.value : this.state.value
      }),
      componentProps: this.componentProps,
      restAttributes: this.restAttributes
    });
  }
};
NumberBox.defaultProps = NumberBoxPropsType;

// node_modules/devextreme/esm/renovation/ui/pager/utils/calculate_values_fitted_width.js
var oneDigitWidth = 10;
function calculateValuesFittedWidth(minWidth, values) {
  return minWidth + oneDigitWidth * Math.max(...values).toString().length;
}

// node_modules/devextreme/esm/renovation/ui/pager/pages/small.js
var _excluded20 = ["inputAttr", "pageCount", "pageIndex", "pageIndexChange", "pagesCountText"];
var PAGER_INFO_TEXT_CLASS = "".concat(PAGER_INFO_CLASS, "  dx-info-text");
var PAGER_PAGE_INDEX_CLASS = "dx-page-index";
var LIGHT_PAGES_CLASS = "dx-light-pages";
var PAGER_PAGES_COUNT_CLASS = "dx-pages-count";
var viewFunction17 = (_ref) => {
  var {
    pageIndexRef,
    pagesCountText,
    props: {
      inputAttr,
      pageCount
    },
    selectLastPageIndex,
    value: value2,
    valueChange,
    width
  } = _ref;
  return createVNode(1, "div", LIGHT_PAGES_CLASS, [createComponentVNode(2, NumberBox, {
    className: PAGER_PAGE_INDEX_CLASS,
    min: 1,
    max: Math.max(pageCount, value2),
    width,
    value: value2,
    valueChange,
    inputAttr
  }), createVNode(1, "span", PAGER_INFO_TEXT_CLASS, pagesCountText, 0), createComponentVNode(2, Page, {
    className: PAGER_PAGES_COUNT_CLASS,
    selected: false,
    index: pageCount - 1,
    onClick: selectLastPageIndex
  })], 4, null, null, pageIndexRef);
};
var PagerSmallProps = {
  inputAttr: Object.freeze({
    "aria-label": message_default.format("dxPager-ariaPageNumber")
  })
};
var PagerSmallPropsType = {
  get pageIndex() {
    return InternalPagerProps.pageIndex;
  },
  get pageCount() {
    return InternalPagerProps.pageCount;
  },
  get inputAttr() {
    return PagerSmallProps.inputAttr;
  }
};
var PagesSmall = class extends InfernoComponent {
  constructor(props) {
    super(props);
    this.pageIndexRef = createRef();
    this.state = {
      minWidth: 10
    };
    this.updateWidth = this.updateWidth.bind(this);
    this.selectLastPageIndex = this.selectLastPageIndex.bind(this);
    this.valueChange = this.valueChange.bind(this);
  }
  createEffects() {
    return [new InfernoEffect(this.updateWidth, [this.state.minWidth])];
  }
  updateEffects() {
    var _this$_effects$;
    null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.state.minWidth]);
  }
  updateWidth() {
    var _this$pageIndexRef$cu;
    var el = null === (_this$pageIndexRef$cu = this.pageIndexRef.current) || void 0 === _this$pageIndexRef$cu ? void 0 : _this$pageIndexRef$cu.querySelector(".".concat(PAGER_PAGE_INDEX_CLASS));
    this.setState((__state_argument) => ({
      minWidth: el && getElementMinWidth(el) || __state_argument.minWidth
    }));
  }
  get value() {
    return this.props.pageIndex + 1;
  }
  get width() {
    var {
      pageCount
    } = this.props;
    return calculateValuesFittedWidth(this.state.minWidth, [pageCount]);
  }
  get pagesCountText() {
    var _this$props$pagesCoun;
    return (null !== (_this$props$pagesCoun = this.props.pagesCountText) && void 0 !== _this$props$pagesCoun ? _this$props$pagesCoun : "") || message_default.getFormatter("dxPager-pagesCountText")();
  }
  selectLastPageIndex() {
    this.props.pageIndexChange(this.props.pageCount - 1);
  }
  valueChange(value2) {
    this.props.pageIndexChange(value2 - 1);
  }
  get restAttributes() {
    var _this$props = this.props, restProps = _objectWithoutPropertiesLoose(_this$props, _excluded20);
    return restProps;
  }
  render() {
    var props = this.props;
    return viewFunction17({
      props: _extends({}, props),
      pageIndexRef: this.pageIndexRef,
      value: this.value,
      width: this.width,
      pagesCountText: this.pagesCountText,
      selectLastPageIndex: this.selectLastPageIndex,
      valueChange: this.valueChange,
      restAttributes: this.restAttributes
    });
  }
};
PagesSmall.defaultProps = PagerSmallPropsType;

// node_modules/devextreme/esm/renovation/ui/pager/pages/page_index_selector.js
var _excluded21 = ["hasKnownLastPage", "isLargeDisplayMode", "maxPagesCount", "pageCount", "pageIndex", "pageIndexChange", "pagesCountText", "showNavigationButtons", "totalCount"];
var PAGER_NAVIGATE_BUTTON = "dx-navigate-button";
var PAGER_PREV_BUTTON_CLASS = "dx-prev-button";
var PAGER_NEXT_BUTTON_CLASS = "dx-next-button";
var PAGER_BUTTON_DISABLE_CLASS = "dx-button-disable";
var getNextButtonLabel = () => message_default.getFormatter("dxPager-nextPage")();
var getPrevButtonLabel = () => message_default.getFormatter("dxPager-prevPage")();
var classNames = {
  nextEnabledClass: "".concat(PAGER_NAVIGATE_BUTTON, " ").concat(PAGER_NEXT_BUTTON_CLASS),
  prevEnabledClass: "".concat(PAGER_NAVIGATE_BUTTON, " ").concat(PAGER_PREV_BUTTON_CLASS),
  nextDisabledClass: "".concat(PAGER_BUTTON_DISABLE_CLASS, " ").concat(PAGER_NAVIGATE_BUTTON, " ").concat(PAGER_NEXT_BUTTON_CLASS),
  prevDisabledClass: "".concat(PAGER_BUTTON_DISABLE_CLASS, " ").concat(PAGER_NAVIGATE_BUTTON, " ").concat(PAGER_PREV_BUTTON_CLASS)
};
var reverseDirections = {
  next: "prev",
  prev: "next"
};
var viewFunction18 = (_ref) => {
  var {
    nextButtonProps,
    pageIndexChange,
    prevButtonProps,
    props: {
      isLargeDisplayMode,
      maxPagesCount,
      pageCount,
      pageIndex,
      pagesCountText
    },
    renderNextButton,
    renderPrevButton
  } = _ref;
  return createFragment([renderPrevButton && createComponentVNode(2, LightButton, {
    label: getPrevButtonLabel(),
    className: prevButtonProps.className,
    tabIndex: prevButtonProps.tabIndex,
    onClick: prevButtonProps.navigate
  }), isLargeDisplayMode && createComponentVNode(2, PagesLarge, {
    maxPagesCount,
    pageCount,
    pageIndex,
    pageIndexChange
  }), !isLargeDisplayMode && createComponentVNode(2, PagesSmall, {
    pageCount,
    pageIndex,
    pageIndexChange,
    pagesCountText
  }), renderNextButton && createComponentVNode(2, LightButton, {
    label: getNextButtonLabel(),
    className: nextButtonProps.className,
    tabIndex: nextButtonProps.tabIndex,
    onClick: nextButtonProps.navigate
  })], 0);
};
function getIncrement(direction) {
  return "next" === direction ? 1 : -1;
}
var PageIndexSelectorProps = {
  isLargeDisplayMode: true
};
var PageIndexSelectorPropsType = {
  get pageIndex() {
    return InternalPagerProps.pageIndex;
  },
  get maxPagesCount() {
    return InternalPagerProps.maxPagesCount;
  },
  get pageCount() {
    return InternalPagerProps.pageCount;
  },
  get hasKnownLastPage() {
    return InternalPagerProps.hasKnownLastPage;
  },
  get showNavigationButtons() {
    return InternalPagerProps.showNavigationButtons;
  },
  get totalCount() {
    return InternalPagerProps.totalCount;
  },
  get isLargeDisplayMode() {
    return PageIndexSelectorProps.isLargeDisplayMode;
  }
};
var PageIndexSelector = class extends BaseInfernoComponent {
  constructor(props) {
    super(props);
    this.state = {};
    this.__getterCache = {};
    this.pageIndexChange = this.pageIndexChange.bind(this);
    this.getButtonProps = this.getButtonProps.bind(this);
    this.canNavigateToPage = this.canNavigateToPage.bind(this);
    this.getNextPageIndex = this.getNextPageIndex.bind(this);
    this.canNavigateTo = this.canNavigateTo.bind(this);
    this.navigateToPage = this.navigateToPage.bind(this);
  }
  get config() {
    if (this.context[ConfigContext.id]) {
      return this.context[ConfigContext.id];
    }
    return ConfigContext.defaultValue;
  }
  pageIndexChange(pageIndex) {
    if (this.canNavigateToPage(pageIndex)) {
      this.props.pageIndexChange(pageIndex);
    }
  }
  getButtonProps(direction) {
    var _this$config;
    var rtlAwareDirection = null !== (_this$config = this.config) && void 0 !== _this$config && _this$config.rtlEnabled ? reverseDirections[direction] : direction;
    var canNavigate = this.canNavigateTo(rtlAwareDirection);
    var className = classNames["".concat(direction).concat(canNavigate ? "Enabled" : "Disabled", "Class")];
    return {
      className,
      tabIndex: canNavigate ? 0 : -1,
      navigate: () => this.navigateToPage(rtlAwareDirection)
    };
  }
  canNavigateToPage(pageIndex) {
    if (!this.props.hasKnownLastPage) {
      return pageIndex >= 0;
    }
    return pageIndex >= 0 && pageIndex <= this.props.pageCount - 1;
  }
  getNextPageIndex(direction) {
    return this.props.pageIndex + getIncrement(direction);
  }
  canNavigateTo(direction) {
    return this.canNavigateToPage(this.getNextPageIndex(direction));
  }
  navigateToPage(direction) {
    this.pageIndexChange(this.getNextPageIndex(direction));
  }
  get renderPrevButton() {
    var {
      isLargeDisplayMode,
      showNavigationButtons
    } = this.props;
    return !isLargeDisplayMode || showNavigationButtons;
  }
  get renderNextButton() {
    return this.renderPrevButton || !this.props.hasKnownLastPage;
  }
  get prevButtonProps() {
    if (void 0 !== this.__getterCache.prevButtonProps) {
      return this.__getterCache.prevButtonProps;
    }
    return this.__getterCache.prevButtonProps = (() => this.getButtonProps("prev"))();
  }
  get nextButtonProps() {
    if (void 0 !== this.__getterCache.nextButtonProps) {
      return this.__getterCache.nextButtonProps;
    }
    return this.__getterCache.nextButtonProps = (() => this.getButtonProps("next"))();
  }
  get restAttributes() {
    var _this$props = this.props, restProps = _objectWithoutPropertiesLoose(_this$props, _excluded21);
    return restProps;
  }
  componentWillUpdate(nextProps, nextState, context2) {
    if (this.context[ConfigContext.id] !== context2[ConfigContext.id] || this.props.hasKnownLastPage !== nextProps.hasKnownLastPage || this.props.pageCount !== nextProps.pageCount || this.props.pageIndex !== nextProps.pageIndex || this.props.pageIndexChange !== nextProps.pageIndexChange) {
      this.__getterCache.prevButtonProps = void 0;
    }
    if (this.context[ConfigContext.id] !== context2[ConfigContext.id] || this.props.hasKnownLastPage !== nextProps.hasKnownLastPage || this.props.pageCount !== nextProps.pageCount || this.props.pageIndex !== nextProps.pageIndex || this.props.pageIndexChange !== nextProps.pageIndexChange) {
      this.__getterCache.nextButtonProps = void 0;
    }
  }
  render() {
    var props = this.props;
    return viewFunction18({
      props: _extends({}, props),
      config: this.config,
      pageIndexChange: this.pageIndexChange,
      renderPrevButton: this.renderPrevButton,
      renderNextButton: this.renderNextButton,
      prevButtonProps: this.prevButtonProps,
      nextButtonProps: this.nextButtonProps,
      restAttributes: this.restAttributes
    });
  }
};
PageIndexSelector.defaultProps = PageIndexSelectorPropsType;

// node_modules/devextreme/esm/renovation/ui/editors/drop_down_editors/select_box.js
var _excluded24 = ["accessKey", "activeStateEnabled", "className", "dataSource", "defaultValue", "disabled", "displayExpr", "focusStateEnabled", "height", "hint", "hoverStateEnabled", "inputAttr", "isDirty", "isValid", "label", "labelMode", "name", "onClick", "onFocusIn", "onKeyDown", "placeholder", "readOnly", "rtlEnabled", "searchEnabled", "tabIndex", "validationError", "validationErrors", "validationMessageMode", "validationMessagePosition", "validationStatus", "value", "valueChange", "valueExpr", "visible", "width"];
var viewFunction19 = (_ref) => {
  var {
    componentProps,
    restAttributes
  } = _ref;
  return normalizeProps(createComponentVNode(2, DomComponentWrapper, _extends({
    componentType: select_box_default,
    componentProps,
    templateNames: ["dropDownButtonTemplate", "groupTemplate", "itemTemplate"]
  }, restAttributes)));
};
var SelectBoxProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(EditorProps), Object.getOwnPropertyDescriptors({
  placeholder: "",
  hoverStateEnabled: true,
  searchEnabled: false,
  defaultValue: null,
  isReactComponentWrapper: true
})));
var SelectBoxPropsType = {
  get placeholder() {
    return SelectBoxProps.placeholder;
  },
  get hoverStateEnabled() {
    return EditorStateProps.hoverStateEnabled;
  },
  get searchEnabled() {
    return SelectBoxProps.searchEnabled;
  },
  get defaultValue() {
    return SelectBoxProps.defaultValue;
  },
  get readOnly() {
    return SelectBoxProps.readOnly;
  },
  get name() {
    return SelectBoxProps.name;
  },
  get validationError() {
    return SelectBoxProps.validationError;
  },
  get validationErrors() {
    return SelectBoxProps.validationErrors;
  },
  get validationMessageMode() {
    return SelectBoxProps.validationMessageMode;
  },
  get validationMessagePosition() {
    return SelectBoxProps.validationMessagePosition;
  },
  get validationStatus() {
    return SelectBoxProps.validationStatus;
  },
  get isValid() {
    return SelectBoxProps.isValid;
  },
  get isDirty() {
    return SelectBoxProps.isDirty;
  },
  get inputAttr() {
    return SelectBoxProps.inputAttr;
  },
  get className() {
    return SelectBoxProps.className;
  },
  get activeStateEnabled() {
    return EditorStateProps.activeStateEnabled;
  },
  get disabled() {
    return SelectBoxProps.disabled;
  },
  get focusStateEnabled() {
    return EditorStateProps.focusStateEnabled;
  },
  get tabIndex() {
    return SelectBoxProps.tabIndex;
  },
  get visible() {
    return SelectBoxProps.visible;
  },
  get label() {
    return EditorLabelProps.label;
  },
  get labelMode() {
    return EditorLabelProps.labelMode;
  },
  isReactComponentWrapper: true
};
var SelectBox2 = class extends BaseInfernoComponent {
  constructor(props) {
    super(props);
    this.state = {
      value: void 0 !== this.props.value ? this.props.value : this.props.defaultValue
    };
  }
  get componentProps() {
    return _extends({}, this.props, {
      value: void 0 !== this.props.value ? this.props.value : this.state.value
    });
  }
  get restAttributes() {
    var _this$props$value = _extends({}, this.props, {
      value: void 0 !== this.props.value ? this.props.value : this.state.value
    }), restProps = _objectWithoutPropertiesLoose(_this$props$value, _excluded24);
    return restProps;
  }
  render() {
    var props = this.props;
    return viewFunction19({
      props: _extends({}, props, {
        value: void 0 !== this.props.value ? this.props.value : this.state.value
      }),
      componentProps: this.componentProps,
      restAttributes: this.restAttributes
    });
  }
};
SelectBox2.defaultProps = SelectBoxPropsType;

// node_modules/devextreme/esm/renovation/ui/pager/page_size/small.js
var _excluded25 = ["inputAttr", "pageSize", "pageSizeChange", "pageSizes", "parentRef"];
var viewFunction20 = (_ref) => {
  var {
    props: {
      inputAttr,
      pageSize,
      pageSizeChange,
      pageSizes
    },
    width
  } = _ref;
  return createComponentVNode(2, SelectBox2, {
    displayExpr: "text",
    valueExpr: "value",
    dataSource: pageSizes,
    value: pageSize,
    valueChange: pageSizeChange,
    width,
    inputAttr
  });
};
var PageSizeSmallProps = {
  inputAttr: Object.freeze({
    "aria-label": message_default.format("dxPager-ariaPageSize")
  })
};
var PageSizeSmallPropsType = {
  get pageSize() {
    return InternalPagerProps.pageSize;
  },
  get inputAttr() {
    return PageSizeSmallProps.inputAttr;
  }
};
var PageSizeSmall = class extends InfernoComponent {
  constructor(props) {
    super(props);
    this.state = {
      minWidth: 10
    };
    this.updateWidth = this.updateWidth.bind(this);
  }
  createEffects() {
    return [new InfernoEffect(this.updateWidth, [this.props, this.state.minWidth, this.props.pageSize, this.props.pageSizeChange, this.props.pageSizes, this.props.inputAttr])];
  }
  updateEffects() {
    var _this$_effects$;
    null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.props, this.state.minWidth, this.props.pageSize, this.props.pageSizeChange, this.props.pageSizes, this.props.inputAttr]);
  }
  updateWidth() {
    this.setState((__state_argument) => ({
      minWidth: getElementMinWidth(this.props.parentRef.current) || __state_argument.minWidth
    }));
  }
  get width() {
    return calculateValuesFittedWidth(this.state.minWidth, this.props.pageSizes.map((p2) => p2.value));
  }
  get restAttributes() {
    var _this$props = this.props, restProps = _objectWithoutPropertiesLoose(_this$props, _excluded25);
    return restProps;
  }
  render() {
    var props = this.props;
    return viewFunction20({
      props: _extends({}, props),
      width: this.width,
      restAttributes: this.restAttributes
    });
  }
};
PageSizeSmall.defaultProps = PageSizeSmallPropsType;

// node_modules/devextreme/esm/renovation/ui/pager/page_size/large.js
var _excluded26 = ["pageSize", "pageSizeChange", "pageSizes"];
var viewFunction21 = (_ref) => {
  var {
    pageSizesText
  } = _ref;
  return createFragment(pageSizesText.map((_ref2) => {
    var {
      className,
      click: click2,
      label,
      text
    } = _ref2;
    return createComponentVNode(2, LightButton, {
      className,
      label,
      onClick: click2,
      children: text
    }, text);
  }), 0);
};
var PageSizeLargePropsType = {
  get pageSize() {
    return InternalPagerProps.pageSize;
  }
};
var PageSizeLarge = class extends BaseInfernoComponent {
  constructor(props) {
    super(props);
    this.state = {};
    this.__getterCache = {};
    this.onPageSizeChange = this.onPageSizeChange.bind(this);
  }
  get pageSizesText() {
    if (void 0 !== this.__getterCache.pageSizesText) {
      return this.__getterCache.pageSizesText;
    }
    return this.__getterCache.pageSizesText = (() => {
      var {
        pageSize,
        pageSizes
      } = this.props;
      return pageSizes.map((_ref3, index2) => {
        var {
          text,
          value: processedPageSize
        } = _ref3;
        var selected = processedPageSize === pageSize;
        var className = combineClasses({
          [selected ? PAGER_SELECTED_PAGE_SIZE_CLASS : PAGER_PAGE_SIZE_CLASS]: true,
          [FIRST_CHILD_CLASS]: 0 === index2
        });
        return {
          className,
          click: this.onPageSizeChange(processedPageSize),
          label: format(message_default.getFormatter("dxPager-pageSize"), processedPageSize || message_default.getFormatter("dxPager-pageSizesAllText")),
          text
        };
      });
    })();
  }
  onPageSizeChange(processedPageSize) {
    return () => {
      this.props.pageSizeChange(processedPageSize);
      return this.props.pageSize;
    };
  }
  get restAttributes() {
    var _this$props = this.props, restProps = _objectWithoutPropertiesLoose(_this$props, _excluded26);
    return restProps;
  }
  componentWillUpdate(nextProps, nextState, context2) {
    if (this.props.pageSize !== nextProps.pageSize || this.props.pageSizes !== nextProps.pageSizes || this.props.pageSizeChange !== nextProps.pageSizeChange) {
      this.__getterCache.pageSizesText = void 0;
    }
  }
  render() {
    var props = this.props;
    return viewFunction21({
      props: _extends({}, props),
      pageSizesText: this.pageSizesText,
      restAttributes: this.restAttributes
    });
  }
};
PageSizeLarge.defaultProps = PageSizeLargePropsType;

// node_modules/devextreme/esm/renovation/ui/pager/page_size/selector.js
var _excluded27 = ["isLargeDisplayMode", "pageSize", "pageSizeChange", "pageSizes", "rootElementRef"];
var viewFunction22 = (_ref) => {
  var {
    htmlRef,
    normalizedPageSizes,
    props: {
      isLargeDisplayMode,
      pageSize,
      pageSizeChange
    }
  } = _ref;
  return createVNode(1, "div", PAGER_PAGE_SIZES_CLASS, [isLargeDisplayMode && createComponentVNode(2, PageSizeLarge, {
    pageSizes: normalizedPageSizes,
    pageSize,
    pageSizeChange
  }), !isLargeDisplayMode && createComponentVNode(2, PageSizeSmall, {
    parentRef: htmlRef,
    pageSizes: normalizedPageSizes,
    pageSize,
    pageSizeChange
  })], 0, null, null, htmlRef);
};
function getAllText() {
  return message_default.getFormatter("dxPager-pageSizesAllText")();
}
var PageSizeSelectorProps = {
  isLargeDisplayMode: true
};
var PageSizeSelectorPropsType = {
  get pageSize() {
    return InternalPagerProps.pageSize;
  },
  get pageSizes() {
    return InternalPagerProps.pageSizes;
  },
  get isLargeDisplayMode() {
    return PageSizeSelectorProps.isLargeDisplayMode;
  }
};
var PageSizeSelector = class extends InfernoComponent {
  constructor(props) {
    super(props);
    this.state = {};
    this.htmlRef = createRef();
    this.__getterCache = {};
    this.setRootElementRef = this.setRootElementRef.bind(this);
  }
  createEffects() {
    return [new InfernoEffect(this.setRootElementRef, [])];
  }
  setRootElementRef() {
    var {
      rootElementRef
    } = this.props;
    if (rootElementRef) {
      rootElementRef.current = this.htmlRef.current;
    }
  }
  get normalizedPageSizes() {
    if (void 0 !== this.__getterCache.normalizedPageSizes) {
      return this.__getterCache.normalizedPageSizes;
    }
    return this.__getterCache.normalizedPageSizes = (() => {
      var {
        pageSizes
      } = this.props;
      return pageSizes.map((p2) => "all" === p2 || 0 === p2 ? {
        text: getAllText(),
        value: 0
      } : {
        text: String(p2),
        value: p2
      });
    })();
  }
  get restAttributes() {
    var _this$props = this.props, restProps = _objectWithoutPropertiesLoose(_this$props, _excluded27);
    return restProps;
  }
  componentWillUpdate(nextProps, nextState, context2) {
    super.componentWillUpdate();
    if (this.props.pageSizes !== nextProps.pageSizes) {
      this.__getterCache.normalizedPageSizes = void 0;
    }
  }
  render() {
    var props = this.props;
    return viewFunction22({
      props: _extends({}, props),
      htmlRef: this.htmlRef,
      normalizedPageSizes: this.normalizedPageSizes,
      restAttributes: this.restAttributes
    });
  }
};
PageSizeSelector.defaultProps = PageSizeSelectorPropsType;

// node_modules/devextreme/esm/renovation/ui/pager/content.js
var _excluded28 = ["className", "displayMode", "gridCompatibility", "hasKnownLastPage", "infoText", "infoTextRef", "infoTextVisible", "isLargeDisplayMode", "label", "lightModeEnabled", "maxPagesCount", "onKeyDown", "pageCount", "pageIndex", "pageIndexChange", "pageSize", "pageSizeChange", "pageSizes", "pageSizesRef", "pagesCountText", "pagesNavigatorVisible", "pagesRef", "rootElementRef", "rtlEnabled", "showInfo", "showNavigationButtons", "showPageSizes", "totalCount", "visible"];
var viewFunction23 = (_ref) => {
  var {
    aria,
    classes,
    infoVisible,
    isLargeDisplayMode,
    pageIndexSelectorVisible,
    pagesContainerVisibility,
    pagesContainerVisible,
    props: {
      hasKnownLastPage,
      infoText,
      infoTextRef,
      maxPagesCount,
      pageCount,
      pageIndex,
      pageIndexChange,
      pageSize,
      pageSizeChange,
      pageSizes,
      pageSizesRef,
      pagesCountText,
      pagesRef,
      rtlEnabled,
      showNavigationButtons,
      showPageSizes,
      totalCount,
      visible: visible2
    },
    restAttributes,
    widgetRootElementRef
  } = _ref;
  return normalizeProps(createComponentVNode(2, Widget2, _extends({
    rootElementRef: widgetRootElementRef,
    rtlEnabled,
    classes,
    visible: visible2,
    aria
  }, restAttributes, {
    children: [showPageSizes && createComponentVNode(2, PageSizeSelector, {
      rootElementRef: pageSizesRef,
      isLargeDisplayMode,
      pageSize,
      pageSizeChange,
      pageSizes
    }), pagesContainerVisible && createVNode(1, "div", PAGER_PAGES_CLASS, [infoVisible && createComponentVNode(2, InfoText, {
      rootElementRef: infoTextRef,
      infoText,
      pageCount,
      pageIndex,
      totalCount
    }), pageIndexSelectorVisible && createVNode(1, "div", PAGER_PAGE_INDEXES_CLASS, createComponentVNode(2, PageIndexSelector, {
      hasKnownLastPage,
      isLargeDisplayMode,
      maxPagesCount,
      pageCount,
      pageIndex,
      pageIndexChange,
      pagesCountText,
      showNavigationButtons,
      totalCount
    }), 2, null, null, pagesRef)], 0, {
      style: normalizeStyles({
        visibility: pagesContainerVisibility
      })
    })]
  })));
};
var PagerContentProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(InternalPagerProps), Object.getOwnPropertyDescriptors({
  infoTextVisible: true,
  isLargeDisplayMode: true
})));
var PagerContent = class extends InfernoComponent {
  constructor(props) {
    super(props);
    this.state = {};
    this.widgetRootElementRef = createRef();
    this.__getterCache = {};
    this.setRootElementRef = this.setRootElementRef.bind(this);
    this.createFakeInstance = this.createFakeInstance.bind(this);
  }
  createEffects() {
    return [new InfernoEffect(this.setRootElementRef, [])];
  }
  getChildContext() {
    return _extends({}, this.context, {
      [KeyboardActionContext.id]: this.keyboardAction || KeyboardActionContext.defaultValue
    });
  }
  setRootElementRef() {
    var {
      rootElementRef
    } = this.props;
    if (rootElementRef) {
      rootElementRef.current = this.widgetRootElementRef.current;
    }
  }
  createFakeInstance() {
    return {
      option: () => false,
      element: () => this.widgetRootElementRef.current,
      _createActionByOption: () => (e) => {
        var _this$props$onKeyDown, _this$props;
        null === (_this$props$onKeyDown = (_this$props = this.props).onKeyDown) || void 0 === _this$props$onKeyDown ? void 0 : _this$props$onKeyDown.call(_this$props, e);
      }
    };
  }
  get keyboardAction() {
    if (void 0 !== this.__getterCache.keyboardAction) {
      return this.__getterCache.keyboardAction;
    }
    return this.__getterCache.keyboardAction = /* @__PURE__ */ (() => ({
      registerKeyboardAction: (element, action) => {
        var fakePagerInstance = this.createFakeInstance();
        return registerKeyboardAction("pager", fakePagerInstance, element, void 0, action);
      }
    }))();
  }
  get infoVisible() {
    var {
      infoTextVisible,
      showInfo
    } = this.props;
    return showInfo && infoTextVisible;
  }
  get pageIndexSelectorVisible() {
    return 0 !== this.props.pageSize;
  }
  get normalizedDisplayMode() {
    var {
      displayMode,
      lightModeEnabled
    } = this.props;
    if ("adaptive" === displayMode && void 0 !== lightModeEnabled) {
      return lightModeEnabled ? "compact" : "full";
    }
    return displayMode;
  }
  get pagesContainerVisible() {
    return !!this.props.pagesNavigatorVisible && this.props.pageCount > 0;
  }
  get pagesContainerVisibility() {
    if ("auto" === this.props.pagesNavigatorVisible && 1 === this.props.pageCount && this.props.hasKnownLastPage) {
      return "hidden";
    }
    return;
  }
  get isLargeDisplayMode() {
    var displayMode = this.normalizedDisplayMode;
    var result2 = false;
    if ("adaptive" === displayMode) {
      result2 = this.props.isLargeDisplayMode;
    } else {
      result2 = "full" === displayMode;
    }
    return result2;
  }
  get classes() {
    var classesMap = {
      ["".concat(this.props.className)]: !!this.props.className,
      [PAGER_CLASS]: true,
      [LIGHT_MODE_CLASS]: !this.isLargeDisplayMode
    };
    return combineClasses(classesMap);
  }
  get aria() {
    return {
      role: "navigation",
      label: this.props.label
    };
  }
  get restAttributes() {
    var _this$props2 = this.props, restProps = _objectWithoutPropertiesLoose(_this$props2, _excluded28);
    return restProps;
  }
  componentWillUpdate(nextProps, nextState, context2) {
    super.componentWillUpdate();
    if (this.props.onKeyDown !== nextProps.onKeyDown) {
      this.__getterCache.keyboardAction = void 0;
    }
  }
  render() {
    var props = this.props;
    return viewFunction23({
      props: _extends({}, props),
      widgetRootElementRef: this.widgetRootElementRef,
      keyboardAction: this.keyboardAction,
      infoVisible: this.infoVisible,
      pageIndexSelectorVisible: this.pageIndexSelectorVisible,
      pagesContainerVisible: this.pagesContainerVisible,
      pagesContainerVisibility: this.pagesContainerVisibility,
      isLargeDisplayMode: this.isLargeDisplayMode,
      classes: this.classes,
      aria: this.aria,
      restAttributes: this.restAttributes
    });
  }
};
PagerContent.defaultProps = PagerContentProps;

// node_modules/devextreme/esm/renovation/ui/pager/pager.js
var _excluded29 = ["className", "defaultPageIndex", "defaultPageSize", "displayMode", "gridCompatibility", "hasKnownLastPage", "infoText", "label", "lightModeEnabled", "maxPagesCount", "onKeyDown", "pageCount", "pageIndex", "pageIndexChange", "pageSize", "pageSizeChange", "pageSizes", "pagesCountText", "pagesNavigatorVisible", "rtlEnabled", "showInfo", "showNavigationButtons", "showPageSizes", "totalCount", "visible"];
var viewFunction24 = (_ref) => {
  var {
    pagerProps,
    restAttributes
  } = _ref;
  return normalizeProps(createComponentVNode(2, ResizableContainer, _extends({
    contentTemplate: PagerContent,
    pagerProps
  }, restAttributes)));
};
var Pager = class extends InfernoWrapperComponent {
  constructor(props) {
    super(props);
    this.__getterCache = {};
    this.state = {
      pageSize: void 0 !== this.props.pageSize ? this.props.pageSize : this.props.defaultPageSize,
      pageIndex: void 0 !== this.props.pageIndex ? this.props.pageIndex : this.props.defaultPageIndex
    };
    this.pageIndexChange = this.pageIndexChange.bind(this);
    this.pageSizeChange = this.pageSizeChange.bind(this);
  }
  createEffects() {
    return [createReRenderEffect()];
  }
  pageIndexChange(newPageIndex) {
    if (this.props.gridCompatibility) {
      var __newValue;
      this.setState((__state_argument) => {
        __newValue = newPageIndex + 1;
        return {
          pageIndex: __newValue
        };
      });
      this.props.pageIndexChange(__newValue);
    } else {
      var _newValue;
      this.setState((__state_argument) => {
        _newValue = newPageIndex;
        return {
          pageIndex: _newValue
        };
      });
      this.props.pageIndexChange(_newValue);
    }
  }
  get pageIndex() {
    if (this.props.gridCompatibility) {
      return (void 0 !== this.props.pageIndex ? this.props.pageIndex : this.state.pageIndex) - 1;
    }
    return void 0 !== this.props.pageIndex ? this.props.pageIndex : this.state.pageIndex;
  }
  pageSizeChange(newPageSize) {
    var __newValue;
    this.setState((__state_argument) => {
      __newValue = newPageSize;
      return {
        pageSize: __newValue
      };
    });
    this.props.pageSizeChange(__newValue);
  }
  get className() {
    if (this.props.gridCompatibility) {
      return combineClasses({
        "dx-datagrid-pager": true,
        ["".concat(this.props.className)]: !!this.props.className
      });
    }
    return this.props.className;
  }
  get pagerProps() {
    if (void 0 !== this.__getterCache.pagerProps) {
      return this.__getterCache.pagerProps;
    }
    return this.__getterCache.pagerProps = (() => _extends({}, _extends({}, this.props, {
      pageSize: void 0 !== this.props.pageSize ? this.props.pageSize : this.state.pageSize,
      pageIndex: void 0 !== this.props.pageIndex ? this.props.pageIndex : this.state.pageIndex
    }), {
      className: this.className,
      pageIndex: this.pageIndex,
      pageIndexChange: (pageIndex) => this.pageIndexChange(pageIndex),
      pageSizeChange: (pageSize) => this.pageSizeChange(pageSize)
    }))();
  }
  get restAttributes() {
    var _this$props$pageSize$ = _extends({}, this.props, {
      pageSize: void 0 !== this.props.pageSize ? this.props.pageSize : this.state.pageSize,
      pageIndex: void 0 !== this.props.pageIndex ? this.props.pageIndex : this.state.pageIndex
    }), restProps = _objectWithoutPropertiesLoose(_this$props$pageSize$, _excluded29);
    return restProps;
  }
  componentWillUpdate(nextProps, nextState, context2) {
    super.componentWillUpdate();
    if (this.props !== nextProps || this.props.gridCompatibility !== nextProps.gridCompatibility || this.props.className !== nextProps.className || this.state.pageIndex !== nextState.pageIndex || this.props.pageIndex !== nextProps.pageIndex || this.props.pageIndexChange !== nextProps.pageIndexChange || this.props.pageSizeChange !== nextProps.pageSizeChange) {
      this.__getterCache.pagerProps = void 0;
    }
  }
  render() {
    var props = this.props;
    return viewFunction24({
      props: _extends({}, props, {
        pageSize: void 0 !== this.props.pageSize ? this.props.pageSize : this.state.pageSize,
        pageIndex: void 0 !== this.props.pageIndex ? this.props.pageIndex : this.state.pageIndex
      }),
      pageIndexChange: this.pageIndexChange,
      pageIndex: this.pageIndex,
      pageSizeChange: this.pageSizeChange,
      className: this.className,
      pagerProps: this.pagerProps,
      restAttributes: this.restAttributes
    });
  }
};
Pager.defaultProps = PagerProps;

// node_modules/devextreme/esm/renovation/ui/pager/pager.j.js
var Pager2 = class extends GridPagerWrapper {
  getProps() {
    var props = super.getProps();
    props.onKeyDown = this._wrapKeyDownHandler(props.onKeyDown);
    return props;
  }
  get _propsInfo() {
    return {
      twoWay: [
        ["pageSize", "defaultPageSize", "pageSizeChange"],
        ["pageIndex", "defaultPageIndex", "pageIndexChange"]
      ],
      allowNull: [],
      elements: [],
      templates: [],
      props: ["defaultPageSize", "pageSizeChange", "defaultPageIndex", "pageIndexChange", "gridCompatibility", "className", "showInfo", "infoText", "lightModeEnabled", "displayMode", "maxPagesCount", "pageCount", "pagesCountText", "visible", "hasKnownLastPage", "pagesNavigatorVisible", "showPageSizes", "pageSizes", "rtlEnabled", "showNavigationButtons", "totalCount", "label", "onKeyDown", "pageSize", "pageIndex"]
    };
  }
  get _viewComponent() {
    return Pager;
  }
};
component_registrator_default("dxPager", Pager2);

// node_modules/devextreme/esm/ui/pager.js
var pager_default = Pager2;

// node_modules/devextreme/esm/__internal/grids/grid_core/pager/m_pager.js
var PAGER_CLASS2 = "pager";
var MAX_PAGES_COUNT = 10;
var getPageIndex = function(dataController2) {
  return 1 + (parseInt(dataController2.pageIndex()) || 0);
};
var PagerView = m_modules_default.View.inherit({
  init() {
    var dataController2 = this.getController("data");
    dataController2.changed.add((e) => {
      if (e && e.repaintChangesOnly) {
        var pager = this._pager;
        if (pager) {
          pager.option({
            pageIndex: getPageIndex(dataController2),
            pageSize: dataController2.pageSize(),
            pageCount: dataController2.pageCount(),
            totalCount: dataController2.totalCount(),
            hasKnownLastPage: dataController2.hasKnownLastPage()
          });
        } else {
          this.render();
        }
      } else if (!e || "update" !== e.changeType && "updateSelection" !== e.changeType && "updateFocusedRow" !== e.changeType) {
        this._pager = null;
        this.render();
      }
    });
  },
  _renderCore() {
    var $element = this.element().addClass(this.addWidgetPrefix(PAGER_CLASS2));
    var pagerOptions = this.option("pager") || {};
    var dataController2 = this.getController("data");
    var keyboardController = this.getController("keyboardNavigation");
    var options2 = {
      maxPagesCount: MAX_PAGES_COUNT,
      pageIndex: getPageIndex(dataController2),
      pageCount: dataController2.pageCount(),
      pageSize: dataController2.pageSize(),
      showPageSizes: pagerOptions.showPageSizeSelector,
      showInfo: pagerOptions.showInfo,
      displayMode: pagerOptions.displayMode,
      pagesNavigatorVisible: pagerOptions.visible,
      showNavigationButtons: pagerOptions.showNavigationButtons,
      label: pagerOptions.label,
      pageSizes: this.getPageSizes(),
      totalCount: dataController2.totalCount(),
      hasKnownLastPage: dataController2.hasKnownLastPage(),
      pageIndexChanged(pageIndex) {
        if (dataController2.pageIndex() !== pageIndex - 1) {
          dataController2.pageIndex(pageIndex - 1);
        }
      },
      pageSizeChanged(pageSize) {
        dataController2.pageSize(pageSize);
      },
      onKeyDown: (e) => keyboardController && keyboardController.executeAction("onKeyDown", e),
      useLegacyKeyboardNavigation: this.option("useLegacyKeyboardNavigation"),
      useKeyboard: this.option("keyboardNavigation.enabled")
    };
    if (isDefined(pagerOptions.infoText)) {
      options2.infoText = pagerOptions.infoText;
    }
    if (this._pager) {
      this._pager.repaint();
      return;
    }
    if (hasWindow()) {
      this._pager = this._createComponent($element, pager_default, options2);
    } else {
      $element.addClass("dx-pager").html('<div class="dx-pages"><div class="dx-page"></div></div>');
    }
  },
  getPager() {
    return this._pager;
  },
  getPageSizes() {
    var dataController2 = this.getController("data");
    var pagerOptions = this.option("pager");
    var allowedPageSizes = pagerOptions && pagerOptions.allowedPageSizes;
    var pageSize = dataController2.pageSize();
    if (!isDefined(this._pageSizes) || !this._pageSizes.includes(pageSize)) {
      this._pageSizes = [];
      if (pagerOptions) {
        if (Array.isArray(allowedPageSizes)) {
          this._pageSizes = allowedPageSizes;
        } else if (allowedPageSizes && pageSize > 1) {
          this._pageSizes = [Math.floor(pageSize / 2), pageSize, 2 * pageSize];
        }
      }
    }
    return this._pageSizes;
  },
  isVisible() {
    var dataController2 = this.getController("data");
    var pagerOptions = this.option("pager");
    var pagerVisible = pagerOptions && pagerOptions.visible;
    var scrolling = this.option("scrolling");
    if ("auto" === pagerVisible) {
      if (scrolling && ("virtual" === scrolling.mode || "infinite" === scrolling.mode)) {
        pagerVisible = false;
      } else {
        pagerVisible = dataController2.pageCount() > 1 || dataController2.isLoaded() && !dataController2.hasKnownLastPage();
      }
    }
    return pagerVisible;
  },
  getHeight() {
    return this.getElementHeight();
  },
  optionChanged(args) {
    var {
      name: name2
    } = args;
    var isPager = "pager" === name2;
    var isPaging = "paging" === name2;
    var isDataSource = "dataSource" === name2;
    var isScrolling = "scrolling" === name2;
    var dataController2 = this.getController("data");
    if (isPager || isPaging || isScrolling || isDataSource) {
      args.handled = true;
      if (dataController2.skipProcessingPagingChange(args.fullName)) {
        return;
      }
      if (isPager || isPaging) {
        this._pageSizes = null;
      }
      if (!isDataSource) {
        this._pager = null;
        this._invalidate();
        if (hasWindow() && isPager && this.component) {
          this.component.resize();
        }
      }
    }
  },
  dispose() {
    this._pager = null;
  }
});
var pagerModule = {
  defaultOptions: () => ({
    pager: {
      visible: "auto",
      showPageSizeSelector: false,
      allowedPageSizes: "auto",
      label: message_default.format("dxPager-ariaLabel")
    }
  }),
  views: {
    pagerView: PagerView
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/pager.js
m_core_default.registerModule("pager", pagerModule);

// node_modules/devextreme/esm/__internal/grids/grid_core/columns_resizing_reordering/m_columns_resizing_reordering.js
var COLUMNS_SEPARATOR_CLASS = "columns-separator";
var COLUMNS_SEPARATOR_TRANSPARENT = "columns-separator-transparent";
var DRAGGING_HEADER_CLASS = "drag-header";
var CELL_CONTENT_CLASS2 = "text-content";
var HEADERS_DRAG_ACTION_CLASS = "drag-action";
var TRACKER_CLASS = "tracker";
var HEADERS_DROP_HIGHLIGHT_CLASS = "drop-highlight";
var BLOCK_SEPARATOR_CLASS = "dx-block-separator";
var HEADER_ROW_CLASS2 = "dx-header-row";
var WIDGET_CLASS4 = "dx-widget";
var DRAGGING_COMMAND_CELL_CLASS = "dx-drag-command-cell";
var MODULE_NAMESPACE2 = "dxDataGridResizingReordering";
var COLUMNS_SEPARATOR_TOUCH_TRACKER_WIDTH = 10;
var DRAGGING_DELTA = 5;
var COLUMN_OPACITY = 0.5;
var allowResizing = function(that) {
  return that.option("allowColumnResizing") || that.getController("columns").isColumnOptionUsed("allowResizing");
};
var allowReordering = function(that) {
  return that.option("allowColumnReordering") || that.getController("columns").isColumnOptionUsed("allowReordering");
};
var TrackerView = class extends m_modules_default.View {
  _renderCore() {
    var deferred = super._renderCore();
    this.element().addClass(this.addWidgetPrefix(TRACKER_CLASS));
    this.hide();
    return deferred;
  }
  _unsubscribeFromCallback() {
    if (this._positionChanged) {
      this._tablePositionController.positionChanged.remove(this._positionChanged);
    }
  }
  _subscribeToCallback() {
    var that = this;
    that._positionChanged = function(position3) {
      var $element = that.element();
      if ($element && $element.hasClass(that.addWidgetPrefix(TRACKER_CLASS))) {
        $element.css({
          top: position3.top
        });
        setHeight2($element, position3.height);
      }
    };
    this._tablePositionController.positionChanged.add(that._positionChanged);
  }
  optionChanged(args) {
    if ("allowColumnResizing" === args.name) {
      this._unsubscribeFromCallback();
      if (args.value) {
        this._subscribeToCallback();
        this._invalidate();
      }
    }
    super.optionChanged(args);
  }
  init() {
    super.init();
    this._tablePositionController = this.getController("tablePosition");
    this._subscribeToCallback();
  }
  isVisible() {
    return allowResizing(this);
  }
  show() {
    this.element().show();
  }
  hide() {
    this.element() && this.element().hide();
  }
  setHeight(value2) {
    setHeight2(this.element(), value2);
  }
  dispose() {
    this._unsubscribeFromCallback();
    super.dispose();
  }
};
var SeparatorView = class extends m_modules_default.View {
  _renderSeparator() {
  }
  _renderCore(options2) {
    var deferred = super._renderCore(options2);
    this._isShown = true;
    this._renderSeparator();
    this.hide();
    return deferred;
  }
  show() {
    this._isShown = true;
  }
  hide() {
    this._isShown = false;
  }
  height(value2) {
    var $element = this.element();
    if ($element) {
      if (isDefined(value2)) {
        setHeight2($element, value2);
      } else {
        return getHeight($element);
      }
    }
  }
  width(value2) {
    var $element = this.element();
    if ($element) {
      if (isDefined(value2)) {
        setWidth2($element, value2);
      } else {
        return getWidth($element);
      }
    }
  }
};
var ColumnsSeparatorView = class extends SeparatorView {
  _renderSeparator() {
    super._renderSeparator();
    var $element = this.element();
    $element.addClass(this.addWidgetPrefix(COLUMNS_SEPARATOR_CLASS));
  }
  _subscribeToCallback() {
    var that = this;
    var $element;
    that._positionChanged = function(position3) {
      $element = that.element();
      if ($element) {
        $element.css({
          top: position3.top
        });
        setHeight2($element, position3.height);
      }
    };
    that._tablePositionController.positionChanged.add(that._positionChanged);
  }
  _unsubscribeFromCallback() {
    this._positionChanged && this._tablePositionController.positionChanged.remove(this._positionChanged);
  }
  _init() {
    this._isTransparent = allowResizing(this);
    if (this.isVisible()) {
      this._subscribeToCallback();
    }
  }
  isVisible() {
    return this.option("showColumnHeaders") && (allowReordering(this) || allowResizing(this));
  }
  optionChanged(args) {
    if ("allowColumnResizing" === args.name) {
      if (args.value) {
        this._init();
        this._invalidate();
        this.hide(true);
      } else {
        this._unsubscribeFromCallback();
        this._isTransparent = allowResizing(this);
        this.hide(true);
      }
    }
    super.optionChanged(args);
  }
  init() {
    super.init();
    this._tablePositionController = this.getController("tablePosition");
    this._init();
  }
  show() {
    var $element = this.element();
    if ($element && !this._isShown) {
      if (this._isTransparent) {
        $element.removeClass(this.addWidgetPrefix(COLUMNS_SEPARATOR_TRANSPARENT));
      } else {
        $element.show();
      }
    }
    super.show();
  }
  hide(force) {
    var $element = this.element();
    var columnsSeparatorTransparent = this.addWidgetPrefix(COLUMNS_SEPARATOR_TRANSPARENT);
    if ($element && (this._isShown || force)) {
      if (this._isTransparent) {
        $element.addClass(columnsSeparatorTransparent);
        $element.css("left", "");
        $element.show();
      } else {
        if ($element.hasClass(columnsSeparatorTransparent)) {
          $element.removeClass(columnsSeparatorTransparent);
        }
        $element.hide();
      }
    }
    super.hide();
  }
  moveByX(outerX) {
    var $element = this.element();
    if ($element) {
      $element.css("left", null === outerX ? 0 : outerX - this._parentElement().offset().left);
    }
  }
  changeCursor(cursorName) {
    cursorName = isDefined(cursorName) ? cursorName : "";
    var $element = this.element();
    if ($element) {
      $element.css("cursor", cursorName);
    }
  }
  dispose() {
    this._unsubscribeFromCallback();
    super.dispose();
  }
};
var BlockSeparatorView = class extends SeparatorView {
  init() {
    var that = this;
    super.init();
    this.getController("data").loadingChanged.add((isLoading) => {
      if (!isLoading) {
        that.hide();
      }
    });
  }
  _renderSeparator() {
    super._renderSeparator();
    this.element().addClass(BLOCK_SEPARATOR_CLASS).html("&nbsp;");
  }
  hide() {
    var $parent = this._parentElement();
    var $element = this.element();
    if ($element && this._isShown) {
      $element.css("display", "none");
    }
    if ($parent && !$parent.children(".".concat(BLOCK_SEPARATOR_CLASS)).length) {
      $parent.prepend(this.element());
    }
    super.hide();
  }
  isVisible() {
    var groupPanelOptions = this.option("groupPanel");
    var columnChooserOptions = this.option("columnChooser");
    return groupPanelOptions && groupPanelOptions.visible || columnChooserOptions && columnChooserOptions.enabled;
  }
  show(targetLocation) {
    var $element = this.element();
    if ($element && !this._isShown) {
      switch (targetLocation) {
        case "group":
          this.element().css("display", "block");
          break;
        case "columnChooser":
          !function(toOptions) {
            fx_default.stop($element, true);
            fx_default.animate($element, {
              type: "slide",
              from: {
                width: 0,
                display: toOptions.display
              },
              to: toOptions,
              duration: 300,
              easing: "swing"
            });
          }({
            width: "100%",
            display: "block"
          });
          break;
        default:
          $element.css("display", "");
      }
    }
    super.show();
  }
};
var DraggingHeaderView = class extends m_modules_default.View {
  isDragging() {
    return this._isDragging;
  }
  _getDraggingPanelByPos(pos) {
    var result2;
    each(this._dragOptions.draggingPanels, (index2, draggingPanel) => {
      if (draggingPanel) {
        var boundingRect = draggingPanel.getBoundingRect();
        if (boundingRect && (void 0 === boundingRect.bottom || pos.y < boundingRect.bottom) && (void 0 === boundingRect.top || pos.y > boundingRect.top) && (void 0 === boundingRect.left || pos.x > boundingRect.left) && (void 0 === boundingRect.right || pos.x < boundingRect.right)) {
          result2 = draggingPanel;
          return false;
        }
      }
      return;
    });
    return result2;
  }
  _renderCore() {
    this.element().addClass("".concat(this.addWidgetPrefix(DRAGGING_HEADER_CLASS), " ").concat(this.addWidgetPrefix(CELL_CONTENT_CLASS2), " ").concat(WIDGET_CLASS4)).hide();
  }
  _resetTargetColumnOptions() {
    var params = this._dropOptions;
    params.targetColumnIndex = -1;
    delete params.targetColumnElement;
    delete params.isLast;
    delete params.posX;
    delete params.posY;
  }
  _getVisibleIndexObject(rowIndex, visibleIndex) {
    if (isDefined(rowIndex)) {
      return {
        columnIndex: visibleIndex,
        rowIndex
      };
    }
    return visibleIndex;
  }
  dispose() {
    var element = this.element();
    this._dragOptions = null;
    element && element.parent().find(".".concat(this.addWidgetPrefix(DRAGGING_HEADER_CLASS))).remove();
  }
  isVisible() {
    var columnsController = this.getController("columns");
    var commonColumnSettings = columnsController.getCommonSettings();
    return this.option("showColumnHeaders") && (allowReordering(this) || commonColumnSettings.allowGrouping || commonColumnSettings.allowHiding);
  }
  init() {
    var that = this;
    super.init();
    this._controller = this.getController("draggingHeader");
    this._columnsResizerViewController = this.getController("columnsResizer");
    this._isDragging = false;
    this.getController("data").loadingChanged.add((isLoading) => {
      var element = that.element();
      if (!isLoading && element) {
        element.hide();
      }
    });
  }
  dragHeader(options2) {
    var {
      columnElement
    } = options2;
    var isCommandColumn = !!options2.sourceColumn.type;
    this._isDragging = true;
    this._dragOptions = options2;
    this._dropOptions = {
      sourceIndex: options2.index,
      sourceColumnIndex: this._getVisibleIndexObject(options2.rowIndex, options2.columnIndex),
      sourceColumnElement: options2.columnElement,
      sourceLocation: options2.sourceLocation
    };
    var document2 = dom_adapter_default.getDocument();
    this._onSelectStart = document2.onselectstart;
    document2.onselectstart = function() {
      return false;
    };
    this._controller.drag(this._dropOptions);
    this.element().css({
      textAlign: columnElement && columnElement.css("textAlign"),
      height: columnElement && (isCommandColumn && columnElement.get(0).clientHeight || getHeight(columnElement)),
      width: columnElement && (isCommandColumn && columnElement.get(0).clientWidth || getWidth(columnElement)),
      whiteSpace: columnElement && columnElement.css("whiteSpace")
    }).addClass(this.addWidgetPrefix(HEADERS_DRAG_ACTION_CLASS)).toggleClass(DRAGGING_COMMAND_CELL_CLASS, isCommandColumn).text(isCommandColumn ? "" : options2.sourceColumn.caption);
    this.element().appendTo(swatch_container_default.getSwatchContainer(columnElement));
  }
  moveHeader(args) {
    var e = args.event;
    var {
      that
    } = e.data;
    var eventData2 = eventData(e);
    var isResizing = that._columnsResizerViewController ? that._columnsResizerViewController.isResizing() : false;
    var dragOptions = that._dragOptions;
    if (that._isDragging && !isResizing) {
      var $element = that.element();
      var moveDeltaX = Math.abs(eventData2.x - dragOptions.columnElement.offset().left - dragOptions.deltaX);
      var moveDeltaY = Math.abs(eventData2.y - dragOptions.columnElement.offset().top - dragOptions.deltaY);
      if ($element.is(":visible") || moveDeltaX > DRAGGING_DELTA || moveDeltaY > DRAGGING_DELTA) {
        $element.show();
        var newLeft = eventData2.x - dragOptions.deltaX;
        var newTop = eventData2.y - dragOptions.deltaY;
        $element.css({
          left: newLeft,
          top: newTop
        });
        that.dockHeader(eventData2);
      }
      e.preventDefault();
    }
  }
  dockHeader(eventData2) {
    var targetDraggingPanel = this._getDraggingPanelByPos(eventData2);
    var controller = this._controller;
    var params = this._dropOptions;
    var dragOptions = this._dragOptions;
    if (targetDraggingPanel) {
      var rtlEnabled = this.option("rtlEnabled");
      var isVerticalOrientation = "columnChooser" === targetDraggingPanel.getName();
      var axisName = isVerticalOrientation ? "y" : "x";
      var targetLocation = targetDraggingPanel.getName();
      var rowIndex = "headers" === targetLocation ? dragOptions.rowIndex : void 0;
      var {
        sourceColumn
      } = dragOptions;
      var columnElements = targetDraggingPanel.getColumnElements(rowIndex, null === sourceColumn || void 0 === sourceColumn ? void 0 : sourceColumn.ownerBand) || [];
      var pointsByTarget = dragOptions.pointsByTarget = dragOptions.pointsByTarget || {};
      var pointsByColumns = "columnChooser" === targetLocation ? [] : pointsByTarget[targetLocation] || controller._generatePointsByColumns(extend({}, dragOptions, {
        targetDraggingPanel,
        columns: targetDraggingPanel.getColumns(rowIndex),
        columnElements,
        isVerticalOrientation,
        startColumnIndex: "headers" === targetLocation && renderer_default(columnElements[0]).index()
      }));
      pointsByTarget[targetLocation] = pointsByColumns;
      params.targetLocation = targetLocation;
      if (pointsByColumns.length > 0) {
        for (var i = 0; i < pointsByColumns.length; i++) {
          var centerPosition = pointsByColumns[i + 1] && (pointsByColumns[i][axisName] + pointsByColumns[i + 1][axisName]) / 2;
          if (void 0 === centerPosition || (rtlEnabled && "x" === axisName ? eventData2[axisName] > centerPosition : eventData2[axisName] < centerPosition)) {
            params.targetColumnIndex = this._getVisibleIndexObject(rowIndex, pointsByColumns[i].columnIndex);
            if (columnElements[i]) {
              params.targetColumnElement = columnElements.eq(i);
              params.isLast = false;
            } else {
              params.targetColumnElement = columnElements.last();
              params.isLast = true;
            }
            params.posX = pointsByColumns[i].x;
            params.posY = pointsByColumns[i].y;
            controller.dock(params);
            break;
          }
        }
      } else {
        this._resetTargetColumnOptions();
        controller.dock(params);
      }
    }
  }
  dropHeader(args) {
    var e = args.event;
    var {
      that
    } = e.data;
    var controller = that._controller;
    that.element().hide();
    if (controller && that._isDragging) {
      controller.drop(that._dropOptions);
    }
    that.element().appendTo(that._parentElement());
    that._dragOptions = null;
    that._dropOptions = null;
    that._isDragging = false;
    dom_adapter_default.getDocument().onselectstart = that._onSelectStart || null;
  }
};
var isNextColumnResizingMode = function(that) {
  return "widget" !== that.option("columnResizingMode");
};
var ColumnsResizerViewController = class extends m_modules_default.ViewController {
  _isHeadersRowArea(posY) {
    if (this._columnHeadersView) {
      var element = this._columnHeadersView.element();
      if (element) {
        var offsetTop = element.offset().top;
        var headersRowHeight = this._columnHeadersView.getHeadersRowHeight();
        return posY >= offsetTop && posY <= offsetTop + headersRowHeight;
      }
    }
    return false;
  }
  _isRtlParentStyle() {
    var _a2;
    return this.option("rtlEnabled") && "rtl" === (null === (_a2 = this._$parentContainer) || void 0 === _a2 ? void 0 : _a2.parent().css("direction"));
  }
  _pointCreated(point, cellsLength, columns2) {
    var isNextColumnMode = isNextColumnResizingMode(this);
    var rtlEnabled = this.option("rtlEnabled");
    var isRtlParentStyle = this._isRtlParentStyle();
    var firstPointColumnIndex = !isNextColumnMode && rtlEnabled && !isRtlParentStyle ? 0 : 1;
    if (point.index >= firstPointColumnIndex && point.index < cellsLength + (!isNextColumnMode && (!rtlEnabled || isRtlParentStyle) ? 1 : 0)) {
      point.columnIndex -= firstPointColumnIndex;
      var currentColumn = columns2[point.columnIndex] || {};
      var nextColumn = columns2[point.columnIndex + 1] || {};
      return !(isNextColumnMode ? currentColumn.allowResizing && nextColumn.allowResizing : currentColumn.allowResizing);
    }
    return true;
  }
  _getTargetPoint(pointsByColumns, currentX, deltaX) {
    if (pointsByColumns) {
      for (var i = 0; i < pointsByColumns.length; i++) {
        if (pointsByColumns[i].x === pointsByColumns[0].x && pointsByColumns[i + 1] && pointsByColumns[i].x === pointsByColumns[i + 1].x) {
          continue;
        }
        if (pointsByColumns[i].x - deltaX <= currentX && currentX <= pointsByColumns[i].x + deltaX) {
          return pointsByColumns[i];
        }
      }
    }
    return null;
  }
  _moveSeparator(args) {
    var _a2;
    var e = args.event;
    var that = e.data;
    var columnsSeparatorWidth = that._columnsSeparatorView.width();
    var isNextColumnMode = isNextColumnResizingMode(that);
    var deltaX = columnsSeparatorWidth / 2;
    var parentOffset = that._$parentContainer.offset();
    var parentOffsetLeft = parentOffset.left;
    var eventData2 = eventData(e);
    var rtlEnabled = that.option("rtlEnabled");
    var isRtlParentStyle = this._isRtlParentStyle();
    var isDragging = null === (_a2 = that._draggingHeaderView) || void 0 === _a2 ? void 0 : _a2.isDragging();
    if (that._isResizing && that._resizingInfo) {
      if ((parentOffsetLeft <= eventData2.x || !isNextColumnMode && isRtlParentStyle) && (!isNextColumnMode || eventData2.x <= parentOffsetLeft + getWidth(that._$parentContainer))) {
        if (that._updateColumnsWidthIfNeeded(eventData2.x)) {
          var $cell = that._columnHeadersView.getColumnElements().eq(that._resizingInfo.currentColumnIndex);
          var cell = $cell[0];
          if (cell) {
            var outerWidth = cell.getBoundingClientRect().width;
            that._columnsSeparatorView.moveByX($cell.offset().left + ((isNextColumnMode || isRtlParentStyle) && rtlEnabled ? 0 : outerWidth));
            that._tablePositionController.update(that._targetPoint.y);
            e.preventDefault();
          }
        }
      }
    } else if (!isDragging) {
      if (that._isHeadersRowArea(eventData2.y)) {
        if (that._previousParentOffset) {
          if (that._previousParentOffset.left !== parentOffset.left || that._previousParentOffset.top !== parentOffset.top) {
            that.pointsByColumns(null);
          }
        }
        that._targetPoint = that._getTargetPoint(that.pointsByColumns(), eventData2.x, columnsSeparatorWidth);
        that._previousParentOffset = parentOffset;
        that._isReadyResizing = false;
        if (that._targetPoint) {
          that._columnsSeparatorView.changeCursor("col-resize");
          that._columnsSeparatorView.moveByX(that._targetPoint.x - deltaX);
          that._tablePositionController.update(that._targetPoint.y);
          that._isReadyResizing = true;
          e.preventDefault();
        } else {
          that._columnsSeparatorView.changeCursor();
          that._columnsSeparatorView.moveByX(null);
        }
      } else {
        that.pointsByColumns(null);
        that._isReadyResizing = false;
        that._columnsSeparatorView.changeCursor();
        that._columnsSeparatorView.moveByX(null);
      }
    }
  }
  _endResizing(args) {
    var e = args.event;
    var that = e.data;
    if (that._isResizing) {
      that.pointsByColumns(null);
      that._resizingInfo = null;
      that._columnsSeparatorView.hide();
      that._columnsSeparatorView.changeCursor();
      that._trackerView.hide();
      that._isReadyResizing = false;
      that._isResizing = false;
    }
  }
  _getNextColumnIndex(currentColumnIndex) {
    return currentColumnIndex + 1;
  }
  _setupResizingInfo(posX) {
    var currentColumnIndex = this._targetPoint.columnIndex;
    var nextColumnIndex = this._getNextColumnIndex(currentColumnIndex);
    var currentHeader = this._columnHeadersView.getHeaderElement(currentColumnIndex);
    var nextHeader = this._columnHeadersView.getHeaderElement(nextColumnIndex);
    this._resizingInfo = {
      startPosX: posX,
      currentColumnIndex,
      currentColumnWidth: currentHeader && currentHeader.length > 0 ? getBoundingRect(currentHeader[0]).width : 0,
      nextColumnIndex,
      nextColumnWidth: nextHeader && nextHeader.length > 0 ? getBoundingRect(nextHeader[0]).width : 0
    };
  }
  _startResizing(args) {
    var e = args.event;
    var that = e.data;
    var eventData2 = eventData(e);
    if (isTouchEvent(e)) {
      if (that._isHeadersRowArea(eventData2.y)) {
        that._targetPoint = that._getTargetPoint(that.pointsByColumns(), eventData2.x, COLUMNS_SEPARATOR_TOUCH_TRACKER_WIDTH);
        if (that._targetPoint) {
          that._columnsSeparatorView.moveByX(that._targetPoint.x - that._columnsSeparatorView.width() / 2);
          that._isReadyResizing = true;
        }
      } else {
        that._isReadyResizing = false;
      }
    }
    if (that._isReadyResizing) {
      that._setupResizingInfo(eventData2.x);
      that._isResizing = true;
      that._tablePositionController.update(that._targetPoint.y);
      that._columnsSeparatorView.show();
      that._trackerView.show();
      var scrollable = that.component.getScrollable();
      if (scrollable && that._isRtlParentStyle()) {
        that._scrollRight = getWidth(scrollable.$content()) - getWidth(scrollable.container()) - scrollable.scrollLeft();
      }
      e.preventDefault();
      e.stopPropagation();
    }
    if (this.isResizing()) {
      this.getController("editorFactory").loseFocus();
    }
  }
  _generatePointsByColumns() {
    var that = this;
    var columns2 = that._columnsController ? that._columnsController.getVisibleColumns() : [];
    var cells = that._columnHeadersView.getColumnElements();
    var pointsByColumns = [];
    if (cells && cells.length > 0) {
      pointsByColumns = m_utils_default.getPointsByColumns(cells, (point) => that._pointCreated(point, cells.length, columns2));
    }
    that._pointsByColumns = pointsByColumns;
  }
  _unsubscribeFromEvents() {
    this._moveSeparatorHandler && events_engine_default.off(dom_adapter_default.getDocument(), addNamespace2(pointer_default.move, MODULE_NAMESPACE2), this._moveSeparatorHandler);
    this._startResizingHandler && events_engine_default.off(this._$parentContainer, addNamespace2(pointer_default.down, MODULE_NAMESPACE2), this._startResizingHandler);
    if (this._endResizingHandler) {
      events_engine_default.off(this._columnsSeparatorView.element(), addNamespace2(pointer_default.up, MODULE_NAMESPACE2), this._endResizingHandler);
      events_engine_default.off(dom_adapter_default.getDocument(), addNamespace2(pointer_default.up, MODULE_NAMESPACE2), this._endResizingHandler);
    }
  }
  _subscribeToEvents() {
    this._moveSeparatorHandler = this.createAction(this._moveSeparator);
    this._startResizingHandler = this.createAction(this._startResizing);
    this._endResizingHandler = this.createAction(this._endResizing);
    events_engine_default.on(dom_adapter_default.getDocument(), addNamespace2(pointer_default.move, MODULE_NAMESPACE2), this, this._moveSeparatorHandler);
    events_engine_default.on(this._$parentContainer, addNamespace2(pointer_default.down, MODULE_NAMESPACE2), this, this._startResizingHandler);
    events_engine_default.on(this._columnsSeparatorView.element(), addNamespace2(pointer_default.up, MODULE_NAMESPACE2), this, this._endResizingHandler);
    events_engine_default.on(dom_adapter_default.getDocument(), addNamespace2(pointer_default.up, MODULE_NAMESPACE2), this, this._endResizingHandler);
  }
  _updateColumnsWidthIfNeeded(posX) {
    var deltaX;
    var needUpdate;
    var contentWidth = this._rowsView.contentWidth();
    var resizingInfo = this._resizingInfo;
    var columnsController = this._columnsController;
    var visibleColumns = columnsController.getVisibleColumns();
    var columnsSeparatorWidth = this._columnsSeparatorView.width();
    var isNextColumnMode = isNextColumnResizingMode(this);
    var adaptColumnWidthByRatio = isNextColumnMode && this.option("adaptColumnWidthByRatio") && !this.option("columnAutoWidth");
    var rtlEnabled = this.option("rtlEnabled");
    var isRtlParentStyle = this._isRtlParentStyle();
    var column = visibleColumns[resizingInfo.currentColumnIndex];
    var nextColumn = visibleColumns[resizingInfo.nextColumnIndex];
    function isPercentWidth2(width) {
      return isString(width) && width.endsWith("%");
    }
    function setColumnWidth(column2, columnWidth, contentWidth2, adaptColumnWidthByRatio2) {
      if (column2) {
        var oldColumnWidth = column2.width;
        if (oldColumnWidth) {
          adaptColumnWidthByRatio2 = isPercentWidth2(oldColumnWidth);
        }
        if (adaptColumnWidthByRatio2) {
          columnsController.columnOption(column2.index, "visibleWidth", columnWidth);
          columnsController.columnOption(column2.index, "width", "".concat((columnWidth / contentWidth2 * 100).toFixed(3), "%"));
        } else {
          columnsController.columnOption(column2.index, "visibleWidth", null);
          columnsController.columnOption(column2.index, "width", columnWidth);
        }
      }
    }
    deltaX = posX - resizingInfo.startPosX;
    if ((isNextColumnMode || isRtlParentStyle) && rtlEnabled) {
      deltaX = -deltaX;
    }
    var {
      cellWidth,
      nextCellWidth
    } = function(delta) {
      var nextMinWidth;
      var nextCellWidth2;
      var needCorrectionNextCellWidth;
      var cellWidth2 = resizingInfo.currentColumnWidth + delta;
      var minWidth = column && column.minWidth || columnsSeparatorWidth;
      var result2 = {};
      if (cellWidth2 >= minWidth) {
        result2.cellWidth = cellWidth2;
      } else {
        result2.cellWidth = minWidth;
        needCorrectionNextCellWidth = true;
      }
      if (isNextColumnMode) {
        nextCellWidth2 = resizingInfo.nextColumnWidth - delta;
        nextMinWidth = nextColumn && nextColumn.minWidth || columnsSeparatorWidth;
        if (nextCellWidth2 >= nextMinWidth) {
          if (needCorrectionNextCellWidth) {
            result2.nextCellWidth = resizingInfo.nextColumnWidth - (delta + minWidth - cellWidth2);
          } else {
            result2.nextCellWidth = nextCellWidth2;
          }
        } else {
          result2.nextCellWidth = nextMinWidth;
          result2.cellWidth = resizingInfo.currentColumnWidth + (delta - nextMinWidth + nextCellWidth2);
        }
      }
      return result2;
    }(deltaX);
    needUpdate = column.width !== cellWidth;
    if (needUpdate) {
      columnsController.beginUpdate();
      cellWidth = Math.floor(cellWidth);
      contentWidth = function(contentWidth2, visibleColumns2) {
        var allColumnsHaveWidth = visibleColumns2.every((column2) => column2.width);
        if (allColumnsHaveWidth) {
          var totalPercent = visibleColumns2.reduce((sum, column2) => {
            if (isPercentWidth2(column2.width)) {
              sum += parseFloat(column2.width);
            }
            return sum;
          }, 0);
          if (totalPercent > 100) {
            contentWidth2 = contentWidth2 / totalPercent * 100;
          }
        }
        return contentWidth2;
      }(contentWidth, visibleColumns);
      setColumnWidth(column, cellWidth, contentWidth, adaptColumnWidthByRatio);
      if (isNextColumnMode) {
        nextCellWidth = Math.floor(nextCellWidth);
        setColumnWidth(nextColumn, nextCellWidth, contentWidth, adaptColumnWidthByRatio);
      } else {
        var columnWidths = this._columnHeadersView.getColumnWidths();
        columnWidths[resizingInfo.currentColumnIndex] = cellWidth;
        var hasScroll = columnWidths.reduce((totalWidth, width) => totalWidth + width, 0) > this._rowsView.contentWidth();
        if (!hasScroll) {
          var lastColumnIndex = m_utils_default.getLastResizableColumnIndex(visibleColumns);
          if (lastColumnIndex >= 0) {
            columnsController.columnOption(visibleColumns[lastColumnIndex].index, "visibleWidth", "auto");
          }
        }
        for (var i = 0; i < columnWidths.length; i++) {
          if (visibleColumns[i] && visibleColumns[i] !== column && void 0 === visibleColumns[i].width) {
            columnsController.columnOption(visibleColumns[i].index, "width", columnWidths[i]);
          }
        }
      }
      columnsController.endUpdate();
      if (!isNextColumnMode) {
        this.component.updateDimensions();
        var scrollable = this.component.getScrollable();
        if (scrollable && isRtlParentStyle) {
          var left = getWidth(scrollable.$content()) - getWidth(scrollable.container()) - this._scrollRight;
          scrollable.scrollTo({
            left
          });
        }
      }
    }
    return needUpdate;
  }
  _subscribeToCallback(callback, handler) {
    callback.add(handler);
    this._subscribesToCallbacks.push({
      callback,
      handler
    });
  }
  _unsubscribeFromCallbacks() {
    for (var i = 0; i < this._subscribesToCallbacks.length; i++) {
      var subscribe = this._subscribesToCallbacks[i];
      subscribe.callback.remove(subscribe.handler);
    }
    this._subscribesToCallbacks = [];
  }
  _unsubscribes() {
    this._unsubscribeFromEvents();
    this._unsubscribeFromCallbacks();
  }
  _init() {
    var that = this;
    var generatePointsByColumnsHandler = function() {
      if (!that._isResizing) {
        that.pointsByColumns(null);
      }
    };
    var generatePointsByColumnsScrollHandler = function(offset2) {
      if (that._scrollLeft !== offset2.left) {
        that._scrollLeft = offset2.left;
        that.pointsByColumns(null);
      }
    };
    that._columnsSeparatorView = that.getView("columnsSeparatorView");
    that._columnHeadersView = that.getView("columnHeadersView");
    that._trackerView = that.getView("trackerView");
    that._rowsView = that.getView("rowsView");
    that._columnsController = that.getController("columns");
    that._tablePositionController = that.getController("tablePosition");
    that._$parentContainer = that.component.$element();
    that._draggingHeaderView = that.component.getView("draggingHeaderView");
    that._subscribeToCallback(that._columnHeadersView.renderCompleted, generatePointsByColumnsHandler);
    that._subscribeToCallback(that._columnHeadersView.resizeCompleted, generatePointsByColumnsHandler);
    that._subscribeToCallback(that._columnsSeparatorView.renderCompleted, () => {
      that._unsubscribeFromEvents();
      that._subscribeToEvents();
    });
    that._subscribeToCallback(that._rowsView.renderCompleted, () => {
      that._rowsView.scrollChanged.remove(generatePointsByColumnsScrollHandler);
      that._rowsView.scrollChanged.add(generatePointsByColumnsScrollHandler);
    });
    var previousScrollbarVisibility = 0 !== that._rowsView.getScrollbarWidth();
    var previousTableHeight = 0;
    that._subscribeToCallback(that.getController("tablePosition").positionChanged, (e) => {
      if (that._isResizing && !that._rowsView.isResizing) {
        var scrollbarVisibility = 0 !== that._rowsView.getScrollbarWidth();
        if (previousScrollbarVisibility !== scrollbarVisibility || previousTableHeight && previousTableHeight !== e.height) {
          previousScrollbarVisibility = scrollbarVisibility;
          previousTableHeight = e.height;
          that.component.updateDimensions();
        } else {
          that._rowsView.updateFreeSpaceRowHeight();
        }
      }
      previousTableHeight = e.height;
    });
  }
  optionChanged(args) {
    super.optionChanged(args);
    if ("allowColumnResizing" === args.name) {
      if (args.value) {
        this._init();
        this._subscribeToEvents();
      } else {
        this._unsubscribes();
      }
    }
  }
  isResizing() {
    return this._isResizing;
  }
  init() {
    this._subscribesToCallbacks = [];
    if (allowResizing(this)) {
      this._init();
    }
  }
  pointsByColumns(value2) {
    if (void 0 !== value2) {
      this._pointsByColumns = value2;
    } else {
      if (!this._pointsByColumns) {
        this._generatePointsByColumns();
      }
      return this._pointsByColumns;
    }
  }
  dispose() {
    this._unsubscribes();
    super.dispose();
  }
};
var TablePositionViewController = class extends m_modules_default.ViewController {
  constructor(component) {
    super(component);
    this.positionChanged = callbacks_default();
  }
  update(top) {
    var params = {};
    var $element = this._columnHeadersView.element();
    var offset2 = $element && $element.offset();
    var offsetTop = offset2 && offset2.top || 0;
    var diffOffsetTop = isDefined(top) ? Math.abs(top - offsetTop) : 0;
    var columnsHeadersHeight = this._columnHeadersView ? this._columnHeadersView.getHeight() : 0;
    var scrollBarWidth = this._rowsView.getScrollbarWidth(true);
    var rowsHeight = this._rowsView ? this._rowsView.height() - scrollBarWidth : 0;
    var columnsResizerController = this.component.getController("columnsResizer");
    var draggingHeaderView = this.component.getView("draggingHeaderView");
    params.height = columnsHeadersHeight;
    var isDraggingOrResizing = columnsResizerController.isResizing() || draggingHeaderView.isDragging();
    if (isDraggingOrResizing) {
      params.height += rowsHeight - diffOffsetTop;
    }
    if (null !== top && $element && $element.length) {
      params.top = $element[0].offsetTop + diffOffsetTop;
    }
    this.positionChanged.fire(params);
  }
  init() {
    var that = this;
    super.init();
    that._columnHeadersView = this.getView("columnHeadersView");
    that._rowsView = this.getView("rowsView");
    that._pagerView = this.getView("pagerView");
    that._rowsView.resizeCompleted.add(() => {
      if (that.option("allowColumnResizing")) {
        var targetPoint = that.getController("columnsResizer")._targetPoint;
        that.update(targetPoint ? targetPoint.y : null);
      }
    });
  }
};
var DraggingHeaderViewController = class extends m_modules_default.ViewController {
  _generatePointsByColumns(options2) {
    var that = this;
    this.isCustomGroupColumnPosition = this.checkIsCustomGroupColumnPosition(options2);
    var points = m_utils_default.getPointsByColumns(options2.columnElements, (point) => that._pointCreated(point, options2.columns, options2.targetDraggingPanel.getName(), options2.sourceColumn), options2.isVerticalOrientation, options2.startColumnIndex);
    return points;
  }
  checkIsCustomGroupColumnPosition(options2) {
    var wasOnlyCommandColumns = true;
    for (var i = 0; i < options2.columns.length; i += 1) {
      var col = options2.columns[i];
      if ("expand" === col.command && !wasOnlyCommandColumns) {
        return true;
      }
      if (!col.command) {
        wasOnlyCommandColumns = false;
      }
    }
    return false;
  }
  _pointCreated(point, columns2, location, sourceColumn) {
    var _a2;
    var targetColumn = columns2[point.columnIndex];
    var prevColumn = columns2[point.columnIndex - 1];
    var isColumnAfterExpandColumn = "expand" === (null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.command);
    var isFirstExpandColumn = "expand" === (null === targetColumn || void 0 === targetColumn ? void 0 : targetColumn.command) && "expand" !== (null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.command);
    var sourceColumnReorderingDisabled = sourceColumn && !sourceColumn.allowReordering;
    var otherColumnsReorderingDisabled = !(null === targetColumn || void 0 === targetColumn ? void 0 : targetColumn.allowReordering) && !(null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.allowReordering);
    switch (location) {
      case "columnChooser":
        return true;
      case "headers":
        if (sourceColumnReorderingDisabled) {
          return true;
        }
        if (!isFirstExpandColumn) {
          return isColumnAfterExpandColumn || otherColumnsReorderingDisabled;
        }
        if (this.isCustomGroupColumnPosition) {
          return false;
        }
        while ("expand" === (null === (_a2 = columns2[point.columnIndex]) || void 0 === _a2 ? void 0 : _a2.command)) {
          point.columnIndex += 1;
        }
        return false;
      default:
        return 0 === columns2.length;
    }
  }
  _subscribeToEvents(draggingHeader2, draggingPanels) {
    var that = this;
    each(draggingPanels, (_, draggingPanel) => {
      if (draggingPanel) {
        var columns2;
        var rowCount = draggingPanel.getRowCount ? draggingPanel.getRowCount() : 1;
        var nameDraggingPanel = draggingPanel.getName();
        var subscribeToEvents = function(index2, columnElement) {
          if (!columnElement) {
            return;
          }
          var $columnElement = renderer_default(columnElement);
          var column = columns2[index2];
          if (column && draggingPanel.allowDragging(column)) {
            $columnElement.addClass(that.addWidgetPrefix(HEADERS_DRAG_ACTION_CLASS));
            events_engine_default.on($columnElement, addNamespace2(DRAG_START_EVENT, MODULE_NAMESPACE2), that.createAction((args) => {
              var e = args.event;
              var eventData2 = eventData(e);
              draggingHeader2.dragHeader({
                deltaX: eventData2.x - renderer_default(e.currentTarget).offset().left,
                deltaY: eventData2.y - renderer_default(e.currentTarget).offset().top,
                sourceColumn: column,
                index: column.index,
                columnIndex: index2,
                columnElement: $columnElement,
                sourceLocation: nameDraggingPanel,
                draggingPanels,
                rowIndex: that._columnsController.getRowIndex(column.index, true)
              });
            }));
            events_engine_default.on($columnElement, addNamespace2(DRAG_EVENT, MODULE_NAMESPACE2), {
              that: draggingHeader2
            }, that.createAction(draggingHeader2.moveHeader));
            events_engine_default.on($columnElement, addNamespace2(DRAG_END_EVENT, MODULE_NAMESPACE2), {
              that: draggingHeader2
            }, that.createAction(draggingHeader2.dropHeader));
          }
        };
        for (var i = 0; i < rowCount; i++) {
          var columnElements = draggingPanel.getColumnElements(i) || [];
          if (columnElements.length) {
            columns2 = draggingPanel.getColumns(i) || [];
            each(columnElements, subscribeToEvents);
          }
        }
      }
    });
  }
  _unsubscribeFromEvents(draggingHeader2, draggingPanels) {
    var that = this;
    each(draggingPanels, (_, draggingPanel) => {
      if (draggingPanel) {
        var columnElements = draggingPanel.getColumnElements() || [];
        each(columnElements, (index2, columnElement) => {
          var $columnElement = renderer_default(columnElement);
          events_engine_default.off($columnElement, addNamespace2(DRAG_START_EVENT, MODULE_NAMESPACE2));
          events_engine_default.off($columnElement, addNamespace2(DRAG_EVENT, MODULE_NAMESPACE2));
          events_engine_default.off($columnElement, addNamespace2(DRAG_END_EVENT, MODULE_NAMESPACE2));
          $columnElement.removeClass(that.addWidgetPrefix(HEADERS_DRAG_ACTION_CLASS));
        });
      }
    });
  }
  _getSeparator(targetLocation) {
    return "headers" === targetLocation ? this._columnsSeparatorView : this._blockSeparatorView;
  }
  hideSeparators(type2) {
    var blockSeparator = this._blockSeparatorView;
    var columnsSeparator = this._columnsSeparatorView;
    this._animationColumnIndex = void 0;
    blockSeparator && blockSeparator.hide();
    "block" !== type2 && columnsSeparator && columnsSeparator.hide();
  }
  init() {
    var that = this;
    super.init();
    that._columnsController = that.getController("columns");
    that._columnHeadersView = that.getView("columnHeadersView");
    that._columnsSeparatorView = that.getView("columnsSeparatorView");
    that._draggingHeaderView = that.getView("draggingHeaderView");
    that._rowsView = that.getView("rowsView");
    that._blockSeparatorView = that.getView("blockSeparatorView");
    that._headerPanelView = that.getView("headerPanel");
    that._columnChooserView = that.getView("columnChooserView");
    var subscribeToEvents = function() {
      if (that._draggingHeaderView) {
        var draggingPanels = [that._columnChooserView, that._columnHeadersView, that._headerPanelView];
        that._unsubscribeFromEvents(that._draggingHeaderView, draggingPanels);
        that._subscribeToEvents(that._draggingHeaderView, draggingPanels);
      }
    };
    that._columnHeadersView.renderCompleted.add(subscribeToEvents);
    that._headerPanelView && that._headerPanelView.renderCompleted.add(subscribeToEvents);
    that._columnChooserView && that._columnChooserView.renderCompleted.add(subscribeToEvents);
  }
  allowDrop(parameters) {
    return this._columnsController.allowMoveColumn(parameters.sourceColumnIndex, parameters.targetColumnIndex, parameters.sourceLocation, parameters.targetLocation);
  }
  drag(parameters) {
    var {
      sourceIndex
    } = parameters;
    var {
      sourceLocation
    } = parameters;
    var {
      sourceColumnElement
    } = parameters;
    var headersView = this._columnHeadersView;
    var rowsView3 = this._rowsView;
    if (sourceColumnElement) {
      sourceColumnElement.css({
        opacity: COLUMN_OPACITY
      });
      if ("headers" === sourceLocation) {
        headersView && headersView.setRowsOpacity(sourceIndex, COLUMN_OPACITY);
        rowsView3 && rowsView3.setRowsOpacity(sourceIndex, COLUMN_OPACITY);
      }
    }
  }
  dock(parameters) {
    var that = this;
    var targetColumnIndex = isObject(parameters.targetColumnIndex) ? parameters.targetColumnIndex.columnIndex : parameters.targetColumnIndex;
    var {
      sourceLocation
    } = parameters;
    var {
      targetLocation
    } = parameters;
    var separator = that._getSeparator(targetLocation);
    var hasTargetVisibleIndex = targetColumnIndex >= 0;
    that._columnHeadersView.element().find(".".concat(HEADER_ROW_CLASS2)).toggleClass(that.addWidgetPrefix(HEADERS_DROP_HIGHLIGHT_CLASS), "headers" !== sourceLocation && "headers" === targetLocation && !hasTargetVisibleIndex);
    if (separator) {
      if (that.allowDrop(parameters) && hasTargetVisibleIndex) {
        if ("group" === targetLocation || "columnChooser" === targetLocation) {
          !function() {
            if (that._animationColumnIndex !== targetColumnIndex) {
              that.hideSeparators();
              separator.element()[parameters.isLast ? "insertAfter" : "insertBefore"](parameters.targetColumnElement);
              that._animationColumnIndex = targetColumnIndex;
              separator.show(targetLocation);
            }
          }();
        } else {
          that.hideSeparators("block");
          that.getController("tablePosition").update(parameters.posY);
          separator.moveByX(parameters.posX - separator.width());
          separator.show();
        }
      } else {
        that.hideSeparators();
      }
    }
  }
  drop(parameters) {
    var {
      sourceColumnElement
    } = parameters;
    if (sourceColumnElement) {
      sourceColumnElement.css({
        opacity: ""
      });
      this._columnHeadersView.setRowsOpacity(parameters.sourceIndex, "");
      this._rowsView.setRowsOpacity(parameters.sourceIndex, "");
      this._columnHeadersView.element().find(".".concat(HEADER_ROW_CLASS2)).removeClass(this.addWidgetPrefix(HEADERS_DROP_HIGHLIGHT_CLASS));
    }
    if (this.allowDrop(parameters)) {
      var separator = this._getSeparator(parameters.targetLocation);
      if (separator) {
        separator.hide();
      }
      this._columnsController.moveColumn(parameters.sourceColumnIndex, parameters.targetColumnIndex, parameters.sourceLocation, parameters.targetLocation);
    }
  }
  dispose() {
    if (this._draggingHeaderView) {
      this._unsubscribeFromEvents(this._draggingHeaderView, [this._columnChooserView, this._columnHeadersView, this._headerPanelView]);
    }
  }
};
var columnsResizingReorderingModule = {
  views: {
    columnsSeparatorView: ColumnsSeparatorView,
    blockSeparatorView: BlockSeparatorView,
    draggingHeaderView: DraggingHeaderView,
    trackerView: TrackerView
  },
  controllers: {
    draggingHeader: DraggingHeaderViewController,
    tablePosition: TablePositionViewController,
    columnsResizer: ColumnsResizerViewController
  },
  extenders: {
    views: {
      rowsView: {
        _needUpdateRowHeight(itemCount) {
          var wordWrapEnabled = this.option("wordWrapEnabled");
          var columnsResizerController = this.getController("columnsResizer");
          var isResizing = columnsResizerController.isResizing();
          return this.callBase.apply(this, arguments) || itemCount > 0 && wordWrapEnabled && isResizing;
        }
      }
    },
    controllers: {
      editorFactory: {
        renderFocusOverlay() {
          if (this.getController("columnsResizer").isResizing()) {
            return;
          }
          return this.callBase.apply(this, arguments);
        }
      }
    }
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/columns_resizing_reordering.js
var DraggingHeaderView2 = columnsResizingReorderingModule.views.draggingHeaderView;
var DraggingHeaderViewController2 = columnsResizingReorderingModule.controllers.draggingHeader;
var ColumnsSeparatorView2 = columnsResizingReorderingModule.views.columnsSeparatorView;
var TablePositionViewController2 = columnsResizingReorderingModule.controllers.tablePosition;
var ColumnsResizerViewController2 = columnsResizingReorderingModule.controllers.columnsResizer;
var TrackerView2 = columnsResizingReorderingModule.views.trackerView;
m_core_default.registerModule("columnsResizingReordering", columnsResizingReorderingModule);

// node_modules/devextreme/esm/__internal/utils/memoize.js
var compareByReference = (args, lastArgs) => args.length === lastArgs.length && !Object.keys(args).some((key) => args[key] !== lastArgs[key]);
var compareByValue2 = (args, lastArgs) => equalByValue(args, lastArgs, {
  maxDepth: 4
});
var createCacheFunc = (firstArgs, firstResult, originFunc, compareFunc) => {
  var lastArgs = firstArgs;
  var lastResult = firstResult;
  return function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var argsEquals = compareFunc(args, lastArgs);
    if (argsEquals) {
      return lastResult;
    }
    lastArgs = args;
    lastResult = originFunc(...lastArgs);
    return lastResult;
  };
};
var MEMOIZE_DEFAULT_OPTIONS = {
  compareType: "reference"
};
var memoize = function(func) {
  var {
    compareType
  } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : MEMOIZE_DEFAULT_OPTIONS;
  var cachedFunc = null;
  return function() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    if (!cachedFunc) {
      var firstResult = func(...args);
      cachedFunc = createCacheFunc(args, firstResult, func, "reference" === compareType ? compareByReference : compareByValue2);
      return firstResult;
    }
    return cachedFunc(...args);
  };
};

// node_modules/devextreme/esm/__internal/grids/grid_core/keyboard_navigation/const.js
var ATTRIBUTES = {
  ariaColIndex: "aria-colindex",
  dragCell: "dx-drag-cell"
};
var ROWS_VIEW_CLASS2 = "rowsview";
var DATA_ROW_CLASS4 = "dx-data-row";
var GROUP_ROW_CLASS3 = "dx-group-row";
var HEADER_ROW_CLASS3 = "dx-header-row";
var EDIT_FORM_ITEM_CLASS2 = "edit-form-item";
var MASTER_DETAIL_ROW_CLASS2 = "dx-master-detail-row";
var FREESPACE_ROW_CLASS = "dx-freespace-row";
var VIRTUAL_ROW_CLASS2 = "dx-virtual-row";
var MASTER_DETAIL_CELL_CLASS2 = "dx-master-detail-cell";
var DROPDOWN_EDITOR_OVERLAY_CLASS2 = "dx-dropdowneditor-overlay";
var COMMAND_EXPAND_CLASS2 = "dx-command-expand";
var ADAPTIVE_COLUMN_NAME_CLASS = "dx-command-adaptive";
var COMMAND_SELECT_CLASS2 = "dx-command-select";
var COMMAND_EDIT_CLASS2 = "dx-command-edit";
var COMMAND_CELL_SELECTOR = "[class^=dx-command]";
var CELL_FOCUS_DISABLED_CLASS6 = "dx-cell-focus-disabled";
var DATEBOX_WIDGET_NAME = "dxDateBox";
var FOCUS_STATE_CLASS2 = "dx-state-focused";
var WIDGET_CLASS5 = "dx-widget";
var REVERT_BUTTON_CLASS2 = "dx-revert-button";
var FOCUSED_CLASS2 = "dx-focused";
var FAST_EDITING_DELETE_KEY = "delete";
var INTERACTIVE_ELEMENTS_SELECTOR = '\n  input:not([type="hidden"]):not([disabled]),\n  textarea:not([disabled]),\n  a:not([disabled]),\n  select:not([disabled]),\n  button:not([disabled]),\n  [tabindex]:not([disabled]),\n  .dx-checkbox:not([disabled],.dx-state-readonly)\n';
var NON_FOCUSABLE_ELEMENTS_SELECTOR = "".concat(INTERACTIVE_ELEMENTS_SELECTOR, ", .dx-dropdowneditor-icon");
var FOCUS_TYPE_ROW = "row";
var FOCUS_TYPE_CELL = "cell";
var COLUMN_HEADERS_VIEW = "columnHeadersView";
var FUNCTIONAL_KEYS = ["shift", "control", "alt"];

// node_modules/devextreme/esm/__internal/grids/grid_core/keyboard_navigation/dom.js
var isDragCell = ($cell) => void 0 !== $cell.attr(ATTRIBUTES.dragCell);
var getCellToFocus = ($cellElements, columnIndex) => $cellElements.filter("[".concat(ATTRIBUTES.ariaColIndex, '="').concat(columnIndex + 1, '"]:not([').concat(ATTRIBUTES.dragCell, "])")).first();
var GridCoreKeyboardNavigationDom = {
  isDragCell,
  getCellToFocus
};

// node_modules/devextreme/esm/__internal/grids/grid_core/keyboard_navigation/m_keyboard_navigation_utils.js
var DATAGRID_GROUP_FOOTER_CLASS = "dx-datagrid-group-footer";
function isGroupRow2($row) {
  return $row && $row.hasClass(GROUP_ROW_CLASS3);
}
function isGroupFooterRow($row) {
  return $row && $row.hasClass(DATAGRID_GROUP_FOOTER_CLASS);
}
function isDetailRow($row) {
  return $row && $row.hasClass(MASTER_DETAIL_ROW_CLASS2);
}
function isDataRow($row) {
  return $row && $row.hasClass(DATA_ROW_CLASS4);
}
function isNotFocusedRow($row) {
  return !$row || $row.hasClass(FREESPACE_ROW_CLASS) || $row.hasClass(VIRTUAL_ROW_CLASS2);
}
function isEditorCell(that, $cell) {
  return !that._isRowEditMode() && $cell && !$cell.hasClass(COMMAND_SELECT_CLASS2) && $cell.hasClass(EDITOR_CELL_CLASS2);
}
function isElementDefined($element) {
  return isDefined($element) && $element.length > 0;
}
function isMobile() {
  return "desktop" !== devices_default.current().deviceType;
}
function isCellInHeaderRow($cell) {
  return !!$cell.parent(".".concat(HEADER_ROW_CLASS3)).length;
}
function isFixedColumnIndexOffsetRequired(that, column) {
  var rtlEnabled = that.option("rtlEnabled");
  if (rtlEnabled) {
    return !("right" === column.fixedPosition || isDefined(column.command) && !isDefined(column.fixedPosition));
  }
  return !(!isDefined(column.fixedPosition) || "left" === column.fixedPosition);
}
function shouldPreventScroll(that) {
  var keyboardController = that.getController("keyboardNavigation");
  return keyboardController._isVirtualScrolling() ? that.option("focusedRowIndex") === keyboardController.getRowIndex() : false;
}

// node_modules/devextreme/esm/__internal/grids/grid_core/keyboard_navigation/scrollable_a11y.js
var keyboardNavigationScrollableA11yExtender = (Base) => class extends Base {
  init() {
    var _a2;
    super.init();
    this.rowsViewFocusOutHandlerContext = null !== (_a2 = this.rowsViewFocusOutHandlerContext) && void 0 !== _a2 ? _a2 : this.rowsViewFocusOutHandler.bind(this);
  }
  subscribeToRowsViewFocusEvent() {
    var _a2;
    super.subscribeToRowsViewFocusEvent();
    var $rowsView = null === (_a2 = this._rowsView) || void 0 === _a2 ? void 0 : _a2.element();
    events_engine_default.on($rowsView, "focusout", this.rowsViewFocusOutHandlerContext);
  }
  unsubscribeFromRowsViewFocusEvent() {
    var _a2;
    super.unsubscribeFromRowsViewFocusEvent();
    var $rowsView = null === (_a2 = this._rowsView) || void 0 === _a2 ? void 0 : _a2.element();
    events_engine_default.off($rowsView, "focusout", this.rowsViewFocusOutHandlerContext);
  }
  rowsViewFocusHandler(event) {
    var $target = renderer_default(event.target);
    this.translateFocusIfNeed(event, $target);
    super.rowsViewFocusHandler(event);
  }
  rowsViewFocusOutHandler() {
    this.makeScrollableFocusableIfNeed();
  }
  translateFocusIfNeed(event, $target) {
    var needTranslateFocus = this.isScrollableNeedFocusable();
    var isFirstCellFixed = this._isFixedColumn(0);
    if (!needTranslateFocus || !isFirstCellFixed) {
      return;
    }
    var $firstCell = this._rowsView.getCell({
      rowIndex: 0,
      columnIndex: 0
    });
    var firstCellHasTabIndex = !!$firstCell.attr("tabindex");
    var notFixedCellIsTarget = $target.is(this._$firstNotFixedCell);
    if (firstCellHasTabIndex && notFixedCellIsTarget) {
      event.preventDefault();
      this._focus($firstCell);
    }
  }
  renderCompleted(e) {
    this._$firstNotFixedCell = this.getFirstNotFixedCell();
    this.makeScrollableFocusableIfNeed();
    super.renderCompleted(e);
  }
  _focus($cell, disableFocus, skipFocusEvent) {
    super._focus($cell, disableFocus, skipFocusEvent);
    this.makeScrollableFocusableIfNeed();
  }
  _tabKeyHandler(eventArgs, isEditing) {
    var _a2;
    var isCellPositionDefined = isDefined(this._focusedCellPosition) && !isEmptyObject(this._focusedCellPosition);
    var isOriginalHandlerRequired = !isCellPositionDefined || !eventArgs.shift && this._isLastValidCell(this._focusedCellPosition) || eventArgs.shift && this._isFirstValidCell(this._focusedCellPosition);
    var isNeedFocusable = this.isScrollableNeedFocusable();
    if (isOriginalHandlerRequired && isNeedFocusable) {
      null === (_a2 = this._$firstNotFixedCell) || void 0 === _a2 ? void 0 : _a2.removeAttr("tabIndex");
    }
    super._tabKeyHandler(eventArgs, isEditing);
  }
  getFirstNotFixedCell() {
    var columns2 = this._columnsController.getVisibleColumns();
    var columnIndex = columns2.findIndex((_ref) => {
      var {
        fixed
      } = _ref;
      return !fixed;
    });
    return -1 === columnIndex ? void 0 : this._rowsView._getCellElement(0, columnIndex);
  }
  isScrollableNeedFocusable() {
    var _a2, _b2;
    var hasScrollable = !!this._rowsView.getScrollable();
    var hasFixedTable = !!(null === (_a2 = this._rowsView._fixedTableElement) || void 0 === _a2 ? void 0 : _a2.length);
    var isCellsRendered = !!(null === (_b2 = this._rowsView.getCellElements(0)) || void 0 === _b2 ? void 0 : _b2.length);
    return hasScrollable && hasFixedTable && isCellsRendered;
  }
  makeScrollableFocusableIfNeed() {
    var needFocusable = this.isScrollableNeedFocusable();
    if (!needFocusable || !this._$firstNotFixedCell) {
      return;
    }
    this._applyTabIndexToElement(this._$firstNotFixedCell);
  }
};

// node_modules/devextreme/esm/__internal/grids/grid_core/keyboard_navigation/m_keyboard_navigation.js
var KeyboardNavigationController = class extends m_modules_default.ViewController {
  init() {
    var _a2, _b2;
    this._dataController = this.getController("data");
    this._selectionController = this.getController("selection");
    this._editingController = this.getController("editing");
    this._headerPanel = this.getView("headerPanel");
    this._rowsView = this.getView("rowsView");
    this._columnsController = this.getController("columns");
    this._editorFactory = this.getController("editorFactory");
    this._focusController = this.getController("focus");
    this._adaptiveColumnsController = this.getController("adaptiveColumns");
    this._memoFireFocusedCellChanged = memoize(this._memoFireFocusedCellChanged.bind(this), {
      compareType: "value"
    });
    this._memoFireFocusedRowChanged = memoize(this._memoFireFocusedRowChanged.bind(this), {
      compareType: "value"
    });
    this.focusedHandlerWithContext = this.focusedHandlerWithContext || this.focusedHandler.bind(this);
    this.renderCompletedWithContext = this.renderCompletedWithContext || this.renderCompleted.bind(this);
    this.rowsViewFocusHandlerContext = this.rowsViewFocusHandlerContext || this.rowsViewFocusHandler.bind(this);
    this._updateFocusTimeout = null;
    this._fastEditingStarted = false;
    this._focusedCellPosition = {};
    this._canceledCellPosition = null;
    if (this.isKeyboardEnabled()) {
      subscribeVisibilityChange();
      null === (_a2 = this._editorFactory) || void 0 === _a2 ? void 0 : _a2.focused.add(this.focusedHandlerWithContext);
      this.createAction("onKeyDown");
    } else {
      unsubscribeVisibilityChange();
      null === (_b2 = this._editorFactory) || void 0 === _b2 ? void 0 : _b2.focused.remove(this.focusedHandlerWithContext);
    }
    this.initViewHandlers();
    this.initDocumentHandlers();
  }
  focusedHandler($element) {
    this.setupFocusedView();
    if (this._isNeedScroll) {
      if ($element.is(":visible") && this._focusedView && this._focusedView.getScrollable) {
        this._focusedView._scrollToElement($element);
        this._isNeedScroll = false;
      }
    }
  }
  rowsViewFocusHandler(event) {
    var _a2;
    var $element = renderer_default(event.target);
    var isRelatedTargetInRowsView = renderer_default(event.relatedTarget).closest(this._rowsView.element()).length;
    var isLink = $element.is("a");
    if (event.relatedTarget && isLink && !isRelatedTargetInRowsView && this._isEventInCurrentGrid(event)) {
      var $focusedCell = this._getFocusedCell();
      $focusedCell = !isElementDefined($focusedCell) ? this._rowsView.getCellElements(0).filter("[tabindex]").eq(0) : $focusedCell;
      if (!$element.closest($focusedCell).length) {
        event.preventDefault();
        events_engine_default.trigger($focusedCell, "focus");
      }
    }
    var isCell = $element.is("td");
    var needSetFocusPosition = (null !== (_a2 = this.option("focusedRowIndex")) && void 0 !== _a2 ? _a2 : -1) < 0;
    if (isCell && needSetFocusPosition) {
      this._updateFocusedCellPosition($element);
    }
  }
  subscribeToRowsViewFocusEvent() {
    var _a2;
    var $rowsView = null === (_a2 = this._rowsView) || void 0 === _a2 ? void 0 : _a2.element();
    events_engine_default.on($rowsView, "focusin", this.rowsViewFocusHandlerContext);
  }
  unsubscribeFromRowsViewFocusEvent() {
    var _a2;
    var $rowsView = null === (_a2 = this._rowsView) || void 0 === _a2 ? void 0 : _a2.element();
    events_engine_default.off($rowsView, "focusin", this.rowsViewFocusHandlerContext);
  }
  renderCompleted(e) {
    var $rowsView = this._rowsView.element();
    var isFullUpdate = !e || "refresh" === e.changeType;
    var isFocusedViewCorrect = this._focusedView && this._focusedView.name === this._rowsView.name;
    var needUpdateFocus = false;
    var isAppend = e && ("append" === e.changeType || "prepend" === e.changeType);
    var root = renderer_default(dom_adapter_default.getRootNode($rowsView.get && $rowsView.get(0)));
    var $focusedElement = root.find(":focus");
    var isFocusedElementCorrect = !$focusedElement.length || $focusedElement.closest($rowsView).length;
    this.unsubscribeFromRowsViewFocusEvent();
    this.subscribeToRowsViewFocusEvent();
    this.initPointerEventHandler();
    this.initKeyDownHandler();
    this._setRowsViewAttributes();
    if (isFocusedViewCorrect && isFocusedElementCorrect) {
      needUpdateFocus = this._isNeedFocus ? !isAppend : this._isHiddenFocus && isFullUpdate && !(null === e || void 0 === e ? void 0 : e.virtualColumnsScrolling);
      needUpdateFocus && this._updateFocus(true);
    }
  }
  initViewHandlers() {
    var _a2, _b2;
    this.unsubscribeFromRowsViewFocusEvent();
    this.unsubscribeFromPointerEvent();
    this.unsubscribeFromKeyDownEvent();
    null === (_b2 = null === (_a2 = this._rowsView) || void 0 === _a2 ? void 0 : _a2.renderCompleted) || void 0 === _b2 ? void 0 : _b2.remove(this.renderCompletedWithContext);
    if (this.isKeyboardEnabled()) {
      this._rowsView.renderCompleted.add(this.renderCompletedWithContext);
    }
  }
  initDocumentHandlers() {
    var document2 = dom_adapter_default.getDocument();
    this._documentClickHandler = this._documentClickHandler || this.createAction((e) => {
      var $target = renderer_default(e.event.target);
      var isCurrentRowsViewClick = this._isEventInCurrentGrid(e.event) && $target.closest(".".concat(this.addWidgetPrefix(ROWS_VIEW_CLASS2))).length;
      var isEditorOverlay = $target.closest(".".concat(DROPDOWN_EDITOR_OVERLAY_CLASS2)).length;
      var columnsResizerController = this.getController("columnsResizer");
      var isColumnResizing = !!columnsResizerController && columnsResizerController.isResizing();
      if (!isCurrentRowsViewClick && !isEditorOverlay && !isColumnResizing) {
        var targetInsideFocusedView = this._focusedView ? $target.parents().filter(this._focusedView.element()).length > 0 : false;
        !targetInsideFocusedView && this._resetFocusedCell(true);
        this._resetFocusedView();
      }
    });
    events_engine_default.off(document2, addNamespace2(pointer_default.down, "dxDataGridKeyboardNavigation"), this._documentClickHandler);
    if (this.isKeyboardEnabled()) {
      events_engine_default.on(document2, addNamespace2(pointer_default.down, "dxDataGridKeyboardNavigation"), this._documentClickHandler);
    }
  }
  _setRowsViewAttributes() {
    var $rowsView = this._getRowsViewElement();
    var isGridEmpty = !this._dataController.getVisibleRows().length;
    if (isGridEmpty) {
      this._applyTabIndexToElement($rowsView);
    }
  }
  unsubscribeFromPointerEvent() {
    var pointerEventName = !isMobile() ? pointer_default.down : CLICK_EVENT_NAME;
    var $rowsView = this._getRowsViewElement();
    this._pointerEventAction && events_engine_default.off($rowsView, addNamespace2(pointerEventName, "dxDataGridKeyboardNavigation"), this._pointerEventAction);
  }
  subscribeToPointerEvent() {
    var pointerEventName = !isMobile() ? pointer_default.down : CLICK_EVENT_NAME;
    var $rowsView = this._getRowsViewElement();
    var clickSelector = ".".concat(ROW_CLASS4, " > td, .").concat(ROW_CLASS4);
    events_engine_default.on($rowsView, addNamespace2(pointerEventName, "dxDataGridKeyboardNavigation"), clickSelector, this._pointerEventAction);
  }
  initPointerEventHandler() {
    this._pointerEventAction = this._pointerEventAction || this.createAction(this._pointerEventHandler);
    this.unsubscribeFromPointerEvent();
    this.subscribeToPointerEvent();
  }
  unsubscribeFromKeyDownEvent() {
    keyboard.off(this._keyDownListener);
  }
  subscribeToKeyDownEvent() {
    var $rowsView = this._getRowsViewElement();
    this._keyDownListener = keyboard.on($rowsView, null, (e) => this._keyDownHandler(e));
  }
  initKeyDownHandler() {
    this._keyDownListener && this.unsubscribeFromKeyDownEvent();
    this.subscribeToKeyDownEvent();
  }
  dispose() {
    super.dispose();
    this._resetFocusedView();
    keyboard.off(this._keyDownListener);
    events_engine_default.off(dom_adapter_default.getDocument(), addNamespace2(pointer_default.down, "dxDataGridKeyboardNavigation"), this._documentClickHandler);
    clearTimeout(this._updateFocusTimeout);
    unsubscribeVisibilityChange();
  }
  optionChanged(args) {
    switch (args.name) {
      case "keyboardNavigation":
      case "useLegacyKeyboardNavigation":
        this.init();
        args.handled = true;
        break;
      default:
        super.optionChanged(args);
    }
  }
  isRowFocusType() {
    return this.focusType === FOCUS_TYPE_ROW;
  }
  isCellFocusType() {
    return this.focusType === FOCUS_TYPE_CELL;
  }
  setRowFocusType() {
    if (this.option("focusedRowEnabled")) {
      this.focusType = FOCUS_TYPE_ROW;
    }
  }
  setCellFocusType() {
    this.focusType = FOCUS_TYPE_CELL;
  }
  _keyDownHandler(e) {
    var _a2;
    var needStopPropagation = true;
    this._isNeedFocus = true;
    this._isNeedScroll = true;
    var isHandled = this._processOnKeyDown(e);
    var isEditing = null === (_a2 = this._editingController) || void 0 === _a2 ? void 0 : _a2.isEditing();
    var {
      originalEvent
    } = e;
    if (originalEvent.isDefaultPrevented()) {
      this._isNeedFocus = false;
      this._isNeedScroll = false;
      return;
    }
    !FUNCTIONAL_KEYS.includes(e.keyName) && this._updateFocusedCellPositionByTarget(originalEvent.target);
    if (!isHandled) {
      switch (e.keyName) {
        case "leftArrow":
        case "rightArrow":
          this._leftRightKeysHandler(e, isEditing);
          isHandled = true;
          break;
        case "upArrow":
        case "downArrow":
          if (e.ctrl) {
            selectView("rowsView", this, originalEvent);
          } else {
            this._upDownKeysHandler(e, isEditing);
          }
          isHandled = true;
          break;
        case "pageUp":
        case "pageDown":
          this._pageUpDownKeyHandler(e);
          isHandled = true;
          break;
        case "space":
          isHandled = this._spaceKeyHandler(e, isEditing);
          break;
        case "A":
          if (isCommandKeyPressed(e.originalEvent)) {
            this._ctrlAKeyHandler(e, isEditing);
            isHandled = true;
          } else {
            isHandled = this._beginFastEditing(e.originalEvent);
          }
          break;
        case "tab":
          this._tabKeyHandler(e, isEditing);
          isHandled = true;
          break;
        case "enter":
          this._enterKeyHandler(e, isEditing);
          isHandled = true;
          break;
        case "escape":
          isHandled = this._escapeKeyHandler(e, isEditing);
          break;
        case "F":
          if (isCommandKeyPressed(e.originalEvent)) {
            this._ctrlFKeyHandler(e);
            isHandled = true;
          } else {
            isHandled = this._beginFastEditing(e.originalEvent);
          }
          break;
        case "F2":
          this._f2KeyHandler();
          isHandled = true;
          break;
        case "del":
        case "backspace":
          if (this._isFastEditingAllowed() && !this._isFastEditingStarted()) {
            isHandled = this._beginFastEditing(originalEvent, true);
          }
      }
      if (!isHandled && !this._beginFastEditing(originalEvent)) {
        this._isNeedFocus = false;
        this._isNeedScroll = false;
        needStopPropagation = false;
      }
      if (needStopPropagation) {
        originalEvent.stopPropagation();
      }
    }
  }
  _processOnKeyDown(eventArgs) {
    var {
      originalEvent
    } = eventArgs;
    var args = {
      handled: false,
      event: originalEvent
    };
    this.executeAction("onKeyDown", args);
    eventArgs.ctrl = originalEvent.ctrlKey;
    eventArgs.alt = originalEvent.altKey;
    eventArgs.shift = originalEvent.shiftKey;
    return !!args.handled;
  }
  _closeEditCell() {
    setTimeout(() => {
      this._editingController.closeEditCell();
    });
  }
  _leftRightKeysHandler(eventArgs, isEditing) {
    var rowIndex = this.getVisibleRowIndex();
    var $event = eventArgs.originalEvent;
    var $row = this._focusedView && this._focusedView.getRow(rowIndex);
    var directionCode = this._getDirectionCodeByKey(eventArgs.keyName);
    var isEditingNavigationMode = this._isFastEditingStarted();
    var allowNavigate = (!isEditing || isEditingNavigationMode) && isDataRow($row);
    if (allowNavigate) {
      this.setCellFocusType();
      isEditingNavigationMode && this._closeEditCell();
      if (this._isVirtualColumnRender()) {
        this._processVirtualHorizontalPosition(directionCode);
      }
      var $cell = this._getNextCell(directionCode);
      if (isElementDefined($cell)) {
        this._arrowKeysHandlerFocusCell($event, $cell, directionCode);
      }
      $event && $event.preventDefault();
    }
  }
  _upDownKeysHandler(eventArgs, isEditing) {
    var _a2, _b2;
    var visibleRowIndex = this.getVisibleRowIndex();
    var $row = this._focusedView && this._focusedView.getRow(visibleRowIndex);
    var $event = eventArgs.originalEvent;
    var isUpArrow = "upArrow" === eventArgs.keyName;
    var dataSource = this._dataController.dataSource();
    var isRowEditingInCurrentRow = null === (_b2 = null === (_a2 = this._editingController) || void 0 === _a2 ? void 0 : _a2.isEditRowByIndex) || void 0 === _b2 ? void 0 : _b2.call(_a2, visibleRowIndex);
    var isEditingNavigationMode = this._isFastEditingStarted();
    var allowNavigate = (!isRowEditingInCurrentRow || !isEditing || isEditingNavigationMode) && $row && !isDetailRow($row);
    if (allowNavigate) {
      isEditingNavigationMode && this._closeEditCell();
      if (!this._navigateNextCell($event, eventArgs.keyName)) {
        if (this._isVirtualRowRender() && isUpArrow && dataSource && !dataSource.isLoading()) {
          var rowHeight = getOuterHeight($row);
          var rowIndex = this._focusedCellPosition.rowIndex - 1;
          this._scrollBy(0, -rowHeight, rowIndex, $event);
        }
      }
      $event && $event.preventDefault();
    }
  }
  _pageUpDownKeyHandler(eventArgs) {
    var pageIndex = this._dataController.pageIndex();
    var pageCount = this._dataController.pageCount();
    var pagingEnabled = this.option("paging.enabled");
    var isPageUp = "pageUp" === eventArgs.keyName;
    var pageStep = isPageUp ? -1 : 1;
    var scrollable = this._rowsView.getScrollable();
    if (pagingEnabled && !this._isVirtualScrolling()) {
      if ((isPageUp ? pageIndex > 0 : pageIndex < pageCount - 1) && !this._isVirtualScrolling()) {
        this._dataController.pageIndex(pageIndex + pageStep);
        eventArgs.originalEvent.preventDefault();
      }
    } else if (scrollable && getHeight(scrollable.container()) < getHeight(scrollable.$content())) {
      this._scrollBy(0, getHeight(scrollable.container()) * pageStep);
      eventArgs.originalEvent.preventDefault();
    }
  }
  _spaceKeyHandler(eventArgs, isEditing) {
    var rowIndex = this.getVisibleRowIndex();
    var $target = renderer_default(eventArgs.originalEvent && eventArgs.originalEvent.target);
    if (this.option("selection") && "none" !== this.option("selection").mode && !isEditing) {
      var isFocusedRowElement = "row" === this._getElementType($target) && this.isRowFocusType() && isDataRow($target);
      var isFocusedSelectionCell = $target.hasClass(COMMAND_SELECT_CLASS2);
      if (isFocusedSelectionCell && "onClick" === this.option("selection.showCheckBoxesMode")) {
        this._selectionController.startSelectionWithCheckboxes();
      }
      if (isFocusedRowElement || $target.parent().hasClass(DATA_ROW_CLASS4) || $target.hasClass(this.addWidgetPrefix(ROWS_VIEW_CLASS2))) {
        this._selectionController.changeItemSelection(rowIndex, {
          shift: eventArgs.shift,
          control: eventArgs.ctrl
        });
        eventArgs.originalEvent.preventDefault();
        return true;
      }
      return false;
    }
    return this._beginFastEditing(eventArgs.originalEvent);
  }
  _ctrlAKeyHandler(eventArgs, isEditing) {
    if (!isEditing && !eventArgs.alt && "multiple" === this.option("selection.mode") && this.option("selection.allowSelectAll")) {
      this._selectionController.selectAll();
      eventArgs.originalEvent.preventDefault();
    }
  }
  _tabKeyHandler(eventArgs, isEditing) {
    var editingOptions = this.option("editing");
    var direction = eventArgs.shift ? "previous" : "next";
    var isCellPositionDefined = isDefined(this._focusedCellPosition) && !isEmptyObject(this._focusedCellPosition);
    var isOriginalHandlerRequired = !isCellPositionDefined || !eventArgs.shift && this._isLastValidCell(this._focusedCellPosition) || eventArgs.shift && this._isFirstValidCell(this._focusedCellPosition);
    var eventTarget = eventArgs.originalEvent.target;
    var focusedViewElement = this._focusedView && this._focusedView.element();
    if (this._handleTabKeyOnMasterDetailCell(eventTarget, direction)) {
      return;
    }
    renderer_default(focusedViewElement).addClass(FOCUS_STATE_CLASS2);
    if (editingOptions && eventTarget && !isOriginalHandlerRequired) {
      if (renderer_default(eventTarget).hasClass(this.addWidgetPrefix(ROWS_VIEW_CLASS2))) {
        this._resetFocusedCell();
      }
      if (this._isVirtualColumnRender()) {
        this._processVirtualHorizontalPosition(direction);
      }
      if (isEditing) {
        if (!this._editingCellTabHandler(eventArgs, direction)) {
          return;
        }
      } else if (this._targetCellTabHandler(eventArgs, direction)) {
        isOriginalHandlerRequired = true;
      }
    }
    if (isOriginalHandlerRequired) {
      this._editorFactory.loseFocus();
      if (this._editingController.isEditing() && !this._isRowEditMode()) {
        this._resetFocusedCell(true);
        this._resetFocusedView();
        this._closeEditCell();
      }
    } else {
      eventArgs.originalEvent.preventDefault();
    }
  }
  _getMaxHorizontalOffset() {
    var scrollable = this.component.getScrollable();
    return scrollable ? scrollable.scrollWidth() - getWidth(this._rowsView.element()) : 0;
  }
  _isColumnRendered(columnIndex) {
    var allVisibleColumns = this._columnsController.getVisibleColumns(null, true);
    var renderedVisibleColumns = this._columnsController.getVisibleColumns();
    var column = allVisibleColumns[columnIndex];
    var result2 = false;
    if (column) {
      result2 = renderedVisibleColumns.indexOf(column) >= 0;
    }
    return result2;
  }
  _isFixedColumn(columnIndex) {
    var allVisibleColumns = this._columnsController.getVisibleColumns(null, true);
    var column = allVisibleColumns[columnIndex];
    return !!column && !!column.fixed;
  }
  _isColumnVirtual(columnIndex) {
    var localColumnIndex = columnIndex - this._columnsController.getColumnIndexOffset();
    var visibleColumns = this._columnsController.getVisibleColumns();
    var column = visibleColumns[localColumnIndex];
    return !!column && "virtual" === column.command;
  }
  _processVirtualHorizontalPosition(direction) {
    var scrollable = this.component.getScrollable();
    var columnIndex = this.getColumnIndex();
    var nextColumnIndex;
    var horizontalScrollPosition = 0;
    var needToScroll = false;
    switch (direction) {
      case "next":
      case "nextInRow":
        var columnsCount = this._getVisibleColumnCount();
        nextColumnIndex = columnIndex + 1;
        horizontalScrollPosition = this.option("rtlEnabled") ? this._getMaxHorizontalOffset() : 0;
        if ("next" === direction) {
          needToScroll = columnsCount === nextColumnIndex || this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex);
        } else {
          needToScroll = columnsCount > nextColumnIndex && this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex);
        }
        break;
      case "previous":
      case "previousInRow":
        nextColumnIndex = columnIndex - 1;
        horizontalScrollPosition = this.option("rtlEnabled") ? 0 : this._getMaxHorizontalOffset();
        if ("previous" === direction) {
          var columnIndexOffset = this._columnsController.getColumnIndexOffset();
          var leftEdgePosition = nextColumnIndex < 0 && 0 === columnIndexOffset;
          needToScroll = leftEdgePosition || this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex);
        } else {
          needToScroll = nextColumnIndex >= 0 && this._isFixedColumn(columnIndex) && !this._isColumnRendered(nextColumnIndex);
        }
    }
    if (needToScroll) {
      scrollable.scrollTo({
        left: horizontalScrollPosition
      });
    } else if (isDefined(nextColumnIndex) && isDefined(direction) && this._isColumnVirtual(nextColumnIndex)) {
      horizontalScrollPosition = this._getHorizontalScrollPositionOffset(direction);
      0 !== horizontalScrollPosition && scrollable.scrollBy({
        left: horizontalScrollPosition,
        top: 0
      });
    }
  }
  _getHorizontalScrollPositionOffset(direction) {
    var positionOffset = 0;
    var $currentCell = this._getCell(this._focusedCellPosition);
    var currentCellWidth = $currentCell && getOuterWidth($currentCell);
    if (currentCellWidth > 0) {
      var rtlMultiplier = this.option("rtlEnabled") ? -1 : 1;
      positionOffset = "nextInRow" === direction || "next" === direction ? currentCellWidth * rtlMultiplier : currentCellWidth * rtlMultiplier * -1;
    }
    return positionOffset;
  }
  _editingCellTabHandler(eventArgs, direction) {
    var eventTarget = eventArgs.originalEvent.target;
    var $cell = this._getCellElementFromTarget(eventTarget);
    var isEditingAllowed;
    var $event = eventArgs.originalEvent;
    var elementType = this._getElementType(eventTarget);
    if ($cell.is(COMMAND_CELL_SELECTOR)) {
      return !this._targetCellTabHandler(eventArgs, direction);
    }
    this._updateFocusedCellPosition($cell);
    var nextCellInfo = this._getNextCellByTabKey($event, direction, elementType);
    $cell = nextCellInfo.$cell;
    if (!$cell || this._handleTabKeyOnMasterDetailCell($cell, direction)) {
      return false;
    }
    var column = this._getColumnByCellElement($cell);
    var $row = $cell.parent();
    var rowIndex = this._getRowIndex($row);
    var row = this._dataController.items()[rowIndex];
    var editingController = this._editingController;
    if (column && column.allowEditing) {
      var _isDataRow = !row || "data" === row.rowType;
      isEditingAllowed = editingController.allowUpdating({
        row
      }) ? _isDataRow : row && row.isNewRow;
    }
    if (!isEditingAllowed) {
      this._closeEditCell();
    }
    if (this._focusCell($cell, !nextCellInfo.isHighlighted)) {
      if (!this._isRowEditMode() && isEditingAllowed) {
        this._editFocusedCell();
      } else {
        this._focusInteractiveElement($cell, eventArgs.shift);
      }
    }
    return true;
  }
  _targetCellTabHandler(eventArgs, direction) {
    var $event = eventArgs.originalEvent;
    var eventTarget = $event.target;
    var elementType = this._getElementType(eventTarget);
    var $cell = this._getCellElementFromTarget(eventTarget);
    var $lastInteractiveElement = "cell" === elementType && this._getInteractiveElement($cell, !eventArgs.shift);
    var isOriginalHandlerRequired = false;
    if (!isEditorCell(this, $cell) && (null === $lastInteractiveElement || void 0 === $lastInteractiveElement ? void 0 : $lastInteractiveElement.length) && eventTarget !== $lastInteractiveElement.get(0)) {
      isOriginalHandlerRequired = true;
    } else {
      if (void 0 === this._focusedCellPosition.rowIndex && renderer_default(eventTarget).hasClass(ROW_CLASS4)) {
        this._updateFocusedCellPosition($cell);
      }
      elementType = this._getElementType(eventTarget);
      if (this.isRowFocusType()) {
        this.setCellFocusType();
        if ("row" === elementType && isDataRow(renderer_default(eventTarget))) {
          eventTarget = this.getFirstValidCellInRow(renderer_default(eventTarget));
          elementType = this._getElementType(eventTarget);
        }
      }
      var nextCellInfo = this._getNextCellByTabKey($event, direction, elementType);
      $cell = nextCellInfo.$cell;
      if (!$cell) {
        return false;
      }
      $cell = this._checkNewLineTransition($event, $cell);
      if (!$cell) {
        return false;
      }
      this._focusCell($cell, !nextCellInfo.isHighlighted);
      if (!isEditorCell(this, $cell)) {
        this._focusInteractiveElement($cell, eventArgs.shift);
      }
    }
    return isOriginalHandlerRequired;
  }
  _getNextCellByTabKey($event, direction, elementType) {
    var $cell = this._getNextCell(direction, elementType);
    var args = $cell && this._fireFocusedCellChanging($event, $cell, true);
    if (!args || args.cancel) {
      return {};
    }
    if (args.$newCellElement) {
      $cell = args.$newCellElement;
    }
    return {
      $cell,
      isHighlighted: args.isHighlighted
    };
  }
  _checkNewLineTransition($event, $cell) {
    var rowIndex = this.getVisibleRowIndex();
    var $row = $cell.parent();
    if (rowIndex !== this._getRowIndex($row)) {
      var cellPosition = this._getCellPosition($cell);
      var args = this._fireFocusedRowChanging($event, $row);
      if (args.cancel) {
        return;
      }
      if (args.rowIndexChanged && cellPosition) {
        this.setFocusedColumnIndex(cellPosition.columnIndex);
        $cell = this._getFocusedCell();
      }
    }
    return $cell;
  }
  _enterKeyHandler(eventArgs, isEditing) {
    var _a2;
    var rowIndex = this.getVisibleRowIndex();
    var key = this._dataController.getKeyByRowIndex(rowIndex);
    var $row = null === (_a2 = this._focusedView) || void 0 === _a2 ? void 0 : _a2.getRow(rowIndex);
    var $cell = this._getFocusedCell();
    var needExpandGroupRow = this.option("grouping.allowCollapsing") && isGroupRow2($row);
    var needExpandMasterDetailRow = this.option("masterDetail.enabled") && (null === $cell || void 0 === $cell ? void 0 : $cell.hasClass(COMMAND_EXPAND_CLASS2));
    var needExpandAdaptiveRow = null === $cell || void 0 === $cell ? void 0 : $cell.hasClass(ADAPTIVE_COLUMN_NAME_CLASS);
    if (needExpandGroupRow || needExpandMasterDetailRow) {
      var item = this._dataController.items()[rowIndex];
      var isNotContinuation = (null === item || void 0 === item ? void 0 : item.data) && !item.data.isContinuation;
      if (isDefined(key) && isNotContinuation) {
        this._dataController.changeRowExpand(key);
      }
    } else if (needExpandAdaptiveRow) {
      this._adaptiveColumnsController.toggleExpandAdaptiveDetailRow(key);
      this._updateFocusedCellPosition($cell);
    } else if (!(null === $cell || void 0 === $cell ? void 0 : $cell.hasClass(COMMAND_EDIT_CLASS2))) {
      this._processEnterKeyForDataCell(eventArgs, isEditing);
    }
  }
  _processEnterKeyForDataCell(eventArgs, isEditing) {
    var direction = this._getEnterKeyDirection(eventArgs);
    var allowEditingOnEnterKey = this._allowEditingOnEnterKey();
    if (isEditing || !allowEditingOnEnterKey && direction) {
      this._handleEnterKeyEditingCell(eventArgs.originalEvent);
      if ("next" === direction || "previous" === direction) {
        this._targetCellTabHandler(eventArgs, direction);
      } else if ("upArrow" === direction || "downArrow" === direction) {
        this._navigateNextCell(eventArgs.originalEvent, direction);
      }
    } else if (allowEditingOnEnterKey) {
      this._startEditing(eventArgs);
    }
  }
  _getEnterKeyDirection(eventArgs) {
    var enterKeyDirection = this.option("keyboardNavigation.enterKeyDirection");
    var isShift = eventArgs.shift;
    if ("column" === enterKeyDirection) {
      return isShift ? "upArrow" : "downArrow";
    }
    if ("row" === enterKeyDirection) {
      return isShift ? "previous" : "next";
    }
    return;
  }
  _handleEnterKeyEditingCell(event) {
    var {
      target
    } = event;
    var $cell = this._getCellElementFromTarget(target);
    var isRowEditMode = this._isRowEditMode();
    this._updateFocusedCellPosition($cell);
    if (isRowEditMode) {
      this._focusEditFormCell($cell);
      setTimeout(this._editingController.saveEditData.bind(this._editingController));
    } else {
      events_engine_default.trigger(renderer_default(target), "change");
      this._closeEditCell();
      event.preventDefault();
    }
  }
  _escapeKeyHandler(eventArgs, isEditing) {
    var $cell = this._getCellElementFromTarget(eventArgs.originalEvent.target);
    if (isEditing) {
      this._updateFocusedCellPosition($cell);
      if (!this._isRowEditMode()) {
        if ("cell" === this._editingController.getEditMode()) {
          this._editingController.cancelEditData();
        } else {
          this._closeEditCell();
        }
      } else {
        this._focusEditFormCell($cell);
        this._editingController.cancelEditData();
        if (0 === this._dataController.items().length) {
          this._resetFocusedCell();
          this._editorFactory.loseFocus();
        }
      }
      eventArgs.originalEvent.preventDefault();
      return true;
    }
    return false;
  }
  _ctrlFKeyHandler(eventArgs) {
    if (this.option("searchPanel.visible")) {
      var searchTextEditor = this._headerPanel.getSearchTextEditor();
      if (searchTextEditor) {
        searchTextEditor.focus();
        eventArgs.originalEvent.preventDefault();
      }
    }
  }
  _f2KeyHandler() {
    var isEditing = this._editingController.isEditing();
    var rowIndex = this.getVisibleRowIndex();
    var $row = this._focusedView && this._focusedView.getRow(rowIndex);
    if (!isEditing && isDataRow($row)) {
      this._startEditing();
    }
  }
  _navigateNextCell($event, keyCode) {
    var $cell = this._getNextCell(keyCode);
    var directionCode = this._getDirectionCodeByKey(keyCode);
    var isCellValid = $cell && this._isCellValid($cell);
    var result2 = isCellValid ? this._arrowKeysHandlerFocusCell($event, $cell, directionCode) : false;
    return result2;
  }
  _arrowKeysHandlerFocusCell($event, $nextCell, direction) {
    var isVerticalDirection = "prevRow" === direction || "nextRow" === direction;
    var args = this._fireFocusChangingEvents($event, $nextCell, isVerticalDirection, true);
    $nextCell = args.$newCellElement;
    if (!args.cancel && this._isCellValid($nextCell)) {
      this._focus($nextCell, !args.isHighlighted);
      return true;
    }
    return false;
  }
  _beginFastEditing(originalEvent, isDeleting) {
    if (!this._isFastEditingAllowed() || originalEvent.altKey || originalEvent.ctrlKey || this._editingController.isEditing()) {
      return false;
    }
    if (isDeleting) {
      this._startEditing(originalEvent, FAST_EDITING_DELETE_KEY);
    } else {
      var {
        key
      } = originalEvent;
      var keyCode = originalEvent.keyCode || originalEvent.which;
      var fastEditingKey = key || keyCode && String.fromCharCode(keyCode);
      if (fastEditingKey && (1 === fastEditingKey.length || fastEditingKey === FAST_EDITING_DELETE_KEY)) {
        this._startEditing(originalEvent, fastEditingKey);
      }
    }
    return true;
  }
  _pointerEventHandler(e) {
    var _a2;
    var event = e.event || e;
    var $target = renderer_default(event.currentTarget);
    var focusedViewElement = null === (_a2 = this._rowsView) || void 0 === _a2 ? void 0 : _a2.element();
    var $parent = $target.parent();
    var isInteractiveElement = renderer_default(event.target).is(INTERACTIVE_ELEMENTS_SELECTOR);
    var isRevertButton = !!renderer_default(event.target).closest(".".concat(REVERT_BUTTON_CLASS2)).length;
    var isExpandCommandCell = $target.hasClass(COMMAND_EXPAND_CLASS2);
    if (!this._isEventInCurrentGrid(event)) {
      return;
    }
    if (!isRevertButton && (this._isCellValid($target, !isInteractiveElement) || isExpandCommandCell)) {
      $target = this._isInsideEditForm($target) ? renderer_default(event.target) : $target;
      this._focusView();
      renderer_default(focusedViewElement).removeClass(FOCUS_STATE_CLASS2);
      if ($parent.hasClass(FREESPACE_ROW_CLASS)) {
        this._updateFocusedCellPosition($target);
        this._applyTabIndexToElement(this._focusedView.element());
        this._focusedView.focus(true);
      } else if (!this._isMasterDetailCell($target)) {
        this._clickTargetCellHandler(event, $target);
      } else {
        this._updateFocusedCellPosition($target);
      }
    } else if ($target.is("td")) {
      this._resetFocusedCell();
    }
  }
  _clickTargetCellHandler(event, $cell) {
    var column = this._getColumnByCellElement($cell);
    var isCellEditMode = this._isCellEditMode();
    this.setCellFocusType();
    var args = this._fireFocusChangingEvents(event, $cell, true);
    $cell = args.$newCellElement;
    if (!args.cancel) {
      if (args.resetFocusedRow) {
        this.getController("focus")._resetFocusedRow();
        return;
      }
      if (args.rowIndexChanged) {
        $cell = this._getFocusedCell();
      }
      if (!args.isHighlighted && !isCellEditMode) {
        this.setRowFocusType();
      }
      this._updateFocusedCellPosition($cell);
      if (this._allowRowUpdating() && isCellEditMode && column && column.allowEditing) {
        this._isNeedFocus = false;
        this._isHiddenFocus = false;
      } else {
        $cell = this._getFocusedCell();
        var $target = event && renderer_default(event.target).closest("".concat(NON_FOCUSABLE_ELEMENTS_SELECTOR, ", td"));
        var skipFocusEvent = $target && $target.not($cell).is(NON_FOCUSABLE_ELEMENTS_SELECTOR);
        var isEditor = !!column && !column.command && $cell.hasClass(EDITOR_CELL_CLASS2);
        var isDisabled = !isEditor && (!args.isHighlighted || skipFocusEvent);
        this._focus($cell, isDisabled, skipFocusEvent);
      }
    } else {
      this.setRowFocusType();
      this.setFocusedRowIndex(args.prevRowIndex);
      if (this._editingController.isEditing() && isCellEditMode) {
        this._closeEditCell();
      }
    }
  }
  _allowRowUpdating() {
    var rowIndex = this.getVisibleRowIndex();
    var row = this._dataController.items()[rowIndex];
    return this._editingController.allowUpdating({
      row
    }, "click");
  }
  focus(element) {
    var activeElementSelector;
    var focusedRowEnabled = this.option("focusedRowEnabled");
    var isHighlighted = this._isCellElement(renderer_default(element));
    if (!element) {
      activeElementSelector = ".dx-datagrid-rowsview .dx-row[tabindex]";
      if (!focusedRowEnabled) {
        activeElementSelector += ", .dx-datagrid-rowsview .dx-row > td[tabindex]";
      }
      element = this.component.$element().find(activeElementSelector).first();
    }
    element && this._focusElement(renderer_default(element), isHighlighted);
  }
  getFocusedView() {
    return this._focusedView;
  }
  setupFocusedView() {
    if (this.isKeyboardEnabled() && !isDefined(this._focusedView)) {
      this._focusView();
    }
  }
  _focusElement($element, isHighlighted) {
    var rowsViewElement = renderer_default(this._getRowsViewElement());
    var $focusedView = $element.closest(rowsViewElement);
    var isRowFocusType = this.isRowFocusType();
    var args = {};
    if (!$focusedView.length || this._isCellElement($element) && !this._isCellValid($element)) {
      return;
    }
    this._focusView();
    this._isNeedFocus = true;
    this._isNeedScroll = true;
    if (this._isCellElement($element) || isGroupRow2($element)) {
      this.setCellFocusType();
      args = this._fireFocusChangingEvents(null, $element, true, isHighlighted);
      $element = args.$newCellElement;
      if (isRowFocusType && !args.isHighlighted) {
        this.setRowFocusType();
      }
    }
    if (!args.cancel) {
      this._focus($element, !args.isHighlighted);
      this._focusInteractiveElement($element);
    }
  }
  _getFocusedViewByElement($element) {
    var view = this.getFocusedView();
    var $view = view && renderer_default(view.element());
    return $element && 0 !== $element.closest($view).length;
  }
  _focusView() {
    this._focusedView = this._rowsView;
  }
  _resetFocusedView() {
    this.setRowFocusType();
    this._focusedView = null;
  }
  _focusInteractiveElement($cell, isLast) {
    if (!$cell) {
      return;
    }
    var $focusedElement = this._getInteractiveElement($cell, isLast);
    m_utils_default.focusAndSelectElement(this, $focusedElement);
  }
  _focus($cell, disableFocus, skipFocusEvent) {
    var $row = $cell && !$cell.hasClass(ROW_CLASS4) ? $cell.closest(".".concat(ROW_CLASS4)) : $cell;
    if ($row && isNotFocusedRow($row)) {
      return;
    }
    var focusedView = this._focusedView;
    var $focusViewElement = focusedView && focusedView.element();
    var $focusElement;
    this._isHiddenFocus = disableFocus;
    var isRowFocus = isGroupRow2($row) || isGroupFooterRow($row) || this.isRowFocusType();
    if (isRowFocus) {
      $focusElement = $row;
      if (focusedView) {
        this.setFocusedRowIndex(this._getRowIndex($row));
      }
    } else if (this._isCellElement($cell)) {
      $focusElement = $cell;
      this._updateFocusedCellPosition($cell);
    }
    if ($focusElement) {
      if ($focusViewElement) {
        $focusViewElement.find(".dx-row[tabindex], .dx-row > td[tabindex]").not($focusElement).removeClass(CELL_FOCUS_DISABLED_CLASS6).removeClass(FOCUSED_CLASS2).removeAttr("tabindex");
      }
      events_engine_default.one($focusElement, "blur", (e) => {
        if (e.relatedTarget) {
          $focusElement.removeClass(CELL_FOCUS_DISABLED_CLASS6).removeClass(FOCUSED_CLASS2);
        }
      });
      if (!skipFocusEvent) {
        this._applyTabIndexToElement($focusElement);
        events_engine_default.trigger($focusElement, "focus");
      }
      if (disableFocus) {
        $focusElement.addClass(CELL_FOCUS_DISABLED_CLASS6);
        if (isRowFocus) {
          $cell.addClass(CELL_FOCUS_DISABLED_CLASS6);
        }
      } else {
        this._editorFactory.focus($focusElement);
      }
    }
  }
  _updateFocus(isRenderView) {
    this._updateFocusTimeout = setTimeout(() => {
      if (this._needFocusEditingCell()) {
        this._editingController._focusEditingCell();
        return;
      }
      var $cell = this._getFocusedCell();
      var isEditing = this._editingController.isEditing();
      if (!this._isMasterDetailCell($cell) || this._isRowEditMode()) {
        if (this._hasSkipRow($cell.parent())) {
          var direction = this._focusedCellPosition && this._focusedCellPosition.rowIndex > 0 ? "upArrow" : "downArrow";
          $cell = this._getNextCell(direction);
        }
        if (isElementDefined($cell)) {
          if ($cell.is("td") || $cell.hasClass(this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS2))) {
            var isCommandCell = $cell.is(COMMAND_CELL_SELECTOR);
            var $focusedElementInsideCell = $cell.find(":focus");
            var isFocusedElementDefined = isElementDefined($focusedElementInsideCell);
            var column = this._getColumnByCellElement($cell);
            if ((isRenderView || !isCommandCell) && this._editorFactory.focus()) {
              if (isCommandCell && isFocusedElementDefined) {
                m_utils_default.focusAndSelectElement(this, $focusedElementInsideCell);
                return;
              }
              !isFocusedElementDefined && this._focus($cell);
            } else if (!isFocusedElementDefined && (this._isNeedFocus || this._isHiddenFocus)) {
              this._focus($cell, this._isHiddenFocus);
            }
            if (isEditing && !(null === column || void 0 === column ? void 0 : column.showEditorAlways)) {
              this._focusInteractiveElement.bind(this)($cell);
            }
          } else {
            events_engine_default.trigger($cell, "focus");
          }
        }
      }
    });
  }
  _getColumnByCellElement($cell) {
    var cellIndex = this._rowsView.getCellIndex($cell);
    var columnIndex = cellIndex + this._columnsController.getColumnIndexOffset();
    return this._columnsController.getVisibleColumns(null, true)[columnIndex];
  }
  _needFocusEditingCell() {
    var isCellEditMode = this._editingController.getEditMode() === EDIT_MODE_CELL;
    var isBatchEditMode = this._editingController.getEditMode() === EDIT_MODE_BATCH;
    var cellEditModeHasChanges = isCellEditMode && this._editingController.hasChanges();
    var isNewRowBatchEditMode = isBatchEditMode && this._editingController.isNewRowInEditMode();
    var $cell = this._getFocusedCell();
    return (0 === $cell.children().length || $cell.find(FOCUSABLE_ELEMENT_SELECTOR).length > 0) && (cellEditModeHasChanges || isNewRowBatchEditMode);
  }
  _getFocusedCell() {
    return renderer_default(this._getCell(this._focusedCellPosition));
  }
  _updateFocusedCellPositionByTarget(target) {
    var _a2;
    var elementType = this._getElementType(target);
    if ("row" === elementType && isDefined(null === (_a2 = this._focusedCellPosition) || void 0 === _a2 ? void 0 : _a2.columnIndex)) {
      var $row = renderer_default(target);
      this._focusedView && isGroupRow2($row) && this.setFocusedRowIndex(this._getRowIndex($row));
    } else {
      this._updateFocusedCellPosition(this._getCellElementFromTarget(target));
    }
  }
  _updateFocusedCellPosition($cell, direction) {
    var position3 = this._getCellPosition($cell, direction);
    if (position3) {
      if (!$cell.length || position3.rowIndex >= 0 && position3.columnIndex >= 0) {
        this.setFocusedCellPosition(position3.rowIndex, position3.columnIndex);
      }
    }
    return position3;
  }
  _getFocusedColumnIndexOffset(columnIndex) {
    var offset2 = 0;
    var column = this._columnsController.getVisibleColumns()[columnIndex];
    if (column && column.fixed) {
      offset2 = this._getFixedColumnIndexOffset(column);
    } else if (columnIndex >= 0) {
      offset2 = this._columnsController.getColumnIndexOffset();
    }
    return offset2;
  }
  _getFixedColumnIndexOffset(column) {
    var offset2 = isFixedColumnIndexOffsetRequired(this, column) ? this._getVisibleColumnCount() - this._columnsController.getVisibleColumns().length : 0;
    return offset2;
  }
  _getCellPosition($cell, direction) {
    var columnIndex;
    var $row = isElementDefined($cell) && $cell.closest("tr");
    if (isElementDefined($row)) {
      var rowIndex = this._getRowIndex($row);
      columnIndex = this._rowsView.getCellIndex($cell, rowIndex);
      columnIndex += this._getFocusedColumnIndexOffset(columnIndex);
      if (direction) {
        columnIndex = "previous" === direction ? columnIndex - 1 : columnIndex + 1;
        columnIndex = this._applyColumnIndexBoundaries(columnIndex);
      }
      return {
        rowIndex,
        columnIndex
      };
    }
    return;
  }
  _focusCell($cell, isDisabled) {
    if (this._isCellValid($cell)) {
      this._focus($cell, isDisabled);
      return true;
    }
    return;
  }
  _focusEditFormCell($cell) {
    if ($cell.hasClass(MASTER_DETAIL_CELL_CLASS2)) {
      this._editorFactory.focus($cell, true);
    }
  }
  _resetFocusedCell(preventScroll) {
    var _a2;
    var $cell = this._getFocusedCell();
    isElementDefined($cell) && $cell.removeAttr("tabindex");
    this._isNeedFocus = false;
    this._isNeedScroll = false;
    this._focusedCellPosition = {};
    clearTimeout(this._updateFocusTimeout);
    null === (_a2 = this._focusedView) || void 0 === _a2 ? void 0 : _a2.renderFocusState({
      preventScroll
    });
  }
  restoreFocusableElement(rowIndex, $event) {
    var args;
    var $rowElement;
    var isUpArrow = isDefined(rowIndex);
    var $rowsViewElement = this._rowsView.element();
    var {
      columnIndex
    } = this._focusedCellPosition;
    var rowIndexOffset = this._dataController.getRowIndexOffset();
    rowIndex = isUpArrow ? rowIndex : this._rowsView.getTopVisibleItemIndex() + rowIndexOffset;
    if (!isUpArrow) {
      this._editorFactory.loseFocus();
      this._applyTabIndexToElement($rowsViewElement);
      events_engine_default.trigger($rowsViewElement, "focus");
    } else {
      $rowElement = this._rowsView.getRow(rowIndex - rowIndexOffset);
      args = this._fireFocusedRowChanging($event, $rowElement);
      if (!args.cancel && args.rowIndexChanged) {
        rowIndex = args.newRowIndex;
      }
    }
    if (!isUpArrow || !args.cancel) {
      this.setFocusedCellPosition(rowIndex, columnIndex);
    }
    isUpArrow && this._updateFocus();
  }
  _getNewPositionByCode(cellPosition, elementType, code) {
    var {
      columnIndex
    } = cellPosition;
    var {
      rowIndex
    } = cellPosition;
    var visibleColumnsCount;
    if (void 0 === cellPosition.rowIndex && "next" === code) {
      return {
        columnIndex: 0,
        rowIndex: 0
      };
    }
    switch (code) {
      case "nextInRow":
      case "next":
        visibleColumnsCount = this._getVisibleColumnCount();
        if (columnIndex < visibleColumnsCount - 1 && "row" !== elementType && this._hasValidCellAfterPosition({
          columnIndex,
          rowIndex
        })) {
          columnIndex++;
        } else if (!this._isLastRow(rowIndex) && "next" === code) {
          columnIndex = 0;
          rowIndex++;
        }
        break;
      case "previousInRow":
      case "previous":
        if (columnIndex > 0 && "row" !== elementType && this._hasValidCellBeforePosition({
          columnIndex,
          rowIndex
        })) {
          columnIndex--;
        } else if (rowIndex > 0 && "previous" === code) {
          rowIndex--;
          visibleColumnsCount = this._getVisibleColumnCount();
          columnIndex = visibleColumnsCount - 1;
        }
        break;
      case "upArrow":
        rowIndex = rowIndex > 0 ? rowIndex - 1 : rowIndex;
        break;
      case "downArrow":
        rowIndex = !this._isLastRow(rowIndex) ? rowIndex + 1 : rowIndex;
    }
    return {
      columnIndex,
      rowIndex
    };
  }
  setFocusedCellPosition(rowIndex, columnIndex) {
    this.setFocusedRowIndex(rowIndex);
    this.setFocusedColumnIndex(columnIndex);
  }
  setFocusedRowIndex(rowIndex) {
    if (!this._focusedCellPosition) {
      this._focusedCellPosition = {};
    }
    this._focusedCellPosition.rowIndex = rowIndex;
  }
  setFocusedColumnIndex(columnIndex) {
    if (!this._focusedCellPosition) {
      this._focusedCellPosition = {};
    }
    this._focusedCellPosition.columnIndex = columnIndex;
  }
  getRowIndex() {
    return this._focusedCellPosition ? this._focusedCellPosition.rowIndex : -1;
  }
  getColumnIndex() {
    return this._focusedCellPosition ? this._focusedCellPosition.columnIndex : -1;
  }
  getVisibleRowIndex() {
    var _a2;
    var rowIndex = null === (_a2 = this._focusedCellPosition) || void 0 === _a2 ? void 0 : _a2.rowIndex;
    return !isDefined(rowIndex) || rowIndex < 0 ? -1 : rowIndex - this._dataController.getRowIndexOffset();
  }
  getVisibleColumnIndex() {
    var _a2;
    var columnIndex = null === (_a2 = this._focusedCellPosition) || void 0 === _a2 ? void 0 : _a2.columnIndex;
    return !isDefined(columnIndex) ? -1 : columnIndex - this._columnsController.getColumnIndexOffset();
  }
  _applyColumnIndexBoundaries(columnIndex) {
    var visibleColumnsCount = this._getVisibleColumnCount();
    if (columnIndex < 0) {
      columnIndex = 0;
    } else if (columnIndex >= visibleColumnsCount) {
      columnIndex = visibleColumnsCount - 1;
    }
    return columnIndex;
  }
  _isCellByPositionValid(cellPosition) {
    var $cell = renderer_default(this._getCell(cellPosition));
    return this._isCellValid($cell);
  }
  _isLastRow(rowIndex) {
    var dataController2 = this._dataController;
    if (this._isVirtualRowRender()) {
      return rowIndex >= dataController2.getMaxRowIndex();
    }
    var lastVisibleIndex = Math.max(...dataController2.items().map((item, index2) => false !== item.visible ? index2 : -1));
    return rowIndex === lastVisibleIndex;
  }
  _isFirstValidCell(cellPosition) {
    var isFirstValidCell = false;
    if (0 === cellPosition.rowIndex && cellPosition.columnIndex >= 0) {
      isFirstValidCell = isFirstValidCell || !this._hasValidCellBeforePosition(cellPosition);
    }
    return isFirstValidCell;
  }
  _hasValidCellBeforePosition(cellPosition) {
    var {
      columnIndex
    } = cellPosition;
    var hasValidCells = false;
    while (columnIndex > 0 && !hasValidCells) {
      var checkingPosition = {
        columnIndex: --columnIndex,
        rowIndex: cellPosition.rowIndex
      };
      hasValidCells = this._isCellByPositionValid(checkingPosition);
    }
    return hasValidCells;
  }
  _hasValidCellAfterPosition(cellPosition) {
    var {
      columnIndex
    } = cellPosition;
    var hasValidCells = false;
    var visibleColumnCount = this._getVisibleColumnCount();
    while (columnIndex < visibleColumnCount - 1 && !hasValidCells) {
      var checkingPosition = {
        columnIndex: ++columnIndex,
        rowIndex: cellPosition.rowIndex
      };
      hasValidCells = this._isCellByPositionValid(checkingPosition);
    }
    return hasValidCells;
  }
  _isLastValidCell(cellPosition) {
    var nextColumnIndex = cellPosition.columnIndex >= 0 ? cellPosition.columnIndex + 1 : 0;
    var {
      rowIndex
    } = cellPosition;
    var checkingPosition = {
      columnIndex: nextColumnIndex,
      rowIndex
    };
    var visibleRows = this._dataController.getVisibleRows();
    var row = visibleRows && visibleRows[rowIndex];
    var isLastRow = this._isLastRow(rowIndex);
    if (!isLastRow) {
      return false;
    }
    var isFullRowFocus = "group" === (null === row || void 0 === row ? void 0 : row.rowType) || "groupFooter" === (null === row || void 0 === row ? void 0 : row.rowType);
    if (isFullRowFocus && cellPosition.columnIndex > 0) {
      return true;
    }
    if (cellPosition.columnIndex === this._getVisibleColumnCount() - 1) {
      return true;
    }
    if (this._isCellByPositionValid(checkingPosition)) {
      return false;
    }
    return this._isLastValidCell(checkingPosition);
  }
  _isCellValid($cell, isClick) {
    if (isElementDefined($cell)) {
      var $row = $cell.parent();
      var columnIndex = this._rowsView.getCellIndex($cell) + this._columnsController.getColumnIndexOffset();
      var column = this._getColumnByCellElement($cell);
      var visibleColumnCount = this._getVisibleColumnCount();
      var editingController = this._editingController;
      var isMasterDetailRow = isDetailRow($row);
      var isShowWhenGrouped = column && column.showWhenGrouped;
      var isDataCell = column && !$cell.hasClass(COMMAND_EXPAND_CLASS2) && isDataRow($row);
      var isDragCell2 = GridCoreKeyboardNavigationDom.isDragCell($cell);
      if (isDragCell2) {
        return false;
      }
      if (this._isMasterDetailCell($cell)) {
        return true;
      }
      if (visibleColumnCount > columnIndex && (!isMasterDetailRow && column && (!isDefined(column.groupIndex) || isShowWhenGrouped && isDataCell) || parseInt($cell.attr("colspan"), 10) > 1)) {
        var rowItems = this._dataController.items();
        var visibleRowIndex = this._rowsView.getRowIndex($row);
        var row = rowItems[visibleRowIndex];
        var isCellEditing = editingController && this._isCellEditMode() && editingController.isEditing();
        var isRowEditingInCurrentRow = editingController && editingController.isEditRow(visibleRowIndex);
        var isEditing = isRowEditingInCurrentRow || isCellEditing;
        if (column.command) {
          if (this._isLegacyNavigation()) {
            return !isEditing && "expand" === column.command;
          }
          if (isCellEditing) {
            return false;
          }
          if (isRowEditingInCurrentRow) {
            return "select" !== column.command;
          }
          return !isEditing;
        }
        if (isCellEditing && row && "data" !== row.rowType) {
          return false;
        }
        return !isEditing || column.allowEditing || isClick;
      }
    }
  }
  getFirstValidCellInRow($row, columnIndex) {
    var $cells = $row.find("> td");
    var $cell;
    var $result;
    columnIndex = columnIndex || 0;
    for (var i = columnIndex; i < $cells.length; ++i) {
      $cell = $cells.eq(i);
      if (this._isCellValid($cell)) {
        $result = $cell;
        break;
      }
    }
    return $result;
  }
  _getNextCell(keyCode, elementType, cellPosition) {
    var focusedCellPosition = cellPosition || this._focusedCellPosition;
    var isRowFocusType = this.isRowFocusType();
    var includeCommandCells = isRowFocusType || ["next", "previous"].includes(keyCode);
    var $cell;
    var $row;
    if (this._focusedView && focusedCellPosition) {
      var newFocusedCellPosition = this._getNewPositionByCode(focusedCellPosition, elementType, keyCode);
      $cell = renderer_default(this._getCell(newFocusedCellPosition));
      var isLastCellOnDirection = "previous" === keyCode ? this._isFirstValidCell(newFocusedCellPosition) : this._isLastValidCell(newFocusedCellPosition);
      if (isElementDefined($cell) && !this._isCellValid($cell) && this._isCellInRow(newFocusedCellPosition, includeCommandCells) && !isLastCellOnDirection) {
        if (isRowFocusType) {
          $cell = this.getFirstValidCellInRow($cell.parent(), newFocusedCellPosition.columnIndex);
        } else {
          $cell = this._getNextCell(keyCode, "cell", newFocusedCellPosition);
        }
      }
      $row = isElementDefined($cell) && $cell.parent();
      if (this._hasSkipRow($row)) {
        var rowIndex = this._getRowIndex($row);
        if (!this._isLastRow(rowIndex)) {
          $cell = this._getNextCell(keyCode, "row", {
            columnIndex: focusedCellPosition.columnIndex,
            rowIndex
          });
        } else {
          return null;
        }
      }
      return isElementDefined($cell) ? $cell : null;
    }
    return null;
  }
  _startEditing(eventArgs, fastEditingKey) {
    var focusedCellPosition = this._focusedCellPosition;
    var visibleRowIndex = this.getVisibleRowIndex();
    var visibleColumnIndex = this.getVisibleColumnIndex();
    var row = this._dataController.items()[visibleRowIndex];
    var column = this._columnsController.getVisibleColumns()[visibleColumnIndex];
    if (this._isAllowEditing(row, column)) {
      if (this._isRowEditMode()) {
        this._editingController.editRow(visibleRowIndex);
      } else if (focusedCellPosition) {
        this._startEditCell(eventArgs, fastEditingKey);
      }
    }
  }
  _isAllowEditing(row, column) {
    return this._editingController.allowUpdating({
      row
    }) && column && column.allowEditing;
  }
  _editFocusedCell() {
    var rowIndex = this.getVisibleRowIndex();
    var colIndex = this.getVisibleColumnIndex();
    return this._editingController.editCell(rowIndex, colIndex);
  }
  _startEditCell(eventArgs, fastEditingKey) {
    this._fastEditingStarted = isDefined(fastEditingKey);
    var editResult = this._editFocusedCell();
    var isEditResultDeferred = isDeferred(editResult);
    var isFastEditingStarted = this._isFastEditingStarted();
    if (!isFastEditingStarted || !isEditResultDeferred && !editResult) {
      return;
    }
    var editorValue = isEditResultDeferred && fastEditingKey === FAST_EDITING_DELETE_KEY ? "" : fastEditingKey;
    var editResultDeferred = isEditResultDeferred ? editResult : Deferred().resolve();
    var waitTemplatesDeferred = this._rowsView.waitAsyncTemplates(true);
    when(editResultDeferred, waitTemplatesDeferred).done(() => {
      this._editingCellHandler(eventArgs, editorValue);
    });
  }
  _editingCellHandler(eventArgs, editorValue) {
    var _a2, _b2;
    var $input = this._getFocusedCell().find(INTERACTIVE_ELEMENTS_SELECTOR).eq(0);
    var $inputElement = $input.get(0);
    if (!$inputElement) {
      return;
    }
    var keyDownEvent = createEvent(eventArgs, {
      type: "keydown",
      target: $inputElement
    });
    var keyPressEvent = createEvent(eventArgs, {
      type: "keypress",
      target: $inputElement
    });
    var inputEvent = createEvent(eventArgs, {
      type: "input",
      target: $inputElement
    });
    if (inputEvent.originalEvent) {
      inputEvent.originalEvent = createEvent(inputEvent.originalEvent, {
        data: editorValue
      });
    }
    null === (_b2 = (_a2 = $inputElement).select) || void 0 === _b2 ? void 0 : _b2.call(_a2);
    events_engine_default.trigger($input, keyDownEvent);
    if (!keyDownEvent.isDefaultPrevented()) {
      events_engine_default.trigger($input, keyPressEvent);
      if (!keyPressEvent.isDefaultPrevented()) {
        var timeout = browser_default.mozilla ? 25 : 0;
        setTimeout(() => {
          var inputValue = this._getKeyPressInputValue($input, editorValue);
          $input.val(inputValue);
          var $widgetContainer = $input.closest(".".concat(WIDGET_CLASS5));
          events_engine_default.off($widgetContainer, "focusout");
          events_engine_default.one($widgetContainer, "focusout", () => {
            events_engine_default.trigger($input, "change");
          });
          events_engine_default.trigger($input, inputEvent);
        }, timeout);
      }
    }
  }
  _getKeyPressInputValue($input, editorValue) {
    var inputCurrentValue = $input.val();
    return "-" === editorValue && "-0" === inputCurrentValue ? "-0" : editorValue;
  }
  _fireFocusChangingEvents($event, $cell, fireRowEvent, isHighlighted) {
    var _a2;
    var args = {};
    var cellPosition = null !== (_a2 = this._getCellPosition($cell)) && void 0 !== _a2 ? _a2 : {};
    if (this.isCellFocusType()) {
      args = this._fireFocusedCellChanging($event, $cell, isHighlighted);
      if (!args.cancel) {
        cellPosition.columnIndex = args.newColumnIndex;
        cellPosition.rowIndex = args.newRowIndex;
        isHighlighted = args.isHighlighted;
        $cell = renderer_default(this._getCell(cellPosition));
      }
    }
    if (!args.cancel && fireRowEvent && $cell) {
      args = this._fireFocusedRowChanging($event, $cell.parent());
      if (!args.cancel) {
        cellPosition.rowIndex = args.newRowIndex;
        args.isHighlighted = isHighlighted;
      }
    }
    args.$newCellElement = renderer_default(this._getCell(cellPosition));
    if (!args.$newCellElement.length) {
      args.$newCellElement = $cell;
    }
    return args;
  }
  _fireFocusedCellChanging($event, $cellElement, isHighlighted) {
    var prevColumnIndex = this.option("focusedColumnIndex");
    var prevRowIndex = this.option("focusedRowIndex");
    var cellPosition = this._getCellPosition($cellElement);
    var columnIndex = cellPosition ? cellPosition.columnIndex : -1;
    var rowIndex = cellPosition ? cellPosition.rowIndex : -1;
    var visibleRows = this._dataController.getVisibleRows();
    var visibleColumns = this._columnsController.getVisibleColumns();
    var args = {
      cellElement: $cellElement,
      prevColumnIndex,
      prevRowIndex,
      newColumnIndex: columnIndex,
      newRowIndex: rowIndex,
      rows: visibleRows,
      columns: visibleColumns,
      event: $event,
      isHighlighted: isHighlighted || false,
      cancel: false
    };
    this._canceledCellPosition = null;
    this.executeAction("onFocusedCellChanging", args);
    if (args.newColumnIndex !== columnIndex || args.newRowIndex !== rowIndex) {
      args.$newCellElement = renderer_default(this._getCell({
        columnIndex: args.newColumnIndex,
        rowIndex: args.newRowIndex
      }));
    }
    if (args.cancel) {
      this._canceledCellPosition = {
        rowIndex,
        columnIndex
      };
    }
    return args;
  }
  _fireFocusedCellChanged($cell) {
    var columnIndex = this._rowsView.getCellIndex($cell);
    var rowOptions = null === $cell || void 0 === $cell ? void 0 : $cell.parent().data("options");
    var focusedRowKey = null === rowOptions || void 0 === rowOptions ? void 0 : rowOptions.key;
    this._memoFireFocusedCellChanged(focusedRowKey, columnIndex);
  }
  _memoFireFocusedCellChanged(rowKey, columnIndex) {
    var $cell = this._getFocusedCell();
    var rowIndex = this._getRowIndex(null === $cell || void 0 === $cell ? void 0 : $cell.parent());
    var localRowIndex = Math.min(rowIndex - this._dataController.getRowIndexOffset(), this._dataController.items().length - 1);
    var isEditingCell2 = this._editingController.isEditCell(localRowIndex, columnIndex);
    if (isEditingCell2) {
      return;
    }
    var row = this._dataController.items()[localRowIndex];
    var column = this._columnsController.getVisibleColumns()[columnIndex];
    this.executeAction("onFocusedCellChanged", {
      cellElement: $cell ? getPublicElement($cell) : void 0,
      columnIndex,
      rowIndex,
      row,
      column
    });
  }
  _fireFocusedRowChanging(eventArgs, $newFocusedRow) {
    var newRowIndex = this._getRowIndex($newFocusedRow);
    var prevFocusedRowIndex = this.option("focusedRowIndex");
    var loadingOperationTypes = this._dataController.loadingOperationTypes();
    var args = {
      rowElement: $newFocusedRow,
      prevRowIndex: prevFocusedRowIndex,
      newRowIndex,
      event: eventArgs,
      rows: this._dataController.getVisibleRows(),
      cancel: false
    };
    var loadingOperations = loadingOperationTypes.sorting || loadingOperationTypes.grouping || loadingOperationTypes.filtering || loadingOperationTypes.paging;
    if (!this._dataController || this._dataController.isLoading() && loadingOperations) {
      args.cancel = true;
      return args;
    }
    if (this.option("focusedRowEnabled")) {
      this.executeAction("onFocusedRowChanging", args);
      if (!args.cancel && args.newRowIndex !== newRowIndex) {
        args.resetFocusedRow = args.newRowIndex < 0;
        if (!args.resetFocusedRow) {
          this.setFocusedRowIndex(args.newRowIndex);
        }
        args.rowIndexChanged = true;
      }
    }
    return args;
  }
  _fireFocusedRowChanged() {
    var _a2;
    var focusedRowEnabled = this.option("focusedRowEnabled");
    var focusedRowKey = this.option("focusedRowKey");
    var focusedRowIndex = null === (_a2 = this._focusController) || void 0 === _a2 ? void 0 : _a2.getFocusedRowIndexByKey(focusedRowKey);
    if (!focusedRowEnabled || isDefined(focusedRowKey) && focusedRowIndex < 0) {
      return;
    }
    this._memoFireFocusedRowChanged(focusedRowKey, focusedRowIndex);
  }
  _memoFireFocusedRowChanged(focusedRowKey, focusedRowIndex) {
    var localRowIndex = focusedRowIndex - this._dataController.getRowIndexOffset();
    this.executeAction("onFocusedRowChanged", {
      rowElement: focusedRowIndex < 0 ? void 0 : this._rowsView.getRowElement(localRowIndex),
      rowIndex: focusedRowIndex,
      row: focusedRowIndex < 0 ? void 0 : this._dataController.getVisibleRows()[localRowIndex]
    });
  }
  _isEventInCurrentGrid(event) {
    return m_utils_default.isElementInCurrentGrid(this, renderer_default(event.target));
  }
  _isRowEditMode() {
    var editMode = this._editingController.getEditMode();
    return editMode === EDIT_MODE_ROW || editMode === EDIT_MODE_FORM;
  }
  _isCellEditMode() {
    var editMode = this._editingController.getEditMode();
    return editMode === EDIT_MODE_CELL || editMode === EDIT_MODE_BATCH;
  }
  _isFastEditingAllowed() {
    return this._isCellEditMode() && this.option("keyboardNavigation.editOnKeyPress");
  }
  _getInteractiveElement($cell, isLast) {
    var $focusedElement = $cell.find(INTERACTIVE_ELEMENTS_SELECTOR).filter(":visible");
    return isLast ? $focusedElement.last() : $focusedElement.first();
  }
  _applyTabIndexToElement($element) {
    var _a2;
    var tabIndex = null !== (_a2 = this.option("tabIndex")) && void 0 !== _a2 ? _a2 : 0;
    $element.attr("tabindex", tabIndex);
  }
  _getCell(cellPosition) {
    if (this._focusedView && cellPosition) {
      var rowIndexOffset = this._dataController.getRowIndexOffset();
      var column = this._columnsController.getVisibleColumns(null, true)[cellPosition.columnIndex];
      var columnIndexOffset = column && column.fixed ? this._getFixedColumnIndexOffset(column) : this._columnsController.getColumnIndexOffset();
      var rowIndex = cellPosition.rowIndex >= 0 ? cellPosition.rowIndex - rowIndexOffset : -1;
      var columnIndex = cellPosition.columnIndex >= 0 ? cellPosition.columnIndex - columnIndexOffset : -1;
      return this._focusedView.getCell({
        rowIndex,
        columnIndex
      });
    }
  }
  _getRowIndex($row) {
    var rowIndex = this._rowsView.getRowIndex($row);
    if (rowIndex >= 0) {
      rowIndex += this._dataController.getRowIndexOffset();
    }
    return rowIndex;
  }
  _hasSkipRow($row) {
    var row = $row && $row.get(0);
    return row && ("none" === row.style.display || isDetailRow($row) && !$row.hasClass(this.addWidgetPrefix(EDIT_FORM_CLASS)));
  }
  _allowEditingOnEnterKey() {
    return "startEdit" === this.option("keyboardNavigation.enterKeyAction");
  }
  _isLegacyNavigation() {
    return this.option("useLegacyKeyboardNavigation");
  }
  _getDirectionCodeByKey(key) {
    var directionCode;
    switch (key) {
      case "upArrow":
        directionCode = "prevRow";
        break;
      case "downArrow":
        directionCode = "nextRow";
        break;
      case "leftArrow":
        directionCode = this.option("rtlEnabled") ? "nextInRow" : "previousInRow";
        break;
      case "rightArrow":
        directionCode = this.option("rtlEnabled") ? "previousInRow" : "nextInRow";
    }
    return directionCode;
  }
  _isVirtualScrolling() {
    var scrollingMode = this.option("scrolling.mode");
    return "virtual" === scrollingMode || "infinite" === scrollingMode;
  }
  _isVirtualRowRender() {
    return this._isVirtualScrolling() || m_utils_default.isVirtualRowRendering(this);
  }
  _isVirtualColumnRender() {
    return "virtual" === this.option("scrolling.columnRenderingMode");
  }
  _scrollBy(left, top, rowIndex, $event) {
    var that = this;
    var scrollable = this._rowsView.getScrollable();
    if (that._focusedCellPosition) {
      scrollable.on("scroll", function scrollHandler() {
        scrollable.off("scroll", scrollHandler);
        setTimeout(that.restoreFocusableElement.bind(that, rowIndex, $event));
      });
    }
    return scrollable.scrollBy({
      left,
      top
    });
  }
  _isInsideEditForm(element) {
    var $editForm = renderer_default(element).closest(".".concat(this.addWidgetPrefix(EDIT_FORM_CLASS)));
    return $editForm.length && this.elementIsInsideGrid($editForm);
  }
  _isMasterDetailCell(element) {
    var $masterDetailCell = renderer_default(element).closest(".".concat(MASTER_DETAIL_CELL_CLASS2));
    return $masterDetailCell.length && this.elementIsInsideGrid($masterDetailCell);
  }
  _processNextCellInMasterDetail($nextCell, _$cell) {
    if (!this._isInsideEditForm($nextCell) && $nextCell) {
      this._applyTabIndexToElement($nextCell);
    }
  }
  _handleTabKeyOnMasterDetailCell(target, direction) {
    if (this._isMasterDetailCell(target)) {
      this._updateFocusedCellPosition(renderer_default(target), direction);
      var $nextCell = this._getNextCell(direction, "row");
      this._processNextCellInMasterDetail($nextCell, renderer_default(target));
      return true;
    }
    return false;
  }
  _getElementType(target) {
    return renderer_default(target).is("tr") ? "row" : "cell";
  }
  _isFastEditingStarted() {
    return this._isFastEditingAllowed() && this._fastEditingStarted;
  }
  _getVisibleColumnCount() {
    return this._columnsController.getVisibleColumns(null, true).length;
  }
  _isCellInRow(cellPosition, includeCommandCells) {
    var {
      columnIndex
    } = cellPosition;
    var visibleColumnsCount = this._getVisibleColumnCount();
    return includeCommandCells ? columnIndex >= 0 && columnIndex <= visibleColumnsCount - 1 : columnIndex > 0 && columnIndex < visibleColumnsCount - 1;
  }
  _isCellElement($element) {
    return $element.length && "TD" === $element[0].tagName;
  }
  _getCellElementFromTarget(target) {
    var elementType = this._getElementType(target);
    var $targetElement = renderer_default(target);
    var $cell;
    if ("cell" === elementType) {
      $cell = $targetElement.closest(".".concat(ROW_CLASS4, " > td"));
    } else {
      $cell = $targetElement.children().not(".".concat(COMMAND_EXPAND_CLASS2)).first();
    }
    return $cell;
  }
  _getRowsViewElement() {
    var _a2;
    return null === (_a2 = this._rowsView) || void 0 === _a2 ? void 0 : _a2.element();
  }
  isKeyboardEnabled() {
    return this.option("keyboardNavigation.enabled");
  }
  _processCanceledEditCellPosition(rowIndex, columnIndex) {
    if (this._canceledCellPosition) {
      var isCanceled = this._canceledCellPosition.rowIndex === rowIndex && this._canceledCellPosition.columnIndex === columnIndex;
      this._canceledCellPosition = null;
      return isCanceled;
    }
    return;
  }
  updateFocusedRowIndex() {
    var dataController2 = this._dataController;
    var visibleRowIndex = this.getVisibleRowIndex();
    var visibleItems = dataController2.items();
    var lastVisibleIndex = visibleItems.length ? visibleItems.length - 1 : -1;
    var rowIndexOffset = dataController2.getRowIndexOffset();
    if (lastVisibleIndex >= 0 && visibleRowIndex > lastVisibleIndex) {
      this.setFocusedRowIndex(lastVisibleIndex + rowIndexOffset);
    }
  }
};
var keyboardNavigationModule = {
  defaultOptions: () => ({
    useLegacyKeyboardNavigation: false,
    keyboardNavigation: {
      enabled: true,
      enterKeyAction: "startEdit",
      enterKeyDirection: "none",
      editOnKeyPress: false
    }
  }),
  controllers: {
    keyboardNavigation: KeyboardNavigationController
  },
  extenders: {
    views: {
      rowsView: {
        init() {
          this.callBase();
          this._keyboardController = this.getController("keyboardNavigation");
        },
        _rowClick(e) {
          var editRowIndex = this.getController("editing").getEditRowIndex();
          var isKeyboardEnabled = this._keyboardController.isKeyboardEnabled();
          if (editRowIndex === e.rowIndex) {
            this._keyboardController.setCellFocusType();
          }
          var needTriggerPointerEventHandler = (isMobile() || !isKeyboardEnabled) && this.option("focusedRowEnabled");
          if (needTriggerPointerEventHandler) {
            this._triggerPointerDownEventHandler(e, !isKeyboardEnabled);
          }
          this.callBase.apply(this, arguments);
        },
        _triggerPointerDownEventHandler(e, force) {
          var {
            originalEvent
          } = e.event;
          if (originalEvent) {
            var $cell = renderer_default(originalEvent.target);
            var columnIndex = this.getCellIndex($cell);
            var column = this.getController("columns").getVisibleColumns()[columnIndex];
            var row = this.getController("data").items()[e.rowIndex];
            if (this._keyboardController._isAllowEditing(row, column) || force) {
              var eventArgs = createEvent(originalEvent, {
                currentTarget: originalEvent.target
              });
              this._keyboardController._pointerEventHandler(eventArgs);
            }
          }
        },
        renderFocusState(params) {
          var {
            preventScroll,
            pageSizeChanged
          } = null !== params && void 0 !== params ? params : {};
          var $rowsViewElement = this.element();
          if ($rowsViewElement && !focused($rowsViewElement)) {
            $rowsViewElement.attr("tabindex", null);
          }
          pageSizeChanged && this._keyboardController.updateFocusedRowIndex();
          var rowIndex = this._keyboardController.getVisibleRowIndex();
          if (!isDefined(rowIndex) || rowIndex < 0) {
            rowIndex = 0;
          }
          var cellElements = this.getCellElements(rowIndex);
          if (this._keyboardController.isKeyboardEnabled() && (null === cellElements || void 0 === cellElements ? void 0 : cellElements.length)) {
            this.updateFocusElementTabIndex(cellElements, preventScroll);
          }
        },
        updateFocusElementTabIndex(cellElements) {
          var $row = cellElements.eq(0).parent();
          if (isGroupRow2($row)) {
            this._keyboardController._applyTabIndexToElement($row);
          } else {
            var columnIndex = this._keyboardController.getColumnIndex();
            if (!isDefined(columnIndex) || columnIndex < 0) {
              columnIndex = 0;
            }
            this._updateFocusedCellTabIndex(cellElements, columnIndex);
          }
        },
        _updateFocusedCellTabIndex(cellElements, columnIndex) {
          var keyboardController = this._keyboardController;
          var cellElementsLength = cellElements ? cellElements.length : -1;
          var updateCellTabIndex = function($cell2) {
            var isMasterDetailCell = keyboardController._isMasterDetailCell($cell2);
            var isValidCell = keyboardController._isCellValid($cell2);
            if (!isMasterDetailCell && isValidCell && keyboardController._isCellElement($cell2)) {
              keyboardController._applyTabIndexToElement($cell2);
              keyboardController.setCellFocusType();
              return true;
            }
            return;
          };
          var $cell = GridCoreKeyboardNavigationDom.getCellToFocus(cellElements, columnIndex);
          if ($cell.length) {
            updateCellTabIndex($cell);
          } else {
            if (cellElementsLength <= columnIndex) {
              columnIndex = cellElementsLength - 1;
            }
            for (var i = columnIndex; i < cellElementsLength; ++i) {
              if (updateCellTabIndex(renderer_default(cellElements[i]))) {
                break;
              }
            }
          }
        },
        renderDelayedTemplates(change) {
          this.callBase.apply(this, arguments);
          this._renderFocusByChange(change);
        },
        _renderFocusByChange(change) {
          var _a2;
          var {
            operationTypes,
            repaintChangesOnly
          } = null !== change && void 0 !== change ? change : {};
          var {
            fullReload,
            pageSize
          } = null !== operationTypes && void 0 !== operationTypes ? operationTypes : {};
          var hasInsertsOrRemoves = !!(null === (_a2 = null === change || void 0 === change ? void 0 : change.changeTypes) || void 0 === _a2 ? void 0 : _a2.find((changeType) => "insert" === changeType || "remove" === changeType));
          if (!change || !repaintChangesOnly || fullReload || pageSize || hasInsertsOrRemoves) {
            var preventScroll = shouldPreventScroll(this);
            this.renderFocusState({
              preventScroll,
              pageSizeChanged: pageSize
            });
          }
        },
        _renderCore(change) {
          var deferred = this.callBase.apply(this, arguments);
          this._renderFocusByChange(change);
          return deferred;
        },
        _editCellPrepared($cell) {
          var _a2;
          var editorInstance = this._getEditorInstance($cell);
          var isEditingNavigationMode = null === (_a2 = this._keyboardController) || void 0 === _a2 ? void 0 : _a2._isFastEditingStarted();
          if (editorInstance && isEditingNavigationMode) {
            this._handleEditingNavigationMode(editorInstance);
          }
          this.callBase.apply(this, arguments);
        },
        _handleEditingNavigationMode(editorInstance) {
          ["downArrow", "upArrow"].forEach((keyName) => {
            var originalKeyHandler = editorInstance._supportedKeys()[keyName];
            editorInstance.registerKeyHandler(keyName, (e) => {
              var isDropDownOpened = "true" === editorInstance._input().attr("aria-expanded");
              if (isDropDownOpened) {
                return originalKeyHandler && originalKeyHandler.call(editorInstance, e);
              }
            });
          });
          editorInstance.registerKeyHandler("leftArrow", noop2);
          editorInstance.registerKeyHandler("rightArrow", noop2);
          var isDateBoxWithMask = editorInstance.NAME === DATEBOX_WIDGET_NAME && editorInstance.option("useMaskBehavior");
          if (isDateBoxWithMask) {
            editorInstance.registerKeyHandler("enter", noop2);
          }
        },
        _getEditorInstance($cell) {
          var $editor = $cell.find(".dx-texteditor").eq(0);
          return m_utils_default.getWidgetInstance($editor);
        }
      }
    },
    controllers: {
      editing: {
        editCell(rowIndex, columnIndex) {
          var keyboardController = this.getController("keyboardNavigation");
          if (keyboardController._processCanceledEditCellPosition(rowIndex, columnIndex)) {
            return false;
          }
          var isCellEditing = this.callBase(rowIndex, columnIndex);
          if (isCellEditing) {
            keyboardController.setupFocusedView();
          }
          return isCellEditing;
        },
        editRow(rowIndex) {
          var keyboardController = this.getController("keyboardNavigation");
          var visibleColumnIndex = keyboardController.getVisibleColumnIndex();
          var column = this._columnsController.getVisibleColumns()[visibleColumnIndex];
          if (column && column.type || this.option("editing.mode") === EDIT_MODE_FORM) {
            keyboardController._resetFocusedCell();
          }
          this.callBase(rowIndex);
        },
        addRow(parentKey) {
          var keyboardController = this.getController("keyboardNavigation");
          keyboardController.setupFocusedView();
          keyboardController.setCellFocusType();
          return this.callBase.apply(this, arguments);
        },
        getFocusedCellInRow(rowIndex) {
          var keyboardNavigationController = this.getController("keyboardNavigation");
          var $cell = this.callBase(rowIndex);
          var rowIndexOffset = this._dataController.getRowIndexOffset();
          var focusedRowIndex = keyboardNavigationController._focusedCellPosition.rowIndex - rowIndexOffset;
          if (keyboardNavigationController.isKeyboardEnabled() && focusedRowIndex === rowIndex) {
            var $focusedCell = keyboardNavigationController._getFocusedCell();
            if (isElementDefined($focusedCell) && !$focusedCell.hasClass(COMMAND_EDIT_CLASS2)) {
              $cell = $focusedCell;
            }
          }
          return $cell;
        },
        _processCanceledEditingCell() {
          this.closeEditCell().done(() => {
            var keyboardNavigation2 = this.getController("keyboardNavigation");
            keyboardNavigation2._updateFocus();
          });
        },
        init() {
          this.callBase();
          this._keyboardNavigationController = this.getController("keyboardNavigation");
        },
        closeEditCell() {
          var keyboardNavigation2 = this._keyboardNavigationController;
          keyboardNavigation2._fastEditingStarted = false;
          var result2 = this.callBase.apply(this, arguments);
          keyboardNavigation2._updateFocus();
          return result2;
        },
        _delayedInputFocus() {
          this._keyboardNavigationController._isNeedScroll = true;
          this.callBase.apply(this, arguments);
        },
        _isEditingStart() {
          var keyboardNavigation2 = this.getController("keyboardNavigation");
          var cancel2 = this.callBase.apply(this, arguments);
          if (cancel2 && !keyboardNavigation2._isNeedFocus) {
            var $cell = keyboardNavigation2._getFocusedCell();
            keyboardNavigation2._focus($cell, true);
          }
          return cancel2;
        }
      },
      data: {
        _correctRowIndices(getRowIndexCorrection) {
          var keyboardNavigationController = this.getController("keyboardNavigation");
          var editorFactory2 = this.getController("editorFactory");
          var focusedCellPosition = keyboardNavigationController._focusedCellPosition;
          this.callBase.apply(this, arguments);
          if (focusedCellPosition && focusedCellPosition.rowIndex >= 0) {
            var focusedRowIndexCorrection = getRowIndexCorrection(focusedCellPosition.rowIndex);
            if (focusedRowIndexCorrection) {
              focusedCellPosition.rowIndex += focusedRowIndexCorrection;
              editorFactory2.refocus();
            }
          }
        },
        getMaxRowIndex() {
          var result2 = this.items().length - 1;
          var virtualItemsCount = this.virtualItemsCount();
          if (virtualItemsCount) {
            var rowIndexOffset = this.getRowIndexOffset();
            result2 += rowIndexOffset + virtualItemsCount.end;
          }
          return result2;
        }
      },
      adaptiveColumns: {
        _showHiddenCellsInView(_ref) {
          var {
            viewName: viewName2,
            $cells,
            isCommandColumn
          } = _ref;
          this.callBase.apply(this, arguments);
          viewName2 === COLUMN_HEADERS_VIEW && !isCommandColumn && $cells.each((_, cellElement) => {
            var $cell = renderer_default(cellElement);
            isCellInHeaderRow($cell) && $cell.attr("tabindex", 0);
          });
        },
        _hideVisibleCellInView(_ref2) {
          var {
            viewName: viewName2,
            $cell,
            isCommandColumn
          } = _ref2;
          this.callBase.apply(this, arguments);
          if (viewName2 === COLUMN_HEADERS_VIEW && !isCommandColumn && isCellInHeaderRow($cell)) {
            $cell.removeAttr("tabindex");
          }
        }
      },
      keyboardNavigation: keyboardNavigationScrollableA11yExtender
    }
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/keyboard_navigation.js
m_core_default.registerModule("keyboardNavigation", keyboardNavigationModule);

// node_modules/devextreme/esm/__internal/grids/data_grid/m_aggregate_calculator.js
function depthFirstSearch(i, depth, root, callback) {
  var j = 0;
  if (i < depth) {
    for (; j < root.items.length; j++) {
      depthFirstSearch(i + 1, depth, root.items[j], callback);
    }
  }
  if (i === depth) {
    callback(root);
  }
}
function map2(array, callback) {
  var i;
  if ("map" in array) {
    return array.map(callback);
  }
  var result2 = new Array(array.length);
  for (i in array) {
    result2[i] = callback(array[i], i);
  }
  return result2;
}
function isEmpty2(x) {
  return x !== x || "" === x || null === x || void 0 === x;
}
function isCount(aggregator) {
  return aggregator === aggregators.count;
}
function normalizeAggregate(aggregate) {
  var selector = compileGetter(aggregate.selector);
  var skipEmptyValues = "skipEmptyValues" in aggregate ? aggregate.skipEmptyValues : true;
  var {
    aggregator
  } = aggregate;
  if ("string" === typeof aggregator) {
    aggregator = aggregators[aggregator];
    if (!aggregator) {
      throw errors.Error("E4001", aggregate.aggregator);
    }
  }
  return {
    selector,
    aggregator,
    skipEmptyValues
  };
}
var m_aggregate_calculator_default = class_default.inherit({
  ctor(options2) {
    this._data = options2.data;
    this._groupLevel = options2.groupLevel || 0;
    this._totalAggregates = map2(options2.totalAggregates || [], normalizeAggregate);
    this._groupAggregates = map2(options2.groupAggregates || [], normalizeAggregate);
    this._totals = [];
  },
  calculate() {
    if (this._totalAggregates.length) {
      this._calculateTotals(0, {
        items: this._data
      });
    }
    if (this._groupAggregates.length && this._groupLevel > 0) {
      this._calculateGroups({
        items: this._data
      });
    }
  },
  totalAggregates() {
    return this._totals;
  },
  _aggregate(aggregates, data3, container) {
    var length = data3.items ? data3.items.length : 0;
    for (var i = 0; i < aggregates.length; i++) {
      if (isCount(aggregates[i].aggregator)) {
        container[i] = (container[i] || 0) + length;
        continue;
      }
      for (var j = 0; j < length; j++) {
        this._accumulate(i, aggregates[i], container, data3.items[j]);
      }
    }
  },
  _calculateTotals(level, data3) {
    if (0 === level) {
      this._totals = this._seed(this._totalAggregates);
    }
    if (level === this._groupLevel) {
      this._aggregate(this._totalAggregates, data3, this._totals);
    } else {
      for (var i = 0; i < data3.items.length; i++) {
        this._calculateTotals(level + 1, data3.items[i]);
      }
    }
    if (0 === level) {
      this._totals = this._finalize(this._totalAggregates, this._totals);
    }
  },
  _calculateGroups(root) {
    var maxLevel = this._groupLevel;
    var currentLevel = maxLevel + 1;
    var seedFn = this._seed.bind(this, this._groupAggregates);
    var stepFn = this._aggregate.bind(this, this._groupAggregates);
    var finalizeFn = this._finalize.bind(this, this._groupAggregates);
    function aggregator(node) {
      node.aggregates = seedFn(currentLevel - 1);
      if (currentLevel === maxLevel) {
        stepFn(node, node.aggregates);
      } else {
        depthFirstSearch(currentLevel, maxLevel, node, (innerNode) => {
          stepFn(innerNode, node.aggregates);
        });
      }
      node.aggregates = finalizeFn(node.aggregates);
    }
    while (--currentLevel > 0) {
      depthFirstSearch(0, currentLevel, root, aggregator);
    }
  },
  _seed: (aggregates, groupIndex) => map2(aggregates, (aggregate) => {
    var {
      aggregator
    } = aggregate;
    var seed = "seed" in aggregator ? isFunction(aggregator.seed) ? aggregator.seed(groupIndex) : aggregator.seed : NaN;
    return seed;
  }),
  _accumulate(aggregateIndex, aggregate, results, item) {
    var value2 = aggregate.selector(item);
    var {
      aggregator
    } = aggregate;
    var {
      skipEmptyValues
    } = aggregate;
    if (skipEmptyValues && isEmpty2(value2)) {
      return;
    }
    if (results[aggregateIndex] !== results[aggregateIndex]) {
      results[aggregateIndex] = value2;
    } else {
      results[aggregateIndex] = aggregator.step(results[aggregateIndex], value2);
    }
  },
  _finalize: (aggregates, results) => map2(aggregates, (aggregate, index2) => {
    var fin = aggregate.aggregator.finalize;
    return fin ? fin(results[index2]) : results[index2];
  })
});

// node_modules/devextreme/esm/__internal/grids/data_grid/summary/m_summary.js
var DATAGRID_TOTAL_FOOTER_CLASS = "dx-datagrid-total-footer";
var DATAGRID_SUMMARY_ITEM_CLASS = "dx-datagrid-summary-item";
var DATAGRID_TEXT_CONTENT_CLASS = "dx-datagrid-text-content";
var DATAGRID_GROUP_FOOTER_CLASS2 = "dx-datagrid-group-footer";
var DATAGRID_GROUP_TEXT_CONTENT_CLASS = "dx-datagrid-group-text-content";
var DATAGRID_NOWRAP_CLASS = "dx-datagrid-nowrap";
var DATAGRID_FOOTER_ROW_CLASS = "dx-footer-row";
var DATAGRID_CELL_DISABLED = "dx-cell-focus-disabled";
var DATAGRID_GROUP_FOOTER_ROW_TYPE = "groupFooter";
var DATAGRID_TOTAL_FOOTER_ROW_TYPE = "totalFooter";
var renderSummaryCell = function(cell, options2) {
  var $cell = renderer_default(cell);
  var {
    column
  } = options2;
  var {
    summaryItems
  } = options2;
  var $summaryItems = [];
  if (!column.command && summaryItems) {
    for (var i = 0; i < summaryItems.length; i++) {
      var summaryItem = summaryItems[i];
      var text = m_core_default.getSummaryText(summaryItem, options2.summaryTexts);
      $summaryItems.push(renderer_default("<div>").css("textAlign", summaryItem.alignment || column.alignment).addClass(DATAGRID_SUMMARY_ITEM_CLASS).addClass(DATAGRID_TEXT_CONTENT_CLASS).addClass(summaryItem.cssClass).toggleClass(DATAGRID_GROUP_TEXT_CONTENT_CLASS, "group" === options2.rowType).text(text).attr("aria-label", "".concat(column.caption, " ").concat(text)));
    }
    $cell.append($summaryItems);
  }
};
var getSummaryCellOptions = function(that, options2) {
  var summaryTexts = that.option("summary.texts") || {};
  return {
    totalItem: options2.row,
    summaryItems: options2.row.summaryCells[options2.columnIndex],
    summaryTexts
  };
};
var getGroupAggregates = function(data3) {
  return data3.summary || data3.aggregates || [];
};
var recalculateWhileEditing = function(that) {
  return that.option("summary.recalculateWhileEditing");
};
var FooterView = ColumnsView.inherit({
  _getRows() {
    return this._dataController.footerItems();
  },
  _getCellOptions(options2) {
    return extend(this.callBase(options2), getSummaryCellOptions(this, options2));
  },
  _renderCellContent($cell, options2) {
    renderSummaryCell($cell, options2);
    this.callBase.apply(this, arguments);
  },
  _renderCore(change) {
    var needUpdateScrollLeft = false;
    var totalItem = this._dataController.footerItems()[0];
    if (!change || !change.columnIndices) {
      this.element().empty().addClass(DATAGRID_TOTAL_FOOTER_CLASS).toggleClass(DATAGRID_NOWRAP_CLASS, !this.option("wordWrapEnabled"));
      needUpdateScrollLeft = true;
    }
    if (totalItem && totalItem.summaryCells && totalItem.summaryCells.length) {
      this._updateContent(this._renderTable({
        change
      }), change);
      needUpdateScrollLeft && this._updateScrollLeftPosition();
    }
  },
  _updateContent($newTable, change) {
    if (change && "update" === change.changeType && change.columnIndices) {
      return this.waitAsyncTemplates().done(() => {
        var $row = this.getTableElement().find(".dx-row");
        var $newRow = $newTable.find(".dx-row");
        this._updateCells($row, $newRow, change.columnIndices[0]);
      });
    }
    return this.callBase.apply(this, arguments);
  },
  _rowClick(e) {
    var item = this._dataController.footerItems()[e.rowIndex] || {};
    this.executeAction("onRowClick", extend({}, e, item));
  },
  _columnOptionChanged(e) {
    var {
      optionNames
    } = e;
    if (e.changeTypes.grouping) {
      return;
    }
    if (optionNames.width || optionNames.visibleWidth) {
      this.callBase(e);
    }
  },
  _handleDataChanged(e) {
    var {
      changeType
    } = e;
    if ("update" === e.changeType && e.repaintChangesOnly) {
      if (!e.totalColumnIndices) {
        this.render();
      } else if (e.totalColumnIndices.length) {
        this.render(null, {
          changeType: "update",
          columnIndices: [e.totalColumnIndices]
        });
      }
    } else if ("refresh" === changeType || "append" === changeType || "prepend" === changeType) {
      this.render();
    }
  },
  _createRow(row) {
    var $row = this.callBase.apply(this, arguments);
    if (row.rowType === DATAGRID_TOTAL_FOOTER_ROW_TYPE) {
      $row.addClass(DATAGRID_FOOTER_ROW_CLASS);
      $row.addClass(DATAGRID_CELL_DISABLED);
      $row.attr("tabindex", 0);
    }
    return $row;
  },
  getHeight() {
    return this.getElementHeight();
  },
  isVisible() {
    return !!this._dataController.footerItems().length;
  }
});
var SummaryDataSourceAdapterExtender = {
  init() {
    this.callBase.apply(this, arguments);
    this._totalAggregates = [];
    this._summaryGetter = noop2;
  },
  summaryGetter(summaryGetter) {
    if (!arguments.length) {
      return this._summaryGetter;
    }
    if (isFunction(summaryGetter)) {
      this._summaryGetter = summaryGetter;
    }
  },
  summary(summary) {
    if (!arguments.length) {
      return this._summaryGetter();
    }
    this._summaryGetter = function() {
      return summary;
    };
  },
  totalAggregates() {
    return this._totalAggregates;
  },
  isLastLevelGroupItemsPagingLocal() {
    var summary = this.summary();
    var sortByGroupsInfo = summary && summary.sortByGroups();
    return sortByGroupsInfo && sortByGroupsInfo.length;
  },
  sortLastLevelGroupItems(items, groups, paths) {
    var groupedItems = store_helper_default.multiLevelGroup(query_default(items), groups).toArray();
    var result2 = [];
    paths.forEach((path) => {
      !function forEachGroup(groups2, groupCount, callback, path2) {
        path2 = path2 || [];
        for (var i = 0; i < groups2.length; i++) {
          path2.push(groups2[i].key);
          if (1 === groupCount) {
            callback(path2, groups2[i].items);
          } else {
            forEachGroup(groups2[i].items, groupCount - 1, callback, path2);
          }
          path2.pop();
        }
      }(groupedItems, groups.length, (itemsPath, items2) => {
        if (path.toString() === itemsPath.toString()) {
          result2 = result2.concat(items2);
        }
      });
    });
    return result2;
  }
};
var SummaryDataSourceAdapterClientExtender = /* @__PURE__ */ function() {
  var calculateAggregates = function(that, summary, data3, groupLevel) {
    var calculator;
    if (recalculateWhileEditing(that)) {
      var editingController = that.getController("editing");
      if (editingController) {
        var insertedData = editingController.getInsertedData();
        if (insertedData.length) {
          data3 = function applyAddedData(data4, insertedData2, groupLevel2) {
            if (groupLevel2) {
              return applyAddedData(data4, insertedData2.map((item) => ({
                items: [item]
              }), groupLevel2 - 1));
            }
            return data4.concat(insertedData2);
          }(data3, insertedData, groupLevel);
        }
        var removedData = editingController.getRemovedData();
        if (removedData.length) {
          data3 = function applyRemovedData(data4, removedData2, groupLevel2) {
            if (groupLevel2) {
              return data4.map((data5) => {
                var updatedData = {};
                var updatedItems = applyRemovedData(data5.items || [], removedData2, groupLevel2 - 1);
                Object.defineProperty(updatedData, "aggregates", {
                  get: () => data5.aggregates,
                  set: (value2) => {
                    data5.aggregates = value2;
                  }
                });
                return extend(updatedData, data5, {
                  items: updatedItems
                });
              });
            }
            return data4.filter((data5) => removedData2.indexOf(data5) < 0);
          }(data3, removedData, groupLevel);
        }
      }
    }
    if (summary) {
      calculator = new m_aggregate_calculator_default({
        totalAggregates: summary.totalAggregates,
        groupAggregates: summary.groupAggregates,
        data: data3,
        groupLevel
      });
      calculator.calculate();
    }
    return calculator ? calculator.totalAggregates() : [];
  };
  var sortGroupsBySummary = function(data3, group, summary) {
    var sortByGroups = summary && summary.sortByGroups && summary.sortByGroups();
    if (sortByGroups && sortByGroups.length) {
      return function sortGroupsBySummaryCore(items, groups, sortByGroups2) {
        if (!items || !groups.length) {
          return items;
        }
        var group2 = groups[0];
        var sorts = sortByGroups2[0];
        var query2;
        if (group2 && sorts && sorts.length) {
          query2 = query_default(items);
          each(sorts, function(index2) {
            if (0 === index2) {
              query2 = query2.sortBy(this.selector, this.desc);
            } else {
              query2 = query2.thenBy(this.selector, this.desc);
            }
          });
          query2.enumerate().done((sortedItems) => {
            items = sortedItems;
          });
        }
        groups = groups.slice(1);
        sortByGroups2 = sortByGroups2.slice(1);
        if (groups.length && sortByGroups2.length) {
          each(items, function() {
            this.items = sortGroupsBySummaryCore(this.items, groups, sortByGroups2);
          });
        }
        return items;
      }(data3, group, sortByGroups);
    }
    return data3;
  };
  return {
    _customizeRemoteOperations(options2) {
      var summary = this.summary();
      if (summary) {
        if (options2.remoteOperations.summary) {
          if (!options2.isCustomLoading || options2.storeLoadOptions.isLoadingAll) {
            if (options2.storeLoadOptions.group) {
              if (options2.remoteOperations.grouping) {
                options2.storeLoadOptions.groupSummary = summary.groupAggregates;
              } else if (summary.groupAggregates.length) {
                options2.remoteOperations.paging = false;
              }
            }
            options2.storeLoadOptions.totalSummary = summary.totalAggregates;
          }
        } else if (summary.totalAggregates.length || summary.groupAggregates.length && options2.storeLoadOptions.group) {
          options2.remoteOperations.paging = false;
        }
      }
      this.callBase.apply(this, arguments);
      var cachedExtra = options2.cachedData.extra;
      if (cachedExtra && cachedExtra.summary && !options2.isCustomLoading) {
        options2.storeLoadOptions.totalSummary = void 0;
      }
    },
    _handleDataLoadedCore(options2) {
      var _a2, _b2;
      var groups = normalizeSortingInfo(options2.storeLoadOptions.group || options2.loadOptions.group || []);
      var remoteOperations = options2.remoteOperations || {};
      var summary = this.summaryGetter()(remoteOperations);
      if (!options2.isCustomLoading || options2.storeLoadOptions.isLoadingAll) {
        if (remoteOperations.summary) {
          if (!remoteOperations.paging && groups.length && summary) {
            if (!remoteOperations.grouping) {
              calculateAggregates(this, {
                groupAggregates: summary.groupAggregates
              }, options2.data, groups.length);
            }
            options2.data = sortGroupsBySummary(options2.data, groups, summary);
          }
        } else if (!remoteOperations.paging && summary) {
          var operationTypes = options2.operationTypes || {};
          var hasOperations = Object.keys(operationTypes).some((type2) => operationTypes[type2]);
          if (!hasOperations || !(null === (_b2 = null === (_a2 = options2.cachedData) || void 0 === _a2 ? void 0 : _a2.extra) || void 0 === _b2 ? void 0 : _b2.summary) || groups.length && summary.groupAggregates.length) {
            var totalAggregates = calculateAggregates(this, summary, options2.data, groups.length);
            options2.extra = isPlainObject(options2.extra) ? options2.extra : {};
            options2.extra.summary = totalAggregates;
            if (options2.cachedData) {
              options2.cachedData.extra = options2.extra;
            }
          }
          options2.data = sortGroupsBySummary(options2.data, groups, summary);
        }
      }
      if (!options2.isCustomLoading) {
        this._totalAggregates = options2.extra && options2.extra.summary || this._totalAggregates;
      }
      this.callBase(options2);
    }
  };
}();
m_data_source_adapter_default2.extend(SummaryDataSourceAdapterExtender);
m_data_source_adapter_default2.extend(SummaryDataSourceAdapterClientExtender);
m_core_default.registerModule("summary", {
  defaultOptions: () => ({
    summary: {
      groupItems: void 0,
      totalItems: void 0,
      calculateCustomSummary: void 0,
      skipEmptyValues: true,
      recalculateWhileEditing: false,
      texts: {
        sum: message_default.format("dxDataGrid-summarySum"),
        sumOtherColumn: message_default.format("dxDataGrid-summarySumOtherColumn"),
        min: message_default.format("dxDataGrid-summaryMin"),
        minOtherColumn: message_default.format("dxDataGrid-summaryMinOtherColumn"),
        max: message_default.format("dxDataGrid-summaryMax"),
        maxOtherColumn: message_default.format("dxDataGrid-summaryMaxOtherColumn"),
        avg: message_default.format("dxDataGrid-summaryAvg"),
        avgOtherColumn: message_default.format("dxDataGrid-summaryAvgOtherColumn"),
        count: message_default.format("dxDataGrid-summaryCount")
      }
    },
    sortByGroupSummaryInfo: void 0
  }),
  views: {
    footerView: FooterView
  },
  extenders: {
    controllers: {
      data: {
        _isDataColumn: (column) => column && (!isDefined(column.groupIndex) || column.showWhenGrouped),
        _isGroupFooterVisible() {
          var groupItems = this.option("summary.groupItems") || [];
          for (var i = 0; i < groupItems.length; i++) {
            var groupItem = groupItems[i];
            var column = this._columnsController.columnOption(groupItem.showInColumn || groupItem.column);
            if (groupItem.showInGroupFooter && this._isDataColumn(column)) {
              return true;
            }
          }
          return false;
        },
        _processGroupItems(items, groupCount, options2) {
          var data3 = options2 && options2.data;
          var result2 = this.callBase.apply(this, arguments);
          if (options2) {
            if (void 0 === options2.isGroupFooterVisible) {
              options2.isGroupFooterVisible = this._isGroupFooterVisible();
            }
            if (data3 && data3.items && options2.isGroupFooterVisible && (options2.collectContinuationItems || !data3.isContinuationOnNextPage)) {
              result2.push({
                rowType: DATAGRID_GROUP_FOOTER_ROW_TYPE,
                key: options2.path.slice(),
                data: data3,
                groupIndex: options2.path.length - 1,
                values: []
              });
            }
          }
          return result2;
        },
        _processGroupItem(groupItem, options2) {
          var that = this;
          if (!options2.summaryGroupItems) {
            options2.summaryGroupItems = that.option("summary.groupItems") || [];
          }
          if ("group" === groupItem.rowType) {
            var groupColumnIndex = -1;
            var afterGroupColumnIndex = -1;
            each(options2.visibleColumns, function(visibleIndex) {
              var prevColumn = options2.visibleColumns[visibleIndex - 1];
              if (groupItem.groupIndex === this.groupIndex) {
                groupColumnIndex = this.index;
              }
              if (visibleIndex > 0 && "expand" === prevColumn.command && "expand" !== this.command) {
                afterGroupColumnIndex = this.index;
              }
            });
            groupItem.summaryCells = this._calculateSummaryCells(options2.summaryGroupItems, getGroupAggregates(groupItem.data), options2.visibleColumns, (summaryItem, column) => {
              if (summaryItem.showInGroupFooter) {
                return -1;
              }
              if (summaryItem.alignByColumn && column && !isDefined(column.groupIndex) && column.index !== afterGroupColumnIndex) {
                return column.index;
              }
              return groupColumnIndex;
            }, true);
          }
          if (groupItem.rowType === DATAGRID_GROUP_FOOTER_ROW_TYPE) {
            groupItem.summaryCells = this._calculateSummaryCells(options2.summaryGroupItems, getGroupAggregates(groupItem.data), options2.visibleColumns, (summaryItem, column) => summaryItem.showInGroupFooter && that._isDataColumn(column) ? column.index : -1);
          }
          return groupItem;
        },
        _calculateSummaryCells(summaryItems, aggregates, visibleColumns, calculateTargetColumnIndex, isGroupRow3) {
          var that = this;
          var summaryCells = [];
          var summaryCellsByColumns = {};
          each(summaryItems, (summaryIndex, summaryItem) => {
            var column = that._columnsController.columnOption(summaryItem.column);
            var showInColumn = summaryItem.showInColumn && that._columnsController.columnOption(summaryItem.showInColumn) || column;
            var columnIndex = calculateTargetColumnIndex(summaryItem, showInColumn);
            if (columnIndex >= 0) {
              if (!summaryCellsByColumns[columnIndex]) {
                summaryCellsByColumns[columnIndex] = [];
              }
              var aggregate = aggregates[summaryIndex];
              if (aggregate === aggregate) {
                var valueFormat;
                if (isDefined(summaryItem.valueFormat)) {
                  valueFormat = summaryItem.valueFormat;
                } else if ("count" !== summaryItem.summaryType) {
                  valueFormat = m_core_default.getFormatByDataType(column && column.dataType);
                }
                summaryCellsByColumns[columnIndex].push(extend({}, summaryItem, {
                  value: isString(aggregate) && column && column.deserializeValue ? column.deserializeValue(aggregate) : aggregate,
                  valueFormat,
                  columnCaption: column && column.index !== columnIndex ? column.caption : void 0
                }));
              }
            }
          });
          if (!isEmptyObject(summaryCellsByColumns)) {
            visibleColumns.forEach((column, visibleIndex) => {
              var prevColumn = visibleColumns[visibleIndex - 1];
              var columnIndex = isGroupRow3 && ("expand" === (null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.command) || "expand" === column.command) ? null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.index : column.index;
              summaryCells.push(summaryCellsByColumns[columnIndex] || []);
            });
          }
          return summaryCells;
        },
        _getSummaryCells(summaryTotalItems, totalAggregates) {
          var that = this;
          var columnsController = that._columnsController;
          return that._calculateSummaryCells(summaryTotalItems, totalAggregates, columnsController.getVisibleColumns(), (summaryItem, column) => that._isDataColumn(column) ? column.index : -1);
        },
        _updateItemsCore(change) {
          var summaryCells;
          var dataSource = this._dataSource;
          var footerItems = this._footerItems;
          var oldSummaryCells = footerItems && footerItems[0] && footerItems[0].summaryCells;
          var summaryTotalItems = this.option("summary.totalItems");
          this._footerItems = [];
          if (dataSource && summaryTotalItems && summaryTotalItems.length) {
            var totalAggregates = dataSource.totalAggregates();
            summaryCells = this._getSummaryCells(summaryTotalItems, totalAggregates);
            if (change && change.repaintChangesOnly && oldSummaryCells) {
              change.totalColumnIndices = summaryCells.map((summaryCell, index2) => {
                if (JSON.stringify(summaryCell) !== JSON.stringify(oldSummaryCells[index2])) {
                  return index2;
                }
                return -1;
              }).filter((index2) => index2 >= 0);
            }
            if (summaryCells.length) {
              this._footerItems.push({
                rowType: DATAGRID_TOTAL_FOOTER_ROW_TYPE,
                summaryCells
              });
            }
          }
          this.callBase(change);
        },
        _prepareUnsavedDataSelector(selector) {
          if (recalculateWhileEditing(this)) {
            var editingController = this.getController("editing");
            if (editingController) {
              return function(data3) {
                data3 = editingController.getUpdatedData(data3);
                return selector(data3);
              };
            }
          }
          return selector;
        },
        _prepareAggregateSelector(selector, aggregator) {
          selector = this._prepareUnsavedDataSelector(selector);
          if ("avg" === aggregator || "sum" === aggregator) {
            return function(data3) {
              var value2 = selector(data3);
              return isDefined(value2) ? Number(value2) : value2;
            };
          }
          return selector;
        },
        _getAggregates(summaryItems, remoteOperations) {
          var that = this;
          var columnsController = that.getController("columns");
          var calculateCustomSummary = that.option("summary.calculateCustomSummary");
          var commonSkipEmptyValues = that.option("summary.skipEmptyValues");
          return map(summaryItems || [], (summaryItem) => {
            var column = columnsController.columnOption(summaryItem.column);
            var calculateCellValue = column && column.calculateCellValue ? column.calculateCellValue.bind(column) : compileGetter(column ? column.dataField : summaryItem.column);
            var aggregator = summaryItem.summaryType || "count";
            var skipEmptyValues = isDefined(summaryItem.skipEmptyValues) ? summaryItem.skipEmptyValues : commonSkipEmptyValues;
            if (remoteOperations) {
              return {
                selector: summaryItem.column,
                summaryType: aggregator
              };
            }
            var selector = that._prepareAggregateSelector(calculateCellValue, aggregator);
            if ("custom" === aggregator) {
              if (!calculateCustomSummary) {
                ui_errors_default.log("E1026");
                calculateCustomSummary = function() {
                };
              }
              var options2 = {
                component: that.component,
                name: summaryItem.name
              };
              calculateCustomSummary(options2);
              options2.summaryProcess = "calculate";
              aggregator = {
                seed(groupIndex) {
                  options2.summaryProcess = "start";
                  options2.totalValue = void 0;
                  options2.groupIndex = groupIndex;
                  delete options2.value;
                  calculateCustomSummary(options2);
                  return options2.totalValue;
                },
                step(totalValue, value2) {
                  options2.summaryProcess = "calculate";
                  options2.totalValue = totalValue;
                  options2.value = value2;
                  calculateCustomSummary(options2);
                  return options2.totalValue;
                },
                finalize(totalValue) {
                  options2.summaryProcess = "finalize";
                  options2.totalValue = totalValue;
                  delete options2.value;
                  calculateCustomSummary(options2);
                  return options2.totalValue;
                }
              };
            }
            return {
              selector,
              aggregator,
              skipEmptyValues
            };
          });
        },
        _addSortInfo(sortByGroups, groupColumn, selector, sortOrder) {
          if (groupColumn) {
            var {
              groupIndex
            } = groupColumn;
            sortOrder = sortOrder || groupColumn.sortOrder;
            if (isDefined(groupIndex)) {
              sortByGroups[groupIndex] = sortByGroups[groupIndex] || [];
              sortByGroups[groupIndex].push({
                selector,
                desc: "desc" === sortOrder
              });
            }
          }
        },
        _findSummaryItem(summaryItems, name2) {
          var summaryItemIndex = -1;
          if (isDefined(name2)) {
            each(summaryItems || [], function(index2) {
              if (this.name === name2 || index2 === name2 || this.summaryType === name2 || this.column === name2 || function(summaryItem) {
                var {
                  summaryType
                } = summaryItem;
                var {
                  column
                } = summaryItem;
                return summaryType && column && "".concat(summaryType, "_").concat(column);
              }(this) === name2) {
                summaryItemIndex = index2;
                return false;
              }
            });
          }
          return summaryItemIndex;
        },
        _getSummarySortByGroups(sortByGroupSummaryInfo, groupSummaryItems) {
          var that = this;
          var columnsController = that._columnsController;
          var groupColumns = columnsController.getGroupColumns();
          var sortByGroups = [];
          if (!groupSummaryItems || !groupSummaryItems.length) {
            return;
          }
          each(sortByGroupSummaryInfo || [], function() {
            var {
              sortOrder
            } = this;
            var {
              groupColumn
            } = this;
            var summaryItemIndex = that._findSummaryItem(groupSummaryItems, this.summaryItem);
            if (summaryItemIndex < 0) {
              return;
            }
            var selector = function(data3) {
              return getGroupAggregates(data3)[summaryItemIndex];
            };
            if (isDefined(groupColumn)) {
              groupColumn = columnsController.columnOption(groupColumn);
              that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder);
            } else {
              each(groupColumns, (groupIndex, groupColumn2) => {
                that._addSortInfo(sortByGroups, groupColumn2, selector, sortOrder);
              });
            }
          });
          return sortByGroups;
        },
        _createDataSourceAdapterCore(dataSource, remoteOperations) {
          var that = this;
          var dataSourceAdapter = this.callBase(dataSource, remoteOperations);
          dataSourceAdapter.summaryGetter((currentRemoteOperations) => that._getSummaryOptions(currentRemoteOperations || remoteOperations));
          return dataSourceAdapter;
        },
        _getSummaryOptions(remoteOperations) {
          var that = this;
          var groupSummaryItems = that.option("summary.groupItems");
          var totalSummaryItems = that.option("summary.totalItems");
          var sortByGroupSummaryInfo = that.option("sortByGroupSummaryInfo");
          var groupAggregates = that._getAggregates(groupSummaryItems, remoteOperations && remoteOperations.grouping && remoteOperations.summary);
          var totalAggregates = that._getAggregates(totalSummaryItems, remoteOperations && remoteOperations.summary);
          if (groupAggregates.length || totalAggregates.length) {
            return {
              groupAggregates,
              totalAggregates,
              sortByGroups: function() {
                return that._getSummarySortByGroups(sortByGroupSummaryInfo, groupSummaryItems);
              }
            };
          }
          return;
        },
        publicMethods() {
          var methods = this.callBase();
          methods.push("getTotalSummaryValue");
          return methods;
        },
        getTotalSummaryValue(summaryItemName) {
          var summaryItemIndex = this._findSummaryItem(this.option("summary.totalItems"), summaryItemName);
          var aggregates = this._dataSource.totalAggregates();
          if (aggregates.length && summaryItemIndex > -1) {
            return aggregates[summaryItemIndex];
          }
        },
        optionChanged(args) {
          if ("summary" === args.name || "sortByGroupSummaryInfo" === args.name) {
            args.name = "dataSource";
          }
          this.callBase(args);
        },
        init() {
          this._footerItems = [];
          this.callBase();
        },
        footerItems() {
          return this._footerItems;
        }
      },
      editing: {
        _refreshSummary() {
          if (recalculateWhileEditing(this) && !this.isSaving()) {
            this._dataController.refresh({
              load: true,
              changesOnly: true
            });
          }
        },
        _addChange(params) {
          var result2 = this.callBase.apply(this, arguments);
          if (params.type) {
            this._refreshSummary();
          }
          return result2;
        },
        _removeChange() {
          var result2 = this.callBase.apply(this, arguments);
          this._refreshSummary();
          return result2;
        },
        cancelEditData() {
          var result2 = this.callBase.apply(this, arguments);
          this._refreshSummary();
          return result2;
        }
      }
    },
    views: {
      rowsView: {
        _createRow(row) {
          var $row = this.callBase.apply(this, arguments);
          row && $row.addClass(row.rowType === DATAGRID_GROUP_FOOTER_ROW_TYPE ? DATAGRID_GROUP_FOOTER_CLASS2 : "");
          return $row;
        },
        _renderCells($row, options2) {
          this.callBase.apply(this, arguments);
          if ("group" === options2.row.rowType && options2.row.summaryCells && options2.row.summaryCells.length) {
            this._renderGroupSummaryCells($row, options2);
          }
        },
        _hasAlignByColumnSummaryItems: (columnIndex, options2) => !isDefined(options2.columns[columnIndex].groupIndex) && options2.row.summaryCells[columnIndex].length,
        _getAlignByColumnCellCount(groupCellColSpan, options2) {
          var alignByColumnCellCount = 0;
          for (var i = 1; i < groupCellColSpan; i++) {
            var columnIndex = options2.row.summaryCells.length - i;
            alignByColumnCellCount = this._hasAlignByColumnSummaryItems(columnIndex, options2) ? i : alignByColumnCellCount;
          }
          return alignByColumnCellCount;
        },
        _renderGroupSummaryCells($row, options2) {
          var $groupCell = $row.children().last();
          var groupCellColSpan = Number($groupCell.attr("colSpan")) || 1;
          var alignByColumnCellCount = this._getAlignByColumnCellCount(groupCellColSpan, options2);
          this._renderGroupSummaryCellsCore($groupCell, options2, groupCellColSpan, alignByColumnCellCount);
        },
        _renderGroupSummaryCellsCore($groupCell, options2, groupCellColSpan, alignByColumnCellCount) {
          if (alignByColumnCellCount > 0) {
            $groupCell.attr("colSpan", groupCellColSpan - alignByColumnCellCount);
            for (var i = 0; i < alignByColumnCellCount; i++) {
              var columnIndex = options2.columns.length - alignByColumnCellCount + i;
              this._renderCell($groupCell.parent(), extend({
                column: options2.columns[columnIndex],
                columnIndex: this._getSummaryCellIndex(columnIndex, options2.columns)
              }, options2));
            }
          }
        },
        _getSummaryCellIndex: (columnIndex) => columnIndex,
        _getCellTemplate(options2) {
          if (!options2.column.command && !isDefined(options2.column.groupIndex) && options2.summaryItems && options2.summaryItems.length) {
            return renderSummaryCell;
          }
          return this.callBase(options2);
        },
        _getCellOptions(options2) {
          var parameters = this.callBase(options2);
          if (options2.row.summaryCells) {
            return extend(parameters, getSummaryCellOptions(this, options2));
          }
          return parameters;
        }
      }
    }
  }
});

// node_modules/devextreme/esm/__internal/grids/grid_core/column_fixing/m_column_fixing.js
var CONTENT_CLASS5 = "content";
var CONTENT_FIXED_CLASS2 = "content-fixed";
var MASTER_DETAIL_CELL_CLASS3 = "dx-master-detail-cell";
var FIRST_CELL_CLASS = "dx-first-cell";
var LAST_CELL_CLASS = "dx-last-cell";
var HOVER_STATE_CLASS = "dx-state-hover";
var FIXED_COL_CLASS = "dx-col-fixed";
var FIXED_COLUMNS_CLASS = "dx-fixed-columns";
var POINTER_EVENTS_NONE_CLASS = "dx-pointer-events-none";
var COMMAND_TRANSPARENT2 = "transparent";
var GROUP_ROW_CLASS4 = "dx-group-row";
var DETAIL_ROW_CLASS2 = "dx-master-detail-row";
var getTransparentColumnIndex = function(fixedColumns) {
  var transparentColumnIndex = -1;
  each(fixedColumns, (index2, column) => {
    if (column.command === COMMAND_TRANSPARENT2) {
      transparentColumnIndex = index2;
      return false;
    }
    return;
  });
  return transparentColumnIndex;
};
var normalizeColumnWidths = function(fixedColumns, widths, fixedWidths) {
  var fixedColumnIndex = 0;
  if (fixedColumns && widths && fixedWidths) {
    for (var i = 0; i < fixedColumns.length; i++) {
      if (fixedColumns[i].command === COMMAND_TRANSPARENT2) {
        fixedColumnIndex += fixedColumns[i].colspan;
      } else {
        if (widths[fixedColumnIndex] < fixedWidths[i]) {
          widths[fixedColumnIndex] = fixedWidths[i];
        }
        fixedColumnIndex++;
      }
    }
  }
  return widths;
};
var baseFixedColumns = {
  init() {
    this.callBase();
    this._isFixedTableRendering = false;
    this._isFixedColumns = false;
  },
  _createCol(column) {
    return this.callBase(column).toggleClass(FIXED_COL_CLASS, !!(this._isFixedTableRendering && (column.fixed || column.command && column.command !== COMMAND_TRANSPARENT2)));
  },
  _correctColumnIndicesForFixedColumns(fixedColumns, change) {
    var transparentColumnIndex = getTransparentColumnIndex(fixedColumns);
    var transparentColspan = fixedColumns[transparentColumnIndex].colspan;
    var columnIndices = change && change.columnIndices;
    if (columnIndices) {
      change.columnIndices = columnIndices.map((columnIndices2) => {
        if (columnIndices2) {
          return columnIndices2.map((columnIndex) => {
            if (columnIndex < transparentColumnIndex) {
              return columnIndex;
            }
            if (columnIndex >= transparentColumnIndex + transparentColspan) {
              return columnIndex - transparentColspan + 1;
            }
            return -1;
          }).filter((columnIndex) => columnIndex >= 0);
        }
      });
    }
  },
  _partialUpdateFixedTable(fixedColumns) {
    var fixedTableElement = this._fixedTableElement;
    var $rows = this._getRowElementsCore(fixedTableElement);
    var $colgroup = fixedTableElement.children("colgroup");
    $colgroup.replaceWith(this._createColGroup(fixedColumns));
    for (var i = 0; i < $rows.length; i++) {
      this._partialUpdateFixedRow(renderer_default($rows[i]), fixedColumns);
    }
  },
  _partialUpdateFixedRow($row, fixedColumns) {
    var _a2;
    var cellElements = $row.get(0).childNodes;
    var transparentColumnIndex = getTransparentColumnIndex(fixedColumns);
    var transparentColumn = fixedColumns[transparentColumnIndex];
    var columnIndexOffset = this._columnsController.getColumnIndexOffset();
    var groupCellOptions;
    var colIndex = columnIndexOffset + 1;
    var {
      colspan
    } = transparentColumn;
    if ($row.hasClass(DETAIL_ROW_CLASS2)) {
      cellElements[0].setAttribute("colspan", null === (_a2 = this._columnsController.getVisibleColumns()) || void 0 === _a2 ? void 0 : _a2.length);
      return;
    }
    if ($row.hasClass(GROUP_ROW_CLASS4)) {
      groupCellOptions = this._getGroupCellOptions({
        row: $row.data("options"),
        columns: this._columnsController.getVisibleColumns()
      });
      colspan = groupCellOptions.colspan - Math.max(0, cellElements.length - (groupCellOptions.columnIndex + 2));
    }
    for (var j = 0; j < cellElements.length; j++) {
      var needUpdateColspan = groupCellOptions ? j === groupCellOptions.columnIndex + 1 : j === transparentColumnIndex;
      cellElements[j].setAttribute("aria-colindex", colIndex);
      if (needUpdateColspan) {
        cellElements[j].setAttribute("colspan", colspan);
        colIndex += colspan;
      } else {
        colIndex++;
      }
    }
  },
  _renderTable(options2) {
    var _a2;
    var $fixedTable;
    var fixedColumns = this.getFixedColumns();
    this._isFixedColumns = !!fixedColumns.length;
    var $table = this.callBase(options2);
    if (this._isFixedColumns) {
      var change = null === options2 || void 0 === options2 ? void 0 : options2.change;
      var $fixedDataRows = this._getRowElements(this._fixedTableElement);
      var needPartialUpdate = (null === change || void 0 === change ? void 0 : change.virtualColumnsScrolling) && $fixedDataRows.length === (null === (_a2 = null === change || void 0 === change ? void 0 : change.items) || void 0 === _a2 ? void 0 : _a2.length);
      this._isFixedTableRendering = true;
      if (needPartialUpdate && true !== this.option("scrolling.legacyMode")) {
        this._partialUpdateFixedTable(fixedColumns);
        this._isFixedTableRendering = false;
      } else {
        var columnIndices = null === change || void 0 === change ? void 0 : change.columnIndices;
        this._correctColumnIndicesForFixedColumns(fixedColumns, change);
        $fixedTable = this._createTable(fixedColumns);
        this._renderRows($fixedTable, extend({}, options2, {
          columns: fixedColumns
        }));
        this._updateContent($fixedTable, change, true);
        if (columnIndices) {
          change.columnIndices = columnIndices;
        }
        this._isFixedTableRendering = false;
      }
    } else {
      this._fixedTableElement && this._fixedTableElement.parent().remove();
      this._fixedTableElement = null;
    }
    return $table;
  },
  _renderRow($table, options2) {
    var fixedCorrection;
    var {
      cells
    } = options2.row;
    this.callBase.apply(this, arguments);
    if (this._isFixedTableRendering && cells && cells.length) {
      fixedCorrection = 0;
      var fixedCells = options2.row.cells || [];
      cells = cells.slice();
      options2.row.cells = cells;
      for (var i = 0; i < fixedCells.length; i++) {
        if (fixedCells[i].column && fixedCells[i].column.command === COMMAND_TRANSPARENT2) {
          fixedCorrection = (fixedCells[i].column.colspan || 1) - 1;
          continue;
        }
        cells[i + fixedCorrection] = fixedCells[i];
      }
    }
  },
  _createCell(options2) {
    var {
      column
    } = options2;
    var columnCommand = column && column.command;
    var {
      rowType
    } = options2;
    var $cell = this.callBase.apply(this, arguments);
    var fixedColumns;
    var prevFixedColumn;
    var transparentColumnIndex;
    if (this._isFixedTableRendering || "filter" === rowType) {
      fixedColumns = this.getFixedColumns();
      transparentColumnIndex = getTransparentColumnIndex(fixedColumns);
      prevFixedColumn = fixedColumns[transparentColumnIndex - 1];
    }
    if (this._isFixedTableRendering) {
      if (columnCommand === COMMAND_TRANSPARENT2) {
        $cell.addClass(POINTER_EVENTS_NONE_CLASS).toggleClass(FIRST_CELL_CLASS, 0 === transparentColumnIndex || prevFixedColumn && "expand" === prevFixedColumn.command).toggleClass(LAST_CELL_CLASS, fixedColumns.length && transparentColumnIndex === fixedColumns.length - 1);
        if ("freeSpace" !== rowType) {
          m_utils_default.setEmptyText($cell);
        }
      }
    } else if ("filter" === rowType) {
      $cell.toggleClass(FIRST_CELL_CLASS, options2.columnIndex === transparentColumnIndex);
    }
    var isRowAltStyle = this.option("rowAlternationEnabled") && options2.isAltRow;
    var isSelectAllCell = "multiple" === this.option("selection.mode") && 0 === options2.columnIndex && "header" === options2.rowType;
    if (browser_default.mozilla && options2.column.fixed && "group" !== options2.rowType && !isRowAltStyle && !isSelectAllCell) {
      $cell.addClass(FIXED_COL_CLASS);
    }
    return $cell;
  },
  _getContent(isFixedTableRendering) {
    var _a2;
    return isFixedTableRendering ? null === (_a2 = this._fixedTableElement) || void 0 === _a2 ? void 0 : _a2.parent() : this.callBase.apply(this, arguments);
  },
  _wrapTableInScrollContainer($table, isFixedTableRendering) {
    var $scrollContainer = this.callBase.apply(this, arguments);
    if (this._isFixedTableRendering || isFixedTableRendering) {
      $scrollContainer.addClass(this.addWidgetPrefix(CONTENT_FIXED_CLASS2));
    }
    return $scrollContainer;
  },
  _renderCellContent($cell, options2) {
    var isEmptyCell;
    var {
      column
    } = options2;
    var isFixedTableRendering = this._isFixedTableRendering;
    var isGroupCell = "group" === options2.rowType && isDefined(column.groupIndex);
    if (isFixedTableRendering && isGroupCell && !column.command && !column.groupCellTemplate) {
      $cell.css("pointerEvents", "none");
    }
    if (!isFixedTableRendering && this._isFixedColumns) {
      isEmptyCell = column.fixed || column.command && false !== column.fixed;
      if (isGroupCell) {
        isEmptyCell = false;
        if (options2.row.summaryCells && options2.row.summaryCells.length) {
          var columns2 = this._columnsController.getVisibleColumns();
          var alignByFixedColumnCellCount = this._getAlignByColumnCellCount ? this._getAlignByColumnCellCount(column.colspan, {
            columns: columns2,
            row: options2.row,
            isFixed: true
          }) : 0;
          if (alignByFixedColumnCellCount > 0) {
            var transparentColumnIndex = getTransparentColumnIndex(this._columnsController.getFixedColumns());
            isEmptyCell = columns2.length - alignByFixedColumnCellCount < transparentColumnIndex;
          }
        }
      }
      if (isEmptyCell) {
        if (column.command && "buttons" !== column.type || "group" === options2.rowType) {
          $cell.html("&nbsp;").addClass(column.cssClass);
          return;
        }
        $cell.addClass("dx-hidden-cell");
      }
    }
    if (column.command !== COMMAND_TRANSPARENT2) {
      this.callBase.apply(this, arguments);
    }
  },
  _getCellElementsCore(rowIndex) {
    var cellElements = this.callBase.apply(this, arguments);
    var isGroupRow3 = null === cellElements || void 0 === cellElements ? void 0 : cellElements.parent().hasClass(GROUP_ROW_CLASS4);
    var headerRowIndex = "columnHeadersView" === this.name ? rowIndex : void 0;
    if (this._fixedTableElement && cellElements) {
      var fixedColumns = this.getFixedColumns(headerRowIndex);
      var fixedCellElements = this._getRowElements(this._fixedTableElement).eq(rowIndex).children("td");
      each(fixedCellElements, (columnIndex, cell) => {
        if (isGroupRow3) {
          if (cellElements[columnIndex] && "hidden" !== cell.style.visibility) {
            cellElements[columnIndex] = cell;
          }
        } else {
          var fixedColumn = fixedColumns[columnIndex];
          if (fixedColumn) {
            if (fixedColumn.command === COMMAND_TRANSPARENT2) {
              if (fixedCellElements.eq(columnIndex).hasClass(MASTER_DETAIL_CELL_CLASS3)) {
                cellElements[columnIndex] = cell || cellElements[columnIndex];
              }
            } else {
              var fixedColumnIndex = this._columnsController.getVisibleIndexByColumn(fixedColumn, headerRowIndex);
              cellElements[fixedColumnIndex] = cell || cellElements[fixedColumnIndex];
            }
          }
        }
      });
    }
    return cellElements;
  },
  getColumnWidths() {
    var result2 = this.callBase();
    var fixedColumns = this.getFixedColumns();
    var fixedWidths = this._fixedTableElement && result2.length ? this.callBase(this._fixedTableElement) : void 0;
    return normalizeColumnWidths(fixedColumns, result2, fixedWidths);
  },
  getTableElement(isFixedTableRendering) {
    isFixedTableRendering = this._isFixedTableRendering || isFixedTableRendering;
    var tableElement = isFixedTableRendering ? this._fixedTableElement : this.callBase();
    return tableElement;
  },
  setTableElement(tableElement, isFixedTableRendering) {
    if (this._isFixedTableRendering || isFixedTableRendering) {
      this._fixedTableElement = tableElement.addClass(POINTER_EVENTS_NONE_CLASS);
    } else {
      this.callBase(tableElement);
    }
  },
  getColumns(rowIndex) {
    var $tableElement = this.getTableElement();
    if (this._isFixedTableRendering) {
      return this.getFixedColumns(rowIndex);
    }
    return this.callBase(rowIndex, $tableElement);
  },
  getRowIndex($row) {
    var $fixedTable = this._fixedTableElement;
    if ($fixedTable && $fixedTable.find($row).length) {
      return this._getRowElements($fixedTable).index($row);
    }
    return this.callBase($row);
  },
  getTableElements() {
    var result2 = this.callBase.apply(this, arguments);
    if (this._fixedTableElement) {
      result2 = renderer_default([result2.get(0), this._fixedTableElement.get(0)]);
    }
    return result2;
  },
  getFixedColumns(rowIndex) {
    return this._columnsController.getFixedColumns(rowIndex);
  },
  getFixedColumnsOffset() {
    var offset2 = {
      left: 0,
      right: 0
    };
    var $transparentColumn;
    if (this._fixedTableElement) {
      $transparentColumn = this.getTransparentColumnElement();
      var positionTransparentColumn = $transparentColumn.position();
      offset2 = {
        left: positionTransparentColumn.left,
        right: getOuterWidth(this.element(), true) - (getOuterWidth($transparentColumn, true) + positionTransparentColumn.left)
      };
    }
    return offset2;
  },
  getTransparentColumnElement() {
    return this._fixedTableElement && this._fixedTableElement.find(".".concat(POINTER_EVENTS_NONE_CLASS)).first();
  },
  getFixedTableElement() {
    return this._fixedTableElement;
  },
  isFixedColumns() {
    return this._isFixedColumns;
  },
  _resizeCore() {
    this.callBase();
    this.synchronizeRows();
  },
  setColumnWidths(options2) {
    var _a2;
    var {
      widths
    } = options2;
    var visibleColumns = this._columnsController.getVisibleColumns();
    var isColumnWidthsSynced = (null === widths || void 0 === widths ? void 0 : widths.length) && visibleColumns.some((column) => isDefined(column.visibleWidth));
    var isColumnWidthChanged = null === (_a2 = options2.optionNames) || void 0 === _a2 ? void 0 : _a2.width;
    this.callBase(options2);
    if (this._fixedTableElement) {
      var hasAutoWidth = null === widths || void 0 === widths ? void 0 : widths.some((width) => "auto" === width || !isDefined(width));
      var needVisibleColumns = hasAutoWidth && (!isColumnWidthsSynced || !this.isScrollbarVisible(true));
      var columns2 = needVisibleColumns ? visibleColumns : this.getFixedColumns();
      this.setFixedTableColumnWidths(columns2, widths);
    }
    var wordWrapEnabled = this.option("wordWrapEnabled");
    var needSynchronizeRows = isColumnWidthsSynced || isColumnWidthChanged && wordWrapEnabled;
    if (needSynchronizeRows) {
      this.synchronizeRows();
    }
  },
  setFixedTableColumnWidths(columns2, widths) {
    if (!this._fixedTableElement || !widths) {
      return;
    }
    var $cols = this._fixedTableElement.children("colgroup").children("col");
    $cols.toArray().forEach((col) => col.removeAttribute("style"));
    var columnIndex = 0;
    columns2.forEach((column) => {
      if (column.colspan) {
        columnIndex += column.colspan;
        return;
      }
      var colWidth = normalizeWidth(widths[columnIndex]);
      if (isDefined(colWidth)) {
        setWidth($cols.eq(columnIndex), colWidth);
      }
      columnIndex += 1;
    });
  },
  _getClientHeight(element) {
    var boundingClientRectElement = element.getBoundingClientRect && getBoundingRect(element);
    return boundingClientRectElement && boundingClientRectElement.height ? boundingClientRectElement.height : element.clientHeight;
  },
  synchronizeRows() {
    var rowHeights = [];
    var fixedRowHeights = [];
    var rowIndex;
    var $rowElements;
    var $fixedRowElements;
    var $contentElement;
    this.waitAsyncTemplates(true).done(() => {
      if (this._isFixedColumns && this._tableElement && this._fixedTableElement) {
        var heightTable = this._getClientHeight(this._tableElement.get(0));
        var heightFixedTable = this._getClientHeight(this._fixedTableElement.get(0));
        $rowElements = this._getRowElements(this._tableElement);
        $fixedRowElements = this._getRowElements(this._fixedTableElement);
        $contentElement = this._findContentElement();
        if (heightTable !== heightFixedTable) {
          $contentElement && $contentElement.css("height", heightTable);
          $rowElements.css("height", "");
          $fixedRowElements.css("height", "");
          for (rowIndex = 0; rowIndex < $rowElements.length; rowIndex++) {
            rowHeights.push(this._getClientHeight($rowElements.get(rowIndex)));
            fixedRowHeights.push(this._getClientHeight($fixedRowElements.get(rowIndex)));
          }
          for (rowIndex = 0; rowIndex < $rowElements.length; rowIndex++) {
            var rowHeight = rowHeights[rowIndex];
            var fixedRowHeight = fixedRowHeights[rowIndex];
            if (rowHeight > fixedRowHeight) {
              $fixedRowElements.eq(rowIndex).css("height", rowHeight);
            } else if (rowHeight < fixedRowHeight) {
              $rowElements.eq(rowIndex).css("height", fixedRowHeight);
            }
          }
          $contentElement && $contentElement.css("height", "");
        }
      }
    });
  },
  setScrollerSpacing(width) {
    var rtlEnabled = this.option("rtlEnabled");
    this.callBase(width);
    this.element().children(".".concat(this.addWidgetPrefix(CONTENT_FIXED_CLASS2))).css({
      paddingLeft: rtlEnabled ? width : "",
      paddingRight: !rtlEnabled ? width : ""
    });
  }
};
var ColumnHeadersViewFixedColumnsExtender = extend({}, baseFixedColumns, {
  _getRowVisibleColumns(rowIndex) {
    if (this._isFixedTableRendering) {
      return this.getFixedColumns(rowIndex);
    }
    return this.callBase(rowIndex);
  },
  getContextMenuItems(options2) {
    var {
      column
    } = options2;
    var columnFixingOptions = this.option("columnFixing");
    var items = this.callBase(options2);
    if (options2.row && "header" === options2.row.rowType) {
      if (true === columnFixingOptions.enabled && column && column.allowFixing) {
        var onItemClick = (params) => {
          switch (params.itemData.value) {
            case "none":
              this._columnsController.columnOption(column.index, "fixed", false);
              break;
            case "left":
              this._columnsController.columnOption(column.index, {
                fixed: true,
                fixedPosition: "left"
              });
              break;
            case "right":
              this._columnsController.columnOption(column.index, {
                fixed: true,
                fixedPosition: "right"
              });
          }
        };
        items = items || [];
        items.push({
          text: columnFixingOptions.texts.fix,
          beginGroup: true,
          items: [{
            text: columnFixingOptions.texts.leftPosition,
            value: "left",
            disabled: column.fixed && (!column.fixedPosition || "left" === column.fixedPosition),
            onItemClick
          }, {
            text: columnFixingOptions.texts.rightPosition,
            value: "right",
            disabled: column.fixed && "right" === column.fixedPosition,
            onItemClick
          }]
        }, {
          text: columnFixingOptions.texts.unfix,
          value: "none",
          disabled: !column.fixed,
          onItemClick
        });
      }
    }
    return items;
  },
  getFixedColumnElements(rowIndex) {
    if (isDefined(rowIndex)) {
      return this._fixedTableElement && this._getRowElements(this._fixedTableElement).eq(rowIndex).children();
    }
    var columnElements = this.getColumnElements();
    var $transparentColumnElement = this.getTransparentColumnElement();
    if (columnElements && $transparentColumnElement && $transparentColumnElement.length) {
      var transparentColumnIndex = getTransparentColumnIndex(this.getFixedColumns());
      columnElements.splice(transparentColumnIndex, $transparentColumnElement.get(0).colSpan, $transparentColumnElement.get(0));
    }
    return columnElements;
  },
  getColumnWidths() {
    var fixedWidths;
    var result2 = this.callBase();
    var $fixedColumnElements = this.getFixedColumnElements();
    var fixedColumns = this.getFixedColumns();
    if (this._fixedTableElement) {
      if ($fixedColumnElements && $fixedColumnElements.length) {
        fixedWidths = this._getWidths($fixedColumnElements);
      } else {
        fixedWidths = this.callBase(this._fixedTableElement);
      }
    }
    return normalizeColumnWidths(fixedColumns, result2, fixedWidths);
  }
});
var RowsViewFixedColumnsExtender = extend({}, baseFixedColumns, {
  _detachHoverEvents() {
    var element = this.element();
    if (this._fixedTableElement && this._tableElement) {
      events_engine_default.off(element, "mouseover mouseout", ".dx-data-row");
    }
  },
  _attachHoverEvents() {
    if (this._fixedTableElement && this._tableElement) {
      events_engine_default.on(this.element(), "mouseover mouseout", ".dx-data-row", this.createAction((args) => {
        var {
          event
        } = args;
        var rowIndex = this.getRowIndex(renderer_default(event.target).closest(".dx-row"));
        var isHover = "mouseover" === event.type;
        if (rowIndex >= 0) {
          this._tableElement && this._getRowElements(this._tableElement).eq(rowIndex).toggleClass(HOVER_STATE_CLASS, isHover);
          this._fixedTableElement && this._getRowElements(this._fixedTableElement).eq(rowIndex).toggleClass(HOVER_STATE_CLASS, isHover);
        }
      }));
    }
  },
  _getScrollDelay() {
    var _a2;
    var hasResizeTimeout = null === (_a2 = this.getController("resizing")) || void 0 === _a2 ? void 0 : _a2.hasResizeTimeout();
    if (hasResizeTimeout) {
      return this.option("scrolling.updateTimeout");
    }
    return browser_default.mozilla ? 60 : 0;
  },
  _findContentElement(isFixedTableRendering) {
    var $content;
    var scrollTop;
    var contentClass = this.addWidgetPrefix(CONTENT_CLASS5);
    var element = this.element();
    isFixedTableRendering = this._isFixedTableRendering || isFixedTableRendering;
    if (element && isFixedTableRendering) {
      $content = element.children(".".concat(contentClass));
      var scrollable = this.getScrollable();
      if (!$content.length && scrollable) {
        $content = renderer_default("<div>").addClass(contentClass);
        events_engine_default.on($content, "scroll", (e) => {
          var {
            target
          } = e;
          var scrollDelay = this._getScrollDelay();
          clearTimeout(this._fixedScrollTimeout);
          this._fixedScrollTimeout = setTimeout(() => {
            scrollTop = renderer_default(target).scrollTop();
            scrollable.scrollTo({
              y: scrollTop
            });
          }, scrollDelay);
        });
        events_engine_default.on($content, EVENT_NAME, (e) => {
          var $nearestScrollable = renderer_default(e.target).closest(".dx-scrollable");
          var shouldScroll = false;
          if (scrollable && scrollable.$element().is($nearestScrollable)) {
            shouldScroll = true;
          } else {
            var nearestScrollableInstance = $nearestScrollable.length && ui_scrollable_default.getInstance($nearestScrollable.get(0));
            var nearestScrollableHasVerticalScrollbar = nearestScrollableInstance && nearestScrollableInstance.scrollHeight() - nearestScrollableInstance.clientHeight() > 0;
            shouldScroll = nearestScrollableInstance && !nearestScrollableHasVerticalScrollbar;
          }
          if (shouldScroll) {
            scrollTop = scrollable.scrollTop();
            scrollable.scrollTo({
              y: scrollTop - e.delta
            });
            var scrollableTop = scrollable.scrollTop() + scrollable.clientHeight();
            var scrollableHeight = scrollable.scrollHeight() + this.getScrollbarWidth();
            var isPreventDefault = scrollable.scrollTop() > 0 && scrollableTop < scrollableHeight;
            if (isPreventDefault) {
              return false;
            }
          }
          return;
        });
        $content.appendTo(element);
      }
      return $content;
    }
    return this.callBase();
  },
  _updateScrollable() {
    this.callBase();
    var scrollable = this.getScrollable();
    if (null === scrollable || void 0 === scrollable ? void 0 : scrollable._disposed) {
      return;
    }
    var scrollTop = scrollable && scrollable.scrollOffset().top;
    this._updateFixedTablePosition(scrollTop);
  },
  _renderContent(contentElement, tableElement, isFixedTableRendering) {
    if (this._isFixedTableRendering || isFixedTableRendering) {
      return contentElement.empty().addClass("".concat(this.addWidgetPrefix(CONTENT_CLASS5), " ").concat(this.addWidgetPrefix(CONTENT_FIXED_CLASS2))).append(tableElement);
    }
    return this.callBase(contentElement, tableElement);
  },
  _getGroupCellOptions(options2) {
    if (this._isFixedTableRendering) {
      return this.callBase(extend({}, options2, {
        columns: this._columnsController.getVisibleColumns()
      }));
    }
    return this.callBase(options2);
  },
  _renderGroupedCells($row, options2) {
    return this.callBase($row, extend({}, options2, {
      columns: this._columnsController.getVisibleColumns()
    }));
  },
  _renderGroupSummaryCells($row, options2) {
    if (this._isFixedTableRendering) {
      this.callBase($row, extend({}, options2, {
        columns: this._columnsController.getVisibleColumns()
      }));
    } else {
      this.callBase($row, options2);
    }
  },
  _hasAlignByColumnSummaryItems(columnIndex, options2) {
    var result2 = this.callBase.apply(this, arguments);
    var column = options2.columns[columnIndex];
    if (options2.isFixed) {
      return column.fixed && (result2 || "right" === column.fixedPosition);
    }
    return result2 && (!this._isFixedColumns || !column.fixed);
  },
  _renderGroupSummaryCellsCore($groupCell, options2, groupCellColSpan, alignByColumnCellCount) {
    var alignByFixedColumnCellCount;
    if (this._isFixedTableRendering) {
      options2.isFixed = true;
      alignByFixedColumnCellCount = this._getAlignByColumnCellCount(groupCellColSpan, options2);
      options2.isFixed = false;
      var startColumnIndex = options2.columns.length - alignByFixedColumnCellCount;
      options2 = extend({}, options2, {
        columns: this.getFixedColumns()
      });
      var transparentColumnIndex = getTransparentColumnIndex(options2.columns);
      if (startColumnIndex < transparentColumnIndex) {
        alignByFixedColumnCellCount -= options2.columns[transparentColumnIndex].colspan - 1 || 0;
        groupCellColSpan -= options2.columns[transparentColumnIndex].colspan - 1 || 0;
      } else if (alignByColumnCellCount > 0) {
        $groupCell.css("visibility", "hidden");
      }
      alignByColumnCellCount = alignByFixedColumnCellCount;
    }
    this.callBase($groupCell, options2, groupCellColSpan, alignByColumnCellCount);
  },
  _getSummaryCellIndex(columnIndex, columns2) {
    if (this._isFixedTableRendering) {
      var transparentColumnIndex = getTransparentColumnIndex(columns2);
      if (columnIndex > transparentColumnIndex) {
        columnIndex += columns2[transparentColumnIndex].colspan - 1;
      }
      return columnIndex;
    }
    return this.callBase.apply(this, arguments);
  },
  _renderCore(change) {
    this._detachHoverEvents();
    var deferred = this.callBase(change);
    var isFixedColumns = this._isFixedColumns;
    this.element().toggleClass(FIXED_COLUMNS_CLASS, isFixedColumns);
    if (this.option("hoverStateEnabled") && isFixedColumns) {
      this._attachHoverEvents();
    }
    return deferred;
  },
  setAriaOwns(headerTableId, footerTableId, isFixed) {
    var _a2, _b2;
    if (isFixed) {
      var contentFixedClass = this.addWidgetPrefix(CONTENT_FIXED_CLASS2);
      var $contentFixedElement = null === (_a2 = this.element()) || void 0 === _a2 ? void 0 : _a2.children(".".concat(contentFixedClass));
      var $fixedTableElement = this.getFixedTableElement();
      if ($contentFixedElement.length && (null === $fixedTableElement || void 0 === $fixedTableElement ? void 0 : $fixedTableElement.length)) {
        this.setAria("owns", "".concat(null !== headerTableId && void 0 !== headerTableId ? headerTableId : "", " ").concat(null !== (_b2 = $fixedTableElement.attr("id")) && void 0 !== _b2 ? _b2 : "", " ").concat(null !== footerTableId && void 0 !== footerTableId ? footerTableId : "").trim(), $contentFixedElement);
      }
    } else {
      this.callBase.apply(this, arguments);
    }
  },
  setRowsOpacity(columnIndex, value2) {
    this.callBase(columnIndex, value2);
    var $rows = this._getRowElements(this._fixedTableElement);
    this._setRowsOpacityCore($rows, this.getFixedColumns(), columnIndex, value2);
  },
  optionChanged(args) {
    this.callBase(args);
    if ("hoverStateEnabled" === args.name && this._isFixedColumns) {
      args.value ? this._attachHoverEvents() : this._detachHoverEvents();
    }
  },
  getCellIndex($cell) {
    var $fixedTable = this._fixedTableElement;
    var cellIndex = 0;
    if ($fixedTable && $cell.is("td") && $cell.closest($fixedTable).length) {
      var columns2 = this.getFixedColumns();
      each(columns2, (index2, column) => {
        if (index2 === $cell[0].cellIndex) {
          return false;
        }
        if (column.colspan) {
          cellIndex += column.colspan;
          return;
        }
        cellIndex++;
        return;
      });
      return cellIndex;
    }
    return this.callBase.apply(this, arguments);
  },
  _updateFixedTablePosition(scrollTop, needFocus) {
    if (this._fixedTableElement && this._tableElement) {
      var $focusedElement;
      var editorFactory2 = this.getController("editorFactory");
      this._fixedTableElement.parent().scrollTop(scrollTop);
      if (needFocus && editorFactory2) {
        $focusedElement = editorFactory2.focus();
        $focusedElement && editorFactory2.focus($focusedElement);
      }
    }
  },
  setScrollerSpacing(vWidth, hWidth) {
    var styles = {
      marginBottom: 0
    };
    var $fixedContent = this.element().children(".".concat(this.addWidgetPrefix(CONTENT_FIXED_CLASS2)));
    if ($fixedContent.length && this._fixedTableElement) {
      $fixedContent.css(styles);
      this._fixedTableElement.css(styles);
      styles[this.option("rtlEnabled") ? "marginLeft" : "marginRight"] = vWidth;
      styles.marginBottom = hWidth;
      var useNativeScrolling = this._scrollable && this._scrollable.option("useNative");
      (useNativeScrolling ? $fixedContent : this._fixedTableElement).css(styles);
    }
  },
  _getElasticScrollTop(e) {
    var elasticScrollTop = 0;
    if (e.scrollOffset.top < 0) {
      elasticScrollTop = -e.scrollOffset.top;
    } else if (e.reachedBottom) {
      var $scrollableContent = renderer_default(e.component.content());
      var $scrollableContainer = renderer_default(e.component.container());
      var maxScrollTop = Math.max($scrollableContent.get(0).clientHeight - $scrollableContainer.get(0).clientHeight, 0);
      elasticScrollTop = Math.min(maxScrollTop - e.scrollOffset.top, 0);
    }
    return Math.floor(elasticScrollTop);
  },
  _applyElasticScrolling(e) {
    if (this._fixedTableElement) {
      var elasticScrollTop = this._getElasticScrollTop(e);
      if (0 !== Math.ceil(elasticScrollTop)) {
        move(this._fixedTableElement, {
          top: elasticScrollTop
        });
      } else {
        this._fixedTableElement.css("transform", "");
      }
    }
  },
  _handleScroll(e) {
    this._updateFixedTablePosition(e.scrollOffset.top, true);
    this._applyElasticScrolling(e);
    this.callBase(e);
  },
  _updateContentPosition(isRender) {
    this.callBase.apply(this, arguments);
    if (!isRender) {
      this._updateFixedTablePosition(this._scrollTop);
    }
  },
  _afterRowPrepared(e) {
    if (this._isFixedTableRendering) {
      return;
    }
    this.callBase(e);
  },
  _scrollToElement($element) {
    this.callBase($element, this.getFixedColumnsOffset());
  },
  dispose() {
    this.callBase.apply(this, arguments);
    clearTimeout(this._fixedScrollTimeout);
  }
});
var FooterViewFixedColumnsExtender = baseFixedColumns;
var columnFixingModule = {
  defaultOptions: () => ({
    columnFixing: {
      enabled: false,
      texts: {
        fix: message_default.format("dxDataGrid-columnFixingFix"),
        unfix: message_default.format("dxDataGrid-columnFixingUnfix"),
        leftPosition: message_default.format("dxDataGrid-columnFixingLeftPosition"),
        rightPosition: message_default.format("dxDataGrid-columnFixingRightPosition")
      }
    }
  }),
  extenders: {
    views: {
      columnHeadersView: ColumnHeadersViewFixedColumnsExtender,
      rowsView: RowsViewFixedColumnsExtender,
      footerView: FooterViewFixedColumnsExtender
    },
    controllers: {
      draggingHeader: {
        _generatePointsByColumns(options2) {
          var visibleColumns = options2.columns;
          var {
            targetDraggingPanel
          } = options2;
          if (targetDraggingPanel && "headers" === targetDraggingPanel.getName() && targetDraggingPanel.isFixedColumns()) {
            if (options2.sourceColumn.fixed) {
              if (!options2.rowIndex) {
                options2.columnElements = targetDraggingPanel.getFixedColumnElements(0);
              }
              options2.columns = targetDraggingPanel.getFixedColumns(options2.rowIndex);
              var pointsByColumns = this.callBase(options2);
              !function(columns2, fixedColumns, pointsByColumns2) {
                var transparentColumnIndex = getTransparentColumnIndex(fixedColumns);
                var correctIndex = columns2.length - fixedColumns.length;
                each(pointsByColumns2, (_, point) => {
                  if (point.index > transparentColumnIndex) {
                    point.columnIndex += correctIndex;
                    point.index += correctIndex;
                  }
                });
                return pointsByColumns2;
              }(visibleColumns, options2.columns, pointsByColumns);
              return pointsByColumns;
            }
          }
          return this.callBase(options2);
        },
        _pointCreated(point, columns2, location, sourceColumn) {
          var result2 = this.callBase.apply(this, arguments);
          var targetColumn = columns2[point.columnIndex];
          var $transparentColumn = this._columnHeadersView.getTransparentColumnElement();
          if (!result2 && "headers" === location && $transparentColumn && $transparentColumn.length) {
            var boundingRect = getBoundingRect($transparentColumn.get(0));
            if (sourceColumn && sourceColumn.fixed) {
              return "right" === sourceColumn.fixedPosition ? point.x < boundingRect.right : point.x > boundingRect.left;
            }
            if (targetColumn && targetColumn.fixed && "right" !== targetColumn.fixedPosition) {
              return true;
            }
            return point.x < boundingRect.left || point.x > boundingRect.right;
          }
          return result2;
        }
      },
      columnsResizer: {
        _generatePointsByColumns() {
          var that = this;
          var columnsController = that._columnsController;
          var columns2 = columnsController && that._columnsController.getVisibleColumns();
          var fixedColumns = columnsController && that._columnsController.getFixedColumns();
          var transparentColumnIndex = getTransparentColumnIndex(fixedColumns);
          var correctIndex = columns2.length - fixedColumns.length;
          var cells = that._columnHeadersView.getFixedColumnElements();
          that.callBase();
          if (cells && cells.length > 0) {
            that._pointsByFixedColumns = m_utils_default.getPointsByColumns(cells, (point) => {
              if (point.index > transparentColumnIndex) {
                point.columnIndex += correctIndex;
                point.index += correctIndex;
              }
              return that._pointCreated(point, columns2.length, columns2);
            });
          }
        },
        _getTargetPoint(pointsByColumns, currentX, deltaX) {
          var $transparentColumn = this._columnHeadersView.getTransparentColumnElement();
          if ($transparentColumn && $transparentColumn.length) {
            var boundingRect = getBoundingRect($transparentColumn.get(0));
            if (currentX <= boundingRect.left || currentX >= boundingRect.right) {
              return this.callBase(this._pointsByFixedColumns, currentX, deltaX);
            }
          }
          return this.callBase(pointsByColumns, currentX, deltaX);
        }
      },
      resizing: {
        _setAriaOwns() {
          var _a2, _b2, _c;
          this.callBase.apply(this, arguments);
          var headerFixedTable = null === (_a2 = this._columnHeadersView) || void 0 === _a2 ? void 0 : _a2.getFixedTableElement();
          var footerFixedTable = null === (_b2 = this._footerView) || void 0 === _b2 ? void 0 : _b2.getFixedTableElement();
          null === (_c = this._rowsView) || void 0 === _c ? void 0 : _c.setAriaOwns(null === headerFixedTable || void 0 === headerFixedTable ? void 0 : headerFixedTable.attr("id"), null === footerFixedTable || void 0 === footerFixedTable ? void 0 : footerFixedTable.attr("id"), true);
        }
      }
    }
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/column_fixing.js
m_core_default.registerModule("columnFixing", columnFixingModule);

// node_modules/devextreme/esm/__internal/grids/grid_core/adaptivity/m_adaptivity.js
var COLUMN_HEADERS_VIEW2 = "columnHeadersView";
var ROWS_VIEW = "rowsView";
var FOOTER_VIEW = "footerView";
var COLUMN_VIEWS = [COLUMN_HEADERS_VIEW2, ROWS_VIEW, FOOTER_VIEW];
var ADAPTIVE_NAMESPACE = "dxDataGridAdaptivity";
var HIDDEN_COLUMNS_WIDTH3 = "adaptiveHidden";
var ADAPTIVE_ROW_TYPE = "detailAdaptive";
var FORM_ITEM_CONTENT_CLASS = "dx-field-item-content";
var FORM_ITEM_MODIFIED = "dx-item-modified";
var HIDDEN_COLUMN_CLASS = "hidden-column";
var ADAPTIVE_COLUMN_BUTTON_CLASS = "adaptive-more";
var ADAPTIVE_COLUMN_NAME_CLASS2 = "dx-command-adaptive";
var COMMAND_ADAPTIVE_HIDDEN_CLASS = "dx-command-adaptive-hidden";
var ADAPTIVE_DETAIL_ROW_CLASS = "dx-adaptive-detail-row";
var ADAPTIVE_ITEM_TEXT_CLASS = "dx-adaptive-item-text";
var MASTER_DETAIL_CELL_CLASS4 = "dx-master-detail-cell";
var LAST_DATA_CELL_CLASS = "dx-last-data-cell";
var ADAPTIVE_COLUMN_NAME = "adaptive";
var EDIT_MODE_BATCH3 = "batch";
var EDIT_MODE_ROW3 = "row";
var EDIT_MODE_FORM3 = "form";
var EDIT_MODE_POPUP3 = "popup";
var REVERT_TOOLTIP_CLASS2 = "revert-tooltip";
var GROUP_CELL_CLASS4 = "dx-group-cell";
var GROUP_ROW_CLASS5 = "dx-group-row";
var EXPAND_ARIA_NAME = "dxDataGrid-ariaAdaptiveExpand";
var COLLAPSE_ARIA_NAME = "dxDataGrid-ariaAdaptiveCollapse";
var LEGACY_SCROLLING_MODE5 = "scrolling.legacyMode";
function getColumnId(that, column) {
  return that._columnsController.getColumnId(column);
}
function getDataCellElements($row) {
  return $row.find("td:not(.dx-datagrid-hidden-column):not([class*='dx-command-'])");
}
function adaptiveCellTemplate(container, options2) {
  var $adaptiveColumnButton;
  var $container = renderer_default(container);
  var adaptiveColumnsController = options2.component.getController("adaptiveColumns");
  if ("data" === options2.rowType) {
    $adaptiveColumnButton = renderer_default("<span>").addClass(adaptiveColumnsController.addWidgetPrefix(ADAPTIVE_COLUMN_BUTTON_CLASS));
    events_engine_default.on($adaptiveColumnButton, addNamespace2(CLICK_EVENT_NAME, ADAPTIVE_NAMESPACE), adaptiveColumnsController.createAction(() => {
      adaptiveColumnsController.toggleExpandAdaptiveDetailRow(options2.key);
    }));
    $adaptiveColumnButton.appendTo($container);
  } else {
    m_utils_default.setEmptyText($container);
  }
}
function focusCellHandler(e) {
  var _a2;
  var $nextCell = null === (_a2 = e.data) || void 0 === _a2 ? void 0 : _a2.$nextCell;
  events_engine_default.off($nextCell, "focus", focusCellHandler);
  events_engine_default.trigger($nextCell, "dxclick");
}
var AdaptiveColumnsController = class extends m_modules_default.ViewController {
  _isRowEditMode() {
    var editMode = this._getEditMode();
    return editMode === EDIT_MODE_ROW3;
  }
  _isItemModified(item, cellOptions) {
    var columnIndex = this._columnsController.getVisibleIndex(item.column.index);
    var rowIndex = this._dataController.getRowIndexByKey(cellOptions.key);
    var row = this._dataController.items()[rowIndex + 1];
    return row && row.modifiedValues && isDefined(row.modifiedValues[columnIndex]);
  }
  _renderFormViewTemplate(item, cellOptions, $container) {
    var that = this;
    var {
      column
    } = item;
    var focusAction = that.createAction(() => {
      if (that._editingController.isEditing()) {
        events_engine_default.trigger($container, CLICK_EVENT_NAME);
      }
    });
    var rowData = cellOptions.row.data;
    var value2 = column.calculateCellValue(rowData);
    var displayValue = m_utils_default.getDisplayValue(column, value2, rowData, cellOptions.rowType);
    var text = m_utils_default.formatValue(displayValue, column);
    var isCellOrBatchEditMode = this._editingController.isCellOrBatchEditMode();
    var rowsView3 = that._rowsView;
    if (column.allowEditing && that.getController("keyboardNavigation").isKeyboardEnabled()) {
      $container.attr("tabIndex", that.option("tabIndex"));
      if (isCellOrBatchEditMode) {
        events_engine_default.off($container, "focus", focusAction);
        events_engine_default.on($container, "focus", focusAction);
      }
    }
    if (column.cellTemplate) {
      var templateOptions = extend({}, cellOptions, {
        value: value2,
        displayValue,
        text,
        column
      });
      rowsView3.renderTemplate($container, column.cellTemplate, templateOptions, isElementInDom($container)).done(() => {
        rowsView3._cellPrepared($container, cellOptions);
      });
    } else {
      var container = $container.get(0);
      if (column.encodeHtml) {
        container.textContent = text;
      } else {
        container.innerHTML = text;
      }
      $container.addClass(ADAPTIVE_ITEM_TEXT_CLASS);
      if (!isDefined(text) || "" === text) {
        $container.html("&nbsp;");
      }
      if (!that._isRowEditMode()) {
        if (that._isItemModified(item, cellOptions)) {
          $container.addClass(FORM_ITEM_MODIFIED);
        }
      }
      rowsView3._cellPrepared($container, cellOptions);
    }
  }
  _getTemplate(item, cellOptions, updateForm) {
    var that = this;
    var {
      column
    } = item;
    var editingController = this.getController("editing");
    return function(options2, container) {
      var $container = renderer_default(container);
      var columnIndex = that._columnsController.getVisibleIndex(column.index);
      var templateOptions = extend({}, cellOptions);
      var renderFormTemplate = function() {
        var isItemEdited = that._isItemEdited(item);
        templateOptions.value = cellOptions.row.values[columnIndex];
        if (isItemEdited || column.showEditorAlways) {
          editingController.renderFormEditorTemplate(templateOptions, item, options2, $container, !isItemEdited);
        } else {
          templateOptions.column = column;
          templateOptions.columnIndex = columnIndex;
          that._renderFormViewTemplate(item, templateOptions, $container);
        }
      };
      renderFormTemplate();
      if (templateOptions.watch) {
        var dispose = templateOptions.watch(() => ({
          isItemEdited: that._isItemEdited(item),
          value: cellOptions.row.values[columnIndex]
        }), () => {
          $container.contents().remove();
          $container.removeClass(ADAPTIVE_ITEM_TEXT_CLASS);
          renderFormTemplate();
        });
        events_engine_default.on($container, removeEvent, dispose);
      }
    };
  }
  _isVisibleColumnsValid(visibleColumns) {
    if (visibleColumns < 2) {
      return false;
    }
    if (visibleColumns.length - function() {
      var result2 = 0;
      for (var j = 0; j < visibleColumns.length; j++) {
        var visibleColumn = visibleColumns[j];
        if (visibleColumn.command) {
          result2++;
        }
      }
      return result2;
    }() <= 1) {
      return false;
    }
    return true;
  }
  _calculatePercentWidths(widths, visibleColumns) {
    var that = this;
    var percentWidths = 0;
    visibleColumns.forEach((item, index2) => {
      if (widths[index2] !== HIDDEN_COLUMNS_WIDTH3) {
        percentWidths += that._getItemPercentWidth(item);
      }
    });
    return percentWidths;
  }
  _isPercentWidth(width) {
    return isString(width) && width.endsWith("%");
  }
  _isColumnHidden(column) {
    return this._hiddenColumns.filter((hiddenColumn) => hiddenColumn.index === column.index).length > 0;
  }
  _getAverageColumnsWidth(containerWidth, columns2, columnsCanFit) {
    var that = this;
    var fixedColumnsWidth = 0;
    var columnsWithoutFixedWidthCount = 0;
    columns2.forEach((column) => {
      if (!that._isColumnHidden(column)) {
        var {
          width
        } = column;
        if (isDefined(width) && !isNaN(parseFloat(width))) {
          fixedColumnsWidth += that._isPercentWidth(width) ? that._calculatePercentWidth({
            visibleIndex: column.visibleIndex,
            columnsCount: columns2.length,
            columnsCanFit,
            bestFitWidth: column.bestFitWidth,
            columnWidth: width,
            containerWidth
          }) : parseFloat(width);
        } else {
          columnsWithoutFixedWidthCount++;
        }
      }
    });
    return (containerWidth - fixedColumnsWidth) / columnsWithoutFixedWidthCount;
  }
  _calculateColumnWidth(column, containerWidth, contentColumns, columnsCanFit) {
    var columnId = getColumnId(this, column);
    var widthOption = this._columnsController.columnOption(columnId, "width");
    var bestFitWidth = this._columnsController.columnOption(columnId, "bestFitWidth");
    var columnsCount = contentColumns.length;
    var colWidth;
    if (widthOption && "auto" !== widthOption) {
      if (this._isPercentWidth(widthOption)) {
        colWidth = this._calculatePercentWidth({
          visibleIndex: column.visibleIndex,
          columnsCount,
          columnsCanFit,
          bestFitWidth,
          columnWidth: widthOption,
          containerWidth
        });
      } else {
        return parseFloat(widthOption);
      }
    } else {
      var columnAutoWidth = this.option("columnAutoWidth");
      colWidth = columnAutoWidth || !!column.command ? bestFitWidth : this._getAverageColumnsWidth(containerWidth, contentColumns, columnsCanFit);
    }
    return colWidth;
  }
  _calculatePercentWidth(options2) {
    var columnFitted = options2.visibleIndex < options2.columnsCount - 1 && options2.columnsCanFit;
    var partialWidth = options2.containerWidth * parseFloat(options2.columnWidth) / 100;
    var resultWidth = options2.columnsCanFit && partialWidth < options2.bestFitWidth ? options2.bestFitWidth : partialWidth;
    return columnFitted ? options2.containerWidth * parseFloat(options2.columnWidth) / 100 : resultWidth;
  }
  _getNotTruncatedColumnWidth(column, containerWidth, contentColumns, columnsCanFit) {
    var columnId = getColumnId(this, column);
    var widthOption = this._columnsController.columnOption(columnId, "width");
    var bestFitWidth = this._columnsController.columnOption(columnId, "bestFitWidth");
    if (widthOption && "auto" !== widthOption && !this._isPercentWidth(widthOption)) {
      return parseFloat(widthOption);
    }
    var colWidth = this._calculateColumnWidth(column, containerWidth, contentColumns, columnsCanFit);
    return colWidth < bestFitWidth ? null : colWidth;
  }
  _getItemPercentWidth(item) {
    var result2 = 0;
    if (item.width && this._isPercentWidth(item.width)) {
      result2 = parseFloat(item.width);
    }
    return result2;
  }
  _getCommandColumnsWidth() {
    var that = this;
    var columns2 = that._columnsController.getVisibleColumns();
    var colWidth = 0;
    each(columns2, (index2, column) => {
      if (column.index < 0 || column.command) {
        colWidth += that._columnsController.columnOption(getColumnId(that, column), "bestFitWidth") || 0;
      }
    });
    return colWidth;
  }
  _isItemEdited(item) {
    if (this.isFormOrPopupEditMode()) {
      return false;
    }
    if (this._isRowEditMode()) {
      var editRowKey = this.option("editing.editRowKey");
      if (equalByValue(editRowKey, this._dataController.adaptiveExpandedKey())) {
        return true;
      }
    } else {
      var rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;
      var columnIndex = this._columnsController.getVisibleIndex(item.column.index);
      return this._editingController.isEditCell(rowIndex, columnIndex);
    }
  }
  _getFormItemsByHiddenColumns(hiddenColumns) {
    var items = [];
    each(hiddenColumns, (_, column) => {
      items.push({
        column,
        name: column.name,
        dataField: column.dataField,
        visibleIndex: column.visibleIndex
      });
    });
    return items;
  }
  _getAdaptiveColumnVisibleIndex(visibleColumns) {
    for (var i = 0; i < visibleColumns.length; i++) {
      var column = visibleColumns[i];
      if (column.command === ADAPTIVE_COLUMN_NAME) {
        return i;
      }
    }
    return;
  }
  _hideAdaptiveColumn(resultWidths, visibleColumns) {
    var visibleIndex = this._getAdaptiveColumnVisibleIndex(visibleColumns);
    if (isDefined(visibleIndex)) {
      resultWidths[visibleIndex] = HIDDEN_COLUMNS_WIDTH3;
      this._hideVisibleColumn({
        isCommandColumn: true,
        visibleIndex
      });
    }
  }
  _showHiddenCellsInView(_ref) {
    var {
      $cells,
      isCommandColumn
    } = _ref;
    var cssClassNameToRemove = this.addWidgetPrefix(HIDDEN_COLUMN_CLASS);
    if (isCommandColumn) {
      cssClassNameToRemove = COMMAND_ADAPTIVE_HIDDEN_CLASS;
      $cells.attr({
        tabIndex: 0,
        "aria-hidden": null
      }).removeClass(cssClassNameToRemove);
    } else {
      $cells.removeClass(cssClassNameToRemove);
    }
  }
  _showHiddenColumns() {
    for (var i = 0; i < COLUMN_VIEWS.length; i++) {
      var view = this.getView(COLUMN_VIEWS[i]);
      if (view && view.isVisible() && view.element()) {
        var viewName2 = view.name;
        var $hiddenCommandCells = view.element().find(".".concat(COMMAND_ADAPTIVE_HIDDEN_CLASS));
        this._showHiddenCellsInView({
          viewName: viewName2,
          $cells: $hiddenCommandCells,
          isCommandColumn: true
        });
        var $hiddenCells = view.element().find(".".concat(this.addWidgetPrefix(HIDDEN_COLUMN_CLASS)));
        this._showHiddenCellsInView({
          viewName: viewName2,
          $cells: $hiddenCells
        });
      }
    }
  }
  _isCellValid($cell) {
    return $cell && $cell.length && !$cell.hasClass(MASTER_DETAIL_CELL_CLASS4) && !$cell.hasClass(GROUP_CELL_CLASS4);
  }
  _hideVisibleColumn(_ref2) {
    var {
      isCommandColumn,
      visibleIndex
    } = _ref2;
    var that = this;
    COLUMN_VIEWS.forEach((viewName2) => {
      var view = that.getView(viewName2);
      view && that._hideVisibleColumnInView({
        view,
        isCommandColumn,
        visibleIndex
      });
    });
  }
  _hideVisibleColumnInView(_ref3) {
    var {
      view,
      isCommandColumn,
      visibleIndex
    } = _ref3;
    var viewName2 = view.name;
    var $cellElement;
    var column = this._columnsController.getVisibleColumns()[visibleIndex];
    var editFormRowIndex = this._editingController && this._editingController.getEditFormRowIndex();
    if (view && view.isVisible() && column) {
      var rowsCount = view.getRowsCount();
      var $rowElements = view._getRowElements();
      for (var rowIndex = 0; rowIndex < rowsCount; rowIndex++) {
        var cancelClassAdding = rowIndex === editFormRowIndex && viewName2 === ROWS_VIEW && "popup" !== this.option("editing.mode");
        if (!cancelClassAdding) {
          var currentVisibleIndex = viewName2 === COLUMN_HEADERS_VIEW2 ? this._columnsController.getVisibleIndex(column.index, rowIndex) : visibleIndex;
          if (currentVisibleIndex >= 0) {
            var $rowElement = $rowElements.eq(rowIndex);
            $cellElement = this._findCellElementInRow($rowElement, currentVisibleIndex);
            this._isCellValid($cellElement) && this._hideVisibleCellInView({
              viewName: viewName2,
              isCommandColumn,
              $cell: $cellElement
            });
          }
        }
      }
    }
  }
  _findCellElementInRow($rowElement, visibleColumnIndex) {
    var $rowCells = $rowElement.children();
    var visibleIndex = visibleColumnIndex;
    var cellIsInsideGroup = false;
    if ($rowElement.hasClass(GROUP_ROW_CLASS5)) {
      var $groupCell = $rowElement.find(".".concat(GROUP_CELL_CLASS4));
      var colSpan = $groupCell.attr("colspan");
      if ($groupCell.length && isDefined(colSpan)) {
        var groupCellLength = parseInt(colSpan);
        var endGroupIndex = $groupCell.index() + groupCellLength - 1;
        if (visibleColumnIndex > endGroupIndex) {
          visibleIndex = visibleColumnIndex - groupCellLength + 1;
        } else {
          cellIsInsideGroup = true;
        }
      }
    }
    var $cellElement = !cellIsInsideGroup ? $rowCells.eq(visibleIndex) : void 0;
    return $cellElement;
  }
  _hideVisibleCellInView(_ref4) {
    var {
      $cell,
      isCommandColumn
    } = _ref4;
    var cssClassNameToAdd = isCommandColumn ? COMMAND_ADAPTIVE_HIDDEN_CLASS : this.addWidgetPrefix(HIDDEN_COLUMN_CLASS);
    $cell.attr({
      tabIndex: -1,
      "aria-hidden": true
    }).addClass(cssClassNameToAdd);
  }
  _getEditMode() {
    return this._editingController.getEditMode();
  }
  isFormOrPopupEditMode() {
    var editMode = this._getEditMode();
    return editMode === EDIT_MODE_FORM3 || editMode === EDIT_MODE_POPUP3;
  }
  hideRedundantColumns(resultWidths, visibleColumns, hiddenQueue) {
    this._hiddenColumns = [];
    if (this._isVisibleColumnsValid(visibleColumns) && hiddenQueue.length) {
      var totalWidth = 0;
      var $rootElement = this.component.$element();
      var rootElementWidth = getWidth($rootElement) - this._getCommandColumnsWidth();
      var getVisibleContentColumns = (function() {
        return visibleColumns.filter((item) => !item.command && 0 === this._hiddenColumns.filter((i2) => i2.index === item.index).length);
      }).bind(this);
      var visibleContentColumns = getVisibleContentColumns();
      var contentColumnsCount = visibleContentColumns.length;
      var i;
      var hasHiddenColumns;
      var needHideColumn;
      do {
        needHideColumn = false;
        totalWidth = 0;
        var percentWidths = this._calculatePercentWidths(resultWidths, visibleColumns);
        var columnsCanFit = percentWidths < 100 && 0 !== percentWidths;
        for (i = 0; i < visibleColumns.length; i++) {
          var visibleColumn = visibleColumns[i];
          var columnWidth = this._getNotTruncatedColumnWidth(visibleColumn, rootElementWidth, visibleContentColumns, columnsCanFit);
          var columnId = getColumnId(this, visibleColumn);
          var widthOption = this._columnsController.columnOption(columnId, "width");
          var minWidth = this._columnsController.columnOption(columnId, "minWidth");
          var columnBestFitWidth = this._columnsController.columnOption(columnId, "bestFitWidth");
          if (resultWidths[i] === HIDDEN_COLUMNS_WIDTH3) {
            hasHiddenColumns = true;
            continue;
          }
          if (!columnWidth && !visibleColumn.command && !visibleColumn.fixed) {
            needHideColumn = true;
            break;
          }
          if (!widthOption || "auto" === widthOption) {
            columnWidth = Math.max(columnBestFitWidth || 0, minWidth || 0);
          }
          if (visibleColumn.command !== ADAPTIVE_COLUMN_NAME || hasHiddenColumns) {
            totalWidth += columnWidth;
          }
        }
        needHideColumn = needHideColumn || totalWidth > getWidth($rootElement);
        if (needHideColumn) {
          var column = hiddenQueue.pop();
          var visibleIndex = this._columnsController.getVisibleIndex(column.index);
          rootElementWidth += this._calculateColumnWidth(column, rootElementWidth, visibleContentColumns, columnsCanFit);
          this._hideVisibleColumn({
            visibleIndex
          });
          resultWidths[visibleIndex] = HIDDEN_COLUMNS_WIDTH3;
          this._hiddenColumns.push(column);
          visibleContentColumns = getVisibleContentColumns();
        }
      } while (needHideColumn && visibleContentColumns.length > 1 && hiddenQueue.length);
      if (contentColumnsCount === visibleContentColumns.length) {
        this._hideAdaptiveColumn(resultWidths, visibleColumns);
      }
    } else {
      this._hideAdaptiveColumn(resultWidths, visibleColumns);
    }
  }
  getAdaptiveDetailItems() {
    return this._$itemContents;
  }
  getItemContentByColumnIndex(visibleColumnIndex) {
    var $itemContent;
    for (var i = 0; i < this._$itemContents.length; i++) {
      $itemContent = this._$itemContents.eq(i);
      var item = $itemContent.data("dx-form-item");
      if (item && item.column && this._columnsController.getVisibleIndex(item.column.index) === visibleColumnIndex) {
        return $itemContent;
      }
    }
  }
  toggleExpandAdaptiveDetailRow(key, alwaysExpanded) {
    if (!(this.isFormOrPopupEditMode() && this._editingController.isEditing())) {
      this.getController("data").toggleExpandAdaptiveDetailRow(key, alwaysExpanded);
    }
  }
  createFormByHiddenColumns(container, options2) {
    var that = this;
    var $container = renderer_default(container);
    var userFormOptions = {
      items: that._getFormItemsByHiddenColumns(that._hiddenColumns),
      formID: "dx-".concat(new guid_default())
    };
    var defaultFormOptions = isMaterial() ? {
      colCount: 2
    } : {};
    this.executeAction("onAdaptiveDetailRowPreparing", {
      formOptions: userFormOptions
    });
    that._$itemContents = null;
    that._form = that._createComponent(renderer_default("<div>").appendTo($container), form_default, extend(defaultFormOptions, userFormOptions, {
      customizeItem(item) {
        var column = item.column || that._columnsController.columnOption(item.name || item.dataField);
        if (column) {
          item.label = item.label || {};
          item.label.text = item.label.text || column.caption;
          item.column = column;
          item.template = that._getTemplate(item, options2, that.updateForm.bind(that));
        }
        userFormOptions.customizeItem && userFormOptions.customizeItem.call(this, item);
      },
      onContentReady(e) {
        userFormOptions.onContentReady && userFormOptions.onContentReady.call(this, e);
        that._$itemContents = $container.find(".".concat(FORM_ITEM_CONTENT_CLASS));
      }
    }));
  }
  hasAdaptiveDetailRowExpanded() {
    return isDefined(this._dataController.adaptiveExpandedKey());
  }
  updateForm(hiddenColumns) {
    if (this.hasAdaptiveDetailRowExpanded()) {
      if (this._form && isDefined(this._form._contentReadyAction)) {
        if (hiddenColumns && hiddenColumns.length) {
          this._form.option("items", this._getFormItemsByHiddenColumns(hiddenColumns));
        } else {
          this._form.repaint();
        }
      }
    }
  }
  updateHidingQueue(columns2) {
    var hideableColumns = columns2.filter((column) => column.visible && !column.type && !column.fixed && !(isDefined(column.groupIndex) && column.groupIndex >= 0));
    var columnsHasHidingPriority;
    var i;
    this._hidingColumnsQueue = [];
    if (this.option("allowColumnResizing") && "widget" === this.option("columnResizingMode")) {
      return this._hidingColumnsQueue;
    }
    for (i = 0; i < hideableColumns.length; i++) {
      if (isDefined(hideableColumns[i].hidingPriority) && hideableColumns[i].hidingPriority >= 0) {
        columnsHasHidingPriority = true;
        this._hidingColumnsQueue[hideableColumns[i].hidingPriority] = hideableColumns[i];
      }
    }
    if (columnsHasHidingPriority) {
      this._hidingColumnsQueue.reverse();
    } else if (this.option("columnHidingEnabled")) {
      for (i = 0; i < hideableColumns.length; i++) {
        var visibleIndex = this._columnsController.getVisibleIndex(hideableColumns[i].index);
        this._hidingColumnsQueue[visibleIndex] = hideableColumns[i];
      }
    }
    this._hidingColumnsQueue = this._hidingColumnsQueue.filter(Object);
    return this._hidingColumnsQueue;
  }
  getHiddenColumns() {
    return this._hiddenColumns;
  }
  hasHiddenColumns() {
    return this._hiddenColumns.length > 0;
  }
  getHidingColumnsQueue() {
    return this._hidingColumnsQueue;
  }
  init() {
    var that = this;
    that._columnsController = that.getController("columns");
    that._dataController = that.getController("data");
    that._rowsView = that.getView("rowsView");
    that._columnsController.addCommandColumn({
      type: ADAPTIVE_COLUMN_NAME,
      command: ADAPTIVE_COLUMN_NAME,
      visible: true,
      adaptiveHidden: true,
      cssClass: ADAPTIVE_COLUMN_NAME_CLASS2,
      alignment: "center",
      width: "auto",
      cellTemplate: adaptiveCellTemplate,
      fixedPosition: "right"
    });
    that._columnsController.columnsChanged.add(() => {
      var isAdaptiveVisible = !!that.updateHidingQueue(that._columnsController.getColumns()).length;
      that._columnsController.columnOption("command:adaptive", "adaptiveHidden", !isAdaptiveVisible, true);
    });
    that._editingController = that.getController("editing");
    that._hidingColumnsQueue = [];
    that._hiddenColumns = [];
    that.createAction("onAdaptiveDetailRowPreparing");
    super.init();
  }
  optionChanged(args) {
    if ("columnHidingEnabled" === args.name) {
      this._columnsController.columnOption("command:adaptive", "adaptiveHidden", !args.value);
    }
    super.optionChanged(args);
  }
  publicMethods() {
    return ["isAdaptiveDetailRowExpanded", "expandAdaptiveDetailRow", "collapseAdaptiveDetailRow"];
  }
  isAdaptiveDetailRowExpanded(key) {
    var dataController2 = this._dataController;
    return dataController2.adaptiveExpandedKey() && equalByValue(dataController2.adaptiveExpandedKey(), key);
  }
  expandAdaptiveDetailRow(key) {
    if (!this.hasAdaptiveDetailRowExpanded()) {
      this.toggleExpandAdaptiveDetailRow(key);
    }
  }
  collapseAdaptiveDetailRow() {
    if (this.hasAdaptiveDetailRowExpanded()) {
      this.toggleExpandAdaptiveDetailRow();
    }
  }
  updateCommandAdaptiveAriaLabel(key, label) {
    var rowIndex = this._dataController.getRowIndexByKey(key);
    if (-1 === rowIndex) {
      return;
    }
    var $row = renderer_default(this.component.getRowElement(rowIndex));
    this.setCommandAdaptiveAriaLabel($row, label);
  }
  setCommandAdaptiveAriaLabel($row, labelName) {
    var $adaptiveCommand = $row.find(".dx-command-adaptive");
    $adaptiveCommand.attr("aria-label", message_default.format(labelName));
  }
};
var keyboardNavigation = (Base) => class extends Base {
  _isCellValid($cell, isClick) {
    return super._isCellValid($cell, isClick) && !$cell.hasClass(this.addWidgetPrefix(HIDDEN_COLUMN_CLASS)) && !$cell.hasClass(COMMAND_ADAPTIVE_HIDDEN_CLASS);
  }
  _processNextCellInMasterDetail($nextCell, $cell) {
    super._processNextCellInMasterDetail($nextCell, $cell);
    var isCellOrBatchMode = this._editingController.isCellOrBatchEditMode();
    var isEditing = this._editingController.isEditing();
    if (isEditing && $nextCell && isCellOrBatchMode && !this._isInsideEditForm($nextCell)) {
      events_engine_default.off($nextCell, "focus", focusCellHandler);
      events_engine_default.on($nextCell, "focus", {
        $nextCell
      }, focusCellHandler);
      events_engine_default.trigger($cell, "focus");
    }
  }
  _isCellElement($cell) {
    return super._isCellElement($cell) || $cell.hasClass(ADAPTIVE_ITEM_TEXT_CLASS);
  }
  init() {
    super.init();
    this._adaptiveController = this.getController("adaptiveColumns");
  }
};
var rowsView2 = (Base) => class extends Base {
  _getCellTemplate(options2) {
    var that = this;
    var {
      column
    } = options2;
    if (options2.rowType === ADAPTIVE_ROW_TYPE && "detail" === column.command) {
      return function(container, options3) {
        that._adaptiveColumnsController.createFormByHiddenColumns(renderer_default(container), options3);
      };
    }
    return super._getCellTemplate(options2);
  }
  _createRow(row) {
    var $row = super._createRow.apply(this, arguments);
    if (row && row.rowType === ADAPTIVE_ROW_TYPE && row.key === this._dataController.adaptiveExpandedKey()) {
      $row.addClass(ADAPTIVE_DETAIL_ROW_CLASS);
    }
    return $row;
  }
  _renderCells($row, options2) {
    super._renderCells($row, options2);
    var adaptiveColumnsController = this._adaptiveColumnsController;
    var hidingColumnsQueueLength = adaptiveColumnsController.getHidingColumnsQueue().length;
    var hiddenColumnsLength = adaptiveColumnsController.getHiddenColumns().length;
    if (hidingColumnsQueueLength && !hiddenColumnsLength) {
      getDataCellElements($row).last().addClass(LAST_DATA_CELL_CLASS);
    }
    if ("data" === options2.row.rowType) {
      adaptiveColumnsController.setCommandAdaptiveAriaLabel($row, EXPAND_ARIA_NAME);
    }
  }
  _getColumnIndexByElementCore($element) {
    var $itemContent = $element.closest(".".concat(FORM_ITEM_CONTENT_CLASS));
    if ($itemContent.length && $itemContent.closest(this.component.$element()).length) {
      var formItem = $itemContent.length ? $itemContent.first().data("dx-form-item") : null;
      return formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index);
    }
    return super._getColumnIndexByElementCore($element);
  }
  _cellPrepared($cell, options2) {
    super._cellPrepared.apply(this, arguments);
    if (options2.row.rowType !== ADAPTIVE_ROW_TYPE && options2.column.visibleWidth === HIDDEN_COLUMNS_WIDTH3) {
      $cell.addClass(this.addWidgetPrefix(HIDDEN_COLUMN_CLASS));
    }
  }
  getCell(cellPosition, rows) {
    var item = this._dataController.items()[null === cellPosition || void 0 === cellPosition ? void 0 : cellPosition.rowIndex];
    if ((null === item || void 0 === item ? void 0 : item.rowType) === ADAPTIVE_ROW_TYPE) {
      var $adaptiveDetailItems = this._adaptiveColumnsController.getAdaptiveDetailItems();
      return super.getCell(cellPosition, rows, $adaptiveDetailItems);
    }
    return super.getCell.apply(this, arguments);
  }
  _getCellElement(rowIndex, columnIdentifier) {
    var item = this._dataController.items()[rowIndex];
    if (item && item.rowType === ADAPTIVE_ROW_TYPE) {
      return this._adaptiveColumnsController.getItemContentByColumnIndex(columnIdentifier);
    }
    return super._getCellElement.apply(this, arguments);
  }
  getContextMenuItems(options2) {
    var _a2;
    if (options2.row && "detailAdaptive" === options2.row.rowType) {
      var view = this.component.getView("columnHeadersView");
      var formItem = renderer_default(options2.targetElement).closest(".dx-field-item-label").next().data("dx-form-item");
      options2.column = formItem ? formItem.column : options2.column;
      return view.getContextMenuItems && view.getContextMenuItems(options2);
    }
    return null === (_a2 = super.getContextMenuItems) || void 0 === _a2 ? void 0 : _a2.call(this, options2);
  }
  isClickableElement($target) {
    var _a2, _b2;
    var isClickable = null !== (_b2 = null === (_a2 = super.isClickableElement) || void 0 === _a2 ? void 0 : _a2.call(this, $target)) && void 0 !== _b2 ? _b2 : false;
    return isClickable || !!$target.closest(".".concat(ADAPTIVE_COLUMN_NAME_CLASS2)).length;
  }
  init() {
    super.init();
    this._adaptiveColumnsController = this.getController("adaptiveColumns");
  }
};
var exportExtender = (Base) => class extends Base {
  _updateColumnWidth(column, width) {
    super._updateColumnWidth(column, column.visibleWidth === HIDDEN_COLUMNS_WIDTH3 ? column.bestFitWidth : width);
  }
};
var columnsResizer = (Base) => class extends Base {
  _pointCreated(point, cellsLength, columns2) {
    var result2 = super._pointCreated(point, cellsLength, columns2);
    var currentColumn = columns2[point.columnIndex] || {};
    var nextColumnIndex = this._getNextColumnIndex(point.columnIndex);
    var nextColumn = columns2[nextColumnIndex] || {};
    var hasHiddenColumnsOnly = nextColumnIndex !== point.columnIndex + 1 && nextColumn.command;
    var hasAdaptiveHiddenWidth = currentColumn.visibleWidth === HIDDEN_COLUMNS_WIDTH3 || hasHiddenColumnsOnly;
    return result2 || hasAdaptiveHiddenWidth;
  }
  _getNextColumnIndex(currentColumnIndex) {
    var visibleColumns = this._columnsController.getVisibleColumns();
    var index2 = super._getNextColumnIndex(currentColumnIndex);
    while (visibleColumns[index2] && visibleColumns[index2].visibleWidth === HIDDEN_COLUMNS_WIDTH3) {
      index2++;
    }
    return index2;
  }
};
var draggingHeader = (Base) => class extends Base {
  _pointCreated(point, columns2, location, sourceColumn) {
    var result2 = super._pointCreated(point, columns2, location, sourceColumn);
    var column = columns2[point.columnIndex - 1] || {};
    var hasAdaptiveHiddenWidth = column.visibleWidth === HIDDEN_COLUMNS_WIDTH3;
    return result2 || hasAdaptiveHiddenWidth;
  }
};
var editing = (Base) => class extends Base {
  _isRowEditMode() {
    return this.getEditMode() === EDIT_MODE_ROW3;
  }
  _getFormEditItemTemplate(cellOptions, column) {
    if (this.getEditMode() !== EDIT_MODE_ROW3 && "detailAdaptive" === cellOptions.rowType) {
      cellOptions.columnIndex = this._columnsController.getVisibleIndex(column.index);
      return this.getColumnTemplate(cellOptions);
    }
    return super._getFormEditItemTemplate(cellOptions, column);
  }
  _closeEditItem($targetElement) {
    var $itemContents = $targetElement.closest(".".concat(FORM_ITEM_CONTENT_CLASS));
    var rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;
    var formItem = $itemContents.length ? $itemContents.first().data("dx-form-item") : null;
    var columnIndex = formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index);
    if (!this.isEditCell(rowIndex, columnIndex)) {
      super._closeEditItem($targetElement);
    }
  }
  _beforeUpdateItems(rowIndices, rowIndex) {
    if (!this._adaptiveController.isFormOrPopupEditMode() && this._adaptiveController.hasHiddenColumns()) {
      var items = this._dataController.items();
      var item = items[rowIndex];
      var oldExpandRowIndex = m_utils_default.getIndexByKey(this._dataController.adaptiveExpandedKey(), items);
      this._isForceRowAdaptiveExpand = !this._adaptiveController.hasAdaptiveDetailRowExpanded();
      if (oldExpandRowIndex >= 0) {
        rowIndices.push(oldExpandRowIndex + 1);
      }
      rowIndices.push(rowIndex + 1);
      this._dataController.adaptiveExpandedKey(item.key);
    }
  }
  _afterInsertRow(key) {
    super._afterInsertRow.apply(this, arguments);
    if (this._adaptiveController.hasHiddenColumns()) {
      this._adaptiveController.toggleExpandAdaptiveDetailRow(key, this.isRowEditMode());
      this._isForceRowAdaptiveExpand = true;
    }
  }
  _collapseAdaptiveDetailRow() {
    if (this._isRowEditMode() && this._isForceRowAdaptiveExpand) {
      this._adaptiveController.collapseAdaptiveDetailRow();
      this._isForceRowAdaptiveExpand = false;
    }
  }
  _cancelEditAdaptiveDetailRow() {
    if (this._adaptiveController.hasHiddenColumns()) {
      this._collapseAdaptiveDetailRow();
    }
  }
  _afterSaveEditData() {
    super._afterSaveEditData.apply(this, arguments);
    var deferred = new Deferred();
    if (this._isRowEditMode() && this._adaptiveController.hasHiddenColumns()) {
      when(this.getController("validating").validate(true)).done((isValid) => {
        if (isValid) {
          this._cancelEditAdaptiveDetailRow();
        }
        deferred.resolve();
      });
    } else {
      deferred.resolve();
    }
    return deferred.promise();
  }
  _beforeCancelEditData() {
    super._beforeCancelEditData();
    this._cancelEditAdaptiveDetailRow();
  }
  _getRowIndicesForCascadeUpdating(row) {
    var rowIndices = super._getRowIndicesForCascadeUpdating.apply(this, arguments);
    if (this._adaptiveController.isAdaptiveDetailRowExpanded(row.key)) {
      rowIndices.push(row.rowType === ADAPTIVE_ROW_TYPE ? row.rowIndex - 1 : row.rowIndex + 1);
    }
    return rowIndices;
  }
  _beforeCloseEditCellInBatchMode(rowIndices) {
    var expandedKey = this._dataController._adaptiveExpandedKey;
    if (expandedKey) {
      var rowIndex = m_utils_default.getIndexByKey(expandedKey, this._dataController.items());
      if (rowIndex > -1) {
        rowIndices.unshift(rowIndex);
      }
    }
  }
  editRow(rowIndex) {
    if (this._adaptiveController.isFormOrPopupEditMode()) {
      this._adaptiveController.collapseAdaptiveDetailRow();
    }
    return super.editRow(rowIndex);
  }
  deleteRow(rowIndex) {
    var rowKey = this._dataController.getKeyByRowIndex(rowIndex);
    if (this.getEditMode() === EDIT_MODE_BATCH3 && this._adaptiveController.isAdaptiveDetailRowExpanded(rowKey)) {
      this._adaptiveController.collapseAdaptiveDetailRow();
    }
    super.deleteRow(rowIndex);
  }
  init() {
    super.init();
    this._adaptiveController = this.getController("adaptiveColumns");
  }
};
var data2 = (Base) => class extends Base {
  _processItems(items, change) {
    var {
      changeType
    } = change;
    items = super._processItems.apply(this, arguments);
    if ("loadingAll" === changeType || !isDefined(this._adaptiveExpandedKey)) {
      return items;
    }
    var expandRowIndex = m_utils_default.getIndexByKey(this._adaptiveExpandedKey, items);
    var newMode = false === this.option(LEGACY_SCROLLING_MODE5);
    if (expandRowIndex >= 0) {
      var item = items[expandRowIndex];
      items.splice(expandRowIndex + 1, 0, {
        visible: true,
        rowType: ADAPTIVE_ROW_TYPE,
        key: item.key,
        data: item.data,
        node: item.node,
        modifiedValues: item.modifiedValues,
        isNewRow: item.isNewRow,
        values: item.values
      });
    } else if ("refresh" === changeType && !(newMode && change.repaintChangesOnly)) {
      this._adaptiveExpandedKey = void 0;
    }
    return items;
  }
  _getRowIndicesForExpand(key) {
    var rowIndices = super._getRowIndicesForExpand.apply(this, arguments);
    if (this.getController("adaptiveColumns").isAdaptiveDetailRowExpanded(key)) {
      var lastRowIndex = rowIndices[rowIndices.length - 1];
      rowIndices.push(lastRowIndex + 1);
    }
    return rowIndices;
  }
  adaptiveExpandedKey(value2) {
    if (isDefined(value2)) {
      this._adaptiveExpandedKey = value2;
    } else {
      return this._adaptiveExpandedKey;
    }
  }
  toggleExpandAdaptiveDetailRow(key, alwaysExpanded) {
    var oldExpandLoadedRowIndex = m_utils_default.getIndexByKey(this._adaptiveExpandedKey, this._items);
    var newExpandLoadedRowIndex = m_utils_default.getIndexByKey(key, this._items);
    if (oldExpandLoadedRowIndex >= 0 && oldExpandLoadedRowIndex === newExpandLoadedRowIndex && !alwaysExpanded) {
      key = void 0;
      newExpandLoadedRowIndex = -1;
    }
    var oldKey = this._adaptiveExpandedKey;
    this._adaptiveExpandedKey = key;
    if (oldExpandLoadedRowIndex >= 0) {
      oldExpandLoadedRowIndex++;
    }
    if (newExpandLoadedRowIndex >= 0) {
      newExpandLoadedRowIndex++;
    }
    var rowIndexDelta = this.getRowIndexDelta();
    this.updateItems({
      allowInvisibleRowIndices: true,
      changeType: "update",
      rowIndices: [oldExpandLoadedRowIndex - rowIndexDelta, newExpandLoadedRowIndex - rowIndexDelta]
    });
    var adaptiveColumnsController = this.getController("adaptiveColumns");
    adaptiveColumnsController.updateCommandAdaptiveAriaLabel(key, COLLAPSE_ARIA_NAME);
    adaptiveColumnsController.updateCommandAdaptiveAriaLabel(oldKey, EXPAND_ARIA_NAME);
  }
  init() {
    super.init();
    this._adaptiveExpandedKey = void 0;
  }
};
var editorFactory = (Base) => class extends Base {
  _needHideBorder($element) {
    return super._needHideBorder($element) || (null === $element || void 0 === $element ? void 0 : $element.hasClass("dx-field-item-content")) && (null === $element || void 0 === $element ? void 0 : $element.find(".dx-checkbox").length);
  }
  _getFocusCellSelector() {
    return "".concat(super._getFocusCellSelector(), ", .dx-adaptive-detail-row .dx-field-item > .dx-field-item-content");
  }
  _getRevertTooltipsSelector() {
    return "".concat(super._getRevertTooltipsSelector(), ", .dx-field-item-content .").concat(this.addWidgetPrefix(REVERT_TOOLTIP_CLASS2));
  }
};
var columns = (Base) => class extends Base {
  _isColumnVisible(column) {
    return super._isColumnVisible(column) && !column.adaptiveHidden;
  }
};
var adaptivityModule = {
  defaultOptions: () => ({
    columnHidingEnabled: false,
    onAdaptiveDetailRowPreparing: null
  }),
  controllers: {
    adaptiveColumns: AdaptiveColumnsController
  },
  extenders: {
    views: {
      rowsView: rowsView2
    },
    controllers: {
      export: exportExtender,
      columnsResizer,
      draggingHeader,
      editing,
      resizing: {
        _needBestFit() {
          return this.callBase() || !!this._adaptiveColumnsController.getHidingColumnsQueue().length;
        },
        _correctColumnWidths(resultWidths, visibleColumns) {
          var adaptiveController = this._adaptiveColumnsController;
          var oldHiddenColumns = adaptiveController.getHiddenColumns();
          var hidingColumnsQueue = adaptiveController.updateHidingQueue(this._columnsController.getColumns());
          adaptiveController.hideRedundantColumns(resultWidths, visibleColumns, hidingColumnsQueue);
          var hiddenColumns = adaptiveController.getHiddenColumns();
          if (adaptiveController.hasAdaptiveDetailRowExpanded()) {
            if (oldHiddenColumns.length !== hiddenColumns.length) {
              adaptiveController.updateForm(hiddenColumns);
            }
          }
          !hiddenColumns.length && adaptiveController.collapseAdaptiveDetailRow();
          return this.callBase.apply(this, arguments);
        },
        _toggleBestFitMode(isBestFit) {
          isBestFit && this._adaptiveColumnsController._showHiddenColumns();
          this.callBase(isBestFit);
        },
        _needStretch() {
          var adaptiveColumnsController = this._adaptiveColumnsController;
          return this.callBase.apply(this, arguments) || adaptiveColumnsController.getHidingColumnsQueue().length || adaptiveColumnsController.hasHiddenColumns();
        },
        init() {
          this._adaptiveColumnsController = this.getController("adaptiveColumns");
          this.callBase();
        },
        dispose() {
          this.callBase.apply(this, arguments);
          clearTimeout(this._updateScrollableTimeoutID);
        }
      },
      data: data2,
      editorFactory,
      columns,
      keyboardNavigation
    }
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/adaptivity.js
m_core_default.registerModule("adaptivity", adaptivityModule);

// node_modules/devextreme/esm/__internal/grids/grid_core/virtual_columns/m_virtual_columns_core.js
function foreachColumnInfo(info, callback, rowIndex, offsets, columnCount, lastProcessedIndexes) {
  rowIndex = rowIndex || 0;
  offsets = offsets || [];
  lastProcessedIndexes = lastProcessedIndexes || [];
  offsets[rowIndex] = offsets[rowIndex] || 0;
  var row = info[rowIndex];
  var startIndex = lastProcessedIndexes[rowIndex] + 1 || 0;
  var processedColumnCount = 0;
  var colIndex;
  if (!row) {
    return;
  }
  for (colIndex = startIndex; colIndex < row.length; colIndex++) {
    var cell = row[colIndex];
    var visibleIndex = colIndex + offsets[rowIndex];
    var colspan = cell.colspan || 1;
    foreachColumnInfo(info, callback, rowIndex + (cell.rowspan || 1), offsets, colspan, lastProcessedIndexes);
    offsets[rowIndex] += colspan - 1;
    processedColumnCount += colspan;
    if (cell.rowspan) {
      for (var i = rowIndex + 1; i < rowIndex + cell.rowspan; i++) {
        offsets[i] = offsets[i] || 0;
        offsets[i] += cell.colspan || 1;
      }
    }
    if (false === callback(cell, visibleIndex, rowIndex, colIndex)) {
      break;
    }
    if (void 0 !== columnCount && processedColumnCount >= columnCount) {
      break;
    }
  }
  lastProcessedIndexes[rowIndex] = colIndex;
}
function createColumnsInfo(info, startIndex, endIndex) {
  var newInfo = [];
  foreachColumnInfo(info, (columnInfo, visibleIndex, rowIndex) => {
    var cell = columnInfo;
    var colspan;
    var cellColspan = cell.colspan || 1;
    var isVisible2 = visibleIndex + cellColspan - 1 >= startIndex && visibleIndex < endIndex;
    newInfo[rowIndex] = newInfo[rowIndex] || [];
    if (isVisible2) {
      if (visibleIndex < startIndex) {
        colspan = cellColspan - (startIndex - visibleIndex);
        visibleIndex = startIndex;
      } else {
        colspan = cellColspan;
      }
      if (visibleIndex + colspan > endIndex) {
        colspan = endIndex - visibleIndex;
      }
      if (colspan !== cellColspan) {
        cell = extend({}, cell, {
          colspan
        });
      }
      newInfo[rowIndex].push(cell);
    } else if (visibleIndex > endIndex) {
      return false;
    }
    return;
  });
  for (var i = 0; i < newInfo.length; i++) {
    newInfo[i] = newInfo[i] || [];
  }
  return newInfo;
}

// node_modules/devextreme/esm/__internal/grids/grid_core/virtual_columns/m_virtual_columns.js
var DEFAULT_COLUMN_WIDTH = 50;
var VirtualScrollingRowsViewExtender2 = {
  _resizeCore() {
    this.callBase.apply(this, arguments);
    this._columnsController.resize();
  },
  _handleScroll(e) {
    var scrollable = this.getScrollable();
    var {
      left
    } = e.scrollOffset;
    this.callBase.apply(this, arguments);
    if (this.option("rtlEnabled") && scrollable) {
      left = getWidth(scrollable.$content()) - getWidth(scrollable.$element()) - left;
    }
    this._columnsController.setScrollPosition(left);
  },
  _renderCore(e) {
    var _a2, _b2;
    if (null === e || void 0 === e ? void 0 : e.virtualColumnsScrolling) {
      var $contentElement = this._findContentElement();
      var fixedColumns = null === (_a2 = this._columnsController) || void 0 === _a2 ? void 0 : _a2.getFixedColumns();
      var useNativeScrolling = null === (_b2 = this._scrollable) || void 0 === _b2 ? void 0 : _b2.option("useNative");
      if (null === fixedColumns || void 0 === fixedColumns ? void 0 : fixedColumns.length) {
        $contentElement.css({
          minHeight: useNativeScrolling ? getHeight($contentElement) : m_utils_default.getContentHeightLimit(browser_default)
        });
        var resizeCompletedHandler = () => {
          this.resizeCompleted.remove(resizeCompletedHandler);
          $contentElement.css({
            minHeight: ""
          });
        };
        this.resizeCompleted.add(resizeCompletedHandler);
      }
    }
    return this.callBase.apply(this, arguments);
  }
};
var HeaderViewExtender = {
  _renderCore() {
    var deferred = this.callBase.apply(this, arguments);
    if (this._columnsController.isVirtualMode()) {
      this._updateScrollLeftPosition();
    }
    return deferred;
  }
};
var ColumnsControllerExtender = /* @__PURE__ */ function() {
  var getWidths = function(columns2) {
    return columns2.map((column) => column.visibleWidth || parseFloat(column.width) || DEFAULT_COLUMN_WIDTH);
  };
  var members = {
    init() {
      this.callBase.apply(this, arguments);
      this._beginPageIndex = null;
      this._endPageIndex = null;
      this._position = 0;
      this._virtualVisibleColumns = {};
    },
    resetColumnsCache() {
      this.callBase();
      this._virtualVisibleColumns = {};
    },
    getBeginPageIndex(position3) {
      var visibleColumns = this.getVisibleColumns(void 0, true);
      var widths = getWidths(visibleColumns);
      var currentPosition = 0;
      for (var index2 = 0; index2 < widths.length; index2++) {
        if (currentPosition >= position3) {
          return Math.floor(index2 / this.getColumnPageSize());
        }
        currentPosition += widths[index2];
      }
      return 0;
    },
    getTotalWidth() {
      var width = this.option("width");
      if ("number" === typeof width) {
        return width;
      }
      return this.getController("resizing")._lastWidth || getOuterWidth(this.component.$element());
    },
    getEndPageIndex(position3) {
      var visibleColumns = this.getVisibleColumns(void 0, true);
      var widths = getWidths(visibleColumns);
      var currentPosition = 0;
      position3 += this.getTotalWidth();
      for (var index2 = 0; index2 < widths.length; index2++) {
        if (currentPosition >= position3) {
          return Math.ceil(index2 / this.getColumnPageSize());
        }
        currentPosition += widths[index2];
      }
      return Math.ceil(widths.length / this.getColumnPageSize());
    },
    getColumnPageSize() {
      return this.option("scrolling.columnPageSize");
    },
    _fireColumnsChanged() {
      var date = /* @__PURE__ */ new Date();
      this.columnsChanged.fire({
        optionNames: {
          all: true,
          length: 1
        },
        changeTypes: {
          columns: true,
          virtualColumnsScrolling: true,
          length: 2
        }
      });
      this._renderTime = /* @__PURE__ */ new Date() - date;
    },
    getScrollingTimeout() {
      var renderingThreshold = this.option("scrolling.columnRenderingThreshold");
      var renderAsync = this.option("scrolling.renderAsync");
      var scrollingTimeout = 0;
      if (!isDefined(renderAsync) && this._renderTime > renderingThreshold || renderAsync) {
        scrollingTimeout = this.option("scrolling.timeout");
      }
      return scrollingTimeout;
    },
    setScrollPosition(position3) {
      var scrollingTimeout = this.getScrollingTimeout();
      if (scrollingTimeout > 0) {
        clearTimeout(this._changedTimeout);
        this._changedTimeout = setTimeout(() => {
          this._setScrollPositionCore(position3);
        }, scrollingTimeout);
      } else {
        this._setScrollPositionCore(position3);
      }
    },
    isVirtualMode() {
      return hasWindow() && "virtual" === this.option("scrolling.columnRenderingMode");
    },
    resize() {
      this._setScrollPositionCore(this._position);
    },
    _setScrollPositionCore(position3) {
      if (this.isVirtualMode()) {
        var beginPageIndex = this.getBeginPageIndex(position3);
        var endPageIndex = this.getEndPageIndex(position3);
        var needColumnsChanged = position3 < this._position ? this._beginPageIndex > beginPageIndex : this._endPageIndex < endPageIndex;
        this._position = position3;
        if (needColumnsChanged) {
          this._beginPageIndex = beginPageIndex;
          this._endPageIndex = endPageIndex;
          this._fireColumnsChanged();
        }
      }
    },
    getFixedColumns(rowIndex, isBase) {
      var fixedColumns = this.callBase(rowIndex);
      if (this.isVirtualMode() && !isBase && fixedColumns.length) {
        var transparentColumnIndex = fixedColumns.map((c) => c.command).indexOf("transparent");
        fixedColumns[transparentColumnIndex].colspan = this.getVisibleColumns().length - this.callBase().length + 1;
        return fixedColumns;
      }
      return fixedColumns;
    },
    _compileVisibleColumns(rowIndex, isBase) {
      var _a2;
      if (isBase || !this.isVirtualMode() || !this._shouldReturnVisibleColumns()) {
        return this.callBase(rowIndex);
      }
      if ((null === (_a2 = this._columns) || void 0 === _a2 ? void 0 : _a2.length) && !isDefined(this._beginPageIndex) && !isDefined(this._endPageIndex)) {
        this._beginPageIndex = this.getBeginPageIndex(this._position);
        this._endPageIndex = this.getEndPageIndex(this._position);
      }
      var beginPageIndex = this._beginPageIndex;
      var endPageIndex = this._endPageIndex;
      var visibleColumnsHash = "".concat(rowIndex, "-").concat(beginPageIndex, "-").concat(endPageIndex);
      if (this._virtualVisibleColumns[visibleColumnsHash]) {
        return this._virtualVisibleColumns[visibleColumnsHash];
      }
      var visibleColumns = this.callBase();
      var rowCount = this.getRowCount();
      var pageSize = this.getColumnPageSize();
      var startIndex = beginPageIndex * pageSize;
      var endIndex = endPageIndex * pageSize;
      var fixedColumns = this.getFixedColumns(void 0, true);
      var transparentColumnIndex = fixedColumns.map((c) => c.command).indexOf("transparent");
      var beginFixedColumnCount = fixedColumns.length ? transparentColumnIndex : 0;
      var beginFixedColumns = visibleColumns.slice(0, beginFixedColumnCount);
      var beginColumns = visibleColumns.slice(beginFixedColumnCount, startIndex);
      var beginWidth = getWidths(beginColumns).reduce((a, b) => a + b, 0);
      if (!beginWidth) {
        startIndex = 0;
      }
      var endFixedColumnCount = fixedColumns.length ? fixedColumns.length - transparentColumnIndex - 1 : 0;
      var endFixedColumns = visibleColumns.slice(visibleColumns.length - endFixedColumnCount);
      var endColumns = visibleColumns.slice(endIndex, visibleColumns.length - endFixedColumnCount);
      var endWidth = getWidths(endColumns).reduce((a, b) => a + b, 0);
      if (!endWidth) {
        endIndex = visibleColumns.length;
      }
      if (rowCount > 1 && "number" === typeof rowIndex) {
        var columnsInfo = [];
        for (var i = 0; i <= rowCount; i++) {
          columnsInfo.push(this.callBase(i));
        }
        beginFixedColumns = createColumnsInfo(columnsInfo, 0, beginFixedColumns.length)[rowIndex] || [];
        endFixedColumns = createColumnsInfo(columnsInfo, visibleColumns.length - endFixedColumns.length, visibleColumns.length)[rowIndex] || [];
        visibleColumns = createColumnsInfo(columnsInfo, startIndex, endIndex)[rowIndex] || [];
      } else {
        visibleColumns = visibleColumns.slice(startIndex, endIndex);
      }
      if (beginWidth) {
        visibleColumns.unshift({
          command: "virtual",
          width: beginWidth
        });
        visibleColumns = beginFixedColumns.concat(visibleColumns);
      }
      if (endWidth) {
        visibleColumns.push({
          command: "virtual",
          width: endWidth
        });
        visibleColumns = visibleColumns.concat(endFixedColumns);
      }
      this._virtualVisibleColumns[visibleColumnsHash] = visibleColumns;
      return visibleColumns;
    },
    getColumnIndexOffset() {
      var offset2 = 0;
      if (this._beginPageIndex > 0) {
        var fixedColumns = this.getFixedColumns();
        var transparentColumnIndex = fixedColumns.map((c) => c.command).indexOf("transparent");
        var leftFixedColumnCount = transparentColumnIndex >= 0 ? transparentColumnIndex : 0;
        offset2 = this._beginPageIndex * this.getColumnPageSize() - leftFixedColumnCount - 1;
      }
      return offset2 > 0 ? offset2 : 0;
    },
    dispose() {
      clearTimeout(this._changedTimeout);
      this.callBase.apply(this, arguments);
    }
  };
  return members;
}();
var virtualColumnsModule = {
  defaultOptions: () => ({
    scrolling: {
      columnRenderingMode: "standard",
      columnPageSize: 5,
      columnRenderingThreshold: 300
    }
  }),
  extenders: {
    controllers: {
      columns: ColumnsControllerExtender
    },
    views: {
      columnHeadersView: HeaderViewExtender,
      rowsView: VirtualScrollingRowsViewExtender2
    }
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/virtual_columns.js
m_core_default.registerModule("virtualColumns", virtualColumnsModule);

// node_modules/devextreme/esm/ui/button_group.js
var BUTTON_GROUP_CLASS2 = "dx-buttongroup";
var BUTTON_GROUP_WRAPPER_CLASS = BUTTON_GROUP_CLASS2 + "-wrapper";
var BUTTON_GROUP_ITEM_CLASS = BUTTON_GROUP_CLASS2 + "-item";
var BUTTON_GROUP_FIRST_ITEM_CLASS = BUTTON_GROUP_CLASS2 + "-first-item";
var BUTTON_GROUP_LAST_ITEM_CLASS = BUTTON_GROUP_CLASS2 + "-last-item";
var BUTTON_GROUP_ITEM_HAS_WIDTH = BUTTON_GROUP_ITEM_CLASS + "-has-width";
var SHAPE_STANDARD_CLASS = "dx-shape-standard";
var BUTTON_GROUP_STYLING_MODE_CLASS = {
  contained: "dx-buttongroup-mode-contained",
  outlined: "dx-buttongroup-mode-outlined",
  text: "dx-buttongroup-mode-text"
};
var ButtonCollection = ui_collection_widget_edit_default.inherit({
  _initTemplates() {
    this.callBase();
    this._templateManager.addDefaultTemplates({
      item: new BindableTemplate(($container, data3, model) => {
        this._prepareItemStyles($container);
        var template = this.option("buttonTemplate");
        this._createComponent($container, button_default, extend({}, model, data3, this._getBasicButtonOptions(), {
          _templateData: this._hasCustomTemplate(template) ? model : {},
          template: model.template || template
        }));
      }, ["text", "type", "icon", "disabled", "visible", "hint"], this.option("integrationOptions.watchMethod"))
    });
  },
  _getBasicButtonOptions() {
    return {
      focusStateEnabled: false,
      onClick: null,
      hoverStateEnabled: this.option("hoverStateEnabled"),
      activeStateEnabled: this.option("activeStateEnabled"),
      stylingMode: this.option("stylingMode")
    };
  },
  _getDefaultOptions: function() {
    return extend(this.callBase(), {
      itemTemplateProperty: null
    });
  },
  _hasCustomTemplate(template) {
    return isFunction(template) || this.option("integrationOptions.templates")[template];
  },
  _selectedItemClass: () => "dx-item-selected dx-state-selected",
  _prepareItemStyles($item) {
    var itemIndex = $item.data("dxItemIndex");
    0 === itemIndex && $item.addClass(BUTTON_GROUP_FIRST_ITEM_CLASS);
    var items = this.option("items");
    items && itemIndex === items.length - 1 && $item.addClass(BUTTON_GROUP_LAST_ITEM_CLASS);
    $item.addClass(SHAPE_STANDARD_CLASS);
  },
  _renderItemContent(args) {
    args.container = renderer_default(args.container).parent();
    return this.callBase(args);
  },
  _setAriaSelectionAttribute: function($target, value2) {
    this.setAria("pressed", value2, $target);
  },
  _renderItemContentByNode: function(args, $node) {
    args.container = renderer_default(args.container.children().first());
    return this.callBase(args, $node);
  },
  _focusTarget() {
    return this.$element().parent();
  },
  _keyboardEventBindingTarget() {
    return this._focusTarget();
  },
  _refreshContent() {
    this._prepareContent();
    this._renderContent();
  },
  _itemClass: () => BUTTON_GROUP_ITEM_CLASS,
  _itemSelectHandler: function(e) {
    if ("single" === this.option("selectionMode") && this.isItemSelected(e.currentTarget)) {
      return;
    }
    this.callBase(e);
  }
});
var ButtonGroup = ui_widget_default.inherit({
  _getDefaultOptions() {
    return extend(this.callBase(), {
      hoverStateEnabled: true,
      focusStateEnabled: true,
      selectionMode: "single",
      selectedItems: [],
      selectedItemKeys: [],
      stylingMode: "contained",
      keyExpr: "text",
      items: [],
      buttonTemplate: "content",
      onSelectionChanged: null,
      onItemClick: null
    });
  },
  _init() {
    this.callBase();
    this._createItemClickAction();
  },
  _createItemClickAction() {
    this._itemClickAction = this._createActionByOption("onItemClick");
  },
  _initMarkup() {
    this.setAria("role", "group");
    this.$element().addClass(BUTTON_GROUP_CLASS2);
    this._renderStylingMode();
    this._renderButtons();
    this._syncSelectionOptions();
    this.callBase();
  },
  _renderStylingMode() {
    var _BUTTON_GROUP_STYLING;
    var {
      stylingMode
    } = this.option();
    for (var key in BUTTON_GROUP_STYLING_MODE_CLASS) {
      this.$element().removeClass(BUTTON_GROUP_STYLING_MODE_CLASS[key]);
    }
    this.$element().addClass(null !== (_BUTTON_GROUP_STYLING = BUTTON_GROUP_STYLING_MODE_CLASS[stylingMode]) && void 0 !== _BUTTON_GROUP_STYLING ? _BUTTON_GROUP_STYLING : BUTTON_GROUP_STYLING_MODE_CLASS.contained);
  },
  _fireSelectionChangeEvent: function(addedItems, removedItems) {
    this._createActionByOption("onSelectionChanged", {
      excludeValidators: ["disabled", "readOnly"]
    })({
      addedItems,
      removedItems
    });
  },
  _renderButtons() {
    var $buttons = renderer_default("<div>").addClass(BUTTON_GROUP_WRAPPER_CLASS).appendTo(this.$element());
    var selectedItems = this.option("selectedItems");
    var options2 = {
      selectionMode: this.option("selectionMode"),
      items: this.option("items"),
      keyExpr: this.option("keyExpr"),
      buttonTemplate: this.option("buttonTemplate"),
      scrollingEnabled: false,
      selectedItemKeys: this.option("selectedItemKeys"),
      focusStateEnabled: this.option("focusStateEnabled"),
      hoverStateEnabled: this.option("hoverStateEnabled"),
      activeStateEnabled: this.option("activeStateEnabled"),
      stylingMode: this.option("stylingMode"),
      accessKey: this.option("accessKey"),
      tabIndex: this.option("tabIndex"),
      noDataText: "",
      selectionRequired: false,
      onItemRendered: (e) => {
        var width = this.option("width");
        isDefined(width) && renderer_default(e.itemElement).addClass(BUTTON_GROUP_ITEM_HAS_WIDTH);
      },
      onSelectionChanged: (e) => {
        this._syncSelectionOptions();
        this._fireSelectionChangeEvent(e.addedItems, e.removedItems);
      },
      onItemClick: (e) => {
        this._itemClickAction(e);
      }
    };
    if (isDefined(selectedItems) && selectedItems.length) {
      options2.selectedItems = selectedItems;
    }
    this._buttonsCollection = this._createComponent($buttons, ButtonCollection, options2);
  },
  _syncSelectionOptions() {
    this._setOptionWithoutOptionChange("selectedItems", this._buttonsCollection.option("selectedItems"));
    this._setOptionWithoutOptionChange("selectedItemKeys", this._buttonsCollection.option("selectedItemKeys"));
  },
  _optionChanged(args) {
    switch (args.name) {
      case "stylingMode":
      case "selectionMode":
      case "keyExpr":
      case "buttonTemplate":
      case "items":
      case "activeStateEnabled":
      case "focusStateEnabled":
      case "hoverStateEnabled":
      case "tabIndex":
        this._invalidate();
        break;
      case "selectedItemKeys":
      case "selectedItems":
        this._buttonsCollection.option(args.name, args.value);
        break;
      case "onItemClick":
        this._createItemClickAction();
        break;
      case "onSelectionChanged":
        break;
      case "width":
        this.callBase(args);
        this._buttonsCollection.itemElements().toggleClass(BUTTON_GROUP_ITEM_HAS_WIDTH, !!args.value);
        break;
      default:
        this.callBase(args);
    }
  }
});
component_registrator_default("dxButtonGroup", ButtonGroup);
var button_group_default = ButtonGroup;

// node_modules/devextreme/esm/ui/drop_down_button.js
var DROP_DOWN_BUTTON_CLASS = "dx-dropdownbutton";
var DROP_DOWN_BUTTON_CONTENT = "dx-dropdownbutton-content";
var DROP_DOWN_BUTTON_ACTION_CLASS = "dx-dropdownbutton-action";
var DROP_DOWN_BUTTON_TOGGLE_CLASS = "dx-dropdownbutton-toggle";
var DROP_DOWN_BUTTON_HAS_ARROW_CLASS = "dx-dropdownbutton-has-arrow";
var DROP_DOWN_BUTTON_POPUP_WRAPPER_CLASS = "dx-dropdownbutton-popup-wrapper";
var DROP_DOWN_EDITOR_OVERLAY_CLASS = "dx-dropdowneditor-overlay";
var DX_BUTTON_CLASS = "dx-button";
var DX_BUTTON_TEXT_CLASS = "dx-button-text";
var DX_ICON_RIGHT_CLASS = "dx-icon-right";
var DropDownButton2 = ui_widget_default.inherit({
  _getDefaultOptions() {
    return extend(this.callBase(), {
      itemTemplate: "item",
      keyExpr: "this",
      displayExpr: void 0,
      selectedItem: null,
      selectedItemKey: null,
      stylingMode: "outlined",
      deferRendering: true,
      noDataText: message_default.format("dxCollectionWidget-noDataText"),
      useSelectMode: false,
      splitButton: false,
      showArrowIcon: true,
      text: "",
      type: "normal",
      icon: void 0,
      onButtonClick: null,
      onSelectionChanged: null,
      onItemClick: null,
      opened: false,
      items: null,
      dataSource: null,
      focusStateEnabled: true,
      hoverStateEnabled: true,
      dropDownOptions: {},
      dropDownContentTemplate: "content",
      wrapItemText: false,
      useItemTextAsTitle: true,
      grouped: false,
      groupTemplate: "group",
      buttonGroupOptions: {}
    });
  },
  _setOptionsByReference() {
    this.callBase();
    extend(this._optionsByReference, {
      selectedItem: true
    });
  },
  _init() {
    this.callBase();
    this._createItemClickAction();
    this._createActionClickAction();
    this._createSelectionChangedAction();
    this._initDataSource();
    this._compileKeyGetter();
    this._compileDisplayGetter();
    this._itemsToDataSource(this.option("items"));
    this._options.cache("buttonGroupOptions", this.option("buttonGroupOptions"));
    this._options.cache("dropDownOptions", this.option("dropDownOptions"));
  },
  _initTemplates() {
    this._templateManager.addDefaultTemplates({
      content: new FunctionTemplate((options2) => {
        var $popupContent = renderer_default(options2.container);
        var $listContainer = renderer_default("<div>").appendTo($popupContent);
        this._list = this._createComponent($listContainer, list_light_default, this._listOptions());
        this._list.registerKeyHandler("escape", this._escHandler.bind(this));
        this._list.registerKeyHandler("tab", this._escHandler.bind(this));
        this._list.registerKeyHandler("leftArrow", this._escHandler.bind(this));
        this._list.registerKeyHandler("rightArrow", this._escHandler.bind(this));
      })
    });
    this.callBase();
  },
  _itemsToDataSource: function(value2) {
    if (!this._dataSource) {
      this._dataSource = new DataSource({
        store: new array_store_default({
          key: this._getKey(),
          data: value2
        }),
        pageSize: 0
      });
    }
  },
  _getKey: function() {
    var _this$_dataSource;
    var keyExpr = this.option("keyExpr");
    var storeKey = null === (_this$_dataSource = this._dataSource) || void 0 === _this$_dataSource ? void 0 : _this$_dataSource.key();
    return isDefined(storeKey) && (!isDefined(keyExpr) || "this" === keyExpr) ? storeKey : keyExpr;
  },
  _compileKeyGetter() {
    this._keyGetter = compileGetter(this._getKey());
  },
  _compileDisplayGetter() {
    this._displayGetter = compileGetter(this.option("displayExpr"));
  },
  _initMarkup() {
    this.callBase();
    this.$element().addClass(DROP_DOWN_BUTTON_CLASS);
    this._renderButtonGroup();
    this._updateArrowClass();
    if (isDefined(this.option("selectedItemKey"))) {
      this._loadSelectedItem().done(this._updateActionButton.bind(this));
    }
  },
  _renderFocusTarget: noop2,
  _render() {
    if (!this.option("deferRendering") || this.option("opened")) {
      this._renderPopup();
    }
    this.callBase();
  },
  _renderContentImpl() {
    if (this._popup) {
      this._renderPopupContent();
    }
    return this.callBase();
  },
  _loadSelectedItem() {
    var _this$_loadSingleDefe;
    null === (_this$_loadSingleDefe = this._loadSingleDeferred) || void 0 === _this$_loadSingleDefe ? void 0 : _this$_loadSingleDefe.reject();
    var d = new Deferred();
    if (this._list && void 0 !== this._lastSelectedItemData) {
      var cachedResult = this.option("useSelectMode") ? this._list.option("selectedItem") : this._lastSelectedItemData;
      return d.resolve(cachedResult);
    }
    this._lastSelectedItemData = void 0;
    var selectedItemKey = this.option("selectedItemKey");
    this._loadSingle(this._getKey(), selectedItemKey).done(d.resolve).fail(() => {
      d.resolve(null);
    });
    this._loadSingleDeferred = d;
    return d.promise();
  },
  _createActionClickAction() {
    this._actionClickAction = this._createActionByOption("onButtonClick");
  },
  _createSelectionChangedAction() {
    this._selectionChangedAction = this._createActionByOption("onSelectionChanged");
  },
  _createItemClickAction() {
    this._itemClickAction = this._createActionByOption("onItemClick");
  },
  _fireSelectionChangedAction(_ref) {
    var {
      previousValue,
      value: value2
    } = _ref;
    this._selectionChangedAction({
      item: value2,
      previousItem: previousValue
    });
  },
  _fireItemClickAction(_ref2) {
    var {
      event,
      itemElement,
      itemData
    } = _ref2;
    return this._itemClickAction({
      event,
      itemElement,
      itemData: this._actionItem || itemData
    });
  },
  _actionButtonConfig() {
    var {
      icon,
      text,
      type: type2
    } = this.option();
    return {
      text,
      icon,
      type: type2,
      elementAttr: {
        class: DROP_DOWN_BUTTON_ACTION_CLASS
      }
    };
  },
  _getButtonGroupItems() {
    var {
      splitButton,
      type: type2
    } = this.option();
    var items = [];
    items.push(this._actionButtonConfig());
    if (splitButton) {
      items.push({
        icon: "spindown",
        type: type2,
        elementAttr: {
          class: DROP_DOWN_BUTTON_TOGGLE_CLASS
        }
      });
    }
    return items;
  },
  _buttonGroupItemClick(_ref3) {
    var {
      event,
      itemData
    } = _ref3;
    var isActionButton = itemData.elementAttr.class === DROP_DOWN_BUTTON_ACTION_CLASS;
    var isToggleButton = itemData.elementAttr.class === DROP_DOWN_BUTTON_TOGGLE_CLASS;
    if (isToggleButton) {
      this.toggle();
    } else if (isActionButton) {
      this._actionClickAction({
        event,
        selectedItem: this.option("selectedItem")
      });
      if (!this.option("splitButton")) {
        this.toggle();
      }
    }
  },
  _buttonGroupOptions() {
    var {
      splitButton,
      showArrowIcon,
      focusStateEnabled,
      hoverStateEnabled,
      stylingMode,
      accessKey,
      tabIndex
    } = this.option();
    var buttonTemplate = splitButton || !showArrowIcon ? "content" : (_ref4, buttonContent) => {
      var {
        text,
        icon
      } = _ref4;
      var $firstIcon = getImageContainer(icon);
      var $textContainer = text ? renderer_default("<span>").text(text).addClass(DX_BUTTON_TEXT_CLASS) : void 0;
      var $secondIcon = getImageContainer("spindown").addClass(DX_ICON_RIGHT_CLASS);
      renderer_default(buttonContent).append($firstIcon, $textContainer, $secondIcon);
    };
    return extend({
      items: this._getButtonGroupItems(),
      onItemClick: this._buttonGroupItemClick.bind(this),
      width: "100%",
      height: "100%",
      selectionMode: "none",
      onKeyboardHandled: (e) => this._keyboardHandler(e),
      buttonTemplate,
      focusStateEnabled,
      hoverStateEnabled,
      stylingMode,
      accessKey,
      tabIndex
    }, this._options.cache("buttonGroupOptions"));
  },
  _renderPopupContent() {
    var $content = this._popup.$content();
    var template = this._getTemplateByOption("dropDownContentTemplate");
    $content.empty();
    this._popupContentId = "dx-" + new guid_default();
    this.setAria("id", this._popupContentId, $content);
    return template.render({
      container: getPublicElement($content),
      model: this.option("items") || this._dataSource
    });
  },
  _popupOptions() {
    var horizontalAlignment = this.option("rtlEnabled") ? "right" : "left";
    return extend({
      dragEnabled: false,
      focusStateEnabled: false,
      deferRendering: this.option("deferRendering"),
      hideOnOutsideClick: (e) => {
        var $element = this.$element();
        var $buttonClicked = renderer_default(e.target).closest(".".concat(DROP_DOWN_BUTTON_CLASS));
        return !$buttonClicked.is($element);
      },
      showTitle: false,
      animation: {
        show: {
          type: "fade",
          duration: 0,
          from: 0,
          to: 1
        },
        hide: {
          type: "fade",
          duration: 400,
          from: 1,
          to: 0
        }
      },
      _ignoreFunctionValueDeprecation: true,
      width: () => getElementWidth(this.$element()),
      height: "auto",
      shading: false,
      position: {
        of: this.$element(),
        collision: "flipfit",
        my: horizontalAlignment + " top",
        at: horizontalAlignment + " bottom"
      },
      _wrapperClassExternal: DROP_DOWN_EDITOR_OVERLAY_CLASS
    }, this._options.cache("dropDownOptions"), {
      visible: this.option("opened")
    });
  },
  _listOptions() {
    var selectedItemKey = this.option("selectedItemKey");
    var useSelectMode = this.option("useSelectMode");
    return {
      selectionMode: useSelectMode ? "single" : "none",
      wrapItemText: this.option("wrapItemText"),
      focusStateEnabled: this.option("focusStateEnabled"),
      hoverStateEnabled: this.option("hoverStateEnabled"),
      useItemTextAsTitle: this.option("useItemTextAsTitle"),
      onContentReady: () => this._fireContentReadyAction(),
      selectedItemKeys: isDefined(selectedItemKey) && useSelectMode ? [selectedItemKey] : [],
      grouped: this.option("grouped"),
      groupTemplate: this.option("groupTemplate"),
      keyExpr: this._getKey(),
      noDataText: this.option("noDataText"),
      displayExpr: this.option("displayExpr"),
      itemTemplate: this.option("itemTemplate"),
      items: this.option("items"),
      dataSource: this._dataSource,
      onItemClick: (e) => {
        if (!this.option("useSelectMode")) {
          this._lastSelectedItemData = e.itemData;
        }
        this.option("selectedItemKey", this._keyGetter(e.itemData));
        var actionResult = this._fireItemClickAction(e);
        if (false !== actionResult) {
          this.toggle(false);
          this._buttonGroup.focus();
        }
      }
    };
  },
  _upDownKeyHandler() {
    if (this._popup && this._popup.option("visible") && this._list) {
      this._list.focus();
    } else {
      this.open();
    }
    return true;
  },
  _escHandler() {
    this.close();
    this._buttonGroup.focus();
    return true;
  },
  _tabHandler() {
    this.close();
    return true;
  },
  _renderPopup() {
    var $popup = renderer_default("<div>");
    this.$element().append($popup);
    this._popup = this._createComponent($popup, ui_popup_default, this._popupOptions());
    this._popup.$content().addClass(DROP_DOWN_BUTTON_CONTENT);
    this._popup.$wrapper().addClass(DROP_DOWN_BUTTON_POPUP_WRAPPER_CLASS);
    this._popup.on("hiding", this._popupHidingHandler.bind(this));
    this._popup.on("showing", this._popupShowingHandler.bind(this));
    this._bindInnerWidgetOptions(this._popup, "dropDownOptions");
  },
  _popupHidingHandler() {
    this.option("opened", false);
    this._updateAriaAttributes(false);
  },
  _popupOptionChanged: function(args) {
    var options2 = ui_widget_default.getOptionsFromContainer(args);
    this._setPopupOption(options2);
    var optionsKeys = Object.keys(options2);
    if (-1 !== optionsKeys.indexOf("width") || -1 !== optionsKeys.indexOf("height")) {
      this._dimensionChanged();
    }
  },
  _dimensionChanged: function() {
    var popupWidth = getSizeValue(this.option("dropDownOptions.width"));
    if (void 0 === popupWidth) {
      this._setPopupOption("width", () => getElementWidth(this.$element()));
    }
  },
  _setPopupOption: function(optionName, value2) {
    this._setWidgetOption("_popup", arguments);
  },
  _popupShowingHandler() {
    this.option("opened", true);
    this._updateAriaAttributes(true);
  },
  _setElementAria(value2) {
    var elementAria = {
      owns: value2 ? this._popupContentId : void 0
    };
    this.setAria(elementAria, this.$element());
  },
  _setButtonsAria(value2) {
    var commonButtonAria = {
      expanded: value2,
      haspopup: "listbox"
    };
    var firstButtonAria = {};
    if (!this.option("text")) {
      firstButtonAria.label = "dropdownbutton";
    }
    this._getButtons().each((index2, $button) => {
      if (0 === index2) {
        this.setAria(_extends({}, firstButtonAria, commonButtonAria), renderer_default($button));
      } else {
        this.setAria(commonButtonAria, renderer_default($button));
      }
    });
  },
  _updateAriaAttributes(value2) {
    this._setElementAria(value2);
    this._setButtonsAria(value2);
  },
  _getButtons() {
    return this._buttonGroup.$element().find(".".concat(DX_BUTTON_CLASS));
  },
  _renderButtonGroup() {
    var $buttonGroup = this._buttonGroup && this._buttonGroup.$element() || renderer_default("<div>");
    if (!this._buttonGroup) {
      this.$element().append($buttonGroup);
    }
    this._buttonGroup = this._createComponent($buttonGroup, button_group_default, this._buttonGroupOptions());
    this._buttonGroup.registerKeyHandler("downArrow", this._upDownKeyHandler.bind(this));
    this._buttonGroup.registerKeyHandler("tab", this._tabHandler.bind(this));
    this._buttonGroup.registerKeyHandler("upArrow", this._upDownKeyHandler.bind(this));
    this._buttonGroup.registerKeyHandler("escape", this._escHandler.bind(this));
    this._bindInnerWidgetOptions(this._buttonGroup, "buttonGroupOptions");
    this._updateAriaAttributes(this.option("opened"));
  },
  _updateArrowClass() {
    var hasArrow = this.option("splitButton") || this.option("showArrowIcon");
    this.$element().toggleClass(DROP_DOWN_BUTTON_HAS_ARROW_CLASS, hasArrow);
  },
  toggle(visible2) {
    if (!this._popup) {
      this._renderPopup();
      this._renderContent();
    }
    return this._popup.toggle(visible2);
  },
  open() {
    return this.toggle(true);
  },
  close() {
    return this.toggle(false);
  },
  _setListOption(name2, value2) {
    this._list && this._list.option(name2, value2);
  },
  _getDisplayValue(item) {
    var isPrimitiveItem = !isPlainObject(item);
    var displayValue = isPrimitiveItem ? item : this._displayGetter(item);
    return !isPlainObject(displayValue) ? String(ensureDefined(displayValue, "")) : "";
  },
  _updateActionButton(selectedItem) {
    if (this.option("useSelectMode")) {
      this.option({
        text: this._getDisplayValue(selectedItem),
        icon: isPlainObject(selectedItem) ? selectedItem.icon : void 0
      });
    }
    this._setOptionWithoutOptionChange("selectedItem", selectedItem);
    this._setOptionWithoutOptionChange("selectedItemKey", this._keyGetter(selectedItem));
  },
  _clean() {
    this._list && this._list.$element().remove();
    this._popup && this._popup.$element().remove();
  },
  _selectedItemKeyChanged(value2) {
    this._setListOption("selectedItemKeys", this.option("useSelectMode") && isDefined(value2) ? [value2] : []);
    var previousItem = this.option("selectedItem");
    this._loadSelectedItem().done((selectedItem) => {
      this._updateActionButton(selectedItem);
      if (this._displayGetter(previousItem) !== this._displayGetter(selectedItem)) {
        this._fireSelectionChangedAction({
          previousValue: previousItem,
          value: selectedItem
        });
      }
    });
  },
  _updateButtonGroup(name2, value2) {
    this._buttonGroup.option(name2, value2);
    this._updateAriaAttributes(this.option("opened"));
  },
  _actionButtonOptionChanged(_ref5) {
    var {
      name: name2,
      value: value2
    } = _ref5;
    var newConfig = {};
    newConfig[name2] = value2;
    this._updateButtonGroup("items[0]", extend({}, this._actionButtonConfig(), newConfig));
    this._popup && this._popup.repaint();
  },
  _selectModeChanged(value2) {
    if (value2) {
      this._setListOption("selectionMode", "single");
      var selectedItemKey = this.option("selectedItemKey");
      this._setListOption("selectedItemKeys", isDefined(selectedItemKey) ? [selectedItemKey] : []);
      this._selectedItemKeyChanged(this.option("selectedItemKey"));
    } else {
      this._setListOption("selectionMode", "none");
      this.option({
        selectedItemKey: void 0,
        selectedItem: void 0
      });
      this._actionButtonOptionChanged({
        text: this.option("text")
      });
    }
  },
  _updateItemCollection(optionName) {
    var selectedItemKey = this.option("selectedItemKey");
    this._setListOption("selectedItem", null);
    this._setWidgetOption("_list", [optionName]);
    if (isDefined(selectedItemKey)) {
      this._loadSelectedItem().done((selectedItem) => {
        this._setListOption("selectedItemKeys", [selectedItemKey]);
        this._setListOption("selectedItem", selectedItem);
      }).fail((error) => {
        this._setListOption("selectedItemKeys", []);
      }).always(this._updateActionButton.bind(this));
    }
  },
  _updateDataSource: function() {
    var items = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this._dataSource.items();
    this._dataSource = void 0;
    this._itemsToDataSource(items);
    this._updateKeyExpr();
  },
  _updateKeyExpr: function() {
    this._compileKeyGetter();
    this._setListOption("keyExpr", this._getKey());
  },
  focus: function() {
    this._buttonGroup.focus();
  },
  _optionChanged(args) {
    var _this$_popup;
    var {
      name: name2,
      value: value2
    } = args;
    switch (name2) {
      case "useSelectMode":
        this._selectModeChanged(value2);
        break;
      case "splitButton":
        this._updateArrowClass();
        this._renderButtonGroup();
        break;
      case "displayExpr":
        this._compileDisplayGetter();
        this._setListOption(name2, value2);
        this._updateActionButton(this.option("selectedItem"));
        break;
      case "keyExpr":
        this._updateDataSource();
        break;
      case "buttonGroupOptions":
        this._innerWidgetOptionChanged(this._buttonGroup, args);
        break;
      case "dropDownOptions":
        if ("dropDownOptions.visible" === args.fullName) {
          break;
        }
        if (void 0 !== args.value.visible) {
          delete args.value.visible;
        }
        this._popupOptionChanged(args);
        this._innerWidgetOptionChanged(this._popup, args);
        break;
      case "opened":
        this.toggle(value2);
        break;
      case "focusStateEnabled":
      case "hoverStateEnabled":
        this._setListOption(name2, value2);
        this._updateButtonGroup(name2, value2);
        this.callBase(args);
        break;
      case "items":
        this._updateDataSource(this.option("items"));
        this._updateItemCollection(name2);
        break;
      case "dataSource":
        if (Array.isArray(value2)) {
          this._updateDataSource(this.option("dataSource"));
        } else {
          this._initDataSource();
          this._updateKeyExpr();
        }
        this._updateItemCollection(name2);
        break;
      case "icon":
      case "text":
        this._actionButtonOptionChanged(args);
        break;
      case "showArrowIcon":
        this._updateArrowClass();
        this._renderButtonGroup();
        this._popup && this._popup.repaint();
        break;
      case "width":
      case "height":
        this.callBase(args);
        null === (_this$_popup = this._popup) || void 0 === _this$_popup ? void 0 : _this$_popup.repaint();
        break;
      case "stylingMode":
        this._updateButtonGroup(name2, value2);
        break;
      case "type":
        this._updateButtonGroup("items", this._getButtonGroupItems());
        break;
      case "itemTemplate":
      case "grouped":
      case "noDataText":
      case "groupTemplate":
      case "wrapItemText":
      case "useItemTextAsTitle":
        this._setListOption(name2, value2);
        break;
      case "dropDownContentTemplate":
        this._renderContent();
        break;
      case "selectedItemKey":
        this._selectedItemKeyChanged(value2);
        break;
      case "selectedItem":
        break;
      case "onItemClick":
        this._createItemClickAction();
        break;
      case "onButtonClick":
        this._createActionClickAction();
        break;
      case "onSelectionChanged":
        this._createSelectionChangedAction();
        break;
      case "deferRendering":
        this.toggle(this.option("opened"));
        break;
      case "tabIndex":
        this._updateButtonGroup(name2, value2);
        break;
      default:
        this.callBase(args);
    }
  }
}).include(data_helper_default);
component_registrator_default("dxDropDownButton", DropDownButton2);

// node_modules/devextreme/esm/__internal/grids/grid_core/m_export.js
function prepareItems(items, emptyCell) {
  var defaultSetter = (value2) => !value2 ? 1 : value2;
  var resultItems = [];
  var cols = (items[0] || []).reduce((sum, item2) => sum + defaultSetter(item2.colspan), 0);
  var getItem = /* @__PURE__ */ ((items2) => {
    var rowIndex2 = 0;
    var cellIndex2 = 0;
    return () => {
      var row = items2[rowIndex2] || [];
      var item2 = row[cellIndex2++];
      if (cellIndex2 >= row.length) {
        rowIndex2++;
        cellIndex2 = 0;
      }
      if (item2) {
        item2.colspan = defaultSetter(item2.colspan);
        item2.rowspan = defaultSetter(item2.rowspan);
      }
      return item2;
    };
  })(items);
  var addItem2 = (rowIndex2, cellIndex2, item2) => {
    var row = resultItems[rowIndex2] = resultItems[rowIndex2] || [];
    row[cellIndex2] = item2;
    if (item2.colspan > 1 || item2.rowspan > 1) {
      var clone = ((item3) => extend({}, item3, emptyCell))(item2);
      for (var c = 1; c < item2.colspan; c++) {
        addItem2(rowIndex2, cellIndex2 + c, clone);
      }
      for (var r = 1; r < item2.rowspan; r++) {
        for (var _c = 0; _c < item2.colspan; _c++) {
          addItem2(rowIndex2 + r, cellIndex2 + _c, clone);
        }
      }
    }
  };
  var item = getItem();
  var rowIndex = 0;
  while (item) {
    for (var cellIndex = 0; cellIndex < cols; cellIndex++) {
      if (!item) {
        break;
      }
      if (resultItems[rowIndex] && resultItems[rowIndex][cellIndex]) {
        continue;
      }
      addItem2(rowIndex, cellIndex, item);
      cellIndex += item.colspan - 1;
      item = getItem();
    }
    rowIndex++;
  }
  return resultItems;
}

// node_modules/devextreme/esm/__internal/grids/data_grid/export/m_export.js
var DATAGRID_EXPORT_MENU_CLASS = "dx-datagrid-export-menu";
var DATAGRID_EXPORT_BUTTON_CLASS = "dx-datagrid-export-button";
var DATAGRID_EXPORT_TOOLBAR_BUTTON_NAME = "exportButton";
var DATAGRID_EXPORT_ICON = "export";
var DATAGRID_EXPORT_EXCEL_ICON = "xlsxfile";
var DATAGRID_EXPORT_SELECTED_ICON = "exportselected";
var DATAGRID_PDF_EXPORT_ICON = "pdffile";
var DataProvider = class {
  constructor(exportController, initialColumnWidthsByColumnIndex, selectedRowsOnly) {
    this._exportController = exportController;
    this._initialColumnWidthsByColumnIndex = initialColumnWidthsByColumnIndex;
    this._selectedRowsOnly = selectedRowsOnly;
  }
  _getGroupValue(item) {
    var {
      key,
      data: data3,
      rowType,
      groupIndex,
      summaryCells
    } = item;
    var groupColumn = this._options.groupColumns[groupIndex];
    var value2 = m_core_default.getDisplayValue(groupColumn, groupColumn.deserializeValue ? groupColumn.deserializeValue(key[groupIndex]) : key[groupIndex], data3, rowType);
    var result2 = "".concat(groupColumn.caption, ": ").concat(m_core_default.formatValue(value2, groupColumn));
    if (summaryCells && summaryCells[0] && summaryCells[0].length) {
      result2 += " ".concat(m_core_default.getGroupRowSummaryText(summaryCells[0], this._options.summaryTexts));
    }
    return result2;
  }
  _correctCellIndex(cellIndex) {
    return cellIndex;
  }
  _initOptions() {
    var exportController = this._exportController;
    var groupColumns = exportController._columnsController.getGroupColumns();
    this._options = {
      columns: exportController._getColumns(this._initialColumnWidthsByColumnIndex),
      groupColumns,
      items: this._selectedRowsOnly || exportController._selectionOnly ? exportController._getSelectedItems() : exportController._getAllItems(),
      isHeadersVisible: exportController.option("showColumnHeaders"),
      summaryTexts: exportController.option("summary.texts"),
      rtlEnabled: exportController.option("rtlEnabled")
    };
  }
  getHeaderStyles() {
    return [{
      bold: true,
      alignment: "center"
    }, {
      bold: true,
      alignment: "left"
    }, {
      bold: true,
      alignment: "right"
    }];
  }
  getGroupRowStyle() {
    return {
      bold: true,
      alignment: getDefaultAlignment(this._options.rtlEnabled)
    };
  }
  getColumnStyles() {
    var columnStyles = [];
    this.getColumns().forEach((column) => {
      columnStyles.push({
        alignment: column.alignment || "left",
        format: column.format,
        dataType: column.dataType
      });
    });
    return columnStyles;
  }
  getStyles() {
    return [...this.getHeaderStyles(), ...this.getColumnStyles(), this.getGroupRowStyle()];
  }
  _getTotalCellStyleId(cellIndex) {
    var _a2;
    var alignment = (null === (_a2 = this.getColumns()[cellIndex]) || void 0 === _a2 ? void 0 : _a2.alignment) || "right";
    return this.getHeaderStyles().map((style) => style.alignment).indexOf(alignment);
  }
  getStyleId(rowIndex, cellIndex) {
    if (rowIndex < this.getHeaderRowCount()) {
      return 0;
    }
    if (this.isTotalCell(rowIndex - this.getHeaderRowCount(), cellIndex)) {
      return this._getTotalCellStyleId(cellIndex);
    }
    if (this.isGroupRow(rowIndex - this.getHeaderRowCount())) {
      return this.getHeaderStyles().length + this.getColumns().length;
    }
    return cellIndex + this.getHeaderStyles().length;
  }
  getColumns(getColumnsByAllRows) {
    var {
      columns: columns2
    } = this._options;
    return getColumnsByAllRows ? columns2 : columns2[columns2.length - 1];
  }
  getColumnsWidths() {
    var columns2 = this.getColumns();
    return isDefined(columns2) ? columns2.map((c) => c.width) : void 0;
  }
  getRowsCount() {
    return this._options.items.length + this.getHeaderRowCount();
  }
  getHeaderRowCount() {
    if (this.isHeadersVisible()) {
      return this._options.columns.length - 1;
    }
    return 0;
  }
  isGroupRow(rowIndex) {
    return rowIndex < this._options.items.length && "group" === this._options.items[rowIndex].rowType;
  }
  getGroupLevel(rowIndex) {
    var item = this._options.items[rowIndex - this.getHeaderRowCount()];
    var groupIndex = item && item.groupIndex;
    if (item && "totalFooter" === item.rowType) {
      return 0;
    }
    return isDefined(groupIndex) ? groupIndex : this._options.groupColumns.length;
  }
  getCellType(rowIndex, cellIndex) {
    var columns2 = this.getColumns();
    if (rowIndex < this.getHeaderRowCount()) {
      return "string";
    }
    rowIndex -= this.getHeaderRowCount();
    if (cellIndex < columns2.length) {
      var item = this._options.items.length && this._options.items[rowIndex];
      var column = columns2[cellIndex];
      if (item && "data" === item.rowType) {
        if (isFinite(item.values[this._correctCellIndex(cellIndex)]) && !isDefined(column.customizeText)) {
          return isDefined(column.lookup) ? column.lookup.dataType : column.dataType;
        }
      }
      return "string";
    }
  }
  ready() {
    this._initOptions();
    var options2 = this._options;
    return when(options2.items).done((items) => {
      options2.items = items;
    }).fail(() => {
      options2.items = [];
    });
  }
  _convertFromGridGroupSummaryItems(gridGroupSummaryItems) {
    if (isDefined(gridGroupSummaryItems) && gridGroupSummaryItems.length > 0) {
      return gridGroupSummaryItems.map((item) => ({
        value: item.value,
        name: item.name
      }));
    }
  }
  getCellData(rowIndex, cellIndex, isExcelJS) {
    var value2;
    var column;
    var result2 = {
      cellSourceData: {},
      value: value2
    };
    var columns2 = this.getColumns();
    var correctedCellIndex = this._correctCellIndex(cellIndex);
    if (rowIndex < this.getHeaderRowCount()) {
      var columnsRow = this.getColumns(true)[rowIndex];
      column = columnsRow[cellIndex];
      result2.cellSourceData.rowType = "header";
      result2.cellSourceData.column = column && column.gridColumn;
      result2.value = column && column.caption;
    } else {
      rowIndex -= this.getHeaderRowCount();
      var item = this._options.items.length && this._options.items[rowIndex];
      if (item) {
        var itemValues = item.values;
        result2.cellSourceData.rowType = item.rowType;
        result2.cellSourceData.column = columns2[cellIndex] && columns2[cellIndex].gridColumn;
        switch (item.rowType) {
          case "groupFooter":
          case "totalFooter":
            if (correctedCellIndex < itemValues.length) {
              value2 = itemValues[correctedCellIndex];
              if (isDefined(value2)) {
                result2.cellSourceData.value = value2.value;
                result2.cellSourceData.totalSummaryItemName = value2.name;
                result2.value = m_core_default.getSummaryText(value2, this._options.summaryTexts);
              } else {
                result2.cellSourceData.value = void 0;
              }
            }
            break;
          case "group":
            result2.cellSourceData.groupIndex = item.groupIndex;
            if (cellIndex < 1) {
              result2.cellSourceData.column = this._options.groupColumns[item.groupIndex];
              result2.cellSourceData.value = item.key[item.groupIndex];
              result2.cellSourceData.groupSummaryItems = this._convertFromGridGroupSummaryItems(item.summaryCells[0]);
              result2.value = this._getGroupValue(item);
            } else {
              var summaryItems = item.values[correctedCellIndex];
              if (Array.isArray(summaryItems)) {
                result2.cellSourceData.groupSummaryItems = this._convertFromGridGroupSummaryItems(summaryItems);
                value2 = "";
                for (var i = 0; i < summaryItems.length; i++) {
                  value2 += (i > 0 ? isExcelJS ? "\n" : " \n " : "") + m_core_default.getSummaryText(summaryItems[i], this._options.summaryTexts);
                }
                result2.value = value2;
              } else {
                result2.cellSourceData.value = void 0;
              }
            }
            break;
          default:
            column = columns2[cellIndex];
            if (column) {
              var _value = itemValues[correctedCellIndex];
              var displayValue = m_core_default.getDisplayValue(column, _value, item.data, item.rowType);
              if (!isFinite(displayValue) || isDefined(column.customizeText)) {
                if (isExcelJS && isDefined(column.customizeText) && column.customizeText === this._exportController._columnsController.getCustomizeTextByDataType("boolean")) {
                  result2.value = displayValue;
                } else {
                  result2.value = m_core_default.formatValue(displayValue, column);
                }
              } else {
                result2.value = displayValue;
              }
              result2.cellSourceData.value = _value;
            }
            result2.cellSourceData.data = item.data;
        }
      }
    }
    return result2;
  }
  isHeadersVisible() {
    return this._options.isHeadersVisible;
  }
  isTotalCell(rowIndex, cellIndex) {
    var {
      items
    } = this._options;
    var item = items[rowIndex];
    var correctCellIndex = this._correctCellIndex(cellIndex);
    var isSummaryAlignByColumn = item.summaryCells && item.summaryCells[correctCellIndex] && item.summaryCells[correctCellIndex].length > 0 && item.summaryCells[correctCellIndex][0].alignByColumn;
    return item && "groupFooter" === item.rowType || "totalFooter" === item.rowType || isSummaryAlignByColumn;
  }
  getCellMerging(rowIndex, cellIndex) {
    var {
      columns: columns2
    } = this._options;
    var column = columns2[rowIndex] && columns2[rowIndex][cellIndex];
    return column ? {
      colspan: (column.exportColspan || 1) - 1,
      rowspan: (column.rowspan || 1) - 1
    } : {
      colspan: 0,
      rowspan: 0
    };
  }
  getFrozenArea() {
    return {
      x: 0,
      y: this.getHeaderRowCount()
    };
  }
};
var ExportController = class extends m_core_default.ViewController {
  _getEmptyCell() {
    return {
      caption: "",
      colspan: 1,
      rowspan: 1
    };
  }
  _updateColumnWidth(column, width) {
    column.width = width;
  }
  _getColumns(initialColumnWidthsByColumnIndex) {
    var result2 = [];
    var i;
    var columns2;
    var columnsController = this._columnsController;
    var rowCount = columnsController.getRowCount();
    for (i = 0; i <= rowCount; i++) {
      var currentHeaderRow = [];
      columns2 = columnsController.getVisibleColumns(i, true);
      var columnWidthsByColumnIndex = void 0;
      if (i === rowCount) {
        if (this._updateLockCount) {
          columnWidthsByColumnIndex = initialColumnWidthsByColumnIndex;
        } else {
          var columnWidths = this._getColumnWidths(this._headersView, this._rowsView);
          if (columnWidths && columnWidths.length) {
            columnWidthsByColumnIndex = {};
            for (var _i = 0; _i < columns2.length; _i++) {
              columnWidthsByColumnIndex[columns2[_i].index] = columnWidths[_i];
            }
          }
        }
      }
      for (var j = 0; j < columns2.length; j++) {
        var column = extend({}, columns2[j], {
          dataType: "datetime" === columns2[j].dataType ? "date" : columns2[j].dataType,
          gridColumn: columns2[j]
        });
        if (this._needColumnExporting(column)) {
          var currentColspan = this._calculateExportColspan(column);
          if (isDefined(currentColspan)) {
            column.exportColspan = currentColspan;
          }
          if (columnWidthsByColumnIndex) {
            this._updateColumnWidth(column, columnWidthsByColumnIndex[column.index]);
          }
          currentHeaderRow.push(column);
        }
      }
      result2.push(currentHeaderRow);
    }
    columns2 = result2[rowCount];
    result2 = prepareItems(result2.slice(0, -1), this._getEmptyCell());
    result2.push(columns2);
    return result2;
  }
  _calculateExportColspan(column) {
    if (!column.isBand) {
      return;
    }
    var childColumns = this._columnsController.getChildrenByBandColumn(column.index, true);
    if (!isDefined(childColumns)) {
      return;
    }
    return childColumns.reduce((result2, childColumn) => {
      if (this._needColumnExporting(childColumn)) {
        return result2 + (this._calculateExportColspan(childColumn) || 1);
      }
      return result2;
    }, 0);
  }
  _needColumnExporting(column) {
    return !column.command && (column.allowExporting || void 0 === column.allowExporting);
  }
  _getFooterSummaryItems(summaryCells, isTotal) {
    var result2 = [];
    var estimatedItemsCount = 1;
    var i = 0;
    do {
      var values = [];
      for (var j = 0; j < summaryCells.length; j++) {
        var summaryCell = summaryCells[j];
        var itemsLength = summaryCell.length;
        if (estimatedItemsCount < itemsLength) {
          estimatedItemsCount = itemsLength;
        }
        values.push(summaryCell[i]);
      }
      result2.push({
        values,
        rowType: isTotal ? "totalFooter" : "groupFooter"
      });
    } while (i++ < estimatedItemsCount - 1);
    return result2;
  }
  _hasSummaryGroupFooters() {
    var groupItems = this.option("summary.groupItems");
    if (isDefined(groupItems)) {
      for (var i = 0; i < groupItems.length; i++) {
        if (groupItems[i].showInGroupFooter) {
          return true;
        }
      }
    }
    return false;
  }
  _getItemsWithSummaryGroupFooters(sourceItems) {
    var result2 = [];
    var beforeGroupFooterItems = [];
    var groupFooterItems = [];
    for (var i = 0; i < sourceItems.length; i++) {
      var item = sourceItems[i];
      if ("groupFooter" === item.rowType) {
        groupFooterItems = this._getFooterSummaryItems(item.summaryCells);
        result2 = result2.concat(beforeGroupFooterItems, groupFooterItems);
        beforeGroupFooterItems = [];
      } else {
        beforeGroupFooterItems.push(item);
      }
    }
    return result2.length ? result2 : beforeGroupFooterItems;
  }
  _updateGroupValuesWithSummaryByColumn(sourceItems) {
    var summaryValues = [];
    for (var i = 0; i < sourceItems.length; i++) {
      var item = sourceItems[i];
      var {
        summaryCells
      } = item;
      if ("group" === item.rowType && summaryCells && summaryCells.length > 1) {
        var groupColumnCount = item.values.length;
        for (var j = 1; j < summaryCells.length; j++) {
          for (var k = 0; k < summaryCells[j].length; k++) {
            var summaryItem = summaryCells[j][k];
            if (summaryItem && summaryItem.alignByColumn) {
              if (!Array.isArray(summaryValues[j - groupColumnCount])) {
                summaryValues[j - groupColumnCount] = [];
              }
              summaryValues[j - groupColumnCount].push(summaryItem);
            }
          }
        }
        if (summaryValues.length > 0) {
          item.values.push(...summaryValues);
          summaryValues = [];
        }
      }
    }
  }
  _processUnExportedItems(items) {
    var columns2 = this._columnsController.getVisibleColumns(null, true);
    var groupColumns = this._columnsController.getGroupColumns();
    var values;
    var summaryCells;
    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      var isCommand = false;
      values = [];
      summaryCells = [];
      for (var j = 0; j < columns2.length; j++) {
        var column = columns2[j];
        isCommand || (isCommand = ["detailExpand", "buttons"].includes(column.type));
        if (this._needColumnExporting(column)) {
          if (item.values) {
            if ("group" === item.rowType && !values.length) {
              values.push(item.key[item.groupIndex]);
            } else {
              values.push(item.values[j]);
            }
          }
          if (item.summaryCells) {
            if ("group" === item.rowType && !summaryCells.length) {
              var index2 = j - groupColumns.length + item.groupIndex;
              summaryCells.push(item.summaryCells[isCommand ? index2 : index2 + 1]);
            } else {
              summaryCells.push(item.summaryCells[j]);
            }
          }
        }
      }
      if (values.length) {
        item.values = values;
      }
      if (summaryCells.length) {
        item.summaryCells = summaryCells;
      }
    }
  }
  _getAllItems(data3) {
    var skipFilter = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;
    var that = this;
    var d = new Deferred();
    var dataController2 = this.getController("data");
    var footerItems = dataController2.footerItems();
    var totalItem = footerItems.length && footerItems[0];
    var summaryTotalItems = that.option("summary.totalItems");
    var summaryCells;
    when(data3).done((data4) => {
      dataController2.loadAll(data4, skipFilter).done((sourceItems, totalAggregates) => {
        that._updateGroupValuesWithSummaryByColumn(sourceItems);
        if (that._hasSummaryGroupFooters()) {
          sourceItems = that._getItemsWithSummaryGroupFooters(sourceItems);
        }
        summaryCells = totalItem && totalItem.summaryCells;
        if (isDefined(totalAggregates) && summaryTotalItems) {
          summaryCells = that._getSummaryCells(summaryTotalItems, totalAggregates);
        }
        var summaryItems = totalItem && that._getFooterSummaryItems(summaryCells, true);
        if (summaryItems) {
          sourceItems = sourceItems.concat(summaryItems);
        }
        that._processUnExportedItems(sourceItems);
        d.resolve(sourceItems);
      }).fail(d.reject);
    }).fail(d.reject);
    return d;
  }
  _getSummaryCells(summaryTotalItems, totalAggregates) {
    var dataController2 = this.getController("data");
    var columnsController = dataController2._columnsController;
    return dataController2._calculateSummaryCells(summaryTotalItems, totalAggregates, columnsController.getVisibleColumns(null, true), (summaryItem, column) => dataController2._isDataColumn(column) ? column.index : -1);
  }
  _getSelectedItems() {
    var selectionController = this.getController("selection");
    if (this.needLoadItemsOnExportingSelectedItems()) {
      return this._getAllItems(selectionController.loadSelectedItemsWithFilter(), true);
    }
    return this._getAllItems(selectionController.getSelectedRowsData());
  }
  _getColumnWidths(headersView, rowsView3) {
    return headersView && headersView.isVisible() ? headersView.getColumnWidths() : rowsView3.getColumnWidths();
  }
  throwWarningIfNoOnExportingEvent() {
    var _a2, _b2;
    var hasOnExporting = null === (_b2 = (_a2 = this.component).hasActionSubscription) || void 0 === _b2 ? void 0 : _b2.call(_a2, "onExporting");
    if (this.option("export.enabled") && !hasOnExporting) {
      ui_errors_default.log("W1024");
    }
  }
  init() {
    this.throwWarningIfNoOnExportingEvent();
    this._columnsController = this.getController("columns");
    this._rowsView = this.getView("rowsView");
    this._headersView = this.getView("columnHeadersView");
    this.createAction("onExporting", {
      excludeValidators: ["disabled", "readOnly"]
    });
  }
  callbackNames() {
    return ["selectionOnlyChanged"];
  }
  getDataProvider(selectedRowsOnly) {
    var columnWidths = this._getColumnWidths(this._headersView, this._rowsView);
    var initialColumnWidthsByColumnIndex;
    if (columnWidths && columnWidths.length) {
      initialColumnWidthsByColumnIndex = {};
      var columnsLastRowVisibleColumns = this._columnsController.getVisibleColumns(this._columnsController.getRowCount(), true);
      for (var i = 0; i < columnsLastRowVisibleColumns.length; i++) {
        initialColumnWidthsByColumnIndex[columnsLastRowVisibleColumns[i].index] = columnWidths[i];
      }
    }
    return new DataProvider(this, initialColumnWidthsByColumnIndex, selectedRowsOnly);
  }
  exportTo(selectedRowsOnly, format2) {
    this._selectionOnly = selectedRowsOnly;
    var onExporting = this.getAction("onExporting");
    var eventArgs = {
      rtlEnabled: this.option("rtlEnabled"),
      selectedRowsOnly: !!selectedRowsOnly,
      format: format2,
      fileName: "DataGrid",
      cancel: false
    };
    isFunction(onExporting) && onExporting(eventArgs);
  }
  publicMethods() {
    return ["getDataProvider"];
  }
  selectionOnly(value2) {
    if (isDefined(value2)) {
      this._isSelectedRows = value2;
      this.selectionOnlyChanged.fire();
    } else {
      return this._isSelectedRows;
    }
  }
  optionChanged(args) {
    super.optionChanged(args);
    if ("export" === args.name) {
      this.throwWarningIfNoOnExportingEvent();
    }
  }
  needLoadItemsOnExportingSelectedItems() {
    var _a2;
    return null !== (_a2 = this.option("loadItemsOnExportingSelectedItems")) && void 0 !== _a2 ? _a2 : this.getController("data")._dataSource.remoteOperations().filtering;
  }
};
m_core_default.registerModule("export", {
  defaultOptions: () => ({
    export: {
      enabled: false,
      fileName: "DataGrid",
      formats: ["xlsx"],
      allowExportSelectedData: false,
      texts: {
        exportTo: message_default.format("dxDataGrid-exportTo"),
        exportAll: message_default.format("dxDataGrid-exportAll"),
        exportSelectedRows: message_default.format("dxDataGrid-exportSelectedRows")
      }
    }
  }),
  controllers: {
    export: ExportController
  },
  extenders: {
    controllers: {
      editing: {
        callbackNames() {
          var callbackList = this.callBase();
          return isDefined(callbackList) ? callbackList.push("editingButtonsUpdated") : ["editingButtonsUpdated"];
        },
        _updateEditButtons() {
          this.callBase();
          this.editingButtonsUpdated.fire();
        }
      }
    },
    views: {
      headerPanel: {
        _getToolbarItems() {
          var items = this.callBase();
          var exportButton = this._getExportToolbarButton();
          if (exportButton) {
            items.push(exportButton);
            this._correctItemsPosition(items);
          }
          return items;
        },
        _getExportToolbarButton() {
          var items = this._getExportToolbarItems();
          if (0 === items.length) {
            return null;
          }
          var disabled = this._needDisableExportButton();
          var toolbarButtonOptions = {
            name: DATAGRID_EXPORT_TOOLBAR_BUTTON_NAME,
            location: "after",
            locateInMenu: "auto",
            sortIndex: 30,
            options: {
              items
            },
            disabled
          };
          if (1 === items.length) {
            var widgetOptions = _extends(_extends({}, items[0]), {
              hint: items[0].text,
              elementAttr: {
                class: DATAGRID_EXPORT_BUTTON_CLASS
              }
            });
            toolbarButtonOptions.widget = "dxButton";
            toolbarButtonOptions.showText = "inMenu";
            toolbarButtonOptions.options = widgetOptions;
          } else {
            var _widgetOptions = {
              icon: DATAGRID_EXPORT_ICON,
              displayExpr: "text",
              items,
              hint: this.option("export.texts.exportTo"),
              elementAttr: {
                class: DATAGRID_EXPORT_BUTTON_CLASS
              },
              dropDownOptions: {
                width: "auto",
                _wrapperClassExternal: DATAGRID_EXPORT_MENU_CLASS
              }
            };
            toolbarButtonOptions.options = _widgetOptions;
            toolbarButtonOptions.widget = "dxDropDownButton";
            toolbarButtonOptions.menuItemTemplate = (_data, _index, container) => {
              this._createComponent(renderer_default(container), list_light_default, {
                items
              });
            };
          }
          return toolbarButtonOptions;
        },
        _getExportToolbarItems() {
          var _a2;
          var exportOptions = this.option("export");
          var texts = this.option("export.texts");
          var formats = null !== (_a2 = this.option("export.formats")) && void 0 !== _a2 ? _a2 : [];
          if (!exportOptions.enabled) {
            return [];
          }
          var items = [];
          formats.forEach((formatType) => {
            var formatName = formatType.toUpperCase();
            var exportAllIcon = DATAGRID_EXPORT_ICON;
            var exportSelectedIcon = DATAGRID_EXPORT_SELECTED_ICON;
            if ("xlsx" === formatType) {
              formatName = "Excel";
              exportAllIcon = DATAGRID_EXPORT_EXCEL_ICON;
            }
            if ("pdf" === formatType) {
              exportAllIcon = DATAGRID_PDF_EXPORT_ICON;
            }
            items.push({
              text: format(texts.exportAll, formatName),
              icon: exportAllIcon,
              onClick: () => {
                this._exportController.exportTo(false, formatType);
              }
            });
            if (exportOptions.allowExportSelectedData) {
              items.push({
                text: format(texts.exportSelectedRows, formatName),
                icon: exportSelectedIcon,
                onClick: () => {
                  this._exportController.exportTo(true, formatType);
                }
              });
            }
          });
          return items;
        },
        _correctItemsPosition(items) {
          items.sort((itemA, itemB) => itemA.sortIndex - itemB.sortIndex);
        },
        _isExportButtonVisible() {
          return this.option("export.enabled");
        },
        optionChanged(args) {
          this.callBase(args);
          if ("export" === args.name) {
            args.handled = true;
            this._invalidate();
          }
        },
        _needDisableExportButton() {
          var isDataColumnsInvisible = !this._columnsController.hasVisibleDataColumns();
          var hasUnsavedChanges = this._editingController.hasChanges();
          return isDataColumnsInvisible || hasUnsavedChanges;
        },
        _columnOptionChanged(e) {
          this.callBase(e);
          var isColumnLocationChanged = m_core_default.checkChanges(e.optionNames, ["groupIndex", "visible", "all"]);
          if (isColumnLocationChanged) {
            var disabled = this._needDisableExportButton();
            this.setToolbarItemDisabled("exportButton", disabled);
          }
        },
        init() {
          this.callBase();
          this._exportController = this.getController("export");
          this._editingController = this.getController("editing");
          this._editingController.editingButtonsUpdated.add(() => {
            var disabled = this._needDisableExportButton();
            this.setToolbarItemDisabled("exportButton", disabled);
          });
        },
        isVisible() {
          return this.callBase() || this._isExportButtonVisible();
        }
      }
    }
  }
});

// node_modules/devextreme/esm/__internal/grids/grid_core/focus/m_focus_utils.js
var getSortFilterValue = (sortInfo, rowData, _ref) => {
  var {
    isRemoteFiltering,
    dateSerializationFormat,
    getSelector
  } = _ref;
  var {
    selector
  } = sortInfo;
  var getter = isFunction(selector) ? selector : getSelector(selector);
  var rawValue = getter ? getter(rowData) : rowData[selector];
  var safeValue = isRemoteFiltering && isDate(rawValue) ? date_serialization_default.serializeDate(rawValue, dateSerializationFormat) : rawValue;
  return {
    getter,
    rawValue,
    safeValue
  };
};
var UiGridCoreFocusUtils = {
  getSortFilterValue
};

// node_modules/devextreme/esm/__internal/grids/grid_core/focus/m_focus.js
var ROW_FOCUSED_CLASS = "dx-row-focused";
var FOCUSED_ROW_SELECTOR2 = ".dx-row.".concat(ROW_FOCUSED_CLASS);
var TABLE_POSTFIX_CLASS = "table";
var CELL_FOCUS_DISABLED_CLASS7 = "dx-cell-focus-disabled";
var FocusController = m_modules_default.ViewController.inherit(/* @__PURE__ */ function() {
  var members = {
    init() {
      this._dataController = this.getController("data");
      this._keyboardController = this.getController("keyboardNavigation");
      this.component._optionsByReference.focusedRowKey = true;
    },
    optionChanged(args) {
      var {
        name: name2,
        value: value2,
        previousValue
      } = args;
      switch (name2) {
        case "focusedRowIndex":
          this._focusRowByIndex(value2);
          this._keyboardController._fireFocusedRowChanged();
          args.handled = true;
          break;
        case "focusedRowKey":
          if (Array.isArray(value2) && JSON.stringify(value2) === JSON.stringify(previousValue)) {
            return;
          }
          this._focusRowByKey(value2);
          this._keyboardController._fireFocusedRowChanged();
          args.handled = true;
          break;
        case "focusedColumnIndex":
        case "focusedRowEnabled":
        case "autoNavigateToFocusedRow":
          args.handled = true;
          break;
        default:
          this.callBase(args);
      }
    },
    isAutoNavigateToFocusedRow() {
      return "infinite" !== this.option("scrolling.mode") && this.option("autoNavigateToFocusedRow");
    },
    _focusRowByIndex(index2, operationTypes) {
      if (!this.option("focusedRowEnabled")) {
        return;
      }
      index2 = void 0 !== index2 ? index2 : this.option("focusedRowIndex");
      if (index2 < 0) {
        if (this.isAutoNavigateToFocusedRow()) {
          this._resetFocusedRow();
        }
      } else {
        this._focusRowByIndexCore(index2, operationTypes);
      }
    },
    _focusRowByIndexCore(index2, operationTypes) {
      var dataController2 = this.getController("data");
      var pageSize = dataController2.pageSize();
      var setKeyByIndex = () => {
        if (this._isValidFocusedRowIndex(index2)) {
          var rowIndex = index2 - dataController2.getRowIndexOffset(true);
          if (!operationTypes || operationTypes.paging && !operationTypes.filtering) {
            var lastItemIndex = dataController2._getLastItemIndex();
            rowIndex = Math.min(rowIndex, lastItemIndex);
          }
          var focusedRowKey = dataController2.getKeyByRowIndex(rowIndex, true);
          if (isDefined(focusedRowKey) && !this.isRowFocused(focusedRowKey)) {
            this.option("focusedRowKey", focusedRowKey);
          }
        }
      };
      if (pageSize >= 0) {
        if (!this._isLocalRowIndex(index2)) {
          var pageIndex = Math.floor(index2 / dataController2.pageSize());
          when(dataController2.pageIndex(pageIndex), dataController2.waitReady()).done(() => {
            setKeyByIndex();
          });
        } else {
          setKeyByIndex();
        }
      }
    },
    _isLocalRowIndex(index2) {
      var dataController2 = this.getController("data");
      var isVirtualScrolling = this.getController("keyboardNavigation")._isVirtualScrolling();
      if (isVirtualScrolling) {
        var pageIndex = Math.floor(index2 / dataController2.pageSize());
        var virtualItems = dataController2.virtualItemsCount();
        var virtualItemsBegin = virtualItems ? virtualItems.begin : -1;
        var visibleRowsCount = dataController2.getVisibleRows().length + dataController2.getRowIndexOffset();
        var visiblePagesCount = Math.ceil(visibleRowsCount / dataController2.pageSize());
        return virtualItemsBegin <= index2 && visiblePagesCount > pageIndex;
      }
      return true;
    },
    _setFocusedRowKeyByIndex(index2) {
      var dataController2 = this.getController("data");
      if (this._isValidFocusedRowIndex(index2)) {
        var rowIndex = Math.min(index2 - dataController2.getRowIndexOffset(), dataController2.items().length - 1);
        var focusedRowKey = dataController2.getKeyByRowIndex(rowIndex);
        if (isDefined(focusedRowKey) && !this.isRowFocused(focusedRowKey)) {
          this.option("focusedRowKey", focusedRowKey);
        }
      }
    },
    _focusRowByKey(key) {
      if (!isDefined(key)) {
        this._resetFocusedRow();
      } else {
        this._navigateToRow(key, true);
      }
    },
    _resetFocusedRow() {
      var focusedRowKey = this.option("focusedRowKey");
      var isFocusedRowKeyDefined = isDefined(focusedRowKey);
      if (!isFocusedRowKeyDefined && this.option("focusedRowIndex") < 0) {
        return;
      }
      var keyboardController = this.getController("keyboardNavigation");
      if (isFocusedRowKeyDefined) {
        this.option("focusedRowKey", null);
      }
      keyboardController.setFocusedRowIndex(-1);
      this.option("focusedRowIndex", -1);
      this.getController("data").updateItems({
        changeType: "updateFocusedRow",
        focusedRowKey: null
      });
      keyboardController._fireFocusedRowChanged(void 0, -1);
    },
    _isValidFocusedRowIndex(rowIndex) {
      var dataController2 = this.getController("data");
      var row = dataController2.getVisibleRows()[rowIndex];
      return !row || "data" === row.rowType || "group" === row.rowType;
    },
    publicMethods: () => ["navigateToRow", "isRowFocused"],
    navigateToRow(key) {
      if (!this.isAutoNavigateToFocusedRow()) {
        this.option("focusedRowIndex", -1);
      }
      return this._navigateToRow(key);
    },
    _navigateToRow(key, needFocusRow) {
      var that = this;
      var dataController2 = that.getController("data");
      var isAutoNavigate = that.isAutoNavigateToFocusedRow();
      var d = new Deferred();
      if (void 0 === key || !dataController2.dataSource()) {
        return d.reject().promise();
      }
      var rowIndexByKey = that.getFocusedRowIndexByKey(key);
      if (!isAutoNavigate && needFocusRow || rowIndexByKey >= 0) {
        that._navigateTo(key, d, needFocusRow);
      } else {
        dataController2.getPageIndexByKey(key).done((pageIndex) => {
          if (pageIndex < 0) {
            d.resolve(-1);
            return;
          }
          if (pageIndex === dataController2.pageIndex()) {
            dataController2.reload().done(() => {
              if (that.isRowFocused(key) && dataController2.getRowIndexByKey(key) >= 0) {
                d.resolve(that.getFocusedRowIndexByKey(key));
              } else {
                that._navigateTo(key, d, needFocusRow);
              }
            }).fail(d.reject);
          } else {
            dataController2.pageIndex(pageIndex).done(() => {
              that._navigateTo(key, d, needFocusRow);
            }).fail(d.reject);
          }
        }).fail(d.reject);
      }
      return d.promise();
    },
    _navigateTo(key, deferred, needFocusRow) {
      var visibleRowIndex = this.getController("data").getRowIndexByKey(key);
      var isVirtualRowRenderingMode = m_utils_default.isVirtualRowRendering(this);
      var isAutoNavigate = this.isAutoNavigateToFocusedRow();
      if (isAutoNavigate && isVirtualRowRenderingMode && visibleRowIndex < 0) {
        this._navigateToVirtualRow(key, deferred, needFocusRow);
      } else {
        this._navigateToVisibleRow(key, deferred, needFocusRow);
      }
    },
    _navigateToVisibleRow(key, deferred, needFocusRow) {
      if (needFocusRow) {
        this._triggerUpdateFocusedRow(key, deferred);
      } else {
        var focusedRowIndex = this.getFocusedRowIndexByKey(key);
        this.getView("rowsView").scrollToRowElement(key, deferred).done(() => {
          deferred.resolve(focusedRowIndex);
        });
      }
    },
    _navigateToVirtualRow(key, deferred, needFocusRow) {
      var dataController2 = this.getController("data");
      var rowsScrollController = dataController2._rowsScrollController;
      var rowIndex = m_utils_default.getIndexByKey(key, dataController2.items(true));
      var scrollable = this.getView("rowsView").getScrollable();
      if (rowsScrollController && scrollable && rowIndex >= 0) {
        var focusedRowIndex = rowIndex + dataController2.getRowIndexOffset(true);
        var offset2 = rowsScrollController.getItemOffset(focusedRowIndex);
        var triggerUpdateFocusedRow = () => {
          if (dataController2.totalCount() && !dataController2.items().length) {
            return;
          }
          this.component.off("contentReady", triggerUpdateFocusedRow);
          if (needFocusRow) {
            this._triggerUpdateFocusedRow(key, deferred);
          } else {
            deferred.resolve(focusedRowIndex);
          }
        };
        this.component.on("contentReady", triggerUpdateFocusedRow);
        this.getView("rowsView").scrollTopPosition(offset2);
      } else {
        deferred.resolve(-1);
      }
    },
    _triggerUpdateFocusedRow(key, deferred) {
      var dataController2 = this.getController("data");
      var focusedRowIndex = this.getFocusedRowIndexByKey(key);
      if (this._isValidFocusedRowIndex(focusedRowIndex)) {
        var d;
        if (this.option("focusedRowEnabled")) {
          dataController2.updateItems({
            changeType: "updateFocusedRow",
            focusedRowKey: key
          });
        } else {
          d = this.getView("rowsView").scrollToRowElement(key);
        }
        when(d).done(() => {
          this.getController("keyboardNavigation").setFocusedRowIndex(focusedRowIndex);
          deferred && deferred.resolve(focusedRowIndex);
        });
      } else {
        deferred && deferred.resolve(-1);
      }
    },
    getFocusedRowIndexByKey(key) {
      var dataController2 = this.getController("data");
      var loadedRowIndex = dataController2.getRowIndexByKey(key, true);
      return loadedRowIndex >= 0 ? loadedRowIndex + dataController2.getRowIndexOffset(true) : -1;
    },
    _focusRowByKeyOrIndex() {
      var focusedRowKey = this.option("focusedRowKey");
      var currentFocusedRowIndex = this.option("focusedRowIndex");
      var keyboardController = this.getController("keyboardNavigation");
      var dataController2 = this.getController("data");
      if (isDefined(focusedRowKey)) {
        var visibleRowIndex = dataController2.getRowIndexByKey(focusedRowKey);
        if (visibleRowIndex >= 0) {
          if (keyboardController._isVirtualScrolling()) {
            currentFocusedRowIndex = visibleRowIndex + dataController2.getRowIndexOffset();
          }
          keyboardController.setFocusedRowIndex(currentFocusedRowIndex);
          this._triggerUpdateFocusedRow(focusedRowKey);
        } else {
          this._navigateToRow(focusedRowKey, true).done((focusedRowIndex) => {
            if (currentFocusedRowIndex >= 0 && focusedRowIndex < 0) {
              this._focusRowByIndex();
            } else if (currentFocusedRowIndex < 0 && focusedRowIndex >= 0) {
              keyboardController.setFocusedRowIndex(focusedRowIndex);
            }
          });
        }
      } else if (currentFocusedRowIndex >= 0) {
        this.getController("focus")._focusRowByIndex(currentFocusedRowIndex);
      }
    },
    isRowFocused(key) {
      var focusedRowKey = this.option("focusedRowKey");
      if (isDefined(focusedRowKey)) {
        return equalByValue(key, this.option("focusedRowKey"));
      }
      return;
    },
    updateFocusedRow(_ref) {
      var {
        focusedRowKey
      } = _ref;
      var that = this;
      var focusedRowIndex = that._dataController.getRowIndexByKey(focusedRowKey);
      var rowsView3 = that.getView("rowsView");
      var $tableElement;
      var $mainRow;
      each(rowsView3.getTableElements(), (index2, element) => {
        var isMainTable = 0 === index2;
        $tableElement = renderer_default(element);
        that._clearPreviousFocusedRow($tableElement, focusedRowIndex);
        var $row = that._prepareFocusedRow({
          changedItem: that._dataController.getVisibleRows()[focusedRowIndex],
          $tableElement,
          focusedRowIndex
        });
        if (isMainTable) {
          $mainRow = $row;
        }
      });
      $mainRow && rowsView3.scrollToElementVertically($mainRow);
    },
    _clearPreviousFocusedRow($tableElement, focusedRowIndex) {
      var $prevRowFocusedElement = $tableElement.find(FOCUSED_ROW_SELECTOR2).filter((_, focusedRow) => {
        var $focusedRowTable = renderer_default(focusedRow).closest(".".concat(this.addWidgetPrefix(TABLE_POSTFIX_CLASS)));
        return $tableElement.is($focusedRowTable);
      });
      $prevRowFocusedElement.removeClass(ROW_FOCUSED_CLASS).removeClass(CELL_FOCUS_DISABLED_CLASS7).removeAttr("tabindex");
      $prevRowFocusedElement.children("td").removeAttr("tabindex");
      if (0 !== focusedRowIndex) {
        var $firstRow = renderer_default(this.getView("rowsView").getRowElement(0));
        $firstRow.removeClass(CELL_FOCUS_DISABLED_CLASS7).removeAttr("tabIndex");
      }
    },
    _prepareFocusedRow(options2) {
      var $row;
      var {
        changedItem
      } = options2;
      if (changedItem && ("data" === changedItem.rowType || "group" === changedItem.rowType)) {
        var {
          focusedRowIndex
        } = options2;
        var {
          $tableElement
        } = options2;
        var tabIndex = this.option("tabindex") || 0;
        var rowsView3 = this.getView("rowsView");
        $row = renderer_default(rowsView3._getRowElements($tableElement).eq(focusedRowIndex));
        $row.addClass(ROW_FOCUSED_CLASS).attr("tabindex", tabIndex);
      }
      return $row;
    }
  };
  return members;
}());
var focusModule = {
  defaultOptions: () => ({
    focusedRowEnabled: false,
    autoNavigateToFocusedRow: true,
    focusedRowKey: null,
    focusedRowIndex: -1,
    focusedColumnIndex: -1
  }),
  controllers: {
    focus: FocusController
  },
  extenders: {
    controllers: {
      keyboardNavigation: {
        init() {
          var rowIndex = this.option("focusedRowIndex");
          var columnIndex = this.option("focusedColumnIndex");
          this.createAction("onFocusedRowChanging", {
            excludeValidators: ["disabled", "readOnly"]
          });
          this.createAction("onFocusedRowChanged", {
            excludeValidators: ["disabled", "readOnly"]
          });
          this.createAction("onFocusedCellChanging", {
            excludeValidators: ["disabled", "readOnly"]
          });
          this.createAction("onFocusedCellChanged", {
            excludeValidators: ["disabled", "readOnly"]
          });
          this.callBase();
          this.setRowFocusType();
          this._focusedCellPosition = {};
          if (isDefined(rowIndex) && rowIndex >= 0) {
            this._focusedCellPosition.rowIndex = rowIndex;
          }
          if (isDefined(columnIndex) && columnIndex >= 0) {
            this._focusedCellPosition.columnIndex = columnIndex;
          }
        },
        setFocusedRowIndex(rowIndex) {
          this.callBase(rowIndex);
          this.option("focusedRowIndex", rowIndex);
        },
        setFocusedColumnIndex(columnIndex) {
          this.callBase(columnIndex);
          this.option("focusedColumnIndex", columnIndex);
        },
        _escapeKeyHandler(eventArgs, isEditing) {
          if (isEditing || !this.option("focusedRowEnabled")) {
            return this.callBase(eventArgs, isEditing);
          }
          if (this.isCellFocusType()) {
            this.setRowFocusType();
            this._focus(this._getCellElementFromTarget(eventArgs.originalEvent.target), true);
            return true;
          }
          return false;
        },
        _updateFocusedCellPosition($cell, direction) {
          var position3 = this.callBase($cell, direction);
          if (position3 && position3.columnIndex >= 0) {
            this._fireFocusedCellChanged($cell);
          }
        }
      },
      editorFactory: {
        renderFocusOverlay($element, isHideBorder) {
          var keyboardController = this.getController("keyboardNavigation");
          var focusedRowEnabled = this.option("focusedRowEnabled");
          var editingController = this.getController("editing");
          var $cell;
          if (!focusedRowEnabled || !(null === keyboardController || void 0 === keyboardController ? void 0 : keyboardController.isRowFocusType()) || editingController.isEditing()) {
            this.callBase($element, isHideBorder);
          } else if (focusedRowEnabled) {
            var isRowElement = "row" === keyboardController._getElementType($element);
            if (isRowElement && !$element.hasClass(ROW_FOCUSED_CLASS)) {
              $cell = keyboardController.getFirstValidCellInRow($element);
              keyboardController.focus($cell);
            }
          }
        }
      },
      columns: {
        getSortDataSourceParameters(_, sortByKey) {
          var result2 = this.callBase.apply(this, arguments);
          var dataController2 = this.getController("data");
          var dataSource = dataController2._dataSource;
          var store = dataController2.store();
          var key = store && store.key();
          var remoteOperations = dataSource && dataSource.remoteOperations() || {};
          var isLocalOperations = Object.keys(remoteOperations).every((operationName) => !remoteOperations[operationName]);
          if (key && (this.option("focusedRowEnabled") && false !== this.getController("focus").isAutoNavigateToFocusedRow() || sortByKey)) {
            key = Array.isArray(key) ? key : [key];
            var notSortedKeys = key.filter((key2) => !this.columnOption(key2, "sortOrder"));
            if (notSortedKeys.length) {
              result2 = result2 || [];
              if (isLocalOperations) {
                result2.push({
                  selector: dataSource.getDataIndexGetter(),
                  desc: false
                });
              } else {
                notSortedKeys.forEach((notSortedKey) => result2.push({
                  selector: notSortedKey,
                  desc: false
                }));
              }
            }
          }
          return result2;
        }
      },
      data: {
        _applyChange(change) {
          if (change && "updateFocusedRow" === change.changeType) {
            return;
          }
          return this.callBase.apply(this, arguments);
        },
        _fireChanged(e) {
          this.callBase(e);
          if (this.option("focusedRowEnabled") && this._dataSource) {
            var isPartialUpdate = "update" === e.changeType && e.repaintChangesOnly;
            var isPartialUpdateWithDeleting = isPartialUpdate && e.changeTypes && e.changeTypes.indexOf("remove") >= 0;
            if ("refresh" === e.changeType && e.items.length || isPartialUpdateWithDeleting) {
              this._updatePageIndexes();
              this._updateFocusedRow(e);
            } else if ("append" === e.changeType || "prepend" === e.changeType) {
              this._updatePageIndexes();
            } else if ("update" === e.changeType && e.repaintChangesOnly) {
              this._updateFocusedRow(e);
            }
          }
        },
        _updatePageIndexes() {
          var prevRenderingPageIndex = this._lastRenderingPageIndex || 0;
          var renderingPageIndex = this._rowsScrollController ? this._rowsScrollController.pageIndex() : 0;
          this._lastRenderingPageIndex = renderingPageIndex;
          this._isPagingByRendering = renderingPageIndex !== prevRenderingPageIndex;
        },
        isPagingByRendering() {
          return this._isPagingByRendering;
        },
        _updateFocusedRow(e) {
          var operationTypes = e.operationTypes || {};
          var focusController = this.getController("focus");
          var {
            reload,
            fullReload,
            pageIndex,
            paging
          } = operationTypes;
          var keyboardController = this.getController("keyboardNavigation");
          var isVirtualScrolling = keyboardController._isVirtualScrolling();
          var pagingWithoutVirtualScrolling = paging && !isVirtualScrolling;
          var focusedRowKey = this.option("focusedRowKey");
          var isAutoNavigate = focusController.isAutoNavigateToFocusedRow();
          var isReload = reload && false === pageIndex;
          if (isReload && !fullReload && isDefined(focusedRowKey)) {
            focusController._navigateToRow(focusedRowKey, true).done((focusedRowIndex2) => {
              if (focusedRowIndex2 < 0) {
                focusController._focusRowByIndex(void 0, operationTypes);
              }
            });
          } else if (pagingWithoutVirtualScrolling && isAutoNavigate) {
            var rowIndexByKey = this.getRowIndexByKey(focusedRowKey);
            var focusedRowIndex = this.option("focusedRowIndex");
            var isValidRowIndexByKey = rowIndexByKey >= 0;
            var isValidFocusedRowIndex = focusedRowIndex >= 0;
            var isSameRowIndex = focusedRowIndex === rowIndexByKey;
            if (isValidFocusedRowIndex && (isSameRowIndex || !isValidRowIndexByKey)) {
              focusController._focusRowByIndex(focusedRowIndex, operationTypes);
            }
          } else if (pagingWithoutVirtualScrolling && !isAutoNavigate && this.getRowIndexByKey(focusedRowKey) < 0) {
            this.option("focusedRowIndex", -1);
          } else if (operationTypes.fullReload) {
            focusController._focusRowByKeyOrIndex();
          }
        },
        getPageIndexByKey(key) {
          var that = this;
          var d = new Deferred();
          that.getGlobalRowIndexByKey(key).done((globalIndex) => {
            d.resolve(globalIndex >= 0 ? Math.floor(globalIndex / that.pageSize()) : -1);
          }).fail(d.reject);
          return d.promise();
        },
        getGlobalRowIndexByKey(key) {
          if (this._dataSource.group()) {
            return this._calculateGlobalRowIndexByGroupedData(key);
          }
          return this._calculateGlobalRowIndexByFlatData(key);
        },
        _calculateGlobalRowIndexByFlatData(key, groupFilter, useGroup) {
          var that = this;
          var deferred = new Deferred();
          var dataSource = that._dataSource;
          if (Array.isArray(key) || isNewRowTempKey(key)) {
            return deferred.resolve(-1).promise();
          }
          var filter = that._generateFilterByKey(key);
          dataSource.load({
            filter: that._concatWithCombinedFilter(filter),
            skip: 0,
            take: 1
          }).done((data3) => {
            if (data3.length > 0) {
              filter = that._generateOperationFilterByKey(key, data3[0], useGroup);
              dataSource.load({
                filter: that._concatWithCombinedFilter(filter, groupFilter),
                skip: 0,
                take: 1,
                requireTotalCount: true
              }).done((_, extra) => {
                deferred.resolve(extra.totalCount);
              });
            } else {
              deferred.resolve(-1);
            }
          });
          return deferred.promise();
        },
        _concatWithCombinedFilter(filter, groupFilter) {
          var combinedFilter = this.getCombinedFilter();
          return m_utils_default.combineFilters([filter, combinedFilter, groupFilter]);
        },
        _generateBooleanFilter(selector, value2, sortInfo) {
          var {
            desc
          } = sortInfo;
          switch (true) {
            case (false === value2 && desc):
              return [selector, "=", true];
            case (false === value2 && !desc):
              return [selector, "=", null];
            case (true === value2 && !desc):
            case (!isBoolean(value2) && desc):
              return [selector, "<>", value2];
            default:
              return;
          }
        },
        _generateOperationFilterByKey(key, rowData, useGroup) {
          var that = this;
          var dateSerializationFormat = that.option("dateSerializationFormat");
          var isRemoteFiltering = that._dataSource.remoteOperations().filtering;
          var isRemoteSorting = that._dataSource.remoteOperations().sorting;
          var filter = that._generateFilterByKey(key, "<");
          var sort = that._columnsController.getSortDataSourceParameters(!isRemoteFiltering, true);
          if (useGroup) {
            var group = that._columnsController.getGroupDataSourceParameters(!isRemoteFiltering);
            if (group) {
              sort = sort ? group.concat(sort) : group;
            }
          }
          if (sort) {
            sort.slice().reverse().forEach((sortInfo) => {
              var {
                selector,
                desc,
                compare: compare3
              } = sortInfo;
              var {
                getter,
                rawValue,
                safeValue
              } = UiGridCoreFocusUtils.getSortFilterValue(sortInfo, rowData, {
                isRemoteFiltering,
                dateSerializationFormat,
                getSelector: (selector2) => that._columnsController.columnOption(selector2, "selector")
              });
              filter = [
                [selector, "=", safeValue],
                "and",
                filter
              ];
              if (null === rawValue || isBoolean(rawValue)) {
                var booleanFilter = that._generateBooleanFilter(selector, safeValue, desc);
                if (booleanFilter) {
                  filter = [booleanFilter, "or", filter];
                }
              } else {
                var filterOperation = desc ? ">" : "<";
                var sortFilter;
                if (compare3 && !isRemoteSorting) {
                  sortFilter = (data3) => {
                    if ("<" === filterOperation) {
                      return compare3(rawValue, getter(data3)) >= 1;
                    }
                    return compare3(rawValue, getter(data3)) <= -1;
                  };
                } else {
                  sortFilter = [selector, filterOperation, safeValue];
                  if (!desc) {
                    sortFilter = [sortFilter, "or", [selector, "=", null]];
                  }
                }
                filter = [sortFilter, "or", filter];
              }
            });
          }
          return filter;
        },
        _generateFilterByKey(key, operation) {
          var dataSourceKey = this._dataSource.key();
          var filter = [];
          if (!operation) {
            operation = "=";
          }
          if (Array.isArray(dataSourceKey)) {
            for (var i = 0; i < dataSourceKey.length; ++i) {
              var keyPart = key[dataSourceKey[i]];
              if (keyPart) {
                if (filter.length > 0) {
                  filter.push("and");
                }
                filter.push([dataSourceKey[i], operation, keyPart]);
              }
            }
          } else {
            filter = [dataSourceKey, operation, key];
          }
          return filter;
        },
        _getLastItemIndex() {
          return this.items(true).length - 1;
        }
      },
      editing: {
        _deleteRowCore(rowIndex) {
          var deferred = this.callBase.apply(this, arguments);
          var dataController2 = this.getController("data");
          var rowKey = dataController2.getKeyByRowIndex(rowIndex);
          deferred.done(() => {
            var rowIndex2 = dataController2.getRowIndexByKey(rowKey);
            var visibleRows = dataController2.getVisibleRows();
            if (-1 === rowIndex2 && !visibleRows.length) {
              this.getController("focus")._resetFocusedRow();
            }
          });
        }
      }
    },
    views: {
      rowsView: {
        _createRow(row) {
          var $row = this.callBase.apply(this, arguments);
          if (this.option("focusedRowEnabled") && row) {
            if (this.getController("focus").isRowFocused(row.key)) {
              $row.addClass(ROW_FOCUSED_CLASS);
            }
          }
          return $row;
        },
        _checkRowKeys(options2) {
          this.callBase.apply(this, arguments);
          if (this.option("focusedRowEnabled") && this.option("dataSource")) {
            var store = this._dataController.store();
            if (store && !store.key()) {
              this._dataController.fireError("E1042", "Row focusing");
            }
          }
        },
        _update(change) {
          if ("updateFocusedRow" === change.changeType) {
            if (this.option("focusedRowEnabled")) {
              this.getController("focus").updateFocusedRow(change);
            }
          } else {
            this.callBase(change);
          }
        },
        updateFocusElementTabIndex($cellElements, preventScroll) {
          if (this.option("focusedRowEnabled")) {
            this._setFocusedRowElementTabIndex(preventScroll);
          } else {
            this.callBase($cellElements);
          }
        },
        _setFocusedRowElementTabIndex(preventScroll) {
          var focusedRowKey = this.option("focusedRowKey");
          var tabIndex = this.option("tabIndex") || 0;
          var dataController2 = this._dataController;
          var columnsController = this._columnsController;
          var rowIndex = dataController2.getRowIndexByKey(focusedRowKey);
          var columnIndex = this.option("focusedColumnIndex");
          var $row = this._findRowElementForTabIndex();
          if (!isDefined(this._scrollToFocusOnResize)) {
            this._scrollToFocusOnResize = () => {
              this.scrollToElementVertically(this._findRowElementForTabIndex());
              this.resizeCompleted.remove(this._scrollToFocusOnResize);
            };
          }
          $row.attr("tabIndex", tabIndex);
          if (rowIndex >= 0 && !preventScroll) {
            if (columnIndex < 0) {
              columnIndex = 0;
            }
            rowIndex += dataController2.getRowIndexOffset();
            columnIndex += columnsController.getColumnIndexOffset();
            this.getController("keyboardNavigation").setFocusedCellPosition(rowIndex, columnIndex);
            if (this.getController("focus").isAutoNavigateToFocusedRow()) {
              var dataSource = dataController2.dataSource();
              var operationTypes = dataSource && dataSource.operationTypes();
              if (operationTypes && !operationTypes.paging && !dataController2.isPagingByRendering()) {
                this.resizeCompleted.remove(this._scrollToFocusOnResize);
                this.resizeCompleted.add(this._scrollToFocusOnResize);
              }
            }
          }
        },
        _findRowElementForTabIndex() {
          var focusedRowKey = this.option("focusedRowKey");
          var rowIndex = this._dataController.getRowIndexByKey(focusedRowKey);
          return renderer_default(this.getRowElement(rowIndex >= 0 ? rowIndex : 0));
        },
        scrollToRowElement(key) {
          var rowIndex = this.getController("data").getRowIndexByKey(key);
          var $row = renderer_default(this.getRow(rowIndex));
          return this.scrollToElementVertically($row);
        },
        scrollToElementVertically($row) {
          var scrollable = this.getScrollable();
          if (scrollable && $row.length) {
            var position3 = scrollable.getScrollElementPosition($row, "vertical");
            return this.scrollTopPosition(position3);
          }
          return new Deferred().resolve();
        },
        scrollTopPosition(scrollTop) {
          var d = new Deferred();
          var scrollable = this.getScrollable();
          if (scrollable) {
            var currentScrollTop = scrollable.scrollTop();
            var scrollHandler = () => {
              scrollable.off("scroll", scrollHandler);
              d.resolve();
            };
            if (scrollTop !== currentScrollTop) {
              scrollable.on("scroll", scrollHandler);
              this._dataController.resetFilterApplying();
              scrollable.scrollTo({
                top: scrollTop
              });
              return d.promise();
            }
          }
          return d.resolve();
        }
      }
    }
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/focus/m_focus.js
var MAX_SAFE_INTEGER2 = Number.MAX_SAFE_INTEGER || 9007199254740991;
m_core_default.registerModule("focus", extend(true, {}, focusModule, {
  extenders: {
    controllers: {
      data: (Base) => class extends Base.inherit(focusModule.extenders.controllers.data) {
        changeRowExpand(path, isRowClick) {
          if (this.option("focusedRowEnabled") && Array.isArray(path) && this.isRowExpanded(path)) {
            var keyboardNavigation2 = this.getController("keyboardNavigation");
            if ((!isRowClick || !keyboardNavigation2.isKeyboardEnabled()) && this._isFocusedRowInsideGroup(path)) {
              this.option("focusedRowKey", path);
            }
          }
          return super.changeRowExpand(path, isRowClick);
        }
        _isFocusedRowInsideGroup(path) {
          var columnsController = this.getController("columns");
          var focusedRowKey = this.option("focusedRowKey");
          var rowIndex = this.getRowIndexByKey(focusedRowKey);
          var focusedRow = rowIndex >= 0 && this.getVisibleRows()[rowIndex];
          var groups = columnsController.getGroupDataSourceParameters(true);
          if (focusedRow) {
            for (var i = 0; i < path.length; ++i) {
              var getter = compileGetter(groups[i] && groups[i].selector);
              if (getter(focusedRow.data) !== path[i]) {
                return false;
              }
            }
          }
          return true;
        }
        _getGroupPath(groupItem, groupCount) {
          var groupPath = [];
          var items = [groupItem];
          while (items && items[0] && groupCount) {
            var item = items[0];
            if (void 0 !== item.key) {
              groupPath.push(item.key);
            }
            items = item.items;
            groupCount--;
          }
          return groupPath;
        }
        _expandGroupByPath(that, groupPath, level) {
          var d = new Deferred();
          level++;
          that.expandRow(groupPath.slice(0, level)).done(() => {
            if (level === groupPath.length) {
              d.resolve();
            } else {
              that._expandGroupByPath(that, groupPath, level).done(d.resolve).fail(d.reject);
            }
          }).fail(d.reject);
          return d.promise();
        }
        _calculateGlobalRowIndexByGroupedData(key) {
          var that = this;
          var dataSource = that._dataSource;
          var filter = that._generateFilterByKey(key);
          var deferred = new Deferred();
          var isGroupKey = Array.isArray(key);
          var group = dataSource.group();
          if (isGroupKey) {
            return deferred.resolve(-1).promise();
          }
          if (!dataSource._grouping._updatePagingOptions) {
            that._calculateGlobalRowIndexByFlatData(key, null, true).done(deferred.resolve).fail(deferred.reject);
            return deferred;
          }
          dataSource.load({
            filter: that._concatWithCombinedFilter(filter),
            group
          }).done((data3) => {
            if (!data3 || 0 === data3.length || !isDefined(data3[0].key) || -1 === data3[0].key) {
              return deferred.resolve(-1).promise();
            }
            var groupPath = that._getGroupPath(data3[0], group.length);
            that._expandGroupByPath(that, groupPath, 0).done(() => {
              that._calculateExpandedRowGlobalIndex(deferred, key, groupPath, group);
            }).fail(deferred.reject);
          }).fail(deferred.reject);
          return deferred.promise();
        }
        _calculateExpandedRowGlobalIndex(deferred, key, groupPath, group) {
          var groupFilter = createGroupFilter(groupPath, {
            group
          });
          var dataSource = this._dataSource;
          var scrollingMode = this.option("scrolling.mode");
          var isVirtualScrolling = "virtual" === scrollingMode || "infinite" === scrollingMode;
          var pageSize = dataSource.pageSize();
          var groupOffset;
          dataSource._grouping._updatePagingOptions({
            skip: 0,
            take: MAX_SAFE_INTEGER2
          }, (groupInfo, totalOffset) => {
            if (equalByValue(groupInfo.path, groupPath)) {
              groupOffset = totalOffset;
            }
          });
          this._calculateGlobalRowIndexByFlatData(key, groupFilter).done((dataOffset) => {
            var count;
            var groupContinuationCount;
            if (dataOffset < 0) {
              deferred.resolve(-1);
              return;
            }
            var currentPageOffset = groupOffset % pageSize || pageSize;
            count = currentPageOffset + dataOffset - groupPath.length;
            if (isVirtualScrolling) {
              groupContinuationCount = 0;
            } else {
              groupContinuationCount = Math.floor(count / (pageSize - groupPath.length)) * groupPath.length;
            }
            count = groupOffset + dataOffset + groupContinuationCount;
            deferred.resolve(count);
          }).fail(deferred.reject);
        }
      }
    }
  }
}));

// node_modules/devextreme/esm/__internal/m_draggable.js
var window27 = getWindow();
var KEYDOWN_EVENT2 = "keydown";
var DRAGGABLE = "dxDraggable";
var DRAGSTART_EVENT_NAME2 = addNamespace2(DRAG_START_EVENT, DRAGGABLE);
var DRAG_EVENT_NAME = addNamespace2(DRAG_EVENT, DRAGGABLE);
var DRAGEND_EVENT_NAME = addNamespace2(DRAG_END_EVENT, DRAGGABLE);
var DRAG_ENTER_EVENT_NAME = addNamespace2(DRAG_ENTER_EVENT, DRAGGABLE);
var DRAGEND_LEAVE_EVENT_NAME = addNamespace2(DRAG_LEAVE_EVENT, DRAGGABLE);
var POINTERDOWN_EVENT_NAME = addNamespace2(pointer_default.down, DRAGGABLE);
var KEYDOWN_EVENT_NAME = addNamespace2(KEYDOWN_EVENT2, DRAGGABLE);
var CLONE_CLASS = "clone";
var targetDraggable;
var sourceDraggable;
var ANONYMOUS_TEMPLATE_NAME4 = "content";
var getMousePosition = (event) => ({
  x: event.pageX - renderer_default(window27).scrollLeft(),
  y: event.pageY - renderer_default(window27).scrollTop()
});
var GESTURE_COVER_CLASS2 = "dx-gesture-cover";
var OVERLAY_WRAPPER_CLASS2 = "dx-overlay-wrapper";
var OVERLAY_CONTENT_CLASS3 = "dx-overlay-content";
var ScrollHelper = class {
  constructor(orientation, component) {
    this._$scrollableAtPointer = null;
    this._preventScroll = true;
    this._component = component;
    if ("vertical" === orientation) {
      this._scrollValue = "scrollTop";
      this._overFlowAttr = "overflowY";
      this._sizeAttr = "height";
      this._scrollSizeProp = "scrollHeight";
      this._clientSizeProp = "clientHeight";
      this._limitProps = {
        start: "top",
        end: "bottom"
      };
    } else {
      this._scrollValue = "scrollLeft";
      this._overFlowAttr = "overflowX";
      this._sizeAttr = "width";
      this._scrollSizeProp = "scrollWidth";
      this._clientSizeProp = "clientWidth";
      this._limitProps = {
        start: "left",
        end: "right"
      };
    }
  }
  updateScrollable(elements, mousePosition) {
    var isScrollableFound = false;
    elements.some((element) => {
      var $element = renderer_default(element);
      var isTargetOverOverlayWrapper = $element.hasClass(OVERLAY_WRAPPER_CLASS2);
      var isTargetOverOverlayContent = $element.hasClass(OVERLAY_CONTENT_CLASS3);
      if (isTargetOverOverlayWrapper || isTargetOverOverlayContent) {
        return true;
      }
      isScrollableFound = this._trySetScrollable(element, mousePosition);
      return isScrollableFound;
    });
    if (!isScrollableFound) {
      this._$scrollableAtPointer = null;
      this._scrollSpeed = 0;
    }
  }
  isScrolling() {
    return !!this._scrollSpeed;
  }
  isScrollable($element) {
    return ("auto" === $element.css(this._overFlowAttr) || $element.hasClass("dx-scrollable-container")) && $element.prop(this._scrollSizeProp) > Math.ceil("width" === this._sizeAttr ? getWidth($element) : getHeight($element));
  }
  _trySetScrollable(element, mousePosition) {
    var $element = renderer_default(element);
    var distanceToBorders;
    var sensitivity = this._component.option("scrollSensitivity");
    var isScrollable = this.isScrollable($element);
    if (isScrollable) {
      distanceToBorders = this._calculateDistanceToBorders($element, mousePosition);
      if (sensitivity > distanceToBorders[this._limitProps.start]) {
        if (!this._preventScroll) {
          this._scrollSpeed = -this._calculateScrollSpeed(distanceToBorders[this._limitProps.start]);
          this._$scrollableAtPointer = $element;
        }
      } else if (sensitivity > distanceToBorders[this._limitProps.end]) {
        if (!this._preventScroll) {
          this._scrollSpeed = this._calculateScrollSpeed(distanceToBorders[this._limitProps.end]);
          this._$scrollableAtPointer = $element;
        }
      } else {
        isScrollable = false;
        this._preventScroll = false;
      }
    }
    return isScrollable;
  }
  _calculateDistanceToBorders($area, mousePosition) {
    var area = $area.get(0);
    var areaBoundingRect;
    if (area) {
      areaBoundingRect = getBoundingRect(area);
      return {
        left: mousePosition.x - areaBoundingRect.left,
        top: mousePosition.y - areaBoundingRect.top,
        right: areaBoundingRect.right - mousePosition.x,
        bottom: areaBoundingRect.bottom - mousePosition.y
      };
    }
    return {};
  }
  _calculateScrollSpeed(distance) {
    var component = this._component;
    var sensitivity = component.option("scrollSensitivity");
    var maxSpeed = component.option("scrollSpeed");
    return Math.ceil(((sensitivity - distance) / sensitivity) ** 2 * maxSpeed);
  }
  scrollByStep() {
    if (this._$scrollableAtPointer && this._scrollSpeed) {
      if (this._$scrollableAtPointer.hasClass("dx-scrollable-container")) {
        var $scrollable = this._$scrollableAtPointer.closest(".dx-scrollable");
        var scrollableInstance = $scrollable.data("dxScrollable") || $scrollable.data("dxScrollView");
        if (scrollableInstance) {
          var nextScrollPosition = scrollableInstance.scrollOffset()[this._limitProps.start] + this._scrollSpeed;
          scrollableInstance.scrollTo({
            [this._limitProps.start]: nextScrollPosition
          });
        }
      } else {
        var _nextScrollPosition = this._$scrollableAtPointer[this._scrollValue]() + this._scrollSpeed;
        this._$scrollableAtPointer[this._scrollValue](_nextScrollPosition);
      }
      var dragMoveArgs = this._component._dragMoveArgs;
      if (dragMoveArgs) {
        this._component._dragMoveHandler(dragMoveArgs);
      }
    }
  }
  reset() {
    this._$scrollableAtPointer = null;
    this._scrollSpeed = 0;
    this._preventScroll = true;
  }
  isOutsideScrollable($scrollable, event) {
    if (!$scrollable) {
      return false;
    }
    var scrollableSize = getBoundingRect($scrollable.get(0));
    var start = scrollableSize[this._limitProps.start];
    var size = scrollableSize[this._sizeAttr];
    var mousePosition = getMousePosition(event);
    var location = "width" === this._sizeAttr ? mousePosition.x : mousePosition.y;
    return location < start || location > start + size;
  }
};
var ScrollAnimator = animator_default.inherit({
  ctor(strategy4) {
    this.callBase();
    this._strategy = strategy4;
  },
  _step() {
    var horizontalScrollHelper = this._strategy._horizontalScrollHelper;
    var verticalScrollHelper = this._strategy._verticalScrollHelper;
    horizontalScrollHelper && horizontalScrollHelper.scrollByStep();
    verticalScrollHelper && verticalScrollHelper.scrollByStep();
  }
});
var Draggable = dom_component_default.inherit({
  reset: noop2,
  dragMove: noop2,
  dragEnter: noop2,
  dragLeave: noop2,
  dragEnd(sourceEvent) {
    var sourceDraggable2 = this._getSourceDraggable();
    sourceDraggable2._fireRemoveEvent(sourceEvent);
    return Deferred().resolve();
  },
  _fireRemoveEvent: noop2,
  _getDefaultOptions() {
    return extend(this.callBase(), {
      onDragStart: null,
      onDragMove: null,
      onDragEnd: null,
      onDragEnter: null,
      onDragLeave: null,
      onDragCancel: null,
      onCancelByEsc: false,
      onDrop: null,
      immediate: true,
      dragDirection: "both",
      boundary: void 0,
      boundOffset: 0,
      allowMoveByClick: false,
      itemData: null,
      container: void 0,
      dragTemplate: void 0,
      contentTemplate: "content",
      handle: "",
      filter: "",
      clone: false,
      autoScroll: true,
      scrollSpeed: 30,
      scrollSensitivity: 60,
      group: void 0,
      data: void 0
    });
  },
  _setOptionsByReference() {
    this.callBase.apply(this, arguments);
    extend(this._optionsByReference, {
      component: true,
      group: true,
      itemData: true,
      data: true
    });
  },
  _init() {
    this.callBase();
    this._attachEventHandlers();
    this._scrollAnimator = new ScrollAnimator(this);
    this._horizontalScrollHelper = new ScrollHelper("horizontal", this);
    this._verticalScrollHelper = new ScrollHelper("vertical", this);
    this._initScrollTop = 0;
    this._initScrollLeft = 0;
  },
  _normalizeCursorOffset(offset2) {
    if (isObject(offset2)) {
      offset2 = {
        h: offset2.x,
        v: offset2.y
      };
    }
    offset2 = splitPair(offset2).map((value2) => parseFloat(value2));
    return {
      left: offset2[0],
      top: 1 === offset2.length ? offset2[0] : offset2[1]
    };
  },
  _getNormalizedCursorOffset(offset2, options2) {
    if (isFunction(offset2)) {
      offset2 = offset2.call(this, options2);
    }
    return this._normalizeCursorOffset(offset2);
  },
  _calculateElementOffset(options2) {
    var elementOffset;
    var dragElementOffset;
    var {
      event
    } = options2;
    var $element = renderer_default(options2.itemElement);
    var $dragElement = renderer_default(options2.dragElement);
    var isCloned = this._dragElementIsCloned();
    var cursorOffset = this.option("cursorOffset");
    var normalizedCursorOffset = {
      left: 0,
      top: 0
    };
    var currentLocate = this._initialLocate = locate($dragElement);
    if (isCloned || options2.initialOffset || cursorOffset) {
      elementOffset = options2.initialOffset || $element.offset();
      if (cursorOffset) {
        normalizedCursorOffset = this._getNormalizedCursorOffset(cursorOffset, options2);
        if (isFinite(normalizedCursorOffset.left)) {
          elementOffset.left = event.pageX;
        }
        if (isFinite(normalizedCursorOffset.top)) {
          elementOffset.top = event.pageY;
        }
      }
      dragElementOffset = $dragElement.offset();
      elementOffset.top -= dragElementOffset.top + (normalizedCursorOffset.top || 0) - currentLocate.top;
      elementOffset.left -= dragElementOffset.left + (normalizedCursorOffset.left || 0) - currentLocate.left;
    }
    return elementOffset;
  },
  _initPosition(options2) {
    var $dragElement = renderer_default(options2.dragElement);
    var elementOffset = this._calculateElementOffset(options2);
    if (elementOffset) {
      this._move(elementOffset, $dragElement);
    }
    this._startPosition = locate($dragElement);
  },
  _startAnimator() {
    if (!this._scrollAnimator.inProgress()) {
      this._scrollAnimator.start();
    }
  },
  _stopAnimator() {
    this._scrollAnimator.stop();
  },
  _addWidgetPrefix(className) {
    var componentName = this.NAME;
    return dasherize(componentName) + (className ? "-".concat(className) : "");
  },
  _getItemsSelector() {
    return this.option("filter") || "";
  },
  _$content() {
    var $element = this.$element();
    var $wrapper = $element.children(".dx-template-wrapper");
    return $wrapper.length ? $wrapper : $element;
  },
  _attachEventHandlers() {
    if (this.option("disabled")) {
      return;
    }
    var $element = this._$content();
    var itemsSelector = this._getItemsSelector();
    var allowMoveByClick = this.option("allowMoveByClick");
    var data3 = {
      direction: this.option("dragDirection"),
      immediate: this.option("immediate"),
      checkDropTarget: ($target, event) => {
        var targetGroup = this.option("group");
        var sourceGroup = this._getSourceDraggable().option("group");
        var $scrollable = this._getScrollable($target);
        if (this._verticalScrollHelper.isOutsideScrollable($scrollable, event) || this._horizontalScrollHelper.isOutsideScrollable($scrollable, event)) {
          return false;
        }
        return sourceGroup && sourceGroup === targetGroup;
      }
    };
    if (allowMoveByClick) {
      $element = this._getArea();
      events_engine_default.on($element, POINTERDOWN_EVENT_NAME, data3, this._pointerDownHandler.bind(this));
    }
    if (">" === itemsSelector[0]) {
      itemsSelector = itemsSelector.slice(1);
    }
    events_engine_default.on($element, DRAGSTART_EVENT_NAME2, itemsSelector, data3, this._dragStartHandler.bind(this));
    events_engine_default.on($element, DRAG_EVENT_NAME, data3, this._dragMoveHandler.bind(this));
    events_engine_default.on($element, DRAGEND_EVENT_NAME, data3, this._dragEndHandler.bind(this));
    events_engine_default.on($element, DRAG_ENTER_EVENT_NAME, data3, this._dragEnterHandler.bind(this));
    events_engine_default.on($element, DRAGEND_LEAVE_EVENT_NAME, data3, this._dragLeaveHandler.bind(this));
    if (this.option("onCancelByEsc")) {
      events_engine_default.on($element, KEYDOWN_EVENT_NAME, this._keydownHandler.bind(this));
    }
  },
  _dragElementIsCloned() {
    return this._$dragElement && this._$dragElement.hasClass(this._addWidgetPrefix(CLONE_CLASS));
  },
  _getDragTemplateArgs($element, $container) {
    return {
      container: getPublicElement($container),
      model: {
        itemData: this.option("itemData"),
        itemElement: getPublicElement($element)
      }
    };
  },
  _createDragElement($element) {
    var result2 = $element;
    var clone = this.option("clone");
    var $container = this._getContainer();
    var template = this.option("dragTemplate");
    if (template) {
      template = this._getTemplate(template);
      result2 = renderer_default("<div>").appendTo($container);
      template.render(this._getDragTemplateArgs($element, result2));
    } else if (clone) {
      result2 = renderer_default("<div>").appendTo($container);
      $element.clone().css({
        width: $element.css("width"),
        height: $element.css("height")
      }).appendTo(result2);
    }
    return result2.toggleClass(this._addWidgetPrefix(CLONE_CLASS), result2.get(0) !== $element.get(0)).toggleClass("dx-rtl", this.option("rtlEnabled"));
  },
  _resetDragElement() {
    if (this._dragElementIsCloned()) {
      this._$dragElement.remove();
    } else {
      this._toggleDraggingClass(false);
    }
    this._$dragElement = null;
  },
  _resetSourceElement() {
    this._toggleDragSourceClass(false);
    this._$sourceElement = null;
  },
  _detachEventHandlers() {
    events_engine_default.off(this._$content(), ".".concat(DRAGGABLE));
    events_engine_default.off(this._getArea(), ".".concat(DRAGGABLE));
  },
  _move(position3, $element) {
    move($element || this._$dragElement, position3);
  },
  _getDraggableElement(e) {
    var $sourceElement = this._getSourceElement();
    if ($sourceElement) {
      return $sourceElement;
    }
    var allowMoveByClick = this.option("allowMoveByClick");
    if (allowMoveByClick) {
      return this.$element();
    }
    var $target = renderer_default(e && e.target);
    var itemsSelector = this._getItemsSelector();
    if (">" === itemsSelector[0]) {
      var $items = this._$content().find(itemsSelector);
      if (!$items.is($target)) {
        $target = $target.closest($items);
      }
    }
    return $target;
  },
  _getSourceElement() {
    var draggable = this._getSourceDraggable();
    return draggable._$sourceElement;
  },
  _pointerDownHandler(e) {
    if (needSkipEvent(e)) {
      return;
    }
    var position3 = {};
    var $element = this.$element();
    var dragDirection = this.option("dragDirection");
    if ("horizontal" === dragDirection || "both" === dragDirection) {
      position3.left = e.pageX - $element.offset().left + locate($element).left - getWidth($element) / 2;
    }
    if ("vertical" === dragDirection || "both" === dragDirection) {
      position3.top = e.pageY - $element.offset().top + locate($element).top - getHeight($element) / 2;
    }
    this._move(position3, $element);
    this._getAction("onDragMove")(this._getEventArgs(e));
  },
  _isValidElement(event, $element) {
    var handle = this.option("handle");
    var $target = renderer_default(event.originalEvent && event.originalEvent.target);
    if (handle && !$target.closest(handle).length) {
      return false;
    }
    if (!$element.length) {
      return false;
    }
    return !$element.is(".dx-state-disabled, .dx-state-disabled *");
  },
  _dragStartHandler(e) {
    var $element = this._getDraggableElement(e);
    this.dragInProgress = true;
    if (!this._isValidElement(e, $element)) {
      e.cancel = true;
      return;
    }
    if (this._$sourceElement) {
      return;
    }
    var dragStartArgs = this._getDragStartArgs(e, $element);
    this._getAction("onDragStart")(dragStartArgs);
    if (dragStartArgs.cancel) {
      e.cancel = true;
      return;
    }
    this.option("itemData", dragStartArgs.itemData);
    this._setSourceDraggable();
    this._$sourceElement = $element;
    var initialOffset = $element.offset();
    if (!this._hasClonedDraggable() && this.option("autoScroll")) {
      this._initScrollTop = this._getScrollableScrollTop();
      this._initScrollLeft = this._getScrollableScrollLeft();
      initialOffset = this._getDraggableElementOffset(initialOffset.left, initialOffset.top);
    }
    var $dragElement = this._$dragElement = this._createDragElement($element);
    this._toggleDraggingClass(true);
    this._toggleDragSourceClass(true);
    this._setGestureCoverCursor($dragElement.children());
    var isFixedPosition = "fixed" === $dragElement.css("position");
    this._initPosition(extend({}, dragStartArgs, {
      dragElement: $dragElement.get(0),
      initialOffset: isFixedPosition && initialOffset
    }));
    this._getAction("onDraggableElementShown")(_extends(_extends({}, dragStartArgs), {
      dragElement: $dragElement
    }));
    var $area = this._getArea();
    var areaOffset = this._getAreaOffset($area);
    var boundOffset = this._getBoundOffset();
    var areaWidth = getOuterWidth($area);
    var areaHeight = getOuterHeight($area);
    var elementWidth = getWidth($dragElement);
    var elementHeight = getHeight($dragElement);
    var startOffset_left = $dragElement.offset().left - areaOffset.left, startOffset_top = $dragElement.offset().top - areaOffset.top;
    if ($area.length) {
      e.maxLeftOffset = startOffset_left - boundOffset.left;
      e.maxRightOffset = areaWidth - startOffset_left - elementWidth - boundOffset.right;
      e.maxTopOffset = startOffset_top - boundOffset.top;
      e.maxBottomOffset = areaHeight - startOffset_top - elementHeight - boundOffset.bottom;
    }
    if (this.option("autoScroll")) {
      this._startAnimator();
    }
  },
  _getAreaOffset($area) {
    var offset2 = $area && position_default.offset($area);
    return offset2 || {
      left: 0,
      top: 0
    };
  },
  _toggleDraggingClass(value2) {
    this._$dragElement && this._$dragElement.toggleClass(this._addWidgetPrefix("dragging"), value2);
  },
  _toggleDragSourceClass(value2, $element) {
    var $sourceElement = $element || this._$sourceElement;
    $sourceElement && $sourceElement.toggleClass(this._addWidgetPrefix("source"), value2);
  },
  _setGestureCoverCursor($element) {
    renderer_default(".".concat(GESTURE_COVER_CLASS2)).css("cursor", $element.css("cursor"));
  },
  _getBoundOffset() {
    var boundOffset = this.option("boundOffset");
    if (isFunction(boundOffset)) {
      boundOffset = boundOffset.call(this);
    }
    return quadToObject(boundOffset);
  },
  _getArea() {
    var area = this.option("boundary");
    if (isFunction(area)) {
      area = area.call(this);
    }
    return renderer_default(area);
  },
  _getContainer() {
    var container = this.option("container");
    if (void 0 === container) {
      container = value();
    }
    return renderer_default(container);
  },
  _getDraggableElementOffset(initialOffsetX, initialOffsetY) {
    var _a2, _b2, _c, _d;
    var initScrollTop = this._initScrollTop;
    var initScrollLeft = this._initScrollLeft;
    var scrollTop = this._getScrollableScrollTop();
    var scrollLeft = this._getScrollableScrollLeft();
    var elementPosition = renderer_default(this.element()).css("position");
    var isFixedPosition = "fixed" === elementPosition;
    var result2 = {
      left: (null !== (_b2 = null === (_a2 = this._startPosition) || void 0 === _a2 ? void 0 : _a2.left) && void 0 !== _b2 ? _b2 : 0) + initialOffsetX,
      top: (null !== (_d = null === (_c = this._startPosition) || void 0 === _c ? void 0 : _c.top) && void 0 !== _d ? _d : 0) + initialOffsetY
    };
    if (isFixedPosition || this._hasClonedDraggable()) {
      return result2;
    }
    return {
      left: isNumeric(scrollLeft) ? result2.left + scrollLeft - initScrollLeft : result2.left,
      top: isNumeric(scrollTop) ? result2.top + scrollTop - initScrollTop : result2.top
    };
  },
  _hasClonedDraggable() {
    return this.option("clone") || this.option("dragTemplate");
  },
  _dragMoveHandler(e) {
    this._dragMoveArgs = e;
    if (!this._$dragElement) {
      e.cancel = true;
      return;
    }
    var offset2 = this._getDraggableElementOffset(e.offset.x, e.offset.y);
    this._move(offset2);
    this._updateScrollable(e);
    var eventArgs = this._getEventArgs(e);
    this._getAction("onDragMove")(eventArgs);
    if (true === eventArgs.cancel) {
      return;
    }
    var targetDraggable2 = this._getTargetDraggable();
    targetDraggable2.dragMove(e, scrollBy);
  },
  _updateScrollable(e) {
    if (this.option("autoScroll")) {
      var mousePosition = getMousePosition(e);
      var allObjects = dom_adapter_default.elementsFromPoint(mousePosition.x, mousePosition.y, this.$element().get(0));
      this._verticalScrollHelper.updateScrollable(allObjects, mousePosition);
      this._horizontalScrollHelper.updateScrollable(allObjects, mousePosition);
    }
  },
  _getScrollable($element) {
    var $scrollable;
    $element.parents().toArray().some((parent) => {
      var $parent = renderer_default(parent);
      if (this._horizontalScrollHelper.isScrollable($parent) || this._verticalScrollHelper.isScrollable($parent)) {
        $scrollable = $parent;
        return true;
      }
      return false;
    });
    return $scrollable;
  },
  _getScrollableScrollTop() {
    var _a2, _b2;
    return null !== (_b2 = null === (_a2 = this._getScrollable(renderer_default(this.element()))) || void 0 === _a2 ? void 0 : _a2.scrollTop()) && void 0 !== _b2 ? _b2 : 0;
  },
  _getScrollableScrollLeft() {
    var _a2, _b2;
    return null !== (_b2 = null === (_a2 = this._getScrollable(renderer_default(this.element()))) || void 0 === _a2 ? void 0 : _a2.scrollLeft()) && void 0 !== _b2 ? _b2 : 0;
  },
  _defaultActionArgs() {
    var args = this.callBase.apply(this, arguments);
    var component = this.option("component");
    if (component) {
      args.component = component;
      args.element = component.element();
    }
    return args;
  },
  _getEventArgs(e) {
    var sourceDraggable2 = this._getSourceDraggable();
    var targetDraggable2 = this._getTargetDraggable();
    return {
      event: e,
      itemData: sourceDraggable2.option("itemData"),
      itemElement: getPublicElement(sourceDraggable2._$sourceElement),
      fromComponent: sourceDraggable2.option("component") || sourceDraggable2,
      toComponent: targetDraggable2.option("component") || targetDraggable2,
      fromData: sourceDraggable2.option("data"),
      toData: targetDraggable2.option("data")
    };
  },
  _getDragStartArgs(e, $itemElement) {
    var args = this._getEventArgs(e);
    return {
      event: args.event,
      itemData: args.itemData,
      itemElement: $itemElement,
      fromData: args.fromData
    };
  },
  _revertItemToInitialPosition() {
    !this._dragElementIsCloned() && this._move(this._initialLocate, this._$sourceElement);
  },
  _dragEndHandler(e) {
    var d = Deferred();
    var dragEndEventArgs = this._getEventArgs(e);
    var dropEventArgs = this._getEventArgs(e);
    var targetDraggable2 = this._getTargetDraggable();
    var needRevertPosition = true;
    this.dragInProgress = false;
    try {
      this._getAction("onDragEnd")(dragEndEventArgs);
    } finally {
      when(fromPromise(dragEndEventArgs.cancel)).done((cancel2) => {
        if (!cancel2) {
          if (targetDraggable2 !== this) {
            targetDraggable2._getAction("onDrop")(dropEventArgs);
          }
          if (!dropEventArgs.cancel) {
            needRevertPosition = false;
            when(fromPromise(targetDraggable2.dragEnd(dragEndEventArgs))).always(d.resolve);
            return;
          }
        }
        d.resolve();
      }).fail(d.resolve);
      d.done(() => {
        if (needRevertPosition) {
          this._revertItemToInitialPosition();
        }
        this._resetDragOptions(targetDraggable2);
      });
    }
  },
  _isTargetOverAnotherDraggable(e) {
    var sourceDraggable2 = this._getSourceDraggable();
    if (this === sourceDraggable2) {
      return false;
    }
    var $dragElement = sourceDraggable2._$dragElement;
    var $sourceDraggableElement = sourceDraggable2.$element();
    var $targetDraggableElement = this.$element();
    var mousePosition = getMousePosition(e);
    var elements = dom_adapter_default.elementsFromPoint(mousePosition.x, mousePosition.y, this.element());
    var firstWidgetElement = elements.filter((element) => {
      var $element = renderer_default(element);
      if ($element.hasClass(this._addWidgetPrefix())) {
        return !$element.closest($dragElement).length;
      }
      return false;
    })[0];
    var $sourceElement = this._getSourceElement();
    var isTargetOverItself = firstWidgetElement === $sourceDraggableElement.get(0);
    var isTargetOverNestedDraggable = renderer_default(firstWidgetElement).closest($sourceElement).length;
    return !firstWidgetElement || firstWidgetElement === $targetDraggableElement.get(0) && !isTargetOverItself && !isTargetOverNestedDraggable;
  },
  _dragEnterHandler(e) {
    this._fireDragEnterEvent(e);
    if (this._isTargetOverAnotherDraggable(e)) {
      this._setTargetDraggable();
    }
    var sourceDraggable2 = this._getSourceDraggable();
    sourceDraggable2.dragEnter(e);
  },
  _dragLeaveHandler(e) {
    this._fireDragLeaveEvent(e);
    this._resetTargetDraggable();
    if (this !== this._getSourceDraggable()) {
      this.reset();
    }
    var sourceDraggable2 = this._getSourceDraggable();
    sourceDraggable2.dragLeave(e);
  },
  _keydownHandler(e) {
    if (this.dragInProgress && "Escape" === e.key) {
      this._keydownEscapeHandler(e);
    }
  },
  _keydownEscapeHandler(e) {
    var $sourceElement = this._getSourceElement();
    if (!$sourceElement) {
      return;
    }
    var dragCancelEventArgs = this._getEventArgs(e);
    this._getAction("onDragCancel")(dragCancelEventArgs);
    if (dragCancelEventArgs.cancel) {
      return;
    }
    this.dragInProgress = false;
    null === sourceDraggable || void 0 === sourceDraggable ? void 0 : sourceDraggable._toggleDraggingClass(false);
    this._detachEventHandlers();
    this._revertItemToInitialPosition();
    var targetDraggable2 = this._getTargetDraggable();
    this._resetDragOptions(targetDraggable2);
    this._attachEventHandlers();
  },
  _getAction(name2) {
    return this["_".concat(name2, "Action")] || this._createActionByOption(name2);
  },
  _getAnonymousTemplateName: () => ANONYMOUS_TEMPLATE_NAME4,
  _initTemplates() {
    if (!this.option("contentTemplate")) {
      return;
    }
    this._templateManager.addDefaultTemplates({
      content: new EmptyTemplate()
    });
    this.callBase.apply(this, arguments);
  },
  _render() {
    this.callBase();
    this.$element().addClass(this._addWidgetPrefix());
    var transclude = this._templateManager.anonymousTemplateName === this.option("contentTemplate");
    var template = this._getTemplateByOption("contentTemplate");
    if (template) {
      renderer_default(template.render({
        container: this.element(),
        transclude
      }));
    }
  },
  _optionChanged(args) {
    var {
      name: name2
    } = args;
    switch (name2) {
      case "onDragStart":
      case "onDragMove":
      case "onDragEnd":
      case "onDrop":
      case "onDragEnter":
      case "onDragLeave":
      case "onDragCancel":
      case "onDraggableElementShown":
        this["_".concat(name2, "Action")] = this._createActionByOption(name2);
        break;
      case "dragTemplate":
      case "contentTemplate":
      case "container":
      case "clone":
        break;
      case "allowMoveByClick":
      case "dragDirection":
      case "disabled":
      case "boundary":
      case "filter":
      case "immediate":
        this._resetDragElement();
        this._detachEventHandlers();
        this._attachEventHandlers();
        break;
      case "onCancelByEsc":
        this._keydownHandler();
        break;
      case "autoScroll":
        this._verticalScrollHelper.reset();
        this._horizontalScrollHelper.reset();
        break;
      case "scrollSensitivity":
      case "scrollSpeed":
      case "boundOffset":
      case "handle":
      case "group":
      case "data":
      case "itemData":
        break;
      default:
        this.callBase(args);
    }
  },
  _getTargetDraggable() {
    return targetDraggable || this;
  },
  _getSourceDraggable() {
    return sourceDraggable || this;
  },
  _setTargetDraggable() {
    var currentGroup = this.option("group");
    var sourceDraggable2 = this._getSourceDraggable();
    if (currentGroup && currentGroup === sourceDraggable2.option("group")) {
      targetDraggable = this;
    }
  },
  _setSourceDraggable() {
    sourceDraggable = this;
  },
  _resetSourceDraggable() {
    sourceDraggable = null;
  },
  _resetTargetDraggable() {
    targetDraggable = null;
  },
  _resetDragOptions(targetDraggable2) {
    this.reset();
    targetDraggable2.reset();
    this._stopAnimator();
    this._horizontalScrollHelper.reset();
    this._verticalScrollHelper.reset();
    this._resetDragElement();
    this._resetSourceElement();
    this._resetTargetDraggable();
    this._resetSourceDraggable();
  },
  _dispose() {
    this.callBase();
    this._detachEventHandlers();
    this._resetDragElement();
    this._resetTargetDraggable();
    this._resetSourceDraggable();
    this._$sourceElement = null;
    this._stopAnimator();
  },
  _fireDragEnterEvent(sourceEvent) {
    var args = this._getEventArgs(sourceEvent);
    this._getAction("onDragEnter")(args);
  },
  _fireDragLeaveEvent(sourceEvent) {
    var args = this._getEventArgs(sourceEvent);
    this._getAction("onDragLeave")(args);
  }
});
component_registrator_default(DRAGGABLE, Draggable);
var m_draggable_default = Draggable;

// node_modules/devextreme/esm/__internal/m_sortable.js
var window28 = getWindow();
var SORTABLE = "dxSortable";
var PLACEHOLDER_CLASS = "placeholder";
var CLONE_CLASS2 = "clone";
var isElementVisible = (itemElement) => renderer_default(itemElement).is(":visible");
var animate2 = (element, config3) => {
  var _a2, _b2;
  if (!element) {
    return;
  }
  var left = (null === (_a2 = config3.to) || void 0 === _a2 ? void 0 : _a2.left) || 0;
  var top = (null === (_b2 = config3.to) || void 0 === _b2 ? void 0 : _b2.top) || 0;
  element.style.transform = "translate(".concat(left, "px,").concat(top, "px)");
  element.style.transition = fx_default.off ? "" : "transform ".concat(config3.duration, "ms ").concat(config3.easing);
};
var stopAnimation = (element) => {
  if (!element) {
    return;
  }
  element.style.transform = "";
  element.style.transition = "";
};
function getScrollableBoundary($scrollable) {
  var offset2 = $scrollable.offset();
  var {
    style
  } = $scrollable[0];
  var paddingLeft = parseFloat(style.paddingLeft) || 0;
  var paddingRight = parseFloat(style.paddingRight) || 0;
  var paddingTop = parseFloat(style.paddingTop) || 0;
  var width = $scrollable[0].clientWidth - (paddingLeft + paddingRight);
  var height = getHeight($scrollable);
  var left = offset2.left + paddingLeft;
  var top = offset2.top + paddingTop;
  return {
    left,
    right: left + width,
    top,
    bottom: top + height
  };
}
var Sortable = m_draggable_default.inherit({
  _init() {
    this.callBase();
    this._sourceScrollHandler = this._handleSourceScroll.bind(this);
    this._sourceScrollableInfo = null;
  },
  _getDefaultOptions() {
    return extend(this.callBase(), {
      clone: true,
      filter: "> *",
      itemOrientation: "vertical",
      dropFeedbackMode: "push",
      allowDropInsideItem: false,
      allowReordering: true,
      moveItemOnDrop: false,
      onDragChange: null,
      onAdd: null,
      onRemove: null,
      onReorder: null,
      onPlaceholderPrepared: null,
      animation: {
        type: "slide",
        duration: 300,
        easing: "ease"
      },
      fromIndex: null,
      toIndex: null,
      dropInsideItem: false,
      itemPoints: null,
      fromIndexOffset: 0,
      offset: 0,
      autoUpdate: false,
      draggableElementSize: 0
    });
  },
  reset() {
    this.option({
      dropInsideItem: false,
      toIndex: null,
      fromIndex: null,
      itemPoints: null,
      fromIndexOffset: 0,
      draggableElementSize: 0
    });
    if (this._$placeholderElement) {
      this._$placeholderElement.remove();
    }
    this._$placeholderElement = null;
    if (!this._isIndicateMode() && this._$modifiedItem) {
      this._$modifiedItem.css("marginBottom", this._modifiedItemMargin);
      this._$modifiedItem = null;
    }
  },
  _getPrevVisibleItem: (items, index2) => items.slice(0, index2).reverse().filter(isElementVisible)[0],
  _dragStartHandler(e) {
    this.callBase.apply(this, arguments);
    if (true === e.cancel) {
      return;
    }
    var $sourceElement = this._getSourceElement();
    this._updateItemPoints();
    this._subscribeToSourceScroll(e);
    this.option("fromIndex", this._getElementIndex($sourceElement));
    this.option("fromIndexOffset", this.option("offset"));
  },
  _subscribeToSourceScroll(e) {
    var $scrollable = this._getScrollable(renderer_default(e.target));
    if ($scrollable) {
      this._sourceScrollableInfo = {
        element: $scrollable,
        scrollLeft: $scrollable.scrollLeft(),
        scrollTop: $scrollable.scrollTop()
      };
      events_engine_default.off($scrollable, "scroll", this._sourceScrollHandler);
      events_engine_default.on($scrollable, "scroll", this._sourceScrollHandler);
    }
  },
  _unsubscribeFromSourceScroll() {
    if (this._sourceScrollableInfo) {
      events_engine_default.off(this._sourceScrollableInfo.element, "scroll", this._sourceScrollHandler);
      this._sourceScrollableInfo = null;
    }
  },
  _handleSourceScroll(e) {
    var sourceScrollableInfo = this._sourceScrollableInfo;
    if (sourceScrollableInfo) {
      ["scrollLeft", "scrollTop"].forEach((scrollProp) => {
        if (e.target[scrollProp] !== sourceScrollableInfo[scrollProp]) {
          var scrollBy2 = e.target[scrollProp] - sourceScrollableInfo[scrollProp];
          this._correctItemPoints(scrollBy2);
          this._movePlaceholder();
          sourceScrollableInfo[scrollProp] = e.target[scrollProp];
        }
      });
    }
  },
  _dragEnterHandler(e) {
    this.callBase.apply(this, arguments);
    if (this === this._getSourceDraggable()) {
      return;
    }
    this._subscribeToSourceScroll(e);
    this._updateItemPoints();
    this.option("fromIndex", -1);
    if (!this._isIndicateMode()) {
      var itemPoints = this.option("itemPoints");
      var lastItemPoint = itemPoints[itemPoints.length - 1];
      if (lastItemPoint) {
        var $element = this.$element();
        var $sourceElement = this._getSourceElement();
        var isVertical = this._isVerticalOrientation();
        var sourceElementSize = isVertical ? getOuterHeight($sourceElement, true) : getOuterWidth($sourceElement, true);
        var scrollSize = $element.get(0)[isVertical ? "scrollHeight" : "scrollWidth"];
        var scrollPosition = $element.get(0)[isVertical ? "scrollTop" : "scrollLeft"];
        var positionProp = isVertical ? "top" : "left";
        var lastPointPosition = lastItemPoint[positionProp];
        var elementPosition = $element.offset()[positionProp];
        var freeSize = elementPosition + scrollSize - scrollPosition - lastPointPosition;
        if (freeSize < sourceElementSize) {
          if (isVertical) {
            var items = this._getItems();
            var $lastItem = renderer_default(this._getPrevVisibleItem(items));
            this._$modifiedItem = $lastItem;
            this._modifiedItemMargin = $lastItem.get(0).style.marginBottom;
            $lastItem.css("marginBottom", sourceElementSize - freeSize);
            var $sortable = $lastItem.closest(".dx-sortable");
            var sortable = $sortable.data("dxScrollable") || $sortable.data("dxScrollView");
            sortable && sortable.update();
          }
        }
      }
    }
  },
  _dragLeaveHandler() {
    this.callBase.apply(this, arguments);
    if (this !== this._getSourceDraggable()) {
      this._unsubscribeFromSourceScroll();
    }
  },
  dragEnter() {
    if (this !== this._getTargetDraggable()) {
      this.option("toIndex", -1);
    }
  },
  dragLeave() {
    if (this !== this._getTargetDraggable()) {
      this.option("toIndex", this.option("fromIndex"));
    }
  },
  _allowDrop(event) {
    var targetDraggable2 = this._getTargetDraggable();
    var $targetDraggable = targetDraggable2.$element();
    var $scrollable = this._getScrollable($targetDraggable);
    if ($scrollable) {
      var {
        left,
        right,
        top,
        bottom
      } = getScrollableBoundary($scrollable);
      var toIndex = this.option("toIndex");
      var itemPoints = this.option("itemPoints");
      var itemPoint = null === itemPoints || void 0 === itemPoints ? void 0 : itemPoints.filter((item) => item.index === toIndex)[0];
      if (itemPoint && void 0 !== itemPoint.top) {
        var isVertical = this._isVerticalOrientation();
        if (isVertical) {
          return top <= Math.ceil(itemPoint.top) && Math.floor(itemPoint.top) <= bottom;
        }
        return left <= Math.ceil(itemPoint.left) && Math.floor(itemPoint.left) <= right;
      }
    }
    return true;
  },
  dragEnd(sourceEvent) {
    this._unsubscribeFromSourceScroll();
    var $sourceElement = this._getSourceElement();
    var sourceDraggable2 = this._getSourceDraggable();
    var isSourceDraggable = sourceDraggable2.NAME !== this.NAME;
    var toIndex = this.option("toIndex");
    var {
      event
    } = sourceEvent;
    var allowDrop = this._allowDrop(event);
    if (null !== toIndex && toIndex >= 0 && allowDrop) {
      var cancelAdd;
      var cancelRemove;
      if (sourceDraggable2 !== this) {
        cancelAdd = this._fireAddEvent(event);
        if (!cancelAdd) {
          cancelRemove = this._fireRemoveEvent(event);
        }
      }
      if (isSourceDraggable) {
        resetPosition($sourceElement);
      }
      if (this.option("moveItemOnDrop")) {
        !cancelAdd && this._moveItem($sourceElement, toIndex, cancelRemove);
      }
      if (sourceDraggable2 === this) {
        return this._fireReorderEvent(event);
      }
    }
    return Deferred().resolve();
  },
  dragMove(e) {
    var itemPoints = this.option("itemPoints");
    if (!itemPoints) {
      return;
    }
    var isVertical = this._isVerticalOrientation();
    var axisName = isVertical ? "top" : "left";
    var cursorPosition = isVertical ? e.pageY : e.pageX;
    var rtlEnabled = this.option("rtlEnabled");
    var itemPoint;
    for (var i = itemPoints.length - 1; i >= 0; i--) {
      var centerPosition = itemPoints[i + 1] && (itemPoints[i][axisName] + itemPoints[i + 1][axisName]) / 2;
      if ((!isVertical && rtlEnabled ? cursorPosition > centerPosition : centerPosition > cursorPosition) || void 0 === centerPosition) {
        itemPoint = itemPoints[i];
      } else {
        break;
      }
    }
    if (itemPoint) {
      this._updatePlaceholderPosition(e, itemPoint);
      if (this._verticalScrollHelper.isScrolling() && this._isIndicateMode()) {
        this._movePlaceholder();
      }
    }
  },
  _isIndicateMode() {
    return "indicate" === this.option("dropFeedbackMode") || this.option("allowDropInsideItem");
  },
  _createPlaceholder() {
    var $placeholderContainer;
    if (this._isIndicateMode()) {
      $placeholderContainer = renderer_default("<div>").addClass(this._addWidgetPrefix(PLACEHOLDER_CLASS)).insertBefore(this._getSourceDraggable()._$dragElement);
    }
    this._$placeholderElement = $placeholderContainer;
    return $placeholderContainer;
  },
  _getItems() {
    var itemsSelector = this._getItemsSelector();
    return this._$content().find(itemsSelector).not(".".concat(this._addWidgetPrefix(PLACEHOLDER_CLASS))).not(".".concat(this._addWidgetPrefix(CLONE_CLASS2))).toArray();
  },
  _allowReordering() {
    var sourceDraggable2 = this._getSourceDraggable();
    var targetDraggable2 = this._getTargetDraggable();
    return sourceDraggable2 !== targetDraggable2 || this.option("allowReordering");
  },
  _isValidPoint(visibleIndex, draggableVisibleIndex, dropInsideItem) {
    var allowDropInsideItem = this.option("allowDropInsideItem");
    var allowReordering2 = dropInsideItem || this._allowReordering();
    if (!allowReordering2 && (0 !== visibleIndex || !allowDropInsideItem)) {
      return false;
    }
    if (!this._isIndicateMode()) {
      return true;
    }
    return -1 === draggableVisibleIndex || visibleIndex !== draggableVisibleIndex && (dropInsideItem || visibleIndex !== draggableVisibleIndex + 1);
  },
  _getItemPoints() {
    var result2 = [];
    var $item;
    var offset2;
    var itemWidth;
    var rtlEnabled = this.option("rtlEnabled");
    var isVertical = this._isVerticalOrientation();
    var itemElements = this._getItems();
    var visibleItemElements = itemElements.filter(isElementVisible);
    var visibleItemCount = visibleItemElements.length;
    var $draggableItem = this._getDraggableElement();
    var draggableVisibleIndex = visibleItemElements.indexOf($draggableItem.get(0));
    if (visibleItemCount) {
      for (var i = 0; i <= visibleItemCount; i++) {
        var needCorrectLeftPosition = !isVertical && rtlEnabled ^ i === visibleItemCount;
        var needCorrectTopPosition = isVertical && i === visibleItemCount;
        if (i < visibleItemCount) {
          $item = renderer_default(visibleItemElements[i]);
          offset2 = $item.offset();
          itemWidth = getOuterWidth($item);
        }
        result2.push({
          dropInsideItem: false,
          left: offset2.left + (needCorrectLeftPosition ? itemWidth : 0),
          top: offset2.top + (needCorrectTopPosition ? result2[i - 1].height : 0),
          index: i === visibleItemCount ? itemElements.length : itemElements.indexOf($item.get(0)),
          $item,
          width: getOuterWidth($item),
          height: getOuterHeight($item),
          isValid: this._isValidPoint(i, draggableVisibleIndex)
        });
      }
      if (this.option("allowDropInsideItem")) {
        var points = result2;
        result2 = [];
        for (var _i = 0; _i < points.length; _i++) {
          result2.push(points[_i]);
          if (points[_i + 1]) {
            result2.push(extend({}, points[_i], {
              dropInsideItem: true,
              top: Math.floor((points[_i].top + points[_i + 1].top) / 2),
              left: Math.floor((points[_i].left + points[_i + 1].left) / 2),
              isValid: this._isValidPoint(_i, draggableVisibleIndex, true)
            }));
          }
        }
      }
    } else {
      result2.push({
        dropInsideItem: false,
        index: 0,
        isValid: true
      });
    }
    return result2;
  },
  _updateItemPoints(forceUpdate2) {
    if (forceUpdate2 || this.option("autoUpdate") || !this.option("itemPoints")) {
      this.option("itemPoints", this._getItemPoints());
    }
  },
  _correctItemPoints(scrollBy2) {
    var itemPoints = this.option("itemPoints");
    if (scrollBy2 && itemPoints && !this.option("autoUpdate")) {
      var isVertical = this._isVerticalOrientation();
      var positionPropName = isVertical ? "top" : "left";
      itemPoints.forEach((itemPoint) => {
        itemPoint[positionPropName] -= scrollBy2;
      });
    }
  },
  _getElementIndex($itemElement) {
    return this._getItems().indexOf($itemElement.get(0));
  },
  _getDragTemplateArgs($element) {
    var args = this.callBase.apply(this, arguments);
    args.model.fromIndex = this._getElementIndex($element);
    return args;
  },
  _togglePlaceholder(value2) {
    this._$placeholderElement && this._$placeholderElement.toggle(value2);
  },
  _isVerticalOrientation() {
    return "vertical" === this.option("itemOrientation");
  },
  _normalizeToIndex(toIndex, skipOffsetting) {
    var isAnotherDraggable = this._getSourceDraggable() !== this._getTargetDraggable();
    var fromIndex = this._getActualFromIndex();
    if (null === toIndex) {
      return fromIndex;
    }
    return Math.max(isAnotherDraggable || fromIndex >= toIndex || skipOffsetting ? toIndex : toIndex - 1, 0);
  },
  _updatePlaceholderPosition(e, itemPoint) {
    var sourceDraggable2 = this._getSourceDraggable();
    var toIndex = this._normalizeToIndex(itemPoint.index, itemPoint.dropInsideItem);
    var eventArgs = extend(this._getEventArgs(e), {
      toIndex,
      dropInsideItem: itemPoint.dropInsideItem
    });
    itemPoint.isValid && this._getAction("onDragChange")(eventArgs);
    if (eventArgs.cancel || !itemPoint.isValid) {
      if (!itemPoint.isValid) {
        this.option({
          dropInsideItem: false,
          toIndex: null
        });
      }
      return;
    }
    this.option({
      dropInsideItem: itemPoint.dropInsideItem,
      toIndex: itemPoint.index
    });
    this._getAction("onPlaceholderPrepared")(extend(this._getEventArgs(e), {
      placeholderElement: getPublicElement(this._$placeholderElement),
      dragElement: getPublicElement(sourceDraggable2._$dragElement)
    }));
    this._updateItemPoints();
  },
  _makeWidthCorrection($item, width) {
    this._$scrollable = this._getScrollable($item);
    if (this._$scrollable) {
      var scrollableWidth = getWidth(this._$scrollable);
      var overflowLeft = this._$scrollable.offset().left - $item.offset().left;
      var overflowRight = getOuterWidth($item) - overflowLeft - scrollableWidth;
      if (overflowLeft > 0) {
        width -= overflowLeft;
      }
      if (overflowRight > 0) {
        width -= overflowRight;
      }
    }
    return width;
  },
  _updatePlaceholderSizes($placeholderElement, itemElement) {
    var dropInsideItem = this.option("dropInsideItem");
    var $item = renderer_default(itemElement);
    var isVertical = this._isVerticalOrientation();
    var width = "";
    var height = "";
    $placeholderElement.toggleClass(this._addWidgetPrefix("placeholder-inside"), dropInsideItem);
    if (isVertical || dropInsideItem) {
      width = getOuterWidth($item);
    }
    if (!isVertical || dropInsideItem) {
      height = getOuterHeight($item);
    }
    width = this._makeWidthCorrection($item, width);
    $placeholderElement.css({
      width,
      height
    });
  },
  _moveItem($itemElement, index2, cancelRemove) {
    var $prevTargetItemElement;
    var $itemElements = this._getItems();
    var $targetItemElement = $itemElements[index2];
    var sourceDraggable2 = this._getSourceDraggable();
    if (cancelRemove) {
      $itemElement = $itemElement.clone();
      sourceDraggable2._toggleDragSourceClass(false, $itemElement);
    }
    if (!$targetItemElement) {
      $prevTargetItemElement = $itemElements[index2 - 1];
    }
    this._moveItemCore($itemElement, $targetItemElement, $prevTargetItemElement);
  },
  _moveItemCore($targetItem, item, prevItem) {
    if (!item && !prevItem) {
      $targetItem.appendTo(this.$element());
    } else if (prevItem) {
      $targetItem.insertAfter(renderer_default(prevItem));
    } else {
      $targetItem.insertBefore(renderer_default(item));
    }
  },
  _getDragStartArgs(e, $itemElement) {
    return extend(this.callBase.apply(this, arguments), {
      fromIndex: this._getElementIndex($itemElement)
    });
  },
  _getEventArgs(e) {
    var sourceDraggable2 = this._getSourceDraggable();
    var targetDraggable2 = this._getTargetDraggable();
    var dropInsideItem = targetDraggable2.option("dropInsideItem");
    return extend(this.callBase.apply(this, arguments), {
      fromIndex: sourceDraggable2.option("fromIndex"),
      toIndex: this._normalizeToIndex(targetDraggable2.option("toIndex"), dropInsideItem),
      dropInsideItem
    });
  },
  _optionChanged(args) {
    var {
      name: name2
    } = args;
    switch (name2) {
      case "onDragChange":
      case "onPlaceholderPrepared":
      case "onAdd":
      case "onRemove":
      case "onReorder":
        this["_".concat(name2, "Action")] = this._createActionByOption(name2);
        break;
      case "itemOrientation":
      case "allowDropInsideItem":
      case "moveItemOnDrop":
      case "dropFeedbackMode":
      case "itemPoints":
      case "animation":
      case "allowReordering":
      case "fromIndexOffset":
      case "offset":
      case "draggableElementSize":
      case "autoUpdate":
        break;
      case "fromIndex":
        [false, true].forEach((isDragSource) => {
          var fromIndex = isDragSource ? args.value : args.previousValue;
          if (null !== fromIndex) {
            var $fromElement = renderer_default(this._getItems()[fromIndex]);
            this._toggleDragSourceClass(isDragSource, $fromElement);
          }
        });
        break;
      case "dropInsideItem":
        this._optionChangedDropInsideItem(args);
        break;
      case "toIndex":
        this._optionChangedToIndex(args);
        break;
      default:
        this.callBase(args);
    }
  },
  _optionChangedDropInsideItem() {
    if (this._isIndicateMode() && this._$placeholderElement) {
      this._movePlaceholder();
    }
  },
  _isPositionVisible(position3) {
    var $element = this.$element();
    var scrollContainer;
    if ("hidden" !== $element.css("overflow")) {
      scrollContainer = $element.get(0);
    } else {
      $element.parents().each(function() {
        if ("visible" !== renderer_default(this).css("overflow")) {
          scrollContainer = this;
          return false;
        }
        return;
      });
    }
    if (scrollContainer) {
      var clientRect = getBoundingRect(scrollContainer);
      var isVerticalOrientation = this._isVerticalOrientation();
      var start = isVerticalOrientation ? "top" : "left";
      var end = isVerticalOrientation ? "bottom" : "right";
      var pageOffset = isVerticalOrientation ? window28.pageYOffset : window28.pageXOffset;
      if (position3[start] < clientRect[start] + pageOffset || position3[start] > clientRect[end] + pageOffset) {
        return false;
      }
    }
    return true;
  },
  _optionChangedToIndex(args) {
    var toIndex = args.value;
    if (this._isIndicateMode()) {
      var showPlaceholder = null !== toIndex && toIndex >= 0;
      this._togglePlaceholder(showPlaceholder);
      if (showPlaceholder) {
        this._movePlaceholder();
      }
    } else {
      this._moveItems(args.previousValue, args.value, args.fullUpdate);
    }
  },
  update() {
    if (null === this.option("fromIndex") && null === this.option("toIndex")) {
      return;
    }
    this._updateItemPoints(true);
    this._updateDragSourceClass();
    var toIndex = this.option("toIndex");
    this._optionChangedToIndex({
      value: toIndex,
      fullUpdate: true
    });
  },
  _updateDragSourceClass() {
    var fromIndex = this._getActualFromIndex();
    var $fromElement = renderer_default(this._getItems()[fromIndex]);
    if ($fromElement.length) {
      this._$sourceElement = $fromElement;
      this._toggleDragSourceClass(true, $fromElement);
    }
  },
  _makeLeftCorrection(left) {
    var $scrollable = this._$scrollable;
    if ($scrollable && this._isVerticalOrientation()) {
      var overflowLeft = $scrollable.offset().left - left;
      if (overflowLeft > 0) {
        left += overflowLeft;
      }
    }
    return left;
  },
  _movePlaceholder() {
    var $placeholderElement = this._$placeholderElement || this._createPlaceholder();
    if (!$placeholderElement) {
      return;
    }
    var items = this._getItems();
    var toIndex = this.option("toIndex");
    var isVerticalOrientation = this._isVerticalOrientation();
    var rtlEnabled = this.option("rtlEnabled");
    var dropInsideItem = this.option("dropInsideItem");
    var position3 = null;
    var itemElement = items[toIndex];
    if (itemElement) {
      var $itemElement = renderer_default(itemElement);
      position3 = $itemElement.offset();
      if (!isVerticalOrientation && rtlEnabled && !dropInsideItem) {
        position3.left += getOuterWidth($itemElement, true);
      }
    } else {
      var prevVisibleItemElement = itemElement = this._getPrevVisibleItem(items, toIndex);
      if (prevVisibleItemElement) {
        position3 = renderer_default(prevVisibleItemElement).offset();
        if (isVerticalOrientation) {
          position3.top += getOuterHeight(prevVisibleItemElement, true);
        } else if (!rtlEnabled) {
          position3.left += getOuterWidth(prevVisibleItemElement, true);
        }
      }
    }
    this._updatePlaceholderSizes($placeholderElement, itemElement);
    if (position3 && !this._isPositionVisible(position3)) {
      position3 = null;
    }
    if (position3) {
      var isLastVerticalPosition = isVerticalOrientation && toIndex === items.length;
      var outerPlaceholderHeight = getOuterHeight($placeholderElement);
      position3.left = this._makeLeftCorrection(position3.left);
      position3.top = isLastVerticalPosition && position3.top >= outerPlaceholderHeight ? position3.top - outerPlaceholderHeight : position3.top;
      this._move(position3, $placeholderElement);
    }
    $placeholderElement.toggle(!!position3);
  },
  _getPositions(items, elementSize3, fromIndex, toIndex) {
    var positions = [];
    for (var i = 0; i < items.length; i++) {
      var position3 = 0;
      if (null === toIndex || null === fromIndex) {
        positions.push(position3);
        continue;
      }
      if (-1 === fromIndex) {
        if (i >= toIndex) {
          position3 = elementSize3;
        }
      } else if (-1 === toIndex) {
        if (i > fromIndex) {
          position3 = -elementSize3;
        }
      } else if (fromIndex < toIndex) {
        if (i > fromIndex && i < toIndex) {
          position3 = -elementSize3;
        }
      } else if (fromIndex > toIndex) {
        if (i >= toIndex && i < fromIndex) {
          position3 = elementSize3;
        }
      }
      positions.push(position3);
    }
    return positions;
  },
  _getDraggableElementSize(isVerticalOrientation) {
    var $draggableItem = this._getDraggableElement();
    var size = this.option("draggableElementSize");
    if (!size) {
      size = isVerticalOrientation ? (getOuterHeight($draggableItem) + getOuterHeight($draggableItem, true)) / 2 : (getOuterWidth($draggableItem) + getOuterWidth($draggableItem, true)) / 2;
      if (!this.option("autoUpdate")) {
        this.option("draggableElementSize", size);
      }
    }
    return size;
  },
  _getActualFromIndex() {
    var {
      fromIndex,
      fromIndexOffset,
      offset: offset2
    } = this.option();
    return null == fromIndex ? null : fromIndex + fromIndexOffset - offset2;
  },
  _moveItems(prevToIndex, toIndex, fullUpdate) {
    var fromIndex = this._getActualFromIndex();
    var isVerticalOrientation = this._isVerticalOrientation();
    var positionPropName = isVerticalOrientation ? "top" : "left";
    var elementSize3 = this._getDraggableElementSize(isVerticalOrientation);
    var items = this._getItems();
    var prevPositions = this._getPositions(items, elementSize3, fromIndex, prevToIndex);
    var positions = this._getPositions(items, elementSize3, fromIndex, toIndex);
    var animationConfig = this.option("animation");
    var rtlEnabled = this.option("rtlEnabled");
    for (var i = 0; i < items.length; i++) {
      var itemElement = items[i];
      var prevPosition = prevPositions[i];
      var position3 = positions[i];
      if (null === toIndex || null === fromIndex) {
        stopAnimation(itemElement);
      } else if (prevPosition !== position3 || fullUpdate && position3) {
        animate2(itemElement, extend({}, animationConfig, {
          to: {
            [positionPropName]: !isVerticalOrientation && rtlEnabled ? -position3 : position3
          }
        }));
      }
    }
  },
  _toggleDragSourceClass(value2, $element) {
    var $sourceElement = $element || this._$sourceElement;
    this.callBase.apply(this, arguments);
    if (!this._isIndicateMode()) {
      $sourceElement && $sourceElement.toggleClass(this._addWidgetPrefix("source-hidden"), value2);
    }
  },
  _dispose() {
    this.reset();
    this.callBase();
  },
  _fireAddEvent(sourceEvent) {
    var args = this._getEventArgs(sourceEvent);
    this._getAction("onAdd")(args);
    return args.cancel;
  },
  _fireRemoveEvent(sourceEvent) {
    var sourceDraggable2 = this._getSourceDraggable();
    var args = this._getEventArgs(sourceEvent);
    sourceDraggable2._getAction("onRemove")(args);
    return args.cancel;
  },
  _fireReorderEvent(sourceEvent) {
    var args = this._getEventArgs(sourceEvent);
    this._getAction("onReorder")(args);
    return args.promise || Deferred().resolve();
  }
});
component_registrator_default(SORTABLE, Sortable);
var m_sortable_default = Sortable;

// node_modules/devextreme/esm/ui/sortable.js
var sortable_default = m_sortable_default;

// node_modules/devextreme/esm/__internal/grids/grid_core/row_dragging/const.js
var ATTRIBUTES2 = {
  dragCell: "dx-drag-cell"
};
var CLASSES2 = {
  cellFocusDisabled: "dx-cell-focus-disabled",
  handleIcon: "drag-icon",
  commandDrag: "dx-command-drag",
  sortableWithoutHandle: "dx-sortable-without-handle",
  rowsView: "rowsview",
  dragView: "dragview"
};

// node_modules/devextreme/esm/__internal/grids/grid_core/row_dragging/dom.js
var createHandleTemplateFunc = (addWidgetPrefix) => (container, options2) => {
  var $container = renderer_default(container);
  if ("data" === options2.rowType) {
    $container.addClass(CLASSES2.cellFocusDisabled);
    return renderer_default("<span>").addClass(addWidgetPrefix(CLASSES2.handleIcon));
  }
  m_utils_default.setEmptyText($container);
  return;
};
var GridCoreRowDraggingDom = {
  createHandleTemplateFunc
};

// node_modules/devextreme/esm/__internal/grids/grid_core/row_dragging/m_row_dragging.js
var RowDraggingExtender = {
  init() {
    this.callBase.apply(this, arguments);
    this._updateHandleColumn();
  },
  _allowReordering() {
    var rowDragging = this.option("rowDragging");
    return !!(rowDragging && (rowDragging.allowReordering || rowDragging.allowDropInsideItem || rowDragging.group));
  },
  _updateHandleColumn() {
    var rowDragging = this.option("rowDragging");
    var allowReordering2 = this._allowReordering();
    var columnsController = this._columnsController;
    var isHandleColumnVisible = allowReordering2 && rowDragging.showDragIcons;
    null === columnsController || void 0 === columnsController ? void 0 : columnsController.addCommandColumn({
      type: "drag",
      command: "drag",
      visibleIndex: -2,
      alignment: "center",
      elementAttr: [{
        name: ATTRIBUTES2.dragCell,
        value: ""
      }],
      cssClass: CLASSES2.commandDrag,
      width: "auto",
      cellTemplate: this._getHandleTemplate(),
      visible: isHandleColumnVisible
    });
    null === columnsController || void 0 === columnsController ? void 0 : columnsController.columnOption("type:drag", "visible", isHandleColumnVisible);
  },
  _renderContent() {
    var rowDragging = this.option("rowDragging");
    var allowReordering2 = this._allowReordering();
    var $content = this.callBase.apply(this, arguments);
    var isFixedTableRendering = this._isFixedTableRendering;
    var currentSortableName = isFixedTableRendering ? "_sortableFixed" : "_sortable";
    var anotherSortableName = isFixedTableRendering ? "_sortable" : "_sortableFixed";
    var togglePointerEventsStyle = (toggle) => {
      var _a2;
      null === (_a2 = this._sortableFixed) || void 0 === _a2 ? void 0 : _a2.$element().css("pointerEvents", toggle ? "auto" : "");
    };
    var rowSelector = ".dx-row:not(.dx-freespace-row):not(.dx-virtual-row):not(.dx-header-row):not(.dx-footer-row)";
    var filter = this.option("dataRowTemplate") ? "> table > tbody".concat(rowSelector) : "> table > tbody > ".concat(rowSelector);
    if ((allowReordering2 || this[currentSortableName]) && $content.length) {
      this[currentSortableName] = this._createComponent($content, sortable_default, extend({
        component: this.component,
        contentTemplate: null,
        filter,
        cursorOffset: (options2) => {
          var {
            event
          } = options2;
          var rowsViewOffset = renderer_default(this.element()).offset();
          return {
            x: event.pageX - rowsViewOffset.left
          };
        },
        onDraggableElementShown: (e) => {
          if (rowDragging.dragTemplate) {
            return;
          }
          var $dragElement = renderer_default(e.dragElement);
          var gridInstance = $dragElement.children(".dx-widget").data(this.component.NAME);
          this._synchronizeScrollLeftPosition(gridInstance);
        },
        dragTemplate: this._getDraggableRowTemplate(),
        handle: rowDragging.showDragIcons && ".".concat(CLASSES2.commandDrag),
        dropFeedbackMode: "indicate"
      }, rowDragging, {
        onDragStart: (e) => {
          var _a2, _b2;
          null === (_a2 = this.getController("keyboardNavigation")) || void 0 === _a2 ? void 0 : _a2._resetFocusedCell();
          var row = e.component.getVisibleRows()[e.fromIndex];
          e.itemData = row && row.data;
          var isDataRow2 = row && "data" === row.rowType;
          e.cancel = !allowReordering2 || !isDataRow2;
          null === (_b2 = rowDragging.onDragStart) || void 0 === _b2 ? void 0 : _b2.call(rowDragging, e);
        },
        onDragEnter: () => {
          togglePointerEventsStyle(true);
        },
        onDragLeave: () => {
          togglePointerEventsStyle(false);
        },
        onDragEnd: (e) => {
          var _a2;
          togglePointerEventsStyle(false);
          null === (_a2 = rowDragging.onDragEnd) || void 0 === _a2 ? void 0 : _a2.call(rowDragging, e);
        },
        onAdd: (e) => {
          var _a2;
          togglePointerEventsStyle(false);
          null === (_a2 = rowDragging.onAdd) || void 0 === _a2 ? void 0 : _a2.call(rowDragging, e);
        },
        dropFeedbackMode: rowDragging.dropFeedbackMode,
        onOptionChanged: (e) => {
          var hasFixedSortable = this._sortableFixed;
          if (hasFixedSortable) {
            if ("fromIndex" === e.name || "toIndex" === e.name) {
              this[anotherSortableName].option(e.name, e.value);
            }
          }
        }
      }));
      $content.toggleClass("dx-scrollable-container", isFixedTableRendering);
      $content.toggleClass(CLASSES2.sortableWithoutHandle, allowReordering2 && !rowDragging.showDragIcons);
    }
    return $content;
  },
  _renderCore(e) {
    this.callBase.apply(this, arguments);
    if (e && "update" === e.changeType && e.repaintChangesOnly && m_utils_default.isVirtualRowRendering(this)) {
      deferUpdate(() => {
        this._updateSortable();
      });
    }
  },
  _updateSortable() {
    var offset2 = this._dataController.getRowIndexOffset();
    var offsetDiff = offset2 - this._previousOffset;
    [this._sortable, this._sortableFixed].forEach((sortable) => {
      var toIndex = null === sortable || void 0 === sortable ? void 0 : sortable.option("toIndex");
      if (isDefined(toIndex) && isDefined(this._previousOffset)) {
        null === sortable || void 0 === sortable ? void 0 : sortable.option("toIndex", toIndex - offsetDiff);
      }
      null === sortable || void 0 === sortable ? void 0 : sortable.option("offset", offset2);
      null === sortable || void 0 === sortable ? void 0 : sortable.update();
    });
    this._previousOffset = offset2;
  },
  _resizeCore() {
    this.callBase.apply(this, arguments);
    this._updateSortable();
  },
  _getDraggableGridOptions(options2) {
    var gridOptions = this.option();
    var columns2 = this.getColumns();
    var $rowElement = renderer_default(this.getRowElement(options2.rowIndex));
    return {
      dataSource: [{
        id: 1,
        parentId: 0
      }],
      showBorders: true,
      showColumnHeaders: false,
      scrolling: {
        useNative: false,
        showScrollbar: "never"
      },
      pager: {
        visible: false
      },
      loadingTimeout: null,
      columnFixing: gridOptions.columnFixing,
      columnAutoWidth: gridOptions.columnAutoWidth,
      showColumnLines: gridOptions.showColumnLines,
      columns: columns2.map((column) => ({
        width: column.width || column.visibleWidth,
        fixed: column.fixed,
        fixedPosition: column.fixedPosition
      })),
      onRowPrepared: (e) => {
        var rowsView3 = e.component.getView("rowsView");
        renderer_default(e.rowElement).replaceWith($rowElement.eq(rowsView3._isFixedTableRendering ? 1 : 0).clone());
      }
    };
  },
  _synchronizeScrollLeftPosition(gridInstance) {
    var scrollable = null === gridInstance || void 0 === gridInstance ? void 0 : gridInstance.getScrollable();
    null === scrollable || void 0 === scrollable ? void 0 : scrollable.scrollTo({
      x: this._scrollLeft
    });
  },
  _getDraggableRowTemplate() {
    return (options2) => {
      var $rootElement = this.component.$element();
      var $dataGridContainer = renderer_default("<div>");
      setWidth2($dataGridContainer, getWidth($rootElement));
      var items = this._dataController.items();
      var row = items && items[options2.fromIndex];
      var gridOptions = this._getDraggableGridOptions(row);
      this._createComponent($dataGridContainer, this.component.NAME, gridOptions);
      $dataGridContainer.find(".dx-gridbase-container").children(":not(.".concat(this.addWidgetPrefix(CLASSES2.rowsView), ")")).hide();
      $dataGridContainer.addClass(this.addWidgetPrefix(CLASSES2.dragView));
      return $dataGridContainer;
    };
  },
  _getHandleTemplate() {
    return GridCoreRowDraggingDom.createHandleTemplateFunc((string) => this.addWidgetPrefix(string));
  },
  optionChanged(args) {
    if ("rowDragging" === args.name) {
      this._updateHandleColumn();
      this._invalidate(true, true);
      args.handled = true;
    }
    this.callBase.apply(this, arguments);
  }
};
var rowDraggingModule = {
  defaultOptions: () => ({
    rowDragging: {
      showDragIcons: true,
      dropFeedbackMode: "indicate",
      allowReordering: false,
      allowDropInsideItem: false
    }
  }),
  extenders: {
    views: {
      rowsView: RowDraggingExtender
    }
  }
};

// node_modules/devextreme/esm/__internal/grids/data_grid/module_not_extended/row_dragging.js
m_core_default.registerModule("rowDragging", rowDraggingModule);

// node_modules/devextreme/esm/__internal/grids/data_grid/m_widget.js
var m_widget_default = m_widget_base_default;

// node_modules/devextreme/esm/ui/data_grid.js
var data_grid_default = m_widget_default;

// node_modules/devextreme-vue/esm/core/strategy/vue2/index.js
var vue2_exports = {};
__export(vue2_exports, {
  createComponent: () => createComponent,
  createConfigurationComponent: () => createConfigurationComponent,
  createExtensionComponent: () => createExtensionComponent
});
function createComponent() {
  throw new Error("Since v23.2, devextreme-vue no longer supports Vue 2. See: https://supportcenter.devexpress.com/ticket/details/T1186771");
}
function createConfigurationComponent() {
}
function createExtensionComponent() {
}

// node_modules/devextreme-vue/esm/core/strategy/vue3/index.js
var vue3_exports = {};
__export(vue3_exports, {
  createComponent: () => createComponent2,
  createConfigurationComponent: () => createConfigurationComponent2,
  createExtensionComponent: () => createExtensionComponent2
});

// node_modules/devextreme/esm/events/index.js
var on = events_engine_default.on;
var one = events_engine_default.one;
var off = events_engine_default.off;
var trigger = events_engine_default.trigger;
var triggerHandler = events_engine_default.triggerHandler;
var Event = events_engine_default.Event;

// node_modules/devextreme-vue/esm/core/helpers.js
function getTemplatePropName(props, templateName) {
  for (var propName in props) {
    if (props[propName] === templateName) {
      return propName;
    }
  }
  return templateName;
}
function uppercaseFirst(value2) {
  return value2[0].toUpperCase() + value2.substr(1);
}
function lowercaseFirst(value2) {
  return value2[0].toLowerCase() + value2.substr(1);
}
function camelize2(value2) {
  return lowercaseFirst(value2.split("-").map(function(v) {
    return uppercaseFirst(v);
  }).join(""));
}
function toComparable2(value2) {
  return value2 instanceof Date ? value2.getTime() : value2;
}
function isEqual(value1, value2) {
  if (toComparable2(value1) === toComparable2(value2)) {
    return true;
  }
  if (Array.isArray(value1) && Array.isArray(value2)) {
    return value1.length === 0 && value2.length === 0;
  }
  return false;
}
function forEachChildNode(el, callback) {
  Array.prototype.slice.call(el.childNodes).forEach(callback);
}
function allKeysAreEqual(obj1, obj2) {
  var obj1Keys = Object.keys(obj1);
  if (obj1Keys.length !== Object.keys(obj2).length) {
    return false;
  }
  for (var _i = 0, obj1Keys_1 = obj1Keys; _i < obj1Keys_1.length; _i++) {
    var key = obj1Keys_1[_i];
    if (!obj2.hasOwnProperty(key)) {
      return false;
    }
  }
  return true;
}
function getOptionValue(options2, optionPath) {
  var value2 = options2;
  optionPath.split(".").forEach(function(p2) {
    var optionInfo = getOptionInfo(p2);
    if (value2) {
      value2 = optionInfo.isCollection ? value2[optionInfo.name] && value2[optionInfo.name][optionInfo.index] : value2[optionInfo.name];
    }
  });
  return value2;
}
function getOptionInfo(name2) {
  var parts = name2.split("[");
  if (parts.length === 1) {
    return {
      isCollection: false,
      name: name2,
      fullName: name2
    };
  }
  return {
    isCollection: true,
    name: parts[0],
    fullName: name2,
    index: Number(parts[1].slice(0, -1))
  };
}

// node_modules/devextreme-vue/esm/core/children-processing.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function pullAllChildren(directChildren, allChildren, config3) {
  if (!directChildren || directChildren.length === 0) {
    return;
  }
  pullConfigComponents(directChildren, allChildren, config3);
}
function isFragment(node) {
  var patchFlag = node.patchFlag;
  return patchFlag === 128 || patchFlag === 256 || patchFlag === 64 || patchFlag === -2;
}
function pullConfigComponents(children, nodes, ownerConfig) {
  children.forEach(function(node) {
    if (isFragment(node) && Array.isArray(node.children)) {
      pullConfigComponents(node.children, nodes, ownerConfig);
    }
    if (!isFragment(node)) {
      nodes.push(node);
    }
    if (!node) {
      return;
    }
    var componentInfo = getComponentInfo(node);
    if (!componentInfo || !componentInfo.$_optionName) {
      return;
    }
    var componentChildren = configurationChildren(node);
    var initialValues = __assign(__assign({}, componentInfo.$_predefinedProps), getNormalizedProps(node.props || {}));
    var config3 = ownerConfig.createNested(componentInfo.$_optionName, initialValues, componentInfo.$_isCollectionItem, componentInfo.$_expectedChildren);
    node.$_config = config3;
    node.$_innerChanges = {};
    if (componentChildren) {
      pullConfigComponents(componentChildren, nodes, config3);
    }
  });
}

// node_modules/devextreme-vue/esm/core/vue-helper.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var VMODEL_NAME = "modelValue";
function getChildren(component) {
  if (!hasChildren(component) || !component.$_config) {
    return [];
  }
  var children = component.$.subTree && component.$.subTree.children;
  if (!Array.isArray(children)) {
    return [];
  }
  return children.filter(function(child) {
    if (!isFragment(child)) {
      return child;
    }
  });
}
function getComponentInfo(component) {
  return getConfigurationOptions(component);
}
function getNormalizedProps(props) {
  var result2 = {};
  for (var propName in props) {
    if (props.hasOwnProperty(propName)) {
      result2[camelize2(propName)] = props[propName];
    }
  }
  return result2;
}
function configurationChildren(component) {
  if (!component.children || !component.children.default) {
    return [];
  }
  return findConfigurationComponents(component.children.default());
}
function configurationDefaultTemplate(node) {
  if (!node.children || node.children === "object" || !node.children.default) {
    return;
  }
  return hasInlineTemplate(node.children.default()) ? node.children.default : void 0;
}
function configurationTemplate(node) {
  return configurationDefaultTemplate(node);
}
function declaredTemplates(component) {
  return component.$slots;
}
function defaultSlots(component) {
  var templates = declaredTemplates(component);
  if (!templates.default) {
    return [];
  }
  return templates.default();
}
function mount2(options2, parent, el) {
  var template = createApp(options2);
  template.provide("eventBus", parent.eventBus);
  setAppContext(template, parent);
  return template.mount(el);
}
function getComponentProps(component) {
  var props = component.$.vnode.props || {};
  return getNormalizedProps(props);
}
function getNodeOptions(component) {
  if (component.$) {
    return component.$.vnode;
  }
  return component;
}
function getNodeTypeOfComponent(component) {
  return component.$.vnode.type;
}
function getVModelValue(options2) {
  return options2[VMODEL_NAME];
}
function setCompatOptions(component) {
  component.compatConfig = {
    MODE: 3
  };
}
function setVModel(config3) {
  var _a2;
  var eventName = "update:" + VMODEL_NAME;
  config3.model.prop = VMODEL_NAME;
  config3.model.event = eventName;
  config3.props.modelValue = {};
  config3.emits = __assign2(__assign2({}, config3.emits), (_a2 = {}, _a2["" + eventName] = null, _a2));
}
function setCustomPluginsData(appContext, parentAppContext) {
  for (var prop in parentAppContext) {
    if (!appContext.hasOwnProperty(prop) && parentAppContext.hasOwnProperty(prop)) {
      appContext[prop] = parentAppContext[prop];
    }
  }
}
function setAppContext(template, parent) {
  template._context.components = Object.assign(parent.$.appContext.components, template._context.components);
  Object.setPrototypeOf(template._context.provides, Object.getPrototypeOf(parent.$.provides));
  Object.assign(template._context.provides, parent.$.appContext.provides);
  template._context.config = parent.$.appContext.config;
  template._context.directives = parent.$.appContext.directives;
  template._context.mixins = parent.$.appContext.mixins;
  setCustomPluginsData(template._context.app, parent.$.appContext.app);
}
function findConfigurationComponents(children) {
  return children.filter(function(child) {
    if (isFragment(child)) {
      return findConfigurationComponents(child.children || []);
    }
    var childType = child.type;
    if (childType && typeof childType === "object" && childType.$_optionName) {
      delete child.$_config;
      delete child.$_innerChanges;
      return child;
    }
  });
}
function hasInlineTemplate(children) {
  var hasTemplate3 = false;
  children.forEach(function(child) {
    if (!isConfiguration(child) && !isFragment(child) && !isComment(child)) {
      hasTemplate3 = true;
    }
  });
  return hasTemplate3;
}
function isComment(node) {
  return node.type === Comment || node.type.toString() === "Symbol()" && !node.children;
}
function isConfiguration(child) {
  return child.type && typeof child.type === "object" && child.type.$_optionName;
}
function getConfigurationOptions(node) {
  return node.type;
}
function hasChildren(component) {
  return component.$.vnode && component.$.vnode.children && component.$.vnode.children.default;
}

// node_modules/devextreme-vue/esm/core/config.js
var config2 = {
  deepWatch: false
};
function getOption(optionName) {
  return config2[optionName];
}

// node_modules/devextreme-vue/esm/core/configuration.js
var __assign3 = function() {
  __assign3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
var Configuration = (
  /** @class */
  function() {
    function Configuration2(updateFunc, name2, initialValues, expectedChildren, isCollectionItem, collectionItemIndex, ownerConfig) {
      this._updateFunc = updateFunc;
      this._name = name2;
      this._initialValues = initialValues || {};
      this._nestedConfigurations = [];
      this._isCollectionItem = !!isCollectionItem;
      this._collectionItemIndex = collectionItemIndex;
      this._expectedChildren = expectedChildren || {};
      this._ownerConfig = ownerConfig;
      this._componentChanges = [];
      this.updateValue = this.updateValue.bind(this);
    }
    Object.defineProperty(Configuration2.prototype, "name", {
      get: function() {
        return this._name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Configuration2.prototype, "fullName", {
      get: function() {
        return this._name && this._isCollectionItem ? this._name + "[" + this._collectionItemIndex + "]" : this._name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Configuration2.prototype, "componentsCountChanged", {
      get: function() {
        return this._componentChanges;
      },
      enumerable: false,
      configurable: true
    });
    Configuration2.prototype.cleanComponentsCountChanged = function() {
      this._componentChanges = [];
    };
    Object.defineProperty(Configuration2.prototype, "fullPath", {
      get: function() {
        return this._ownerConfig && this._ownerConfig.fullPath ? this._ownerConfig.fullPath + "." + this.fullName : this.fullName;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Configuration2.prototype, "ownerConfig", {
      get: function() {
        return this._ownerConfig;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Configuration2.prototype, "options", {
      get: function() {
        return this._options;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Configuration2.prototype, "initialValues", {
      get: function() {
        return this._initialValues;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Configuration2.prototype, "expectedChildren", {
      get: function() {
        return this._expectedChildren;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Configuration2.prototype, "nested", {
      get: function() {
        return this._nestedConfigurations;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Configuration2.prototype, "prevNestedOptions", {
      get: function() {
        return this._prevNestedConfigOptions;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Configuration2.prototype, "collectionItemIndex", {
      get: function() {
        return this._collectionItemIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Configuration2.prototype, "isCollectionItem", {
      get: function() {
        return this._isCollectionItem;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Configuration2.prototype, "updateFunc", {
      get: function() {
        return this._updateFunc;
      },
      enumerable: false,
      configurable: true
    });
    Configuration2.prototype.init = function(options2) {
      this._options = options2 || [];
    };
    Object.defineProperty(Configuration2.prototype, "emitOptionChanged", {
      set: function(handler) {
        this._emitOptionChanged = handler;
      },
      enumerable: false,
      configurable: true
    });
    Configuration2.prototype.setPrevNestedOptions = function(value2) {
      this._prevNestedConfigOptions = value2;
    };
    Configuration2.prototype.onOptionChanged = function(args) {
      if (isEqual(args.value, args.previousValue)) {
        return;
      }
      this._onOptionChanged(args.fullName.split("."), args);
    };
    Configuration2.prototype.cleanNested = function() {
      this._nestedConfigurations = [];
    };
    Configuration2.prototype.createNested = function(name2, initialValues, isCollectionItem, expectedChildren) {
      var expected = this._expectedChildren[name2];
      var actualName = name2;
      var actualIsCollectionItem = isCollectionItem;
      if (expected) {
        actualIsCollectionItem = expected.isCollectionItem;
        if (expected.optionName) {
          actualName = expected.optionName;
        }
      }
      var collectionItemIndex = -1;
      if (actualIsCollectionItem && actualName) {
        collectionItemIndex = this._nestedConfigurations.filter(function(c) {
          return c._name && c._name === actualName;
        }).length;
      }
      var configuration = new Configuration2(this._updateFunc, actualName, initialValues, expectedChildren, actualIsCollectionItem, collectionItemIndex, this);
      this._nestedConfigurations.push(configuration);
      return configuration;
    };
    Configuration2.prototype.updateValue = function(nestedName, value2) {
      var fullName = [this.fullPath, nestedName].filter(function(n) {
        return n;
      }).join(".");
      this._updateFunc(fullName, value2);
    };
    Configuration2.prototype.getNestedOptionValues = function() {
      var values = {};
      this._nestedConfigurations.forEach(function(o) {
        if (!o._name) {
          return;
        }
        var nestedValue = __assign3(__assign3({}, o.initialValues), o.getNestedOptionValues());
        if (!nestedValue) {
          return;
        }
        if (!o._isCollectionItem) {
          values[o._name] = nestedValue;
        } else {
          var arr = values[o._name];
          if (!arr || !Array.isArray(arr)) {
            arr = [];
            values[o._name] = arr;
          }
          arr.push(nestedValue);
        }
      });
      return values;
    };
    Configuration2.prototype.getOptionsToWatch = function() {
      var blackList = {};
      this._nestedConfigurations.forEach(function(c) {
        return c._name && (blackList[c._name] = true);
      });
      return this._options.filter(function(o) {
        return !blackList[o];
      });
    };
    Configuration2.prototype._onOptionChanged = function(optionRelPath, args) {
      if (optionRelPath.length === 0) {
        return;
      }
      var optionInfo = getOptionInfo(optionRelPath[0]);
      if (optionInfo.isCollection || optionRelPath.length > 1) {
        var nestedConfig = this._getNestedConfig(optionInfo.fullName);
        if (nestedConfig) {
          nestedConfig._onOptionChanged(optionRelPath.slice(1), args);
          return;
        }
        this._tryEmitOptionChanged(optionInfo.name, args.component.option(this.fullPath ? this.fullPath + "." + optionInfo.name : optionInfo.name));
      } else {
        this._tryEmitOptionChanged(optionInfo.name, args.value);
      }
    };
    Configuration2.prototype._getNestedConfig = function(fullName) {
      for (var _i = 0, _a2 = this._nestedConfigurations; _i < _a2.length; _i++) {
        var nestedConfig = _a2[_i];
        if (nestedConfig.fullName === fullName) {
          return nestedConfig;
        }
      }
      return void 0;
    };
    Configuration2.prototype._tryEmitOptionChanged = function(name2, value2) {
      if (this._emitOptionChanged) {
        this._emitOptionChanged(name2, value2);
      }
    };
    return Configuration2;
  }()
);
function bindOptionWatchers(config3, vueInstance, innerChanges) {
  var targets = config3 && config3.getOptionsToWatch();
  if (targets) {
    targets.forEach(function(optionName) {
      vueInstance.$watch(optionName, function(value2) {
        var rawValue = toRaw(value2);
        if (!innerChanges.hasOwnProperty(optionName) || innerChanges[optionName] !== rawValue) {
          config3.updateValue(optionName, value2);
        }
        delete innerChanges[optionName];
      }, { deep: getOption("deepWatch") });
    });
  }
}
function hasProp(vueInstance, propName) {
  var props = vueInstance.$options.props;
  return props && props.hasOwnProperty(propName);
}
function hasVModelValue(options2, props, vnode) {
  var _a2;
  return options2.model && props.hasOwnProperty(VMODEL_NAME) && ((_a2 = vnode === null || vnode === void 0 ? void 0 : vnode.props) === null || _a2 === void 0 ? void 0 : _a2.hasOwnProperty(VMODEL_NAME));
}
function setEmitOptionChangedFunc(config3, vueInstance, innerChanges) {
  config3.emitOptionChanged = function(name2, value2) {
    var _a2;
    var props = vueInstance.$props;
    var vnode = (_a2 = vueInstance === null || vueInstance === void 0 ? void 0 : vueInstance.$) === null || _a2 === void 0 ? void 0 : _a2.vnode;
    if (hasProp(vueInstance, name2) && !isEqual(value2, props[name2]) && vueInstance.$emit) {
      innerChanges[name2] = toRaw(value2);
      var eventName = name2 === "value" && hasVModelValue(vueInstance.$options, props, vnode) ? "update:" + VMODEL_NAME : "update:" + name2;
      vueInstance.$emit(eventName, value2);
    }
  };
}
var configuration_default = Configuration;

// node_modules/devextreme-vue/esm/core/configuration-component.js
function getConfig2(vueInstance) {
  var componentOptions = getNodeOptions(vueInstance);
  if (!componentOptions) {
    return;
  }
  return componentOptions.$_config || vueInstance.$_config;
}
function getInnerChanges(vueInstance) {
  var componentOptions = getNodeOptions(vueInstance);
  if (!componentOptions) {
    return;
  }
  return componentOptions.$_innerChanges || vueInstance.$_innerChanges;
}
function initOptionChangedFunc(config3, props, vueInstance, innerChanges) {
  if (!config3) {
    return;
  }
  config3.init(Object.keys(props));
  if (vueInstance) {
    setEmitOptionChangedFunc(config3, vueInstance, innerChanges);
  }
}
function getComponentInfo2(_a2, removed) {
  var name2 = _a2.name, isCollectionItem = _a2.isCollectionItem, ownerConfig = _a2.ownerConfig;
  var parentPath = ownerConfig && ownerConfig.fullPath;
  var optionPath = name2 && parentPath ? parentPath + "." + name2 : name2 || "";
  return {
    optionPath,
    isCollection: isCollectionItem,
    removed
  };
}
function initDxConfiguration() {
  return defineComponent({
    beforeMount: function() {
      var thisComponent = this;
      var config3 = getConfig2(thisComponent);
      var innerChanges = getInnerChanges(thisComponent);
      initOptionChangedFunc(config3, getNodeTypeOfComponent(thisComponent).props, thisComponent, innerChanges);
      bindOptionWatchers(config3, this, innerChanges);
    },
    mounted: function() {
      if (this.$parent.$_instance) {
        this.$parent.$_config.componentsCountChanged.push(getComponentInfo2(getConfig2(this)));
      }
    },
    beforeUnmount: function() {
      var config3 = getConfig2(this);
      if (config3) {
        this.$parent.$_config.componentsCountChanged.push(getComponentInfo2(config3, true));
      }
    },
    render: function() {
      return null;
    }
  });
}

// node_modules/devextreme-vue/esm/core/constants.js
var DX_TEMPLATE_WRAPPER_CLASS = "dx-template-wrapper";
var DX_REMOVE_EVENT = "dxremove";

// node_modules/devextreme-vue/esm/core/templates-discovering.js
var TEMPLATE_PROP = "template";
function asConfigurable(component) {
  var componentOptions = component;
  if (!componentOptions) {
    return;
  }
  if (!componentOptions.$_config || !componentOptions.$_config.name) {
    return void 0;
  }
  return componentOptions;
}
function hasTemplate2(component) {
  return TEMPLATE_PROP in component.type.props && configurationTemplate(component);
}
function discover(component) {
  var templates = {};
  var namedTeplates = declaredTemplates(component);
  for (var slotName in namedTeplates) {
    if (slotName === "default" && component.$slots.default) {
      continue;
    }
    var slot = namedTeplates[slotName];
    if (!slot) {
      continue;
    }
    templates[slotName] = slot;
  }
  var componentChildren = getChildren(component);
  for (var _i = 0, componentChildren_1 = componentChildren; _i < componentChildren_1.length; _i++) {
    var childComponent = componentChildren_1[_i];
    var configurable = asConfigurable(childComponent);
    if (!configurable) {
      continue;
    }
    var defaultSlot = configurationDefaultTemplate(childComponent);
    if (!defaultSlot || !hasTemplate2(childComponent)) {
      continue;
    }
    var templateName = configurable.$_config.fullPath + "." + TEMPLATE_PROP;
    templates[templateName] = defaultSlot;
  }
  return templates;
}
function clearConfiguration(content) {
  var newContent = [];
  content.forEach(function(item) {
    var configurable = getConfigurationOptions(item);
    if (!configurable || !configurable.$_optionName) {
      newContent.push(item);
    }
  });
  return newContent;
}
function mountTemplate(getSlot, parent, data3, name2, placeholder) {
  return mount2({
    name: name2,
    inject: ["eventBus"],
    created: function() {
      this.eventBus.add(this.$_updatedHandler);
    },
    mounted: function() {
      data3.onRendered();
    },
    unmounted: function() {
      this.eventBus.remove(this.$_updatedHandler);
    },
    methods: {
      $_updatedHandler: function() {
        this.$forceUpdate();
      }
    },
    render: function() {
      var content = clearConfiguration(getSlot()(data3));
      if (!content) {
        return h("div");
      }
      return content.length > 1 ? content : content[0];
    }
  }, parent, placeholder);
}

// node_modules/devextreme-vue/esm/core/templates-manager.js
var __assign4 = function() {
  __assign4 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign4.apply(this, arguments);
};
var TemplatesManager = (
  /** @class */
  function() {
    function TemplatesManager2(component) {
      this._slots = {};
      this._templates = {};
      this._isDirty = false;
      this._component = component;
      this.discover();
    }
    TemplatesManager2.prototype.discover = function() {
      this._slots = __assign4({}, discover(this._component));
      if (!allKeysAreEqual(this._templates, this._slots)) {
        this._prepareTemplates();
      }
    };
    Object.defineProperty(TemplatesManager2.prototype, "templates", {
      get: function() {
        return this._templates;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(TemplatesManager2.prototype, "isDirty", {
      get: function() {
        return this._isDirty;
      },
      enumerable: false,
      configurable: true
    });
    TemplatesManager2.prototype.resetDirtyFlag = function() {
      this._isDirty = false;
    };
    TemplatesManager2.prototype._prepareTemplates = function() {
      this._templates = {};
      for (var _i = 0, _a2 = Object.keys(this._slots); _i < _a2.length; _i++) {
        var name_1 = _a2[_i];
        this._templates[name_1] = this.createDxTemplate(name_1);
      }
      this._isDirty = true;
    };
    TemplatesManager2.prototype.createDxTemplate = function(name2) {
      var _this = this;
      return {
        render: function(data3) {
          var rendered = function(onRendered, counter) {
            if (counter === void 0) {
              counter = 0;
            }
            return function() {
              if (counter === 1 && onRendered) {
                onRendered();
              }
              counter++;
            };
          }(data3.onRendered);
          var scopeData = { data: data3.model, index: data3.index, onRendered: rendered };
          var placeholder = document.createElement("div");
          var container = data3.container.get ? data3.container.get(0) : data3.container;
          container.appendChild(placeholder);
          var mountedTemplate = mountTemplate(function() {
            return _this._slots[name2];
          }, _this._component, scopeData, name2, placeholder);
          var element = mountedTemplate.$el;
          container.removeChild(placeholder);
          while (placeholder.firstChild) {
            container.appendChild(placeholder.firstChild);
          }
          dom_adapter_default.setClass(element, DX_TEMPLATE_WRAPPER_CLASS, true);
          if (element.nodeType === Node.TEXT_NODE) {
            var removalListener = document.createElement(container.nodeName === "TABLE" ? "tbody" : "span");
            removalListener.style.display = "none";
            container.appendChild(removalListener);
            one(removalListener, DX_REMOVE_EVENT, mountedTemplate.$.appContext.app.unmount.bind(mountedTemplate));
          } else {
            one(element, DX_REMOVE_EVENT, mountedTemplate.$.appContext.app.unmount.bind(mountedTemplate));
          }
          rendered();
          return element;
        }
      };
    };
    return TemplatesManager2;
  }()
);

// node_modules/devextreme-vue/esm/core/component.js
var __assign5 = function() {
  __assign5 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign5.apply(this, arguments);
};
var includeAttrs = ["id", "class", "style"];
function getAttrs(attrs) {
  var attributes = {};
  includeAttrs.forEach(function(attr) {
    var attrValue = attrs[attr];
    if (attrValue) {
      attributes[attr] = attrValue;
    }
  });
  return attributes;
}
function initBaseComponent() {
  return defineComponent({
    inheritAttrs: false,
    data: function() {
      return {
        eventBus: callbacks_default()
      };
    },
    provide: function() {
      return {
        eventBus: this.eventBus
      };
    },
    render: function() {
      var thisComponent = this;
      var children = [];
      if (thisComponent.$_config.cleanNested) {
        thisComponent.$_config.cleanNested();
      }
      pullAllChildren(defaultSlots(this), children, thisComponent.$_config);
      this.$_processChildren(children);
      return h("div", __assign5({}, getAttrs(this.$attrs)), children);
    },
    beforeUpdate: function() {
      var thisComponent = this;
      thisComponent.$_config.setPrevNestedOptions(thisComponent.$_config.getNestedOptionValues());
    },
    updated: function() {
      var thisComponent = this;
      var nodes = cleanWidgetNode(this.$el);
      getChildren(thisComponent).forEach(function(child) {
        var _a3;
        initOptionChangedFunc(child.$_config, child.type.props || {}, (_a3 = child === null || child === void 0 ? void 0 : child.component) === null || _a3 === void 0 ? void 0 : _a3.proxy, child.$_innerChanges);
      });
      thisComponent.$_templatesManager.discover();
      thisComponent.$_instance.beginUpdate();
      this.$_applyConfigurationChanges();
      if (thisComponent.$_templatesManager.isDirty) {
        thisComponent.$_instance.option("integrationOptions.templates", thisComponent.$_templatesManager.templates);
        var props = thisComponent.$.vnode.props;
        for (var _i = 0, _a2 = Object.keys(thisComponent.$_templatesManager.templates); _i < _a2.length; _i++) {
          var name_1 = _a2[_i];
          thisComponent.$_instance.option(getTemplatePropName(props, name_1), name_1);
        }
        thisComponent.$_templatesManager.resetDirtyFlag();
      }
      for (var _b2 = 0, _c = Object.keys(thisComponent.$_pendingOptions); _b2 < _c.length; _b2++) {
        var name_2 = _c[_b2];
        thisComponent.$_instance.option(name_2, thisComponent.$_pendingOptions[name_2]);
      }
      thisComponent.$_pendingOptions = {};
      thisComponent.$_instance.endUpdate();
      restoreNodes(this.$el, nodes);
      this.eventBus.fire();
    },
    beforeUnmount: function() {
      var thisComponent = this;
      var instance = thisComponent.$_instance;
      if (instance) {
        triggerHandler(this.$el, DX_REMOVE_EVENT);
        instance.dispose();
      }
    },
    created: function() {
      var thisComponent = this;
      var props = getComponentProps(this);
      thisComponent.$_config = new configuration_default(function(n, v) {
        if (Array.isArray(v)) {
          thisComponent.$_instance.option(n, v);
        } else {
          thisComponent.$_pendingOptions[n === VMODEL_NAME ? "value" : n] = v;
        }
      }, null, props && __assign5({}, props), thisComponent.$_expectedChildren);
      thisComponent.$_innerChanges = {};
      thisComponent.$_config.init(this.$props && Object.keys(this.$props));
    },
    methods: {
      $_applyConfigurationChanges: function() {
        var thisComponent = this;
        thisComponent.$_config.componentsCountChanged.forEach(function(_a2) {
          var optionPath = _a2.optionPath, isCollection = _a2.isCollection, removed = _a2.removed;
          var options2 = thisComponent.$_config.getNestedOptionValues();
          if (!isCollection && removed) {
            thisComponent.$_instance.resetOption(optionPath);
          } else {
            thisComponent.$_instance.option(optionPath, getOptionValue(options2, optionPath));
          }
        });
        thisComponent.$_config.cleanComponentsCountChanged();
      },
      $_createWidget: function(element) {
        var thisComponent = this;
        thisComponent.$_pendingOptions = {};
        thisComponent.$_templatesManager = new TemplatesManager(this);
        var config3 = thisComponent.$_config;
        if (config3.initialValues.hasOwnProperty(VMODEL_NAME)) {
          config3.initialValues.value = getVModelValue(config3.initialValues);
        }
        var options2 = __assign5(__assign5(__assign5(__assign5({ templatesRenderAsynchronously: thisComponent.$_hasAsyncTemplate }, getComponentProps(thisComponent)), config3.initialValues), config3.getNestedOptionValues()), this.$_getIntegrationOptions());
        var instance = new thisComponent.$_WidgetClass(element, options2);
        thisComponent.$_instance = instance;
        instance.on("optionChanged", function(args) {
          return config3.onOptionChanged(args);
        });
        setEmitOptionChangedFunc(config3, thisComponent, thisComponent.$_innerChanges);
        bindOptionWatchers(config3, thisComponent, thisComponent.$_innerChanges);
        this.$_createEmitters(instance);
      },
      $_getIntegrationOptions: function() {
        var thisComponent = this;
        var result2 = __assign5({ integrationOptions: {
          watchMethod: this.$_getWatchMethod()
        } }, this.$_getExtraIntegrationOptions());
        if (thisComponent.$_templatesManager.isDirty) {
          var templates = thisComponent.$_templatesManager.templates;
          result2.integrationOptions.templates = templates;
          var props = thisComponent.$.vnode.props;
          for (var _i = 0, _a2 = Object.keys(templates); _i < _a2.length; _i++) {
            var name_3 = _a2[_i];
            result2[getTemplatePropName(props, name_3)] = name_3;
          }
          thisComponent.$_templatesManager.resetDirtyFlag();
        }
        return result2;
      },
      $_getWatchMethod: function() {
        var _this = this;
        return function(valueGetter, valueChangeCallback, options2) {
          options2 = options2 || {};
          if (!options2.skipImmediate) {
            valueChangeCallback(valueGetter());
          }
          return _this.$watch(function() {
            return valueGetter();
          }, function(newValue, oldValue) {
            if (toComparable2(oldValue) !== toComparable2(newValue) || options2.deep) {
              valueChangeCallback(newValue);
            }
          }, {
            deep: options2.deep
          });
        };
      },
      $_getExtraIntegrationOptions: function() {
        return {};
      },
      $_processChildren: function(_children) {
      },
      $_createEmitters: function(instance) {
        var _this = this;
        if (this.$attrs) {
          Object.keys(this.$attrs).forEach(function(listenerName) {
            var eventName = camelize2(listenerName);
            instance.on(eventName, function(e) {
              _this.$emit(listenerName, e);
            });
          });
        }
      }
    }
  });
}
function cleanWidgetNode(node) {
  var removedNodes = [];
  forEachChildNode(node, function(childNode) {
    var parent = childNode.parentNode;
    var isExtension = childNode.hasAttribute && childNode.hasAttribute("isExtension");
    if ((childNode.nodeName === "#comment" || isExtension) && parent) {
      removedNodes.push(childNode);
      parent.removeChild(childNode);
    }
  });
  return removedNodes;
}
function restoreNodes(el, nodes) {
  nodes.forEach(function(node) {
    el.appendChild(node);
  });
}
function initDxComponent() {
  return defineComponent({
    extends: initBaseComponent(),
    methods: {
      $_getExtraIntegrationOptions: function() {
        return {
          onInitializing: function() {
            this.beginUpdate();
          }
        };
      },
      $_processChildren: function(children) {
        children.forEach(function(childNode) {
          if (!childNode || typeof childNode !== "object") {
            return;
          }
          childNode.$_hasOwner = true;
        });
      }
    },
    mounted: function() {
      var _this = this;
      var nodes = cleanWidgetNode(this.$el);
      var thisComponent = this;
      this.$_createWidget(this.$el);
      thisComponent.$_instance.endUpdate();
      restoreNodes(this.$el, nodes);
      if (this.$slots && this.$slots.default) {
        getChildren(thisComponent).forEach(function(child) {
          var childExtenton = child;
          if (childExtenton && childExtenton.$_isExtension) {
            childExtenton.$_attachTo(_this.$el);
          }
        });
      }
    }
  });
}

// node_modules/devextreme-vue/esm/core/extension-component.js
function initDxExtensionComponent() {
  return defineComponent({
    extends: initBaseComponent(),
    mounted: function() {
      this.$el.setAttribute("isExtension", "true");
      var nodeOptions = getNodeOptions(this);
      nodeOptions.$_isExtension = true;
      nodeOptions.$_attachTo = this.attachTo.bind(this);
      if (nodeOptions && nodeOptions.$_hasOwner) {
        return;
      }
      this.attachTo(this.$el);
    },
    methods: {
      attachTo: function(element) {
        this.$_createWidget(element);
      }
    }
  });
}

// node_modules/devextreme-vue/esm/core/strategy/vue3/index.js
function createComponent2(config3) {
  config3.extends = initDxComponent();
  setCompatOptions(config3);
  if (config3.model) {
    setVModel(config3);
  }
  return defineComponent(config3);
}
function createConfigurationComponent2(config3) {
  config3.extends = initDxConfiguration();
  setCompatOptions(config3);
  return defineComponent(config3);
}
function createExtensionComponent2(config3) {
  config3.extends = initDxExtensionComponent();
  setCompatOptions(config3);
  return defineComponent(config3);
}

// node_modules/devextreme-vue/esm/core/version.js
var Vue = void 0 || vue_runtime_esm_bundler_exports;
function getVueVersion() {
  var currentVersion = Vue.version;
  return Number(currentVersion.split(".")[0]);
}
function isVue3() {
  return getVueVersion() === 3;
}

// node_modules/devextreme-vue/esm/core/index.js
var strategy3 = isVue3() ? vue3_exports : vue2_exports;
var createComponent3 = strategy3.createComponent;
var createConfigurationComponent3 = strategy3.createConfigurationComponent;
var createExtensionComponent3 = strategy3.createExtensionComponent;

// node_modules/devextreme-vue/esm/data-grid.js
var DxDataGrid = createComponent3({
  props: {
    accessKey: String,
    activeStateEnabled: Boolean,
    allowColumnReordering: Boolean,
    allowColumnResizing: Boolean,
    autoNavigateToFocusedRow: Boolean,
    cacheEnabled: Boolean,
    cellHintEnabled: Boolean,
    columnAutoWidth: Boolean,
    columnChooser: Object,
    columnFixing: Object,
    columnHidingEnabled: Boolean,
    columnMinWidth: Number,
    columnResizingMode: String,
    columns: Array,
    columnWidth: [Number, String],
    customizeColumns: Function,
    dataRowTemplate: {},
    dataSource: {},
    dateSerializationFormat: String,
    disabled: Boolean,
    editing: Object,
    elementAttr: Object,
    errorRowEnabled: Boolean,
    export: Object,
    filterBuilder: Object,
    filterBuilderPopup: Object,
    filterPanel: Object,
    filterRow: Object,
    filterSyncEnabled: [Boolean, String],
    filterValue: [Array, Function, String],
    focusedColumnIndex: Number,
    focusedRowEnabled: Boolean,
    focusedRowIndex: Number,
    focusedRowKey: {},
    grouping: Object,
    groupPanel: Object,
    headerFilter: Object,
    height: [Function, Number, String],
    highlightChanges: Boolean,
    hint: String,
    hoverStateEnabled: Boolean,
    keyboardNavigation: Object,
    keyExpr: [Array, String],
    loadPanel: Object,
    masterDetail: Object,
    noDataText: String,
    onAdaptiveDetailRowPreparing: Function,
    onCellClick: Function,
    onCellDblClick: Function,
    onCellHoverChanged: Function,
    onCellPrepared: Function,
    onContentReady: Function,
    onContextMenuPreparing: Function,
    onDataErrorOccurred: Function,
    onDisposing: Function,
    onEditCanceled: Function,
    onEditCanceling: Function,
    onEditingStart: Function,
    onEditorPrepared: Function,
    onEditorPreparing: Function,
    onExporting: Function,
    onFocusedCellChanged: Function,
    onFocusedCellChanging: Function,
    onFocusedRowChanged: Function,
    onFocusedRowChanging: Function,
    onInitialized: Function,
    onInitNewRow: Function,
    onKeyDown: Function,
    onOptionChanged: Function,
    onRowClick: Function,
    onRowCollapsed: Function,
    onRowCollapsing: Function,
    onRowDblClick: Function,
    onRowExpanded: Function,
    onRowExpanding: Function,
    onRowInserted: Function,
    onRowInserting: Function,
    onRowPrepared: Function,
    onRowRemoved: Function,
    onRowRemoving: Function,
    onRowUpdated: Function,
    onRowUpdating: Function,
    onRowValidating: Function,
    onSaved: Function,
    onSaving: Function,
    onSelectionChanged: Function,
    onToolbarPreparing: Function,
    pager: Object,
    paging: Object,
    remoteOperations: [Boolean, Object, String],
    renderAsync: Boolean,
    repaintChangesOnly: Boolean,
    rowAlternationEnabled: Boolean,
    rowDragging: Object,
    rowTemplate: {},
    rtlEnabled: Boolean,
    scrolling: Object,
    searchPanel: Object,
    selectedRowKeys: Array,
    selection: Object,
    selectionFilter: [Array, Function, String],
    showBorders: Boolean,
    showColumnHeaders: Boolean,
    showColumnLines: Boolean,
    showRowLines: Boolean,
    sortByGroupSummaryInfo: Array,
    sorting: Object,
    stateStoring: Object,
    summary: Object,
    syncLookupFilterValues: Boolean,
    tabIndex: Number,
    toolbar: Object,
    twoWayBindingEnabled: Boolean,
    visible: Boolean,
    width: [Function, Number, String],
    wordWrapEnabled: Boolean
  },
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:accessKey": null,
    "update:activeStateEnabled": null,
    "update:allowColumnReordering": null,
    "update:allowColumnResizing": null,
    "update:autoNavigateToFocusedRow": null,
    "update:cacheEnabled": null,
    "update:cellHintEnabled": null,
    "update:columnAutoWidth": null,
    "update:columnChooser": null,
    "update:columnFixing": null,
    "update:columnHidingEnabled": null,
    "update:columnMinWidth": null,
    "update:columnResizingMode": null,
    "update:columns": null,
    "update:columnWidth": null,
    "update:customizeColumns": null,
    "update:dataRowTemplate": null,
    "update:dataSource": null,
    "update:dateSerializationFormat": null,
    "update:disabled": null,
    "update:editing": null,
    "update:elementAttr": null,
    "update:errorRowEnabled": null,
    "update:export": null,
    "update:filterBuilder": null,
    "update:filterBuilderPopup": null,
    "update:filterPanel": null,
    "update:filterRow": null,
    "update:filterSyncEnabled": null,
    "update:filterValue": null,
    "update:focusedColumnIndex": null,
    "update:focusedRowEnabled": null,
    "update:focusedRowIndex": null,
    "update:focusedRowKey": null,
    "update:grouping": null,
    "update:groupPanel": null,
    "update:headerFilter": null,
    "update:height": null,
    "update:highlightChanges": null,
    "update:hint": null,
    "update:hoverStateEnabled": null,
    "update:keyboardNavigation": null,
    "update:keyExpr": null,
    "update:loadPanel": null,
    "update:masterDetail": null,
    "update:noDataText": null,
    "update:onAdaptiveDetailRowPreparing": null,
    "update:onCellClick": null,
    "update:onCellDblClick": null,
    "update:onCellHoverChanged": null,
    "update:onCellPrepared": null,
    "update:onContentReady": null,
    "update:onContextMenuPreparing": null,
    "update:onDataErrorOccurred": null,
    "update:onDisposing": null,
    "update:onEditCanceled": null,
    "update:onEditCanceling": null,
    "update:onEditingStart": null,
    "update:onEditorPrepared": null,
    "update:onEditorPreparing": null,
    "update:onExporting": null,
    "update:onFocusedCellChanged": null,
    "update:onFocusedCellChanging": null,
    "update:onFocusedRowChanged": null,
    "update:onFocusedRowChanging": null,
    "update:onInitialized": null,
    "update:onInitNewRow": null,
    "update:onKeyDown": null,
    "update:onOptionChanged": null,
    "update:onRowClick": null,
    "update:onRowCollapsed": null,
    "update:onRowCollapsing": null,
    "update:onRowDblClick": null,
    "update:onRowExpanded": null,
    "update:onRowExpanding": null,
    "update:onRowInserted": null,
    "update:onRowInserting": null,
    "update:onRowPrepared": null,
    "update:onRowRemoved": null,
    "update:onRowRemoving": null,
    "update:onRowUpdated": null,
    "update:onRowUpdating": null,
    "update:onRowValidating": null,
    "update:onSaved": null,
    "update:onSaving": null,
    "update:onSelectionChanged": null,
    "update:onToolbarPreparing": null,
    "update:pager": null,
    "update:paging": null,
    "update:remoteOperations": null,
    "update:renderAsync": null,
    "update:repaintChangesOnly": null,
    "update:rowAlternationEnabled": null,
    "update:rowDragging": null,
    "update:rowTemplate": null,
    "update:rtlEnabled": null,
    "update:scrolling": null,
    "update:searchPanel": null,
    "update:selectedRowKeys": null,
    "update:selection": null,
    "update:selectionFilter": null,
    "update:showBorders": null,
    "update:showColumnHeaders": null,
    "update:showColumnLines": null,
    "update:showRowLines": null,
    "update:sortByGroupSummaryInfo": null,
    "update:sorting": null,
    "update:stateStoring": null,
    "update:summary": null,
    "update:syncLookupFilterValues": null,
    "update:tabIndex": null,
    "update:toolbar": null,
    "update:twoWayBindingEnabled": null,
    "update:visible": null,
    "update:width": null,
    "update:wordWrapEnabled": null
  },
  computed: {
    instance: function() {
      return this.$_instance;
    }
  },
  beforeCreate: function() {
    this.$_WidgetClass = data_grid_default;
    this.$_hasAsyncTemplate = false;
    this.$_expectedChildren = {
      column: { isCollectionItem: true, optionName: "columns" },
      columnChooser: { isCollectionItem: false, optionName: "columnChooser" },
      columnFixing: { isCollectionItem: false, optionName: "columnFixing" },
      dataGridHeaderFilter: { isCollectionItem: false, optionName: "headerFilter" },
      dataGridSelection: { isCollectionItem: false, optionName: "selection" },
      editing: { isCollectionItem: false, optionName: "editing" },
      export: { isCollectionItem: false, optionName: "export" },
      filterBuilder: { isCollectionItem: false, optionName: "filterBuilder" },
      filterBuilderPopup: { isCollectionItem: false, optionName: "filterBuilderPopup" },
      filterPanel: { isCollectionItem: false, optionName: "filterPanel" },
      filterRow: { isCollectionItem: false, optionName: "filterRow" },
      grouping: { isCollectionItem: false, optionName: "grouping" },
      groupPanel: { isCollectionItem: false, optionName: "groupPanel" },
      headerFilter: { isCollectionItem: false, optionName: "headerFilter" },
      keyboardNavigation: { isCollectionItem: false, optionName: "keyboardNavigation" },
      loadPanel: { isCollectionItem: false, optionName: "loadPanel" },
      masterDetail: { isCollectionItem: false, optionName: "masterDetail" },
      pager: { isCollectionItem: false, optionName: "pager" },
      paging: { isCollectionItem: false, optionName: "paging" },
      remoteOperations: { isCollectionItem: false, optionName: "remoteOperations" },
      rowDragging: { isCollectionItem: false, optionName: "rowDragging" },
      scrolling: { isCollectionItem: false, optionName: "scrolling" },
      searchPanel: { isCollectionItem: false, optionName: "searchPanel" },
      selection: { isCollectionItem: false, optionName: "selection" },
      sortByGroupSummaryInfo: { isCollectionItem: true, optionName: "sortByGroupSummaryInfo" },
      sorting: { isCollectionItem: false, optionName: "sorting" },
      stateStoring: { isCollectionItem: false, optionName: "stateStoring" },
      summary: { isCollectionItem: false, optionName: "summary" },
      toolbar: { isCollectionItem: false, optionName: "toolbar" }
    };
  }
});
var DxAnimation = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:hide": null,
    "update:show": null
  },
  props: {
    hide: [Object, Number, String],
    show: [Object, Number, String]
  }
});
DxAnimation.$_optionName = "animation";
DxAnimation.$_expectedChildren = {
  hide: { isCollectionItem: false, optionName: "hide" },
  show: { isCollectionItem: false, optionName: "show" }
};
var DxAsyncRule = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:ignoreEmptyValue": null,
    "update:message": null,
    "update:reevaluate": null,
    "update:type": null,
    "update:validationCallback": null
  },
  props: {
    ignoreEmptyValue: Boolean,
    message: String,
    reevaluate: Boolean,
    type: String,
    validationCallback: Function
  }
});
DxAsyncRule.$_optionName = "validationRules";
DxAsyncRule.$_isCollectionItem = true;
DxAsyncRule.$_predefinedProps = {
  type: "async"
};
var DxAt = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:x": null,
    "update:y": null
  },
  props: {
    x: String,
    y: String
  }
});
DxAt.$_optionName = "at";
var DxBoundaryOffset = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:x": null,
    "update:y": null
  },
  props: {
    x: Number,
    y: Number
  }
});
DxBoundaryOffset.$_optionName = "boundaryOffset";
var DxButton = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:cssClass": null,
    "update:disabled": null,
    "update:hint": null,
    "update:icon": null,
    "update:name": null,
    "update:onClick": null,
    "update:template": null,
    "update:text": null,
    "update:visible": null
  },
  props: {
    cssClass: String,
    disabled: [Boolean, Function],
    hint: String,
    icon: String,
    name: String,
    onClick: Function,
    template: {},
    text: String,
    visible: [Boolean, Function]
  }
});
DxButton.$_optionName = "buttons";
DxButton.$_isCollectionItem = true;
var DxChange = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:data": null,
    "update:insertAfterKey": null,
    "update:insertBeforeKey": null,
    "update:type": null
  },
  props: {
    data: {},
    insertAfterKey: {},
    insertBeforeKey: {},
    type: String
  }
});
DxChange.$_optionName = "changes";
DxChange.$_isCollectionItem = true;
var DxColCountByScreen = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:lg": null,
    "update:md": null,
    "update:sm": null,
    "update:xs": null
  },
  props: {
    lg: Number,
    md: Number,
    sm: Number,
    xs: Number
  }
});
DxColCountByScreen.$_optionName = "colCountByScreen";
var DxCollision = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:x": null,
    "update:y": null
  },
  props: {
    x: String,
    y: String
  }
});
DxCollision.$_optionName = "collision";
var DxColumn = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:alignment": null,
    "update:allowEditing": null,
    "update:allowExporting": null,
    "update:allowFiltering": null,
    "update:allowFixing": null,
    "update:allowGrouping": null,
    "update:allowHeaderFiltering": null,
    "update:allowHiding": null,
    "update:allowReordering": null,
    "update:allowResizing": null,
    "update:allowSearch": null,
    "update:allowSorting": null,
    "update:autoExpandGroup": null,
    "update:buttons": null,
    "update:calculateCellValue": null,
    "update:calculateDisplayValue": null,
    "update:calculateFilterExpression": null,
    "update:calculateGroupValue": null,
    "update:calculateSortValue": null,
    "update:caption": null,
    "update:cellTemplate": null,
    "update:columns": null,
    "update:cssClass": null,
    "update:customizeText": null,
    "update:dataField": null,
    "update:dataType": null,
    "update:editCellTemplate": null,
    "update:editorOptions": null,
    "update:encodeHtml": null,
    "update:falseText": null,
    "update:filterOperations": null,
    "update:filterType": null,
    "update:filterValue": null,
    "update:filterValues": null,
    "update:fixed": null,
    "update:fixedPosition": null,
    "update:format": null,
    "update:formItem": null,
    "update:groupCellTemplate": null,
    "update:groupIndex": null,
    "update:headerCellTemplate": null,
    "update:headerFilter": null,
    "update:hidingPriority": null,
    "update:isBand": null,
    "update:lookup": null,
    "update:minWidth": null,
    "update:name": null,
    "update:ownerBand": null,
    "update:renderAsync": null,
    "update:selectedFilterOperation": null,
    "update:setCellValue": null,
    "update:showEditorAlways": null,
    "update:showInColumnChooser": null,
    "update:showWhenGrouped": null,
    "update:sortIndex": null,
    "update:sortingMethod": null,
    "update:sortOrder": null,
    "update:trueText": null,
    "update:type": null,
    "update:validationRules": null,
    "update:visible": null,
    "update:visibleIndex": null,
    "update:width": null
  },
  props: {
    alignment: String,
    allowEditing: Boolean,
    allowExporting: Boolean,
    allowFiltering: Boolean,
    allowFixing: Boolean,
    allowGrouping: Boolean,
    allowHeaderFiltering: Boolean,
    allowHiding: Boolean,
    allowReordering: Boolean,
    allowResizing: Boolean,
    allowSearch: Boolean,
    allowSorting: Boolean,
    autoExpandGroup: Boolean,
    buttons: Array,
    calculateCellValue: Function,
    calculateDisplayValue: [Function, String],
    calculateFilterExpression: Function,
    calculateGroupValue: [Function, String],
    calculateSortValue: [Function, String],
    caption: String,
    cellTemplate: {},
    columns: Array,
    cssClass: String,
    customizeText: Function,
    dataField: String,
    dataType: String,
    editCellTemplate: {},
    editorOptions: {},
    encodeHtml: Boolean,
    falseText: String,
    filterOperations: Array,
    filterType: String,
    filterValue: {},
    filterValues: Array,
    fixed: Boolean,
    fixedPosition: String,
    format: [Object, Function, String],
    formItem: Object,
    groupCellTemplate: {},
    groupIndex: Number,
    headerCellTemplate: {},
    headerFilter: Object,
    hidingPriority: Number,
    isBand: Boolean,
    lookup: Object,
    minWidth: Number,
    name: String,
    ownerBand: Number,
    renderAsync: Boolean,
    selectedFilterOperation: String,
    setCellValue: Function,
    showEditorAlways: Boolean,
    showInColumnChooser: Boolean,
    showWhenGrouped: Boolean,
    sortIndex: Number,
    sortingMethod: Function,
    sortOrder: String,
    trueText: String,
    type: String,
    validationRules: Array,
    visible: Boolean,
    visibleIndex: Number,
    width: [Number, String]
  }
});
DxColumn.$_optionName = "columns";
DxColumn.$_isCollectionItem = true;
DxColumn.$_expectedChildren = {
  AsyncRule: { isCollectionItem: true, optionName: "validationRules" },
  button: { isCollectionItem: true, optionName: "buttons" },
  columnHeaderFilter: { isCollectionItem: false, optionName: "headerFilter" },
  columnLookup: { isCollectionItem: false, optionName: "lookup" },
  CompareRule: { isCollectionItem: true, optionName: "validationRules" },
  CustomRule: { isCollectionItem: true, optionName: "validationRules" },
  EmailRule: { isCollectionItem: true, optionName: "validationRules" },
  format: { isCollectionItem: false, optionName: "format" },
  formItem: { isCollectionItem: false, optionName: "formItem" },
  headerFilter: { isCollectionItem: false, optionName: "headerFilter" },
  lookup: { isCollectionItem: false, optionName: "lookup" },
  NumericRule: { isCollectionItem: true, optionName: "validationRules" },
  PatternRule: { isCollectionItem: true, optionName: "validationRules" },
  RangeRule: { isCollectionItem: true, optionName: "validationRules" },
  RequiredRule: { isCollectionItem: true, optionName: "validationRules" },
  StringLengthRule: { isCollectionItem: true, optionName: "validationRules" },
  validationRule: { isCollectionItem: true, optionName: "validationRules" }
};
var DxColumnChooser = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:allowSearch": null,
    "update:container": null,
    "update:emptyPanelText": null,
    "update:enabled": null,
    "update:height": null,
    "update:mode": null,
    "update:position": null,
    "update:search": null,
    "update:searchTimeout": null,
    "update:selection": null,
    "update:sortOrder": null,
    "update:title": null,
    "update:width": null
  },
  props: {
    allowSearch: Boolean,
    container: {},
    emptyPanelText: String,
    enabled: Boolean,
    height: Number,
    mode: String,
    position: Object,
    search: Object,
    searchTimeout: Number,
    selection: Object,
    sortOrder: String,
    title: String,
    width: Number
  }
});
DxColumnChooser.$_optionName = "columnChooser";
DxColumnChooser.$_expectedChildren = {
  columnChooserSearch: { isCollectionItem: false, optionName: "search" },
  columnChooserSelection: { isCollectionItem: false, optionName: "selection" },
  position: { isCollectionItem: false, optionName: "position" },
  search: { isCollectionItem: false, optionName: "search" },
  selection: { isCollectionItem: false, optionName: "selection" }
};
var DxColumnChooserSearch = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:editorOptions": null,
    "update:enabled": null,
    "update:timeout": null
  },
  props: {
    editorOptions: {},
    enabled: Boolean,
    timeout: Number
  }
});
DxColumnChooserSearch.$_optionName = "search";
var DxColumnChooserSelection = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:allowSelectAll": null,
    "update:recursive": null,
    "update:selectByClick": null
  },
  props: {
    allowSelectAll: Boolean,
    recursive: Boolean,
    selectByClick: Boolean
  }
});
DxColumnChooserSelection.$_optionName = "selection";
var DxColumnFixing = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:enabled": null,
    "update:texts": null
  },
  props: {
    enabled: Boolean,
    texts: Object
  }
});
DxColumnFixing.$_optionName = "columnFixing";
DxColumnFixing.$_expectedChildren = {
  columnFixingTexts: { isCollectionItem: false, optionName: "texts" },
  texts: { isCollectionItem: false, optionName: "texts" }
};
var DxColumnFixingTexts = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:fix": null,
    "update:leftPosition": null,
    "update:rightPosition": null,
    "update:unfix": null
  },
  props: {
    fix: String,
    leftPosition: String,
    rightPosition: String,
    unfix: String
  }
});
DxColumnFixingTexts.$_optionName = "texts";
var DxColumnHeaderFilter = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:allowSearch": null,
    "update:allowSelectAll": null,
    "update:dataSource": null,
    "update:groupInterval": null,
    "update:height": null,
    "update:search": null,
    "update:searchMode": null,
    "update:width": null
  },
  props: {
    allowSearch: Boolean,
    allowSelectAll: Boolean,
    dataSource: {},
    groupInterval: [Number, String],
    height: Number,
    search: Object,
    searchMode: String,
    width: Number
  }
});
DxColumnHeaderFilter.$_optionName = "headerFilter";
DxColumnHeaderFilter.$_expectedChildren = {
  columnHeaderFilterSearch: { isCollectionItem: false, optionName: "search" },
  search: { isCollectionItem: false, optionName: "search" }
};
var DxColumnHeaderFilterSearch = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:editorOptions": null,
    "update:enabled": null,
    "update:mode": null,
    "update:searchExpr": null,
    "update:timeout": null
  },
  props: {
    editorOptions: {},
    enabled: Boolean,
    mode: String,
    searchExpr: [Array, Function, String],
    timeout: Number
  }
});
DxColumnHeaderFilterSearch.$_optionName = "search";
var DxColumnLookup = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:allowClearing": null,
    "update:calculateCellValue": null,
    "update:dataSource": null,
    "update:displayExpr": null,
    "update:valueExpr": null
  },
  props: {
    allowClearing: Boolean,
    calculateCellValue: Function,
    dataSource: {},
    displayExpr: [Function, String],
    valueExpr: String
  }
});
DxColumnLookup.$_optionName = "lookup";
var DxCompareRule = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:comparisonTarget": null,
    "update:comparisonType": null,
    "update:ignoreEmptyValue": null,
    "update:message": null,
    "update:type": null
  },
  props: {
    comparisonTarget: Function,
    comparisonType: String,
    ignoreEmptyValue: Boolean,
    message: String,
    type: String
  }
});
DxCompareRule.$_optionName = "validationRules";
DxCompareRule.$_isCollectionItem = true;
DxCompareRule.$_predefinedProps = {
  type: "compare"
};
var DxCursorOffset = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:x": null,
    "update:y": null
  },
  props: {
    x: Number,
    y: Number
  }
});
DxCursorOffset.$_optionName = "cursorOffset";
var DxCustomOperation = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:calculateFilterExpression": null,
    "update:caption": null,
    "update:customizeText": null,
    "update:dataTypes": null,
    "update:editorTemplate": null,
    "update:hasValue": null,
    "update:icon": null,
    "update:name": null
  },
  props: {
    calculateFilterExpression: Function,
    caption: String,
    customizeText: Function,
    dataTypes: Array,
    editorTemplate: {},
    hasValue: Boolean,
    icon: String,
    name: String
  }
});
DxCustomOperation.$_optionName = "customOperations";
DxCustomOperation.$_isCollectionItem = true;
var DxCustomRule = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:ignoreEmptyValue": null,
    "update:message": null,
    "update:reevaluate": null,
    "update:type": null,
    "update:validationCallback": null
  },
  props: {
    ignoreEmptyValue: Boolean,
    message: String,
    reevaluate: Boolean,
    type: String,
    validationCallback: Function
  }
});
DxCustomRule.$_optionName = "validationRules";
DxCustomRule.$_isCollectionItem = true;
DxCustomRule.$_predefinedProps = {
  type: "custom"
};
var DxDataGridHeaderFilter = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:allowSearch": null,
    "update:allowSelectAll": null,
    "update:height": null,
    "update:search": null,
    "update:searchTimeout": null,
    "update:texts": null,
    "update:visible": null,
    "update:width": null
  },
  props: {
    allowSearch: Boolean,
    allowSelectAll: Boolean,
    height: Number,
    search: Object,
    searchTimeout: Number,
    texts: Object,
    visible: Boolean,
    width: Number
  }
});
DxDataGridHeaderFilter.$_optionName = "headerFilter";
DxDataGridHeaderFilter.$_expectedChildren = {
  dataGridHeaderFilterSearch: { isCollectionItem: false, optionName: "search" },
  dataGridHeaderFilterTexts: { isCollectionItem: false, optionName: "texts" },
  search: { isCollectionItem: false, optionName: "search" },
  texts: { isCollectionItem: false, optionName: "texts" }
};
var DxDataGridHeaderFilterSearch = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:editorOptions": null,
    "update:enabled": null,
    "update:mode": null,
    "update:timeout": null
  },
  props: {
    editorOptions: {},
    enabled: Boolean,
    mode: String,
    timeout: Number
  }
});
DxDataGridHeaderFilterSearch.$_optionName = "search";
var DxDataGridHeaderFilterTexts = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:cancel": null,
    "update:emptyValue": null,
    "update:ok": null
  },
  props: {
    cancel: String,
    emptyValue: String,
    ok: String
  }
});
DxDataGridHeaderFilterTexts.$_optionName = "texts";
var DxDataGridSelection = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:allowSelectAll": null,
    "update:deferred": null,
    "update:mode": null,
    "update:selectAllMode": null,
    "update:showCheckBoxesMode": null
  },
  props: {
    allowSelectAll: Boolean,
    deferred: Boolean,
    mode: String,
    selectAllMode: String,
    showCheckBoxesMode: String
  }
});
DxDataGridSelection.$_optionName = "selection";
var DxEditing = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:allowAdding": null,
    "update:allowDeleting": null,
    "update:allowUpdating": null,
    "update:changes": null,
    "update:confirmDelete": null,
    "update:editColumnName": null,
    "update:editRowKey": null,
    "update:form": null,
    "update:mode": null,
    "update:newRowPosition": null,
    "update:popup": null,
    "update:refreshMode": null,
    "update:selectTextOnEditStart": null,
    "update:startEditAction": null,
    "update:texts": null,
    "update:useIcons": null
  },
  props: {
    allowAdding: Boolean,
    allowDeleting: [Boolean, Function],
    allowUpdating: [Boolean, Function],
    changes: Array,
    confirmDelete: Boolean,
    editColumnName: String,
    editRowKey: {},
    form: Object,
    mode: String,
    newRowPosition: String,
    popup: Object,
    refreshMode: String,
    selectTextOnEditStart: Boolean,
    startEditAction: String,
    texts: {},
    useIcons: Boolean
  }
});
DxEditing.$_optionName = "editing";
DxEditing.$_expectedChildren = {
  change: { isCollectionItem: true, optionName: "changes" },
  editingTexts: { isCollectionItem: false, optionName: "texts" },
  form: { isCollectionItem: false, optionName: "form" },
  popup: { isCollectionItem: false, optionName: "popup" },
  texts: { isCollectionItem: false, optionName: "texts" }
};
var DxEditingTexts = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:addRow": null,
    "update:cancelAllChanges": null,
    "update:cancelRowChanges": null,
    "update:confirmDeleteMessage": null,
    "update:confirmDeleteTitle": null,
    "update:deleteRow": null,
    "update:editRow": null,
    "update:saveAllChanges": null,
    "update:saveRowChanges": null,
    "update:undeleteRow": null,
    "update:validationCancelChanges": null
  },
  props: {
    addRow: String,
    cancelAllChanges: String,
    cancelRowChanges: String,
    confirmDeleteMessage: String,
    confirmDeleteTitle: String,
    deleteRow: String,
    editRow: String,
    saveAllChanges: String,
    saveRowChanges: String,
    undeleteRow: String,
    validationCancelChanges: String
  }
});
DxEditingTexts.$_optionName = "texts";
var DxEmailRule = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:ignoreEmptyValue": null,
    "update:message": null,
    "update:type": null
  },
  props: {
    ignoreEmptyValue: Boolean,
    message: String,
    type: String
  }
});
DxEmailRule.$_optionName = "validationRules";
DxEmailRule.$_isCollectionItem = true;
DxEmailRule.$_predefinedProps = {
  type: "email"
};
var DxExport = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:allowExportSelectedData": null,
    "update:enabled": null,
    "update:formats": null,
    "update:texts": null
  },
  props: {
    allowExportSelectedData: Boolean,
    enabled: Boolean,
    formats: Array,
    texts: Object
  }
});
DxExport.$_optionName = "export";
DxExport.$_expectedChildren = {
  exportTexts: { isCollectionItem: false, optionName: "texts" },
  texts: { isCollectionItem: false, optionName: "texts" }
};
var DxExportTexts = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:exportAll": null,
    "update:exportSelectedRows": null,
    "update:exportTo": null
  },
  props: {
    exportAll: String,
    exportSelectedRows: String,
    exportTo: String
  }
});
DxExportTexts.$_optionName = "texts";
var DxField = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:calculateFilterExpression": null,
    "update:caption": null,
    "update:customizeText": null,
    "update:dataField": null,
    "update:dataType": null,
    "update:editorOptions": null,
    "update:editorTemplate": null,
    "update:falseText": null,
    "update:filterOperations": null,
    "update:format": null,
    "update:lookup": null,
    "update:name": null,
    "update:trueText": null
  },
  props: {
    calculateFilterExpression: Function,
    caption: String,
    customizeText: Function,
    dataField: String,
    dataType: String,
    editorOptions: {},
    editorTemplate: {},
    falseText: String,
    filterOperations: Array,
    format: [Object, Function, String],
    lookup: Object,
    name: String,
    trueText: String
  }
});
DxField.$_optionName = "fields";
DxField.$_isCollectionItem = true;
DxField.$_expectedChildren = {
  fieldLookup: { isCollectionItem: false, optionName: "lookup" },
  format: { isCollectionItem: false, optionName: "format" },
  lookup: { isCollectionItem: false, optionName: "lookup" }
};
var DxFieldLookup = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:allowClearing": null,
    "update:dataSource": null,
    "update:displayExpr": null,
    "update:valueExpr": null
  },
  props: {
    allowClearing: Boolean,
    dataSource: [Array, Object],
    displayExpr: [Function, String],
    valueExpr: [Function, String]
  }
});
DxFieldLookup.$_optionName = "lookup";
var DxFilterBuilder = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:accessKey": null,
    "update:activeStateEnabled": null,
    "update:allowHierarchicalFields": null,
    "update:bindingOptions": null,
    "update:customOperations": null,
    "update:disabled": null,
    "update:elementAttr": null,
    "update:fields": null,
    "update:filterOperationDescriptions": null,
    "update:focusStateEnabled": null,
    "update:groupOperationDescriptions": null,
    "update:groupOperations": null,
    "update:height": null,
    "update:hint": null,
    "update:hoverStateEnabled": null,
    "update:maxGroupLevel": null,
    "update:onContentReady": null,
    "update:onDisposing": null,
    "update:onEditorPrepared": null,
    "update:onEditorPreparing": null,
    "update:onInitialized": null,
    "update:onOptionChanged": null,
    "update:onValueChanged": null,
    "update:rtlEnabled": null,
    "update:tabIndex": null,
    "update:value": null,
    "update:visible": null,
    "update:width": null
  },
  props: {
    accessKey: String,
    activeStateEnabled: Boolean,
    allowHierarchicalFields: Boolean,
    bindingOptions: Object,
    customOperations: Array,
    disabled: Boolean,
    elementAttr: Object,
    fields: Array,
    filterOperationDescriptions: Object,
    focusStateEnabled: Boolean,
    groupOperationDescriptions: Object,
    groupOperations: Array,
    height: [Function, Number, String],
    hint: String,
    hoverStateEnabled: Boolean,
    maxGroupLevel: Number,
    onContentReady: Function,
    onDisposing: Function,
    onEditorPrepared: Function,
    onEditorPreparing: Function,
    onInitialized: Function,
    onOptionChanged: Function,
    onValueChanged: Function,
    rtlEnabled: Boolean,
    tabIndex: Number,
    value: [Array, Function, String],
    visible: Boolean,
    width: [Function, Number, String]
  }
});
DxFilterBuilder.$_optionName = "filterBuilder";
DxFilterBuilder.$_expectedChildren = {
  customOperation: { isCollectionItem: true, optionName: "customOperations" },
  field: { isCollectionItem: true, optionName: "fields" },
  filterOperationDescriptions: { isCollectionItem: false, optionName: "filterOperationDescriptions" },
  groupOperationDescriptions: { isCollectionItem: false, optionName: "groupOperationDescriptions" }
};
var DxFilterBuilderPopup = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:accessKey": null,
    "update:animation": null,
    "update:bindingOptions": null,
    "update:closeOnOutsideClick": null,
    "update:container": null,
    "update:contentTemplate": null,
    "update:copyRootClassesToWrapper": null,
    "update:deferRendering": null,
    "update:disabled": null,
    "update:dragAndResizeArea": null,
    "update:dragEnabled": null,
    "update:dragOutsideBoundary": null,
    "update:elementAttr": null,
    "update:enableBodyScroll": null,
    "update:focusStateEnabled": null,
    "update:fullScreen": null,
    "update:height": null,
    "update:hideOnOutsideClick": null,
    "update:hideOnParentScroll": null,
    "update:hint": null,
    "update:hoverStateEnabled": null,
    "update:maxHeight": null,
    "update:maxWidth": null,
    "update:minHeight": null,
    "update:minWidth": null,
    "update:onContentReady": null,
    "update:onDisposing": null,
    "update:onHidden": null,
    "update:onHiding": null,
    "update:onInitialized": null,
    "update:onOptionChanged": null,
    "update:onResize": null,
    "update:onResizeEnd": null,
    "update:onResizeStart": null,
    "update:onShowing": null,
    "update:onShown": null,
    "update:onTitleRendered": null,
    "update:position": null,
    "update:resizeEnabled": null,
    "update:restorePosition": null,
    "update:rtlEnabled": null,
    "update:shading": null,
    "update:shadingColor": null,
    "update:showCloseButton": null,
    "update:showTitle": null,
    "update:tabIndex": null,
    "update:title": null,
    "update:titleTemplate": null,
    "update:toolbarItems": null,
    "update:visible": null,
    "update:width": null,
    "update:wrapperAttr": null
  },
  props: {
    accessKey: String,
    animation: Object,
    bindingOptions: Object,
    closeOnOutsideClick: [Boolean, Function],
    container: {},
    contentTemplate: {},
    copyRootClassesToWrapper: Boolean,
    deferRendering: Boolean,
    disabled: Boolean,
    dragAndResizeArea: {},
    dragEnabled: Boolean,
    dragOutsideBoundary: Boolean,
    elementAttr: {},
    enableBodyScroll: Boolean,
    focusStateEnabled: Boolean,
    fullScreen: Boolean,
    height: [Function, Number, String],
    hideOnOutsideClick: [Boolean, Function],
    hideOnParentScroll: Boolean,
    hint: String,
    hoverStateEnabled: Boolean,
    maxHeight: [Function, Number, String],
    maxWidth: [Function, Number, String],
    minHeight: [Function, Number, String],
    minWidth: [Function, Number, String],
    onContentReady: Function,
    onDisposing: Function,
    onHidden: Function,
    onHiding: Function,
    onInitialized: Function,
    onOptionChanged: Function,
    onResize: Function,
    onResizeEnd: Function,
    onResizeStart: Function,
    onShowing: Function,
    onShown: Function,
    onTitleRendered: Function,
    position: [Function, Object, String],
    resizeEnabled: Boolean,
    restorePosition: Boolean,
    rtlEnabled: Boolean,
    shading: Boolean,
    shadingColor: String,
    showCloseButton: Boolean,
    showTitle: Boolean,
    tabIndex: Number,
    title: String,
    titleTemplate: {},
    toolbarItems: Array,
    visible: Boolean,
    width: [Function, Number, String],
    wrapperAttr: {}
  }
});
DxFilterBuilderPopup.$_optionName = "filterBuilderPopup";
var DxFilterOperationDescriptions = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:between": null,
    "update:contains": null,
    "update:endsWith": null,
    "update:equal": null,
    "update:greaterThan": null,
    "update:greaterThanOrEqual": null,
    "update:isBlank": null,
    "update:isNotBlank": null,
    "update:lessThan": null,
    "update:lessThanOrEqual": null,
    "update:notContains": null,
    "update:notEqual": null,
    "update:startsWith": null
  },
  props: {
    between: String,
    contains: String,
    endsWith: String,
    equal: String,
    greaterThan: String,
    greaterThanOrEqual: String,
    isBlank: String,
    isNotBlank: String,
    lessThan: String,
    lessThanOrEqual: String,
    notContains: String,
    notEqual: String,
    startsWith: String
  }
});
DxFilterOperationDescriptions.$_optionName = "filterOperationDescriptions";
var DxFilterPanel = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:customizeText": null,
    "update:filterEnabled": null,
    "update:texts": null,
    "update:visible": null
  },
  props: {
    customizeText: Function,
    filterEnabled: Boolean,
    texts: Object,
    visible: Boolean
  }
});
DxFilterPanel.$_optionName = "filterPanel";
DxFilterPanel.$_expectedChildren = {
  filterPanelTexts: { isCollectionItem: false, optionName: "texts" },
  texts: { isCollectionItem: false, optionName: "texts" }
};
var DxFilterPanelTexts = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:clearFilter": null,
    "update:createFilter": null,
    "update:filterEnabledHint": null
  },
  props: {
    clearFilter: String,
    createFilter: String,
    filterEnabledHint: String
  }
});
DxFilterPanelTexts.$_optionName = "texts";
var DxFilterRow = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:applyFilter": null,
    "update:applyFilterText": null,
    "update:betweenEndText": null,
    "update:betweenStartText": null,
    "update:operationDescriptions": null,
    "update:resetOperationText": null,
    "update:showAllText": null,
    "update:showOperationChooser": null,
    "update:visible": null
  },
  props: {
    applyFilter: String,
    applyFilterText: String,
    betweenEndText: String,
    betweenStartText: String,
    operationDescriptions: Object,
    resetOperationText: String,
    showAllText: String,
    showOperationChooser: Boolean,
    visible: Boolean
  }
});
DxFilterRow.$_optionName = "filterRow";
DxFilterRow.$_expectedChildren = {
  operationDescriptions: { isCollectionItem: false, optionName: "operationDescriptions" }
};
var DxForm = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:accessKey": null,
    "update:activeStateEnabled": null,
    "update:alignItemLabels": null,
    "update:alignItemLabelsInAllGroups": null,
    "update:bindingOptions": null,
    "update:colCount": null,
    "update:colCountByScreen": null,
    "update:customizeItem": null,
    "update:disabled": null,
    "update:elementAttr": null,
    "update:focusStateEnabled": null,
    "update:formData": null,
    "update:height": null,
    "update:hint": null,
    "update:hoverStateEnabled": null,
    "update:isDirty": null,
    "update:items": null,
    "update:labelLocation": null,
    "update:labelMode": null,
    "update:minColWidth": null,
    "update:onContentReady": null,
    "update:onDisposing": null,
    "update:onEditorEnterKey": null,
    "update:onFieldDataChanged": null,
    "update:onInitialized": null,
    "update:onOptionChanged": null,
    "update:optionalMark": null,
    "update:readOnly": null,
    "update:requiredMark": null,
    "update:requiredMessage": null,
    "update:rtlEnabled": null,
    "update:screenByWidth": null,
    "update:scrollingEnabled": null,
    "update:showColonAfterLabel": null,
    "update:showOptionalMark": null,
    "update:showRequiredMark": null,
    "update:showValidationSummary": null,
    "update:tabIndex": null,
    "update:validationGroup": null,
    "update:visible": null,
    "update:width": null
  },
  props: {
    accessKey: String,
    activeStateEnabled: Boolean,
    alignItemLabels: Boolean,
    alignItemLabelsInAllGroups: Boolean,
    bindingOptions: Object,
    colCount: [Number, String],
    colCountByScreen: Object,
    customizeItem: Function,
    disabled: Boolean,
    elementAttr: Object,
    focusStateEnabled: Boolean,
    formData: {},
    height: [Function, Number, String],
    hint: String,
    hoverStateEnabled: Boolean,
    isDirty: Boolean,
    items: Array,
    labelLocation: String,
    labelMode: String,
    minColWidth: Number,
    onContentReady: Function,
    onDisposing: Function,
    onEditorEnterKey: Function,
    onFieldDataChanged: Function,
    onInitialized: Function,
    onOptionChanged: Function,
    optionalMark: String,
    readOnly: Boolean,
    requiredMark: String,
    requiredMessage: String,
    rtlEnabled: Boolean,
    screenByWidth: Function,
    scrollingEnabled: Boolean,
    showColonAfterLabel: Boolean,
    showOptionalMark: Boolean,
    showRequiredMark: Boolean,
    showValidationSummary: Boolean,
    tabIndex: Number,
    validationGroup: String,
    visible: Boolean,
    width: [Function, Number, String]
  }
});
DxForm.$_optionName = "form";
DxForm.$_expectedChildren = {
  colCountByScreen: { isCollectionItem: false, optionName: "colCountByScreen" }
};
var DxFormat = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:currency": null,
    "update:formatter": null,
    "update:parser": null,
    "update:precision": null,
    "update:type": null,
    "update:useCurrencyAccountingStyle": null
  },
  props: {
    currency: String,
    formatter: Function,
    parser: Function,
    precision: Number,
    type: String,
    useCurrencyAccountingStyle: Boolean
  }
});
DxFormat.$_optionName = "format";
var DxFormItem = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:colSpan": null,
    "update:cssClass": null,
    "update:dataField": null,
    "update:editorOptions": null,
    "update:editorType": null,
    "update:helpText": null,
    "update:isRequired": null,
    "update:itemType": null,
    "update:label": null,
    "update:name": null,
    "update:template": null,
    "update:validationRules": null,
    "update:visible": null,
    "update:visibleIndex": null
  },
  props: {
    colSpan: Number,
    cssClass: String,
    dataField: String,
    editorOptions: {},
    editorType: String,
    helpText: String,
    isRequired: Boolean,
    itemType: String,
    label: Object,
    name: String,
    template: {},
    validationRules: Array,
    visible: Boolean,
    visibleIndex: Number
  }
});
DxFormItem.$_optionName = "formItem";
DxFormItem.$_expectedChildren = {
  AsyncRule: { isCollectionItem: true, optionName: "validationRules" },
  CompareRule: { isCollectionItem: true, optionName: "validationRules" },
  CustomRule: { isCollectionItem: true, optionName: "validationRules" },
  EmailRule: { isCollectionItem: true, optionName: "validationRules" },
  label: { isCollectionItem: false, optionName: "label" },
  NumericRule: { isCollectionItem: true, optionName: "validationRules" },
  PatternRule: { isCollectionItem: true, optionName: "validationRules" },
  RangeRule: { isCollectionItem: true, optionName: "validationRules" },
  RequiredRule: { isCollectionItem: true, optionName: "validationRules" },
  StringLengthRule: { isCollectionItem: true, optionName: "validationRules" },
  validationRule: { isCollectionItem: true, optionName: "validationRules" }
};
var DxFrom = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:left": null,
    "update:opacity": null,
    "update:position": null,
    "update:scale": null,
    "update:top": null
  },
  props: {
    left: Number,
    opacity: Number,
    position: Object,
    scale: Number,
    top: Number
  }
});
DxFrom.$_optionName = "from";
DxFrom.$_expectedChildren = {
  position: { isCollectionItem: false, optionName: "position" }
};
var DxGrouping = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:allowCollapsing": null,
    "update:autoExpandAll": null,
    "update:contextMenuEnabled": null,
    "update:expandMode": null,
    "update:texts": null
  },
  props: {
    allowCollapsing: Boolean,
    autoExpandAll: Boolean,
    contextMenuEnabled: Boolean,
    expandMode: String,
    texts: Object
  }
});
DxGrouping.$_optionName = "grouping";
DxGrouping.$_expectedChildren = {
  groupingTexts: { isCollectionItem: false, optionName: "texts" },
  texts: { isCollectionItem: false, optionName: "texts" }
};
var DxGroupingTexts = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:groupByThisColumn": null,
    "update:groupContinuedMessage": null,
    "update:groupContinuesMessage": null,
    "update:ungroup": null,
    "update:ungroupAll": null
  },
  props: {
    groupByThisColumn: String,
    groupContinuedMessage: String,
    groupContinuesMessage: String,
    ungroup: String,
    ungroupAll: String
  }
});
DxGroupingTexts.$_optionName = "texts";
var DxGroupItem = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:alignByColumn": null,
    "update:column": null,
    "update:customizeText": null,
    "update:displayFormat": null,
    "update:name": null,
    "update:showInColumn": null,
    "update:showInGroupFooter": null,
    "update:skipEmptyValues": null,
    "update:summaryType": null,
    "update:valueFormat": null
  },
  props: {
    alignByColumn: Boolean,
    column: String,
    customizeText: Function,
    displayFormat: String,
    name: String,
    showInColumn: String,
    showInGroupFooter: Boolean,
    skipEmptyValues: Boolean,
    summaryType: String,
    valueFormat: [Object, Function, String]
  }
});
DxGroupItem.$_optionName = "groupItems";
DxGroupItem.$_isCollectionItem = true;
DxGroupItem.$_expectedChildren = {
  valueFormat: { isCollectionItem: false, optionName: "valueFormat" }
};
var DxGroupOperationDescriptions = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:and": null,
    "update:notAnd": null,
    "update:notOr": null,
    "update:or": null
  },
  props: {
    and: String,
    notAnd: String,
    notOr: String,
    or: String
  }
});
DxGroupOperationDescriptions.$_optionName = "groupOperationDescriptions";
var DxGroupPanel = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:allowColumnDragging": null,
    "update:emptyPanelText": null,
    "update:visible": null
  },
  props: {
    allowColumnDragging: Boolean,
    emptyPanelText: String,
    visible: [Boolean, String]
  }
});
DxGroupPanel.$_optionName = "groupPanel";
var DxHeaderFilter = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:allowSearch": null,
    "update:allowSelectAll": null,
    "update:dataSource": null,
    "update:groupInterval": null,
    "update:height": null,
    "update:search": null,
    "update:searchMode": null,
    "update:searchTimeout": null,
    "update:texts": null,
    "update:visible": null,
    "update:width": null
  },
  props: {
    allowSearch: Boolean,
    allowSelectAll: Boolean,
    dataSource: {},
    groupInterval: [Number, String],
    height: Number,
    search: Object,
    searchMode: String,
    searchTimeout: Number,
    texts: Object,
    visible: Boolean,
    width: Number
  }
});
DxHeaderFilter.$_optionName = "headerFilter";
var DxHide = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:complete": null,
    "update:delay": null,
    "update:direction": null,
    "update:duration": null,
    "update:easing": null,
    "update:from": null,
    "update:staggerDelay": null,
    "update:start": null,
    "update:to": null,
    "update:type": null
  },
  props: {
    complete: Function,
    delay: Number,
    direction: String,
    duration: Number,
    easing: String,
    from: Object,
    staggerDelay: Number,
    start: Function,
    to: Object,
    type: String
  }
});
DxHide.$_optionName = "hide";
DxHide.$_expectedChildren = {
  from: { isCollectionItem: false, optionName: "from" },
  to: { isCollectionItem: false, optionName: "to" }
};
var DxItem = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:cssClass": null,
    "update:disabled": null,
    "update:html": null,
    "update:locateInMenu": null,
    "update:location": null,
    "update:menuItemTemplate": null,
    "update:name": null,
    "update:options": null,
    "update:showText": null,
    "update:template": null,
    "update:text": null,
    "update:visible": null,
    "update:widget": null
  },
  props: {
    cssClass: String,
    disabled: Boolean,
    html: String,
    locateInMenu: String,
    location: String,
    menuItemTemplate: {},
    name: String,
    options: {},
    showText: String,
    template: {},
    text: String,
    visible: Boolean,
    widget: String
  }
});
DxItem.$_optionName = "items";
DxItem.$_isCollectionItem = true;
var DxKeyboardNavigation = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:editOnKeyPress": null,
    "update:enabled": null,
    "update:enterKeyAction": null,
    "update:enterKeyDirection": null
  },
  props: {
    editOnKeyPress: Boolean,
    enabled: Boolean,
    enterKeyAction: String,
    enterKeyDirection: String
  }
});
DxKeyboardNavigation.$_optionName = "keyboardNavigation";
var DxLabel = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:alignment": null,
    "update:location": null,
    "update:showColon": null,
    "update:template": null,
    "update:text": null,
    "update:visible": null
  },
  props: {
    alignment: String,
    location: String,
    showColon: Boolean,
    template: {},
    text: String,
    visible: Boolean
  }
});
DxLabel.$_optionName = "label";
var DxLoadPanel = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:enabled": null,
    "update:height": null,
    "update:indicatorSrc": null,
    "update:shading": null,
    "update:shadingColor": null,
    "update:showIndicator": null,
    "update:showPane": null,
    "update:text": null,
    "update:width": null
  },
  props: {
    enabled: [Boolean, String],
    height: Number,
    indicatorSrc: String,
    shading: Boolean,
    shadingColor: String,
    showIndicator: Boolean,
    showPane: Boolean,
    text: String,
    width: Number
  }
});
DxLoadPanel.$_optionName = "loadPanel";
var DxLookup = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:allowClearing": null,
    "update:calculateCellValue": null,
    "update:dataSource": null,
    "update:displayExpr": null,
    "update:valueExpr": null
  },
  props: {
    allowClearing: Boolean,
    calculateCellValue: Function,
    dataSource: {},
    displayExpr: [Function, String],
    valueExpr: [String, Function]
  }
});
DxLookup.$_optionName = "lookup";
var DxMasterDetail = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:autoExpandAll": null,
    "update:enabled": null,
    "update:template": null
  },
  props: {
    autoExpandAll: Boolean,
    enabled: Boolean,
    template: {}
  }
});
DxMasterDetail.$_optionName = "masterDetail";
var DxMy = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:x": null,
    "update:y": null
  },
  props: {
    x: String,
    y: String
  }
});
DxMy.$_optionName = "my";
var DxNumericRule = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:ignoreEmptyValue": null,
    "update:message": null,
    "update:type": null
  },
  props: {
    ignoreEmptyValue: Boolean,
    message: String,
    type: String
  }
});
DxNumericRule.$_optionName = "validationRules";
DxNumericRule.$_isCollectionItem = true;
DxNumericRule.$_predefinedProps = {
  type: "numeric"
};
var DxOffset = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:x": null,
    "update:y": null
  },
  props: {
    x: Number,
    y: Number
  }
});
DxOffset.$_optionName = "offset";
var DxOperationDescriptions = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:between": null,
    "update:contains": null,
    "update:endsWith": null,
    "update:equal": null,
    "update:greaterThan": null,
    "update:greaterThanOrEqual": null,
    "update:lessThan": null,
    "update:lessThanOrEqual": null,
    "update:notContains": null,
    "update:notEqual": null,
    "update:startsWith": null
  },
  props: {
    between: String,
    contains: String,
    endsWith: String,
    equal: String,
    greaterThan: String,
    greaterThanOrEqual: String,
    lessThan: String,
    lessThanOrEqual: String,
    notContains: String,
    notEqual: String,
    startsWith: String
  }
});
DxOperationDescriptions.$_optionName = "operationDescriptions";
var DxPager = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:allowedPageSizes": null,
    "update:displayMode": null,
    "update:infoText": null,
    "update:label": null,
    "update:showInfo": null,
    "update:showNavigationButtons": null,
    "update:showPageSizeSelector": null,
    "update:visible": null
  },
  props: {
    allowedPageSizes: [Array, String],
    displayMode: String,
    infoText: String,
    label: String,
    showInfo: Boolean,
    showNavigationButtons: Boolean,
    showPageSizeSelector: Boolean,
    visible: [Boolean, String]
  }
});
DxPager.$_optionName = "pager";
var DxPaging = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:enabled": null,
    "update:pageIndex": null,
    "update:pageSize": null
  },
  props: {
    enabled: Boolean,
    pageIndex: Number,
    pageSize: Number
  }
});
DxPaging.$_optionName = "paging";
var DxPatternRule = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:ignoreEmptyValue": null,
    "update:message": null,
    "update:pattern": null,
    "update:type": null
  },
  props: {
    ignoreEmptyValue: Boolean,
    message: String,
    pattern: [RegExp, String],
    type: String
  }
});
DxPatternRule.$_optionName = "validationRules";
DxPatternRule.$_isCollectionItem = true;
DxPatternRule.$_predefinedProps = {
  type: "pattern"
};
var DxPopup = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:accessKey": null,
    "update:animation": null,
    "update:bindingOptions": null,
    "update:closeOnOutsideClick": null,
    "update:container": null,
    "update:contentTemplate": null,
    "update:copyRootClassesToWrapper": null,
    "update:deferRendering": null,
    "update:disabled": null,
    "update:dragAndResizeArea": null,
    "update:dragEnabled": null,
    "update:dragOutsideBoundary": null,
    "update:elementAttr": null,
    "update:enableBodyScroll": null,
    "update:focusStateEnabled": null,
    "update:fullScreen": null,
    "update:height": null,
    "update:hideOnOutsideClick": null,
    "update:hideOnParentScroll": null,
    "update:hint": null,
    "update:hoverStateEnabled": null,
    "update:maxHeight": null,
    "update:maxWidth": null,
    "update:minHeight": null,
    "update:minWidth": null,
    "update:onContentReady": null,
    "update:onDisposing": null,
    "update:onHidden": null,
    "update:onHiding": null,
    "update:onInitialized": null,
    "update:onOptionChanged": null,
    "update:onResize": null,
    "update:onResizeEnd": null,
    "update:onResizeStart": null,
    "update:onShowing": null,
    "update:onShown": null,
    "update:onTitleRendered": null,
    "update:position": null,
    "update:resizeEnabled": null,
    "update:restorePosition": null,
    "update:rtlEnabled": null,
    "update:shading": null,
    "update:shadingColor": null,
    "update:showCloseButton": null,
    "update:showTitle": null,
    "update:tabIndex": null,
    "update:title": null,
    "update:titleTemplate": null,
    "update:toolbarItems": null,
    "update:visible": null,
    "update:width": null,
    "update:wrapperAttr": null
  },
  props: {
    accessKey: String,
    animation: Object,
    bindingOptions: Object,
    closeOnOutsideClick: [Boolean, Function],
    container: {},
    contentTemplate: {},
    copyRootClassesToWrapper: Boolean,
    deferRendering: Boolean,
    disabled: Boolean,
    dragAndResizeArea: {},
    dragEnabled: Boolean,
    dragOutsideBoundary: Boolean,
    elementAttr: {},
    enableBodyScroll: Boolean,
    focusStateEnabled: Boolean,
    fullScreen: Boolean,
    height: [Function, Number, String],
    hideOnOutsideClick: [Boolean, Function],
    hideOnParentScroll: Boolean,
    hint: String,
    hoverStateEnabled: Boolean,
    maxHeight: [Function, Number, String],
    maxWidth: [Function, Number, String],
    minHeight: [Function, Number, String],
    minWidth: [Function, Number, String],
    onContentReady: Function,
    onDisposing: Function,
    onHidden: Function,
    onHiding: Function,
    onInitialized: Function,
    onOptionChanged: Function,
    onResize: Function,
    onResizeEnd: Function,
    onResizeStart: Function,
    onShowing: Function,
    onShown: Function,
    onTitleRendered: Function,
    position: [Function, Object, String],
    resizeEnabled: Boolean,
    restorePosition: Boolean,
    rtlEnabled: Boolean,
    shading: Boolean,
    shadingColor: String,
    showCloseButton: Boolean,
    showTitle: Boolean,
    tabIndex: Number,
    title: String,
    titleTemplate: {},
    toolbarItems: Array,
    visible: Boolean,
    width: [Function, Number, String],
    wrapperAttr: {}
  }
});
DxPopup.$_optionName = "popup";
DxPopup.$_expectedChildren = {
  animation: { isCollectionItem: false, optionName: "animation" },
  position: { isCollectionItem: false, optionName: "position" },
  toolbarItem: { isCollectionItem: true, optionName: "toolbarItems" }
};
var DxPosition = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:at": null,
    "update:boundary": null,
    "update:boundaryOffset": null,
    "update:collision": null,
    "update:my": null,
    "update:of": null,
    "update:offset": null
  },
  props: {
    at: [Object, String],
    boundary: {},
    boundaryOffset: [Object, String],
    collision: [Object, String],
    my: [Object, String],
    of: {},
    offset: [Object, String]
  }
});
DxPosition.$_optionName = "position";
var DxRangeRule = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:ignoreEmptyValue": null,
    "update:max": null,
    "update:message": null,
    "update:min": null,
    "update:reevaluate": null,
    "update:type": null
  },
  props: {
    ignoreEmptyValue: Boolean,
    max: [Date, Number],
    message: String,
    min: [Date, Number],
    reevaluate: Boolean,
    type: String
  }
});
DxRangeRule.$_optionName = "validationRules";
DxRangeRule.$_isCollectionItem = true;
DxRangeRule.$_predefinedProps = {
  type: "range"
};
var DxRemoteOperations = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:filtering": null,
    "update:grouping": null,
    "update:groupPaging": null,
    "update:paging": null,
    "update:sorting": null,
    "update:summary": null
  },
  props: {
    filtering: Boolean,
    grouping: Boolean,
    groupPaging: Boolean,
    paging: Boolean,
    sorting: Boolean,
    summary: Boolean
  }
});
DxRemoteOperations.$_optionName = "remoteOperations";
var DxRequiredRule = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:message": null,
    "update:trim": null,
    "update:type": null
  },
  props: {
    message: String,
    trim: Boolean,
    type: String
  }
});
DxRequiredRule.$_optionName = "validationRules";
DxRequiredRule.$_isCollectionItem = true;
DxRequiredRule.$_predefinedProps = {
  type: "required"
};
var DxRowDragging = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:allowDropInsideItem": null,
    "update:allowReordering": null,
    "update:autoScroll": null,
    "update:boundary": null,
    "update:container": null,
    "update:cursorOffset": null,
    "update:data": null,
    "update:dragDirection": null,
    "update:dragTemplate": null,
    "update:dropFeedbackMode": null,
    "update:filter": null,
    "update:group": null,
    "update:handle": null,
    "update:onAdd": null,
    "update:onDragChange": null,
    "update:onDragEnd": null,
    "update:onDragMove": null,
    "update:onDragStart": null,
    "update:onRemove": null,
    "update:onReorder": null,
    "update:scrollSensitivity": null,
    "update:scrollSpeed": null,
    "update:showDragIcons": null
  },
  props: {
    allowDropInsideItem: Boolean,
    allowReordering: Boolean,
    autoScroll: Boolean,
    boundary: {},
    container: {},
    cursorOffset: [Object, String],
    data: {},
    dragDirection: String,
    dragTemplate: {},
    dropFeedbackMode: String,
    filter: String,
    group: String,
    handle: String,
    onAdd: Function,
    onDragChange: Function,
    onDragEnd: Function,
    onDragMove: Function,
    onDragStart: Function,
    onRemove: Function,
    onReorder: Function,
    scrollSensitivity: Number,
    scrollSpeed: Number,
    showDragIcons: Boolean
  }
});
DxRowDragging.$_optionName = "rowDragging";
DxRowDragging.$_expectedChildren = {
  cursorOffset: { isCollectionItem: false, optionName: "cursorOffset" }
};
var DxScrolling = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:columnRenderingMode": null,
    "update:mode": null,
    "update:preloadEnabled": null,
    "update:renderAsync": null,
    "update:rowRenderingMode": null,
    "update:scrollByContent": null,
    "update:scrollByThumb": null,
    "update:showScrollbar": null,
    "update:useNative": null
  },
  props: {
    columnRenderingMode: String,
    mode: String,
    preloadEnabled: Boolean,
    renderAsync: Boolean,
    rowRenderingMode: String,
    scrollByContent: Boolean,
    scrollByThumb: Boolean,
    showScrollbar: String,
    useNative: [Boolean, String]
  }
});
DxScrolling.$_optionName = "scrolling";
var DxSearch = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:editorOptions": null,
    "update:enabled": null,
    "update:mode": null,
    "update:searchExpr": null,
    "update:timeout": null
  },
  props: {
    editorOptions: {},
    enabled: Boolean,
    mode: String,
    searchExpr: [Array, Function, String],
    timeout: Number
  }
});
DxSearch.$_optionName = "search";
var DxSearchPanel = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:highlightCaseSensitive": null,
    "update:highlightSearchText": null,
    "update:placeholder": null,
    "update:searchVisibleColumnsOnly": null,
    "update:text": null,
    "update:visible": null,
    "update:width": null
  },
  props: {
    highlightCaseSensitive: Boolean,
    highlightSearchText: Boolean,
    placeholder: String,
    searchVisibleColumnsOnly: Boolean,
    text: String,
    visible: Boolean,
    width: [Number, String]
  }
});
DxSearchPanel.$_optionName = "searchPanel";
var DxSelection = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:allowSelectAll": null,
    "update:deferred": null,
    "update:mode": null,
    "update:recursive": null,
    "update:selectAllMode": null,
    "update:selectByClick": null,
    "update:showCheckBoxesMode": null
  },
  props: {
    allowSelectAll: Boolean,
    deferred: Boolean,
    mode: String,
    recursive: Boolean,
    selectAllMode: String,
    selectByClick: Boolean,
    showCheckBoxesMode: String
  }
});
DxSelection.$_optionName = "selection";
var DxShow = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:complete": null,
    "update:delay": null,
    "update:direction": null,
    "update:duration": null,
    "update:easing": null,
    "update:from": null,
    "update:staggerDelay": null,
    "update:start": null,
    "update:to": null,
    "update:type": null
  },
  props: {
    complete: Function,
    delay: Number,
    direction: String,
    duration: Number,
    easing: String,
    from: Object,
    staggerDelay: Number,
    start: Function,
    to: Object,
    type: String
  }
});
DxShow.$_optionName = "show";
var DxSortByGroupSummaryInfo = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:groupColumn": null,
    "update:sortOrder": null,
    "update:summaryItem": null
  },
  props: {
    groupColumn: String,
    sortOrder: String,
    summaryItem: [Number, String]
  }
});
DxSortByGroupSummaryInfo.$_optionName = "sortByGroupSummaryInfo";
DxSortByGroupSummaryInfo.$_isCollectionItem = true;
var DxSorting = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:ascendingText": null,
    "update:clearText": null,
    "update:descendingText": null,
    "update:mode": null,
    "update:showSortIndexes": null
  },
  props: {
    ascendingText: String,
    clearText: String,
    descendingText: String,
    mode: String,
    showSortIndexes: Boolean
  }
});
DxSorting.$_optionName = "sorting";
var DxStateStoring = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:customLoad": null,
    "update:customSave": null,
    "update:enabled": null,
    "update:savingTimeout": null,
    "update:storageKey": null,
    "update:type": null
  },
  props: {
    customLoad: Function,
    customSave: Function,
    enabled: Boolean,
    savingTimeout: Number,
    storageKey: String,
    type: String
  }
});
DxStateStoring.$_optionName = "stateStoring";
var DxStringLengthRule = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:ignoreEmptyValue": null,
    "update:max": null,
    "update:message": null,
    "update:min": null,
    "update:trim": null,
    "update:type": null
  },
  props: {
    ignoreEmptyValue: Boolean,
    max: Number,
    message: String,
    min: Number,
    trim: Boolean,
    type: String
  }
});
DxStringLengthRule.$_optionName = "validationRules";
DxStringLengthRule.$_isCollectionItem = true;
DxStringLengthRule.$_predefinedProps = {
  type: "stringLength"
};
var DxSummary = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:calculateCustomSummary": null,
    "update:groupItems": null,
    "update:recalculateWhileEditing": null,
    "update:skipEmptyValues": null,
    "update:texts": null,
    "update:totalItems": null
  },
  props: {
    calculateCustomSummary: Function,
    groupItems: Array,
    recalculateWhileEditing: Boolean,
    skipEmptyValues: Boolean,
    texts: Object,
    totalItems: Array
  }
});
DxSummary.$_optionName = "summary";
DxSummary.$_expectedChildren = {
  groupItem: { isCollectionItem: true, optionName: "groupItems" },
  summaryTexts: { isCollectionItem: false, optionName: "texts" },
  texts: { isCollectionItem: false, optionName: "texts" },
  totalItem: { isCollectionItem: true, optionName: "totalItems" }
};
var DxSummaryTexts = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:avg": null,
    "update:avgOtherColumn": null,
    "update:count": null,
    "update:max": null,
    "update:maxOtherColumn": null,
    "update:min": null,
    "update:minOtherColumn": null,
    "update:sum": null,
    "update:sumOtherColumn": null
  },
  props: {
    avg: String,
    avgOtherColumn: String,
    count: String,
    max: String,
    maxOtherColumn: String,
    min: String,
    minOtherColumn: String,
    sum: String,
    sumOtherColumn: String
  }
});
DxSummaryTexts.$_optionName = "texts";
var DxTexts = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:addRow": null,
    "update:avg": null,
    "update:avgOtherColumn": null,
    "update:cancel": null,
    "update:cancelAllChanges": null,
    "update:cancelRowChanges": null,
    "update:clearFilter": null,
    "update:confirmDeleteMessage": null,
    "update:confirmDeleteTitle": null,
    "update:count": null,
    "update:createFilter": null,
    "update:deleteRow": null,
    "update:editRow": null,
    "update:emptyValue": null,
    "update:exportAll": null,
    "update:exportSelectedRows": null,
    "update:exportTo": null,
    "update:filterEnabledHint": null,
    "update:fix": null,
    "update:groupByThisColumn": null,
    "update:groupContinuedMessage": null,
    "update:groupContinuesMessage": null,
    "update:leftPosition": null,
    "update:max": null,
    "update:maxOtherColumn": null,
    "update:min": null,
    "update:minOtherColumn": null,
    "update:ok": null,
    "update:rightPosition": null,
    "update:saveAllChanges": null,
    "update:saveRowChanges": null,
    "update:sum": null,
    "update:sumOtherColumn": null,
    "update:undeleteRow": null,
    "update:unfix": null,
    "update:ungroup": null,
    "update:ungroupAll": null,
    "update:validationCancelChanges": null
  },
  props: {
    addRow: String,
    avg: String,
    avgOtherColumn: String,
    cancel: String,
    cancelAllChanges: String,
    cancelRowChanges: String,
    clearFilter: String,
    confirmDeleteMessage: String,
    confirmDeleteTitle: String,
    count: String,
    createFilter: String,
    deleteRow: String,
    editRow: String,
    emptyValue: String,
    exportAll: String,
    exportSelectedRows: String,
    exportTo: String,
    filterEnabledHint: String,
    fix: String,
    groupByThisColumn: String,
    groupContinuedMessage: String,
    groupContinuesMessage: String,
    leftPosition: String,
    max: String,
    maxOtherColumn: String,
    min: String,
    minOtherColumn: String,
    ok: String,
    rightPosition: String,
    saveAllChanges: String,
    saveRowChanges: String,
    sum: String,
    sumOtherColumn: String,
    undeleteRow: String,
    unfix: String,
    ungroup: String,
    ungroupAll: String,
    validationCancelChanges: String
  }
});
DxTexts.$_optionName = "texts";
var DxTo = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:left": null,
    "update:opacity": null,
    "update:position": null,
    "update:scale": null,
    "update:top": null
  },
  props: {
    left: Number,
    opacity: Number,
    position: Object,
    scale: Number,
    top: Number
  }
});
DxTo.$_optionName = "to";
var DxToolbar = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:disabled": null,
    "update:items": null,
    "update:visible": null
  },
  props: {
    disabled: Boolean,
    items: Array,
    visible: Boolean
  }
});
DxToolbar.$_optionName = "toolbar";
DxToolbar.$_expectedChildren = {
  item: { isCollectionItem: true, optionName: "items" }
};
var DxToolbarItem = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:cssClass": null,
    "update:disabled": null,
    "update:html": null,
    "update:locateInMenu": null,
    "update:location": null,
    "update:menuItemTemplate": null,
    "update:options": null,
    "update:showText": null,
    "update:template": null,
    "update:text": null,
    "update:toolbar": null,
    "update:visible": null,
    "update:widget": null
  },
  props: {
    cssClass: String,
    disabled: Boolean,
    html: String,
    locateInMenu: String,
    location: String,
    menuItemTemplate: {},
    options: {},
    showText: String,
    template: {},
    text: String,
    toolbar: String,
    visible: Boolean,
    widget: String
  }
});
DxToolbarItem.$_optionName = "toolbarItems";
DxToolbarItem.$_isCollectionItem = true;
var DxTotalItem = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:alignment": null,
    "update:column": null,
    "update:cssClass": null,
    "update:customizeText": null,
    "update:displayFormat": null,
    "update:name": null,
    "update:showInColumn": null,
    "update:skipEmptyValues": null,
    "update:summaryType": null,
    "update:valueFormat": null
  },
  props: {
    alignment: String,
    column: String,
    cssClass: String,
    customizeText: Function,
    displayFormat: String,
    name: String,
    showInColumn: String,
    skipEmptyValues: Boolean,
    summaryType: String,
    valueFormat: [Object, Function, String]
  }
});
DxTotalItem.$_optionName = "totalItems";
DxTotalItem.$_isCollectionItem = true;
DxTotalItem.$_expectedChildren = {
  valueFormat: { isCollectionItem: false, optionName: "valueFormat" }
};
var DxValidationRule = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:comparisonTarget": null,
    "update:comparisonType": null,
    "update:ignoreEmptyValue": null,
    "update:max": null,
    "update:message": null,
    "update:min": null,
    "update:pattern": null,
    "update:reevaluate": null,
    "update:trim": null,
    "update:type": null,
    "update:validationCallback": null
  },
  props: {
    comparisonTarget: Function,
    comparisonType: String,
    ignoreEmptyValue: Boolean,
    max: [Date, Number],
    message: String,
    min: [Date, Number],
    pattern: [RegExp, String],
    reevaluate: Boolean,
    trim: Boolean,
    type: String,
    validationCallback: Function
  }
});
DxValidationRule.$_optionName = "validationRules";
DxValidationRule.$_isCollectionItem = true;
DxValidationRule.$_predefinedProps = {
  type: "required"
};
var DxValueFormat = createConfigurationComponent3({
  emits: {
    "update:isActive": null,
    "update:hoveredElement": null,
    "update:currency": null,
    "update:formatter": null,
    "update:parser": null,
    "update:precision": null,
    "update:type": null,
    "update:useCurrencyAccountingStyle": null
  },
  props: {
    currency: String,
    formatter: Function,
    parser: Function,
    precision: Number,
    type: String,
    useCurrencyAccountingStyle: Boolean
  }
});
DxValueFormat.$_optionName = "valueFormat";
var data_grid_default2 = DxDataGrid;
export {
  DxAnimation,
  DxAsyncRule,
  DxAt,
  DxBoundaryOffset,
  DxButton,
  DxChange,
  DxColCountByScreen,
  DxCollision,
  DxColumn,
  DxColumnChooser,
  DxColumnChooserSearch,
  DxColumnChooserSelection,
  DxColumnFixing,
  DxColumnFixingTexts,
  DxColumnHeaderFilter,
  DxColumnHeaderFilterSearch,
  DxColumnLookup,
  DxCompareRule,
  DxCursorOffset,
  DxCustomOperation,
  DxCustomRule,
  DxDataGrid,
  DxDataGridHeaderFilter,
  DxDataGridHeaderFilterSearch,
  DxDataGridHeaderFilterTexts,
  DxDataGridSelection,
  DxEditing,
  DxEditingTexts,
  DxEmailRule,
  DxExport,
  DxExportTexts,
  DxField,
  DxFieldLookup,
  DxFilterBuilder,
  DxFilterBuilderPopup,
  DxFilterOperationDescriptions,
  DxFilterPanel,
  DxFilterPanelTexts,
  DxFilterRow,
  DxForm,
  DxFormItem,
  DxFormat,
  DxFrom,
  DxGroupItem,
  DxGroupOperationDescriptions,
  DxGroupPanel,
  DxGrouping,
  DxGroupingTexts,
  DxHeaderFilter,
  DxHide,
  DxItem,
  DxKeyboardNavigation,
  DxLabel,
  DxLoadPanel,
  DxLookup,
  DxMasterDetail,
  DxMy,
  DxNumericRule,
  DxOffset,
  DxOperationDescriptions,
  DxPager,
  DxPaging,
  DxPatternRule,
  DxPopup,
  DxPosition,
  DxRangeRule,
  DxRemoteOperations,
  DxRequiredRule,
  DxRowDragging,
  DxScrolling,
  DxSearch,
  DxSearchPanel,
  DxSelection,
  DxShow,
  DxSortByGroupSummaryInfo,
  DxSorting,
  DxStateStoring,
  DxStringLengthRule,
  DxSummary,
  DxSummaryTexts,
  DxTexts,
  DxTo,
  DxToolbar,
  DxToolbarItem,
  DxTotalItem,
  DxValidationRule,
  DxValueFormat,
  data_grid_default2 as default
};
/*! Bundled license information:

devextreme-vue/esm/core/strategy/vue2/index.js:
  (*!
   * devextreme-vue
   * Version: 23.2.4
   * Build date: Mon Jan 29 2024
   *
   * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-vue
   *)

devextreme-vue/esm/core/helpers.js:
  (*!
   * devextreme-vue
   * Version: 23.2.4
   * Build date: Mon Jan 29 2024
   *
   * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-vue
   *)

devextreme-vue/esm/core/children-processing.js:
  (*!
   * devextreme-vue
   * Version: 23.2.4
   * Build date: Mon Jan 29 2024
   *
   * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-vue
   *)

devextreme-vue/esm/core/vue-helper.js:
  (*!
   * devextreme-vue
   * Version: 23.2.4
   * Build date: Mon Jan 29 2024
   *
   * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-vue
   *)

devextreme-vue/esm/core/config.js:
  (*!
   * devextreme-vue
   * Version: 23.2.4
   * Build date: Mon Jan 29 2024
   *
   * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-vue
   *)

devextreme-vue/esm/core/configuration.js:
  (*!
   * devextreme-vue
   * Version: 23.2.4
   * Build date: Mon Jan 29 2024
   *
   * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-vue
   *)

devextreme-vue/esm/core/configuration-component.js:
  (*!
   * devextreme-vue
   * Version: 23.2.4
   * Build date: Mon Jan 29 2024
   *
   * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-vue
   *)

devextreme-vue/esm/core/constants.js:
  (*!
   * devextreme-vue
   * Version: 23.2.4
   * Build date: Mon Jan 29 2024
   *
   * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-vue
   *)

devextreme-vue/esm/core/templates-discovering.js:
  (*!
   * devextreme-vue
   * Version: 23.2.4
   * Build date: Mon Jan 29 2024
   *
   * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-vue
   *)

devextreme-vue/esm/core/templates-manager.js:
  (*!
   * devextreme-vue
   * Version: 23.2.4
   * Build date: Mon Jan 29 2024
   *
   * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-vue
   *)

devextreme-vue/esm/core/component.js:
  (*!
   * devextreme-vue
   * Version: 23.2.4
   * Build date: Mon Jan 29 2024
   *
   * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-vue
   *)

devextreme-vue/esm/core/extension-component.js:
  (*!
   * devextreme-vue
   * Version: 23.2.4
   * Build date: Mon Jan 29 2024
   *
   * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-vue
   *)

devextreme-vue/esm/core/strategy/vue3/index.js:
  (*!
   * devextreme-vue
   * Version: 23.2.4
   * Build date: Mon Jan 29 2024
   *
   * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-vue
   *)

devextreme-vue/esm/core/version.js:
  (*!
   * devextreme-vue
   * Version: 23.2.4
   * Build date: Mon Jan 29 2024
   *
   * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-vue
   *)

devextreme-vue/esm/core/index.js:
  (*!
   * devextreme-vue
   * Version: 23.2.4
   * Build date: Mon Jan 29 2024
   *
   * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-vue
   *)

devextreme-vue/esm/data-grid.js:
  (*!
   * devextreme-vue
   * Version: 23.2.4
   * Build date: Mon Jan 29 2024
   *
   * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-vue
   *)
*/
//# sourceMappingURL=devextreme-vue_data-grid.js.map

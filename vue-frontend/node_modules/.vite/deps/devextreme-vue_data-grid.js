import {
  ColumnsView,
  Deferred,
  adaptivityModule,
  aggregators,
  browser_default,
  button_default,
  class_default,
  columnChooserModule,
  columnFixingModule,
  columnHeadersModule,
  columnsControllerModule,
  columnsResizingReorderingModule,
  compileGetter,
  component_registrator_default,
  contextMenuModule,
  context_menu_default,
  core_default,
  dataControllerModule,
  date_default,
  deferRender,
  devices_default,
  dom_adapter_default,
  each,
  editingFormBasedModule,
  editingModule,
  editingRowBasedModule,
  editorFactoryModule,
  encodeHtml,
  equalByValue,
  errorHandlingModule,
  errors,
  events_engine_default,
  extend,
  filterBuilderModule,
  filterPanelModule,
  filterRowModule,
  filterSyncModule,
  focusModule,
  format,
  getDefaultAlignment,
  getFormat,
  getNavigator,
  getWindow,
  gridViewModule,
  headerFilterModule,
  headerPanelModule,
  init_accessibility,
  init_ajax,
  init_array,
  init_browser,
  init_button,
  init_class,
  init_common,
  init_component_registrator,
  init_console,
  init_context_menu,
  init_core,
  init_currency,
  init_data,
  init_date,
  init_date_format,
  init_deferred,
  init_devices,
  init_dom,
  init_dom_adapter,
  init_errors,
  init_events_engine,
  init_extend,
  init_inflector,
  init_iterator,
  init_list,
  init_message,
  init_number,
  init_position,
  init_query,
  init_renderer,
  init_store_helper,
  init_string,
  init_themes,
  init_type,
  init_ui_data_grid_core,
  init_ui_errors,
  init_ui_grid_core_accessibility,
  init_ui_grid_core_adaptivity,
  init_ui_grid_core_column_chooser,
  init_ui_grid_core_column_fixing,
  init_ui_grid_core_column_headers,
  init_ui_grid_core_columns_controller,
  init_ui_grid_core_columns_resizing_reordering,
  init_ui_grid_core_columns_view,
  init_ui_grid_core_context_menu,
  init_ui_grid_core_data_controller,
  init_ui_grid_core_data_source_adapter,
  init_ui_grid_core_editing,
  init_ui_grid_core_editing_cell_based,
  init_ui_grid_core_editing_form_based,
  init_ui_grid_core_editing_row_based,
  init_ui_grid_core_editor_factory,
  init_ui_grid_core_error_handling,
  init_ui_grid_core_filter_builder,
  init_ui_grid_core_filter_panel,
  init_ui_grid_core_filter_row,
  init_ui_grid_core_filter_sync,
  init_ui_grid_core_focus,
  init_ui_grid_core_grid_view,
  init_ui_grid_core_header_filter,
  init_ui_grid_core_header_panel,
  init_ui_grid_core_keyboard_navigation,
  init_ui_grid_core_master_detail,
  init_ui_grid_core_pager,
  init_ui_grid_core_row_dragging,
  init_ui_grid_core_rows,
  init_ui_grid_core_search,
  init_ui_grid_core_selection,
  init_ui_grid_core_sorting,
  init_ui_grid_core_state_storing,
  init_ui_grid_core_utils,
  init_ui_grid_core_validating,
  init_ui_grid_core_virtual_columns,
  init_ui_grid_core_virtual_scrolling,
  init_ui_widget,
  init_utils,
  init_version,
  init_window,
  isBoolean,
  isDate,
  isDefined,
  isEmptyObject,
  isFunction,
  isMaterial,
  isObject,
  isPlainObject,
  isString,
  keyboardNavigationModule,
  keysEqual,
  list_default,
  logger,
  map,
  masterDetailModule,
  merge,
  message_default,
  noop,
  normalizeSortingInfo,
  number_default,
  pagerModule,
  query_default,
  registerKeyboardAction,
  renderer_default,
  require_core,
  restoreFocus,
  rowDraggingModule,
  rowsModule,
  searchModule,
  selectionModule,
  setTabIndex,
  sortingModule,
  stateStoringModule,
  store_helper_default,
  toComparable,
  ui_data_grid_core_default,
  ui_errors_default,
  ui_grid_core_data_source_adapter_default,
  ui_grid_core_editing_cell_based_default,
  ui_grid_core_utils_default,
  ui_widget_default,
  validatingModule,
  virtualColumnsModule,
  virtualScrollingModule,
  when
} from "./chunk-ZMSIPWJ6.js";
import "./chunk-4IG7KIC4.js";
import {
  __commonJS,
  __esm,
  __export,
  __require,
  __toCommonJS,
  __toESM
} from "./chunk-GFT2G5UO.js";

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.column_headers.js
var ColumnHeadersView;
var init_ui_data_grid_column_headers = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.column_headers.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_column_headers();
    ColumnHeadersView = columnHeadersModule.views.columnHeadersView;
    ui_data_grid_core_default.registerModule("columnHeaders", columnHeadersModule);
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.columns_controller.js
var init_ui_data_grid_columns_controller = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.columns_controller.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_columns_controller();
    init_extend();
    ui_data_grid_core_default.registerModule("columns", {
      defaultOptions: function() {
        return extend(true, {}, columnsControllerModule.defaultOptions(), {
          commonColumnSettings: {
            allowExporting: true
          }
        });
      },
      controllers: columnsControllerModule.controllers
    });
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.data_source_adapter.js
var dataSourceAdapterType, ui_data_grid_data_source_adapter_default;
var init_ui_data_grid_data_source_adapter = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.data_source_adapter.js"() {
    init_ui_grid_core_data_source_adapter();
    dataSourceAdapterType = ui_grid_core_data_source_adapter_default;
    ui_data_grid_data_source_adapter_default = {
      extend: function(extender) {
        dataSourceAdapterType = dataSourceAdapterType.inherit(extender);
      },
      create: function(component) {
        return new dataSourceAdapterType(component);
      }
    };
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.data_controller.js
var DataController;
var init_ui_data_grid_data_controller = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.data_controller.js"() {
    init_ui_data_grid_core();
    init_ui_errors();
    init_ui_data_grid_data_source_adapter();
    init_ui_grid_core_data_controller();
    DataController = dataControllerModule.controllers.data.inherit({
      _getDataSourceAdapter: function() {
        return ui_data_grid_data_source_adapter_default;
      },
      _getSpecificDataSourceOption: function() {
        var dataSource = this.option("dataSource");
        if (dataSource && !Array.isArray(dataSource) && this.option("keyExpr")) {
          ui_errors_default.log("W1011");
        }
        return this.callBase();
      }
    });
    ui_data_grid_core_default.registerModule("data", {
      defaultOptions: dataControllerModule.defaultOptions,
      controllers: {
        data: DataController
      }
    });
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.sorting.js
var init_ui_data_grid_sorting = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.sorting.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_sorting();
    ui_data_grid_core_default.registerModule("sorting", sortingModule);
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.rows.js
var RowsView;
var init_ui_data_grid_rows = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.rows.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_rows();
    RowsView = rowsModule.views.rowsView;
    ui_data_grid_core_default.registerModule("rows", rowsModule);
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.context_menu.js
var init_ui_data_grid_context_menu = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.context_menu.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_context_menu();
    ui_data_grid_core_default.registerModule("contextMenu", contextMenuModule);
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.error_handling.js
var init_ui_data_grid_error_handling = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.error_handling.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_error_handling();
    ui_data_grid_core_default.registerModule("errorHandling", errorHandlingModule);
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grid_view.js
var init_ui_data_grid_grid_view = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grid_view.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_grid_view();
    ui_data_grid_core_default.registerModule("gridView", gridViewModule);
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.header_panel.js
var HeaderPanel;
var init_ui_data_grid_header_panel = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.header_panel.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_header_panel();
    HeaderPanel = headerPanelModule.views.headerPanel;
    ui_data_grid_core_default.registerModule("headerPanel", headerPanelModule);
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.base.js
var DATAGRID_ROW_SELECTOR, DATAGRID_DEPRECATED_TEMPLATE_WARNING, DataGrid, ui_data_grid_base_default;
var init_ui_data_grid_base = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.base.js"() {
    init_renderer();
    init_component_registrator();
    init_common();
    init_type();
    init_iterator();
    init_extend();
    init_console();
    init_browser();
    init_ui_widget();
    init_ui_data_grid_core();
    init_themes();
    init_ui_data_grid_column_headers();
    init_ui_data_grid_columns_controller();
    init_ui_data_grid_data_controller();
    init_ui_data_grid_sorting();
    init_ui_data_grid_rows();
    init_ui_data_grid_context_menu();
    init_ui_data_grid_error_handling();
    init_ui_data_grid_grid_view();
    init_ui_data_grid_header_panel();
    DATAGRID_ROW_SELECTOR = ".dx-row";
    DATAGRID_DEPRECATED_TEMPLATE_WARNING = "Specifying grid templates with the jQuery selector name is now deprecated. Use the DOM Node or the jQuery object that references this selector instead.";
    ui_data_grid_core_default.registerModulesOrder(["stateStoring", "columns", "selection", "editorFactory", "columnChooser", "grouping", "editing", "editingRowBased", "editingFormBased", "editingCellBased", "masterDetail", "validating", "adaptivity", "data", "virtualScrolling", "columnHeaders", "filterRow", "headerPanel", "headerFilter", "sorting", "search", "rows", "pager", "columnsResizingReordering", "contextMenu", "keyboardNavigation", "errorHandling", "summary", "columnFixing", "export", "gridView"]);
    DataGrid = ui_widget_default.inherit({
      _activeStateUnit: DATAGRID_ROW_SELECTOR,
      _getDefaultOptions: function() {
        var result = this.callBase();
        each(ui_data_grid_core_default.modules, function() {
          if (isFunction(this.defaultOptions)) {
            extend(true, result, this.defaultOptions());
          }
        });
        return result;
      },
      _setDeprecatedOptions: function() {
        this.callBase();
        extend(this._deprecatedOptions, {
          useKeyboard: {
            since: "19.2",
            alias: "keyboardNavigation.enabled"
          }
        });
      },
      _defaultOptionsRules: function() {
        return this.callBase().concat([{
          device: {
            platform: "ios"
          },
          options: {
            showRowLines: true
          }
        }, {
          device: function() {
            return isMaterial();
          },
          options: {
            showRowLines: true,
            showColumnLines: false,
            headerFilter: {
              height: 315
            },
            editing: {
              useIcons: true
            }
          }
        }, {
          device: function() {
            return browser_default.webkit;
          },
          options: {
            loadingTimeout: 30,
            loadPanel: {
              animation: {
                show: {
                  easing: "cubic-bezier(1, 0, 1, 0)",
                  duration: 500,
                  from: {
                    opacity: 0
                  },
                  to: {
                    opacity: 1
                  }
                }
              }
            }
          }
        }, {
          device: function(_device) {
            return "desktop" !== _device.deviceType;
          },
          options: {
            grouping: {
              expandMode: "rowClick"
            }
          }
        }]);
      },
      _init: function() {
        this.callBase();
        ui_data_grid_core_default.processModules(this, ui_data_grid_core_default);
        ui_data_grid_core_default.callModuleItemsMethod(this, "init");
      },
      _clean: noop,
      _optionChanged: function(args) {
        ui_data_grid_core_default.callModuleItemsMethod(this, "optionChanged", [args]);
        if (!args.handled) {
          this.callBase(args);
        }
      },
      _dimensionChanged: function() {
        this.updateDimensions(true);
      },
      _visibilityChanged: function(visible) {
        if (visible) {
          this.updateDimensions();
        }
      },
      _initMarkup: function() {
        this.callBase.apply(this, arguments);
        this.getView("gridView").render(this.$element());
      },
      _renderContentImpl: function() {
        this.getView("gridView").update();
      },
      _renderContent: function() {
        var that = this;
        deferRender(function() {
          that._renderContentImpl();
        });
      },
      _getTemplate: function(templateName) {
        var template = templateName;
        if (isString(template) && "#" === template[0]) {
          template = renderer_default(templateName);
          logger.warn(DATAGRID_DEPRECATED_TEMPLATE_WARNING);
        }
        return this.callBase(template);
      },
      _dispose: function() {
        this.callBase();
        ui_data_grid_core_default.callModuleItemsMethod(this, "dispose");
      },
      isReady: function() {
        return this.getController("data").isReady();
      },
      beginUpdate: function() {
        this.callBase();
        ui_data_grid_core_default.callModuleItemsMethod(this, "beginUpdate");
      },
      endUpdate: function() {
        ui_data_grid_core_default.callModuleItemsMethod(this, "endUpdate");
        this.callBase();
      },
      getController: function(name) {
        return this._controllers[name];
      },
      getView: function(name) {
        return this._views[name];
      },
      focus: function(element) {
        this.getController("keyboardNavigation").focus(element);
      }
    });
    DataGrid.registerModule = ui_data_grid_core_default.registerModule.bind(ui_data_grid_core_default);
    component_registrator_default("dxDataGrid", DataGrid);
    ui_data_grid_base_default = DataGrid;
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.state_storing.js
var init_ui_data_grid_state_storing = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.state_storing.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_state_storing();
    ui_data_grid_core_default.registerModule("stateStoring", stateStoringModule);
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.selection.js
var init_ui_data_grid_selection = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.selection.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_selection();
    ui_data_grid_core_default.registerModule("selection", selectionModule);
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.column_chooser.js
var ColumnChooserController, ColumnChooserView;
var init_ui_data_grid_column_chooser = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.column_chooser.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_column_chooser();
    ColumnChooserController = columnChooserModule.controllers.columnChooser;
    ColumnChooserView = columnChooserModule.views.columnChooserView;
    ui_data_grid_core_default.registerModule("columnChooser", columnChooserModule);
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grouping.core.js
function createOffsetFilter(path, storeLoadOptions, lastLevelOnly) {
  var groups = normalizeSortingInfo(storeLoadOptions.group);
  var filter = [];
  for (var i = lastLevelOnly ? path.length - 1 : 0; i < path.length; i++) {
    var filterElement = [];
    for (var j = 0; j <= i; j++) {
      var selector = groups[j].selector;
      if (i === j && (null === path[j] || false === path[j] || true === path[j])) {
        if (false === path[j]) {
          filterElement.push([selector, "=", groups[j].desc ? true : null]);
        } else if (path[j] ? !groups[j].desc : groups[j].desc) {
          filterElement.push([selector, "<>", path[j]]);
        } else {
          filterElement.push([selector, "<>", null]);
          filterElement.push([selector, "=", null]);
        }
      } else {
        var currentFilter = [selector, i === j ? groups[j].desc ? ">" : "<" : "=", path[j]];
        if ("<" === currentFilter[1]) {
          filterElement.push([currentFilter, "or", [selector, "=", null]]);
        } else {
          filterElement.push(currentFilter);
        }
      }
    }
    filter.push(ui_data_grid_core_default.combineFilters(filterElement));
  }
  filter = ui_data_grid_core_default.combineFilters(filter, "or");
  return ui_data_grid_core_default.combineFilters([filter, storeLoadOptions.filter]);
}
var GroupingHelper;
var init_ui_data_grid_grouping_core = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grouping.core.js"() {
    init_renderer();
    init_class();
    init_ui_data_grid_core();
    init_utils();
    init_deferred();
    GroupingHelper = class_default.inherit(/* @__PURE__ */ function() {
      var findGroupInfoByKey = function(groupsInfo, key) {
        var hash = groupsInfo.hash;
        return hash && hash[JSON.stringify(key)];
      };
      var getGroupInfoIndexByOffset = function(groupsInfo, offset) {
        var leftIndex = 0;
        var rightIndex = groupsInfo.length - 1;
        if (!groupsInfo.length) {
          return 0;
        }
        do {
          var middleIndex = rightIndex + leftIndex >> 1;
          if (groupsInfo[middleIndex].offset > offset) {
            rightIndex = middleIndex;
          } else {
            leftIndex = middleIndex;
          }
        } while (rightIndex - leftIndex > 1);
        var index;
        for (index = leftIndex; index <= rightIndex; index++) {
          if (groupsInfo[index].offset > offset) {
            break;
          }
        }
        return index;
      };
      return {
        ctor: function(dataSourceAdapter) {
          this._dataSource = dataSourceAdapter;
          this.reset();
        },
        reset: function() {
          this._groupsInfo = [];
          this._totalCountCorrection = 0;
        },
        totalCountCorrection: function() {
          return this._totalCountCorrection;
        },
        updateTotalItemsCount: function(totalCountCorrection) {
          this._totalCountCorrection = totalCountCorrection || 0;
        },
        isGroupItemCountable: function(item) {
          return !this._isVirtualPaging() || !item.isContinuation;
        },
        _isVirtualPaging: function() {
          var scrollingMode = this._dataSource.option("scrolling.mode");
          return "virtual" === scrollingMode || "infinite" === scrollingMode;
        },
        itemsCount: function() {
          var dataSourceAdapter = this._dataSource;
          var dataSource = dataSourceAdapter._dataSource;
          var groupCount = ui_data_grid_core_default.normalizeSortingInfo(dataSource.group() || []).length;
          var itemsCount = function calculateItemsCount(that, items, groupsCount) {
            var result = 0;
            if (items) {
              if (!groupsCount) {
                result = items.length;
              } else {
                for (var i = 0; i < items.length; i++) {
                  if (that.isGroupItemCountable(items[i])) {
                    result++;
                  }
                  result += calculateItemsCount(that, items[i].items, groupsCount - 1);
                }
              }
            }
            return result;
          }(this, dataSource.items(), groupCount);
          return itemsCount;
        },
        foreachGroups: function(callback, childrenAtFirst, foreachCollapsedGroups, updateOffsets, updateParentOffsets) {
          var that = this;
          return function foreachGroupsCore(groupsInfo, callback2, childrenAtFirst2, parents) {
            var callbackResults = [];
            function executeCallback(callback3, data, parents2, callbackResults2) {
              var callbackResult2 = data && callback3(data, parents2);
              callbackResult2 && callbackResults2.push(callbackResult2);
              return callbackResult2;
            }
            for (var i = 0; i < groupsInfo.length; i++) {
              parents.push(groupsInfo[i].data);
              if (!childrenAtFirst2 && false === executeCallback(callback2, groupsInfo[i].data, parents, callbackResults)) {
                return false;
              }
              if (!groupsInfo[i].data || groupsInfo[i].data.isExpanded || foreachCollapsedGroups) {
                var children = groupsInfo[i].children;
                var callbackResult = children.length && foreachGroupsCore(children, callback2, childrenAtFirst2, parents);
                callbackResult && callbackResults.push(callbackResult);
                if (false === callbackResult) {
                  return false;
                }
              }
              if (childrenAtFirst2 && false === executeCallback(callback2, groupsInfo[i].data, parents, callbackResults)) {
                return false;
              }
              if (!groupsInfo[i].data || groupsInfo[i].data.offset !== groupsInfo[i].offset) {
                updateOffsets = true;
              }
              parents.pop();
            }
            var currentParents = updateParentOffsets && parents.slice(0);
            return updateOffsets && when.apply(renderer_default, callbackResults).always(function() {
              that._updateGroupInfoOffsets(groupsInfo, currentParents);
            });
          }(that._groupsInfo, callback, childrenAtFirst, []);
        },
        _updateGroupInfoOffsets: function(groupsInfo, parents) {
          parents = parents || [];
          for (var index = 0; index < groupsInfo.length; index++) {
            var groupInfo = groupsInfo[index];
            if (groupInfo.data && groupInfo.data.offset !== groupInfo.offset) {
              groupInfo.offset = groupInfo.data.offset;
              for (var parentIndex = 0; parentIndex < parents.length; parentIndex++) {
                parents[parentIndex].offset = groupInfo.offset;
              }
            }
          }
          groupsInfo.sort(function(a, b) {
            return a.offset - b.offset;
          });
        },
        findGroupInfo: function(path) {
          var groupInfo;
          var groupsInfo = this._groupsInfo;
          for (var pathIndex = 0; groupsInfo && pathIndex < path.length; pathIndex++) {
            groupInfo = findGroupInfoByKey(groupsInfo, path[pathIndex]);
            groupsInfo = groupInfo && groupInfo.children;
          }
          return groupInfo && groupInfo.data;
        },
        addGroupInfo: function(groupInfoData) {
          var groupInfo;
          var path = groupInfoData.path;
          var groupsInfo = this._groupsInfo;
          for (var pathIndex = 0; pathIndex < path.length; pathIndex++) {
            groupInfo = findGroupInfoByKey(groupsInfo, path[pathIndex]);
            if (!groupInfo) {
              groupInfo = {
                key: path[pathIndex],
                offset: groupInfoData.offset,
                data: {
                  offset: groupInfoData.offset,
                  isExpanded: true,
                  path: path.slice(0, pathIndex + 1)
                },
                children: []
              };
              var index = getGroupInfoIndexByOffset(groupsInfo, groupInfoData.offset);
              groupsInfo.splice(index, 0, groupInfo);
              groupsInfo.hash = groupsInfo.hash || {};
              groupsInfo.hash[JSON.stringify(groupInfo.key)] = groupInfo;
            }
            if (pathIndex === path.length - 1) {
              groupInfo.data = groupInfoData;
              if (groupInfo.offset !== groupInfoData.offset) {
                this._updateGroupInfoOffsets(groupsInfo);
              }
            }
            groupsInfo = groupInfo.children;
          }
        },
        allowCollapseAll: function() {
          return true;
        },
        refresh: function(options) {
          var storeLoadOptions = options.storeLoadOptions;
          var groups = normalizeSortingInfo(storeLoadOptions.group || []);
          var oldGroups = "_group" in this ? normalizeSortingInfo(this._group || []) : groups;
          var groupsCount = Math.min(oldGroups.length, groups.length);
          this._group = storeLoadOptions.group;
          for (var groupIndex = 0; groupIndex < groupsCount; groupIndex++) {
            if (oldGroups[groupIndex].selector !== groups[groupIndex].selector) {
              groupsCount = groupIndex;
              break;
            }
          }
          if (!groupsCount) {
            this.reset();
          } else {
            !function cleanGroupsInfo(groupsInfo, groupIndex2, groupsCount2) {
              for (var i = 0; i < groupsInfo.length; i++) {
                if (groupIndex2 + 1 >= groupsCount2) {
                  groupsInfo[i].children = [];
                } else {
                  cleanGroupsInfo(groupsInfo[i].children, groupIndex2 + 1, groupsCount2);
                }
              }
            }(this._groupsInfo, 0, groupsCount);
          }
        },
        handleDataLoading: function() {
        },
        handleDataLoaded: function(options, callBase) {
          callBase(options);
        },
        handleDataLoadedCore: function(options, callBase) {
          callBase(options);
        }
      };
    }());
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.utils.js
function createGroupFilter(path, storeLoadOptions) {
  var groups = normalizeSortingInfo(storeLoadOptions.group);
  var filter = [];
  for (var i = 0; i < path.length; i++) {
    filter.push([groups[i].selector, "=", path[i]]);
  }
  if (storeLoadOptions.filter) {
    filter.push(storeLoadOptions.filter);
  }
  return ui_grid_core_utils_default.combineFilters(filter);
}
var init_ui_data_grid_utils = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.utils.js"() {
    init_ui_grid_core_utils();
    init_utils();
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grouping.expanded.js
var loadTotalCount, GroupingHelper2;
var init_ui_data_grid_grouping_expanded = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grouping.expanded.js"() {
    init_data();
    init_utils();
    init_iterator();
    init_extend();
    init_store_helper();
    init_ui_data_grid_core();
    init_ui_data_grid_grouping_core();
    init_ui_data_grid_utils();
    init_query();
    init_deferred();
    loadTotalCount = function(dataSource, options) {
      var d = new Deferred();
      var loadOptions = extend({
        skip: 0,
        take: 1,
        requireTotalCount: true
      }, options);
      dataSource.load(loadOptions).done(function(data, extra) {
        d.resolve(extra && extra.totalCount);
      }).fail(d.reject.bind(d));
      return d;
    };
    GroupingHelper2 = GroupingHelper.inherit(/* @__PURE__ */ function() {
      var foreachCollapsedGroups = function(that, callback, updateOffsets) {
        return that.foreachGroups(function(groupInfo) {
          if (!groupInfo.isExpanded) {
            return callback(groupInfo);
          }
        }, false, false, updateOffsets, true);
      };
      var correctSkipLoadOption = function(that, skip) {
        var skipCorrection = 0;
        var resultSkip = skip || 0;
        if (skip) {
          foreachCollapsedGroups(that, function(groupInfo) {
            if (groupInfo.offset - skipCorrection >= skip) {
              return false;
            }
            skipCorrection += groupInfo.count - 1;
          });
          resultSkip += skipCorrection;
        }
        return resultSkip;
      };
      var pathEquals = function(path1, path2) {
        if (path1.length !== path2.length) {
          return false;
        }
        for (var i = 0; i < path1.length; i++) {
          if (!keysEqual(null, path1[i], path2[i])) {
            return false;
          }
        }
        return true;
      };
      var updateGroupOffsets = function updateGroupOffsets2(that, items, path, offset, additionalGroupInfo) {
        if (!items) {
          return;
        }
        for (var i = 0; i < items.length; i++) {
          var item = items[i];
          if ("key" in item && void 0 !== item.items) {
            path.push(item.key);
            if (additionalGroupInfo && pathEquals(additionalGroupInfo.path, path) && !item.isContinuation) {
              additionalGroupInfo.offset = offset;
            }
            var groupInfo = that.findGroupInfo(path);
            if (groupInfo && !item.isContinuation) {
              groupInfo.offset = offset;
            }
            if (groupInfo && !groupInfo.isExpanded) {
              offset += groupInfo.count;
            } else {
              offset = updateGroupOffsets2(that, item.items, path, offset, additionalGroupInfo);
            }
            path.pop();
          } else {
            offset++;
          }
        }
        return offset;
      };
      var getGroupCount = function getGroupCount2(item, groupCount) {
        var count = item.count || item.items.length;
        if (!item.count && groupCount > 1) {
          count = 0;
          for (var i = 0; i < item.items.length; i++) {
            count += getGroupCount2(item.items[i], groupCount - 1);
          }
        }
        return count;
      };
      return {
        handleDataLoading: function(options) {
          var storeLoadOptions = options.storeLoadOptions;
          var collapsedGroups = [];
          var collapsedItemsCount = 0;
          var skipFirstItem = false;
          var take;
          var group = options.loadOptions.group;
          var skipCorrection = 0;
          !function(storeLoadOptions2, loadOptions2) {
            if (loadOptions2.group) {
              var groups = ui_data_grid_core_default.normalizeSortingInfo(loadOptions2.group);
              var sorts = ui_data_grid_core_default.normalizeSortingInfo(storeLoadOptions2.sort);
              storeLoadOptions2.sort = store_helper_default.arrangeSortingInfo(groups, sorts);
              delete loadOptions2.group;
            }
          }(storeLoadOptions, options.loadOptions);
          options.group = options.group || group;
          if (options.isCustomLoading) {
            return;
          }
          var loadOptions = extend({}, storeLoadOptions);
          loadOptions.skip = correctSkipLoadOption(this, storeLoadOptions.skip);
          if (loadOptions.skip && loadOptions.take && group) {
            loadOptions.skip--;
            loadOptions.take++;
            skipFirstItem = true;
          }
          if (loadOptions.take && group) {
            take = loadOptions.take;
            loadOptions.take++;
          }
          foreachCollapsedGroups(this, function(groupInfo) {
            if (groupInfo.offset >= loadOptions.skip + loadOptions.take + skipCorrection) {
              return false;
            } else if (groupInfo.offset >= loadOptions.skip + skipCorrection && groupInfo.count) {
              skipCorrection += groupInfo.count - 1;
              collapsedGroups.push(groupInfo);
              collapsedItemsCount += groupInfo.count;
            }
          });
          each(collapsedGroups, function() {
            loadOptions.filter = function(path, storeLoadOptions2, group2) {
              var groups = ui_data_grid_core_default.normalizeSortingInfo(group2 || storeLoadOptions2.group);
              var filter = [];
              for (var i = 0; i < path.length; i++) {
                var filterElement = [];
                for (var j = 0; j <= i; j++) {
                  filterElement.push([groups[j].selector, i === j ? "<>" : "=", path[j]]);
                }
                filter.push(ui_data_grid_core_default.combineFilters(filterElement));
              }
              filter = ui_data_grid_core_default.combineFilters(filter, "or");
              return ui_data_grid_core_default.combineFilters([filter, storeLoadOptions2.filter]);
            }(this.path, loadOptions, group);
          });
          options.storeLoadOptions = loadOptions;
          options.collapsedGroups = collapsedGroups;
          options.collapsedItemsCount = collapsedItemsCount;
          options.skip = loadOptions.skip || 0;
          options.skipFirstItem = skipFirstItem;
          options.take = take;
        },
        handleDataLoaded: function(options, callBase) {
          var data = options.data;
          var collapsedGroups = options.collapsedGroups;
          var groups = ui_data_grid_core_default.normalizeSortingInfo(options.group);
          var groupCount = groups.length;
          function appendCollapsedPath(data2, path, groups2, collapsedGroup, offset) {
            if (!data2 || !path.length || !groups2.length) {
              return;
            }
            var keyValue;
            var i;
            var pathValue = toComparable(path[0], true);
            for (i = 0; i < data2.length; i++) {
              keyValue = toComparable(data2[i].key, true);
              if (offset >= collapsedGroup.offset || pathValue === keyValue) {
                break;
              } else {
                offset += getGroupCount(data2[i], groups2.length);
              }
            }
            if (!data2.length || pathValue !== keyValue) {
              data2.splice(i, 0, {
                key: path[0],
                items: [],
                count: 1 === path.length ? collapsedGroup.count : void 0
              });
            }
            appendCollapsedPath(data2[i].items, path.slice(1), groups2.slice(1), collapsedGroup, offset);
          }
          if (options.collapsedItemsCount && options.extra && options.extra.totalCount >= 0) {
            if (!options.extra._totalCountWasIncreasedByCollapsedItems) {
              options.extra.totalCount += options.collapsedItemsCount;
              options.extra._totalCountWasIncreasedByCollapsedItems = true;
            }
          }
          callBase(options);
          if (groupCount) {
            var query = query_default(data);
            store_helper_default.multiLevelGroup(query, groups).enumerate().done(function(groupedData) {
              data = groupedData;
            });
            if (collapsedGroups) {
              for (var pathIndex = 0; pathIndex < collapsedGroups.length; pathIndex++) {
                appendCollapsedPath(data, collapsedGroups[pathIndex].path, groups, collapsedGroups[pathIndex], options.skip);
              }
            }
            if (!options.isCustomLoading) {
              !function processGroupItems(that, items, path, offset, skipFirstItem, take) {
                var removeLastItemsCount = 0;
                var needRemoveFirstItem = false;
                for (var i = 0; i < items.length; i++) {
                  var item = items[i];
                  if (void 0 !== item.items) {
                    path.push(item.key);
                    var groupInfo = that.findGroupInfo(path);
                    if (groupInfo && !groupInfo.isExpanded) {
                      item.collapsedItems = item.items;
                      item.items = null;
                      offset += groupInfo.count;
                      take--;
                      if (take < 0) {
                        removeLastItemsCount++;
                      }
                      if (skipFirstItem) {
                        needRemoveFirstItem = true;
                      }
                    } else if (item.items) {
                      var offsetInfo = processGroupItems(that, item.items, path, offset, skipFirstItem, take);
                      if (skipFirstItem) {
                        if (offsetInfo.offset - offset > 1) {
                          item.isContinuation = true;
                        } else {
                          needRemoveFirstItem = true;
                        }
                      }
                      offset = offsetInfo.offset;
                      take = offsetInfo.take;
                      if (take < 0) {
                        if (item.items.length) {
                          item.isContinuationOnNextPage = true;
                        } else {
                          removeLastItemsCount++;
                        }
                      }
                    }
                    path.pop();
                  } else {
                    if (skipFirstItem) {
                      needRemoveFirstItem = true;
                    }
                    offset++;
                    take--;
                    if (take < 0) {
                      removeLastItemsCount++;
                    }
                  }
                  skipFirstItem = false;
                }
                if (needRemoveFirstItem) {
                  items.splice(0, 1);
                }
                if (removeLastItemsCount) {
                  items.splice(-removeLastItemsCount, removeLastItemsCount);
                }
                return {
                  offset,
                  take
                };
              }(this, data, [], options.skip, options.skipFirstItem, options.take);
            }
            options.data = data;
          }
        },
        isGroupItemCountable: function(item) {
          return null === item.items;
        },
        updateTotalItemsCount: function() {
          var itemsCountCorrection = 0;
          foreachCollapsedGroups(this, function(groupInfo) {
            if (groupInfo.count) {
              itemsCountCorrection -= groupInfo.count - 1;
            }
          });
          this.callBase(itemsCountCorrection);
        },
        changeRowExpand: function(path) {
          var that = this;
          var dataSource = that._dataSource;
          var beginPageIndex = dataSource.beginPageIndex ? dataSource.beginPageIndex() : dataSource.pageIndex();
          var dataSourceItems = dataSource.items();
          var offset = correctSkipLoadOption(that, beginPageIndex * dataSource.pageSize());
          var groupInfo = that.findGroupInfo(path);
          var groupCountQuery;
          if (groupInfo && !groupInfo.isExpanded) {
            groupCountQuery = new Deferred().resolve(groupInfo.count);
          } else {
            groupCountQuery = loadTotalCount(dataSource, {
              filter: createGroupFilter(path, {
                filter: dataSource.filter(),
                group: dataSource.group()
              })
            });
          }
          return when(groupCountQuery).done(function(count) {
            count = parseInt(count.length ? count[0] : count);
            if (groupInfo) {
              updateGroupOffsets(that, dataSourceItems, [], offset);
              groupInfo.isExpanded = !groupInfo.isExpanded;
              groupInfo.count = count;
            } else {
              groupInfo = {
                offset: -1,
                count,
                path,
                isExpanded: false
              };
              updateGroupOffsets(that, dataSourceItems, [], offset, groupInfo);
              if (groupInfo.offset >= 0) {
                that.addGroupInfo(groupInfo);
              }
            }
            that.updateTotalItemsCount();
          }).fail(function() {
            dataSource._eventsStrategy.fireEvent("loadError", arguments);
          });
        },
        allowCollapseAll: function() {
          return false;
        },
        refresh: function(options, operationTypes) {
          var that = this;
          var storeLoadOptions = options.storeLoadOptions;
          var dataSource = that._dataSource;
          this.callBase.apply(this, arguments);
          if (operationTypes.reload) {
            return foreachCollapsedGroups(that, function(groupInfo) {
              var groupCountQuery = loadTotalCount(dataSource, {
                filter: createGroupFilter(groupInfo.path, storeLoadOptions)
              });
              var groupOffsetQuery = loadTotalCount(dataSource, {
                filter: createOffsetFilter(groupInfo.path, storeLoadOptions)
              });
              return when(groupOffsetQuery, groupCountQuery).done(function(offset, count) {
                offset = parseInt(offset.length ? offset[0] : offset);
                count = parseInt(count.length ? count[0] : count);
                groupInfo.offset = offset;
                if (groupInfo.count !== count) {
                  groupInfo.count = count;
                  that.updateTotalItemsCount();
                }
              });
            }, true);
          }
        }
      };
    }());
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grouping.collapsed.js
function getContinuationGroupCount(groupOffset, pageSize, groupSize, groupIndex) {
  groupIndex = groupIndex || 0;
  if (pageSize > 1 && groupSize > 0) {
    var pageOffset = groupOffset - Math.floor(groupOffset / pageSize) * pageSize || pageSize;
    pageOffset += groupSize - groupIndex - 2;
    if (pageOffset < 0) {
      pageOffset += pageSize;
    }
    return Math.floor(pageOffset / (pageSize - groupIndex - 1));
  }
  return 0;
}
var GroupingHelper3;
var init_ui_data_grid_grouping_collapsed = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grouping.collapsed.js"() {
    init_extend();
    init_iterator();
    init_ui_data_grid_core();
    init_ui_data_grid_grouping_core();
    init_ui_data_grid_utils();
    init_ui_errors();
    init_errors();
    init_deferred();
    GroupingHelper3 = GroupingHelper.inherit(/* @__PURE__ */ function() {
      var foreachExpandedGroups = function(that, callback, updateGroups) {
        return that.foreachGroups(function(groupInfo, parents) {
          if (groupInfo.isExpanded) {
            return callback(groupInfo, parents);
          }
        }, true, false, updateGroups, updateGroups);
      };
      var processGroupItems = function processGroupItems2(that, items, groupsCount, expandedInfo, path, isCustomLoading, isLastGroupExpanded) {
        var isExpanded;
        expandedInfo.items = expandedInfo.items || [];
        expandedInfo.paths = expandedInfo.paths || [];
        expandedInfo.count = expandedInfo.count || 0;
        expandedInfo.lastCount = expandedInfo.lastCount || 0;
        if (!groupsCount) {
          return;
        }
        for (var i = 0; i < items.length; i++) {
          var item = items[i];
          if (void 0 !== item.items) {
            path.push(item.key);
            if (isCustomLoading) {
              isExpanded = true;
            } else {
              var groupInfo = that.findGroupInfo(path);
              isExpanded = groupInfo && groupInfo.isExpanded;
            }
            if (!isExpanded) {
              item.collapsedItems = item.items;
              item.items = null;
            } else if (item.items) {
              processGroupItems2(that, item.items, groupsCount - 1, expandedInfo, path, isCustomLoading, isLastGroupExpanded);
            } else if (1 === groupsCount && item.count && (!isCustomLoading || isLastGroupExpanded)) {
              expandedInfo.items.push(item);
              expandedInfo.paths.push(path.slice(0));
              expandedInfo.count += expandedInfo.lastCount;
              expandedInfo.lastCount = item.count;
            }
            path.pop();
          }
        }
      };
      var updateGroupInfoItem = function(that, item, isLastGroupLevel, path, offset) {
        var groupInfo = that.findGroupInfo(path);
        var count;
        if (!groupInfo) {
          if (isLastGroupLevel) {
            count = item.count > 0 ? item.count : item.items.length;
          }
          that.addGroupInfo({
            isExpanded: that._isGroupExpanded(path.length - 1),
            path: path.slice(0),
            offset,
            count: count || 0
          });
        } else {
          if (isLastGroupLevel) {
            groupInfo.count = item.count > 0 ? item.count : item.items && item.items.length || 0;
          } else {
            item.count = groupInfo.count || item.count;
          }
          groupInfo.offset = offset;
        }
      };
      var updateGroupInfos = function updateGroupInfos2(that, options, items, loadedGroupCount, groupIndex, path, parentIndex) {
        var groupCount = options.group ? options.group.length : 0;
        var isLastGroupLevel = groupCount === loadedGroupCount;
        var remotePaging = options.remoteOperations.paging;
        var offset = 0;
        var totalCount = 0;
        var count;
        groupIndex = groupIndex || 0;
        path = path || [];
        if (remotePaging && !parentIndex) {
          offset = 0 === groupIndex ? options.skip || 0 : options.skips[groupIndex - 1] || 0;
        }
        if (groupIndex >= loadedGroupCount) {
          return items.length;
        }
        for (var i = 0; i < items.length; i++) {
          var item = items[i];
          if (item) {
            path.push(item.key);
            if (!item.count && !item.items || void 0 === item.items) {
              return -1;
            }
            updateGroupInfoItem(that, item, isLastGroupLevel, path, offset + i);
            count = item.items ? updateGroupInfos2(that, options, item.items, loadedGroupCount, groupIndex + 1, path, i) : item.count || -1;
            if (count < 0) {
              return -1;
            }
            totalCount += count;
            path.pop();
          }
        }
        return totalCount;
      };
      var isGroupExpanded = function(groups, groupIndex) {
        return groups && groups.length && groups[groupIndex] && !!groups[groupIndex].isExpanded;
      };
      var getTotalOffset = function(groupInfos, pageSize, offset) {
        var groupSize;
        var totalOffset = offset;
        for (var groupIndex = 0; groupIndex < groupInfos.length; groupIndex++) {
          groupSize = groupInfos[groupIndex].offset + 1;
          if (groupIndex > 0) {
            groupSize += groupInfos[groupIndex - 1].childrenTotalCount;
            if (pageSize) {
              groupSize += getContinuationGroupCount(totalOffset, pageSize, groupSize, groupIndex - 1) * groupIndex;
            }
          }
          totalOffset += groupSize;
        }
        return totalOffset;
      };
      function applyContinuationToGroupItem(options, expandedInfo, groupLevel, expandedItemIndex) {
        var item = expandedInfo.items[expandedItemIndex];
        var skip = options.skips && options.skips[groupLevel];
        var take = options.takes && options.takes[groupLevel];
        var isLastExpandedItem = expandedItemIndex === expandedInfo.items.length - 1;
        var isFirstExpandedItem = 0 === expandedItemIndex;
        var lastExpandedItemSkip = isFirstExpandedItem && skip || 0;
        var isItemsTruncatedByTake = item.count > take + lastExpandedItemSkip;
        if (isFirstExpandedItem && void 0 !== skip) {
          item.isContinuation = true;
        }
        if (isLastExpandedItem && void 0 !== take && isItemsTruncatedByTake) {
          item.isContinuationOnNextPage = true;
        }
      }
      function isDataDeferred(data) {
        return !Array.isArray(data);
      }
      function makeDataDeferred(options) {
        if (!isDataDeferred(options.data)) {
          options.data = new Deferred();
        }
      }
      function loadGroupItems(that, options, loadedGroupCount, expandedInfo, groupLevel, data) {
        if (!options.isCustomLoading) {
          expandedInfo = {};
          processGroupItems(that, data, loadedGroupCount, expandedInfo, []);
          !function(options2, expandedInfo2, currentGroupCount) {
            var currentGroupIndex = currentGroupCount - 1;
            var groupCount2 = options2.group ? options2.group.length : 0;
            expandedInfo2.skip = options2.skips && options2.skips[currentGroupIndex];
            if (options2.takes && void 0 !== options2.takes[currentGroupIndex]) {
              if (groupCount2 === currentGroupCount) {
                expandedInfo2.take = expandedInfo2.count ? expandedInfo2.count - (expandedInfo2.skip || 0) : 0;
              } else {
                expandedInfo2.take = 0;
              }
              expandedInfo2.take += options2.takes[currentGroupIndex];
            }
          }(options, expandedInfo, loadedGroupCount);
        }
        var groupCount = options.group ? options.group.length : 0;
        if (expandedInfo.paths.length && groupCount - loadedGroupCount > 0) {
          makeDataDeferred(options);
          !function(that2, options2, expandedInfo2, loadedGroupCount2, groupLevel2, data2) {
            var groups = options2.group || [];
            var currentGroup = groups[groupLevel2 + 1];
            var deferreds = [];
            each(expandedInfo2.paths, function(expandedItemIndex) {
              var loadOptions = {
                requireTotalCount: false,
                requireGroupCount: true,
                group: [currentGroup],
                groupSummary: options2.storeLoadOptions.groupSummary,
                filter: createGroupFilter(expandedInfo2.paths[expandedItemIndex], {
                  filter: options2.storeLoadOptions.filter,
                  group: groups
                }),
                select: options2.storeLoadOptions.select
              };
              if (0 === expandedItemIndex) {
                loadOptions.skip = expandedInfo2.skip || 0;
              }
              if (expandedItemIndex === expandedInfo2.paths.length - 1) {
                loadOptions.take = expandedInfo2.take;
              }
              var loadResult = 0 === loadOptions.take ? [] : that2._dataSource.loadFromStore(loadOptions);
              when(loadResult).done(function(data3) {
                var item = expandedInfo2.items[expandedItemIndex];
                applyContinuationToGroupItem(options2, expandedInfo2, groupLevel2, expandedItemIndex);
                item.items = data3;
              });
              deferreds.push(loadResult);
            });
            when.apply(null, deferreds).done(function() {
              updateGroupInfos(that2, options2, data2, loadedGroupCount2 + 1);
              loadGroupItems(that2, options2, loadedGroupCount2 + 1, expandedInfo2, groupLevel2 + 1, data2);
            });
          }(that, options, expandedInfo, loadedGroupCount, groupLevel, data);
        } else if (expandedInfo.paths.length && options.storeLoadOptions.group) {
          makeDataDeferred(options);
          !function(that2, options2, expandedInfo2, data2) {
            var expandedFilters = [];
            var groups = options2.group || [];
            each(expandedInfo2.paths, function(_, expandedPath) {
              expandedFilters.push(createGroupFilter(expandedPath, {
                group: options2.isCustomLoading ? options2.storeLoadOptions.group : groups
              }));
            });
            var filter = options2.storeLoadOptions.filter;
            if (!options2.storeLoadOptions.isLoadingAll) {
              filter = ui_data_grid_core_default.combineFilters([filter, ui_data_grid_core_default.combineFilters(expandedFilters, "or")]);
            }
            var loadOptions = extend({}, options2.storeLoadOptions, {
              requireTotalCount: false,
              requireGroupCount: false,
              group: null,
              sort: groups.concat(ui_data_grid_core_default.normalizeSortingInfo(options2.storeLoadOptions.sort || [])),
              filter
            });
            var isPagingLocal = that2._dataSource.isLastLevelGroupItemsPagingLocal();
            if (!isPagingLocal) {
              loadOptions.skip = expandedInfo2.skip;
              loadOptions.take = expandedInfo2.take;
            }
            when(0 === expandedInfo2.take ? [] : that2._dataSource.loadFromStore(loadOptions)).done(function(items, extra) {
              if (isPagingLocal) {
                items = that2._dataSource.sortLastLevelGroupItems(items, groups, expandedInfo2.paths);
                items = expandedInfo2.skip ? items.slice(expandedInfo2.skip) : items;
                items = expandedInfo2.take ? items.slice(0, expandedInfo2.take) : items;
              }
              each(expandedInfo2.items, function(index, item) {
                var itemCount = item.count - (0 === index && expandedInfo2.skip || 0);
                var expandedItems = items.splice(0, itemCount);
                applyContinuationToGroupItem(options2, expandedInfo2, groups.length - 1, index);
                item.items = expandedItems;
              });
              options2.data.resolve(data2);
            }).fail(options2.data.reject);
          }(that, options, expandedInfo, data);
        } else if (isDataDeferred(options.data)) {
          options.data.resolve(data);
        }
      }
      var loadGroupTotalCount = function(dataSource, options) {
        var d = new Deferred();
        var isGrouping = !!(options.group && options.group.length);
        var loadOptions = extend({
          skip: 0,
          take: 1,
          requireGroupCount: isGrouping,
          requireTotalCount: !isGrouping
        }, options, {
          group: isGrouping ? options.group : null
        });
        dataSource.load(loadOptions).done(function(data, extra) {
          var count = extra && (isGrouping ? extra.groupCount : extra.totalCount);
          if (!isFinite(count)) {
            d.reject(errors.Error(isGrouping ? "E4022" : "E4021"));
            return;
          }
          d.resolve(count);
        }).fail(d.reject.bind(d));
        return d;
      };
      return {
        updateTotalItemsCount: function(options) {
          var totalItemsCount = 0;
          var totalCount = options.extra && options.extra.totalCount || 0;
          var groupCount = options.extra && options.extra.groupCount || 0;
          var pageSize = this._dataSource.pageSize();
          var isVirtualPaging = this._isVirtualPaging();
          foreachExpandedGroups(this, function(groupInfo) {
            groupInfo.childrenTotalCount = 0;
          });
          foreachExpandedGroups(this, function(groupInfo, parents) {
            var totalOffset = getTotalOffset(parents, isVirtualPaging ? 0 : pageSize, totalItemsCount);
            var count = groupInfo.count + groupInfo.childrenTotalCount;
            if (!isVirtualPaging) {
              count += getContinuationGroupCount(totalOffset, pageSize, count, parents.length - 1);
            }
            if (parents[parents.length - 2]) {
              parents[parents.length - 2].childrenTotalCount += count;
            } else {
              totalItemsCount += count;
            }
          });
          this.callBase(totalItemsCount - totalCount + groupCount);
        },
        _isGroupExpanded: function(groupIndex) {
          var groups = this._dataSource.group();
          return isGroupExpanded(groups, groupIndex);
        },
        _updatePagingOptions: function(options, callback) {
          var isVirtualPaging = this._isVirtualPaging();
          var pageSize = this._dataSource.pageSize();
          var skips = [];
          var takes = [];
          var skipChildrenTotalCount = 0;
          var childrenTotalCount = 0;
          if (options.take) {
            foreachExpandedGroups(this, function(groupInfo) {
              groupInfo.childrenTotalCount = 0;
              groupInfo.skipChildrenTotalCount = 0;
            });
            foreachExpandedGroups(this, function(groupInfo, parents) {
              var take;
              var takeCorrection = 0;
              var parentTakeCorrection = 0;
              var totalOffset = getTotalOffset(parents, isVirtualPaging ? 0 : pageSize, childrenTotalCount);
              var continuationGroupCount = 0;
              var skipContinuationGroupCount = 0;
              var groupInfoCount = groupInfo.count + groupInfo.childrenTotalCount;
              var childrenGroupInfoCount = groupInfoCount;
              callback && callback(groupInfo, totalOffset);
              var skip = options.skip - totalOffset;
              if (totalOffset <= options.skip + options.take && groupInfoCount) {
                take = options.take;
                if (!isVirtualPaging) {
                  continuationGroupCount = getContinuationGroupCount(totalOffset, pageSize, groupInfoCount, parents.length - 1);
                  groupInfoCount += continuationGroupCount * parents.length;
                  childrenGroupInfoCount += continuationGroupCount;
                  if (pageSize && skip >= 0) {
                    takeCorrection = parents.length;
                    parentTakeCorrection = parents.length - 1;
                    skipContinuationGroupCount = Math.floor(skip / pageSize);
                  }
                }
                if (skip >= 0) {
                  if (totalOffset + groupInfoCount > options.skip) {
                    skips.unshift(skip - skipContinuationGroupCount * takeCorrection - groupInfo.skipChildrenTotalCount);
                  }
                  if (totalOffset + groupInfoCount >= options.skip + take) {
                    takes.unshift(take - takeCorrection - groupInfo.childrenTotalCount + groupInfo.skipChildrenTotalCount);
                  }
                } else if (totalOffset + groupInfoCount >= options.skip + take) {
                  takes.unshift(take + skip - groupInfo.childrenTotalCount);
                }
              }
              if (totalOffset <= options.skip) {
                if (parents[parents.length - 2]) {
                  parents[parents.length - 2].skipChildrenTotalCount += Math.min(childrenGroupInfoCount, skip + 1 - skipContinuationGroupCount * parentTakeCorrection);
                } else {
                  skipChildrenTotalCount += Math.min(childrenGroupInfoCount, skip + 1);
                }
              }
              if (totalOffset <= options.skip + take) {
                groupInfoCount = Math.min(childrenGroupInfoCount, skip + take - (skipContinuationGroupCount + 1) * parentTakeCorrection);
                if (parents[parents.length - 2]) {
                  parents[parents.length - 2].childrenTotalCount += groupInfoCount;
                } else {
                  childrenTotalCount += groupInfoCount;
                }
              }
            });
            options.skip -= skipChildrenTotalCount;
            options.take -= childrenTotalCount - skipChildrenTotalCount;
          }
          options.skips = skips;
          options.takes = takes;
        },
        changeRowExpand: function(path) {
          var groupInfo = this.findGroupInfo(path);
          var dataSource = this._dataSource;
          var remoteGroupPaging = dataSource.remoteOperations().groupPaging;
          var groups = ui_data_grid_core_default.normalizeSortingInfo(dataSource.group());
          if (groupInfo) {
            groupInfo.isExpanded = !groupInfo.isExpanded;
            if (remoteGroupPaging && groupInfo.isExpanded && path.length < groups.length) {
              return loadGroupTotalCount(dataSource, {
                filter: createGroupFilter(path, {
                  filter: dataSource.lastLoadOptions().filter,
                  group: dataSource.group()
                }),
                group: [groups[path.length]],
                select: dataSource.select()
              }).done(function(groupCount) {
                groupInfo.count = groupCount;
              });
            }
            return new Deferred().resolve();
          }
          return new Deferred().reject();
        },
        handleDataLoading: function(options) {
          var storeLoadOptions = options.storeLoadOptions;
          var groups = ui_data_grid_core_default.normalizeSortingInfo(storeLoadOptions.group || options.loadOptions.group);
          if (options.isCustomLoading || !groups.length) {
            return;
          }
          if (options.remoteOperations.grouping) {
            var remotePaging = this._dataSource.remoteOperations().paging;
            storeLoadOptions.group = ui_data_grid_core_default.normalizeSortingInfo(storeLoadOptions.group);
            storeLoadOptions.group.forEach(function(group, index) {
              var isLastGroup = index === storeLoadOptions.group.length - 1;
              group.isExpanded = !remotePaging || !isLastGroup;
            });
          }
          options.group = options.group || groups;
          if (options.remoteOperations.paging) {
            options.skip = storeLoadOptions.skip;
            options.take = storeLoadOptions.take;
            storeLoadOptions.requireGroupCount = true;
            storeLoadOptions.group = groups.slice(0, 1);
            this._updatePagingOptions(options);
            storeLoadOptions.skip = options.skip;
            storeLoadOptions.take = options.take;
          }
        },
        handleDataLoadedCore: function(options, callBase) {
          var loadedGroupCount = ui_data_grid_core_default.normalizeSortingInfo(options.storeLoadOptions.group || options.loadOptions.group).length;
          var groupCount = options.group ? options.group.length : 0;
          var totalCount;
          var expandedInfo = {};
          if (options.isCustomLoading) {
            callBase(options);
            processGroupItems(this, options.data, loadedGroupCount, expandedInfo, [], options.isCustomLoading, options.storeLoadOptions.isLoadingAll);
          } else {
            if (!options.remoteOperations.paging) {
              this.foreachGroups(function(groupInfo) {
                groupInfo.count = 0;
              });
            }
            totalCount = updateGroupInfos(this, options, options.data, loadedGroupCount);
            if (totalCount < 0) {
              options.data = new Deferred().reject(ui_errors_default.Error("E1037"));
              return;
            }
            if (!options.remoteOperations.paging) {
              if (loadedGroupCount && options.extra && options.loadOptions.requireTotalCount) {
                options.extra.totalCount = totalCount;
                options.extra.groupCount = options.data.length;
              }
            }
            if (groupCount && options.storeLoadOptions.requireGroupCount && !isFinite(options.extra.groupCount)) {
              options.data = new Deferred().reject(errors.Error("E4022"));
              return;
            }
            this.updateTotalItemsCount(options);
            if (!options.remoteOperations.paging) {
              this._updatePagingOptions(options);
            }
            callBase(options);
            if (!options.remoteOperations.paging) {
              this._processPaging(options, loadedGroupCount);
            }
          }
          loadGroupItems(this, options, loadedGroupCount, expandedInfo, 0, options.data);
        },
        _processSkips: function(items, skips, groupCount) {
          if (!groupCount) {
            return;
          }
          var firstItem = items[0];
          var skip = skips[0];
          var children = firstItem && firstItem.items;
          if (void 0 !== skip) {
            firstItem.isContinuation = true;
            if (children) {
              firstItem.items = children.slice(skip);
              this._processSkips(firstItem.items, skips.slice(1), groupCount - 1);
            }
          }
        },
        _processTakes: function(items, skips, takes, groupCount, parents) {
          if (!groupCount || !items) {
            return;
          }
          parents = parents || [];
          var lastItem = items[items.length - 1];
          var children = lastItem && lastItem.items;
          var take = takes[0];
          var skip = skips[0];
          if (lastItem) {
            var maxTakeCount = lastItem.count - (lastItem.isContinuation && skip || 0) || children.length;
            if (void 0 !== take && maxTakeCount > take) {
              lastItem.isContinuationOnNextPage = true;
              parents.forEach(function(parent) {
                parent.isContinuationOnNextPage = true;
              });
              if (children) {
                children = children.slice(0, take);
                lastItem.items = children;
              }
            }
            parents.push(lastItem);
            this._processTakes(children, skips.slice(1), takes.slice(1), groupCount - 1, parents);
          }
        },
        _processPaging: function(options, groupCount) {
          this._processSkips(options.data, options.skips, groupCount);
          this._processTakes(options.data, options.skips, options.takes, groupCount);
        },
        isLastLevelGroupItemsPagingLocal: function() {
          return false;
        },
        sortLastLevelGroupItems: function(items) {
          return items;
        },
        refresh: function(options, operationTypes) {
          var that = this;
          var dataSource = that._dataSource;
          var storeLoadOptions = options.storeLoadOptions;
          var group = options.group || options.storeLoadOptions.group;
          var oldGroups = ui_data_grid_core_default.normalizeSortingInfo(that._group);
          var isExpanded;
          var groupIndex;
          function handleGroup(groupInfo, parents) {
            if (parents.length === groupIndex + 1) {
              groupInfo.isExpanded = isExpanded;
            }
          }
          for (groupIndex = 0; groupIndex < oldGroups.length; groupIndex++) {
            isExpanded = isGroupExpanded(group, groupIndex);
            if (isGroupExpanded(that._group, groupIndex) !== isExpanded) {
              that.foreachGroups(handleGroup);
            }
          }
          that.callBase.apply(this, arguments);
          if (group && options.remoteOperations.paging && operationTypes.reload) {
            return foreachExpandedGroups(that, function(groupInfo) {
              var groupCountQuery = loadGroupTotalCount(dataSource, {
                filter: createGroupFilter(groupInfo.path, {
                  filter: storeLoadOptions.filter,
                  group
                }),
                group: group.slice(groupInfo.path.length),
                select: storeLoadOptions.select
              });
              var groupOffsetQuery = loadGroupTotalCount(dataSource, {
                filter: createOffsetFilter(groupInfo.path, {
                  filter: storeLoadOptions.filter,
                  group
                }, true),
                group: group.slice(groupInfo.path.length - 1, groupInfo.path.length),
                select: storeLoadOptions.select
              });
              return when(groupOffsetQuery, groupCountQuery).done(function(offset, count) {
                offset = parseInt(offset.length ? offset[0] : offset);
                count = parseInt(count.length ? count[0] : count);
                groupInfo.offset = offset;
                if (groupInfo.count !== count) {
                  groupInfo.count = count;
                  that.updateTotalItemsCount(options);
                }
              });
            }, true);
          }
        }
      };
    }());
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grouping.js
var DATAGRID_GROUP_PANEL_CLASS, DATAGRID_GROUP_PANEL_MESSAGE_CLASS, DATAGRID_GROUP_PANEL_ITEM_CLASS, DATAGRID_GROUP_PANEL_LABEL_CLASS, DATAGRID_EXPAND_CLASS, DATAGRID_GROUP_ROW_CLASS, HEADER_FILTER_CLASS_SELECTOR, GroupingDataSourceAdapterExtender, GroupingDataControllerExtender, onGroupingMenuItemClick, GroupingHeaderPanelExtender, GroupingRowsViewExtender, columnHeadersViewExtender;
var init_ui_data_grid_grouping = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grouping.js"() {
    init_renderer();
    init_ui_data_grid_core();
    init_ui_data_grid_grouping_expanded();
    init_ui_data_grid_grouping_collapsed();
    init_message();
    init_ui_data_grid_data_source_adapter();
    init_type();
    init_iterator();
    init_devices();
    init_deferred();
    init_ui_grid_core_accessibility();
    init_accessibility();
    DATAGRID_GROUP_PANEL_CLASS = "dx-datagrid-group-panel";
    DATAGRID_GROUP_PANEL_MESSAGE_CLASS = "dx-group-panel-message";
    DATAGRID_GROUP_PANEL_ITEM_CLASS = "dx-group-panel-item";
    DATAGRID_GROUP_PANEL_LABEL_CLASS = "dx-toolbar-label";
    DATAGRID_EXPAND_CLASS = "dx-datagrid-expand";
    DATAGRID_GROUP_ROW_CLASS = "dx-group-row";
    HEADER_FILTER_CLASS_SELECTOR = ".dx-header-filter";
    GroupingDataSourceAdapterExtender = {
      init: function() {
        this.callBase.apply(this, arguments);
        this._initGroupingHelper();
      },
      _initGroupingHelper: function(options) {
        var grouping = this._grouping;
        var isAutoExpandAll = this.option("grouping.autoExpandAll");
        var isFocusedRowEnabled = this.option("focusedRowEnabled");
        var remoteOperations = options ? options.remoteOperations : this.remoteOperations();
        var isODataRemoteOperations = remoteOperations.filtering && remoteOperations.sorting && remoteOperations.paging;
        if (isODataRemoteOperations && !remoteOperations.grouping && (isAutoExpandAll || !isFocusedRowEnabled)) {
          if (!grouping || grouping instanceof GroupingHelper3) {
            this._grouping = new GroupingHelper2(this);
          }
        } else if (!grouping || grouping instanceof GroupingHelper2) {
          this._grouping = new GroupingHelper3(this);
        }
      },
      totalItemsCount: function() {
        var totalCount = this.callBase();
        return totalCount > 0 && this._dataSource.group() && this._dataSource.requireTotalCount() ? totalCount + this._grouping.totalCountCorrection() : totalCount;
      },
      itemsCount: function() {
        return this._dataSource.group() ? this._grouping.itemsCount() || 0 : this.callBase.apply(this, arguments);
      },
      allowCollapseAll: function() {
        return this._grouping.allowCollapseAll();
      },
      isGroupItemCountable: function(item) {
        return this._grouping.isGroupItemCountable(item);
      },
      isRowExpanded: function(key) {
        var groupInfo = this._grouping.findGroupInfo(key);
        return groupInfo ? groupInfo.isExpanded : !this._grouping.allowCollapseAll();
      },
      collapseAll: function(groupIndex) {
        return this._collapseExpandAll(groupIndex, false);
      },
      expandAll: function(groupIndex) {
        return this._collapseExpandAll(groupIndex, true);
      },
      _collapseExpandAll: function(groupIndex, isExpand) {
        var dataSource = this._dataSource;
        var group = dataSource.group();
        var groups = ui_data_grid_core_default.normalizeSortingInfo(group || []);
        if (groups.length) {
          for (var i = 0; i < groups.length; i++) {
            if (void 0 === groupIndex || groupIndex === i) {
              groups[i].isExpanded = isExpand;
            } else if (group && group[i]) {
              groups[i].isExpanded = group[i].isExpanded;
            }
          }
          dataSource.group(groups);
          this._grouping.foreachGroups(function(groupInfo, parents) {
            if (void 0 === groupIndex || groupIndex === parents.length - 1) {
              groupInfo.isExpanded = isExpand;
            }
          }, false, true);
          this.resetPagesCache();
        }
        return true;
      },
      refresh: function() {
        this.callBase.apply(this, arguments);
        return this._grouping.refresh.apply(this._grouping, arguments);
      },
      changeRowExpand: function(path) {
        var dataSource = this._dataSource;
        if (dataSource.group()) {
          dataSource.beginLoading();
          if (this._lastLoadOptions) {
            this._lastLoadOptions.groupExpand = true;
          }
          return this._changeRowExpandCore(path).always(function() {
            dataSource.endLoading();
          });
        }
      },
      _changeRowExpandCore: function(path) {
        return this._grouping.changeRowExpand(path);
      },
      _hasGroupLevelsExpandState: function(group, isExpanded) {
        if (group && Array.isArray(group)) {
          for (var i = 0; i < group.length; i++) {
            if (group[i].isExpanded === isExpanded) {
              return true;
            }
          }
        }
      },
      _customizeRemoteOperations: function(options, operationTypes) {
        var remoteOperations = options.remoteOperations;
        if (options.storeLoadOptions.group) {
          if (remoteOperations.grouping && !options.isCustomLoading) {
            if (!remoteOperations.groupPaging || this._hasGroupLevelsExpandState(options.storeLoadOptions.group, true)) {
              remoteOperations.paging = false;
            }
          }
          if (!remoteOperations.grouping && (!remoteOperations.sorting || !remoteOperations.filtering || options.isCustomLoading || this._hasGroupLevelsExpandState(options.storeLoadOptions.group, false))) {
            remoteOperations.paging = false;
          }
        } else if (!options.isCustomLoading && remoteOperations.paging && operationTypes.grouping) {
          this.resetCache();
        }
        this.callBase.apply(this, arguments);
      },
      _handleDataLoading: function(options) {
        this.callBase(options);
        this._initGroupingHelper(options);
        return this._grouping.handleDataLoading(options);
      },
      _handleDataLoaded: function(options) {
        return this._grouping.handleDataLoaded(options, this.callBase.bind(this));
      },
      _handleDataLoadedCore: function(options) {
        return this._grouping.handleDataLoadedCore(options, this.callBase.bind(this));
      }
    };
    ui_data_grid_data_source_adapter_default.extend(GroupingDataSourceAdapterExtender);
    GroupingDataControllerExtender = {
      init: function() {
        this.callBase();
        this.createAction("onRowExpanding");
        this.createAction("onRowExpanded");
        this.createAction("onRowCollapsing");
        this.createAction("onRowCollapsed");
      },
      _beforeProcessItems: function(items) {
        var groupColumns = this._columnsController.getGroupColumns();
        items = this.callBase(items);
        if (items.length && groupColumns.length) {
          items = this._processGroupItems(items, groupColumns.length);
        }
        return items;
      },
      _processItem: function(item, options) {
        if (isDefined(item.groupIndex) && isString(item.rowType) && 0 === item.rowType.indexOf("group")) {
          item = this._processGroupItem(item, options);
          options.dataIndex = 0;
        } else {
          item = this.callBase.apply(this, arguments);
        }
        return item;
      },
      _processGroupItem: function(item) {
        return item;
      },
      _processGroupItems: function(items, groupsCount, options) {
        var groupedColumns = this._columnsController.getGroupColumns();
        var column = groupedColumns[groupedColumns.length - groupsCount];
        if (!options) {
          var scrollingMode = this.option("scrolling.mode");
          options = {
            collectContinuationItems: "virtual" !== scrollingMode && "infinite" !== scrollingMode,
            resultItems: [],
            path: [],
            values: []
          };
        }
        var resultItems = options.resultItems;
        if (options.data) {
          if (options.collectContinuationItems || !options.data.isContinuation) {
            resultItems.push({
              rowType: "group",
              data: options.data,
              groupIndex: options.path.length - 1,
              isExpanded: !!options.data.items,
              key: options.path.slice(0),
              values: options.values.slice(0)
            });
          }
        }
        if (items) {
          if (0 === groupsCount) {
            resultItems.push.apply(resultItems, items);
          } else {
            for (var i = 0; i < items.length; i++) {
              var item = items[i];
              if (item && "items" in item) {
                options.data = item;
                options.path.push(item.key);
                options.values.push(column && column.deserializeValue && !column.calculateDisplayValue ? column.deserializeValue(item.key) : item.key);
                this._processGroupItems(item.items, groupsCount - 1, options);
                options.data = void 0;
                options.path.pop();
                options.values.pop();
              } else {
                resultItems.push(item);
              }
            }
          }
        }
        return resultItems;
      },
      publicMethods: function() {
        return this.callBase().concat(["collapseAll", "expandAll", "isRowExpanded", "expandRow", "collapseRow"]);
      },
      collapseAll: function(groupIndex) {
        var dataSource = this._dataSource;
        if (dataSource && dataSource.collapseAll(groupIndex)) {
          dataSource.pageIndex(0);
          dataSource.reload();
        }
      },
      expandAll: function(groupIndex) {
        var dataSource = this._dataSource;
        if (dataSource && dataSource.expandAll(groupIndex)) {
          dataSource.pageIndex(0);
          dataSource.reload();
        }
      },
      changeRowExpand: function(key) {
        var that = this;
        var expanded = that.isRowExpanded(key);
        var args = {
          key,
          expanded
        };
        that.executeAction(expanded ? "onRowCollapsing" : "onRowExpanding", args);
        if (!args.cancel) {
          return when(that._changeRowExpandCore(key)).done(function() {
            args.expanded = !expanded;
            that.executeAction(expanded ? "onRowCollapsed" : "onRowExpanded", args);
          });
        }
        return new Deferred().resolve();
      },
      _changeRowExpandCore: function(key) {
        var that = this;
        var dataSource = this._dataSource;
        var d = new Deferred();
        if (!dataSource) {
          d.resolve();
        } else {
          when(dataSource.changeRowExpand(key)).done(function() {
            that.load().done(d.resolve).fail(d.reject);
          }).fail(d.reject);
        }
        return d;
      },
      isRowExpanded: function(key) {
        var dataSource = this._dataSource;
        return dataSource && dataSource.isRowExpanded(key);
      },
      expandRow: function(key) {
        if (!this.isRowExpanded(key)) {
          return this.changeRowExpand(key);
        }
        return new Deferred().resolve();
      },
      collapseRow: function(key) {
        if (this.isRowExpanded(key)) {
          return this.changeRowExpand(key);
        }
        return new Deferred().resolve();
      },
      optionChanged: function(args) {
        if ("grouping" === args.name) {
          args.name = "dataSource";
        }
        this.callBase(args);
      }
    };
    onGroupingMenuItemClick = function(column, params) {
      var columnsController = this._columnsController;
      switch (params.itemData.value) {
        case "group":
          var groups = columnsController._dataSource.group() || [];
          columnsController.columnOption(column.dataField, "groupIndex", groups.length);
          break;
        case "ungroup":
          columnsController.columnOption(column.dataField, "groupIndex", -1);
          break;
        case "ungroupAll":
          this.component.clearGrouping();
      }
    };
    GroupingHeaderPanelExtender = {
      _getToolbarItems: function() {
        var items = this.callBase();
        return this._appendGroupingItem(items);
      },
      _appendGroupingItem: function(items) {
        if (this._isGroupPanelVisible()) {
          var isRendered = false;
          var toolbarItem = {
            template: () => {
              var $groupPanel = renderer_default("<div>").addClass(DATAGRID_GROUP_PANEL_CLASS);
              this._updateGroupPanelContent($groupPanel);
              registerKeyboardAction("groupPanel", this, $groupPanel, void 0, this._handleActionKeyDown.bind(this));
              return $groupPanel;
            },
            name: "groupPanel",
            onItemRendered: () => {
              isRendered && this.renderCompleted.fire();
              isRendered = true;
            },
            location: "before",
            locateInMenu: "never",
            sortIndex: 1
          };
          items.push(toolbarItem);
        }
        return items;
      },
      _handleActionKeyDown: function(args) {
        var event = args.event;
        var $target = renderer_default(event.target);
        var groupColumnIndex = $target.closest(".".concat(DATAGRID_GROUP_PANEL_ITEM_CLASS)).index();
        var column = this._columnsController.getGroupColumns()[groupColumnIndex];
        var columnIndex = column && column.index;
        if ($target.is(HEADER_FILTER_CLASS_SELECTOR)) {
          this.getController("headerFilter").showHeaderFilterMenu(columnIndex, true);
        } else {
          this._processGroupItemAction(columnIndex);
        }
        event.preventDefault();
      },
      _isGroupPanelVisible: function() {
        var groupPanelOptions = this.option("groupPanel");
        var isVisible;
        if (groupPanelOptions) {
          isVisible = groupPanelOptions.visible;
          if ("auto" === isVisible) {
            isVisible = "desktop" === devices_default.current().deviceType ? true : false;
          }
        }
        return isVisible;
      },
      _renderGroupPanelItems: function($groupPanel, groupColumns) {
        var that = this;
        $groupPanel.empty();
        each(groupColumns, function(index, groupColumn) {
          that._createGroupPanelItem($groupPanel, groupColumn);
        });
        restoreFocus(this);
      },
      _createGroupPanelItem: function($rootElement, groupColumn) {
        var $groupPanelItem = renderer_default("<div>").addClass(groupColumn.cssClass).addClass(DATAGRID_GROUP_PANEL_ITEM_CLASS).data("columnData", groupColumn).appendTo($rootElement).text(groupColumn.caption);
        setTabIndex(this, $groupPanelItem);
        return $groupPanelItem;
      },
      _columnOptionChanged: function(e) {
        if (!this._requireReady && !ui_data_grid_core_default.checkChanges(e.optionNames, ["width", "visibleWidth"])) {
          var $toolbarElement = this.element();
          var $groupPanel = $toolbarElement && $toolbarElement.find("." + DATAGRID_GROUP_PANEL_CLASS);
          if ($groupPanel && $groupPanel.length) {
            this._updateGroupPanelContent($groupPanel);
            this.renderCompleted.fire();
          }
        }
        this.callBase();
      },
      _updateGroupPanelContent: function($groupPanel) {
        var groupColumns = this.getController("columns").getGroupColumns();
        var groupPanelOptions = this.option("groupPanel");
        this._renderGroupPanelItems($groupPanel, groupColumns);
        if (groupPanelOptions.allowColumnDragging && !groupColumns.length) {
          renderer_default("<div>").addClass(DATAGRID_GROUP_PANEL_MESSAGE_CLASS).text(groupPanelOptions.emptyPanelText).appendTo($groupPanel);
          $groupPanel.closest("." + DATAGRID_GROUP_PANEL_LABEL_CLASS).css("maxWidth", "none");
          this.updateToolbarDimensions();
        }
      },
      allowDragging: function(column) {
        var groupPanelOptions = this.option("groupPanel");
        return this._isGroupPanelVisible() && groupPanelOptions.allowColumnDragging && column && column.allowGrouping;
      },
      getColumnElements: function() {
        var $element = this.element();
        return $element && $element.find("." + DATAGRID_GROUP_PANEL_ITEM_CLASS);
      },
      getColumns: function() {
        return this.getController("columns").getGroupColumns();
      },
      getBoundingRect: function() {
        var $element = this.element();
        if ($element && $element.find("." + DATAGRID_GROUP_PANEL_CLASS).length) {
          var offset = $element.offset();
          return {
            top: offset.top,
            bottom: offset.top + $element.height()
          };
        }
        return null;
      },
      getName: function() {
        return "group";
      },
      getContextMenuItems: function(options) {
        var contextMenuEnabled = this.option("grouping.contextMenuEnabled");
        var $groupedColumnElement = renderer_default(options.targetElement).closest("." + DATAGRID_GROUP_PANEL_ITEM_CLASS);
        var items;
        if ($groupedColumnElement.length) {
          options.column = $groupedColumnElement.data("columnData");
        }
        if (contextMenuEnabled && options.column) {
          var column = options.column;
          var isGroupingAllowed = isDefined(column.allowGrouping) ? column.allowGrouping : true;
          if (isGroupingAllowed) {
            var isColumnGrouped = isDefined(column.groupIndex) && column.groupIndex > -1;
            var groupingTexts = this.option("grouping.texts");
            var onItemClick = onGroupingMenuItemClick.bind(this, column);
            items = [{
              text: groupingTexts.ungroup,
              value: "ungroup",
              disabled: !isColumnGrouped,
              onItemClick
            }, {
              text: groupingTexts.ungroupAll,
              value: "ungroupAll",
              onItemClick
            }];
          }
        }
        return items;
      },
      isVisible: function() {
        return this.callBase() || this._isGroupPanelVisible();
      },
      optionChanged: function(args) {
        if ("groupPanel" === args.name) {
          this._invalidate();
          args.handled = true;
        } else {
          this.callBase(args);
        }
      }
    };
    GroupingRowsViewExtender = {
      getContextMenuItems: function(options) {
        var contextMenuEnabled = this.option("grouping.contextMenuEnabled");
        var items;
        if (contextMenuEnabled && options.row && "group" === options.row.rowType) {
          var columnsController = this._columnsController;
          var column = columnsController.columnOption("groupIndex:" + options.row.groupIndex);
          if (column && column.allowGrouping) {
            var groupingTexts = this.option("grouping.texts");
            var onItemClick = onGroupingMenuItemClick.bind(this, column);
            items = [];
            items.push({
              text: groupingTexts.ungroup,
              value: "ungroup",
              onItemClick
            }, {
              text: groupingTexts.ungroupAll,
              value: "ungroupAll",
              onItemClick
            });
          }
        }
        return items;
      },
      _rowClick: function(e) {
        var expandMode = this.option("grouping.expandMode");
        var scrollingMode = this.option("scrolling.mode");
        var isGroupRowStateChanged = "infinite" !== scrollingMode && "rowClick" === expandMode && renderer_default(e.event.target).closest("." + DATAGRID_GROUP_ROW_CLASS).length;
        var isExpandButtonClicked = renderer_default(e.event.target).closest("." + DATAGRID_EXPAND_CLASS).length;
        if (isGroupRowStateChanged || isExpandButtonClicked) {
          this._changeGroupRowState(e);
        }
        this.callBase(e);
      },
      _changeGroupRowState: function(e) {
        var dataController = this.getController("data");
        var row = dataController.items()[e.rowIndex];
        var allowCollapsing = this._columnsController.columnOption("groupIndex:" + row.groupIndex, "allowCollapsing");
        if ("data" === row.rowType || "group" === row.rowType && false !== allowCollapsing) {
          dataController.changeRowExpand(row.key, true);
          e.event.preventDefault();
          e.handled = true;
        }
      }
    };
    columnHeadersViewExtender = {
      getContextMenuItems: function(options) {
        var contextMenuEnabled = this.option("grouping.contextMenuEnabled");
        var items = this.callBase(options);
        if (contextMenuEnabled && options.row && ("header" === options.row.rowType || "detailAdaptive" === options.row.rowType)) {
          var column = options.column;
          if (!column.command && (!isDefined(column.allowGrouping) || column.allowGrouping)) {
            var groupingTexts = this.option("grouping.texts");
            var isColumnGrouped = isDefined(column.groupIndex) && column.groupIndex > -1;
            var onItemClick = onGroupingMenuItemClick.bind(this, column);
            items = items || [];
            items.push({
              text: groupingTexts.groupByThisColumn,
              value: "group",
              beginGroup: true,
              disabled: isColumnGrouped,
              onItemClick
            });
            if (column.showWhenGrouped) {
              items.push({
                text: groupingTexts.ungroup,
                value: "ungroup",
                disabled: !isColumnGrouped,
                onItemClick
              });
            }
            items.push({
              text: groupingTexts.ungroupAll,
              value: "ungroupAll",
              onItemClick
            });
          }
        }
        return items;
      }
    };
    ui_data_grid_core_default.registerModule("grouping", {
      defaultOptions: function() {
        return {
          grouping: {
            autoExpandAll: true,
            allowCollapsing: true,
            contextMenuEnabled: false,
            expandMode: "buttonClick",
            texts: {
              groupContinuesMessage: message_default.format("dxDataGrid-groupContinuesMessage"),
              groupContinuedMessage: message_default.format("dxDataGrid-groupContinuedMessage"),
              groupByThisColumn: message_default.format("dxDataGrid-groupHeaderText"),
              ungroup: message_default.format("dxDataGrid-ungroupHeaderText"),
              ungroupAll: message_default.format("dxDataGrid-ungroupAllText")
            }
          },
          groupPanel: {
            visible: false,
            emptyPanelText: message_default.format("dxDataGrid-groupPanelEmptyText"),
            allowColumnDragging: true
          }
        };
      },
      extenders: {
        controllers: {
          data: GroupingDataControllerExtender,
          columns: {
            _getExpandColumnOptions: function() {
              var options = this.callBase.apply(this, arguments);
              options.cellTemplate = ui_data_grid_core_default.getExpandCellTemplate();
              return options;
            }
          }
        },
        views: {
          headerPanel: GroupingHeaderPanelExtender,
          rowsView: GroupingRowsViewExtender,
          columnHeadersView: columnHeadersViewExtender
        }
      }
    });
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.master_detail.js
var init_ui_data_grid_master_detail = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.master_detail.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_master_detail();
    ui_data_grid_core_default.registerModule("masterDetail", masterDetailModule);
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.editor_factory.js
var init_ui_data_grid_editor_factory = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.editor_factory.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_editor_factory();
    ui_data_grid_core_default.registerModule("editorFactory", editorFactoryModule);
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.editing.js
var init_ui_data_grid_editing = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.editing.js"() {
    init_ui_data_grid_editor_factory();
    init_ui_data_grid_core();
    init_ui_grid_core_editing();
    init_extend();
    ui_data_grid_core_default.registerModule("editing", extend(true, {}, editingModule, {
      extenders: {
        controllers: {
          data: {
            _changeRowExpandCore: function(key) {
              var editingController = this._editingController;
              if (Array.isArray(key)) {
                editingController && editingController.refresh();
              }
              return this.callBase.apply(this, arguments);
            }
          }
        }
      }
    }));
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.editing_row_based.js
var init_ui_data_grid_editing_row_based = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.editing_row_based.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_editing_row_based();
    ui_data_grid_core_default.registerModule("editingRowBased", editingRowBasedModule);
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.editing_form_based.js
var init_ui_data_grid_editing_form_based = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.editing_form_based.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_editing_form_based();
    ui_data_grid_core_default.registerModule("editingFormBased", editingFormBasedModule);
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.editing_cell_based.js
var init_ui_data_grid_editing_cell_based = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.editing_cell_based.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_editing_cell_based();
    ui_data_grid_core_default.registerModule("editingCellBased", ui_grid_core_editing_cell_based_default);
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.validating.js
var init_ui_data_grid_validating = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.validating.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_validating();
    ui_data_grid_core_default.registerModule("validating", validatingModule);
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.virtual_scrolling.js
var init_ui_data_grid_virtual_scrolling = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.virtual_scrolling.js"() {
    init_ui_data_grid_core();
    init_ui_data_grid_data_source_adapter();
    init_ui_grid_core_virtual_scrolling();
    ui_data_grid_core_default.registerModule("virtualScrolling", virtualScrollingModule);
    ui_data_grid_data_source_adapter_default.extend(virtualScrollingModule.extenders.dataSourceAdapter);
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.filter_row.js
var init_ui_data_grid_filter_row = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.filter_row.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_filter_row();
    ui_data_grid_core_default.registerModule("filterRow", filterRowModule);
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.header_filter.js
var init_ui_data_grid_header_filter = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.header_filter.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_header_filter();
    ui_data_grid_core_default.registerModule("headerFilter", headerFilterModule);
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.filter_sync.js
var init_ui_data_grid_filter_sync = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.filter_sync.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_filter_sync();
    ui_data_grid_core_default.registerModule("filterSync", filterSyncModule);
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.filter_builder.js
var init_ui_data_grid_filter_builder = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.filter_builder.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_filter_builder();
    ui_data_grid_core_default.registerModule("filterBuilder", filterBuilderModule);
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.filter_panel.js
var init_ui_data_grid_filter_panel = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.filter_panel.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_filter_panel();
    ui_data_grid_core_default.registerModule("filterPanel", filterPanelModule);
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.search.js
var init_ui_data_grid_search = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.search.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_search();
    ui_data_grid_core_default.registerModule("search", searchModule);
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.pager.js
var init_ui_data_grid_pager = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.pager.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_pager();
    ui_data_grid_core_default.registerModule("pager", pagerModule);
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.columns_resizing_reordering.js
var DraggingHeaderView, DraggingHeaderViewController, ColumnsSeparatorView, TablePositionViewController, ColumnsResizerViewController, TrackerView;
var init_ui_data_grid_columns_resizing_reordering = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.columns_resizing_reordering.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_columns_resizing_reordering();
    DraggingHeaderView = columnsResizingReorderingModule.views.draggingHeaderView;
    DraggingHeaderViewController = columnsResizingReorderingModule.controllers.draggingHeader;
    ColumnsSeparatorView = columnsResizingReorderingModule.views.columnsSeparatorView;
    TablePositionViewController = columnsResizingReorderingModule.controllers.tablePosition;
    ColumnsResizerViewController = columnsResizingReorderingModule.controllers.columnsResizer;
    TrackerView = columnsResizingReorderingModule.views.trackerView;
    ui_data_grid_core_default.registerModule("columnsResizingReordering", columnsResizingReorderingModule);
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.keyboard_navigation.js
var init_ui_data_grid_keyboard_navigation = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.keyboard_navigation.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_keyboard_navigation();
    ui_data_grid_core_default.registerModule("keyboardNavigation", keyboardNavigationModule);
  }
});

// node_modules/devextreme/esm/ui/data_grid/aggregate_calculator.js
function depthFirstSearch(i, depth, root, callback) {
  var j = 0;
  if (i < depth) {
    for (; j < root.items.length; j++) {
      depthFirstSearch(i + 1, depth, root.items[j], callback);
    }
  }
  if (i === depth) {
    callback(root);
  }
}
function map2(array, callback) {
  var i;
  if ("map" in array) {
    return array.map(callback);
  }
  var result = new Array(array.length);
  for (i in array) {
    result[i] = callback(array[i], i);
  }
  return result;
}
function isEmpty(x) {
  return x !== x || "" === x || null === x || void 0 === x;
}
function isCount(aggregator) {
  return aggregator === aggregators.count;
}
function normalizeAggregate(aggregate) {
  var selector = compileGetter(aggregate.selector);
  var skipEmptyValues = "skipEmptyValues" in aggregate ? aggregate.skipEmptyValues : true;
  var aggregator = aggregate.aggregator;
  if ("string" === typeof aggregator) {
    aggregator = aggregators[aggregator];
    if (!aggregator) {
      throw errors.Error("E4001", aggregate.aggregator);
    }
  }
  return {
    selector,
    aggregator,
    skipEmptyValues
  };
}
var aggregate_calculator_default;
var init_aggregate_calculator = __esm({
  "node_modules/devextreme/esm/ui/data_grid/aggregate_calculator.js"() {
    init_class();
    init_data();
    init_type();
    init_errors();
    init_utils();
    aggregate_calculator_default = class_default.inherit({
      ctor: function(options) {
        this._data = options.data;
        this._groupLevel = options.groupLevel || 0;
        this._totalAggregates = map2(options.totalAggregates || [], normalizeAggregate);
        this._groupAggregates = map2(options.groupAggregates || [], normalizeAggregate);
        this._totals = [];
      },
      calculate: function() {
        if (this._totalAggregates.length) {
          this._calculateTotals(0, {
            items: this._data
          });
        }
        if (this._groupAggregates.length && this._groupLevel > 0) {
          this._calculateGroups({
            items: this._data
          });
        }
      },
      totalAggregates: function() {
        return this._totals;
      },
      _aggregate: function(aggregates, data, container) {
        var length = data.items ? data.items.length : 0;
        for (var i = 0; i < aggregates.length; i++) {
          if (isCount(aggregates[i].aggregator)) {
            container[i] = (container[i] || 0) + length;
            continue;
          }
          for (var j = 0; j < length; j++) {
            this._accumulate(i, aggregates[i], container, data.items[j]);
          }
        }
      },
      _calculateTotals: function(level, data) {
        if (0 === level) {
          this._totals = this._seed(this._totalAggregates);
        }
        if (level === this._groupLevel) {
          this._aggregate(this._totalAggregates, data, this._totals);
        } else {
          for (var i = 0; i < data.items.length; i++) {
            this._calculateTotals(level + 1, data.items[i]);
          }
        }
        if (0 === level) {
          this._totals = this._finalize(this._totalAggregates, this._totals);
        }
      },
      _calculateGroups: function(root) {
        var maxLevel = this._groupLevel;
        var currentLevel = maxLevel + 1;
        var seedFn = this._seed.bind(this, this._groupAggregates);
        var stepFn = this._aggregate.bind(this, this._groupAggregates);
        var finalizeFn = this._finalize.bind(this, this._groupAggregates);
        function aggregator(node) {
          node.aggregates = seedFn(currentLevel - 1);
          if (currentLevel === maxLevel) {
            stepFn(node, node.aggregates);
          } else {
            depthFirstSearch(currentLevel, maxLevel, node, function(innerNode) {
              stepFn(innerNode, node.aggregates);
            });
          }
          node.aggregates = finalizeFn(node.aggregates);
        }
        while (--currentLevel > 0) {
          depthFirstSearch(0, currentLevel, root, aggregator);
        }
      },
      _seed: function(aggregates, groupIndex) {
        return map2(aggregates, function(aggregate) {
          var aggregator = aggregate.aggregator;
          var seed = "seed" in aggregator ? isFunction(aggregator.seed) ? aggregator.seed(groupIndex) : aggregator.seed : NaN;
          return seed;
        });
      },
      _accumulate: function(aggregateIndex, aggregate, results, item) {
        var value = aggregate.selector(item);
        var aggregator = aggregate.aggregator;
        var skipEmptyValues = aggregate.skipEmptyValues;
        if (skipEmptyValues && isEmpty(value)) {
          return;
        }
        if (results[aggregateIndex] !== results[aggregateIndex]) {
          results[aggregateIndex] = value;
        } else {
          results[aggregateIndex] = aggregator.step(results[aggregateIndex], value);
        }
      },
      _finalize: function(aggregates, results) {
        return map2(aggregates, function(aggregate, index) {
          var fin = aggregate.aggregator.finalize;
          return fin ? fin(results[index]) : results[index];
        });
      }
    });
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.summary.js
var DATAGRID_TOTAL_FOOTER_CLASS, DATAGRID_SUMMARY_ITEM_CLASS, DATAGRID_TEXT_CONTENT_CLASS, DATAGRID_GROUP_FOOTER_CLASS, DATAGRID_GROUP_TEXT_CONTENT_CLASS, DATAGRID_NOWRAP_CLASS, DATAGRID_GROUP_FOOTER_ROW_TYPE, renderSummaryCell, getSummaryCellOptions, getGroupAggregates, recalculateWhileEditing, FooterView, SummaryDataSourceAdapterExtender, SummaryDataSourceAdapterClientExtender;
var init_ui_data_grid_summary = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.summary.js"() {
    init_renderer();
    init_common();
    init_type();
    init_iterator();
    init_extend();
    init_data();
    init_ui_errors();
    init_ui_data_grid_core();
    init_message();
    init_ui_data_grid_data_source_adapter();
    init_ui_grid_core_columns_view();
    init_aggregate_calculator();
    init_query();
    init_store_helper();
    init_utils();
    DATAGRID_TOTAL_FOOTER_CLASS = "dx-datagrid-total-footer";
    DATAGRID_SUMMARY_ITEM_CLASS = "dx-datagrid-summary-item";
    DATAGRID_TEXT_CONTENT_CLASS = "dx-datagrid-text-content";
    DATAGRID_GROUP_FOOTER_CLASS = "dx-datagrid-group-footer";
    DATAGRID_GROUP_TEXT_CONTENT_CLASS = "dx-datagrid-group-text-content";
    DATAGRID_NOWRAP_CLASS = "dx-datagrid-nowrap";
    DATAGRID_GROUP_FOOTER_ROW_TYPE = "groupFooter";
    renderSummaryCell = function(cell, options) {
      var $cell = renderer_default(cell);
      var column = options.column;
      var summaryItems = options.summaryItems;
      var $summaryItems = [];
      if (!column.command && summaryItems) {
        for (var i = 0; i < summaryItems.length; i++) {
          var summaryItem = summaryItems[i];
          $summaryItems.push(renderer_default("<div>").css("textAlign", summaryItem.alignment || column.alignment).addClass(DATAGRID_SUMMARY_ITEM_CLASS).addClass(DATAGRID_TEXT_CONTENT_CLASS).addClass(summaryItem.cssClass).toggleClass(DATAGRID_GROUP_TEXT_CONTENT_CLASS, "group" === options.rowType).text(ui_data_grid_core_default.getSummaryText(summaryItem, options.summaryTexts)));
        }
        $cell.append($summaryItems);
      }
    };
    getSummaryCellOptions = function(that, options) {
      var summaryTexts = that.option("summary.texts") || {};
      return {
        totalItem: options.row,
        summaryItems: options.row.summaryCells[options.columnIndex],
        summaryTexts
      };
    };
    getGroupAggregates = function(data) {
      return data.summary || data.aggregates || [];
    };
    recalculateWhileEditing = function(that) {
      return that.option("summary.recalculateWhileEditing");
    };
    FooterView = ColumnsView.inherit({
      _getRows: function() {
        return this._dataController.footerItems();
      },
      _getCellOptions: function(options) {
        return extend(this.callBase(options), getSummaryCellOptions(this, options));
      },
      _renderCellContent: function($cell, options) {
        renderSummaryCell($cell, options);
        this.callBase($cell, options);
      },
      _renderCore: function(change) {
        var needUpdateScrollLeft = false;
        var totalItem = this._dataController.footerItems()[0];
        if (!change || !change.columnIndices) {
          this.element().empty().addClass(DATAGRID_TOTAL_FOOTER_CLASS).toggleClass(DATAGRID_NOWRAP_CLASS, !this.option("wordWrapEnabled"));
          needUpdateScrollLeft = true;
        }
        if (totalItem && totalItem.summaryCells && totalItem.summaryCells.length) {
          this._updateContent(this._renderTable({
            change
          }), change);
          needUpdateScrollLeft && this._updateScrollLeftPosition();
        }
      },
      _updateContent: function($newTable, change) {
        if (change && "update" === change.changeType && change.columnIndices) {
          var $row = this.getTableElement().find(".dx-row");
          var $newRow = $newTable.find(".dx-row");
          this._updateCells($row, $newRow, change.columnIndices[0]);
        } else {
          return this.callBase.apply(this, arguments);
        }
      },
      _rowClick: function(e) {
        var item = this._dataController.footerItems()[e.rowIndex] || {};
        this.executeAction("onRowClick", extend({}, e, item));
      },
      _columnOptionChanged: function(e) {
        var optionNames = e.optionNames;
        if (e.changeTypes.grouping) {
          return;
        }
        if (optionNames.width || optionNames.visibleWidth) {
          this.callBase(e);
        }
      },
      _handleDataChanged: function(e) {
        var changeType = e.changeType;
        if ("update" === e.changeType && e.repaintChangesOnly) {
          if (!e.totalColumnIndices) {
            this.render();
          } else if (e.totalColumnIndices.length) {
            this.render(null, {
              changeType: "update",
              columnIndices: [e.totalColumnIndices]
            });
          }
        } else if ("refresh" === changeType || "append" === changeType || "prepend" === changeType) {
          this.render();
        }
      },
      getHeight: function() {
        return this.getElementHeight();
      },
      isVisible: function() {
        return !!this._dataController.footerItems().length;
      }
    });
    SummaryDataSourceAdapterExtender = {
      init: function() {
        this.callBase.apply(this, arguments);
        this._totalAggregates = [];
        this._summaryGetter = noop;
      },
      summaryGetter: function(_summaryGetter) {
        if (!arguments.length) {
          return this._summaryGetter;
        }
        if (isFunction(_summaryGetter)) {
          this._summaryGetter = _summaryGetter;
        }
      },
      summary: function(_summary) {
        if (!arguments.length) {
          return this._summaryGetter();
        }
        this._summaryGetter = function() {
          return _summary;
        };
      },
      totalAggregates: function() {
        return this._totalAggregates;
      },
      isLastLevelGroupItemsPagingLocal: function() {
        var summary = this.summary();
        var sortByGroupsInfo = summary && summary.sortByGroups();
        return sortByGroupsInfo && sortByGroupsInfo.length;
      },
      sortLastLevelGroupItems: function(items, groups, paths) {
        var groupedItems = store_helper_default.multiLevelGroup(query_default(items), groups).toArray();
        var result = [];
        paths.forEach(function(path) {
          !function forEachGroup(groups2, groupCount, callback, path2) {
            path2 = path2 || [];
            for (var i = 0; i < groups2.length; i++) {
              path2.push(groups2[i].key);
              if (1 === groupCount) {
                callback(path2, groups2[i].items);
              } else {
                forEachGroup(groups2[i].items, groupCount - 1, callback, path2);
              }
              path2.pop();
            }
          }(groupedItems, groups.length, function(itemsPath, items2) {
            if (path.toString() === itemsPath.toString()) {
              result = result.concat(items2);
            }
          });
        });
        return result;
      }
    };
    SummaryDataSourceAdapterClientExtender = /* @__PURE__ */ function() {
      var calculateAggregates = function(that, summary, data, groupLevel) {
        var calculator;
        if (recalculateWhileEditing(that)) {
          var editingController = that.getController("editing");
          if (editingController) {
            var insertedData = editingController.getInsertedData();
            if (insertedData.length) {
              data = function applyAddedData(data2, insertedData2, groupLevel2) {
                if (groupLevel2) {
                  return applyAddedData(data2, insertedData2.map((item) => ({
                    items: [item]
                  }), groupLevel2 - 1));
                }
                return data2.concat(insertedData2);
              }(data, insertedData, groupLevel);
            }
            var removedData = editingController.getRemovedData();
            if (removedData.length) {
              data = function applyRemovedData(data2, removedData2, groupLevel2) {
                if (groupLevel2) {
                  return data2.map((data3) => {
                    var updatedData = {};
                    var updatedItems = applyRemovedData(data3.items || [], removedData2, groupLevel2 - 1);
                    Object.defineProperty(updatedData, "aggregates", {
                      get: () => data3.aggregates,
                      set: (value) => {
                        data3.aggregates = value;
                      }
                    });
                    return extend(updatedData, data3, {
                      items: updatedItems
                    });
                  });
                }
                return data2.filter((data3) => removedData2.indexOf(data3) < 0);
              }(data, removedData, groupLevel);
            }
          }
        }
        if (summary) {
          calculator = new aggregate_calculator_default({
            totalAggregates: summary.totalAggregates,
            groupAggregates: summary.groupAggregates,
            data,
            groupLevel
          });
          calculator.calculate();
        }
        return calculator ? calculator.totalAggregates() : [];
      };
      var sortGroupsBySummary = function(data, group, summary) {
        var sortByGroups = summary && summary.sortByGroups && summary.sortByGroups();
        if (sortByGroups && sortByGroups.length) {
          return function sortGroupsBySummaryCore(items, groups, sortByGroups2) {
            if (!items || !groups.length) {
              return items;
            }
            var group2 = groups[0];
            var sorts = sortByGroups2[0];
            var query;
            if (group2 && sorts && sorts.length) {
              query = query_default(items);
              each(sorts, function(index) {
                if (0 === index) {
                  query = query.sortBy(this.selector, this.desc);
                } else {
                  query = query.thenBy(this.selector, this.desc);
                }
              });
              query.enumerate().done(function(sortedItems) {
                items = sortedItems;
              });
            }
            groups = groups.slice(1);
            sortByGroups2 = sortByGroups2.slice(1);
            if (groups.length && sortByGroups2.length) {
              each(items, function() {
                this.items = sortGroupsBySummaryCore(this.items, groups, sortByGroups2);
              });
            }
            return items;
          }(data, group, sortByGroups);
        }
        return data;
      };
      return {
        _customizeRemoteOperations: function(options) {
          var summary = this.summary();
          if (summary) {
            if (options.remoteOperations.summary) {
              if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {
                if (options.storeLoadOptions.group) {
                  if (options.remoteOperations.grouping) {
                    options.storeLoadOptions.groupSummary = summary.groupAggregates;
                  } else if (summary.groupAggregates.length) {
                    options.remoteOperations.paging = false;
                  }
                }
                options.storeLoadOptions.totalSummary = summary.totalAggregates;
              }
            } else if (summary.totalAggregates.length || summary.groupAggregates.length && options.storeLoadOptions.group) {
              options.remoteOperations.paging = false;
            }
          }
          this.callBase.apply(this, arguments);
          var cachedExtra = options.cachedPagesData.extra;
          if (cachedExtra && cachedExtra.summary && !options.isCustomLoading) {
            options.storeLoadOptions.totalSummary = void 0;
          }
        },
        _handleDataLoadedCore: function(options) {
          var groups = normalizeSortingInfo(options.storeLoadOptions.group || options.loadOptions.group || []);
          var remoteOperations = options.remoteOperations || {};
          var summary = this.summaryGetter()(remoteOperations);
          if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {
            if (remoteOperations.summary) {
              if (!remoteOperations.paging && groups.length && summary) {
                if (!remoteOperations.grouping) {
                  calculateAggregates(this, {
                    groupAggregates: summary.groupAggregates
                  }, options.data, groups.length);
                }
                options.data = sortGroupsBySummary(options.data, groups, summary);
              }
            } else if (!remoteOperations.paging && summary) {
              var _options$cachedPagesD, _options$cachedPagesD2;
              var operationTypes = options.operationTypes || {};
              var hasOperations = Object.keys(operationTypes).some((type) => operationTypes[type]);
              if (!hasOperations || !(null !== (_options$cachedPagesD = options.cachedPagesData) && void 0 !== _options$cachedPagesD && null !== (_options$cachedPagesD2 = _options$cachedPagesD.extra) && void 0 !== _options$cachedPagesD2 && _options$cachedPagesD2.summary) || groups.length && summary.groupAggregates.length) {
                var totalAggregates = calculateAggregates(this, summary, options.data, groups.length);
                options.extra = isPlainObject(options.extra) ? options.extra : {};
                options.extra.summary = totalAggregates;
                if (options.cachedPagesData) {
                  options.cachedPagesData.extra = options.extra;
                }
              }
              options.data = sortGroupsBySummary(options.data, groups, summary);
            }
          }
          if (!options.isCustomLoading) {
            this._totalAggregates = options.extra && options.extra.summary || this._totalAggregates;
          }
          this.callBase(options);
        }
      };
    }();
    ui_data_grid_data_source_adapter_default.extend(SummaryDataSourceAdapterExtender);
    ui_data_grid_data_source_adapter_default.extend(SummaryDataSourceAdapterClientExtender);
    ui_data_grid_core_default.registerModule("summary", {
      defaultOptions: function() {
        return {
          summary: {
            groupItems: void 0,
            totalItems: void 0,
            calculateCustomSummary: void 0,
            skipEmptyValues: true,
            recalculateWhileEditing: false,
            texts: {
              sum: message_default.getFormatter("dxDataGrid-summarySum"),
              sumOtherColumn: message_default.getFormatter("dxDataGrid-summarySumOtherColumn"),
              min: message_default.getFormatter("dxDataGrid-summaryMin"),
              minOtherColumn: message_default.getFormatter("dxDataGrid-summaryMinOtherColumn"),
              max: message_default.getFormatter("dxDataGrid-summaryMax"),
              maxOtherColumn: message_default.getFormatter("dxDataGrid-summaryMaxOtherColumn"),
              avg: message_default.getFormatter("dxDataGrid-summaryAvg"),
              avgOtherColumn: message_default.getFormatter("dxDataGrid-summaryAvgOtherColumn"),
              count: message_default.getFormatter("dxDataGrid-summaryCount")
            }
          },
          sortByGroupSummaryInfo: void 0
        };
      },
      views: {
        footerView: FooterView
      },
      extenders: {
        controllers: {
          data: {
            _isDataColumn: function(column) {
              return column && (!isDefined(column.groupIndex) || column.showWhenGrouped);
            },
            _isGroupFooterVisible: function() {
              var groupItems = this.option("summary.groupItems") || [];
              for (var i = 0; i < groupItems.length; i++) {
                var groupItem = groupItems[i];
                var column = this._columnsController.columnOption(groupItem.showInColumn || groupItem.column);
                if (groupItem.showInGroupFooter && this._isDataColumn(column)) {
                  return true;
                }
              }
              return false;
            },
            _processGroupItems: function(items, groupCount, options) {
              var data = options && options.data;
              var result = this.callBase.apply(this, arguments);
              if (options) {
                if (void 0 === options.isGroupFooterVisible) {
                  options.isGroupFooterVisible = this._isGroupFooterVisible();
                }
                if (data && data.items && options.isGroupFooterVisible && (options.collectContinuationItems || !data.isContinuationOnNextPage)) {
                  result.push({
                    rowType: DATAGRID_GROUP_FOOTER_ROW_TYPE,
                    key: options.path.slice(),
                    data,
                    groupIndex: options.path.length - 1,
                    values: []
                  });
                }
              }
              return result;
            },
            _processGroupItem: function(groupItem, options) {
              var that = this;
              if (!options.summaryGroupItems) {
                options.summaryGroupItems = that.option("summary.groupItems") || [];
              }
              if ("group" === groupItem.rowType) {
                var groupColumnIndex = -1;
                var afterGroupColumnIndex = -1;
                each(options.visibleColumns, function(visibleIndex) {
                  var prevColumn = options.visibleColumns[visibleIndex - 1];
                  if (groupItem.groupIndex === this.groupIndex) {
                    groupColumnIndex = this.index;
                  }
                  if (visibleIndex > 0 && "expand" === prevColumn.command && "expand" !== this.command) {
                    afterGroupColumnIndex = this.index;
                  }
                });
                groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, function(summaryItem, column) {
                  if (summaryItem.showInGroupFooter) {
                    return -1;
                  }
                  if (summaryItem.alignByColumn && column && !isDefined(column.groupIndex) && column.index !== afterGroupColumnIndex) {
                    return column.index;
                  } else {
                    return groupColumnIndex;
                  }
                });
              }
              if (groupItem.rowType === DATAGRID_GROUP_FOOTER_ROW_TYPE) {
                groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, function(summaryItem, column) {
                  return summaryItem.showInGroupFooter && that._isDataColumn(column) ? column.index : -1;
                });
              }
              return groupItem;
            },
            _calculateSummaryCells: function(summaryItems, aggregates, visibleColumns, calculateTargetColumnIndex) {
              var that = this;
              var summaryCells = [];
              var summaryCellsByColumns = {};
              each(summaryItems, function(summaryIndex, summaryItem) {
                var column = that._columnsController.columnOption(summaryItem.column);
                var showInColumn = summaryItem.showInColumn && that._columnsController.columnOption(summaryItem.showInColumn) || column;
                var columnIndex = calculateTargetColumnIndex(summaryItem, showInColumn);
                if (columnIndex >= 0) {
                  if (!summaryCellsByColumns[columnIndex]) {
                    summaryCellsByColumns[columnIndex] = [];
                  }
                  var aggregate = aggregates[summaryIndex];
                  if (aggregate === aggregate) {
                    var valueFormat;
                    if (isDefined(summaryItem.valueFormat)) {
                      valueFormat = summaryItem.valueFormat;
                    } else if ("count" !== summaryItem.summaryType) {
                      valueFormat = ui_data_grid_core_default.getFormatByDataType(column && column.dataType);
                    }
                    summaryCellsByColumns[columnIndex].push(extend({}, summaryItem, {
                      value: isString(aggregate) && column && column.deserializeValue ? column.deserializeValue(aggregate) : aggregate,
                      valueFormat,
                      columnCaption: column && column.index !== columnIndex ? column.caption : void 0
                    }));
                  }
                }
              });
              if (!isEmptyObject(summaryCellsByColumns)) {
                each(visibleColumns, function() {
                  summaryCells.push(summaryCellsByColumns[this.index] || []);
                });
              }
              return summaryCells;
            },
            _getSummaryCells: function(summaryTotalItems, totalAggregates) {
              var that = this;
              var columnsController = that._columnsController;
              return that._calculateSummaryCells(summaryTotalItems, totalAggregates, columnsController.getVisibleColumns(), function(summaryItem, column) {
                return that._isDataColumn(column) ? column.index : -1;
              });
            },
            _updateItemsCore: function(change) {
              var summaryCells;
              var dataSource = this._dataSource;
              var footerItems = this._footerItems;
              var oldSummaryCells = footerItems && footerItems[0] && footerItems[0].summaryCells;
              var summaryTotalItems = this.option("summary.totalItems");
              this._footerItems = [];
              if (dataSource && summaryTotalItems && summaryTotalItems.length) {
                var totalAggregates = dataSource.totalAggregates();
                summaryCells = this._getSummaryCells(summaryTotalItems, totalAggregates);
                if (change && change.repaintChangesOnly && oldSummaryCells) {
                  change.totalColumnIndices = summaryCells.map(function(summaryCell, index) {
                    if (JSON.stringify(summaryCell) !== JSON.stringify(oldSummaryCells[index])) {
                      return index;
                    }
                    return -1;
                  }).filter((index) => index >= 0);
                }
                if (summaryCells.length) {
                  this._footerItems.push({
                    rowType: "totalFooter",
                    summaryCells
                  });
                }
              }
              this.callBase(change);
            },
            _prepareUnsavedDataSelector: function(selector) {
              if (recalculateWhileEditing(this)) {
                var editingController = this.getController("editing");
                if (editingController) {
                  return function(data) {
                    data = editingController.getUpdatedData(data);
                    return selector(data);
                  };
                }
              }
              return selector;
            },
            _prepareAggregateSelector: function(selector, aggregator) {
              selector = this._prepareUnsavedDataSelector(selector);
              if ("avg" === aggregator || "sum" === aggregator) {
                return function(data) {
                  var value = selector(data);
                  return isDefined(value) ? Number(value) : value;
                };
              }
              return selector;
            },
            _getAggregates: function(summaryItems, remoteOperations) {
              var that = this;
              var columnsController = that.getController("columns");
              var calculateCustomSummary = that.option("summary.calculateCustomSummary");
              var commonSkipEmptyValues = that.option("summary.skipEmptyValues");
              return map(summaryItems || [], function(summaryItem) {
                var column = columnsController.columnOption(summaryItem.column);
                var calculateCellValue = column && column.calculateCellValue ? column.calculateCellValue.bind(column) : compileGetter(column ? column.dataField : summaryItem.column);
                var aggregator = summaryItem.summaryType || "count";
                var selector = summaryItem.column;
                var skipEmptyValues = isDefined(summaryItem.skipEmptyValues) ? summaryItem.skipEmptyValues : commonSkipEmptyValues;
                if (remoteOperations) {
                  return {
                    selector: summaryItem.column,
                    summaryType: aggregator
                  };
                } else {
                  selector = that._prepareAggregateSelector(calculateCellValue, aggregator);
                  if ("custom" === aggregator) {
                    if (!calculateCustomSummary) {
                      ui_errors_default.log("E1026");
                      calculateCustomSummary = function() {
                      };
                    }
                    var options = {
                      component: that.component,
                      name: summaryItem.name
                    };
                    calculateCustomSummary(options);
                    options.summaryProcess = "calculate";
                    aggregator = {
                      seed: function(groupIndex) {
                        options.summaryProcess = "start";
                        options.totalValue = void 0;
                        options.groupIndex = groupIndex;
                        delete options.value;
                        calculateCustomSummary(options);
                        return options.totalValue;
                      },
                      step: function(totalValue, value) {
                        options.summaryProcess = "calculate";
                        options.totalValue = totalValue;
                        options.value = value;
                        calculateCustomSummary(options);
                        return options.totalValue;
                      },
                      finalize: function(totalValue) {
                        options.summaryProcess = "finalize";
                        options.totalValue = totalValue;
                        delete options.value;
                        calculateCustomSummary(options);
                        return options.totalValue;
                      }
                    };
                  }
                  return {
                    selector,
                    aggregator,
                    skipEmptyValues
                  };
                }
              });
            },
            _addSortInfo: function(sortByGroups, groupColumn, selector, sortOrder) {
              if (groupColumn) {
                var groupIndex = groupColumn.groupIndex;
                sortOrder = sortOrder || groupColumn.sortOrder;
                if (isDefined(groupIndex)) {
                  sortByGroups[groupIndex] = sortByGroups[groupIndex] || [];
                  sortByGroups[groupIndex].push({
                    selector,
                    desc: "desc" === sortOrder
                  });
                }
              }
            },
            _findSummaryItem: function(summaryItems, name) {
              var summaryItemIndex = -1;
              if (isDefined(name)) {
                each(summaryItems || [], function(index) {
                  if (this.name === name || index === name || this.summaryType === name || this.column === name || (summaryItem = this, summaryType = summaryItem.summaryType, column = summaryItem.column, summaryType && column && summaryType + "_" + column) === name) {
                    summaryItemIndex = index;
                    return false;
                  }
                  var summaryItem, summaryType, column;
                });
              }
              return summaryItemIndex;
            },
            _getSummarySortByGroups: function(sortByGroupSummaryInfo, groupSummaryItems) {
              var that = this;
              var columnsController = that._columnsController;
              var groupColumns = columnsController.getGroupColumns();
              var sortByGroups = [];
              if (!groupSummaryItems || !groupSummaryItems.length) {
                return;
              }
              each(sortByGroupSummaryInfo || [], function() {
                var sortOrder = this.sortOrder;
                var groupColumn = this.groupColumn;
                var summaryItemIndex = that._findSummaryItem(groupSummaryItems, this.summaryItem);
                if (summaryItemIndex < 0) {
                  return;
                }
                var selector = function(data) {
                  return getGroupAggregates(data)[summaryItemIndex];
                };
                if (isDefined(groupColumn)) {
                  groupColumn = columnsController.columnOption(groupColumn);
                  that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder);
                } else {
                  each(groupColumns, function(groupIndex, groupColumn2) {
                    that._addSortInfo(sortByGroups, groupColumn2, selector, sortOrder);
                  });
                }
              });
              return sortByGroups;
            },
            _createDataSourceAdapterCore: function(dataSource, remoteOperations) {
              var that = this;
              var dataSourceAdapter = this.callBase(dataSource, remoteOperations);
              dataSourceAdapter.summaryGetter(function(currentRemoteOperations) {
                return that._getSummaryOptions(currentRemoteOperations || remoteOperations);
              });
              return dataSourceAdapter;
            },
            _getSummaryOptions: function(remoteOperations) {
              var that = this;
              var groupSummaryItems = that.option("summary.groupItems");
              var totalSummaryItems = that.option("summary.totalItems");
              var sortByGroupSummaryInfo = that.option("sortByGroupSummaryInfo");
              var groupAggregates = that._getAggregates(groupSummaryItems, remoteOperations && remoteOperations.grouping && remoteOperations.summary);
              var totalAggregates = that._getAggregates(totalSummaryItems, remoteOperations && remoteOperations.summary);
              if (groupAggregates.length || totalAggregates.length) {
                return {
                  groupAggregates,
                  totalAggregates,
                  sortByGroups: function() {
                    return that._getSummarySortByGroups(sortByGroupSummaryInfo, groupSummaryItems);
                  }
                };
              }
            },
            publicMethods: function() {
              var methods = this.callBase();
              methods.push("getTotalSummaryValue");
              return methods;
            },
            getTotalSummaryValue: function(summaryItemName) {
              var summaryItemIndex = this._findSummaryItem(this.option("summary.totalItems"), summaryItemName);
              var aggregates = this._dataSource.totalAggregates();
              if (aggregates.length && summaryItemIndex > -1) {
                return aggregates[summaryItemIndex];
              }
            },
            optionChanged: function(args) {
              if ("summary" === args.name || "sortByGroupSummaryInfo" === args.name) {
                args.name = "dataSource";
              }
              this.callBase(args);
            },
            init: function() {
              this._footerItems = [];
              this.callBase();
            },
            footerItems: function() {
              return this._footerItems;
            }
          },
          editing: {
            _refreshSummary: function() {
              if (recalculateWhileEditing(this) && !this.isSaving()) {
                this._dataController.refresh({
                  load: true,
                  changesOnly: true
                });
              }
            },
            _addChange: function(params) {
              var result = this.callBase.apply(this, arguments);
              if (params.type) {
                this._refreshSummary();
              }
              return result;
            },
            _removeChange: function() {
              var result = this.callBase.apply(this, arguments);
              this._refreshSummary();
              return result;
            },
            cancelEditData: function() {
              var result = this.callBase.apply(this, arguments);
              this._refreshSummary();
              return result;
            }
          }
        },
        views: {
          rowsView: {
            _createRow: function(row) {
              var $row = this.callBase(row);
              row && $row.addClass(row.rowType === DATAGRID_GROUP_FOOTER_ROW_TYPE ? DATAGRID_GROUP_FOOTER_CLASS : "");
              return $row;
            },
            _renderCells: function($row, options) {
              this.callBase.apply(this, arguments);
              if ("group" === options.row.rowType && options.row.summaryCells && options.row.summaryCells.length) {
                this._renderGroupSummaryCells($row, options);
              }
            },
            _hasAlignByColumnSummaryItems: function(columnIndex, options) {
              return !isDefined(options.columns[columnIndex].groupIndex) && options.row.summaryCells[columnIndex].length;
            },
            _getAlignByColumnCellCount: function(groupCellColSpan, options) {
              var alignByColumnCellCount = 0;
              for (var i = 1; i < groupCellColSpan; i++) {
                var columnIndex = options.row.summaryCells.length - i;
                alignByColumnCellCount = this._hasAlignByColumnSummaryItems(columnIndex, options) ? i : alignByColumnCellCount;
              }
              return alignByColumnCellCount;
            },
            _renderGroupSummaryCells: function($row, options) {
              var $groupCell = $row.children().last();
              var groupCellColSpan = Number($groupCell.attr("colSpan")) || 1;
              var alignByColumnCellCount = this._getAlignByColumnCellCount(groupCellColSpan, options);
              this._renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount);
            },
            _renderGroupSummaryCellsCore: function($groupCell, options, groupCellColSpan, alignByColumnCellCount) {
              if (alignByColumnCellCount > 0) {
                $groupCell.attr("colSpan", groupCellColSpan - alignByColumnCellCount);
                for (var i = 0; i < alignByColumnCellCount; i++) {
                  var columnIndex = options.columns.length - alignByColumnCellCount + i;
                  this._renderCell($groupCell.parent(), extend({
                    column: options.columns[columnIndex],
                    columnIndex: this._getSummaryCellIndex(columnIndex, options.columns)
                  }, options));
                }
              }
            },
            _getSummaryCellIndex: function(columnIndex) {
              return columnIndex;
            },
            _getCellTemplate: function(options) {
              if (!options.column.command && !isDefined(options.column.groupIndex) && options.summaryItems && options.summaryItems.length) {
                return renderSummaryCell;
              } else {
                return this.callBase(options);
              }
            },
            _getCellOptions: function(options) {
              var parameters = this.callBase(options);
              if (options.row.summaryCells) {
                return extend(parameters, getSummaryCellOptions(this, options));
              } else {
                return parameters;
              }
            }
          }
        }
      }
    });
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.column_fixing.js
var init_ui_data_grid_column_fixing = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.column_fixing.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_column_fixing();
    ui_data_grid_core_default.registerModule("columnFixing", columnFixingModule);
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.adaptivity.js
var init_ui_data_grid_adaptivity = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.adaptivity.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_adaptivity();
    ui_data_grid_core_default.registerModule("adaptivity", adaptivityModule);
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.virtual_columns.js
var init_ui_data_grid_virtual_columns = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.virtual_columns.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_virtual_columns();
    ui_data_grid_core_default.registerModule("virtualColumns", virtualColumnsModule);
  }
});

// node_modules/devextreme/esm/ui/grid_core/ui.grid_core.export_mixin.js
var ui_grid_core_export_mixin_default;
var init_ui_grid_core_export_mixin = __esm({
  "node_modules/devextreme/esm/ui/grid_core/ui.grid_core.export_mixin.js"() {
    init_extend();
    ui_grid_core_export_mixin_default = {
      _getEmptyCell: function() {
        return {
          text: "",
          value: void 0,
          colspan: 1,
          rowspan: 1
        };
      },
      _defaultSetter: function(value) {
        return !value ? 1 : value;
      },
      _cloneItem: function(item) {
        return extend({}, item, this._getEmptyCell());
      },
      _prepareItems: function(items) {
        var that = this;
        var resultItems = [];
        var cols = (items[0] || []).reduce((sum, item2) => sum + that._defaultSetter(item2.colspan), 0);
        var getItem = /* @__PURE__ */ function(items2) {
          var rowIndex2 = 0;
          var cellIndex2 = 0;
          return function() {
            var row = items2[rowIndex2] || [];
            var item2 = row[cellIndex2++];
            if (cellIndex2 >= row.length) {
              rowIndex2++;
              cellIndex2 = 0;
            }
            if (item2) {
              item2.colspan = that._defaultSetter(item2.colspan);
              item2.rowspan = that._defaultSetter(item2.rowspan);
            }
            return item2;
          };
        }(items);
        function addItem(rowIndex2, cellIndex2, item2) {
          var row = resultItems[rowIndex2] = resultItems[rowIndex2] || [];
          row[cellIndex2] = item2;
          if (item2.colspan > 1 || item2.rowspan > 1) {
            var clone = that._cloneItem(item2);
            for (var c = 1; c < item2.colspan; c++) {
              addItem(rowIndex2, cellIndex2 + c, clone);
            }
            for (var r = 1; r < item2.rowspan; r++) {
              for (var _c = 0; _c < item2.colspan; _c++) {
                addItem(rowIndex2 + r, cellIndex2 + _c, clone);
              }
            }
          }
        }
        var item = getItem();
        var rowIndex = 0;
        while (item) {
          for (var cellIndex = 0; cellIndex < cols; cellIndex++) {
            if (!item) {
              break;
            }
            if (resultItems[rowIndex] && resultItems[rowIndex][cellIndex]) {
              continue;
            }
            addItem(rowIndex, cellIndex, item);
            cellIndex += item.colspan - 1;
            item = getItem();
          }
          rowIndex++;
        }
        return resultItems;
      }
    };
  }
});

// node_modules/devextreme/esm/exporter/file_saver.js
var window2, navigator, FILE_EXTESIONS, MIME_TYPES, fileSaver;
var init_file_saver = __esm({
  "node_modules/devextreme/esm/exporter/file_saver.js"() {
    init_renderer();
    init_dom_adapter();
    init_window();
    init_events_engine();
    init_ui_errors();
    init_type();
    init_console();
    window2 = getWindow();
    navigator = getNavigator();
    FILE_EXTESIONS = {
      EXCEL: "xlsx",
      CSS: "css",
      PNG: "png",
      JPEG: "jpeg",
      GIF: "gif",
      SVG: "svg",
      PDF: "pdf"
    };
    MIME_TYPES = {
      CSS: "text/css",
      EXCEL: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
      PNG: "image/png",
      JPEG: "image/jpeg",
      GIF: "image/gif",
      SVG: "image/svg+xml",
      PDF: "application/pdf"
    };
    fileSaver = {
      _revokeObjectURLTimeout: 3e4,
      _getDataUri: function(format2, data) {
        var mimeType = this._getMimeType(format2);
        return "data:".concat(mimeType, ";base64,").concat(data);
      },
      _getMimeType: function(format2) {
        return MIME_TYPES[format2] || "application/octet-stream";
      },
      _linkDownloader: function(fileName, href) {
        var exportLinkElement = dom_adapter_default.createElement("a");
        exportLinkElement.download = fileName;
        exportLinkElement.href = href;
        exportLinkElement.target = "_blank";
        return exportLinkElement;
      },
      _formDownloader: function(proxyUrl, fileName, contentType, data) {
        var formAttributes = {
          method: "post",
          action: proxyUrl,
          enctype: "multipart/form-data"
        };
        var exportForm = renderer_default("<form>").css({
          display: "none"
        }).attr(formAttributes);
        function setAttributes(element, attributes) {
          for (var key in attributes) {
            element.setAttribute(key, attributes[key]);
          }
          return element;
        }
        exportForm.append(setAttributes(dom_adapter_default.createElement("input"), {
          type: "hidden",
          name: "fileName",
          value: fileName
        }));
        exportForm.append(setAttributes(dom_adapter_default.createElement("input"), {
          type: "hidden",
          name: "contentType",
          value: contentType
        }));
        exportForm.append(setAttributes(dom_adapter_default.createElement("input"), {
          type: "hidden",
          name: "data",
          value: data
        }));
        exportForm.appendTo("body");
        events_engine_default.trigger(exportForm, "submit");
        if (events_engine_default.trigger(exportForm, "submit")) {
          exportForm.remove();
        }
      },
      _saveByProxy: function(proxyUrl, fileName, format2, data) {
        var contentType = this._getMimeType(format2);
        return this._formDownloader(proxyUrl, fileName, contentType, data);
      },
      _winJSBlobSave: function(blob, fileName, format2) {
        var savePicker = new Windows.Storage.Pickers.FileSavePicker();
        savePicker.suggestedStartLocation = Windows.Storage.Pickers.PickerLocationId.documentsLibrary;
        var fileExtension = FILE_EXTESIONS[format2];
        if (fileExtension) {
          var mimeType = this._getMimeType(format2);
          savePicker.fileTypeChoices.insert(mimeType, ["." + fileExtension]);
        }
        savePicker.suggestedFileName = fileName;
        savePicker.pickSaveFileAsync().then(function(file) {
          if (file) {
            file.openAsync(Windows.Storage.FileAccessMode.readWrite).then(function(outputStream) {
              var inputStream = blob.msDetachStream();
              Windows.Storage.Streams.RandomAccessStream.copyAsync(inputStream, outputStream).then(function() {
                outputStream.flushAsync().done(function() {
                  inputStream.close();
                  outputStream.close();
                });
              });
            });
          }
        });
      },
      _click: function(link) {
        try {
          link.dispatchEvent(new MouseEvent("click", {
            cancelable: true
          }));
        } catch (e) {
          var event = dom_adapter_default.getDocument().createEvent("MouseEvents");
          event.initMouseEvent("click", true, true, window2, 0, 0, 0, 80, 20, false, false, false, false, 0, null);
          link.dispatchEvent(event);
        }
      },
      _saveBlobAs: function(fileName, format2, data) {
        this._blobSaved = false;
        if (isDefined(navigator.msSaveOrOpenBlob)) {
          navigator.msSaveOrOpenBlob(data, fileName);
          this._blobSaved = true;
        } else if (isDefined(window2.WinJS)) {
          this._winJSBlobSave(data, fileName, format2);
          this._blobSaved = true;
        } else {
          var URL = window2.URL || window2.webkitURL || window2.mozURL || window2.msURL || window2.oURL;
          if (isDefined(URL)) {
            var objectURL = URL.createObjectURL(data);
            var downloadLink = this._linkDownloader(fileName, objectURL);
            setTimeout(() => {
              URL.revokeObjectURL(objectURL);
              this._objectUrlRevoked = true;
            }, this._revokeObjectURLTimeout);
            this._click(downloadLink);
          } else {
            logger.warn("window.URL || window.webkitURL || window.mozURL || window.msURL || window.oURL is not defined");
          }
        }
      },
      saveAs: function(fileName, format2, data, proxyURL, forceProxy) {
        var fileExtension = FILE_EXTESIONS[format2];
        if (fileExtension) {
          fileName += "." + fileExtension;
        }
        if (isDefined(proxyURL)) {
          ui_errors_default.log("W0001", "Export", "proxyURL", "19.2", "This option is no longer required");
        }
        if (forceProxy) {
          this._saveByProxy(proxyURL, fileName, format2, data);
        } else if (isFunction(window2.Blob)) {
          this._saveBlobAs(fileName, format2, data);
        } else if (isDefined(proxyURL) && !isDefined(navigator.userAgent.match(/iPad/i))) {
          this._saveByProxy(proxyURL, fileName, format2, data);
        } else {
          if (!isDefined(navigator.userAgent.match(/iPad/i))) {
            ui_errors_default.log("E1034");
          }
          var downloadLink = this._linkDownloader(fileName, this._getDataUri(format2, data));
          this._click(downloadLink);
        }
      }
    };
  }
});

// node_modules/jszip/dist/jszip.min.js
var require_jszip_min = __commonJS({
  "node_modules/jszip/dist/jszip.min.js"(exports, module) {
    !function(e) {
      if ("object" == typeof exports && "undefined" != typeof module)
        module.exports = e();
      else if ("function" == typeof define && define.amd)
        define([], e);
      else {
        ("undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this).JSZip = e();
      }
    }(function() {
      return function s(a, o, h) {
        function u(r, e2) {
          if (!o[r]) {
            if (!a[r]) {
              var t = "function" == typeof __require && __require;
              if (!e2 && t)
                return t(r, true);
              if (l)
                return l(r, true);
              var n = new Error("Cannot find module '" + r + "'");
              throw n.code = "MODULE_NOT_FOUND", n;
            }
            var i = o[r] = { exports: {} };
            a[r][0].call(i.exports, function(e3) {
              var t2 = a[r][1][e3];
              return u(t2 || e3);
            }, i, i.exports, s, a, o, h);
          }
          return o[r].exports;
        }
        for (var l = "function" == typeof __require && __require, e = 0; e < h.length; e++)
          u(h[e]);
        return u;
      }({ 1: [function(e, t, r) {
        "use strict";
        var d = e("./utils"), c = e("./support"), p = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        r.encode = function(e2) {
          for (var t2, r2, n, i, s, a, o, h = [], u = 0, l = e2.length, f = l, c2 = "string" !== d.getTypeOf(e2); u < e2.length; )
            f = l - u, n = c2 ? (t2 = e2[u++], r2 = u < l ? e2[u++] : 0, u < l ? e2[u++] : 0) : (t2 = e2.charCodeAt(u++), r2 = u < l ? e2.charCodeAt(u++) : 0, u < l ? e2.charCodeAt(u++) : 0), i = t2 >> 2, s = (3 & t2) << 4 | r2 >> 4, a = 1 < f ? (15 & r2) << 2 | n >> 6 : 64, o = 2 < f ? 63 & n : 64, h.push(p.charAt(i) + p.charAt(s) + p.charAt(a) + p.charAt(o));
          return h.join("");
        }, r.decode = function(e2) {
          var t2, r2, n, i, s, a, o = 0, h = 0, u = "data:";
          if (e2.substr(0, u.length) === u)
            throw new Error("Invalid base64 input, it looks like a data url.");
          var l, f = 3 * (e2 = e2.replace(/[^A-Za-z0-9+/=]/g, "")).length / 4;
          if (e2.charAt(e2.length - 1) === p.charAt(64) && f--, e2.charAt(e2.length - 2) === p.charAt(64) && f--, f % 1 != 0)
            throw new Error("Invalid base64 input, bad content length.");
          for (l = c.uint8array ? new Uint8Array(0 | f) : new Array(0 | f); o < e2.length; )
            t2 = p.indexOf(e2.charAt(o++)) << 2 | (i = p.indexOf(e2.charAt(o++))) >> 4, r2 = (15 & i) << 4 | (s = p.indexOf(e2.charAt(o++))) >> 2, n = (3 & s) << 6 | (a = p.indexOf(e2.charAt(o++))), l[h++] = t2, 64 !== s && (l[h++] = r2), 64 !== a && (l[h++] = n);
          return l;
        };
      }, { "./support": 30, "./utils": 32 }], 2: [function(e, t, r) {
        "use strict";
        var n = e("./external"), i = e("./stream/DataWorker"), s = e("./stream/Crc32Probe"), a = e("./stream/DataLengthProbe");
        function o(e2, t2, r2, n2, i2) {
          this.compressedSize = e2, this.uncompressedSize = t2, this.crc32 = r2, this.compression = n2, this.compressedContent = i2;
        }
        o.prototype = { getContentWorker: function() {
          var e2 = new i(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a("data_length")), t2 = this;
          return e2.on("end", function() {
            if (this.streamInfo.data_length !== t2.uncompressedSize)
              throw new Error("Bug : uncompressed data size mismatch");
          }), e2;
        }, getCompressedWorker: function() {
          return new i(n.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize", this.compressedSize).withStreamInfo("uncompressedSize", this.uncompressedSize).withStreamInfo("crc32", this.crc32).withStreamInfo("compression", this.compression);
        } }, o.createWorkerFrom = function(e2, t2, r2) {
          return e2.pipe(new s()).pipe(new a("uncompressedSize")).pipe(t2.compressWorker(r2)).pipe(new a("compressedSize")).withStreamInfo("compression", t2);
        }, t.exports = o;
      }, { "./external": 6, "./stream/Crc32Probe": 25, "./stream/DataLengthProbe": 26, "./stream/DataWorker": 27 }], 3: [function(e, t, r) {
        "use strict";
        var n = e("./stream/GenericWorker");
        r.STORE = { magic: "\0\0", compressWorker: function() {
          return new n("STORE compression");
        }, uncompressWorker: function() {
          return new n("STORE decompression");
        } }, r.DEFLATE = e("./flate");
      }, { "./flate": 7, "./stream/GenericWorker": 28 }], 4: [function(e, t, r) {
        "use strict";
        var n = e("./utils");
        var o = function() {
          for (var e2, t2 = [], r2 = 0; r2 < 256; r2++) {
            e2 = r2;
            for (var n2 = 0; n2 < 8; n2++)
              e2 = 1 & e2 ? 3988292384 ^ e2 >>> 1 : e2 >>> 1;
            t2[r2] = e2;
          }
          return t2;
        }();
        t.exports = function(e2, t2) {
          return void 0 !== e2 && e2.length ? "string" !== n.getTypeOf(e2) ? function(e3, t3, r2, n2) {
            var i = o, s = n2 + r2;
            e3 ^= -1;
            for (var a = n2; a < s; a++)
              e3 = e3 >>> 8 ^ i[255 & (e3 ^ t3[a])];
            return -1 ^ e3;
          }(0 | t2, e2, e2.length, 0) : function(e3, t3, r2, n2) {
            var i = o, s = n2 + r2;
            e3 ^= -1;
            for (var a = n2; a < s; a++)
              e3 = e3 >>> 8 ^ i[255 & (e3 ^ t3.charCodeAt(a))];
            return -1 ^ e3;
          }(0 | t2, e2, e2.length, 0) : 0;
        };
      }, { "./utils": 32 }], 5: [function(e, t, r) {
        "use strict";
        r.base64 = false, r.binary = false, r.dir = false, r.createFolders = true, r.date = null, r.compression = null, r.compressionOptions = null, r.comment = null, r.unixPermissions = null, r.dosPermissions = null;
      }, {}], 6: [function(e, t, r) {
        "use strict";
        var n = null;
        n = "undefined" != typeof Promise ? Promise : e("lie"), t.exports = { Promise: n };
      }, { lie: 37 }], 7: [function(e, t, r) {
        "use strict";
        var n = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Uint32Array, i = e("pako"), s = e("./utils"), a = e("./stream/GenericWorker"), o = n ? "uint8array" : "array";
        function h(e2, t2) {
          a.call(this, "FlateWorker/" + e2), this._pako = null, this._pakoAction = e2, this._pakoOptions = t2, this.meta = {};
        }
        r.magic = "\b\0", s.inherits(h, a), h.prototype.processChunk = function(e2) {
          this.meta = e2.meta, null === this._pako && this._createPako(), this._pako.push(s.transformTo(o, e2.data), false);
        }, h.prototype.flush = function() {
          a.prototype.flush.call(this), null === this._pako && this._createPako(), this._pako.push([], true);
        }, h.prototype.cleanUp = function() {
          a.prototype.cleanUp.call(this), this._pako = null;
        }, h.prototype._createPako = function() {
          this._pako = new i[this._pakoAction]({ raw: true, level: this._pakoOptions.level || -1 });
          var t2 = this;
          this._pako.onData = function(e2) {
            t2.push({ data: e2, meta: t2.meta });
          };
        }, r.compressWorker = function(e2) {
          return new h("Deflate", e2);
        }, r.uncompressWorker = function() {
          return new h("Inflate", {});
        };
      }, { "./stream/GenericWorker": 28, "./utils": 32, pako: 38 }], 8: [function(e, t, r) {
        "use strict";
        function A(e2, t2) {
          var r2, n2 = "";
          for (r2 = 0; r2 < t2; r2++)
            n2 += String.fromCharCode(255 & e2), e2 >>>= 8;
          return n2;
        }
        function n(e2, t2, r2, n2, i2, s2) {
          var a, o, h = e2.file, u = e2.compression, l = s2 !== O.utf8encode, f = I.transformTo("string", s2(h.name)), c = I.transformTo("string", O.utf8encode(h.name)), d = h.comment, p = I.transformTo("string", s2(d)), m = I.transformTo("string", O.utf8encode(d)), _ = c.length !== h.name.length, g = m.length !== d.length, b = "", v = "", y = "", w = h.dir, k = h.date, x = { crc32: 0, compressedSize: 0, uncompressedSize: 0 };
          t2 && !r2 || (x.crc32 = e2.crc32, x.compressedSize = e2.compressedSize, x.uncompressedSize = e2.uncompressedSize);
          var S = 0;
          t2 && (S |= 8), l || !_ && !g || (S |= 2048);
          var z = 0, C = 0;
          w && (z |= 16), "UNIX" === i2 ? (C = 798, z |= function(e3, t3) {
            var r3 = e3;
            return e3 || (r3 = t3 ? 16893 : 33204), (65535 & r3) << 16;
          }(h.unixPermissions, w)) : (C = 20, z |= function(e3) {
            return 63 & (e3 || 0);
          }(h.dosPermissions)), a = k.getUTCHours(), a <<= 6, a |= k.getUTCMinutes(), a <<= 5, a |= k.getUTCSeconds() / 2, o = k.getUTCFullYear() - 1980, o <<= 4, o |= k.getUTCMonth() + 1, o <<= 5, o |= k.getUTCDate(), _ && (v = A(1, 1) + A(B(f), 4) + c, b += "up" + A(v.length, 2) + v), g && (y = A(1, 1) + A(B(p), 4) + m, b += "uc" + A(y.length, 2) + y);
          var E = "";
          return E += "\n\0", E += A(S, 2), E += u.magic, E += A(a, 2), E += A(o, 2), E += A(x.crc32, 4), E += A(x.compressedSize, 4), E += A(x.uncompressedSize, 4), E += A(f.length, 2), E += A(b.length, 2), { fileRecord: R.LOCAL_FILE_HEADER + E + f + b, dirRecord: R.CENTRAL_FILE_HEADER + A(C, 2) + E + A(p.length, 2) + "\0\0\0\0" + A(z, 4) + A(n2, 4) + f + b + p };
        }
        var I = e("../utils"), i = e("../stream/GenericWorker"), O = e("../utf8"), B = e("../crc32"), R = e("../signature");
        function s(e2, t2, r2, n2) {
          i.call(this, "ZipFileWorker"), this.bytesWritten = 0, this.zipComment = t2, this.zipPlatform = r2, this.encodeFileName = n2, this.streamFiles = e2, this.accumulate = false, this.contentBuffer = [], this.dirRecords = [], this.currentSourceOffset = 0, this.entriesCount = 0, this.currentFile = null, this._sources = [];
        }
        I.inherits(s, i), s.prototype.push = function(e2) {
          var t2 = e2.meta.percent || 0, r2 = this.entriesCount, n2 = this._sources.length;
          this.accumulate ? this.contentBuffer.push(e2) : (this.bytesWritten += e2.data.length, i.prototype.push.call(this, { data: e2.data, meta: { currentFile: this.currentFile, percent: r2 ? (t2 + 100 * (r2 - n2 - 1)) / r2 : 100 } }));
        }, s.prototype.openedSource = function(e2) {
          this.currentSourceOffset = this.bytesWritten, this.currentFile = e2.file.name;
          var t2 = this.streamFiles && !e2.file.dir;
          if (t2) {
            var r2 = n(e2, t2, false, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);
            this.push({ data: r2.fileRecord, meta: { percent: 0 } });
          } else
            this.accumulate = true;
        }, s.prototype.closedSource = function(e2) {
          this.accumulate = false;
          var t2 = this.streamFiles && !e2.file.dir, r2 = n(e2, t2, true, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);
          if (this.dirRecords.push(r2.dirRecord), t2)
            this.push({ data: function(e3) {
              return R.DATA_DESCRIPTOR + A(e3.crc32, 4) + A(e3.compressedSize, 4) + A(e3.uncompressedSize, 4);
            }(e2), meta: { percent: 100 } });
          else
            for (this.push({ data: r2.fileRecord, meta: { percent: 0 } }); this.contentBuffer.length; )
              this.push(this.contentBuffer.shift());
          this.currentFile = null;
        }, s.prototype.flush = function() {
          for (var e2 = this.bytesWritten, t2 = 0; t2 < this.dirRecords.length; t2++)
            this.push({ data: this.dirRecords[t2], meta: { percent: 100 } });
          var r2 = this.bytesWritten - e2, n2 = function(e3, t3, r3, n3, i2) {
            var s2 = I.transformTo("string", i2(n3));
            return R.CENTRAL_DIRECTORY_END + "\0\0\0\0" + A(e3, 2) + A(e3, 2) + A(t3, 4) + A(r3, 4) + A(s2.length, 2) + s2;
          }(this.dirRecords.length, r2, e2, this.zipComment, this.encodeFileName);
          this.push({ data: n2, meta: { percent: 100 } });
        }, s.prototype.prepareNextSource = function() {
          this.previous = this._sources.shift(), this.openedSource(this.previous.streamInfo), this.isPaused ? this.previous.pause() : this.previous.resume();
        }, s.prototype.registerPrevious = function(e2) {
          this._sources.push(e2);
          var t2 = this;
          return e2.on("data", function(e3) {
            t2.processChunk(e3);
          }), e2.on("end", function() {
            t2.closedSource(t2.previous.streamInfo), t2._sources.length ? t2.prepareNextSource() : t2.end();
          }), e2.on("error", function(e3) {
            t2.error(e3);
          }), this;
        }, s.prototype.resume = function() {
          return !!i.prototype.resume.call(this) && (!this.previous && this._sources.length ? (this.prepareNextSource(), true) : this.previous || this._sources.length || this.generatedError ? void 0 : (this.end(), true));
        }, s.prototype.error = function(e2) {
          var t2 = this._sources;
          if (!i.prototype.error.call(this, e2))
            return false;
          for (var r2 = 0; r2 < t2.length; r2++)
            try {
              t2[r2].error(e2);
            } catch (e3) {
            }
          return true;
        }, s.prototype.lock = function() {
          i.prototype.lock.call(this);
          for (var e2 = this._sources, t2 = 0; t2 < e2.length; t2++)
            e2[t2].lock();
        }, t.exports = s;
      }, { "../crc32": 4, "../signature": 23, "../stream/GenericWorker": 28, "../utf8": 31, "../utils": 32 }], 9: [function(e, t, r) {
        "use strict";
        var u = e("../compressions"), n = e("./ZipFileWorker");
        r.generateWorker = function(e2, a, t2) {
          var o = new n(a.streamFiles, t2, a.platform, a.encodeFileName), h = 0;
          try {
            e2.forEach(function(e3, t3) {
              h++;
              var r2 = function(e4, t4) {
                var r3 = e4 || t4, n3 = u[r3];
                if (!n3)
                  throw new Error(r3 + " is not a valid compression method !");
                return n3;
              }(t3.options.compression, a.compression), n2 = t3.options.compressionOptions || a.compressionOptions || {}, i = t3.dir, s = t3.date;
              t3._compressWorker(r2, n2).withStreamInfo("file", { name: e3, dir: i, date: s, comment: t3.comment || "", unixPermissions: t3.unixPermissions, dosPermissions: t3.dosPermissions }).pipe(o);
            }), o.entriesCount = h;
          } catch (e3) {
            o.error(e3);
          }
          return o;
        };
      }, { "../compressions": 3, "./ZipFileWorker": 8 }], 10: [function(e, t, r) {
        "use strict";
        function n() {
          if (!(this instanceof n))
            return new n();
          if (arguments.length)
            throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");
          this.files = /* @__PURE__ */ Object.create(null), this.comment = null, this.root = "", this.clone = function() {
            var e2 = new n();
            for (var t2 in this)
              "function" != typeof this[t2] && (e2[t2] = this[t2]);
            return e2;
          };
        }
        (n.prototype = e("./object")).loadAsync = e("./load"), n.support = e("./support"), n.defaults = e("./defaults"), n.version = "3.10.1", n.loadAsync = function(e2, t2) {
          return new n().loadAsync(e2, t2);
        }, n.external = e("./external"), t.exports = n;
      }, { "./defaults": 5, "./external": 6, "./load": 11, "./object": 15, "./support": 30 }], 11: [function(e, t, r) {
        "use strict";
        var u = e("./utils"), i = e("./external"), n = e("./utf8"), s = e("./zipEntries"), a = e("./stream/Crc32Probe"), l = e("./nodejsUtils");
        function f(n2) {
          return new i.Promise(function(e2, t2) {
            var r2 = n2.decompressed.getContentWorker().pipe(new a());
            r2.on("error", function(e3) {
              t2(e3);
            }).on("end", function() {
              r2.streamInfo.crc32 !== n2.decompressed.crc32 ? t2(new Error("Corrupted zip : CRC32 mismatch")) : e2();
            }).resume();
          });
        }
        t.exports = function(e2, o) {
          var h = this;
          return o = u.extend(o || {}, { base64: false, checkCRC32: false, optimizedBinaryString: false, createFolders: false, decodeFileName: n.utf8decode }), l.isNode && l.isStream(e2) ? i.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")) : u.prepareContent("the loaded zip file", e2, true, o.optimizedBinaryString, o.base64).then(function(e3) {
            var t2 = new s(o);
            return t2.load(e3), t2;
          }).then(function(e3) {
            var t2 = [i.Promise.resolve(e3)], r2 = e3.files;
            if (o.checkCRC32)
              for (var n2 = 0; n2 < r2.length; n2++)
                t2.push(f(r2[n2]));
            return i.Promise.all(t2);
          }).then(function(e3) {
            for (var t2 = e3.shift(), r2 = t2.files, n2 = 0; n2 < r2.length; n2++) {
              var i2 = r2[n2], s2 = i2.fileNameStr, a2 = u.resolve(i2.fileNameStr);
              h.file(a2, i2.decompressed, { binary: true, optimizedBinaryString: true, date: i2.date, dir: i2.dir, comment: i2.fileCommentStr.length ? i2.fileCommentStr : null, unixPermissions: i2.unixPermissions, dosPermissions: i2.dosPermissions, createFolders: o.createFolders }), i2.dir || (h.file(a2).unsafeOriginalName = s2);
            }
            return t2.zipComment.length && (h.comment = t2.zipComment), h;
          });
        };
      }, { "./external": 6, "./nodejsUtils": 14, "./stream/Crc32Probe": 25, "./utf8": 31, "./utils": 32, "./zipEntries": 33 }], 12: [function(e, t, r) {
        "use strict";
        var n = e("../utils"), i = e("../stream/GenericWorker");
        function s(e2, t2) {
          i.call(this, "Nodejs stream input adapter for " + e2), this._upstreamEnded = false, this._bindStream(t2);
        }
        n.inherits(s, i), s.prototype._bindStream = function(e2) {
          var t2 = this;
          (this._stream = e2).pause(), e2.on("data", function(e3) {
            t2.push({ data: e3, meta: { percent: 0 } });
          }).on("error", function(e3) {
            t2.isPaused ? this.generatedError = e3 : t2.error(e3);
          }).on("end", function() {
            t2.isPaused ? t2._upstreamEnded = true : t2.end();
          });
        }, s.prototype.pause = function() {
          return !!i.prototype.pause.call(this) && (this._stream.pause(), true);
        }, s.prototype.resume = function() {
          return !!i.prototype.resume.call(this) && (this._upstreamEnded ? this.end() : this._stream.resume(), true);
        }, t.exports = s;
      }, { "../stream/GenericWorker": 28, "../utils": 32 }], 13: [function(e, t, r) {
        "use strict";
        var i = e("readable-stream").Readable;
        function n(e2, t2, r2) {
          i.call(this, t2), this._helper = e2;
          var n2 = this;
          e2.on("data", function(e3, t3) {
            n2.push(e3) || n2._helper.pause(), r2 && r2(t3);
          }).on("error", function(e3) {
            n2.emit("error", e3);
          }).on("end", function() {
            n2.push(null);
          });
        }
        e("../utils").inherits(n, i), n.prototype._read = function() {
          this._helper.resume();
        }, t.exports = n;
      }, { "../utils": 32, "readable-stream": 16 }], 14: [function(e, t, r) {
        "use strict";
        t.exports = { isNode: "undefined" != typeof Buffer, newBufferFrom: function(e2, t2) {
          if (Buffer.from && Buffer.from !== Uint8Array.from)
            return Buffer.from(e2, t2);
          if ("number" == typeof e2)
            throw new Error('The "data" argument must not be a number');
          return new Buffer(e2, t2);
        }, allocBuffer: function(e2) {
          if (Buffer.alloc)
            return Buffer.alloc(e2);
          var t2 = new Buffer(e2);
          return t2.fill(0), t2;
        }, isBuffer: function(e2) {
          return Buffer.isBuffer(e2);
        }, isStream: function(e2) {
          return e2 && "function" == typeof e2.on && "function" == typeof e2.pause && "function" == typeof e2.resume;
        } };
      }, {}], 15: [function(e, t, r) {
        "use strict";
        function s(e2, t2, r2) {
          var n2, i2 = u.getTypeOf(t2), s2 = u.extend(r2 || {}, f);
          s2.date = s2.date || /* @__PURE__ */ new Date(), null !== s2.compression && (s2.compression = s2.compression.toUpperCase()), "string" == typeof s2.unixPermissions && (s2.unixPermissions = parseInt(s2.unixPermissions, 8)), s2.unixPermissions && 16384 & s2.unixPermissions && (s2.dir = true), s2.dosPermissions && 16 & s2.dosPermissions && (s2.dir = true), s2.dir && (e2 = g(e2)), s2.createFolders && (n2 = _(e2)) && b.call(this, n2, true);
          var a2 = "string" === i2 && false === s2.binary && false === s2.base64;
          r2 && void 0 !== r2.binary || (s2.binary = !a2), (t2 instanceof c && 0 === t2.uncompressedSize || s2.dir || !t2 || 0 === t2.length) && (s2.base64 = false, s2.binary = true, t2 = "", s2.compression = "STORE", i2 = "string");
          var o2 = null;
          o2 = t2 instanceof c || t2 instanceof l ? t2 : p.isNode && p.isStream(t2) ? new m(e2, t2) : u.prepareContent(e2, t2, s2.binary, s2.optimizedBinaryString, s2.base64);
          var h2 = new d(e2, o2, s2);
          this.files[e2] = h2;
        }
        var i = e("./utf8"), u = e("./utils"), l = e("./stream/GenericWorker"), a = e("./stream/StreamHelper"), f = e("./defaults"), c = e("./compressedObject"), d = e("./zipObject"), o = e("./generate"), p = e("./nodejsUtils"), m = e("./nodejs/NodejsStreamInputAdapter"), _ = function(e2) {
          "/" === e2.slice(-1) && (e2 = e2.substring(0, e2.length - 1));
          var t2 = e2.lastIndexOf("/");
          return 0 < t2 ? e2.substring(0, t2) : "";
        }, g = function(e2) {
          return "/" !== e2.slice(-1) && (e2 += "/"), e2;
        }, b = function(e2, t2) {
          return t2 = void 0 !== t2 ? t2 : f.createFolders, e2 = g(e2), this.files[e2] || s.call(this, e2, null, { dir: true, createFolders: t2 }), this.files[e2];
        };
        function h(e2) {
          return "[object RegExp]" === Object.prototype.toString.call(e2);
        }
        var n = { load: function() {
          throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
        }, forEach: function(e2) {
          var t2, r2, n2;
          for (t2 in this.files)
            n2 = this.files[t2], (r2 = t2.slice(this.root.length, t2.length)) && t2.slice(0, this.root.length) === this.root && e2(r2, n2);
        }, filter: function(r2) {
          var n2 = [];
          return this.forEach(function(e2, t2) {
            r2(e2, t2) && n2.push(t2);
          }), n2;
        }, file: function(e2, t2, r2) {
          if (1 !== arguments.length)
            return e2 = this.root + e2, s.call(this, e2, t2, r2), this;
          if (h(e2)) {
            var n2 = e2;
            return this.filter(function(e3, t3) {
              return !t3.dir && n2.test(e3);
            });
          }
          var i2 = this.files[this.root + e2];
          return i2 && !i2.dir ? i2 : null;
        }, folder: function(r2) {
          if (!r2)
            return this;
          if (h(r2))
            return this.filter(function(e3, t3) {
              return t3.dir && r2.test(e3);
            });
          var e2 = this.root + r2, t2 = b.call(this, e2), n2 = this.clone();
          return n2.root = t2.name, n2;
        }, remove: function(r2) {
          r2 = this.root + r2;
          var e2 = this.files[r2];
          if (e2 || ("/" !== r2.slice(-1) && (r2 += "/"), e2 = this.files[r2]), e2 && !e2.dir)
            delete this.files[r2];
          else
            for (var t2 = this.filter(function(e3, t3) {
              return t3.name.slice(0, r2.length) === r2;
            }), n2 = 0; n2 < t2.length; n2++)
              delete this.files[t2[n2].name];
          return this;
        }, generate: function() {
          throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
        }, generateInternalStream: function(e2) {
          var t2, r2 = {};
          try {
            if ((r2 = u.extend(e2 || {}, { streamFiles: false, compression: "STORE", compressionOptions: null, type: "", platform: "DOS", comment: null, mimeType: "application/zip", encodeFileName: i.utf8encode })).type = r2.type.toLowerCase(), r2.compression = r2.compression.toUpperCase(), "binarystring" === r2.type && (r2.type = "string"), !r2.type)
              throw new Error("No output type specified.");
            u.checkSupport(r2.type), "darwin" !== r2.platform && "freebsd" !== r2.platform && "linux" !== r2.platform && "sunos" !== r2.platform || (r2.platform = "UNIX"), "win32" === r2.platform && (r2.platform = "DOS");
            var n2 = r2.comment || this.comment || "";
            t2 = o.generateWorker(this, r2, n2);
          } catch (e3) {
            (t2 = new l("error")).error(e3);
          }
          return new a(t2, r2.type || "string", r2.mimeType);
        }, generateAsync: function(e2, t2) {
          return this.generateInternalStream(e2).accumulate(t2);
        }, generateNodeStream: function(e2, t2) {
          return (e2 = e2 || {}).type || (e2.type = "nodebuffer"), this.generateInternalStream(e2).toNodejsStream(t2);
        } };
        t.exports = n;
      }, { "./compressedObject": 2, "./defaults": 5, "./generate": 9, "./nodejs/NodejsStreamInputAdapter": 12, "./nodejsUtils": 14, "./stream/GenericWorker": 28, "./stream/StreamHelper": 29, "./utf8": 31, "./utils": 32, "./zipObject": 35 }], 16: [function(e, t, r) {
        "use strict";
        t.exports = e("stream");
      }, { stream: void 0 }], 17: [function(e, t, r) {
        "use strict";
        var n = e("./DataReader");
        function i(e2) {
          n.call(this, e2);
          for (var t2 = 0; t2 < this.data.length; t2++)
            e2[t2] = 255 & e2[t2];
        }
        e("../utils").inherits(i, n), i.prototype.byteAt = function(e2) {
          return this.data[this.zero + e2];
        }, i.prototype.lastIndexOfSignature = function(e2) {
          for (var t2 = e2.charCodeAt(0), r2 = e2.charCodeAt(1), n2 = e2.charCodeAt(2), i2 = e2.charCodeAt(3), s = this.length - 4; 0 <= s; --s)
            if (this.data[s] === t2 && this.data[s + 1] === r2 && this.data[s + 2] === n2 && this.data[s + 3] === i2)
              return s - this.zero;
          return -1;
        }, i.prototype.readAndCheckSignature = function(e2) {
          var t2 = e2.charCodeAt(0), r2 = e2.charCodeAt(1), n2 = e2.charCodeAt(2), i2 = e2.charCodeAt(3), s = this.readData(4);
          return t2 === s[0] && r2 === s[1] && n2 === s[2] && i2 === s[3];
        }, i.prototype.readData = function(e2) {
          if (this.checkOffset(e2), 0 === e2)
            return [];
          var t2 = this.data.slice(this.zero + this.index, this.zero + this.index + e2);
          return this.index += e2, t2;
        }, t.exports = i;
      }, { "../utils": 32, "./DataReader": 18 }], 18: [function(e, t, r) {
        "use strict";
        var n = e("../utils");
        function i(e2) {
          this.data = e2, this.length = e2.length, this.index = 0, this.zero = 0;
        }
        i.prototype = { checkOffset: function(e2) {
          this.checkIndex(this.index + e2);
        }, checkIndex: function(e2) {
          if (this.length < this.zero + e2 || e2 < 0)
            throw new Error("End of data reached (data length = " + this.length + ", asked index = " + e2 + "). Corrupted zip ?");
        }, setIndex: function(e2) {
          this.checkIndex(e2), this.index = e2;
        }, skip: function(e2) {
          this.setIndex(this.index + e2);
        }, byteAt: function() {
        }, readInt: function(e2) {
          var t2, r2 = 0;
          for (this.checkOffset(e2), t2 = this.index + e2 - 1; t2 >= this.index; t2--)
            r2 = (r2 << 8) + this.byteAt(t2);
          return this.index += e2, r2;
        }, readString: function(e2) {
          return n.transformTo("string", this.readData(e2));
        }, readData: function() {
        }, lastIndexOfSignature: function() {
        }, readAndCheckSignature: function() {
        }, readDate: function() {
          var e2 = this.readInt(4);
          return new Date(Date.UTC(1980 + (e2 >> 25 & 127), (e2 >> 21 & 15) - 1, e2 >> 16 & 31, e2 >> 11 & 31, e2 >> 5 & 63, (31 & e2) << 1));
        } }, t.exports = i;
      }, { "../utils": 32 }], 19: [function(e, t, r) {
        "use strict";
        var n = e("./Uint8ArrayReader");
        function i(e2) {
          n.call(this, e2);
        }
        e("../utils").inherits(i, n), i.prototype.readData = function(e2) {
          this.checkOffset(e2);
          var t2 = this.data.slice(this.zero + this.index, this.zero + this.index + e2);
          return this.index += e2, t2;
        }, t.exports = i;
      }, { "../utils": 32, "./Uint8ArrayReader": 21 }], 20: [function(e, t, r) {
        "use strict";
        var n = e("./DataReader");
        function i(e2) {
          n.call(this, e2);
        }
        e("../utils").inherits(i, n), i.prototype.byteAt = function(e2) {
          return this.data.charCodeAt(this.zero + e2);
        }, i.prototype.lastIndexOfSignature = function(e2) {
          return this.data.lastIndexOf(e2) - this.zero;
        }, i.prototype.readAndCheckSignature = function(e2) {
          return e2 === this.readData(4);
        }, i.prototype.readData = function(e2) {
          this.checkOffset(e2);
          var t2 = this.data.slice(this.zero + this.index, this.zero + this.index + e2);
          return this.index += e2, t2;
        }, t.exports = i;
      }, { "../utils": 32, "./DataReader": 18 }], 21: [function(e, t, r) {
        "use strict";
        var n = e("./ArrayReader");
        function i(e2) {
          n.call(this, e2);
        }
        e("../utils").inherits(i, n), i.prototype.readData = function(e2) {
          if (this.checkOffset(e2), 0 === e2)
            return new Uint8Array(0);
          var t2 = this.data.subarray(this.zero + this.index, this.zero + this.index + e2);
          return this.index += e2, t2;
        }, t.exports = i;
      }, { "../utils": 32, "./ArrayReader": 17 }], 22: [function(e, t, r) {
        "use strict";
        var n = e("../utils"), i = e("../support"), s = e("./ArrayReader"), a = e("./StringReader"), o = e("./NodeBufferReader"), h = e("./Uint8ArrayReader");
        t.exports = function(e2) {
          var t2 = n.getTypeOf(e2);
          return n.checkSupport(t2), "string" !== t2 || i.uint8array ? "nodebuffer" === t2 ? new o(e2) : i.uint8array ? new h(n.transformTo("uint8array", e2)) : new s(n.transformTo("array", e2)) : new a(e2);
        };
      }, { "../support": 30, "../utils": 32, "./ArrayReader": 17, "./NodeBufferReader": 19, "./StringReader": 20, "./Uint8ArrayReader": 21 }], 23: [function(e, t, r) {
        "use strict";
        r.LOCAL_FILE_HEADER = "PK", r.CENTRAL_FILE_HEADER = "PK", r.CENTRAL_DIRECTORY_END = "PK", r.ZIP64_CENTRAL_DIRECTORY_LOCATOR = "PK\x07", r.ZIP64_CENTRAL_DIRECTORY_END = "PK", r.DATA_DESCRIPTOR = "PK\x07\b";
      }, {}], 24: [function(e, t, r) {
        "use strict";
        var n = e("./GenericWorker"), i = e("../utils");
        function s(e2) {
          n.call(this, "ConvertWorker to " + e2), this.destType = e2;
        }
        i.inherits(s, n), s.prototype.processChunk = function(e2) {
          this.push({ data: i.transformTo(this.destType, e2.data), meta: e2.meta });
        }, t.exports = s;
      }, { "../utils": 32, "./GenericWorker": 28 }], 25: [function(e, t, r) {
        "use strict";
        var n = e("./GenericWorker"), i = e("../crc32");
        function s() {
          n.call(this, "Crc32Probe"), this.withStreamInfo("crc32", 0);
        }
        e("../utils").inherits(s, n), s.prototype.processChunk = function(e2) {
          this.streamInfo.crc32 = i(e2.data, this.streamInfo.crc32 || 0), this.push(e2);
        }, t.exports = s;
      }, { "../crc32": 4, "../utils": 32, "./GenericWorker": 28 }], 26: [function(e, t, r) {
        "use strict";
        var n = e("../utils"), i = e("./GenericWorker");
        function s(e2) {
          i.call(this, "DataLengthProbe for " + e2), this.propName = e2, this.withStreamInfo(e2, 0);
        }
        n.inherits(s, i), s.prototype.processChunk = function(e2) {
          if (e2) {
            var t2 = this.streamInfo[this.propName] || 0;
            this.streamInfo[this.propName] = t2 + e2.data.length;
          }
          i.prototype.processChunk.call(this, e2);
        }, t.exports = s;
      }, { "../utils": 32, "./GenericWorker": 28 }], 27: [function(e, t, r) {
        "use strict";
        var n = e("../utils"), i = e("./GenericWorker");
        function s(e2) {
          i.call(this, "DataWorker");
          var t2 = this;
          this.dataIsReady = false, this.index = 0, this.max = 0, this.data = null, this.type = "", this._tickScheduled = false, e2.then(function(e3) {
            t2.dataIsReady = true, t2.data = e3, t2.max = e3 && e3.length || 0, t2.type = n.getTypeOf(e3), t2.isPaused || t2._tickAndRepeat();
          }, function(e3) {
            t2.error(e3);
          });
        }
        n.inherits(s, i), s.prototype.cleanUp = function() {
          i.prototype.cleanUp.call(this), this.data = null;
        }, s.prototype.resume = function() {
          return !!i.prototype.resume.call(this) && (!this._tickScheduled && this.dataIsReady && (this._tickScheduled = true, n.delay(this._tickAndRepeat, [], this)), true);
        }, s.prototype._tickAndRepeat = function() {
          this._tickScheduled = false, this.isPaused || this.isFinished || (this._tick(), this.isFinished || (n.delay(this._tickAndRepeat, [], this), this._tickScheduled = true));
        }, s.prototype._tick = function() {
          if (this.isPaused || this.isFinished)
            return false;
          var e2 = null, t2 = Math.min(this.max, this.index + 16384);
          if (this.index >= this.max)
            return this.end();
          switch (this.type) {
            case "string":
              e2 = this.data.substring(this.index, t2);
              break;
            case "uint8array":
              e2 = this.data.subarray(this.index, t2);
              break;
            case "array":
            case "nodebuffer":
              e2 = this.data.slice(this.index, t2);
          }
          return this.index = t2, this.push({ data: e2, meta: { percent: this.max ? this.index / this.max * 100 : 0 } });
        }, t.exports = s;
      }, { "../utils": 32, "./GenericWorker": 28 }], 28: [function(e, t, r) {
        "use strict";
        function n(e2) {
          this.name = e2 || "default", this.streamInfo = {}, this.generatedError = null, this.extraStreamInfo = {}, this.isPaused = true, this.isFinished = false, this.isLocked = false, this._listeners = { data: [], end: [], error: [] }, this.previous = null;
        }
        n.prototype = { push: function(e2) {
          this.emit("data", e2);
        }, end: function() {
          if (this.isFinished)
            return false;
          this.flush();
          try {
            this.emit("end"), this.cleanUp(), this.isFinished = true;
          } catch (e2) {
            this.emit("error", e2);
          }
          return true;
        }, error: function(e2) {
          return !this.isFinished && (this.isPaused ? this.generatedError = e2 : (this.isFinished = true, this.emit("error", e2), this.previous && this.previous.error(e2), this.cleanUp()), true);
        }, on: function(e2, t2) {
          return this._listeners[e2].push(t2), this;
        }, cleanUp: function() {
          this.streamInfo = this.generatedError = this.extraStreamInfo = null, this._listeners = [];
        }, emit: function(e2, t2) {
          if (this._listeners[e2])
            for (var r2 = 0; r2 < this._listeners[e2].length; r2++)
              this._listeners[e2][r2].call(this, t2);
        }, pipe: function(e2) {
          return e2.registerPrevious(this);
        }, registerPrevious: function(e2) {
          if (this.isLocked)
            throw new Error("The stream '" + this + "' has already been used.");
          this.streamInfo = e2.streamInfo, this.mergeStreamInfo(), this.previous = e2;
          var t2 = this;
          return e2.on("data", function(e3) {
            t2.processChunk(e3);
          }), e2.on("end", function() {
            t2.end();
          }), e2.on("error", function(e3) {
            t2.error(e3);
          }), this;
        }, pause: function() {
          return !this.isPaused && !this.isFinished && (this.isPaused = true, this.previous && this.previous.pause(), true);
        }, resume: function() {
          if (!this.isPaused || this.isFinished)
            return false;
          var e2 = this.isPaused = false;
          return this.generatedError && (this.error(this.generatedError), e2 = true), this.previous && this.previous.resume(), !e2;
        }, flush: function() {
        }, processChunk: function(e2) {
          this.push(e2);
        }, withStreamInfo: function(e2, t2) {
          return this.extraStreamInfo[e2] = t2, this.mergeStreamInfo(), this;
        }, mergeStreamInfo: function() {
          for (var e2 in this.extraStreamInfo)
            Object.prototype.hasOwnProperty.call(this.extraStreamInfo, e2) && (this.streamInfo[e2] = this.extraStreamInfo[e2]);
        }, lock: function() {
          if (this.isLocked)
            throw new Error("The stream '" + this + "' has already been used.");
          this.isLocked = true, this.previous && this.previous.lock();
        }, toString: function() {
          var e2 = "Worker " + this.name;
          return this.previous ? this.previous + " -> " + e2 : e2;
        } }, t.exports = n;
      }, {}], 29: [function(e, t, r) {
        "use strict";
        var h = e("../utils"), i = e("./ConvertWorker"), s = e("./GenericWorker"), u = e("../base64"), n = e("../support"), a = e("../external"), o = null;
        if (n.nodestream)
          try {
            o = e("../nodejs/NodejsStreamOutputAdapter");
          } catch (e2) {
          }
        function l(e2, o2) {
          return new a.Promise(function(t2, r2) {
            var n2 = [], i2 = e2._internalType, s2 = e2._outputType, a2 = e2._mimeType;
            e2.on("data", function(e3, t3) {
              n2.push(e3), o2 && o2(t3);
            }).on("error", function(e3) {
              n2 = [], r2(e3);
            }).on("end", function() {
              try {
                var e3 = function(e4, t3, r3) {
                  switch (e4) {
                    case "blob":
                      return h.newBlob(h.transformTo("arraybuffer", t3), r3);
                    case "base64":
                      return u.encode(t3);
                    default:
                      return h.transformTo(e4, t3);
                  }
                }(s2, function(e4, t3) {
                  var r3, n3 = 0, i3 = null, s3 = 0;
                  for (r3 = 0; r3 < t3.length; r3++)
                    s3 += t3[r3].length;
                  switch (e4) {
                    case "string":
                      return t3.join("");
                    case "array":
                      return Array.prototype.concat.apply([], t3);
                    case "uint8array":
                      for (i3 = new Uint8Array(s3), r3 = 0; r3 < t3.length; r3++)
                        i3.set(t3[r3], n3), n3 += t3[r3].length;
                      return i3;
                    case "nodebuffer":
                      return Buffer.concat(t3);
                    default:
                      throw new Error("concat : unsupported type '" + e4 + "'");
                  }
                }(i2, n2), a2);
                t2(e3);
              } catch (e4) {
                r2(e4);
              }
              n2 = [];
            }).resume();
          });
        }
        function f(e2, t2, r2) {
          var n2 = t2;
          switch (t2) {
            case "blob":
            case "arraybuffer":
              n2 = "uint8array";
              break;
            case "base64":
              n2 = "string";
          }
          try {
            this._internalType = n2, this._outputType = t2, this._mimeType = r2, h.checkSupport(n2), this._worker = e2.pipe(new i(n2)), e2.lock();
          } catch (e3) {
            this._worker = new s("error"), this._worker.error(e3);
          }
        }
        f.prototype = { accumulate: function(e2) {
          return l(this, e2);
        }, on: function(e2, t2) {
          var r2 = this;
          return "data" === e2 ? this._worker.on(e2, function(e3) {
            t2.call(r2, e3.data, e3.meta);
          }) : this._worker.on(e2, function() {
            h.delay(t2, arguments, r2);
          }), this;
        }, resume: function() {
          return h.delay(this._worker.resume, [], this._worker), this;
        }, pause: function() {
          return this._worker.pause(), this;
        }, toNodejsStream: function(e2) {
          if (h.checkSupport("nodestream"), "nodebuffer" !== this._outputType)
            throw new Error(this._outputType + " is not supported by this method");
          return new o(this, { objectMode: "nodebuffer" !== this._outputType }, e2);
        } }, t.exports = f;
      }, { "../base64": 1, "../external": 6, "../nodejs/NodejsStreamOutputAdapter": 13, "../support": 30, "../utils": 32, "./ConvertWorker": 24, "./GenericWorker": 28 }], 30: [function(e, t, r) {
        "use strict";
        if (r.base64 = true, r.array = true, r.string = true, r.arraybuffer = "undefined" != typeof ArrayBuffer && "undefined" != typeof Uint8Array, r.nodebuffer = "undefined" != typeof Buffer, r.uint8array = "undefined" != typeof Uint8Array, "undefined" == typeof ArrayBuffer)
          r.blob = false;
        else {
          var n = new ArrayBuffer(0);
          try {
            r.blob = 0 === new Blob([n], { type: "application/zip" }).size;
          } catch (e2) {
            try {
              var i = new (self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder)();
              i.append(n), r.blob = 0 === i.getBlob("application/zip").size;
            } catch (e3) {
              r.blob = false;
            }
          }
        }
        try {
          r.nodestream = !!e("readable-stream").Readable;
        } catch (e2) {
          r.nodestream = false;
        }
      }, { "readable-stream": 16 }], 31: [function(e, t, s) {
        "use strict";
        for (var o = e("./utils"), h = e("./support"), r = e("./nodejsUtils"), n = e("./stream/GenericWorker"), u = new Array(256), i = 0; i < 256; i++)
          u[i] = 252 <= i ? 6 : 248 <= i ? 5 : 240 <= i ? 4 : 224 <= i ? 3 : 192 <= i ? 2 : 1;
        u[254] = u[254] = 1;
        function a() {
          n.call(this, "utf-8 decode"), this.leftOver = null;
        }
        function l() {
          n.call(this, "utf-8 encode");
        }
        s.utf8encode = function(e2) {
          return h.nodebuffer ? r.newBufferFrom(e2, "utf-8") : function(e3) {
            var t2, r2, n2, i2, s2, a2 = e3.length, o2 = 0;
            for (i2 = 0; i2 < a2; i2++)
              55296 == (64512 & (r2 = e3.charCodeAt(i2))) && i2 + 1 < a2 && 56320 == (64512 & (n2 = e3.charCodeAt(i2 + 1))) && (r2 = 65536 + (r2 - 55296 << 10) + (n2 - 56320), i2++), o2 += r2 < 128 ? 1 : r2 < 2048 ? 2 : r2 < 65536 ? 3 : 4;
            for (t2 = h.uint8array ? new Uint8Array(o2) : new Array(o2), i2 = s2 = 0; s2 < o2; i2++)
              55296 == (64512 & (r2 = e3.charCodeAt(i2))) && i2 + 1 < a2 && 56320 == (64512 & (n2 = e3.charCodeAt(i2 + 1))) && (r2 = 65536 + (r2 - 55296 << 10) + (n2 - 56320), i2++), r2 < 128 ? t2[s2++] = r2 : (r2 < 2048 ? t2[s2++] = 192 | r2 >>> 6 : (r2 < 65536 ? t2[s2++] = 224 | r2 >>> 12 : (t2[s2++] = 240 | r2 >>> 18, t2[s2++] = 128 | r2 >>> 12 & 63), t2[s2++] = 128 | r2 >>> 6 & 63), t2[s2++] = 128 | 63 & r2);
            return t2;
          }(e2);
        }, s.utf8decode = function(e2) {
          return h.nodebuffer ? o.transformTo("nodebuffer", e2).toString("utf-8") : function(e3) {
            var t2, r2, n2, i2, s2 = e3.length, a2 = new Array(2 * s2);
            for (t2 = r2 = 0; t2 < s2; )
              if ((n2 = e3[t2++]) < 128)
                a2[r2++] = n2;
              else if (4 < (i2 = u[n2]))
                a2[r2++] = 65533, t2 += i2 - 1;
              else {
                for (n2 &= 2 === i2 ? 31 : 3 === i2 ? 15 : 7; 1 < i2 && t2 < s2; )
                  n2 = n2 << 6 | 63 & e3[t2++], i2--;
                1 < i2 ? a2[r2++] = 65533 : n2 < 65536 ? a2[r2++] = n2 : (n2 -= 65536, a2[r2++] = 55296 | n2 >> 10 & 1023, a2[r2++] = 56320 | 1023 & n2);
              }
            return a2.length !== r2 && (a2.subarray ? a2 = a2.subarray(0, r2) : a2.length = r2), o.applyFromCharCode(a2);
          }(e2 = o.transformTo(h.uint8array ? "uint8array" : "array", e2));
        }, o.inherits(a, n), a.prototype.processChunk = function(e2) {
          var t2 = o.transformTo(h.uint8array ? "uint8array" : "array", e2.data);
          if (this.leftOver && this.leftOver.length) {
            if (h.uint8array) {
              var r2 = t2;
              (t2 = new Uint8Array(r2.length + this.leftOver.length)).set(this.leftOver, 0), t2.set(r2, this.leftOver.length);
            } else
              t2 = this.leftOver.concat(t2);
            this.leftOver = null;
          }
          var n2 = function(e3, t3) {
            var r3;
            for ((t3 = t3 || e3.length) > e3.length && (t3 = e3.length), r3 = t3 - 1; 0 <= r3 && 128 == (192 & e3[r3]); )
              r3--;
            return r3 < 0 ? t3 : 0 === r3 ? t3 : r3 + u[e3[r3]] > t3 ? r3 : t3;
          }(t2), i2 = t2;
          n2 !== t2.length && (h.uint8array ? (i2 = t2.subarray(0, n2), this.leftOver = t2.subarray(n2, t2.length)) : (i2 = t2.slice(0, n2), this.leftOver = t2.slice(n2, t2.length))), this.push({ data: s.utf8decode(i2), meta: e2.meta });
        }, a.prototype.flush = function() {
          this.leftOver && this.leftOver.length && (this.push({ data: s.utf8decode(this.leftOver), meta: {} }), this.leftOver = null);
        }, s.Utf8DecodeWorker = a, o.inherits(l, n), l.prototype.processChunk = function(e2) {
          this.push({ data: s.utf8encode(e2.data), meta: e2.meta });
        }, s.Utf8EncodeWorker = l;
      }, { "./nodejsUtils": 14, "./stream/GenericWorker": 28, "./support": 30, "./utils": 32 }], 32: [function(e, t, a) {
        "use strict";
        var o = e("./support"), h = e("./base64"), r = e("./nodejsUtils"), u = e("./external");
        function n(e2) {
          return e2;
        }
        function l(e2, t2) {
          for (var r2 = 0; r2 < e2.length; ++r2)
            t2[r2] = 255 & e2.charCodeAt(r2);
          return t2;
        }
        e("setimmediate"), a.newBlob = function(t2, r2) {
          a.checkSupport("blob");
          try {
            return new Blob([t2], { type: r2 });
          } catch (e2) {
            try {
              var n2 = new (self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder)();
              return n2.append(t2), n2.getBlob(r2);
            } catch (e3) {
              throw new Error("Bug : can't construct the Blob.");
            }
          }
        };
        var i = { stringifyByChunk: function(e2, t2, r2) {
          var n2 = [], i2 = 0, s2 = e2.length;
          if (s2 <= r2)
            return String.fromCharCode.apply(null, e2);
          for (; i2 < s2; )
            "array" === t2 || "nodebuffer" === t2 ? n2.push(String.fromCharCode.apply(null, e2.slice(i2, Math.min(i2 + r2, s2)))) : n2.push(String.fromCharCode.apply(null, e2.subarray(i2, Math.min(i2 + r2, s2)))), i2 += r2;
          return n2.join("");
        }, stringifyByChar: function(e2) {
          for (var t2 = "", r2 = 0; r2 < e2.length; r2++)
            t2 += String.fromCharCode(e2[r2]);
          return t2;
        }, applyCanBeUsed: { uint8array: function() {
          try {
            return o.uint8array && 1 === String.fromCharCode.apply(null, new Uint8Array(1)).length;
          } catch (e2) {
            return false;
          }
        }(), nodebuffer: function() {
          try {
            return o.nodebuffer && 1 === String.fromCharCode.apply(null, r.allocBuffer(1)).length;
          } catch (e2) {
            return false;
          }
        }() } };
        function s(e2) {
          var t2 = 65536, r2 = a.getTypeOf(e2), n2 = true;
          if ("uint8array" === r2 ? n2 = i.applyCanBeUsed.uint8array : "nodebuffer" === r2 && (n2 = i.applyCanBeUsed.nodebuffer), n2)
            for (; 1 < t2; )
              try {
                return i.stringifyByChunk(e2, r2, t2);
              } catch (e3) {
                t2 = Math.floor(t2 / 2);
              }
          return i.stringifyByChar(e2);
        }
        function f(e2, t2) {
          for (var r2 = 0; r2 < e2.length; r2++)
            t2[r2] = e2[r2];
          return t2;
        }
        a.applyFromCharCode = s;
        var c = {};
        c.string = { string: n, array: function(e2) {
          return l(e2, new Array(e2.length));
        }, arraybuffer: function(e2) {
          return c.string.uint8array(e2).buffer;
        }, uint8array: function(e2) {
          return l(e2, new Uint8Array(e2.length));
        }, nodebuffer: function(e2) {
          return l(e2, r.allocBuffer(e2.length));
        } }, c.array = { string: s, array: n, arraybuffer: function(e2) {
          return new Uint8Array(e2).buffer;
        }, uint8array: function(e2) {
          return new Uint8Array(e2);
        }, nodebuffer: function(e2) {
          return r.newBufferFrom(e2);
        } }, c.arraybuffer = { string: function(e2) {
          return s(new Uint8Array(e2));
        }, array: function(e2) {
          return f(new Uint8Array(e2), new Array(e2.byteLength));
        }, arraybuffer: n, uint8array: function(e2) {
          return new Uint8Array(e2);
        }, nodebuffer: function(e2) {
          return r.newBufferFrom(new Uint8Array(e2));
        } }, c.uint8array = { string: s, array: function(e2) {
          return f(e2, new Array(e2.length));
        }, arraybuffer: function(e2) {
          return e2.buffer;
        }, uint8array: n, nodebuffer: function(e2) {
          return r.newBufferFrom(e2);
        } }, c.nodebuffer = { string: s, array: function(e2) {
          return f(e2, new Array(e2.length));
        }, arraybuffer: function(e2) {
          return c.nodebuffer.uint8array(e2).buffer;
        }, uint8array: function(e2) {
          return f(e2, new Uint8Array(e2.length));
        }, nodebuffer: n }, a.transformTo = function(e2, t2) {
          if (t2 = t2 || "", !e2)
            return t2;
          a.checkSupport(e2);
          var r2 = a.getTypeOf(t2);
          return c[r2][e2](t2);
        }, a.resolve = function(e2) {
          for (var t2 = e2.split("/"), r2 = [], n2 = 0; n2 < t2.length; n2++) {
            var i2 = t2[n2];
            "." === i2 || "" === i2 && 0 !== n2 && n2 !== t2.length - 1 || (".." === i2 ? r2.pop() : r2.push(i2));
          }
          return r2.join("/");
        }, a.getTypeOf = function(e2) {
          return "string" == typeof e2 ? "string" : "[object Array]" === Object.prototype.toString.call(e2) ? "array" : o.nodebuffer && r.isBuffer(e2) ? "nodebuffer" : o.uint8array && e2 instanceof Uint8Array ? "uint8array" : o.arraybuffer && e2 instanceof ArrayBuffer ? "arraybuffer" : void 0;
        }, a.checkSupport = function(e2) {
          if (!o[e2.toLowerCase()])
            throw new Error(e2 + " is not supported by this platform");
        }, a.MAX_VALUE_16BITS = 65535, a.MAX_VALUE_32BITS = -1, a.pretty = function(e2) {
          var t2, r2, n2 = "";
          for (r2 = 0; r2 < (e2 || "").length; r2++)
            n2 += "\\x" + ((t2 = e2.charCodeAt(r2)) < 16 ? "0" : "") + t2.toString(16).toUpperCase();
          return n2;
        }, a.delay = function(e2, t2, r2) {
          setImmediate(function() {
            e2.apply(r2 || null, t2 || []);
          });
        }, a.inherits = function(e2, t2) {
          function r2() {
          }
          r2.prototype = t2.prototype, e2.prototype = new r2();
        }, a.extend = function() {
          var e2, t2, r2 = {};
          for (e2 = 0; e2 < arguments.length; e2++)
            for (t2 in arguments[e2])
              Object.prototype.hasOwnProperty.call(arguments[e2], t2) && void 0 === r2[t2] && (r2[t2] = arguments[e2][t2]);
          return r2;
        }, a.prepareContent = function(r2, e2, n2, i2, s2) {
          return u.Promise.resolve(e2).then(function(n3) {
            return o.blob && (n3 instanceof Blob || -1 !== ["[object File]", "[object Blob]"].indexOf(Object.prototype.toString.call(n3))) && "undefined" != typeof FileReader ? new u.Promise(function(t2, r3) {
              var e3 = new FileReader();
              e3.onload = function(e4) {
                t2(e4.target.result);
              }, e3.onerror = function(e4) {
                r3(e4.target.error);
              }, e3.readAsArrayBuffer(n3);
            }) : n3;
          }).then(function(e3) {
            var t2 = a.getTypeOf(e3);
            return t2 ? ("arraybuffer" === t2 ? e3 = a.transformTo("uint8array", e3) : "string" === t2 && (s2 ? e3 = h.decode(e3) : n2 && true !== i2 && (e3 = function(e4) {
              return l(e4, o.uint8array ? new Uint8Array(e4.length) : new Array(e4.length));
            }(e3))), e3) : u.Promise.reject(new Error("Can't read the data of '" + r2 + "'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"));
          });
        };
      }, { "./base64": 1, "./external": 6, "./nodejsUtils": 14, "./support": 30, setimmediate: 54 }], 33: [function(e, t, r) {
        "use strict";
        var n = e("./reader/readerFor"), i = e("./utils"), s = e("./signature"), a = e("./zipEntry"), o = e("./support");
        function h(e2) {
          this.files = [], this.loadOptions = e2;
        }
        h.prototype = { checkSignature: function(e2) {
          if (!this.reader.readAndCheckSignature(e2)) {
            this.reader.index -= 4;
            var t2 = this.reader.readString(4);
            throw new Error("Corrupted zip or bug: unexpected signature (" + i.pretty(t2) + ", expected " + i.pretty(e2) + ")");
          }
        }, isSignature: function(e2, t2) {
          var r2 = this.reader.index;
          this.reader.setIndex(e2);
          var n2 = this.reader.readString(4) === t2;
          return this.reader.setIndex(r2), n2;
        }, readBlockEndOfCentral: function() {
          this.diskNumber = this.reader.readInt(2), this.diskWithCentralDirStart = this.reader.readInt(2), this.centralDirRecordsOnThisDisk = this.reader.readInt(2), this.centralDirRecords = this.reader.readInt(2), this.centralDirSize = this.reader.readInt(4), this.centralDirOffset = this.reader.readInt(4), this.zipCommentLength = this.reader.readInt(2);
          var e2 = this.reader.readData(this.zipCommentLength), t2 = o.uint8array ? "uint8array" : "array", r2 = i.transformTo(t2, e2);
          this.zipComment = this.loadOptions.decodeFileName(r2);
        }, readBlockZip64EndOfCentral: function() {
          this.zip64EndOfCentralSize = this.reader.readInt(8), this.reader.skip(4), this.diskNumber = this.reader.readInt(4), this.diskWithCentralDirStart = this.reader.readInt(4), this.centralDirRecordsOnThisDisk = this.reader.readInt(8), this.centralDirRecords = this.reader.readInt(8), this.centralDirSize = this.reader.readInt(8), this.centralDirOffset = this.reader.readInt(8), this.zip64ExtensibleData = {};
          for (var e2, t2, r2, n2 = this.zip64EndOfCentralSize - 44; 0 < n2; )
            e2 = this.reader.readInt(2), t2 = this.reader.readInt(4), r2 = this.reader.readData(t2), this.zip64ExtensibleData[e2] = { id: e2, length: t2, value: r2 };
        }, readBlockZip64EndOfCentralLocator: function() {
          if (this.diskWithZip64CentralDirStart = this.reader.readInt(4), this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8), this.disksCount = this.reader.readInt(4), 1 < this.disksCount)
            throw new Error("Multi-volumes zip are not supported");
        }, readLocalFiles: function() {
          var e2, t2;
          for (e2 = 0; e2 < this.files.length; e2++)
            t2 = this.files[e2], this.reader.setIndex(t2.localHeaderOffset), this.checkSignature(s.LOCAL_FILE_HEADER), t2.readLocalPart(this.reader), t2.handleUTF8(), t2.processAttributes();
        }, readCentralDir: function() {
          var e2;
          for (this.reader.setIndex(this.centralDirOffset); this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER); )
            (e2 = new a({ zip64: this.zip64 }, this.loadOptions)).readCentralPart(this.reader), this.files.push(e2);
          if (this.centralDirRecords !== this.files.length && 0 !== this.centralDirRecords && 0 === this.files.length)
            throw new Error("Corrupted zip or bug: expected " + this.centralDirRecords + " records in central dir, got " + this.files.length);
        }, readEndOfCentral: function() {
          var e2 = this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);
          if (e2 < 0)
            throw !this.isSignature(0, s.LOCAL_FILE_HEADER) ? new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html") : new Error("Corrupted zip: can't find end of central directory");
          this.reader.setIndex(e2);
          var t2 = e2;
          if (this.checkSignature(s.CENTRAL_DIRECTORY_END), this.readBlockEndOfCentral(), this.diskNumber === i.MAX_VALUE_16BITS || this.diskWithCentralDirStart === i.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === i.MAX_VALUE_16BITS || this.centralDirRecords === i.MAX_VALUE_16BITS || this.centralDirSize === i.MAX_VALUE_32BITS || this.centralDirOffset === i.MAX_VALUE_32BITS) {
            if (this.zip64 = true, (e2 = this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR)) < 0)
              throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");
            if (this.reader.setIndex(e2), this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR), this.readBlockZip64EndOfCentralLocator(), !this.isSignature(this.relativeOffsetEndOfZip64CentralDir, s.ZIP64_CENTRAL_DIRECTORY_END) && (this.relativeOffsetEndOfZip64CentralDir = this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END), this.relativeOffsetEndOfZip64CentralDir < 0))
              throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");
            this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir), this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END), this.readBlockZip64EndOfCentral();
          }
          var r2 = this.centralDirOffset + this.centralDirSize;
          this.zip64 && (r2 += 20, r2 += 12 + this.zip64EndOfCentralSize);
          var n2 = t2 - r2;
          if (0 < n2)
            this.isSignature(t2, s.CENTRAL_FILE_HEADER) || (this.reader.zero = n2);
          else if (n2 < 0)
            throw new Error("Corrupted zip: missing " + Math.abs(n2) + " bytes.");
        }, prepareReader: function(e2) {
          this.reader = n(e2);
        }, load: function(e2) {
          this.prepareReader(e2), this.readEndOfCentral(), this.readCentralDir(), this.readLocalFiles();
        } }, t.exports = h;
      }, { "./reader/readerFor": 22, "./signature": 23, "./support": 30, "./utils": 32, "./zipEntry": 34 }], 34: [function(e, t, r) {
        "use strict";
        var n = e("./reader/readerFor"), s = e("./utils"), i = e("./compressedObject"), a = e("./crc32"), o = e("./utf8"), h = e("./compressions"), u = e("./support");
        function l(e2, t2) {
          this.options = e2, this.loadOptions = t2;
        }
        l.prototype = { isEncrypted: function() {
          return 1 == (1 & this.bitFlag);
        }, useUTF8: function() {
          return 2048 == (2048 & this.bitFlag);
        }, readLocalPart: function(e2) {
          var t2, r2;
          if (e2.skip(22), this.fileNameLength = e2.readInt(2), r2 = e2.readInt(2), this.fileName = e2.readData(this.fileNameLength), e2.skip(r2), -1 === this.compressedSize || -1 === this.uncompressedSize)
            throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");
          if (null === (t2 = function(e3) {
            for (var t3 in h)
              if (Object.prototype.hasOwnProperty.call(h, t3) && h[t3].magic === e3)
                return h[t3];
            return null;
          }(this.compressionMethod)))
            throw new Error("Corrupted zip : compression " + s.pretty(this.compressionMethod) + " unknown (inner file : " + s.transformTo("string", this.fileName) + ")");
          this.decompressed = new i(this.compressedSize, this.uncompressedSize, this.crc32, t2, e2.readData(this.compressedSize));
        }, readCentralPart: function(e2) {
          this.versionMadeBy = e2.readInt(2), e2.skip(2), this.bitFlag = e2.readInt(2), this.compressionMethod = e2.readString(2), this.date = e2.readDate(), this.crc32 = e2.readInt(4), this.compressedSize = e2.readInt(4), this.uncompressedSize = e2.readInt(4);
          var t2 = e2.readInt(2);
          if (this.extraFieldsLength = e2.readInt(2), this.fileCommentLength = e2.readInt(2), this.diskNumberStart = e2.readInt(2), this.internalFileAttributes = e2.readInt(2), this.externalFileAttributes = e2.readInt(4), this.localHeaderOffset = e2.readInt(4), this.isEncrypted())
            throw new Error("Encrypted zip are not supported");
          e2.skip(t2), this.readExtraFields(e2), this.parseZIP64ExtraField(e2), this.fileComment = e2.readData(this.fileCommentLength);
        }, processAttributes: function() {
          this.unixPermissions = null, this.dosPermissions = null;
          var e2 = this.versionMadeBy >> 8;
          this.dir = !!(16 & this.externalFileAttributes), 0 == e2 && (this.dosPermissions = 63 & this.externalFileAttributes), 3 == e2 && (this.unixPermissions = this.externalFileAttributes >> 16 & 65535), this.dir || "/" !== this.fileNameStr.slice(-1) || (this.dir = true);
        }, parseZIP64ExtraField: function() {
          if (this.extraFields[1]) {
            var e2 = n(this.extraFields[1].value);
            this.uncompressedSize === s.MAX_VALUE_32BITS && (this.uncompressedSize = e2.readInt(8)), this.compressedSize === s.MAX_VALUE_32BITS && (this.compressedSize = e2.readInt(8)), this.localHeaderOffset === s.MAX_VALUE_32BITS && (this.localHeaderOffset = e2.readInt(8)), this.diskNumberStart === s.MAX_VALUE_32BITS && (this.diskNumberStart = e2.readInt(4));
          }
        }, readExtraFields: function(e2) {
          var t2, r2, n2, i2 = e2.index + this.extraFieldsLength;
          for (this.extraFields || (this.extraFields = {}); e2.index + 4 < i2; )
            t2 = e2.readInt(2), r2 = e2.readInt(2), n2 = e2.readData(r2), this.extraFields[t2] = { id: t2, length: r2, value: n2 };
          e2.setIndex(i2);
        }, handleUTF8: function() {
          var e2 = u.uint8array ? "uint8array" : "array";
          if (this.useUTF8())
            this.fileNameStr = o.utf8decode(this.fileName), this.fileCommentStr = o.utf8decode(this.fileComment);
          else {
            var t2 = this.findExtraFieldUnicodePath();
            if (null !== t2)
              this.fileNameStr = t2;
            else {
              var r2 = s.transformTo(e2, this.fileName);
              this.fileNameStr = this.loadOptions.decodeFileName(r2);
            }
            var n2 = this.findExtraFieldUnicodeComment();
            if (null !== n2)
              this.fileCommentStr = n2;
            else {
              var i2 = s.transformTo(e2, this.fileComment);
              this.fileCommentStr = this.loadOptions.decodeFileName(i2);
            }
          }
        }, findExtraFieldUnicodePath: function() {
          var e2 = this.extraFields[28789];
          if (e2) {
            var t2 = n(e2.value);
            return 1 !== t2.readInt(1) ? null : a(this.fileName) !== t2.readInt(4) ? null : o.utf8decode(t2.readData(e2.length - 5));
          }
          return null;
        }, findExtraFieldUnicodeComment: function() {
          var e2 = this.extraFields[25461];
          if (e2) {
            var t2 = n(e2.value);
            return 1 !== t2.readInt(1) ? null : a(this.fileComment) !== t2.readInt(4) ? null : o.utf8decode(t2.readData(e2.length - 5));
          }
          return null;
        } }, t.exports = l;
      }, { "./compressedObject": 2, "./compressions": 3, "./crc32": 4, "./reader/readerFor": 22, "./support": 30, "./utf8": 31, "./utils": 32 }], 35: [function(e, t, r) {
        "use strict";
        function n(e2, t2, r2) {
          this.name = e2, this.dir = r2.dir, this.date = r2.date, this.comment = r2.comment, this.unixPermissions = r2.unixPermissions, this.dosPermissions = r2.dosPermissions, this._data = t2, this._dataBinary = r2.binary, this.options = { compression: r2.compression, compressionOptions: r2.compressionOptions };
        }
        var s = e("./stream/StreamHelper"), i = e("./stream/DataWorker"), a = e("./utf8"), o = e("./compressedObject"), h = e("./stream/GenericWorker");
        n.prototype = { internalStream: function(e2) {
          var t2 = null, r2 = "string";
          try {
            if (!e2)
              throw new Error("No output type specified.");
            var n2 = "string" === (r2 = e2.toLowerCase()) || "text" === r2;
            "binarystring" !== r2 && "text" !== r2 || (r2 = "string"), t2 = this._decompressWorker();
            var i2 = !this._dataBinary;
            i2 && !n2 && (t2 = t2.pipe(new a.Utf8EncodeWorker())), !i2 && n2 && (t2 = t2.pipe(new a.Utf8DecodeWorker()));
          } catch (e3) {
            (t2 = new h("error")).error(e3);
          }
          return new s(t2, r2, "");
        }, async: function(e2, t2) {
          return this.internalStream(e2).accumulate(t2);
        }, nodeStream: function(e2, t2) {
          return this.internalStream(e2 || "nodebuffer").toNodejsStream(t2);
        }, _compressWorker: function(e2, t2) {
          if (this._data instanceof o && this._data.compression.magic === e2.magic)
            return this._data.getCompressedWorker();
          var r2 = this._decompressWorker();
          return this._dataBinary || (r2 = r2.pipe(new a.Utf8EncodeWorker())), o.createWorkerFrom(r2, e2, t2);
        }, _decompressWorker: function() {
          return this._data instanceof o ? this._data.getContentWorker() : this._data instanceof h ? this._data : new i(this._data);
        } };
        for (var u = ["asText", "asBinary", "asNodeBuffer", "asUint8Array", "asArrayBuffer"], l = function() {
          throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
        }, f = 0; f < u.length; f++)
          n.prototype[u[f]] = l;
        t.exports = n;
      }, { "./compressedObject": 2, "./stream/DataWorker": 27, "./stream/GenericWorker": 28, "./stream/StreamHelper": 29, "./utf8": 31 }], 36: [function(e, l, t) {
        (function(t2) {
          "use strict";
          var r, n, e2 = t2.MutationObserver || t2.WebKitMutationObserver;
          if (e2) {
            var i = 0, s = new e2(u), a = t2.document.createTextNode("");
            s.observe(a, { characterData: true }), r = function() {
              a.data = i = ++i % 2;
            };
          } else if (t2.setImmediate || void 0 === t2.MessageChannel)
            r = "document" in t2 && "onreadystatechange" in t2.document.createElement("script") ? function() {
              var e3 = t2.document.createElement("script");
              e3.onreadystatechange = function() {
                u(), e3.onreadystatechange = null, e3.parentNode.removeChild(e3), e3 = null;
              }, t2.document.documentElement.appendChild(e3);
            } : function() {
              setTimeout(u, 0);
            };
          else {
            var o = new t2.MessageChannel();
            o.port1.onmessage = u, r = function() {
              o.port2.postMessage(0);
            };
          }
          var h = [];
          function u() {
            var e3, t3;
            n = true;
            for (var r2 = h.length; r2; ) {
              for (t3 = h, h = [], e3 = -1; ++e3 < r2; )
                t3[e3]();
              r2 = h.length;
            }
            n = false;
          }
          l.exports = function(e3) {
            1 !== h.push(e3) || n || r();
          };
        }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
      }, {}], 37: [function(e, t, r) {
        "use strict";
        var i = e("immediate");
        function u() {
        }
        var l = {}, s = ["REJECTED"], a = ["FULFILLED"], n = ["PENDING"];
        function o(e2) {
          if ("function" != typeof e2)
            throw new TypeError("resolver must be a function");
          this.state = n, this.queue = [], this.outcome = void 0, e2 !== u && d(this, e2);
        }
        function h(e2, t2, r2) {
          this.promise = e2, "function" == typeof t2 && (this.onFulfilled = t2, this.callFulfilled = this.otherCallFulfilled), "function" == typeof r2 && (this.onRejected = r2, this.callRejected = this.otherCallRejected);
        }
        function f(t2, r2, n2) {
          i(function() {
            var e2;
            try {
              e2 = r2(n2);
            } catch (e3) {
              return l.reject(t2, e3);
            }
            e2 === t2 ? l.reject(t2, new TypeError("Cannot resolve promise with itself")) : l.resolve(t2, e2);
          });
        }
        function c(e2) {
          var t2 = e2 && e2.then;
          if (e2 && ("object" == typeof e2 || "function" == typeof e2) && "function" == typeof t2)
            return function() {
              t2.apply(e2, arguments);
            };
        }
        function d(t2, e2) {
          var r2 = false;
          function n2(e3) {
            r2 || (r2 = true, l.reject(t2, e3));
          }
          function i2(e3) {
            r2 || (r2 = true, l.resolve(t2, e3));
          }
          var s2 = p(function() {
            e2(i2, n2);
          });
          "error" === s2.status && n2(s2.value);
        }
        function p(e2, t2) {
          var r2 = {};
          try {
            r2.value = e2(t2), r2.status = "success";
          } catch (e3) {
            r2.status = "error", r2.value = e3;
          }
          return r2;
        }
        (t.exports = o).prototype.finally = function(t2) {
          if ("function" != typeof t2)
            return this;
          var r2 = this.constructor;
          return this.then(function(e2) {
            return r2.resolve(t2()).then(function() {
              return e2;
            });
          }, function(e2) {
            return r2.resolve(t2()).then(function() {
              throw e2;
            });
          });
        }, o.prototype.catch = function(e2) {
          return this.then(null, e2);
        }, o.prototype.then = function(e2, t2) {
          if ("function" != typeof e2 && this.state === a || "function" != typeof t2 && this.state === s)
            return this;
          var r2 = new this.constructor(u);
          this.state !== n ? f(r2, this.state === a ? e2 : t2, this.outcome) : this.queue.push(new h(r2, e2, t2));
          return r2;
        }, h.prototype.callFulfilled = function(e2) {
          l.resolve(this.promise, e2);
        }, h.prototype.otherCallFulfilled = function(e2) {
          f(this.promise, this.onFulfilled, e2);
        }, h.prototype.callRejected = function(e2) {
          l.reject(this.promise, e2);
        }, h.prototype.otherCallRejected = function(e2) {
          f(this.promise, this.onRejected, e2);
        }, l.resolve = function(e2, t2) {
          var r2 = p(c, t2);
          if ("error" === r2.status)
            return l.reject(e2, r2.value);
          var n2 = r2.value;
          if (n2)
            d(e2, n2);
          else {
            e2.state = a, e2.outcome = t2;
            for (var i2 = -1, s2 = e2.queue.length; ++i2 < s2; )
              e2.queue[i2].callFulfilled(t2);
          }
          return e2;
        }, l.reject = function(e2, t2) {
          e2.state = s, e2.outcome = t2;
          for (var r2 = -1, n2 = e2.queue.length; ++r2 < n2; )
            e2.queue[r2].callRejected(t2);
          return e2;
        }, o.resolve = function(e2) {
          if (e2 instanceof this)
            return e2;
          return l.resolve(new this(u), e2);
        }, o.reject = function(e2) {
          var t2 = new this(u);
          return l.reject(t2, e2);
        }, o.all = function(e2) {
          var r2 = this;
          if ("[object Array]" !== Object.prototype.toString.call(e2))
            return this.reject(new TypeError("must be an array"));
          var n2 = e2.length, i2 = false;
          if (!n2)
            return this.resolve([]);
          var s2 = new Array(n2), a2 = 0, t2 = -1, o2 = new this(u);
          for (; ++t2 < n2; )
            h2(e2[t2], t2);
          return o2;
          function h2(e3, t3) {
            r2.resolve(e3).then(function(e4) {
              s2[t3] = e4, ++a2 !== n2 || i2 || (i2 = true, l.resolve(o2, s2));
            }, function(e4) {
              i2 || (i2 = true, l.reject(o2, e4));
            });
          }
        }, o.race = function(e2) {
          var t2 = this;
          if ("[object Array]" !== Object.prototype.toString.call(e2))
            return this.reject(new TypeError("must be an array"));
          var r2 = e2.length, n2 = false;
          if (!r2)
            return this.resolve([]);
          var i2 = -1, s2 = new this(u);
          for (; ++i2 < r2; )
            a2 = e2[i2], t2.resolve(a2).then(function(e3) {
              n2 || (n2 = true, l.resolve(s2, e3));
            }, function(e3) {
              n2 || (n2 = true, l.reject(s2, e3));
            });
          var a2;
          return s2;
        };
      }, { immediate: 36 }], 38: [function(e, t, r) {
        "use strict";
        var n = {};
        (0, e("./lib/utils/common").assign)(n, e("./lib/deflate"), e("./lib/inflate"), e("./lib/zlib/constants")), t.exports = n;
      }, { "./lib/deflate": 39, "./lib/inflate": 40, "./lib/utils/common": 41, "./lib/zlib/constants": 44 }], 39: [function(e, t, r) {
        "use strict";
        var a = e("./zlib/deflate"), o = e("./utils/common"), h = e("./utils/strings"), i = e("./zlib/messages"), s = e("./zlib/zstream"), u = Object.prototype.toString, l = 0, f = -1, c = 0, d = 8;
        function p(e2) {
          if (!(this instanceof p))
            return new p(e2);
          this.options = o.assign({ level: f, method: d, chunkSize: 16384, windowBits: 15, memLevel: 8, strategy: c, to: "" }, e2 || {});
          var t2 = this.options;
          t2.raw && 0 < t2.windowBits ? t2.windowBits = -t2.windowBits : t2.gzip && 0 < t2.windowBits && t2.windowBits < 16 && (t2.windowBits += 16), this.err = 0, this.msg = "", this.ended = false, this.chunks = [], this.strm = new s(), this.strm.avail_out = 0;
          var r2 = a.deflateInit2(this.strm, t2.level, t2.method, t2.windowBits, t2.memLevel, t2.strategy);
          if (r2 !== l)
            throw new Error(i[r2]);
          if (t2.header && a.deflateSetHeader(this.strm, t2.header), t2.dictionary) {
            var n2;
            if (n2 = "string" == typeof t2.dictionary ? h.string2buf(t2.dictionary) : "[object ArrayBuffer]" === u.call(t2.dictionary) ? new Uint8Array(t2.dictionary) : t2.dictionary, (r2 = a.deflateSetDictionary(this.strm, n2)) !== l)
              throw new Error(i[r2]);
            this._dict_set = true;
          }
        }
        function n(e2, t2) {
          var r2 = new p(t2);
          if (r2.push(e2, true), r2.err)
            throw r2.msg || i[r2.err];
          return r2.result;
        }
        p.prototype.push = function(e2, t2) {
          var r2, n2, i2 = this.strm, s2 = this.options.chunkSize;
          if (this.ended)
            return false;
          n2 = t2 === ~~t2 ? t2 : true === t2 ? 4 : 0, "string" == typeof e2 ? i2.input = h.string2buf(e2) : "[object ArrayBuffer]" === u.call(e2) ? i2.input = new Uint8Array(e2) : i2.input = e2, i2.next_in = 0, i2.avail_in = i2.input.length;
          do {
            if (0 === i2.avail_out && (i2.output = new o.Buf8(s2), i2.next_out = 0, i2.avail_out = s2), 1 !== (r2 = a.deflate(i2, n2)) && r2 !== l)
              return this.onEnd(r2), !(this.ended = true);
            0 !== i2.avail_out && (0 !== i2.avail_in || 4 !== n2 && 2 !== n2) || ("string" === this.options.to ? this.onData(h.buf2binstring(o.shrinkBuf(i2.output, i2.next_out))) : this.onData(o.shrinkBuf(i2.output, i2.next_out)));
          } while ((0 < i2.avail_in || 0 === i2.avail_out) && 1 !== r2);
          return 4 === n2 ? (r2 = a.deflateEnd(this.strm), this.onEnd(r2), this.ended = true, r2 === l) : 2 !== n2 || (this.onEnd(l), !(i2.avail_out = 0));
        }, p.prototype.onData = function(e2) {
          this.chunks.push(e2);
        }, p.prototype.onEnd = function(e2) {
          e2 === l && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = o.flattenChunks(this.chunks)), this.chunks = [], this.err = e2, this.msg = this.strm.msg;
        }, r.Deflate = p, r.deflate = n, r.deflateRaw = function(e2, t2) {
          return (t2 = t2 || {}).raw = true, n(e2, t2);
        }, r.gzip = function(e2, t2) {
          return (t2 = t2 || {}).gzip = true, n(e2, t2);
        };
      }, { "./utils/common": 41, "./utils/strings": 42, "./zlib/deflate": 46, "./zlib/messages": 51, "./zlib/zstream": 53 }], 40: [function(e, t, r) {
        "use strict";
        var c = e("./zlib/inflate"), d = e("./utils/common"), p = e("./utils/strings"), m = e("./zlib/constants"), n = e("./zlib/messages"), i = e("./zlib/zstream"), s = e("./zlib/gzheader"), _ = Object.prototype.toString;
        function a(e2) {
          if (!(this instanceof a))
            return new a(e2);
          this.options = d.assign({ chunkSize: 16384, windowBits: 0, to: "" }, e2 || {});
          var t2 = this.options;
          t2.raw && 0 <= t2.windowBits && t2.windowBits < 16 && (t2.windowBits = -t2.windowBits, 0 === t2.windowBits && (t2.windowBits = -15)), !(0 <= t2.windowBits && t2.windowBits < 16) || e2 && e2.windowBits || (t2.windowBits += 32), 15 < t2.windowBits && t2.windowBits < 48 && 0 == (15 & t2.windowBits) && (t2.windowBits |= 15), this.err = 0, this.msg = "", this.ended = false, this.chunks = [], this.strm = new i(), this.strm.avail_out = 0;
          var r2 = c.inflateInit2(this.strm, t2.windowBits);
          if (r2 !== m.Z_OK)
            throw new Error(n[r2]);
          this.header = new s(), c.inflateGetHeader(this.strm, this.header);
        }
        function o(e2, t2) {
          var r2 = new a(t2);
          if (r2.push(e2, true), r2.err)
            throw r2.msg || n[r2.err];
          return r2.result;
        }
        a.prototype.push = function(e2, t2) {
          var r2, n2, i2, s2, a2, o2, h = this.strm, u = this.options.chunkSize, l = this.options.dictionary, f = false;
          if (this.ended)
            return false;
          n2 = t2 === ~~t2 ? t2 : true === t2 ? m.Z_FINISH : m.Z_NO_FLUSH, "string" == typeof e2 ? h.input = p.binstring2buf(e2) : "[object ArrayBuffer]" === _.call(e2) ? h.input = new Uint8Array(e2) : h.input = e2, h.next_in = 0, h.avail_in = h.input.length;
          do {
            if (0 === h.avail_out && (h.output = new d.Buf8(u), h.next_out = 0, h.avail_out = u), (r2 = c.inflate(h, m.Z_NO_FLUSH)) === m.Z_NEED_DICT && l && (o2 = "string" == typeof l ? p.string2buf(l) : "[object ArrayBuffer]" === _.call(l) ? new Uint8Array(l) : l, r2 = c.inflateSetDictionary(this.strm, o2)), r2 === m.Z_BUF_ERROR && true === f && (r2 = m.Z_OK, f = false), r2 !== m.Z_STREAM_END && r2 !== m.Z_OK)
              return this.onEnd(r2), !(this.ended = true);
            h.next_out && (0 !== h.avail_out && r2 !== m.Z_STREAM_END && (0 !== h.avail_in || n2 !== m.Z_FINISH && n2 !== m.Z_SYNC_FLUSH) || ("string" === this.options.to ? (i2 = p.utf8border(h.output, h.next_out), s2 = h.next_out - i2, a2 = p.buf2string(h.output, i2), h.next_out = s2, h.avail_out = u - s2, s2 && d.arraySet(h.output, h.output, i2, s2, 0), this.onData(a2)) : this.onData(d.shrinkBuf(h.output, h.next_out)))), 0 === h.avail_in && 0 === h.avail_out && (f = true);
          } while ((0 < h.avail_in || 0 === h.avail_out) && r2 !== m.Z_STREAM_END);
          return r2 === m.Z_STREAM_END && (n2 = m.Z_FINISH), n2 === m.Z_FINISH ? (r2 = c.inflateEnd(this.strm), this.onEnd(r2), this.ended = true, r2 === m.Z_OK) : n2 !== m.Z_SYNC_FLUSH || (this.onEnd(m.Z_OK), !(h.avail_out = 0));
        }, a.prototype.onData = function(e2) {
          this.chunks.push(e2);
        }, a.prototype.onEnd = function(e2) {
          e2 === m.Z_OK && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = d.flattenChunks(this.chunks)), this.chunks = [], this.err = e2, this.msg = this.strm.msg;
        }, r.Inflate = a, r.inflate = o, r.inflateRaw = function(e2, t2) {
          return (t2 = t2 || {}).raw = true, o(e2, t2);
        }, r.ungzip = o;
      }, { "./utils/common": 41, "./utils/strings": 42, "./zlib/constants": 44, "./zlib/gzheader": 47, "./zlib/inflate": 49, "./zlib/messages": 51, "./zlib/zstream": 53 }], 41: [function(e, t, r) {
        "use strict";
        var n = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Int32Array;
        r.assign = function(e2) {
          for (var t2 = Array.prototype.slice.call(arguments, 1); t2.length; ) {
            var r2 = t2.shift();
            if (r2) {
              if ("object" != typeof r2)
                throw new TypeError(r2 + "must be non-object");
              for (var n2 in r2)
                r2.hasOwnProperty(n2) && (e2[n2] = r2[n2]);
            }
          }
          return e2;
        }, r.shrinkBuf = function(e2, t2) {
          return e2.length === t2 ? e2 : e2.subarray ? e2.subarray(0, t2) : (e2.length = t2, e2);
        };
        var i = { arraySet: function(e2, t2, r2, n2, i2) {
          if (t2.subarray && e2.subarray)
            e2.set(t2.subarray(r2, r2 + n2), i2);
          else
            for (var s2 = 0; s2 < n2; s2++)
              e2[i2 + s2] = t2[r2 + s2];
        }, flattenChunks: function(e2) {
          var t2, r2, n2, i2, s2, a;
          for (t2 = n2 = 0, r2 = e2.length; t2 < r2; t2++)
            n2 += e2[t2].length;
          for (a = new Uint8Array(n2), t2 = i2 = 0, r2 = e2.length; t2 < r2; t2++)
            s2 = e2[t2], a.set(s2, i2), i2 += s2.length;
          return a;
        } }, s = { arraySet: function(e2, t2, r2, n2, i2) {
          for (var s2 = 0; s2 < n2; s2++)
            e2[i2 + s2] = t2[r2 + s2];
        }, flattenChunks: function(e2) {
          return [].concat.apply([], e2);
        } };
        r.setTyped = function(e2) {
          e2 ? (r.Buf8 = Uint8Array, r.Buf16 = Uint16Array, r.Buf32 = Int32Array, r.assign(r, i)) : (r.Buf8 = Array, r.Buf16 = Array, r.Buf32 = Array, r.assign(r, s));
        }, r.setTyped(n);
      }, {}], 42: [function(e, t, r) {
        "use strict";
        var h = e("./common"), i = true, s = true;
        try {
          String.fromCharCode.apply(null, [0]);
        } catch (e2) {
          i = false;
        }
        try {
          String.fromCharCode.apply(null, new Uint8Array(1));
        } catch (e2) {
          s = false;
        }
        for (var u = new h.Buf8(256), n = 0; n < 256; n++)
          u[n] = 252 <= n ? 6 : 248 <= n ? 5 : 240 <= n ? 4 : 224 <= n ? 3 : 192 <= n ? 2 : 1;
        function l(e2, t2) {
          if (t2 < 65537 && (e2.subarray && s || !e2.subarray && i))
            return String.fromCharCode.apply(null, h.shrinkBuf(e2, t2));
          for (var r2 = "", n2 = 0; n2 < t2; n2++)
            r2 += String.fromCharCode(e2[n2]);
          return r2;
        }
        u[254] = u[254] = 1, r.string2buf = function(e2) {
          var t2, r2, n2, i2, s2, a = e2.length, o = 0;
          for (i2 = 0; i2 < a; i2++)
            55296 == (64512 & (r2 = e2.charCodeAt(i2))) && i2 + 1 < a && 56320 == (64512 & (n2 = e2.charCodeAt(i2 + 1))) && (r2 = 65536 + (r2 - 55296 << 10) + (n2 - 56320), i2++), o += r2 < 128 ? 1 : r2 < 2048 ? 2 : r2 < 65536 ? 3 : 4;
          for (t2 = new h.Buf8(o), i2 = s2 = 0; s2 < o; i2++)
            55296 == (64512 & (r2 = e2.charCodeAt(i2))) && i2 + 1 < a && 56320 == (64512 & (n2 = e2.charCodeAt(i2 + 1))) && (r2 = 65536 + (r2 - 55296 << 10) + (n2 - 56320), i2++), r2 < 128 ? t2[s2++] = r2 : (r2 < 2048 ? t2[s2++] = 192 | r2 >>> 6 : (r2 < 65536 ? t2[s2++] = 224 | r2 >>> 12 : (t2[s2++] = 240 | r2 >>> 18, t2[s2++] = 128 | r2 >>> 12 & 63), t2[s2++] = 128 | r2 >>> 6 & 63), t2[s2++] = 128 | 63 & r2);
          return t2;
        }, r.buf2binstring = function(e2) {
          return l(e2, e2.length);
        }, r.binstring2buf = function(e2) {
          for (var t2 = new h.Buf8(e2.length), r2 = 0, n2 = t2.length; r2 < n2; r2++)
            t2[r2] = e2.charCodeAt(r2);
          return t2;
        }, r.buf2string = function(e2, t2) {
          var r2, n2, i2, s2, a = t2 || e2.length, o = new Array(2 * a);
          for (r2 = n2 = 0; r2 < a; )
            if ((i2 = e2[r2++]) < 128)
              o[n2++] = i2;
            else if (4 < (s2 = u[i2]))
              o[n2++] = 65533, r2 += s2 - 1;
            else {
              for (i2 &= 2 === s2 ? 31 : 3 === s2 ? 15 : 7; 1 < s2 && r2 < a; )
                i2 = i2 << 6 | 63 & e2[r2++], s2--;
              1 < s2 ? o[n2++] = 65533 : i2 < 65536 ? o[n2++] = i2 : (i2 -= 65536, o[n2++] = 55296 | i2 >> 10 & 1023, o[n2++] = 56320 | 1023 & i2);
            }
          return l(o, n2);
        }, r.utf8border = function(e2, t2) {
          var r2;
          for ((t2 = t2 || e2.length) > e2.length && (t2 = e2.length), r2 = t2 - 1; 0 <= r2 && 128 == (192 & e2[r2]); )
            r2--;
          return r2 < 0 ? t2 : 0 === r2 ? t2 : r2 + u[e2[r2]] > t2 ? r2 : t2;
        };
      }, { "./common": 41 }], 43: [function(e, t, r) {
        "use strict";
        t.exports = function(e2, t2, r2, n) {
          for (var i = 65535 & e2 | 0, s = e2 >>> 16 & 65535 | 0, a = 0; 0 !== r2; ) {
            for (r2 -= a = 2e3 < r2 ? 2e3 : r2; s = s + (i = i + t2[n++] | 0) | 0, --a; )
              ;
            i %= 65521, s %= 65521;
          }
          return i | s << 16 | 0;
        };
      }, {}], 44: [function(e, t, r) {
        "use strict";
        t.exports = { Z_NO_FLUSH: 0, Z_PARTIAL_FLUSH: 1, Z_SYNC_FLUSH: 2, Z_FULL_FLUSH: 3, Z_FINISH: 4, Z_BLOCK: 5, Z_TREES: 6, Z_OK: 0, Z_STREAM_END: 1, Z_NEED_DICT: 2, Z_ERRNO: -1, Z_STREAM_ERROR: -2, Z_DATA_ERROR: -3, Z_BUF_ERROR: -5, Z_NO_COMPRESSION: 0, Z_BEST_SPEED: 1, Z_BEST_COMPRESSION: 9, Z_DEFAULT_COMPRESSION: -1, Z_FILTERED: 1, Z_HUFFMAN_ONLY: 2, Z_RLE: 3, Z_FIXED: 4, Z_DEFAULT_STRATEGY: 0, Z_BINARY: 0, Z_TEXT: 1, Z_UNKNOWN: 2, Z_DEFLATED: 8 };
      }, {}], 45: [function(e, t, r) {
        "use strict";
        var o = function() {
          for (var e2, t2 = [], r2 = 0; r2 < 256; r2++) {
            e2 = r2;
            for (var n = 0; n < 8; n++)
              e2 = 1 & e2 ? 3988292384 ^ e2 >>> 1 : e2 >>> 1;
            t2[r2] = e2;
          }
          return t2;
        }();
        t.exports = function(e2, t2, r2, n) {
          var i = o, s = n + r2;
          e2 ^= -1;
          for (var a = n; a < s; a++)
            e2 = e2 >>> 8 ^ i[255 & (e2 ^ t2[a])];
          return -1 ^ e2;
        };
      }, {}], 46: [function(e, t, r) {
        "use strict";
        var h, c = e("../utils/common"), u = e("./trees"), d = e("./adler32"), p = e("./crc32"), n = e("./messages"), l = 0, f = 4, m = 0, _ = -2, g = -1, b = 4, i = 2, v = 8, y = 9, s = 286, a = 30, o = 19, w = 2 * s + 1, k = 15, x = 3, S = 258, z = S + x + 1, C = 42, E = 113, A = 1, I = 2, O = 3, B = 4;
        function R(e2, t2) {
          return e2.msg = n[t2], t2;
        }
        function T(e2) {
          return (e2 << 1) - (4 < e2 ? 9 : 0);
        }
        function D(e2) {
          for (var t2 = e2.length; 0 <= --t2; )
            e2[t2] = 0;
        }
        function F(e2) {
          var t2 = e2.state, r2 = t2.pending;
          r2 > e2.avail_out && (r2 = e2.avail_out), 0 !== r2 && (c.arraySet(e2.output, t2.pending_buf, t2.pending_out, r2, e2.next_out), e2.next_out += r2, t2.pending_out += r2, e2.total_out += r2, e2.avail_out -= r2, t2.pending -= r2, 0 === t2.pending && (t2.pending_out = 0));
        }
        function N(e2, t2) {
          u._tr_flush_block(e2, 0 <= e2.block_start ? e2.block_start : -1, e2.strstart - e2.block_start, t2), e2.block_start = e2.strstart, F(e2.strm);
        }
        function U(e2, t2) {
          e2.pending_buf[e2.pending++] = t2;
        }
        function P(e2, t2) {
          e2.pending_buf[e2.pending++] = t2 >>> 8 & 255, e2.pending_buf[e2.pending++] = 255 & t2;
        }
        function L(e2, t2) {
          var r2, n2, i2 = e2.max_chain_length, s2 = e2.strstart, a2 = e2.prev_length, o2 = e2.nice_match, h2 = e2.strstart > e2.w_size - z ? e2.strstart - (e2.w_size - z) : 0, u2 = e2.window, l2 = e2.w_mask, f2 = e2.prev, c2 = e2.strstart + S, d2 = u2[s2 + a2 - 1], p2 = u2[s2 + a2];
          e2.prev_length >= e2.good_match && (i2 >>= 2), o2 > e2.lookahead && (o2 = e2.lookahead);
          do {
            if (u2[(r2 = t2) + a2] === p2 && u2[r2 + a2 - 1] === d2 && u2[r2] === u2[s2] && u2[++r2] === u2[s2 + 1]) {
              s2 += 2, r2++;
              do {
              } while (u2[++s2] === u2[++r2] && u2[++s2] === u2[++r2] && u2[++s2] === u2[++r2] && u2[++s2] === u2[++r2] && u2[++s2] === u2[++r2] && u2[++s2] === u2[++r2] && u2[++s2] === u2[++r2] && u2[++s2] === u2[++r2] && s2 < c2);
              if (n2 = S - (c2 - s2), s2 = c2 - S, a2 < n2) {
                if (e2.match_start = t2, o2 <= (a2 = n2))
                  break;
                d2 = u2[s2 + a2 - 1], p2 = u2[s2 + a2];
              }
            }
          } while ((t2 = f2[t2 & l2]) > h2 && 0 != --i2);
          return a2 <= e2.lookahead ? a2 : e2.lookahead;
        }
        function j(e2) {
          var t2, r2, n2, i2, s2, a2, o2, h2, u2, l2, f2 = e2.w_size;
          do {
            if (i2 = e2.window_size - e2.lookahead - e2.strstart, e2.strstart >= f2 + (f2 - z)) {
              for (c.arraySet(e2.window, e2.window, f2, f2, 0), e2.match_start -= f2, e2.strstart -= f2, e2.block_start -= f2, t2 = r2 = e2.hash_size; n2 = e2.head[--t2], e2.head[t2] = f2 <= n2 ? n2 - f2 : 0, --r2; )
                ;
              for (t2 = r2 = f2; n2 = e2.prev[--t2], e2.prev[t2] = f2 <= n2 ? n2 - f2 : 0, --r2; )
                ;
              i2 += f2;
            }
            if (0 === e2.strm.avail_in)
              break;
            if (a2 = e2.strm, o2 = e2.window, h2 = e2.strstart + e2.lookahead, u2 = i2, l2 = void 0, l2 = a2.avail_in, u2 < l2 && (l2 = u2), r2 = 0 === l2 ? 0 : (a2.avail_in -= l2, c.arraySet(o2, a2.input, a2.next_in, l2, h2), 1 === a2.state.wrap ? a2.adler = d(a2.adler, o2, l2, h2) : 2 === a2.state.wrap && (a2.adler = p(a2.adler, o2, l2, h2)), a2.next_in += l2, a2.total_in += l2, l2), e2.lookahead += r2, e2.lookahead + e2.insert >= x)
              for (s2 = e2.strstart - e2.insert, e2.ins_h = e2.window[s2], e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[s2 + 1]) & e2.hash_mask; e2.insert && (e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[s2 + x - 1]) & e2.hash_mask, e2.prev[s2 & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = s2, s2++, e2.insert--, !(e2.lookahead + e2.insert < x)); )
                ;
          } while (e2.lookahead < z && 0 !== e2.strm.avail_in);
        }
        function Z(e2, t2) {
          for (var r2, n2; ; ) {
            if (e2.lookahead < z) {
              if (j(e2), e2.lookahead < z && t2 === l)
                return A;
              if (0 === e2.lookahead)
                break;
            }
            if (r2 = 0, e2.lookahead >= x && (e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + x - 1]) & e2.hash_mask, r2 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart), 0 !== r2 && e2.strstart - r2 <= e2.w_size - z && (e2.match_length = L(e2, r2)), e2.match_length >= x)
              if (n2 = u._tr_tally(e2, e2.strstart - e2.match_start, e2.match_length - x), e2.lookahead -= e2.match_length, e2.match_length <= e2.max_lazy_match && e2.lookahead >= x) {
                for (e2.match_length--; e2.strstart++, e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + x - 1]) & e2.hash_mask, r2 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart, 0 != --e2.match_length; )
                  ;
                e2.strstart++;
              } else
                e2.strstart += e2.match_length, e2.match_length = 0, e2.ins_h = e2.window[e2.strstart], e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + 1]) & e2.hash_mask;
            else
              n2 = u._tr_tally(e2, 0, e2.window[e2.strstart]), e2.lookahead--, e2.strstart++;
            if (n2 && (N(e2, false), 0 === e2.strm.avail_out))
              return A;
          }
          return e2.insert = e2.strstart < x - 1 ? e2.strstart : x - 1, t2 === f ? (N(e2, true), 0 === e2.strm.avail_out ? O : B) : e2.last_lit && (N(e2, false), 0 === e2.strm.avail_out) ? A : I;
        }
        function W(e2, t2) {
          for (var r2, n2, i2; ; ) {
            if (e2.lookahead < z) {
              if (j(e2), e2.lookahead < z && t2 === l)
                return A;
              if (0 === e2.lookahead)
                break;
            }
            if (r2 = 0, e2.lookahead >= x && (e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + x - 1]) & e2.hash_mask, r2 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart), e2.prev_length = e2.match_length, e2.prev_match = e2.match_start, e2.match_length = x - 1, 0 !== r2 && e2.prev_length < e2.max_lazy_match && e2.strstart - r2 <= e2.w_size - z && (e2.match_length = L(e2, r2), e2.match_length <= 5 && (1 === e2.strategy || e2.match_length === x && 4096 < e2.strstart - e2.match_start) && (e2.match_length = x - 1)), e2.prev_length >= x && e2.match_length <= e2.prev_length) {
              for (i2 = e2.strstart + e2.lookahead - x, n2 = u._tr_tally(e2, e2.strstart - 1 - e2.prev_match, e2.prev_length - x), e2.lookahead -= e2.prev_length - 1, e2.prev_length -= 2; ++e2.strstart <= i2 && (e2.ins_h = (e2.ins_h << e2.hash_shift ^ e2.window[e2.strstart + x - 1]) & e2.hash_mask, r2 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart), 0 != --e2.prev_length; )
                ;
              if (e2.match_available = 0, e2.match_length = x - 1, e2.strstart++, n2 && (N(e2, false), 0 === e2.strm.avail_out))
                return A;
            } else if (e2.match_available) {
              if ((n2 = u._tr_tally(e2, 0, e2.window[e2.strstart - 1])) && N(e2, false), e2.strstart++, e2.lookahead--, 0 === e2.strm.avail_out)
                return A;
            } else
              e2.match_available = 1, e2.strstart++, e2.lookahead--;
          }
          return e2.match_available && (n2 = u._tr_tally(e2, 0, e2.window[e2.strstart - 1]), e2.match_available = 0), e2.insert = e2.strstart < x - 1 ? e2.strstart : x - 1, t2 === f ? (N(e2, true), 0 === e2.strm.avail_out ? O : B) : e2.last_lit && (N(e2, false), 0 === e2.strm.avail_out) ? A : I;
        }
        function M(e2, t2, r2, n2, i2) {
          this.good_length = e2, this.max_lazy = t2, this.nice_length = r2, this.max_chain = n2, this.func = i2;
        }
        function H() {
          this.strm = null, this.status = 0, this.pending_buf = null, this.pending_buf_size = 0, this.pending_out = 0, this.pending = 0, this.wrap = 0, this.gzhead = null, this.gzindex = 0, this.method = v, this.last_flush = -1, this.w_size = 0, this.w_bits = 0, this.w_mask = 0, this.window = null, this.window_size = 0, this.prev = null, this.head = null, this.ins_h = 0, this.hash_size = 0, this.hash_bits = 0, this.hash_mask = 0, this.hash_shift = 0, this.block_start = 0, this.match_length = 0, this.prev_match = 0, this.match_available = 0, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = 0, this.max_chain_length = 0, this.max_lazy_match = 0, this.level = 0, this.strategy = 0, this.good_match = 0, this.nice_match = 0, this.dyn_ltree = new c.Buf16(2 * w), this.dyn_dtree = new c.Buf16(2 * (2 * a + 1)), this.bl_tree = new c.Buf16(2 * (2 * o + 1)), D(this.dyn_ltree), D(this.dyn_dtree), D(this.bl_tree), this.l_desc = null, this.d_desc = null, this.bl_desc = null, this.bl_count = new c.Buf16(k + 1), this.heap = new c.Buf16(2 * s + 1), D(this.heap), this.heap_len = 0, this.heap_max = 0, this.depth = new c.Buf16(2 * s + 1), D(this.depth), this.l_buf = 0, this.lit_bufsize = 0, this.last_lit = 0, this.d_buf = 0, this.opt_len = 0, this.static_len = 0, this.matches = 0, this.insert = 0, this.bi_buf = 0, this.bi_valid = 0;
        }
        function G(e2) {
          var t2;
          return e2 && e2.state ? (e2.total_in = e2.total_out = 0, e2.data_type = i, (t2 = e2.state).pending = 0, t2.pending_out = 0, t2.wrap < 0 && (t2.wrap = -t2.wrap), t2.status = t2.wrap ? C : E, e2.adler = 2 === t2.wrap ? 0 : 1, t2.last_flush = l, u._tr_init(t2), m) : R(e2, _);
        }
        function K(e2) {
          var t2 = G(e2);
          return t2 === m && function(e3) {
            e3.window_size = 2 * e3.w_size, D(e3.head), e3.max_lazy_match = h[e3.level].max_lazy, e3.good_match = h[e3.level].good_length, e3.nice_match = h[e3.level].nice_length, e3.max_chain_length = h[e3.level].max_chain, e3.strstart = 0, e3.block_start = 0, e3.lookahead = 0, e3.insert = 0, e3.match_length = e3.prev_length = x - 1, e3.match_available = 0, e3.ins_h = 0;
          }(e2.state), t2;
        }
        function Y(e2, t2, r2, n2, i2, s2) {
          if (!e2)
            return _;
          var a2 = 1;
          if (t2 === g && (t2 = 6), n2 < 0 ? (a2 = 0, n2 = -n2) : 15 < n2 && (a2 = 2, n2 -= 16), i2 < 1 || y < i2 || r2 !== v || n2 < 8 || 15 < n2 || t2 < 0 || 9 < t2 || s2 < 0 || b < s2)
            return R(e2, _);
          8 === n2 && (n2 = 9);
          var o2 = new H();
          return (e2.state = o2).strm = e2, o2.wrap = a2, o2.gzhead = null, o2.w_bits = n2, o2.w_size = 1 << o2.w_bits, o2.w_mask = o2.w_size - 1, o2.hash_bits = i2 + 7, o2.hash_size = 1 << o2.hash_bits, o2.hash_mask = o2.hash_size - 1, o2.hash_shift = ~~((o2.hash_bits + x - 1) / x), o2.window = new c.Buf8(2 * o2.w_size), o2.head = new c.Buf16(o2.hash_size), o2.prev = new c.Buf16(o2.w_size), o2.lit_bufsize = 1 << i2 + 6, o2.pending_buf_size = 4 * o2.lit_bufsize, o2.pending_buf = new c.Buf8(o2.pending_buf_size), o2.d_buf = 1 * o2.lit_bufsize, o2.l_buf = 3 * o2.lit_bufsize, o2.level = t2, o2.strategy = s2, o2.method = r2, K(e2);
        }
        h = [new M(0, 0, 0, 0, function(e2, t2) {
          var r2 = 65535;
          for (r2 > e2.pending_buf_size - 5 && (r2 = e2.pending_buf_size - 5); ; ) {
            if (e2.lookahead <= 1) {
              if (j(e2), 0 === e2.lookahead && t2 === l)
                return A;
              if (0 === e2.lookahead)
                break;
            }
            e2.strstart += e2.lookahead, e2.lookahead = 0;
            var n2 = e2.block_start + r2;
            if ((0 === e2.strstart || e2.strstart >= n2) && (e2.lookahead = e2.strstart - n2, e2.strstart = n2, N(e2, false), 0 === e2.strm.avail_out))
              return A;
            if (e2.strstart - e2.block_start >= e2.w_size - z && (N(e2, false), 0 === e2.strm.avail_out))
              return A;
          }
          return e2.insert = 0, t2 === f ? (N(e2, true), 0 === e2.strm.avail_out ? O : B) : (e2.strstart > e2.block_start && (N(e2, false), e2.strm.avail_out), A);
        }), new M(4, 4, 8, 4, Z), new M(4, 5, 16, 8, Z), new M(4, 6, 32, 32, Z), new M(4, 4, 16, 16, W), new M(8, 16, 32, 32, W), new M(8, 16, 128, 128, W), new M(8, 32, 128, 256, W), new M(32, 128, 258, 1024, W), new M(32, 258, 258, 4096, W)], r.deflateInit = function(e2, t2) {
          return Y(e2, t2, v, 15, 8, 0);
        }, r.deflateInit2 = Y, r.deflateReset = K, r.deflateResetKeep = G, r.deflateSetHeader = function(e2, t2) {
          return e2 && e2.state ? 2 !== e2.state.wrap ? _ : (e2.state.gzhead = t2, m) : _;
        }, r.deflate = function(e2, t2) {
          var r2, n2, i2, s2;
          if (!e2 || !e2.state || 5 < t2 || t2 < 0)
            return e2 ? R(e2, _) : _;
          if (n2 = e2.state, !e2.output || !e2.input && 0 !== e2.avail_in || 666 === n2.status && t2 !== f)
            return R(e2, 0 === e2.avail_out ? -5 : _);
          if (n2.strm = e2, r2 = n2.last_flush, n2.last_flush = t2, n2.status === C)
            if (2 === n2.wrap)
              e2.adler = 0, U(n2, 31), U(n2, 139), U(n2, 8), n2.gzhead ? (U(n2, (n2.gzhead.text ? 1 : 0) + (n2.gzhead.hcrc ? 2 : 0) + (n2.gzhead.extra ? 4 : 0) + (n2.gzhead.name ? 8 : 0) + (n2.gzhead.comment ? 16 : 0)), U(n2, 255 & n2.gzhead.time), U(n2, n2.gzhead.time >> 8 & 255), U(n2, n2.gzhead.time >> 16 & 255), U(n2, n2.gzhead.time >> 24 & 255), U(n2, 9 === n2.level ? 2 : 2 <= n2.strategy || n2.level < 2 ? 4 : 0), U(n2, 255 & n2.gzhead.os), n2.gzhead.extra && n2.gzhead.extra.length && (U(n2, 255 & n2.gzhead.extra.length), U(n2, n2.gzhead.extra.length >> 8 & 255)), n2.gzhead.hcrc && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending, 0)), n2.gzindex = 0, n2.status = 69) : (U(n2, 0), U(n2, 0), U(n2, 0), U(n2, 0), U(n2, 0), U(n2, 9 === n2.level ? 2 : 2 <= n2.strategy || n2.level < 2 ? 4 : 0), U(n2, 3), n2.status = E);
            else {
              var a2 = v + (n2.w_bits - 8 << 4) << 8;
              a2 |= (2 <= n2.strategy || n2.level < 2 ? 0 : n2.level < 6 ? 1 : 6 === n2.level ? 2 : 3) << 6, 0 !== n2.strstart && (a2 |= 32), a2 += 31 - a2 % 31, n2.status = E, P(n2, a2), 0 !== n2.strstart && (P(n2, e2.adler >>> 16), P(n2, 65535 & e2.adler)), e2.adler = 1;
            }
          if (69 === n2.status)
            if (n2.gzhead.extra) {
              for (i2 = n2.pending; n2.gzindex < (65535 & n2.gzhead.extra.length) && (n2.pending !== n2.pending_buf_size || (n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), F(e2), i2 = n2.pending, n2.pending !== n2.pending_buf_size)); )
                U(n2, 255 & n2.gzhead.extra[n2.gzindex]), n2.gzindex++;
              n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), n2.gzindex === n2.gzhead.extra.length && (n2.gzindex = 0, n2.status = 73);
            } else
              n2.status = 73;
          if (73 === n2.status)
            if (n2.gzhead.name) {
              i2 = n2.pending;
              do {
                if (n2.pending === n2.pending_buf_size && (n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), F(e2), i2 = n2.pending, n2.pending === n2.pending_buf_size)) {
                  s2 = 1;
                  break;
                }
                s2 = n2.gzindex < n2.gzhead.name.length ? 255 & n2.gzhead.name.charCodeAt(n2.gzindex++) : 0, U(n2, s2);
              } while (0 !== s2);
              n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), 0 === s2 && (n2.gzindex = 0, n2.status = 91);
            } else
              n2.status = 91;
          if (91 === n2.status)
            if (n2.gzhead.comment) {
              i2 = n2.pending;
              do {
                if (n2.pending === n2.pending_buf_size && (n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), F(e2), i2 = n2.pending, n2.pending === n2.pending_buf_size)) {
                  s2 = 1;
                  break;
                }
                s2 = n2.gzindex < n2.gzhead.comment.length ? 255 & n2.gzhead.comment.charCodeAt(n2.gzindex++) : 0, U(n2, s2);
              } while (0 !== s2);
              n2.gzhead.hcrc && n2.pending > i2 && (e2.adler = p(e2.adler, n2.pending_buf, n2.pending - i2, i2)), 0 === s2 && (n2.status = 103);
            } else
              n2.status = 103;
          if (103 === n2.status && (n2.gzhead.hcrc ? (n2.pending + 2 > n2.pending_buf_size && F(e2), n2.pending + 2 <= n2.pending_buf_size && (U(n2, 255 & e2.adler), U(n2, e2.adler >> 8 & 255), e2.adler = 0, n2.status = E)) : n2.status = E), 0 !== n2.pending) {
            if (F(e2), 0 === e2.avail_out)
              return n2.last_flush = -1, m;
          } else if (0 === e2.avail_in && T(t2) <= T(r2) && t2 !== f)
            return R(e2, -5);
          if (666 === n2.status && 0 !== e2.avail_in)
            return R(e2, -5);
          if (0 !== e2.avail_in || 0 !== n2.lookahead || t2 !== l && 666 !== n2.status) {
            var o2 = 2 === n2.strategy ? function(e3, t3) {
              for (var r3; ; ) {
                if (0 === e3.lookahead && (j(e3), 0 === e3.lookahead)) {
                  if (t3 === l)
                    return A;
                  break;
                }
                if (e3.match_length = 0, r3 = u._tr_tally(e3, 0, e3.window[e3.strstart]), e3.lookahead--, e3.strstart++, r3 && (N(e3, false), 0 === e3.strm.avail_out))
                  return A;
              }
              return e3.insert = 0, t3 === f ? (N(e3, true), 0 === e3.strm.avail_out ? O : B) : e3.last_lit && (N(e3, false), 0 === e3.strm.avail_out) ? A : I;
            }(n2, t2) : 3 === n2.strategy ? function(e3, t3) {
              for (var r3, n3, i3, s3, a3 = e3.window; ; ) {
                if (e3.lookahead <= S) {
                  if (j(e3), e3.lookahead <= S && t3 === l)
                    return A;
                  if (0 === e3.lookahead)
                    break;
                }
                if (e3.match_length = 0, e3.lookahead >= x && 0 < e3.strstart && (n3 = a3[i3 = e3.strstart - 1]) === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3]) {
                  s3 = e3.strstart + S;
                  do {
                  } while (n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && n3 === a3[++i3] && i3 < s3);
                  e3.match_length = S - (s3 - i3), e3.match_length > e3.lookahead && (e3.match_length = e3.lookahead);
                }
                if (e3.match_length >= x ? (r3 = u._tr_tally(e3, 1, e3.match_length - x), e3.lookahead -= e3.match_length, e3.strstart += e3.match_length, e3.match_length = 0) : (r3 = u._tr_tally(e3, 0, e3.window[e3.strstart]), e3.lookahead--, e3.strstart++), r3 && (N(e3, false), 0 === e3.strm.avail_out))
                  return A;
              }
              return e3.insert = 0, t3 === f ? (N(e3, true), 0 === e3.strm.avail_out ? O : B) : e3.last_lit && (N(e3, false), 0 === e3.strm.avail_out) ? A : I;
            }(n2, t2) : h[n2.level].func(n2, t2);
            if (o2 !== O && o2 !== B || (n2.status = 666), o2 === A || o2 === O)
              return 0 === e2.avail_out && (n2.last_flush = -1), m;
            if (o2 === I && (1 === t2 ? u._tr_align(n2) : 5 !== t2 && (u._tr_stored_block(n2, 0, 0, false), 3 === t2 && (D(n2.head), 0 === n2.lookahead && (n2.strstart = 0, n2.block_start = 0, n2.insert = 0))), F(e2), 0 === e2.avail_out))
              return n2.last_flush = -1, m;
          }
          return t2 !== f ? m : n2.wrap <= 0 ? 1 : (2 === n2.wrap ? (U(n2, 255 & e2.adler), U(n2, e2.adler >> 8 & 255), U(n2, e2.adler >> 16 & 255), U(n2, e2.adler >> 24 & 255), U(n2, 255 & e2.total_in), U(n2, e2.total_in >> 8 & 255), U(n2, e2.total_in >> 16 & 255), U(n2, e2.total_in >> 24 & 255)) : (P(n2, e2.adler >>> 16), P(n2, 65535 & e2.adler)), F(e2), 0 < n2.wrap && (n2.wrap = -n2.wrap), 0 !== n2.pending ? m : 1);
        }, r.deflateEnd = function(e2) {
          var t2;
          return e2 && e2.state ? (t2 = e2.state.status) !== C && 69 !== t2 && 73 !== t2 && 91 !== t2 && 103 !== t2 && t2 !== E && 666 !== t2 ? R(e2, _) : (e2.state = null, t2 === E ? R(e2, -3) : m) : _;
        }, r.deflateSetDictionary = function(e2, t2) {
          var r2, n2, i2, s2, a2, o2, h2, u2, l2 = t2.length;
          if (!e2 || !e2.state)
            return _;
          if (2 === (s2 = (r2 = e2.state).wrap) || 1 === s2 && r2.status !== C || r2.lookahead)
            return _;
          for (1 === s2 && (e2.adler = d(e2.adler, t2, l2, 0)), r2.wrap = 0, l2 >= r2.w_size && (0 === s2 && (D(r2.head), r2.strstart = 0, r2.block_start = 0, r2.insert = 0), u2 = new c.Buf8(r2.w_size), c.arraySet(u2, t2, l2 - r2.w_size, r2.w_size, 0), t2 = u2, l2 = r2.w_size), a2 = e2.avail_in, o2 = e2.next_in, h2 = e2.input, e2.avail_in = l2, e2.next_in = 0, e2.input = t2, j(r2); r2.lookahead >= x; ) {
            for (n2 = r2.strstart, i2 = r2.lookahead - (x - 1); r2.ins_h = (r2.ins_h << r2.hash_shift ^ r2.window[n2 + x - 1]) & r2.hash_mask, r2.prev[n2 & r2.w_mask] = r2.head[r2.ins_h], r2.head[r2.ins_h] = n2, n2++, --i2; )
              ;
            r2.strstart = n2, r2.lookahead = x - 1, j(r2);
          }
          return r2.strstart += r2.lookahead, r2.block_start = r2.strstart, r2.insert = r2.lookahead, r2.lookahead = 0, r2.match_length = r2.prev_length = x - 1, r2.match_available = 0, e2.next_in = o2, e2.input = h2, e2.avail_in = a2, r2.wrap = s2, m;
        }, r.deflateInfo = "pako deflate (from Nodeca project)";
      }, { "../utils/common": 41, "./adler32": 43, "./crc32": 45, "./messages": 51, "./trees": 52 }], 47: [function(e, t, r) {
        "use strict";
        t.exports = function() {
          this.text = 0, this.time = 0, this.xflags = 0, this.os = 0, this.extra = null, this.extra_len = 0, this.name = "", this.comment = "", this.hcrc = 0, this.done = false;
        };
      }, {}], 48: [function(e, t, r) {
        "use strict";
        t.exports = function(e2, t2) {
          var r2, n, i, s, a, o, h, u, l, f, c, d, p, m, _, g, b, v, y, w, k, x, S, z, C;
          r2 = e2.state, n = e2.next_in, z = e2.input, i = n + (e2.avail_in - 5), s = e2.next_out, C = e2.output, a = s - (t2 - e2.avail_out), o = s + (e2.avail_out - 257), h = r2.dmax, u = r2.wsize, l = r2.whave, f = r2.wnext, c = r2.window, d = r2.hold, p = r2.bits, m = r2.lencode, _ = r2.distcode, g = (1 << r2.lenbits) - 1, b = (1 << r2.distbits) - 1;
          e:
            do {
              p < 15 && (d += z[n++] << p, p += 8, d += z[n++] << p, p += 8), v = m[d & g];
              t:
                for (; ; ) {
                  if (d >>>= y = v >>> 24, p -= y, 0 === (y = v >>> 16 & 255))
                    C[s++] = 65535 & v;
                  else {
                    if (!(16 & y)) {
                      if (0 == (64 & y)) {
                        v = m[(65535 & v) + (d & (1 << y) - 1)];
                        continue t;
                      }
                      if (32 & y) {
                        r2.mode = 12;
                        break e;
                      }
                      e2.msg = "invalid literal/length code", r2.mode = 30;
                      break e;
                    }
                    w = 65535 & v, (y &= 15) && (p < y && (d += z[n++] << p, p += 8), w += d & (1 << y) - 1, d >>>= y, p -= y), p < 15 && (d += z[n++] << p, p += 8, d += z[n++] << p, p += 8), v = _[d & b];
                    r:
                      for (; ; ) {
                        if (d >>>= y = v >>> 24, p -= y, !(16 & (y = v >>> 16 & 255))) {
                          if (0 == (64 & y)) {
                            v = _[(65535 & v) + (d & (1 << y) - 1)];
                            continue r;
                          }
                          e2.msg = "invalid distance code", r2.mode = 30;
                          break e;
                        }
                        if (k = 65535 & v, p < (y &= 15) && (d += z[n++] << p, (p += 8) < y && (d += z[n++] << p, p += 8)), h < (k += d & (1 << y) - 1)) {
                          e2.msg = "invalid distance too far back", r2.mode = 30;
                          break e;
                        }
                        if (d >>>= y, p -= y, (y = s - a) < k) {
                          if (l < (y = k - y) && r2.sane) {
                            e2.msg = "invalid distance too far back", r2.mode = 30;
                            break e;
                          }
                          if (S = c, (x = 0) === f) {
                            if (x += u - y, y < w) {
                              for (w -= y; C[s++] = c[x++], --y; )
                                ;
                              x = s - k, S = C;
                            }
                          } else if (f < y) {
                            if (x += u + f - y, (y -= f) < w) {
                              for (w -= y; C[s++] = c[x++], --y; )
                                ;
                              if (x = 0, f < w) {
                                for (w -= y = f; C[s++] = c[x++], --y; )
                                  ;
                                x = s - k, S = C;
                              }
                            }
                          } else if (x += f - y, y < w) {
                            for (w -= y; C[s++] = c[x++], --y; )
                              ;
                            x = s - k, S = C;
                          }
                          for (; 2 < w; )
                            C[s++] = S[x++], C[s++] = S[x++], C[s++] = S[x++], w -= 3;
                          w && (C[s++] = S[x++], 1 < w && (C[s++] = S[x++]));
                        } else {
                          for (x = s - k; C[s++] = C[x++], C[s++] = C[x++], C[s++] = C[x++], 2 < (w -= 3); )
                            ;
                          w && (C[s++] = C[x++], 1 < w && (C[s++] = C[x++]));
                        }
                        break;
                      }
                  }
                  break;
                }
            } while (n < i && s < o);
          n -= w = p >> 3, d &= (1 << (p -= w << 3)) - 1, e2.next_in = n, e2.next_out = s, e2.avail_in = n < i ? i - n + 5 : 5 - (n - i), e2.avail_out = s < o ? o - s + 257 : 257 - (s - o), r2.hold = d, r2.bits = p;
        };
      }, {}], 49: [function(e, t, r) {
        "use strict";
        var I = e("../utils/common"), O = e("./adler32"), B = e("./crc32"), R = e("./inffast"), T = e("./inftrees"), D = 1, F = 2, N = 0, U = -2, P = 1, n = 852, i = 592;
        function L(e2) {
          return (e2 >>> 24 & 255) + (e2 >>> 8 & 65280) + ((65280 & e2) << 8) + ((255 & e2) << 24);
        }
        function s() {
          this.mode = 0, this.last = false, this.wrap = 0, this.havedict = false, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new I.Buf16(320), this.work = new I.Buf16(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;
        }
        function a(e2) {
          var t2;
          return e2 && e2.state ? (t2 = e2.state, e2.total_in = e2.total_out = t2.total = 0, e2.msg = "", t2.wrap && (e2.adler = 1 & t2.wrap), t2.mode = P, t2.last = 0, t2.havedict = 0, t2.dmax = 32768, t2.head = null, t2.hold = 0, t2.bits = 0, t2.lencode = t2.lendyn = new I.Buf32(n), t2.distcode = t2.distdyn = new I.Buf32(i), t2.sane = 1, t2.back = -1, N) : U;
        }
        function o(e2) {
          var t2;
          return e2 && e2.state ? ((t2 = e2.state).wsize = 0, t2.whave = 0, t2.wnext = 0, a(e2)) : U;
        }
        function h(e2, t2) {
          var r2, n2;
          return e2 && e2.state ? (n2 = e2.state, t2 < 0 ? (r2 = 0, t2 = -t2) : (r2 = 1 + (t2 >> 4), t2 < 48 && (t2 &= 15)), t2 && (t2 < 8 || 15 < t2) ? U : (null !== n2.window && n2.wbits !== t2 && (n2.window = null), n2.wrap = r2, n2.wbits = t2, o(e2))) : U;
        }
        function u(e2, t2) {
          var r2, n2;
          return e2 ? (n2 = new s(), (e2.state = n2).window = null, (r2 = h(e2, t2)) !== N && (e2.state = null), r2) : U;
        }
        var l, f, c = true;
        function j(e2) {
          if (c) {
            var t2;
            for (l = new I.Buf32(512), f = new I.Buf32(32), t2 = 0; t2 < 144; )
              e2.lens[t2++] = 8;
            for (; t2 < 256; )
              e2.lens[t2++] = 9;
            for (; t2 < 280; )
              e2.lens[t2++] = 7;
            for (; t2 < 288; )
              e2.lens[t2++] = 8;
            for (T(D, e2.lens, 0, 288, l, 0, e2.work, { bits: 9 }), t2 = 0; t2 < 32; )
              e2.lens[t2++] = 5;
            T(F, e2.lens, 0, 32, f, 0, e2.work, { bits: 5 }), c = false;
          }
          e2.lencode = l, e2.lenbits = 9, e2.distcode = f, e2.distbits = 5;
        }
        function Z(e2, t2, r2, n2) {
          var i2, s2 = e2.state;
          return null === s2.window && (s2.wsize = 1 << s2.wbits, s2.wnext = 0, s2.whave = 0, s2.window = new I.Buf8(s2.wsize)), n2 >= s2.wsize ? (I.arraySet(s2.window, t2, r2 - s2.wsize, s2.wsize, 0), s2.wnext = 0, s2.whave = s2.wsize) : (n2 < (i2 = s2.wsize - s2.wnext) && (i2 = n2), I.arraySet(s2.window, t2, r2 - n2, i2, s2.wnext), (n2 -= i2) ? (I.arraySet(s2.window, t2, r2 - n2, n2, 0), s2.wnext = n2, s2.whave = s2.wsize) : (s2.wnext += i2, s2.wnext === s2.wsize && (s2.wnext = 0), s2.whave < s2.wsize && (s2.whave += i2))), 0;
        }
        r.inflateReset = o, r.inflateReset2 = h, r.inflateResetKeep = a, r.inflateInit = function(e2) {
          return u(e2, 15);
        }, r.inflateInit2 = u, r.inflate = function(e2, t2) {
          var r2, n2, i2, s2, a2, o2, h2, u2, l2, f2, c2, d, p, m, _, g, b, v, y, w, k, x, S, z, C = 0, E = new I.Buf8(4), A = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
          if (!e2 || !e2.state || !e2.output || !e2.input && 0 !== e2.avail_in)
            return U;
          12 === (r2 = e2.state).mode && (r2.mode = 13), a2 = e2.next_out, i2 = e2.output, h2 = e2.avail_out, s2 = e2.next_in, n2 = e2.input, o2 = e2.avail_in, u2 = r2.hold, l2 = r2.bits, f2 = o2, c2 = h2, x = N;
          e:
            for (; ; )
              switch (r2.mode) {
                case P:
                  if (0 === r2.wrap) {
                    r2.mode = 13;
                    break;
                  }
                  for (; l2 < 16; ) {
                    if (0 === o2)
                      break e;
                    o2--, u2 += n2[s2++] << l2, l2 += 8;
                  }
                  if (2 & r2.wrap && 35615 === u2) {
                    E[r2.check = 0] = 255 & u2, E[1] = u2 >>> 8 & 255, r2.check = B(r2.check, E, 2, 0), l2 = u2 = 0, r2.mode = 2;
                    break;
                  }
                  if (r2.flags = 0, r2.head && (r2.head.done = false), !(1 & r2.wrap) || (((255 & u2) << 8) + (u2 >> 8)) % 31) {
                    e2.msg = "incorrect header check", r2.mode = 30;
                    break;
                  }
                  if (8 != (15 & u2)) {
                    e2.msg = "unknown compression method", r2.mode = 30;
                    break;
                  }
                  if (l2 -= 4, k = 8 + (15 & (u2 >>>= 4)), 0 === r2.wbits)
                    r2.wbits = k;
                  else if (k > r2.wbits) {
                    e2.msg = "invalid window size", r2.mode = 30;
                    break;
                  }
                  r2.dmax = 1 << k, e2.adler = r2.check = 1, r2.mode = 512 & u2 ? 10 : 12, l2 = u2 = 0;
                  break;
                case 2:
                  for (; l2 < 16; ) {
                    if (0 === o2)
                      break e;
                    o2--, u2 += n2[s2++] << l2, l2 += 8;
                  }
                  if (r2.flags = u2, 8 != (255 & r2.flags)) {
                    e2.msg = "unknown compression method", r2.mode = 30;
                    break;
                  }
                  if (57344 & r2.flags) {
                    e2.msg = "unknown header flags set", r2.mode = 30;
                    break;
                  }
                  r2.head && (r2.head.text = u2 >> 8 & 1), 512 & r2.flags && (E[0] = 255 & u2, E[1] = u2 >>> 8 & 255, r2.check = B(r2.check, E, 2, 0)), l2 = u2 = 0, r2.mode = 3;
                case 3:
                  for (; l2 < 32; ) {
                    if (0 === o2)
                      break e;
                    o2--, u2 += n2[s2++] << l2, l2 += 8;
                  }
                  r2.head && (r2.head.time = u2), 512 & r2.flags && (E[0] = 255 & u2, E[1] = u2 >>> 8 & 255, E[2] = u2 >>> 16 & 255, E[3] = u2 >>> 24 & 255, r2.check = B(r2.check, E, 4, 0)), l2 = u2 = 0, r2.mode = 4;
                case 4:
                  for (; l2 < 16; ) {
                    if (0 === o2)
                      break e;
                    o2--, u2 += n2[s2++] << l2, l2 += 8;
                  }
                  r2.head && (r2.head.xflags = 255 & u2, r2.head.os = u2 >> 8), 512 & r2.flags && (E[0] = 255 & u2, E[1] = u2 >>> 8 & 255, r2.check = B(r2.check, E, 2, 0)), l2 = u2 = 0, r2.mode = 5;
                case 5:
                  if (1024 & r2.flags) {
                    for (; l2 < 16; ) {
                      if (0 === o2)
                        break e;
                      o2--, u2 += n2[s2++] << l2, l2 += 8;
                    }
                    r2.length = u2, r2.head && (r2.head.extra_len = u2), 512 & r2.flags && (E[0] = 255 & u2, E[1] = u2 >>> 8 & 255, r2.check = B(r2.check, E, 2, 0)), l2 = u2 = 0;
                  } else
                    r2.head && (r2.head.extra = null);
                  r2.mode = 6;
                case 6:
                  if (1024 & r2.flags && (o2 < (d = r2.length) && (d = o2), d && (r2.head && (k = r2.head.extra_len - r2.length, r2.head.extra || (r2.head.extra = new Array(r2.head.extra_len)), I.arraySet(r2.head.extra, n2, s2, d, k)), 512 & r2.flags && (r2.check = B(r2.check, n2, d, s2)), o2 -= d, s2 += d, r2.length -= d), r2.length))
                    break e;
                  r2.length = 0, r2.mode = 7;
                case 7:
                  if (2048 & r2.flags) {
                    if (0 === o2)
                      break e;
                    for (d = 0; k = n2[s2 + d++], r2.head && k && r2.length < 65536 && (r2.head.name += String.fromCharCode(k)), k && d < o2; )
                      ;
                    if (512 & r2.flags && (r2.check = B(r2.check, n2, d, s2)), o2 -= d, s2 += d, k)
                      break e;
                  } else
                    r2.head && (r2.head.name = null);
                  r2.length = 0, r2.mode = 8;
                case 8:
                  if (4096 & r2.flags) {
                    if (0 === o2)
                      break e;
                    for (d = 0; k = n2[s2 + d++], r2.head && k && r2.length < 65536 && (r2.head.comment += String.fromCharCode(k)), k && d < o2; )
                      ;
                    if (512 & r2.flags && (r2.check = B(r2.check, n2, d, s2)), o2 -= d, s2 += d, k)
                      break e;
                  } else
                    r2.head && (r2.head.comment = null);
                  r2.mode = 9;
                case 9:
                  if (512 & r2.flags) {
                    for (; l2 < 16; ) {
                      if (0 === o2)
                        break e;
                      o2--, u2 += n2[s2++] << l2, l2 += 8;
                    }
                    if (u2 !== (65535 & r2.check)) {
                      e2.msg = "header crc mismatch", r2.mode = 30;
                      break;
                    }
                    l2 = u2 = 0;
                  }
                  r2.head && (r2.head.hcrc = r2.flags >> 9 & 1, r2.head.done = true), e2.adler = r2.check = 0, r2.mode = 12;
                  break;
                case 10:
                  for (; l2 < 32; ) {
                    if (0 === o2)
                      break e;
                    o2--, u2 += n2[s2++] << l2, l2 += 8;
                  }
                  e2.adler = r2.check = L(u2), l2 = u2 = 0, r2.mode = 11;
                case 11:
                  if (0 === r2.havedict)
                    return e2.next_out = a2, e2.avail_out = h2, e2.next_in = s2, e2.avail_in = o2, r2.hold = u2, r2.bits = l2, 2;
                  e2.adler = r2.check = 1, r2.mode = 12;
                case 12:
                  if (5 === t2 || 6 === t2)
                    break e;
                case 13:
                  if (r2.last) {
                    u2 >>>= 7 & l2, l2 -= 7 & l2, r2.mode = 27;
                    break;
                  }
                  for (; l2 < 3; ) {
                    if (0 === o2)
                      break e;
                    o2--, u2 += n2[s2++] << l2, l2 += 8;
                  }
                  switch (r2.last = 1 & u2, l2 -= 1, 3 & (u2 >>>= 1)) {
                    case 0:
                      r2.mode = 14;
                      break;
                    case 1:
                      if (j(r2), r2.mode = 20, 6 !== t2)
                        break;
                      u2 >>>= 2, l2 -= 2;
                      break e;
                    case 2:
                      r2.mode = 17;
                      break;
                    case 3:
                      e2.msg = "invalid block type", r2.mode = 30;
                  }
                  u2 >>>= 2, l2 -= 2;
                  break;
                case 14:
                  for (u2 >>>= 7 & l2, l2 -= 7 & l2; l2 < 32; ) {
                    if (0 === o2)
                      break e;
                    o2--, u2 += n2[s2++] << l2, l2 += 8;
                  }
                  if ((65535 & u2) != (u2 >>> 16 ^ 65535)) {
                    e2.msg = "invalid stored block lengths", r2.mode = 30;
                    break;
                  }
                  if (r2.length = 65535 & u2, l2 = u2 = 0, r2.mode = 15, 6 === t2)
                    break e;
                case 15:
                  r2.mode = 16;
                case 16:
                  if (d = r2.length) {
                    if (o2 < d && (d = o2), h2 < d && (d = h2), 0 === d)
                      break e;
                    I.arraySet(i2, n2, s2, d, a2), o2 -= d, s2 += d, h2 -= d, a2 += d, r2.length -= d;
                    break;
                  }
                  r2.mode = 12;
                  break;
                case 17:
                  for (; l2 < 14; ) {
                    if (0 === o2)
                      break e;
                    o2--, u2 += n2[s2++] << l2, l2 += 8;
                  }
                  if (r2.nlen = 257 + (31 & u2), u2 >>>= 5, l2 -= 5, r2.ndist = 1 + (31 & u2), u2 >>>= 5, l2 -= 5, r2.ncode = 4 + (15 & u2), u2 >>>= 4, l2 -= 4, 286 < r2.nlen || 30 < r2.ndist) {
                    e2.msg = "too many length or distance symbols", r2.mode = 30;
                    break;
                  }
                  r2.have = 0, r2.mode = 18;
                case 18:
                  for (; r2.have < r2.ncode; ) {
                    for (; l2 < 3; ) {
                      if (0 === o2)
                        break e;
                      o2--, u2 += n2[s2++] << l2, l2 += 8;
                    }
                    r2.lens[A[r2.have++]] = 7 & u2, u2 >>>= 3, l2 -= 3;
                  }
                  for (; r2.have < 19; )
                    r2.lens[A[r2.have++]] = 0;
                  if (r2.lencode = r2.lendyn, r2.lenbits = 7, S = { bits: r2.lenbits }, x = T(0, r2.lens, 0, 19, r2.lencode, 0, r2.work, S), r2.lenbits = S.bits, x) {
                    e2.msg = "invalid code lengths set", r2.mode = 30;
                    break;
                  }
                  r2.have = 0, r2.mode = 19;
                case 19:
                  for (; r2.have < r2.nlen + r2.ndist; ) {
                    for (; g = (C = r2.lencode[u2 & (1 << r2.lenbits) - 1]) >>> 16 & 255, b = 65535 & C, !((_ = C >>> 24) <= l2); ) {
                      if (0 === o2)
                        break e;
                      o2--, u2 += n2[s2++] << l2, l2 += 8;
                    }
                    if (b < 16)
                      u2 >>>= _, l2 -= _, r2.lens[r2.have++] = b;
                    else {
                      if (16 === b) {
                        for (z = _ + 2; l2 < z; ) {
                          if (0 === o2)
                            break e;
                          o2--, u2 += n2[s2++] << l2, l2 += 8;
                        }
                        if (u2 >>>= _, l2 -= _, 0 === r2.have) {
                          e2.msg = "invalid bit length repeat", r2.mode = 30;
                          break;
                        }
                        k = r2.lens[r2.have - 1], d = 3 + (3 & u2), u2 >>>= 2, l2 -= 2;
                      } else if (17 === b) {
                        for (z = _ + 3; l2 < z; ) {
                          if (0 === o2)
                            break e;
                          o2--, u2 += n2[s2++] << l2, l2 += 8;
                        }
                        l2 -= _, k = 0, d = 3 + (7 & (u2 >>>= _)), u2 >>>= 3, l2 -= 3;
                      } else {
                        for (z = _ + 7; l2 < z; ) {
                          if (0 === o2)
                            break e;
                          o2--, u2 += n2[s2++] << l2, l2 += 8;
                        }
                        l2 -= _, k = 0, d = 11 + (127 & (u2 >>>= _)), u2 >>>= 7, l2 -= 7;
                      }
                      if (r2.have + d > r2.nlen + r2.ndist) {
                        e2.msg = "invalid bit length repeat", r2.mode = 30;
                        break;
                      }
                      for (; d--; )
                        r2.lens[r2.have++] = k;
                    }
                  }
                  if (30 === r2.mode)
                    break;
                  if (0 === r2.lens[256]) {
                    e2.msg = "invalid code -- missing end-of-block", r2.mode = 30;
                    break;
                  }
                  if (r2.lenbits = 9, S = { bits: r2.lenbits }, x = T(D, r2.lens, 0, r2.nlen, r2.lencode, 0, r2.work, S), r2.lenbits = S.bits, x) {
                    e2.msg = "invalid literal/lengths set", r2.mode = 30;
                    break;
                  }
                  if (r2.distbits = 6, r2.distcode = r2.distdyn, S = { bits: r2.distbits }, x = T(F, r2.lens, r2.nlen, r2.ndist, r2.distcode, 0, r2.work, S), r2.distbits = S.bits, x) {
                    e2.msg = "invalid distances set", r2.mode = 30;
                    break;
                  }
                  if (r2.mode = 20, 6 === t2)
                    break e;
                case 20:
                  r2.mode = 21;
                case 21:
                  if (6 <= o2 && 258 <= h2) {
                    e2.next_out = a2, e2.avail_out = h2, e2.next_in = s2, e2.avail_in = o2, r2.hold = u2, r2.bits = l2, R(e2, c2), a2 = e2.next_out, i2 = e2.output, h2 = e2.avail_out, s2 = e2.next_in, n2 = e2.input, o2 = e2.avail_in, u2 = r2.hold, l2 = r2.bits, 12 === r2.mode && (r2.back = -1);
                    break;
                  }
                  for (r2.back = 0; g = (C = r2.lencode[u2 & (1 << r2.lenbits) - 1]) >>> 16 & 255, b = 65535 & C, !((_ = C >>> 24) <= l2); ) {
                    if (0 === o2)
                      break e;
                    o2--, u2 += n2[s2++] << l2, l2 += 8;
                  }
                  if (g && 0 == (240 & g)) {
                    for (v = _, y = g, w = b; g = (C = r2.lencode[w + ((u2 & (1 << v + y) - 1) >> v)]) >>> 16 & 255, b = 65535 & C, !(v + (_ = C >>> 24) <= l2); ) {
                      if (0 === o2)
                        break e;
                      o2--, u2 += n2[s2++] << l2, l2 += 8;
                    }
                    u2 >>>= v, l2 -= v, r2.back += v;
                  }
                  if (u2 >>>= _, l2 -= _, r2.back += _, r2.length = b, 0 === g) {
                    r2.mode = 26;
                    break;
                  }
                  if (32 & g) {
                    r2.back = -1, r2.mode = 12;
                    break;
                  }
                  if (64 & g) {
                    e2.msg = "invalid literal/length code", r2.mode = 30;
                    break;
                  }
                  r2.extra = 15 & g, r2.mode = 22;
                case 22:
                  if (r2.extra) {
                    for (z = r2.extra; l2 < z; ) {
                      if (0 === o2)
                        break e;
                      o2--, u2 += n2[s2++] << l2, l2 += 8;
                    }
                    r2.length += u2 & (1 << r2.extra) - 1, u2 >>>= r2.extra, l2 -= r2.extra, r2.back += r2.extra;
                  }
                  r2.was = r2.length, r2.mode = 23;
                case 23:
                  for (; g = (C = r2.distcode[u2 & (1 << r2.distbits) - 1]) >>> 16 & 255, b = 65535 & C, !((_ = C >>> 24) <= l2); ) {
                    if (0 === o2)
                      break e;
                    o2--, u2 += n2[s2++] << l2, l2 += 8;
                  }
                  if (0 == (240 & g)) {
                    for (v = _, y = g, w = b; g = (C = r2.distcode[w + ((u2 & (1 << v + y) - 1) >> v)]) >>> 16 & 255, b = 65535 & C, !(v + (_ = C >>> 24) <= l2); ) {
                      if (0 === o2)
                        break e;
                      o2--, u2 += n2[s2++] << l2, l2 += 8;
                    }
                    u2 >>>= v, l2 -= v, r2.back += v;
                  }
                  if (u2 >>>= _, l2 -= _, r2.back += _, 64 & g) {
                    e2.msg = "invalid distance code", r2.mode = 30;
                    break;
                  }
                  r2.offset = b, r2.extra = 15 & g, r2.mode = 24;
                case 24:
                  if (r2.extra) {
                    for (z = r2.extra; l2 < z; ) {
                      if (0 === o2)
                        break e;
                      o2--, u2 += n2[s2++] << l2, l2 += 8;
                    }
                    r2.offset += u2 & (1 << r2.extra) - 1, u2 >>>= r2.extra, l2 -= r2.extra, r2.back += r2.extra;
                  }
                  if (r2.offset > r2.dmax) {
                    e2.msg = "invalid distance too far back", r2.mode = 30;
                    break;
                  }
                  r2.mode = 25;
                case 25:
                  if (0 === h2)
                    break e;
                  if (d = c2 - h2, r2.offset > d) {
                    if ((d = r2.offset - d) > r2.whave && r2.sane) {
                      e2.msg = "invalid distance too far back", r2.mode = 30;
                      break;
                    }
                    p = d > r2.wnext ? (d -= r2.wnext, r2.wsize - d) : r2.wnext - d, d > r2.length && (d = r2.length), m = r2.window;
                  } else
                    m = i2, p = a2 - r2.offset, d = r2.length;
                  for (h2 < d && (d = h2), h2 -= d, r2.length -= d; i2[a2++] = m[p++], --d; )
                    ;
                  0 === r2.length && (r2.mode = 21);
                  break;
                case 26:
                  if (0 === h2)
                    break e;
                  i2[a2++] = r2.length, h2--, r2.mode = 21;
                  break;
                case 27:
                  if (r2.wrap) {
                    for (; l2 < 32; ) {
                      if (0 === o2)
                        break e;
                      o2--, u2 |= n2[s2++] << l2, l2 += 8;
                    }
                    if (c2 -= h2, e2.total_out += c2, r2.total += c2, c2 && (e2.adler = r2.check = r2.flags ? B(r2.check, i2, c2, a2 - c2) : O(r2.check, i2, c2, a2 - c2)), c2 = h2, (r2.flags ? u2 : L(u2)) !== r2.check) {
                      e2.msg = "incorrect data check", r2.mode = 30;
                      break;
                    }
                    l2 = u2 = 0;
                  }
                  r2.mode = 28;
                case 28:
                  if (r2.wrap && r2.flags) {
                    for (; l2 < 32; ) {
                      if (0 === o2)
                        break e;
                      o2--, u2 += n2[s2++] << l2, l2 += 8;
                    }
                    if (u2 !== (4294967295 & r2.total)) {
                      e2.msg = "incorrect length check", r2.mode = 30;
                      break;
                    }
                    l2 = u2 = 0;
                  }
                  r2.mode = 29;
                case 29:
                  x = 1;
                  break e;
                case 30:
                  x = -3;
                  break e;
                case 31:
                  return -4;
                case 32:
                default:
                  return U;
              }
          return e2.next_out = a2, e2.avail_out = h2, e2.next_in = s2, e2.avail_in = o2, r2.hold = u2, r2.bits = l2, (r2.wsize || c2 !== e2.avail_out && r2.mode < 30 && (r2.mode < 27 || 4 !== t2)) && Z(e2, e2.output, e2.next_out, c2 - e2.avail_out) ? (r2.mode = 31, -4) : (f2 -= e2.avail_in, c2 -= e2.avail_out, e2.total_in += f2, e2.total_out += c2, r2.total += c2, r2.wrap && c2 && (e2.adler = r2.check = r2.flags ? B(r2.check, i2, c2, e2.next_out - c2) : O(r2.check, i2, c2, e2.next_out - c2)), e2.data_type = r2.bits + (r2.last ? 64 : 0) + (12 === r2.mode ? 128 : 0) + (20 === r2.mode || 15 === r2.mode ? 256 : 0), (0 == f2 && 0 === c2 || 4 === t2) && x === N && (x = -5), x);
        }, r.inflateEnd = function(e2) {
          if (!e2 || !e2.state)
            return U;
          var t2 = e2.state;
          return t2.window && (t2.window = null), e2.state = null, N;
        }, r.inflateGetHeader = function(e2, t2) {
          var r2;
          return e2 && e2.state ? 0 == (2 & (r2 = e2.state).wrap) ? U : ((r2.head = t2).done = false, N) : U;
        }, r.inflateSetDictionary = function(e2, t2) {
          var r2, n2 = t2.length;
          return e2 && e2.state ? 0 !== (r2 = e2.state).wrap && 11 !== r2.mode ? U : 11 === r2.mode && O(1, t2, n2, 0) !== r2.check ? -3 : Z(e2, t2, n2, n2) ? (r2.mode = 31, -4) : (r2.havedict = 1, N) : U;
        }, r.inflateInfo = "pako inflate (from Nodeca project)";
      }, { "../utils/common": 41, "./adler32": 43, "./crc32": 45, "./inffast": 48, "./inftrees": 50 }], 50: [function(e, t, r) {
        "use strict";
        var D = e("../utils/common"), F = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0], N = [16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78], U = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0], P = [16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];
        t.exports = function(e2, t2, r2, n, i, s, a, o) {
          var h, u, l, f, c, d, p, m, _, g = o.bits, b = 0, v = 0, y = 0, w = 0, k = 0, x = 0, S = 0, z = 0, C = 0, E = 0, A = null, I = 0, O = new D.Buf16(16), B = new D.Buf16(16), R = null, T = 0;
          for (b = 0; b <= 15; b++)
            O[b] = 0;
          for (v = 0; v < n; v++)
            O[t2[r2 + v]]++;
          for (k = g, w = 15; 1 <= w && 0 === O[w]; w--)
            ;
          if (w < k && (k = w), 0 === w)
            return i[s++] = 20971520, i[s++] = 20971520, o.bits = 1, 0;
          for (y = 1; y < w && 0 === O[y]; y++)
            ;
          for (k < y && (k = y), b = z = 1; b <= 15; b++)
            if (z <<= 1, (z -= O[b]) < 0)
              return -1;
          if (0 < z && (0 === e2 || 1 !== w))
            return -1;
          for (B[1] = 0, b = 1; b < 15; b++)
            B[b + 1] = B[b] + O[b];
          for (v = 0; v < n; v++)
            0 !== t2[r2 + v] && (a[B[t2[r2 + v]]++] = v);
          if (d = 0 === e2 ? (A = R = a, 19) : 1 === e2 ? (A = F, I -= 257, R = N, T -= 257, 256) : (A = U, R = P, -1), b = y, c = s, S = v = E = 0, l = -1, f = (C = 1 << (x = k)) - 1, 1 === e2 && 852 < C || 2 === e2 && 592 < C)
            return 1;
          for (; ; ) {
            for (p = b - S, _ = a[v] < d ? (m = 0, a[v]) : a[v] > d ? (m = R[T + a[v]], A[I + a[v]]) : (m = 96, 0), h = 1 << b - S, y = u = 1 << x; i[c + (E >> S) + (u -= h)] = p << 24 | m << 16 | _ | 0, 0 !== u; )
              ;
            for (h = 1 << b - 1; E & h; )
              h >>= 1;
            if (0 !== h ? (E &= h - 1, E += h) : E = 0, v++, 0 == --O[b]) {
              if (b === w)
                break;
              b = t2[r2 + a[v]];
            }
            if (k < b && (E & f) !== l) {
              for (0 === S && (S = k), c += y, z = 1 << (x = b - S); x + S < w && !((z -= O[x + S]) <= 0); )
                x++, z <<= 1;
              if (C += 1 << x, 1 === e2 && 852 < C || 2 === e2 && 592 < C)
                return 1;
              i[l = E & f] = k << 24 | x << 16 | c - s | 0;
            }
          }
          return 0 !== E && (i[c + E] = b - S << 24 | 64 << 16 | 0), o.bits = k, 0;
        };
      }, { "../utils/common": 41 }], 51: [function(e, t, r) {
        "use strict";
        t.exports = { 2: "need dictionary", 1: "stream end", 0: "", "-1": "file error", "-2": "stream error", "-3": "data error", "-4": "insufficient memory", "-5": "buffer error", "-6": "incompatible version" };
      }, {}], 52: [function(e, t, r) {
        "use strict";
        var i = e("../utils/common"), o = 0, h = 1;
        function n(e2) {
          for (var t2 = e2.length; 0 <= --t2; )
            e2[t2] = 0;
        }
        var s = 0, a = 29, u = 256, l = u + 1 + a, f = 30, c = 19, _ = 2 * l + 1, g = 15, d = 16, p = 7, m = 256, b = 16, v = 17, y = 18, w = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0], k = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13], x = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7], S = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15], z = new Array(2 * (l + 2));
        n(z);
        var C = new Array(2 * f);
        n(C);
        var E = new Array(512);
        n(E);
        var A = new Array(256);
        n(A);
        var I = new Array(a);
        n(I);
        var O, B, R, T = new Array(f);
        function D(e2, t2, r2, n2, i2) {
          this.static_tree = e2, this.extra_bits = t2, this.extra_base = r2, this.elems = n2, this.max_length = i2, this.has_stree = e2 && e2.length;
        }
        function F(e2, t2) {
          this.dyn_tree = e2, this.max_code = 0, this.stat_desc = t2;
        }
        function N(e2) {
          return e2 < 256 ? E[e2] : E[256 + (e2 >>> 7)];
        }
        function U(e2, t2) {
          e2.pending_buf[e2.pending++] = 255 & t2, e2.pending_buf[e2.pending++] = t2 >>> 8 & 255;
        }
        function P(e2, t2, r2) {
          e2.bi_valid > d - r2 ? (e2.bi_buf |= t2 << e2.bi_valid & 65535, U(e2, e2.bi_buf), e2.bi_buf = t2 >> d - e2.bi_valid, e2.bi_valid += r2 - d) : (e2.bi_buf |= t2 << e2.bi_valid & 65535, e2.bi_valid += r2);
        }
        function L(e2, t2, r2) {
          P(e2, r2[2 * t2], r2[2 * t2 + 1]);
        }
        function j(e2, t2) {
          for (var r2 = 0; r2 |= 1 & e2, e2 >>>= 1, r2 <<= 1, 0 < --t2; )
            ;
          return r2 >>> 1;
        }
        function Z(e2, t2, r2) {
          var n2, i2, s2 = new Array(g + 1), a2 = 0;
          for (n2 = 1; n2 <= g; n2++)
            s2[n2] = a2 = a2 + r2[n2 - 1] << 1;
          for (i2 = 0; i2 <= t2; i2++) {
            var o2 = e2[2 * i2 + 1];
            0 !== o2 && (e2[2 * i2] = j(s2[o2]++, o2));
          }
        }
        function W(e2) {
          var t2;
          for (t2 = 0; t2 < l; t2++)
            e2.dyn_ltree[2 * t2] = 0;
          for (t2 = 0; t2 < f; t2++)
            e2.dyn_dtree[2 * t2] = 0;
          for (t2 = 0; t2 < c; t2++)
            e2.bl_tree[2 * t2] = 0;
          e2.dyn_ltree[2 * m] = 1, e2.opt_len = e2.static_len = 0, e2.last_lit = e2.matches = 0;
        }
        function M(e2) {
          8 < e2.bi_valid ? U(e2, e2.bi_buf) : 0 < e2.bi_valid && (e2.pending_buf[e2.pending++] = e2.bi_buf), e2.bi_buf = 0, e2.bi_valid = 0;
        }
        function H(e2, t2, r2, n2) {
          var i2 = 2 * t2, s2 = 2 * r2;
          return e2[i2] < e2[s2] || e2[i2] === e2[s2] && n2[t2] <= n2[r2];
        }
        function G(e2, t2, r2) {
          for (var n2 = e2.heap[r2], i2 = r2 << 1; i2 <= e2.heap_len && (i2 < e2.heap_len && H(t2, e2.heap[i2 + 1], e2.heap[i2], e2.depth) && i2++, !H(t2, n2, e2.heap[i2], e2.depth)); )
            e2.heap[r2] = e2.heap[i2], r2 = i2, i2 <<= 1;
          e2.heap[r2] = n2;
        }
        function K(e2, t2, r2) {
          var n2, i2, s2, a2, o2 = 0;
          if (0 !== e2.last_lit)
            for (; n2 = e2.pending_buf[e2.d_buf + 2 * o2] << 8 | e2.pending_buf[e2.d_buf + 2 * o2 + 1], i2 = e2.pending_buf[e2.l_buf + o2], o2++, 0 === n2 ? L(e2, i2, t2) : (L(e2, (s2 = A[i2]) + u + 1, t2), 0 !== (a2 = w[s2]) && P(e2, i2 -= I[s2], a2), L(e2, s2 = N(--n2), r2), 0 !== (a2 = k[s2]) && P(e2, n2 -= T[s2], a2)), o2 < e2.last_lit; )
              ;
          L(e2, m, t2);
        }
        function Y(e2, t2) {
          var r2, n2, i2, s2 = t2.dyn_tree, a2 = t2.stat_desc.static_tree, o2 = t2.stat_desc.has_stree, h2 = t2.stat_desc.elems, u2 = -1;
          for (e2.heap_len = 0, e2.heap_max = _, r2 = 0; r2 < h2; r2++)
            0 !== s2[2 * r2] ? (e2.heap[++e2.heap_len] = u2 = r2, e2.depth[r2] = 0) : s2[2 * r2 + 1] = 0;
          for (; e2.heap_len < 2; )
            s2[2 * (i2 = e2.heap[++e2.heap_len] = u2 < 2 ? ++u2 : 0)] = 1, e2.depth[i2] = 0, e2.opt_len--, o2 && (e2.static_len -= a2[2 * i2 + 1]);
          for (t2.max_code = u2, r2 = e2.heap_len >> 1; 1 <= r2; r2--)
            G(e2, s2, r2);
          for (i2 = h2; r2 = e2.heap[1], e2.heap[1] = e2.heap[e2.heap_len--], G(e2, s2, 1), n2 = e2.heap[1], e2.heap[--e2.heap_max] = r2, e2.heap[--e2.heap_max] = n2, s2[2 * i2] = s2[2 * r2] + s2[2 * n2], e2.depth[i2] = (e2.depth[r2] >= e2.depth[n2] ? e2.depth[r2] : e2.depth[n2]) + 1, s2[2 * r2 + 1] = s2[2 * n2 + 1] = i2, e2.heap[1] = i2++, G(e2, s2, 1), 2 <= e2.heap_len; )
            ;
          e2.heap[--e2.heap_max] = e2.heap[1], function(e3, t3) {
            var r3, n3, i3, s3, a3, o3, h3 = t3.dyn_tree, u3 = t3.max_code, l2 = t3.stat_desc.static_tree, f2 = t3.stat_desc.has_stree, c2 = t3.stat_desc.extra_bits, d2 = t3.stat_desc.extra_base, p2 = t3.stat_desc.max_length, m2 = 0;
            for (s3 = 0; s3 <= g; s3++)
              e3.bl_count[s3] = 0;
            for (h3[2 * e3.heap[e3.heap_max] + 1] = 0, r3 = e3.heap_max + 1; r3 < _; r3++)
              p2 < (s3 = h3[2 * h3[2 * (n3 = e3.heap[r3]) + 1] + 1] + 1) && (s3 = p2, m2++), h3[2 * n3 + 1] = s3, u3 < n3 || (e3.bl_count[s3]++, a3 = 0, d2 <= n3 && (a3 = c2[n3 - d2]), o3 = h3[2 * n3], e3.opt_len += o3 * (s3 + a3), f2 && (e3.static_len += o3 * (l2[2 * n3 + 1] + a3)));
            if (0 !== m2) {
              do {
                for (s3 = p2 - 1; 0 === e3.bl_count[s3]; )
                  s3--;
                e3.bl_count[s3]--, e3.bl_count[s3 + 1] += 2, e3.bl_count[p2]--, m2 -= 2;
              } while (0 < m2);
              for (s3 = p2; 0 !== s3; s3--)
                for (n3 = e3.bl_count[s3]; 0 !== n3; )
                  u3 < (i3 = e3.heap[--r3]) || (h3[2 * i3 + 1] !== s3 && (e3.opt_len += (s3 - h3[2 * i3 + 1]) * h3[2 * i3], h3[2 * i3 + 1] = s3), n3--);
            }
          }(e2, t2), Z(s2, u2, e2.bl_count);
        }
        function X(e2, t2, r2) {
          var n2, i2, s2 = -1, a2 = t2[1], o2 = 0, h2 = 7, u2 = 4;
          for (0 === a2 && (h2 = 138, u2 = 3), t2[2 * (r2 + 1) + 1] = 65535, n2 = 0; n2 <= r2; n2++)
            i2 = a2, a2 = t2[2 * (n2 + 1) + 1], ++o2 < h2 && i2 === a2 || (o2 < u2 ? e2.bl_tree[2 * i2] += o2 : 0 !== i2 ? (i2 !== s2 && e2.bl_tree[2 * i2]++, e2.bl_tree[2 * b]++) : o2 <= 10 ? e2.bl_tree[2 * v]++ : e2.bl_tree[2 * y]++, s2 = i2, u2 = (o2 = 0) === a2 ? (h2 = 138, 3) : i2 === a2 ? (h2 = 6, 3) : (h2 = 7, 4));
        }
        function V(e2, t2, r2) {
          var n2, i2, s2 = -1, a2 = t2[1], o2 = 0, h2 = 7, u2 = 4;
          for (0 === a2 && (h2 = 138, u2 = 3), n2 = 0; n2 <= r2; n2++)
            if (i2 = a2, a2 = t2[2 * (n2 + 1) + 1], !(++o2 < h2 && i2 === a2)) {
              if (o2 < u2)
                for (; L(e2, i2, e2.bl_tree), 0 != --o2; )
                  ;
              else
                0 !== i2 ? (i2 !== s2 && (L(e2, i2, e2.bl_tree), o2--), L(e2, b, e2.bl_tree), P(e2, o2 - 3, 2)) : o2 <= 10 ? (L(e2, v, e2.bl_tree), P(e2, o2 - 3, 3)) : (L(e2, y, e2.bl_tree), P(e2, o2 - 11, 7));
              s2 = i2, u2 = (o2 = 0) === a2 ? (h2 = 138, 3) : i2 === a2 ? (h2 = 6, 3) : (h2 = 7, 4);
            }
        }
        n(T);
        var q = false;
        function J(e2, t2, r2, n2) {
          P(e2, (s << 1) + (n2 ? 1 : 0), 3), function(e3, t3, r3, n3) {
            M(e3), n3 && (U(e3, r3), U(e3, ~r3)), i.arraySet(e3.pending_buf, e3.window, t3, r3, e3.pending), e3.pending += r3;
          }(e2, t2, r2, true);
        }
        r._tr_init = function(e2) {
          q || (function() {
            var e3, t2, r2, n2, i2, s2 = new Array(g + 1);
            for (n2 = r2 = 0; n2 < a - 1; n2++)
              for (I[n2] = r2, e3 = 0; e3 < 1 << w[n2]; e3++)
                A[r2++] = n2;
            for (A[r2 - 1] = n2, n2 = i2 = 0; n2 < 16; n2++)
              for (T[n2] = i2, e3 = 0; e3 < 1 << k[n2]; e3++)
                E[i2++] = n2;
            for (i2 >>= 7; n2 < f; n2++)
              for (T[n2] = i2 << 7, e3 = 0; e3 < 1 << k[n2] - 7; e3++)
                E[256 + i2++] = n2;
            for (t2 = 0; t2 <= g; t2++)
              s2[t2] = 0;
            for (e3 = 0; e3 <= 143; )
              z[2 * e3 + 1] = 8, e3++, s2[8]++;
            for (; e3 <= 255; )
              z[2 * e3 + 1] = 9, e3++, s2[9]++;
            for (; e3 <= 279; )
              z[2 * e3 + 1] = 7, e3++, s2[7]++;
            for (; e3 <= 287; )
              z[2 * e3 + 1] = 8, e3++, s2[8]++;
            for (Z(z, l + 1, s2), e3 = 0; e3 < f; e3++)
              C[2 * e3 + 1] = 5, C[2 * e3] = j(e3, 5);
            O = new D(z, w, u + 1, l, g), B = new D(C, k, 0, f, g), R = new D(new Array(0), x, 0, c, p);
          }(), q = true), e2.l_desc = new F(e2.dyn_ltree, O), e2.d_desc = new F(e2.dyn_dtree, B), e2.bl_desc = new F(e2.bl_tree, R), e2.bi_buf = 0, e2.bi_valid = 0, W(e2);
        }, r._tr_stored_block = J, r._tr_flush_block = function(e2, t2, r2, n2) {
          var i2, s2, a2 = 0;
          0 < e2.level ? (2 === e2.strm.data_type && (e2.strm.data_type = function(e3) {
            var t3, r3 = 4093624447;
            for (t3 = 0; t3 <= 31; t3++, r3 >>>= 1)
              if (1 & r3 && 0 !== e3.dyn_ltree[2 * t3])
                return o;
            if (0 !== e3.dyn_ltree[18] || 0 !== e3.dyn_ltree[20] || 0 !== e3.dyn_ltree[26])
              return h;
            for (t3 = 32; t3 < u; t3++)
              if (0 !== e3.dyn_ltree[2 * t3])
                return h;
            return o;
          }(e2)), Y(e2, e2.l_desc), Y(e2, e2.d_desc), a2 = function(e3) {
            var t3;
            for (X(e3, e3.dyn_ltree, e3.l_desc.max_code), X(e3, e3.dyn_dtree, e3.d_desc.max_code), Y(e3, e3.bl_desc), t3 = c - 1; 3 <= t3 && 0 === e3.bl_tree[2 * S[t3] + 1]; t3--)
              ;
            return e3.opt_len += 3 * (t3 + 1) + 5 + 5 + 4, t3;
          }(e2), i2 = e2.opt_len + 3 + 7 >>> 3, (s2 = e2.static_len + 3 + 7 >>> 3) <= i2 && (i2 = s2)) : i2 = s2 = r2 + 5, r2 + 4 <= i2 && -1 !== t2 ? J(e2, t2, r2, n2) : 4 === e2.strategy || s2 === i2 ? (P(e2, 2 + (n2 ? 1 : 0), 3), K(e2, z, C)) : (P(e2, 4 + (n2 ? 1 : 0), 3), function(e3, t3, r3, n3) {
            var i3;
            for (P(e3, t3 - 257, 5), P(e3, r3 - 1, 5), P(e3, n3 - 4, 4), i3 = 0; i3 < n3; i3++)
              P(e3, e3.bl_tree[2 * S[i3] + 1], 3);
            V(e3, e3.dyn_ltree, t3 - 1), V(e3, e3.dyn_dtree, r3 - 1);
          }(e2, e2.l_desc.max_code + 1, e2.d_desc.max_code + 1, a2 + 1), K(e2, e2.dyn_ltree, e2.dyn_dtree)), W(e2), n2 && M(e2);
        }, r._tr_tally = function(e2, t2, r2) {
          return e2.pending_buf[e2.d_buf + 2 * e2.last_lit] = t2 >>> 8 & 255, e2.pending_buf[e2.d_buf + 2 * e2.last_lit + 1] = 255 & t2, e2.pending_buf[e2.l_buf + e2.last_lit] = 255 & r2, e2.last_lit++, 0 === t2 ? e2.dyn_ltree[2 * r2]++ : (e2.matches++, t2--, e2.dyn_ltree[2 * (A[r2] + u + 1)]++, e2.dyn_dtree[2 * N(t2)]++), e2.last_lit === e2.lit_bufsize - 1;
        }, r._tr_align = function(e2) {
          P(e2, 2, 3), L(e2, m, z), function(e3) {
            16 === e3.bi_valid ? (U(e3, e3.bi_buf), e3.bi_buf = 0, e3.bi_valid = 0) : 8 <= e3.bi_valid && (e3.pending_buf[e3.pending++] = 255 & e3.bi_buf, e3.bi_buf >>= 8, e3.bi_valid -= 8);
          }(e2);
        };
      }, { "../utils/common": 41 }], 53: [function(e, t, r) {
        "use strict";
        t.exports = function() {
          this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = "", this.state = null, this.data_type = 2, this.adler = 0;
        };
      }, {}], 54: [function(e, t, r) {
        (function(e2) {
          !function(r2, n) {
            "use strict";
            if (!r2.setImmediate) {
              var i, s, t2, a, o = 1, h = {}, u = false, l = r2.document, e3 = Object.getPrototypeOf && Object.getPrototypeOf(r2);
              e3 = e3 && e3.setTimeout ? e3 : r2, i = "[object process]" === {}.toString.call(r2.process) ? function(e4) {
                process.nextTick(function() {
                  c(e4);
                });
              } : function() {
                if (r2.postMessage && !r2.importScripts) {
                  var e4 = true, t3 = r2.onmessage;
                  return r2.onmessage = function() {
                    e4 = false;
                  }, r2.postMessage("", "*"), r2.onmessage = t3, e4;
                }
              }() ? (a = "setImmediate$" + Math.random() + "$", r2.addEventListener ? r2.addEventListener("message", d, false) : r2.attachEvent("onmessage", d), function(e4) {
                r2.postMessage(a + e4, "*");
              }) : r2.MessageChannel ? ((t2 = new MessageChannel()).port1.onmessage = function(e4) {
                c(e4.data);
              }, function(e4) {
                t2.port2.postMessage(e4);
              }) : l && "onreadystatechange" in l.createElement("script") ? (s = l.documentElement, function(e4) {
                var t3 = l.createElement("script");
                t3.onreadystatechange = function() {
                  c(e4), t3.onreadystatechange = null, s.removeChild(t3), t3 = null;
                }, s.appendChild(t3);
              }) : function(e4) {
                setTimeout(c, 0, e4);
              }, e3.setImmediate = function(e4) {
                "function" != typeof e4 && (e4 = new Function("" + e4));
                for (var t3 = new Array(arguments.length - 1), r3 = 0; r3 < t3.length; r3++)
                  t3[r3] = arguments[r3 + 1];
                var n2 = { callback: e4, args: t3 };
                return h[o] = n2, i(o), o++;
              }, e3.clearImmediate = f;
            }
            function f(e4) {
              delete h[e4];
            }
            function c(e4) {
              if (u)
                setTimeout(c, 0, e4);
              else {
                var t3 = h[e4];
                if (t3) {
                  u = true;
                  try {
                    !function(e5) {
                      var t4 = e5.callback, r3 = e5.args;
                      switch (r3.length) {
                        case 0:
                          t4();
                          break;
                        case 1:
                          t4(r3[0]);
                          break;
                        case 2:
                          t4(r3[0], r3[1]);
                          break;
                        case 3:
                          t4(r3[0], r3[1], r3[2]);
                          break;
                        default:
                          t4.apply(n, r3);
                      }
                    }(t3);
                  } finally {
                    f(e4), u = false;
                  }
                }
              }
            }
            function d(e4) {
              e4.source === r2 && "string" == typeof e4.data && 0 === e4.data.indexOf(a) && c(+e4.data.slice(a.length));
            }
          }("undefined" == typeof self ? void 0 === e2 ? this : e2 : self);
        }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
      }, {}] }, {}, [10])(10);
    });
  }
});

// node_modules/devextreme/esm/localization/language_codes.js
function getLanguageId() {
  return LANGUAGE_CODES[core_default.locale()];
}
var LANGUAGE_CODES;
var init_language_codes = __esm({
  "node_modules/devextreme/esm/localization/language_codes.js"() {
    init_core();
    LANGUAGE_CODES = {
      ar: 1,
      bg: 2,
      ca: 3,
      "zh-Hans": 4,
      cs: 5,
      da: 6,
      de: 7,
      el: 8,
      en: 9,
      es: 10,
      fi: 11,
      fr: 12,
      he: 13,
      hu: 14,
      is: 15,
      it: 16,
      ja: 17,
      ko: 18,
      nl: 19,
      no: 20,
      pl: 21,
      pt: 22,
      rm: 23,
      ro: 24,
      ru: 25,
      hr: 26,
      sk: 27,
      sq: 28,
      sv: 29,
      th: 30,
      tr: 31,
      ur: 32,
      id: 33,
      uk: 34,
      be: 35,
      sl: 36,
      et: 37,
      lv: 38,
      lt: 39,
      tg: 40,
      fa: 41,
      vi: 42,
      hy: 43,
      az: 44,
      eu: 45,
      hsb: 46,
      mk: 47,
      tn: 50,
      xh: 52,
      zu: 53,
      af: 54,
      ka: 55,
      fo: 56,
      hi: 57,
      mt: 58,
      se: 59,
      ga: 60,
      ms: 62,
      kk: 63,
      ky: 64,
      sw: 65,
      tk: 66,
      uz: 67,
      tt: 68,
      bn: 69,
      pa: 70,
      gu: 71,
      or: 72,
      ta: 73,
      te: 74,
      kn: 75,
      ml: 76,
      as: 77,
      mr: 78,
      sa: 79,
      mn: 80,
      bo: 81,
      cy: 82,
      km: 83,
      lo: 84,
      gl: 86,
      kok: 87,
      syr: 90,
      si: 91,
      iu: 93,
      am: 94,
      tzm: 95,
      ne: 97,
      fy: 98,
      ps: 99,
      fil: 100,
      dv: 101,
      ha: 104,
      yo: 106,
      quz: 107,
      nso: 108,
      ba: 109,
      lb: 110,
      kl: 111,
      ig: 112,
      ii: 120,
      arn: 122,
      moh: 124,
      br: 126,
      ug: 128,
      mi: 129,
      oc: 130,
      co: 131,
      gsw: 132,
      sah: 133,
      qut: 134,
      rw: 135,
      wo: 136,
      prs: 140,
      gd: 145,
      "ar-SA": 1025,
      "bg-BG": 1026,
      "ca-ES": 1027,
      "zh-TW": 1028,
      "cs-CZ": 1029,
      "da-DK": 1030,
      "de-DE": 1031,
      "el-GR": 1032,
      "en-US": 1033,
      "fi-FI": 1035,
      "fr-FR": 1036,
      "he-IL": 1037,
      "hu-HU": 1038,
      "is-IS": 1039,
      "it-IT": 1040,
      "ja-JP": 1041,
      "ko-KR": 1042,
      "nl-NL": 1043,
      "nb-NO": 1044,
      "pl-PL": 1045,
      "pt-BR": 1046,
      "rm-CH": 1047,
      "ro-RO": 1048,
      "ru-RU": 1049,
      "hr-HR": 1050,
      "sk-SK": 1051,
      "sq-AL": 1052,
      "sv-SE": 1053,
      "th-TH": 1054,
      "tr-TR": 1055,
      "ur-PK": 1056,
      "id-ID": 1057,
      "uk-UA": 1058,
      "be-BY": 1059,
      "sl-SI": 1060,
      "et-EE": 1061,
      "lv-LV": 1062,
      "lt-LT": 1063,
      "tg-Cyrl-TJ": 1064,
      "fa-IR": 1065,
      "vi-VN": 1066,
      "hy-AM": 1067,
      "az-Latn-AZ": 1068,
      "eu-ES": 1069,
      "hsb-DE": 1070,
      "mk-MK": 1071,
      "tn-ZA": 1074,
      "xh-ZA": 1076,
      "zu-ZA": 1077,
      "af-ZA": 1078,
      "ka-GE": 1079,
      "fo-FO": 1080,
      "hi-IN": 1081,
      "mt-MT": 1082,
      "se-NO": 1083,
      "ms-MY": 1086,
      "kk-KZ": 1087,
      "ky-KG": 1088,
      "sw-KE": 1089,
      "tk-TM": 1090,
      "uz-Latn-UZ": 1091,
      "tt-RU": 1092,
      "bn-IN": 1093,
      "pa-IN": 1094,
      "gu-IN": 1095,
      "or-IN": 1096,
      "ta-IN": 1097,
      "te-IN": 1098,
      "kn-IN": 1099,
      "ml-IN": 1100,
      "as-IN": 1101,
      "mr-IN": 1102,
      "sa-IN": 1103,
      "mn-MN": 1104,
      "bo-CN": 1105,
      "cy-GB": 1106,
      "km-KH": 1107,
      "lo-LA": 1108,
      "gl-ES": 1110,
      "kok-IN": 1111,
      "syr-SY": 1114,
      "si-LK": 1115,
      "iu-Cans-CA": 1117,
      "am-ET": 1118,
      "ne-NP": 1121,
      "fy-NL": 1122,
      "ps-AF": 1123,
      "fil-PH": 1124,
      "dv-MV": 1125,
      "ha-Latn-NG": 1128,
      "yo-NG": 1130,
      "quz-BO": 1131,
      "nso-ZA": 1132,
      "ba-RU": 1133,
      "lb-LU": 1134,
      "kl-GL": 1135,
      "ig-NG": 1136,
      "ii-CN": 1144,
      "arn-CL": 1146,
      "moh-CA": 1148,
      "br-FR": 1150,
      "ug-CN": 1152,
      "mi-NZ": 1153,
      "oc-FR": 1154,
      "co-FR": 1155,
      "gsw-FR": 1156,
      "sah-RU": 1157,
      "qut-GT": 1158,
      "rw-RW": 1159,
      "wo-SN": 1160,
      "prs-AF": 1164,
      "gd-GB": 1169,
      "ar-IQ": 2049,
      "zh-CN": 2052,
      "de-CH": 2055,
      "en-GB": 2057,
      "es-MX": 2058,
      "fr-BE": 2060,
      "it-CH": 2064,
      "nl-BE": 2067,
      "nn-NO": 2068,
      "pt-PT": 2070,
      "sr-Latn-CS": 2074,
      "sv-FI": 2077,
      "az-Cyrl-AZ": 2092,
      "dsb-DE": 2094,
      "se-SE": 2107,
      "ga-IE": 2108,
      "ms-BN": 2110,
      "uz-Cyrl-UZ": 2115,
      "bn-BD": 2117,
      "mn-Mong-CN": 2128,
      "iu-Latn-CA": 2141,
      "tzm-Latn-DZ": 2143,
      "quz-EC": 2155,
      "ar-EG": 3073,
      "zh-HK": 3076,
      "de-AT": 3079,
      "en-AU": 3081,
      "es-ES": 3082,
      "fr-CA": 3084,
      "sr-Cyrl-CS": 3098,
      "se-FI": 3131,
      "quz-PE": 3179,
      "ar-LY": 4097,
      "zh-SG": 4100,
      "de-LU": 4103,
      "en-CA": 4105,
      "es-GT": 4106,
      "fr-CH": 4108,
      "hr-BA": 4122,
      "smj-NO": 4155,
      "ar-DZ": 5121,
      "zh-MO": 5124,
      "de-LI": 5127,
      "en-NZ": 5129,
      "es-CR": 5130,
      "fr-LU": 5132,
      "bs-Latn-BA": 5146,
      "smj-SE": 5179,
      "ar-MA": 6145,
      "en-IE": 6153,
      "es-PA": 6154,
      "fr-MC": 6156,
      "sr-Latn-BA": 6170,
      "sma-NO": 6203,
      "ar-TN": 7169,
      "en-ZA": 7177,
      "es-DO": 7178,
      "sr-Cyrl-BA": 7194,
      "sma-SE": 7227,
      "ar-OM": 8193,
      "en-JM": 8201,
      "es-VE": 8202,
      "bs-Cyrl-BA": 8218,
      "sms-FI": 8251,
      "ar-YE": 9217,
      "en-029": 9225,
      "es-CO": 9226,
      "sr-Latn-RS": 9242,
      "smn-FI": 9275,
      "ar-SY": 10241,
      "en-BZ": 10249,
      "es-PE": 10250,
      "sr-Cyrl-RS": 10266,
      "ar-JO": 11265,
      "en-TT": 11273,
      "es-AR": 11274,
      "sr-Latn-ME": 11290,
      "ar-LB": 12289,
      "en-ZW": 12297,
      "es-EC": 12298,
      "sr-Cyrl-ME": 12314,
      "ar-KW": 13313,
      "en-PH": 13321,
      "es-CL": 13322,
      "ar-AE": 14337,
      "es-UY": 14346,
      "ar-BH": 15361,
      "es-PY": 15370,
      "ar-QA": 16385,
      "en-IN": 16393,
      "es-BO": 16394,
      "en-MY": 17417,
      "es-SV": 17418,
      "en-SG": 18441,
      "es-HN": 18442,
      "es-NI": 19466,
      "es-PR": 20490,
      "es-US": 21514,
      "bs-Cyrl": 25626,
      "bs-Latn": 26650,
      "sr-Cyrl": 27674,
      "sr-Latn": 28698,
      smn: 28731,
      "az-Cyrl": 29740,
      sms: 29755,
      zh: 30724,
      nn: 30740,
      bs: 30746,
      "az-Latn": 30764,
      sma: 30779,
      "uz-Cyrl": 30787,
      "mn-Cyrl": 30800,
      "iu-Cans": 30813,
      "zh-Hant": 31748,
      nb: 31764,
      sr: 31770,
      "tg-Cyrl": 31784,
      dsb: 31790,
      smj: 31803,
      "uz-Latn": 31811,
      "mn-Mong": 31824,
      "iu-Latn": 31837,
      "tzm-Latn": 31839,
      "ha-Latn": 31848
    };
  }
});

// node_modules/devextreme/esm/exporter/excel_format_converter.js
var ARABIC_ZERO_CODE, DEFINED_NUMBER_FORMTATS, PERIOD_REGEXP, DAY_REGEXP, DO_REGEXP, STANDALONE_MONTH_REGEXP, HOUR_REGEXP, ANY_REGEXP, excelFormatConverter, excel_format_converter_default;
var init_excel_format_converter = __esm({
  "node_modules/devextreme/esm/exporter/excel_format_converter.js"() {
    init_string();
    init_number();
    init_date();
    init_type();
    init_date_format();
    init_language_codes();
    init_currency();
    ARABIC_ZERO_CODE = 1632;
    DEFINED_NUMBER_FORMTATS = {
      thousands: "#,##0{0},&quot;K&quot;",
      millions: "#,##0{0},,&quot;M&quot;",
      billions: "#,##0{0},,,&quot;B&quot;",
      trillions: "#,##0{0},,,,&quot;T&quot;",
      percent: "0{0}%",
      decimal: "#{0}",
      fixedpoint: "#,##0{0}",
      exponential: "0{0}E+00",
      currency: " "
    };
    PERIOD_REGEXP = /a+/g;
    DAY_REGEXP = /E/g;
    DO_REGEXP = /dE+/g;
    STANDALONE_MONTH_REGEXP = /L/g;
    HOUR_REGEXP = /h/g;
    ANY_REGEXP = /./g;
    excelFormatConverter = {
      _applyPrecision: function(format2, precision) {
        var result;
        var i;
        if (precision > 0) {
          result = "decimal" !== format2 ? "." : "";
          for (i = 0; i < precision; i++) {
            result += "0";
          }
          return result;
        }
        return "";
      },
      _hasArabicDigits: function(text) {
        var code;
        for (var i = 0; i < text.length; i++) {
          code = text.charCodeAt(i);
          if (code >= ARABIC_ZERO_CODE && code < ARABIC_ZERO_CODE + 10) {
            return true;
          }
        }
        return false;
      },
      _convertDateFormatToOpenXml: function(format2) {
        return format2.split("/").join("\\/").split("'").map(function(datePart, index) {
          if (index % 2 === 0) {
            return datePart.replace(PERIOD_REGEXP, "AM/PM").replace(DO_REGEXP, "d").replace(DAY_REGEXP, "d").replace(STANDALONE_MONTH_REGEXP, "M").replace(HOUR_REGEXP, "H").split("[").join("\\[").split("]").join("\\]");
          }
          if (datePart) {
            return datePart.replace(ANY_REGEXP, "\\$&");
          }
          return "'";
        }).join("");
      },
      _convertDateFormat: function(format2) {
        var formattedValue = (date_default.format(new Date(2009, 8, 8, 6, 5, 4), format2) || "").toString();
        var result = getFormat((value) => date_default.format(value, format2));
        if (result) {
          result = this._convertDateFormatToOpenXml(result);
          result = this._getLanguageInfo(formattedValue) + result;
        }
        return result;
      },
      _getLanguageInfo: function(defaultPattern) {
        var languageID = getLanguageId();
        var languageIDStr = languageID ? languageID.toString(16) : "";
        var languageInfo = "";
        if (this._hasArabicDigits(defaultPattern)) {
          while (languageIDStr.length < 3) {
            languageIDStr = "0" + languageIDStr;
          }
          languageInfo = "[$-2010" + languageIDStr + "]";
        } else if (languageIDStr) {
          languageInfo = "[$-" + languageIDStr + "]";
        }
        return languageInfo;
      },
      _convertNumberFormat: function(format2, precision, currency) {
        var result;
        var excelFormat;
        if ("currency" === format2) {
          excelFormat = number_default.getOpenXmlCurrencyFormat(currency);
        } else {
          excelFormat = DEFINED_NUMBER_FORMTATS[format2.toLowerCase()];
        }
        if (excelFormat) {
          result = format(excelFormat, this._applyPrecision(format2, precision));
        }
        return result;
      },
      convertFormat: function(format2, precision, type, currency) {
        if (isDefined(format2)) {
          if ("date" === type) {
            return excelFormatConverter._convertDateFormat(format2);
          } else if (isString(format2) && DEFINED_NUMBER_FORMTATS[format2.toLowerCase()]) {
            return excelFormatConverter._convertNumberFormat(format2, precision, currency);
          }
        }
      }
    };
    excel_format_converter_default = excelFormatConverter;
  }
});

// node_modules/devextreme/esm/exporter/excel/excel.tag_helper.js
var tagHelper, excel_tag_helper_default;
var init_excel_tag_helper = __esm({
  "node_modules/devextreme/esm/exporter/excel/excel.tag_helper.js"() {
    init_type();
    tagHelper = {
      toXml: function(tagName, attributes, content) {
        var result = ["<", tagName];
        for (var attributeName in attributes) {
          var attributeValue = attributes[attributeName];
          if (isDefined(attributeValue)) {
            result.push(" ", attributeName, '="', attributeValue, '"');
          }
        }
        if (isDefined(content) && "" !== content) {
          result.push(">", content, "</", tagName, ">");
        } else {
          result.push(" />");
        }
        return result.join("");
      }
    };
    excel_tag_helper_default = tagHelper;
  }
});

// node_modules/devextreme/esm/exporter/excel/excel.cell_alignment_helper.js
var cellAlignmentHelper, excel_cell_alignment_helper_default;
var init_excel_cell_alignment_helper = __esm({
  "node_modules/devextreme/esm/exporter/excel/excel.cell_alignment_helper.js"() {
    init_type();
    init_excel_tag_helper();
    cellAlignmentHelper = {
      tryCreateTag: function(sourceObj) {
        var result = null;
        if (isDefined(sourceObj)) {
          result = {
            vertical: sourceObj.vertical,
            wrapText: sourceObj.wrapText,
            horizontal: sourceObj.horizontal
          };
          if (cellAlignmentHelper.isEmpty(result)) {
            result = null;
          }
        }
        return result;
      },
      copy: function(source) {
        var result = null;
        if (isDefined(source)) {
          result = {};
          if (void 0 !== source.horizontal) {
            result.horizontal = source.horizontal;
          }
          if (void 0 !== source.vertical) {
            result.vertical = source.vertical;
          }
          if (void 0 !== source.wrapText) {
            result.wrapText = source.wrapText;
          }
        }
        return result;
      },
      areEqual: function(leftTag, rightTag) {
        return cellAlignmentHelper.isEmpty(leftTag) && cellAlignmentHelper.isEmpty(rightTag) || isDefined(leftTag) && isDefined(rightTag) && leftTag.vertical === rightTag.vertical && leftTag.wrapText === rightTag.wrapText && leftTag.horizontal === rightTag.horizontal;
      },
      isEmpty: function(tag) {
        return !isDefined(tag) || !isDefined(tag.vertical) && !isDefined(tag.wrapText) && !isDefined(tag.horizontal);
      },
      toXml: function(tag) {
        return excel_tag_helper_default.toXml("alignment", {
          vertical: tag.vertical,
          wrapText: isDefined(tag.wrapText) ? Number(tag.wrapText) : void 0,
          horizontal: tag.horizontal
        });
      }
    };
    excel_cell_alignment_helper_default = cellAlignmentHelper;
  }
});

// node_modules/devextreme/esm/exporter/excel/excel.color_helper.js
var colorHelper, excel_color_helper_default;
var init_excel_color_helper = __esm({
  "node_modules/devextreme/esm/exporter/excel/excel.color_helper.js"() {
    init_type();
    init_excel_tag_helper();
    colorHelper = {
      _tryConvertColor: function(source) {
        if ("string" !== typeof source) {
          return source;
        }
        var result;
        if (source.length > 0 && "#" === source[0]) {
          var colorCode = source.substr(1, source.length);
          if (6 === colorCode.length) {
            result = "FF" + colorCode;
          } else if (8 === colorCode.length) {
            result = colorCode[6] + colorCode[7] + colorCode.substr(0, 6);
          } else {
            result = colorCode;
          }
        } else {
          result = source;
        }
        return result;
      },
      tryCreateTag: function(sourceObj) {
        var result = null;
        if (isDefined(sourceObj)) {
          if ("string" === typeof sourceObj) {
            result = {
              rgb: this._tryConvertColor(sourceObj)
            };
          } else {
            result = {
              rgb: this._tryConvertColor(sourceObj.rgb),
              theme: sourceObj.theme
            };
          }
          if (colorHelper.isEmpty(result)) {
            result = null;
          }
        }
        return result;
      },
      copy: function(source) {
        var result = null;
        if (isDefined(source)) {
          if ("string" === typeof source) {
            result = source;
          } else {
            result = {};
            if (void 0 !== source.rgb) {
              result.rgb = source.rgb;
            }
            if (void 0 !== source.theme) {
              result.theme = source.theme;
            }
          }
        }
        return result;
      },
      isEmpty: function(tag) {
        return !isDefined(tag) || !isDefined(tag.rgb) && !isDefined(tag.theme);
      },
      areEqual: function(leftTag, rightTag) {
        return colorHelper.isEmpty(leftTag) && colorHelper.isEmpty(rightTag) || isDefined(leftTag) && isDefined(rightTag) && leftTag.rgb === rightTag.rgb && leftTag.theme === rightTag.theme;
      },
      toXml: function(tagName, tag) {
        return excel_tag_helper_default.toXml(tagName, {
          rgb: tag.rgb,
          theme: tag.theme
        });
      }
    };
    excel_color_helper_default = colorHelper;
  }
});

// node_modules/devextreme/esm/exporter/excel/excel.pattern_fill_helper.js
var patternFillHelper, excel_pattern_fill_helper_default;
var init_excel_pattern_fill_helper = __esm({
  "node_modules/devextreme/esm/exporter/excel/excel.pattern_fill_helper.js"() {
    init_type();
    init_excel_tag_helper();
    init_excel_color_helper();
    patternFillHelper = {
      tryCreateTag: function(sourceObj) {
        var result = null;
        if (isDefined(sourceObj)) {
          result = {
            patternType: sourceObj.patternType,
            backgroundColor: excel_color_helper_default.tryCreateTag(sourceObj.backgroundColor),
            foregroundColor: excel_color_helper_default.tryCreateTag(sourceObj.foregroundColor)
          };
          if (patternFillHelper.isEmpty(result)) {
            result = null;
          }
        }
        return result;
      },
      copy: function(source) {
        var result = null;
        if (isDefined(source)) {
          result = {};
          if (void 0 !== source.patternType) {
            result.patternType = source.patternType;
          }
          if (void 0 !== source.backgroundColor) {
            result.backgroundColor = excel_color_helper_default.copy(source.backgroundColor);
          }
          if (void 0 !== source.foregroundColor) {
            result.foregroundColor = excel_color_helper_default.copy(source.foregroundColor);
          }
        }
        return result;
      },
      areEqual: function(leftTag, rightTag) {
        return patternFillHelper.isEmpty(leftTag) && patternFillHelper.isEmpty(rightTag) || isDefined(leftTag) && isDefined(rightTag) && leftTag.patternType === rightTag.patternType && excel_color_helper_default.areEqual(leftTag.backgroundColor, rightTag.backgroundColor) && excel_color_helper_default.areEqual(leftTag.foregroundColor, rightTag.foregroundColor);
      },
      isEmpty: function(tag) {
        return !isDefined(tag) || !isDefined(tag.patternType);
      },
      toXml: function(tag) {
        var content = [isDefined(tag.foregroundColor) ? excel_color_helper_default.toXml("fgColor", tag.foregroundColor) : "", isDefined(tag.backgroundColor) ? excel_color_helper_default.toXml("bgColor", tag.backgroundColor) : ""].join("");
        return excel_tag_helper_default.toXml("patternFill", {
          patternType: tag.patternType
        }, content);
      }
    };
    excel_pattern_fill_helper_default = patternFillHelper;
  }
});

// node_modules/devextreme/esm/exporter/excel/excel.fill_helper.js
var fillHelper, excel_fill_helper_default;
var init_excel_fill_helper = __esm({
  "node_modules/devextreme/esm/exporter/excel/excel.fill_helper.js"() {
    init_type();
    init_excel_tag_helper();
    init_excel_pattern_fill_helper();
    fillHelper = {
      tryCreateTag: function(sourceObj) {
        var result = null;
        if (isDefined(sourceObj)) {
          result = {
            patternFill: excel_pattern_fill_helper_default.tryCreateTag(sourceObj.patternFill)
          };
          if (fillHelper.isEmpty(result)) {
            result = null;
          }
        }
        return result;
      },
      tryCreateFillFromSimpleFormat: function() {
        var {
          backgroundColor,
          fillPatternType,
          fillPatternColor
        } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        if (isDefined(backgroundColor) && !(isDefined(fillPatternType) && isDefined(fillPatternColor))) {
          return {
            patternFill: {
              patternType: "solid",
              foregroundColor: {
                rgb: backgroundColor
              }
            }
          };
        } else if (isDefined(fillPatternType) && isDefined(fillPatternColor)) {
          return {
            patternFill: {
              patternType: fillPatternType,
              foregroundColor: {
                rgb: fillPatternColor
              },
              backgroundColor: {
                rgb: backgroundColor
              }
            }
          };
        }
      },
      copySimpleFormat: function(source, target) {
        if (void 0 !== source.backgroundColor) {
          target.backgroundColor = source.backgroundColor;
        }
        if (void 0 !== source.fillPatternType) {
          target.fillPatternType = source.fillPatternType;
        }
        if (void 0 !== source.fillPatternColor) {
          target.fillPatternColor = source.fillPatternColor;
        }
      },
      copy: function(source) {
        var result = null;
        if (isDefined(source)) {
          result = {};
          if (void 0 !== source.patternFill) {
            result.patternFill = excel_pattern_fill_helper_default.copy(source.patternFill);
          }
        }
        return result;
      },
      areEqual: function(leftTag, rightTag) {
        return fillHelper.isEmpty(leftTag) && fillHelper.isEmpty(rightTag) || isDefined(leftTag) && isDefined(rightTag) && excel_pattern_fill_helper_default.areEqual(leftTag.patternFill, rightTag.patternFill);
      },
      isEmpty: function(tag) {
        return !isDefined(tag) || excel_pattern_fill_helper_default.isEmpty(tag.patternFill);
      },
      toXml: function(tag) {
        return excel_tag_helper_default.toXml("fill", {}, excel_pattern_fill_helper_default.toXml(tag.patternFill));
      }
    };
    excel_fill_helper_default = fillHelper;
  }
});

// node_modules/devextreme/esm/exporter/excel/excel.font_helper.js
var fontHelper, excel_font_helper_default;
var init_excel_font_helper = __esm({
  "node_modules/devextreme/esm/exporter/excel/excel.font_helper.js"() {
    init_type();
    init_excel_tag_helper();
    init_excel_color_helper();
    fontHelper = {
      tryCreateTag: function(sourceObj) {
        var result = null;
        if (isDefined(sourceObj)) {
          result = {
            size: sourceObj.size,
            name: sourceObj.name,
            family: sourceObj.family,
            scheme: sourceObj.scheme,
            bold: sourceObj.bold,
            italic: sourceObj.italic,
            underline: sourceObj.underline,
            color: excel_color_helper_default.tryCreateTag(sourceObj.color)
          };
          if (fontHelper.isEmpty(result)) {
            result = null;
          }
        }
        return result;
      },
      copy: function(source) {
        var result = null;
        if (isDefined(source)) {
          result = {};
          if (void 0 !== source.size) {
            result.size = source.size;
          }
          if (void 0 !== source.name) {
            result.name = source.name;
          }
          if (void 0 !== source.family) {
            result.family = source.family;
          }
          if (void 0 !== source.scheme) {
            result.scheme = source.scheme;
          }
          if (void 0 !== source.bold) {
            result.bold = source.bold;
          }
          if (void 0 !== source.italic) {
            result.italic = source.italic;
          }
          if (void 0 !== source.underline) {
            result.underline = source.underline;
          }
          if (void 0 !== source.color) {
            result.color = excel_color_helper_default.copy(source.color);
          }
        }
        return result;
      },
      areEqual: function(leftTag, rightTag) {
        return fontHelper.isEmpty(leftTag) && fontHelper.isEmpty(rightTag) || isDefined(leftTag) && isDefined(rightTag) && leftTag.size === rightTag.size && leftTag.name === rightTag.name && leftTag.family === rightTag.family && leftTag.scheme === rightTag.scheme && (leftTag.bold === rightTag.bold || !leftTag.bold === !rightTag.bold) && (leftTag.italic === rightTag.italic || !leftTag.italic === !rightTag.italic) && leftTag.underline === rightTag.underline && excel_color_helper_default.areEqual(leftTag.color, rightTag.color);
      },
      isEmpty: function(tag) {
        return !isDefined(tag) || !isDefined(tag.size) && !isDefined(tag.name) && !isDefined(tag.family) && !isDefined(tag.scheme) && (!isDefined(tag.bold) || !tag.bold) && (!isDefined(tag.italic) || !tag.italic) && !isDefined(tag.underline) && excel_color_helper_default.isEmpty(tag.color);
      },
      toXml: function(tag) {
        var content = [isDefined(tag.bold) && tag.bold ? excel_tag_helper_default.toXml("b", {}) : "", isDefined(tag.size) ? excel_tag_helper_default.toXml("sz", {
          val: tag.size
        }) : "", isDefined(tag.color) ? excel_color_helper_default.toXml("color", tag.color) : "", isDefined(tag.name) ? excel_tag_helper_default.toXml("name", {
          val: tag.name
        }) : "", isDefined(tag.family) ? excel_tag_helper_default.toXml("family", {
          val: tag.family
        }) : "", isDefined(tag.scheme) ? excel_tag_helper_default.toXml("scheme", {
          val: tag.scheme
        }) : "", isDefined(tag.italic) && tag.italic ? excel_tag_helper_default.toXml("i", {}) : "", isDefined(tag.underline) ? excel_tag_helper_default.toXml("u", {
          val: tag.underline
        }) : ""].join("");
        return excel_tag_helper_default.toXml("font", {}, content);
      }
    };
    excel_font_helper_default = fontHelper;
  }
});

// node_modules/devextreme/esm/exporter/excel/excel.cell_format_helper.js
var cellFormatHelper, excel_cell_format_helper_default;
var init_excel_cell_format_helper = __esm({
  "node_modules/devextreme/esm/exporter/excel/excel.cell_format_helper.js"() {
    init_type();
    init_excel_tag_helper();
    init_excel_cell_alignment_helper();
    init_excel_fill_helper();
    init_excel_font_helper();
    cellFormatHelper = {
      tryCreateTag: function(sourceObj, sharedItemsContainer) {
        var result = null;
        if (isDefined(sourceObj)) {
          var numberFormatId;
          if ("number" === typeof sourceObj.numberFormat) {
            numberFormatId = sourceObj.numberFormat;
          } else {
            numberFormatId = sharedItemsContainer.registerNumberFormat(sourceObj.numberFormat);
          }
          var fill = sourceObj.fill;
          if (!isDefined(fill)) {
            fill = excel_fill_helper_default.tryCreateFillFromSimpleFormat(sourceObj);
          }
          result = {
            numberFormatId,
            alignment: excel_cell_alignment_helper_default.tryCreateTag(sourceObj.alignment),
            fontId: sharedItemsContainer.registerFont(sourceObj.font),
            fillId: sharedItemsContainer.registerFill(fill)
          };
          if (cellFormatHelper.isEmpty(result)) {
            result = null;
          }
        }
        return result;
      },
      copy: function(source) {
        var result;
        if (null === source) {
          result = null;
        } else if (isDefined(source)) {
          result = {};
          if (void 0 !== source.numberFormat) {
            result.numberFormat = source.numberFormat;
          }
          if (void 0 !== source.fill) {
            result.fill = excel_fill_helper_default.copy(source.fill);
          } else {
            excel_fill_helper_default.copySimpleFormat(source, result);
          }
          if (void 0 !== source.alignment) {
            result.alignment = excel_cell_alignment_helper_default.copy(source.alignment);
          }
          if (void 0 !== source.font) {
            result.font = excel_font_helper_default.copy(source.font);
          }
        }
        return result;
      },
      areEqual: function(leftTag, rightTag) {
        return cellFormatHelper.isEmpty(leftTag) && cellFormatHelper.isEmpty(rightTag) || isDefined(leftTag) && isDefined(rightTag) && leftTag.fontId === rightTag.fontId && leftTag.numberFormatId === rightTag.numberFormatId && leftTag.fillId === rightTag.fillId && excel_cell_alignment_helper_default.areEqual(leftTag.alignment, rightTag.alignment);
      },
      isEmpty: function(tag) {
        return !isDefined(tag) || !isDefined(tag.fontId) && !isDefined(tag.numberFormatId) && !isDefined(tag.fillId) && excel_cell_alignment_helper_default.isEmpty(tag.alignment);
      },
      toXml: function(tag) {
        var isAlignmentEmpty = excel_cell_alignment_helper_default.isEmpty(tag.alignment);
        var applyNumberFormat;
        if (isDefined(tag.numberFormatId)) {
          applyNumberFormat = tag.numberFormatId > 0 ? 1 : 0;
        }
        return excel_tag_helper_default.toXml("xf", {
          xfId: 0,
          applyAlignment: isAlignmentEmpty ? null : 1,
          fontId: tag.fontId,
          applyNumberFormat,
          fillId: tag.fillId,
          numFmtId: tag.numberFormatId
        }, isAlignmentEmpty ? null : excel_cell_alignment_helper_default.toXml(tag.alignment));
      }
    };
    excel_cell_format_helper_default = cellFormatHelper;
  }
});

// node_modules/devextreme/esm/exporter/excel/excel.number_format_helper.js
var numberFormatHelper, excel_number_format_helper_default;
var init_excel_number_format_helper = __esm({
  "node_modules/devextreme/esm/exporter/excel/excel.number_format_helper.js"() {
    init_type();
    init_excel_tag_helper();
    numberFormatHelper = {
      ID_PROPERTY_NAME: "id",
      tryCreateTag: function(sourceObj) {
        var result = null;
        if ("string" === typeof sourceObj) {
          result = {
            formatCode: sourceObj
          };
          if (numberFormatHelper.isEmpty(result)) {
            result = null;
          }
        }
        return result;
      },
      areEqual: function(leftTag, rightTag) {
        return numberFormatHelper.isEmpty(leftTag) && numberFormatHelper.isEmpty(rightTag) || isDefined(leftTag) && isDefined(rightTag) && leftTag.formatCode === rightTag.formatCode;
      },
      isEmpty: function(tag) {
        return !isDefined(tag) || !isDefined(tag.formatCode) || "" === tag.formatCode;
      },
      toXml: function(tag) {
        return excel_tag_helper_default.toXml("numFmt", {
          numFmtId: tag[numberFormatHelper.ID_PROPERTY_NAME],
          formatCode: tag.formatCode
        });
      }
    };
    excel_number_format_helper_default = numberFormatHelper;
  }
});

// node_modules/devextreme/esm/exporter/excel/excel.file.js
var ExcelFile;
var init_excel_file = __esm({
  "node_modules/devextreme/esm/exporter/excel/excel.file.js"() {
    init_type();
    init_excel_tag_helper();
    init_excel_cell_format_helper();
    init_excel_fill_helper();
    init_excel_font_helper();
    init_excel_number_format_helper();
    ExcelFile = class {
      constructor() {
        this._cellFormatTags = [];
        this._fillTags = [];
        this._fontTags = [];
        this._numberFormatTags = [];
        this._fillTags.push(excel_fill_helper_default.tryCreateTag({
          patternFill: {
            patternType: "none"
          }
        }));
      }
      registerCellFormat(cellFormat) {
        var result;
        var cellFormatTag = excel_cell_format_helper_default.tryCreateTag(cellFormat, {
          registerFill: this.registerFill.bind(this),
          registerFont: this.registerFont.bind(this),
          registerNumberFormat: this.registerNumberFormat.bind(this)
        });
        if (isDefined(cellFormatTag)) {
          for (var i = 0; i < this._cellFormatTags.length; i++) {
            if (excel_cell_format_helper_default.areEqual(this._cellFormatTags[i], cellFormatTag)) {
              result = i;
              break;
            }
          }
          if (void 0 === result) {
            result = this._cellFormatTags.push(cellFormatTag) - 1;
          }
        }
        return result;
      }
      static copyCellFormat(source) {
        return excel_cell_format_helper_default.copy(source);
      }
      generateCellFormatsXml() {
        var cellFormatTagsAsXmlStringsArray = this._cellFormatTags.map((tag) => excel_cell_format_helper_default.toXml(tag));
        return excel_tag_helper_default.toXml("cellXfs", {
          count: cellFormatTagsAsXmlStringsArray.length
        }, cellFormatTagsAsXmlStringsArray.join(""));
      }
      registerFill(fill) {
        var result;
        var fillTag = excel_fill_helper_default.tryCreateTag(fill);
        if (isDefined(fillTag)) {
          for (var i = 0; i < this._fillTags.length; i++) {
            if (excel_fill_helper_default.areEqual(this._fillTags[i], fillTag)) {
              result = i;
              break;
            }
          }
          if (void 0 === result) {
            if (this._fillTags.length < 2) {
              this._fillTags.push(excel_fill_helper_default.tryCreateTag({
                patternFill: {
                  patternType: "Gray125"
                }
              }));
            }
            result = this._fillTags.push(fillTag) - 1;
          }
        }
        return result;
      }
      generateFillsXml() {
        var tagsAsXmlStringsArray = this._fillTags.map((tag) => excel_fill_helper_default.toXml(tag));
        return excel_tag_helper_default.toXml("fills", {
          count: tagsAsXmlStringsArray.length
        }, tagsAsXmlStringsArray.join(""));
      }
      registerFont(font) {
        var result;
        var fontTag = excel_font_helper_default.tryCreateTag(font);
        if (isDefined(fontTag)) {
          for (var i = 0; i < this._fontTags.length; i++) {
            if (excel_font_helper_default.areEqual(this._fontTags[i], fontTag)) {
              result = i;
              break;
            }
          }
          if (void 0 === result) {
            result = this._fontTags.push(fontTag) - 1;
          }
        }
        return result;
      }
      generateFontsXml() {
        var xmlStringsArray = this._fontTags.map((tag) => excel_font_helper_default.toXml(tag));
        return excel_tag_helper_default.toXml("fonts", {
          count: xmlStringsArray.length
        }, xmlStringsArray.join(""));
      }
      _convertNumberFormatIndexToId(index) {
        return 165 + index;
      }
      registerNumberFormat(numberFormat) {
        var result;
        var tag = excel_number_format_helper_default.tryCreateTag(numberFormat);
        if (isDefined(tag)) {
          for (var i = 0; i < this._numberFormatTags.length; i++) {
            if (excel_number_format_helper_default.areEqual(this._numberFormatTags[i], tag)) {
              result = this._numberFormatTags[i][excel_number_format_helper_default.ID_PROPERTY_NAME];
              break;
            }
          }
          if (void 0 === result) {
            tag[excel_number_format_helper_default.ID_PROPERTY_NAME] = this._convertNumberFormatIndexToId(this._numberFormatTags.length);
            result = tag[excel_number_format_helper_default.ID_PROPERTY_NAME];
            this._numberFormatTags.push(tag);
          }
        }
        return result;
      }
      generateNumberFormatsXml() {
        if (this._numberFormatTags.length > 0) {
          var xmlStringsArray = this._numberFormatTags.map((tag) => excel_number_format_helper_default.toXml(tag));
          return excel_tag_helper_default.toXml("numFmts", {
            count: xmlStringsArray.length
          }, xmlStringsArray.join(""));
        } else {
          return "";
        }
      }
    };
  }
});

// node_modules/devextreme/esm/exporter/excel_creator.js
function getData(data, options) {
  var excelCreator = new ExcelCreator(data, options);
  excelCreator._checkZipState();
  return excelCreator.ready().then(() => excelCreator.getData(isFunction(getWindow().Blob)));
}
var import_jszip, XML_TAG, GROUP_SHEET_PR_XML, SINGLE_SHEET_PR_XML, BASE_STYLE_XML2, OPEN_XML_FORMAT_URL, RELATIONSHIP_PART_NAME, XL_FOLDER_NAME, WORKBOOK_FILE_NAME, CONTENTTYPES_FILE_NAME, SHAREDSTRING_FILE_NAME, STYLE_FILE_NAME, WORKSHEETS_FOLDER, WORKSHEET_FILE_NAME, WORKSHEET_HEADER_XML, VALID_TYPES, EXCEL_START_TIME, DAYS_COUNT_BEFORE_29_FEB_1900, MAX_DIGIT_WIDTH_IN_PIXELS, UNSUPPORTED_FORMAT_MAPPING, ExcelCreator;
var init_excel_creator = __esm({
  "node_modules/devextreme/esm/exporter/excel_creator.js"() {
    init_class();
    init_window();
    init_type();
    init_extend();
    init_ui_errors();
    init_string();
    import_jszip = __toESM(require_jszip_min());
    init_file_saver();
    init_excel_format_converter();
    init_excel_file();
    init_deferred();
    XML_TAG = '<?xml version="1.0" encoding="utf-8"?>';
    GROUP_SHEET_PR_XML = '<sheetPr><outlinePr summaryBelow="0"/></sheetPr>';
    SINGLE_SHEET_PR_XML = "<sheetPr/>";
    BASE_STYLE_XML2 = '<borders count="1"><border><left style="thin"><color rgb="FFD3D3D3"/></left><right style="thin"><color rgb="FFD3D3D3"/></right><top style="thin"><color rgb="FFD3D3D3"/></top><bottom style="thin"><color rgb="FFD3D3D3"/></bottom></border></borders><cellStyleXfs count="1"><xf numFmtId="0" fontId="0" fillId="0" borderId="0"/></cellStyleXfs>';
    OPEN_XML_FORMAT_URL = "http://schemas.openxmlformats.org";
    RELATIONSHIP_PART_NAME = "rels";
    XL_FOLDER_NAME = "xl";
    WORKBOOK_FILE_NAME = "workbook.xml";
    CONTENTTYPES_FILE_NAME = "[Content_Types].xml";
    SHAREDSTRING_FILE_NAME = "sharedStrings.xml";
    STYLE_FILE_NAME = "styles.xml";
    WORKSHEETS_FOLDER = "worksheets";
    WORKSHEET_FILE_NAME = "sheet1.xml";
    WORKSHEET_HEADER_XML = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><worksheet xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="x14ac" xmlns:x14ac="http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac">';
    VALID_TYPES = {
      boolean: "b",
      date: "d",
      number: "n",
      string: "s"
    };
    EXCEL_START_TIME = Date.UTC(1899, 11, 30);
    DAYS_COUNT_BEFORE_29_FEB_1900 = 60;
    MAX_DIGIT_WIDTH_IN_PIXELS = 7;
    UNSUPPORTED_FORMAT_MAPPING = {
      quarter: "shortDate",
      quarterAndYear: "shortDate",
      minute: "longTime",
      millisecond: "longTime"
    };
    ExcelCreator = class_default.inherit({
      _getXMLTag: function(tagName, attributes, content) {
        var result = "<" + tagName;
        var i;
        var length = attributes.length;
        var attr;
        for (i = 0; i < length; i++) {
          attr = attributes[i];
          if (void 0 !== attr.value) {
            result = result + " " + attr.name + '="' + attr.value + '"';
          }
        }
        return isDefined(content) ? result + ">" + content + "</" + tagName + ">" : result + " />";
      },
      _convertToExcelCellRef: function(zeroBasedRowIndex, zeroBasedCellIndex) {
        var columnName = "";
        var charCode;
        var isCellIndexFound;
        while (!isCellIndexFound) {
          charCode = 65 + (zeroBasedCellIndex >= 26 ? zeroBasedCellIndex % 26 : Math.ceil(zeroBasedCellIndex));
          columnName = String.fromCharCode(charCode) + columnName;
          if (zeroBasedCellIndex >= 26) {
            zeroBasedCellIndex = Math.floor(zeroBasedCellIndex / 26) - 1;
          } else {
            isCellIndexFound = true;
          }
        }
        return columnName + (zeroBasedRowIndex + 1);
      },
      _convertToExcelCellRefAndTrackMaxIndex: function(rowIndex, cellIndex) {
        if (this._maxRowIndex < Number(rowIndex)) {
          this._maxRowIndex = Number(rowIndex);
        }
        if (this._maxColumnIndex < Number(cellIndex)) {
          this._maxColumnIndex = Number(cellIndex);
        }
        return this._convertToExcelCellRef(rowIndex, cellIndex);
      },
      _getDataType: function(dataType) {
        return VALID_TYPES[dataType] || VALID_TYPES.string;
      },
      _tryGetExcelCellDataType: function(object) {
        if (isDefined(object)) {
          if ("number" === typeof object) {
            if (isFinite(object)) {
              return VALID_TYPES.number;
            } else {
              return VALID_TYPES.string;
            }
          } else if (isString(object)) {
            return VALID_TYPES.string;
          } else if (isDate(object)) {
            return VALID_TYPES.number;
          } else if (isBoolean(object)) {
            return VALID_TYPES.boolean;
          }
        }
      },
      _formatObjectConverter: function(format2, dataType) {
        var result = {
          format: format2,
          precision: format2 && format2.precision,
          dataType
        };
        if (isObject(format2)) {
          return extend(result, format2, {
            format: format2.formatter || format2.type,
            currency: format2.currency
          });
        }
        return result;
      },
      _tryConvertToExcelNumberFormat: function(format2, dataType) {
        var newFormat = this._formatObjectConverter(format2, dataType);
        format2 = newFormat.format;
        var currency = newFormat.currency;
        dataType = newFormat.dataType;
        if (isDefined(format2) && "date" === dataType) {
          format2 = UNSUPPORTED_FORMAT_MAPPING[format2 && format2.type || format2] || format2;
        }
        return excel_format_converter_default.convertFormat(format2, newFormat.precision, dataType, currency);
      },
      _appendString: function(value) {
        if (isDefined(value)) {
          value = String(value);
          if (value.length) {
            value = encodeHtml(value);
            if (void 0 === this._stringHash[value]) {
              this._stringHash[value] = this._stringArray.length;
              this._stringArray.push(value);
            }
            return this._stringHash[value];
          }
        }
      },
      _tryGetExcelDateValue: function(date) {
        var days;
        var totalTime;
        if (isDate(date)) {
          days = Math.floor((Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - EXCEL_START_TIME) / 864e5);
          if (days < DAYS_COUNT_BEFORE_29_FEB_1900) {
            days--;
          }
          totalTime = (3600 * date.getHours() + 60 * date.getMinutes() + date.getSeconds()) / 86400;
          return days + totalTime;
        }
      },
      _prepareValue: function(rowIndex, cellIndex) {
        var dataProvider = this._dataProvider;
        var {
          cellSourceData
        } = dataProvider.getCellData(rowIndex, cellIndex) || {};
        var {
          value
        } = dataProvider.getCellData(rowIndex, cellIndex) || {};
        var sourceValue;
        var type = this._getDataType(dataProvider.getCellType(rowIndex, cellIndex));
        if (type === VALID_TYPES.date && !isDate(value)) {
          type = VALID_TYPES.string;
        }
        switch (type) {
          case VALID_TYPES.string:
            sourceValue = value;
            value = this._appendString(value);
            break;
          case VALID_TYPES.date:
            sourceValue = value;
            value = this._tryGetExcelDateValue(value);
            type = VALID_TYPES.number;
        }
        return {
          value,
          type,
          sourceValue,
          cellSourceData
        };
      },
      _callCustomizeExcelCell: function(_ref) {
        var {
          dataProvider,
          value,
          style,
          sourceData
        } = _ref;
        var styleCopy = ExcelFile.copyCellFormat(style);
        var args = {
          value,
          numberFormat: styleCopy.numberFormat,
          clearStyle: function() {
            this.horizontalAlignment = null;
            this.verticalAlignment = null;
            this.wrapTextEnabled = null;
            this.font = null;
            this.numberFormat = null;
          }
        };
        if (isDefined(styleCopy)) {
          if (isDefined(styleCopy.alignment)) {
            args.horizontalAlignment = styleCopy.alignment.horizontal;
            args.verticalAlignment = styleCopy.alignment.vertical;
            args.wrapTextEnabled = styleCopy.alignment.wrapText;
          }
          args.backgroundColor = styleCopy.backgroundColor;
          args.fillPatternType = styleCopy.fillPatternType;
          args.fillPatternColor = styleCopy.fillPatternColor;
          args.font = styleCopy.font;
        }
        dataProvider.customizeExcelCell(args, sourceData);
        var newStyle = styleCopy || {};
        newStyle.font = args.font;
        newStyle.alignment = newStyle.alignment || {};
        newStyle.alignment.horizontal = args.horizontalAlignment;
        newStyle.alignment.vertical = args.verticalAlignment;
        newStyle.alignment.wrapText = args.wrapTextEnabled;
        newStyle.backgroundColor = args.backgroundColor;
        newStyle.fillPatternType = args.fillPatternType;
        newStyle.fillPatternColor = args.fillPatternColor;
        newStyle.numberFormat = args.numberFormat;
        return {
          value: args.value,
          style: newStyle
        };
      },
      _getDataArray: function() {
        var rowIndex;
        var cellIndex;
        var cellsArray;
        var cellData;
        var result = [];
        var dataProvider = this._dataProvider;
        var rowsLength = dataProvider.getRowsCount();
        var columns = dataProvider.getColumns();
        var cellsLength;
        for (rowIndex = 0; rowIndex < rowsLength; rowIndex++) {
          cellsArray = [];
          cellsLength = columns.length;
          for (cellIndex = 0; cellIndex !== cellsLength; cellIndex++) {
            cellData = this._prepareValue(rowIndex, cellIndex);
            var styleArrayIndex = dataProvider.getStyleId(rowIndex, cellIndex);
            var cellStyleId = this._styleArrayIndexToCellStyleIdMap[styleArrayIndex];
            if (dataProvider.hasCustomizeExcelCell && dataProvider.hasCustomizeExcelCell()) {
              var value = cellData.sourceValue || cellData.value;
              var modifiedExcelCell = this._callCustomizeExcelCell({
                dataProvider,
                value,
                style: this._styleArray[styleArrayIndex],
                sourceData: cellData.cellSourceData
              });
              if (modifiedExcelCell.value !== value) {
                if (typeof modifiedExcelCell.value !== typeof value || "number" === typeof modifiedExcelCell.value && !isFinite(modifiedExcelCell.value)) {
                  var cellDataType = this._tryGetExcelCellDataType(modifiedExcelCell.value);
                  if (isDefined(cellDataType)) {
                    cellData.type = cellDataType;
                  }
                }
                switch (cellData.type) {
                  case VALID_TYPES.string:
                    cellData.value = this._appendString(modifiedExcelCell.value);
                    break;
                  case VALID_TYPES.date:
                    cellData.value = modifiedExcelCell.value;
                    break;
                  case VALID_TYPES.number:
                    var newValue = modifiedExcelCell.value;
                    var excelDateValue = this._tryGetExcelDateValue(newValue);
                    if (isDefined(excelDateValue)) {
                      newValue = excelDateValue;
                    }
                    cellData.value = newValue;
                    break;
                  default:
                    cellData.value = modifiedExcelCell.value;
                }
              }
              cellStyleId = this._excelFile.registerCellFormat(modifiedExcelCell.style);
            }
            cellsArray.push({
              style: cellStyleId,
              value: cellData.value,
              type: cellData.type
            });
          }
          if (!this._needSheetPr && dataProvider.getGroupLevel(rowIndex) > 0) {
            this._needSheetPr = true;
          }
          result.push(cellsArray);
        }
        return result;
      },
      _calculateWidth: function(pixelsWidth) {
        pixelsWidth = parseInt(pixelsWidth, 10);
        if (!pixelsWidth || pixelsWidth < 5) {
          pixelsWidth = 100;
        }
        return Math.min(255, Math.floor((pixelsWidth - 5) / MAX_DIGIT_WIDTH_IN_PIXELS * 100 + 0.5) / 100);
      },
      _prepareStyleData: function() {
        var that = this;
        var styles = that._dataProvider.getStyles();
        that._dataProvider.getColumns().forEach(function(column) {
          that._colsArray.push(that._calculateWidth(column.width));
        });
        var fonts = [{
          size: 11,
          color: {
            theme: 1
          },
          name: "Calibri",
          family: 2,
          scheme: "minor",
          bold: false
        }, {
          size: 11,
          color: {
            theme: 1
          },
          name: "Calibri",
          family: 2,
          scheme: "minor",
          bold: true
        }];
        this._excelFile.registerFont(fonts[0]);
        this._excelFile.registerFont(fonts[1]);
        styles.forEach(function(style) {
          var numberFormat = that._tryConvertToExcelNumberFormat(style.format, style.dataType);
          if (!isDefined(numberFormat)) {
            numberFormat = 0;
          }
          that._styleArray.push({
            font: fonts[Number(!!style.bold)],
            numberFormat,
            alignment: {
              vertical: "top",
              wrapText: !!style.wrapText,
              horizontal: style.alignment || "left"
            }
          });
        });
        that._styleArrayIndexToCellStyleIdMap = that._styleArray.map((item) => this._excelFile.registerCellFormat(item));
      },
      _prepareCellData: function() {
        this._cellsArray = this._getDataArray();
      },
      _createXMLRelationships: function(xmlRelationships) {
        return this._getXMLTag("Relationships", [{
          name: "xmlns",
          value: OPEN_XML_FORMAT_URL + "/package/2006/relationships"
        }], xmlRelationships);
      },
      _createXMLRelationship: function(id, type, target) {
        return this._getXMLTag("Relationship", [{
          name: "Id",
          value: "rId" + id
        }, {
          name: "Type",
          value: OPEN_XML_FORMAT_URL + "/officeDocument/2006/relationships/" + type
        }, {
          name: "Target",
          value: target
        }]);
      },
      _getWorkbookContent: function() {
        return XML_TAG + this._getXMLTag("workbook", [{
          name: "xmlns:r",
          value: OPEN_XML_FORMAT_URL + "/officeDocument/2006/relationships"
        }, {
          name: "xmlns",
          value: OPEN_XML_FORMAT_URL + "/spreadsheetml/2006/main"
        }], '<bookViews><workbookView xWindow="0" yWindow="0" windowWidth="0" windowHeight="0"/></bookViews><sheets><sheet name="Sheet" sheetId="1" r:id="rId1" /></sheets><definedNames><definedName name="_xlnm.Print_Titles" localSheetId="0">Sheet!$1:$1</definedName><definedName name="_xlnm._FilterDatabase" hidden="0" localSheetId="0">Sheet!$A$1:$F$6332</definedName></definedNames>');
      },
      _getContentTypesContent: function() {
        return XML_TAG + '<Types xmlns="' + OPEN_XML_FORMAT_URL + '/package/2006/content-types"><Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml" /><Default Extension="xml" ContentType="application/xml" /><Override PartName="/xl/worksheets/sheet1.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml" /><Override PartName="/xl/styles.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml" /><Override PartName="/xl/sharedStrings.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml" /><Override PartName="/xl/workbook.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml" /></Types>';
      },
      _generateStylesXML: function() {
        var folder = this._zip.folder(XL_FOLDER_NAME);
        var XML = "";
        XML += this._excelFile.generateNumberFormatsXml();
        XML += this._excelFile.generateFontsXml();
        XML += this._excelFile.generateFillsXml();
        XML += BASE_STYLE_XML2;
        XML += this._excelFile.generateCellFormatsXml();
        XML += this._getXMLTag("cellStyles", [{
          name: "count",
          value: 1
        }], this._getXMLTag("cellStyle", [{
          name: "name",
          value: "Normal"
        }, {
          name: "xfId",
          value: 0
        }, {
          name: "builtinId",
          value: 0
        }]));
        XML = XML_TAG + this._getXMLTag("styleSheet", [{
          name: "xmlns",
          value: OPEN_XML_FORMAT_URL + "/spreadsheetml/2006/main"
        }], XML);
        folder.file(STYLE_FILE_NAME, XML);
        this._styleArray = [];
      },
      _generateStringsXML: function() {
        var folder = this._zip.folder(XL_FOLDER_NAME);
        var stringIndex;
        var stringsLength = this._stringArray.length;
        var sharedStringXml = XML_TAG;
        for (stringIndex = 0; stringIndex < stringsLength; stringIndex++) {
          this._stringArray[stringIndex] = this._getXMLTag("si", [], this._getXMLTag("t", [], this._stringArray[stringIndex]));
        }
        sharedStringXml += this._getXMLTag("sst", [{
          name: "xmlns",
          value: OPEN_XML_FORMAT_URL + "/spreadsheetml/2006/main"
        }, {
          name: "count",
          value: this._stringArray.length
        }, {
          name: "uniqueCount",
          value: this._stringArray.length
        }], this._stringArray.join(""));
        folder.file(SHAREDSTRING_FILE_NAME, sharedStringXml);
        this._stringArray = [];
      },
      _getPaneXML: function() {
        var attributes = [{
          name: "activePane",
          value: "bottomLeft"
        }, {
          name: "state",
          value: "frozen"
        }];
        var frozenArea = this._dataProvider.getFrozenArea();
        if (!(frozenArea.x || frozenArea.y)) {
          return "";
        }
        if (frozenArea.x) {
          attributes.push({
            name: "xSplit",
            value: frozenArea.x
          });
        }
        if (frozenArea.y) {
          attributes.push({
            name: "ySplit",
            value: frozenArea.y
          });
        }
        attributes.push({
          name: "topLeftCell",
          value: this._convertToExcelCellRefAndTrackMaxIndex(frozenArea.y, frozenArea.x)
        });
        return this._getXMLTag("pane", attributes);
      },
      _getAutoFilterXML: function(maxCellIndex) {
        if (this._options.autoFilterEnabled) {
          return '<autoFilter ref="A' + this._dataProvider.getHeaderRowCount() + ":" + maxCellIndex + '" />';
        }
        return "";
      },
      _getIgnoredErrorsXML: function(maxCellIndex) {
        if (this._options.ignoreErrors) {
          return '<ignoredErrors><ignoredError sqref="A1:' + maxCellIndex + '" numberStoredAsText="1" /></ignoredErrors>';
        }
        return "";
      },
      _generateWorksheetXML: function() {
        var colIndex;
        var rowIndex;
        var cellData;
        var xmlCells;
        var xmlRows = [];
        var rowsLength = this._cellsArray.length;
        var cellsLength;
        var colsLength = this._colsArray.length;
        var rSpans = "1:" + colsLength;
        var headerRowCount = this._dataProvider.getHeaderRowCount ? this._dataProvider.getHeaderRowCount() : 1;
        var xmlResult = [WORKSHEET_HEADER_XML];
        xmlResult.push(this._needSheetPr ? GROUP_SHEET_PR_XML : SINGLE_SHEET_PR_XML);
        xmlResult.push('<dimension ref="A1:C1"/>');
        xmlResult.push("<sheetViews><sheetView ");
        xmlResult.push(this._rtlEnabled ? 'rightToLeft="1" ' : "");
        xmlResult.push('tabSelected="1" workbookViewId="0">');
        xmlResult.push(this._getPaneXML());
        xmlResult.push("</sheetView></sheetViews>");
        xmlResult.push('<sheetFormatPr defaultRowHeight="15"');
        xmlResult.push(' outlineLevelRow="' + (this._dataProvider.getRowsCount() > 0 ? this._dataProvider.getGroupLevel(0) : 0) + '"');
        xmlResult.push(' x14ac:dyDescent="0.25"/>');
        for (colIndex = 0; colIndex < colsLength; colIndex++) {
          this._colsArray[colIndex] = this._getXMLTag("col", [{
            name: "width",
            value: this._colsArray[colIndex]
          }, {
            name: "min",
            value: Number(colIndex) + 1
          }, {
            name: "max",
            value: Number(colIndex) + 1
          }, {
            name: "customWidth",
            value: 1
          }]);
        }
        xmlResult.push(this._getXMLTag("cols", [], this._colsArray.join("")) + "<sheetData>");
        for (rowIndex = 0; rowIndex < rowsLength; rowIndex++) {
          xmlCells = [];
          cellsLength = this._cellsArray[rowIndex].length;
          for (colIndex = 0; colIndex < cellsLength; colIndex++) {
            rowIndex = Number(rowIndex);
            cellData = this._cellsArray[rowIndex][colIndex];
            xmlCells.push(this._getXMLTag("c", [{
              name: "r",
              value: this._convertToExcelCellRefAndTrackMaxIndex(rowIndex, colIndex)
            }, {
              name: "s",
              value: cellData.style
            }, {
              name: "t",
              value: cellData.type
            }], isDefined(cellData.value) ? this._getXMLTag("v", [], cellData.value) : null));
          }
          xmlRows.push(this._getXMLTag("row", [{
            name: "r",
            value: Number(rowIndex) + 1
          }, {
            name: "spans",
            value: rSpans
          }, {
            name: "outlineLevel",
            value: rowIndex >= headerRowCount ? this._dataProvider.getGroupLevel(rowIndex) : 0
          }, {
            name: "x14ac:dyDescent",
            value: "0.25"
          }], xmlCells.join("")));
          this._cellsArray[rowIndex] = null;
          if (xmlRows.length > 1e4) {
            xmlResult.push(xmlRows.join(""));
            xmlRows = [];
          }
        }
        xmlResult.push(xmlRows.join(""));
        xmlRows = [];
        var rightBottomCellRef = this._convertToExcelCellRef(this._maxRowIndex, this._maxColumnIndex);
        xmlResult.push("</sheetData>" + this._getAutoFilterXML(rightBottomCellRef) + this._generateMergingXML() + this._getIgnoredErrorsXML(rightBottomCellRef) + "</worksheet>");
        this._zip.folder(XL_FOLDER_NAME).folder(WORKSHEETS_FOLDER).file(WORKSHEET_FILE_NAME, xmlResult.join(""));
        this._colsArray = [];
        this._cellsArray = [];
        xmlResult = [];
      },
      _generateMergingXML: function() {
        var k;
        var l;
        var cellIndex;
        var rowIndex;
        var rowsLength = isDefined(this._dataProvider.getHeaderRowCount) ? this._dataProvider.getHeaderRowCount() : this._dataProvider.getRowsCount();
        var columnsLength = this._dataProvider.getColumns().length;
        var usedArea = [];
        var mergeArray = [];
        var mergeIndex;
        var mergeXML = "";
        for (rowIndex = 0; rowIndex < rowsLength; rowIndex++) {
          for (cellIndex = 0; cellIndex !== columnsLength; cellIndex++) {
            if (!isDefined(usedArea[rowIndex]) || !isDefined(usedArea[rowIndex][cellIndex])) {
              var cellMerge = this._dataProvider.getCellMerging(rowIndex, cellIndex);
              if (cellMerge.colspan || cellMerge.rowspan) {
                mergeArray.push({
                  start: this._convertToExcelCellRefAndTrackMaxIndex(rowIndex, cellIndex),
                  end: this._convertToExcelCellRefAndTrackMaxIndex(rowIndex + (cellMerge.rowspan || 0), cellIndex + (cellMerge.colspan || 0))
                });
                for (k = rowIndex; k <= rowIndex + cellMerge.rowspan || 0; k++) {
                  for (l = cellIndex; l <= cellIndex + cellMerge.colspan || 0; l++) {
                    if (!isDefined(usedArea[k])) {
                      usedArea[k] = [];
                    }
                    usedArea[k][l] = true;
                  }
                }
              }
            }
          }
        }
        var mergeArrayLength = mergeArray.length;
        for (mergeIndex = 0; mergeIndex < mergeArrayLength; mergeIndex++) {
          mergeXML += this._getXMLTag("mergeCell", [{
            name: "ref",
            value: mergeArray[mergeIndex].start + ":" + mergeArray[mergeIndex].end
          }]);
        }
        return mergeXML.length ? this._getXMLTag("mergeCells", [{
          name: "count",
          value: mergeArrayLength
        }], mergeXML) : "";
      },
      _generateCommonXML: function() {
        var relsFileContent = XML_TAG + this._createXMLRelationships(this._createXMLRelationship(1, "officeDocument", "xl/" + WORKBOOK_FILE_NAME));
        var folder = this._zip.folder(XL_FOLDER_NAME);
        var relsXML = XML_TAG;
        this._zip.folder("_" + RELATIONSHIP_PART_NAME).file("." + RELATIONSHIP_PART_NAME, relsFileContent);
        var xmlRelationships = this._createXMLRelationship(1, "worksheet", "worksheets/" + WORKSHEET_FILE_NAME) + this._createXMLRelationship(2, "styles", STYLE_FILE_NAME) + this._createXMLRelationship(3, "sharedStrings", SHAREDSTRING_FILE_NAME);
        relsXML += this._createXMLRelationships(xmlRelationships);
        folder.folder("_" + RELATIONSHIP_PART_NAME).file(WORKBOOK_FILE_NAME + ".rels", relsXML);
        folder.file(WORKBOOK_FILE_NAME, this._getWorkbookContent());
        this._zip.file(CONTENTTYPES_FILE_NAME, this._getContentTypesContent());
      },
      _generateContent: function() {
        this._prepareStyleData();
        this._prepareCellData();
        this._generateWorkXML();
        this._generateCommonXML();
      },
      _generateWorkXML: function() {
        this._generateStylesXML();
        this._generateStringsXML();
        this._generateWorksheetXML();
      },
      ctor: function(dataProvider, options) {
        this._rtlEnabled = options && !!options.rtlEnabled;
        this._options = options;
        this._maxRowIndex = 0;
        this._maxColumnIndex = 0;
        this._stringArray = [];
        this._stringHash = {};
        this._styleArray = [];
        this._colsArray = [];
        this._cellsArray = [];
        this._needSheetPr = false;
        this._dataProvider = dataProvider;
        this._excelFile = new ExcelFile();
        if (isDefined(ExcelCreator.JSZip)) {
          this._zip = new ExcelCreator.JSZip();
        } else {
          this._zip = null;
        }
      },
      _checkZipState: function() {
        if (!this._zip) {
          throw ui_errors_default.Error("E1041", "JSZip");
        }
      },
      ready: function() {
        return this._dataProvider.ready();
      },
      getData: function(isBlob) {
        var options = {
          type: isBlob ? "blob" : "base64",
          compression: "DEFLATE",
          mimeType: MIME_TYPES.EXCEL
        };
        var deferred = new Deferred();
        this._checkZipState();
        this._generateContent();
        if (this._zip.generateAsync) {
          this._zip.generateAsync(options).then(deferred.resolve);
        } else {
          deferred.resolve(this._zip.generate(options));
        }
        return deferred;
      }
    });
    ExcelCreator.JSZip = import_jszip.default;
  }
});

// node_modules/devextreme/esm/color.js
function Color(value) {
  this.baseColor = value;
  var color;
  if (value) {
    color = String(value).toLowerCase().replace(/ /g, "");
    color = standardColorNames[color] ? "#" + standardColorNames[color] : color;
    color = parseColor(color);
  }
  if (!color) {
    this.colorIsInvalid = true;
  }
  color = color || {};
  this.r = normalize(color[0]);
  this.g = normalize(color[1]);
  this.b = normalize(color[2]);
  this.a = normalize(color[3], 1, 1);
  if (color[4]) {
    this.hsv = {
      h: color[4][0],
      s: color[4][1],
      v: color[4][2]
    };
  } else {
    this.hsv = toHsvFromRgb(this.r, this.g, this.b);
  }
  if (color[5]) {
    this.hsl = {
      h: color[5][0],
      s: color[5][1],
      l: color[5][2]
    };
  } else {
    this.hsl = toHslFromRgb(this.r, this.g, this.b);
  }
}
function parseColor(color) {
  if ("transparent" === color) {
    return [0, 0, 0, 0];
  }
  var i = 0;
  var ii = standardColorTypes.length;
  var str;
  for (; i < ii; ++i) {
    str = standardColorTypes[i].re.exec(color);
    if (str) {
      return standardColorTypes[i].process(str);
    }
  }
  return null;
}
function normalize(colorComponent, def, max) {
  def = def || 0;
  max = max || 255;
  return colorComponent < 0 || isNaN(colorComponent) ? def : colorComponent > max ? max : colorComponent;
}
function toHexFromRgb(r, g, b) {
  return "#" + (16777216 | r << 16 | g << 8 | b).toString(16).slice(1);
}
function toHsvFromRgb(r, g, b) {
  var max = Math.max(r, g, b);
  var min = Math.min(r, g, b);
  var delta = max - min;
  var H;
  var S;
  var V = max;
  S = 0 === max ? 0 : 1 - min / max;
  if (max === min) {
    H = 0;
  } else {
    switch (max) {
      case r:
        H = (g - b) / delta * 60;
        if (g < b) {
          H += 360;
        }
        break;
      case g:
        H = (b - r) / delta * 60 + 120;
        break;
      case b:
        H = (r - g) / delta * 60 + 240;
    }
  }
  S *= 100;
  V *= 100 / 255;
  return {
    h: Math.round(H),
    s: Math.round(S),
    v: Math.round(V)
  };
}
function hsvToRgb(h, s, v) {
  var index = Math.floor(h % 360 / 60);
  var vMin = (100 - s) * v / 100;
  var a = h % 60 / 60 * (v - vMin);
  var vInc = vMin + a;
  var vDec = v - a;
  var r;
  var g;
  var b;
  switch (index) {
    case 0:
      r = v;
      g = vInc;
      b = vMin;
      break;
    case 1:
      r = vDec;
      g = v;
      b = vMin;
      break;
    case 2:
      r = vMin;
      g = v;
      b = vInc;
      break;
    case 3:
      r = vMin;
      g = vDec;
      b = v;
      break;
    case 4:
      r = vInc;
      g = vMin;
      b = v;
      break;
    case 5:
      r = v;
      g = vMin;
      b = vDec;
  }
  return [Math.round(2.55 * r), Math.round(2.55 * g), Math.round(2.55 * b)];
}
function calculateHue(r, g, b, delta) {
  var max = Math.max(r, g, b);
  switch (max) {
    case r:
      return (g - b) / delta + (g < b ? 6 : 0);
    case g:
      return (b - r) / delta + 2;
    case b:
      return (r - g) / delta + 4;
  }
}
function toHslFromRgb(r, g, b) {
  r = convertTo01Bounds(r, 255);
  g = convertTo01Bounds(g, 255);
  b = convertTo01Bounds(b, 255);
  var max = Math.max(r, g, b);
  var min = Math.min(r, g, b);
  var maxMinSum = max + min;
  var h;
  var s;
  var l = maxMinSum / 2;
  if (max === min) {
    h = s = 0;
  } else {
    var delta = max - min;
    if (l > 0.5) {
      s = delta / (2 - maxMinSum);
    } else {
      s = delta / maxMinSum;
    }
    h = calculateHue(r, g, b, delta);
    h /= 6;
  }
  return {
    h: _round(360 * h),
    s: _round(100 * s),
    l: _round(100 * l)
  };
}
function makeColorTint(colorPart, h) {
  var colorTint = h;
  if ("r" === colorPart) {
    colorTint = h + 1 / 3;
  }
  if ("b" === colorPart) {
    colorTint = h - 1 / 3;
  }
  return colorTint;
}
function modifyColorTint(colorTint) {
  if (colorTint < 0) {
    colorTint += 1;
  }
  if (colorTint > 1) {
    colorTint -= 1;
  }
  return colorTint;
}
function hueToRgb(p, q, colorTint) {
  colorTint = modifyColorTint(colorTint);
  if (colorTint < 1 / 6) {
    return p + 6 * (q - p) * colorTint;
  }
  if (colorTint < 0.5) {
    return q;
  }
  if (colorTint < 2 / 3) {
    return p + (q - p) * (2 / 3 - colorTint) * 6;
  }
  return p;
}
function hslToRgb(h, s, l) {
  var r;
  var g;
  var b;
  h = convertTo01Bounds(h, 360);
  s = convertTo01Bounds(s, 100);
  l = convertTo01Bounds(l, 100);
  if (0 === s) {
    r = g = b = l;
  } else {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    r = hueToRgb(p, q, makeColorTint("r", h));
    g = hueToRgb(p, q, makeColorTint("g", h));
    b = hueToRgb(p, q, makeColorTint("b", h));
  }
  return [_round(255 * r), _round(255 * g), _round(255 * b)];
}
function convertTo01Bounds(n, max) {
  n = Math.min(max, Math.max(0, parseFloat(n)));
  if (Math.abs(n - max) < 1e-6) {
    return 1;
  }
  return n % max / parseFloat(max);
}
function isIntegerBetweenMinAndMax(number, min, max) {
  min = min || 0;
  max = max || 255;
  if (number % 1 !== 0 || number < min || number > max || "number" !== typeof number || isNaN(number)) {
    return false;
  }
  return true;
}
var standardColorNames, standardColorTypes, _round;
var init_color = __esm({
  "node_modules/devextreme/esm/color.js"() {
    standardColorNames = {
      aliceblue: "f0f8ff",
      antiquewhite: "faebd7",
      aqua: "00ffff",
      aquamarine: "7fffd4",
      azure: "f0ffff",
      beige: "f5f5dc",
      bisque: "ffe4c4",
      black: "000000",
      blanchedalmond: "ffebcd",
      blue: "0000ff",
      blueviolet: "8a2be2",
      brown: "a52a2a",
      burlywood: "deb887",
      cadetblue: "5f9ea0",
      chartreuse: "7fff00",
      chocolate: "d2691e",
      coral: "ff7f50",
      cornflowerblue: "6495ed",
      cornsilk: "fff8dc",
      crimson: "dc143c",
      cyan: "00ffff",
      darkblue: "00008b",
      darkcyan: "008b8b",
      darkgoldenrod: "b8860b",
      darkgray: "a9a9a9",
      darkgreen: "006400",
      darkgrey: "a9a9a9",
      darkkhaki: "bdb76b",
      darkmagenta: "8b008b",
      darkolivegreen: "556b2f",
      darkorange: "ff8c00",
      darkorchid: "9932cc",
      darkred: "8b0000",
      darksalmon: "e9967a",
      darkseagreen: "8fbc8f",
      darkslateblue: "483d8b",
      darkslategray: "2f4f4f",
      darkslategrey: "2f4f4f",
      darkturquoise: "00ced1",
      darkviolet: "9400d3",
      deeppink: "ff1493",
      deepskyblue: "00bfff",
      dimgray: "696969",
      dimgrey: "696969",
      dodgerblue: "1e90ff",
      feldspar: "d19275",
      firebrick: "b22222",
      floralwhite: "fffaf0",
      forestgreen: "228b22",
      fuchsia: "ff00ff",
      gainsboro: "dcdcdc",
      ghostwhite: "f8f8ff",
      gold: "ffd700",
      goldenrod: "daa520",
      gray: "808080",
      green: "008000",
      greenyellow: "adff2f",
      grey: "808080",
      honeydew: "f0fff0",
      hotpink: "ff69b4",
      indianred: "cd5c5c",
      indigo: "4b0082",
      ivory: "fffff0",
      khaki: "f0e68c",
      lavender: "e6e6fa",
      lavenderblush: "fff0f5",
      lawngreen: "7cfc00",
      lemonchiffon: "fffacd",
      lightblue: "add8e6",
      lightcoral: "f08080",
      lightcyan: "e0ffff",
      lightgoldenrodyellow: "fafad2",
      lightgray: "d3d3d3",
      lightgreen: "90ee90",
      lightgrey: "d3d3d3",
      lightpink: "ffb6c1",
      lightsalmon: "ffa07a",
      lightseagreen: "20b2aa",
      lightskyblue: "87cefa",
      lightslateblue: "8470ff",
      lightslategray: "778899",
      lightslategrey: "778899",
      lightsteelblue: "b0c4de",
      lightyellow: "ffffe0",
      lime: "00ff00",
      limegreen: "32cd32",
      linen: "faf0e6",
      magenta: "ff00ff",
      maroon: "800000",
      mediumaquamarine: "66cdaa",
      mediumblue: "0000cd",
      mediumorchid: "ba55d3",
      mediumpurple: "9370d8",
      mediumseagreen: "3cb371",
      mediumslateblue: "7b68ee",
      mediumspringgreen: "00fa9a",
      mediumturquoise: "48d1cc",
      mediumvioletred: "c71585",
      midnightblue: "191970",
      mintcream: "f5fffa",
      mistyrose: "ffe4e1",
      moccasin: "ffe4b5",
      navajowhite: "ffdead",
      navy: "000080",
      oldlace: "fdf5e6",
      olive: "808000",
      olivedrab: "6b8e23",
      orange: "ffa500",
      orangered: "ff4500",
      orchid: "da70d6",
      palegoldenrod: "eee8aa",
      palegreen: "98fb98",
      paleturquoise: "afeeee",
      palevioletred: "d87093",
      papayawhip: "ffefd5",
      peachpuff: "ffdab9",
      peru: "cd853f",
      pink: "ffc0cb",
      plum: "dda0dd",
      powderblue: "b0e0e6",
      purple: "800080",
      rebeccapurple: "663399",
      red: "ff0000",
      rosybrown: "bc8f8f",
      royalblue: "4169e1",
      saddlebrown: "8b4513",
      salmon: "fa8072",
      sandybrown: "f4a460",
      seagreen: "2e8b57",
      seashell: "fff5ee",
      sienna: "a0522d",
      silver: "c0c0c0",
      skyblue: "87ceeb",
      slateblue: "6a5acd",
      slategray: "708090",
      slategrey: "708090",
      snow: "fffafa",
      springgreen: "00ff7f",
      steelblue: "4682b4",
      tan: "d2b48c",
      teal: "008080",
      thistle: "d8bfd8",
      tomato: "ff6347",
      turquoise: "40e0d0",
      violet: "ee82ee",
      violetred: "d02090",
      wheat: "f5deb3",
      white: "ffffff",
      whitesmoke: "f5f5f5",
      yellow: "ffff00",
      yellowgreen: "9acd32"
    };
    standardColorTypes = [{
      re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
      process: function(colorString) {
        return [parseInt(colorString[1], 10), parseInt(colorString[2], 10), parseInt(colorString[3], 10)];
      }
    }, {
      re: /^rgba\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3}),\s*(\d*\.*\d+)\)$/,
      process: function(colorString) {
        return [parseInt(colorString[1], 10), parseInt(colorString[2], 10), parseInt(colorString[3], 10), parseFloat(colorString[4])];
      }
    }, {
      re: /^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/,
      process: function(colorString) {
        return [parseInt(colorString[1], 16), parseInt(colorString[2], 16), parseInt(colorString[3], 16)];
      }
    }, {
      re: /^#([a-f0-9]{1})([a-f0-9]{1})([a-f0-9]{1})$/,
      process: function(colorString) {
        return [parseInt(colorString[1] + colorString[1], 16), parseInt(colorString[2] + colorString[2], 16), parseInt(colorString[3] + colorString[3], 16)];
      }
    }, {
      re: /^hsv\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
      process: function(colorString) {
        var h = parseInt(colorString[1], 10);
        var s = parseInt(colorString[2], 10);
        var v = parseInt(colorString[3], 10);
        var rgb = hsvToRgb(h, s, v);
        return [rgb[0], rgb[1], rgb[2], 1, [h, s, v]];
      }
    }, {
      re: /^hsl\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
      process: function(colorString) {
        var h = parseInt(colorString[1], 10);
        var s = parseInt(colorString[2], 10);
        var l = parseInt(colorString[3], 10);
        var rgb = hslToRgb(h, s, l);
        return [rgb[0], rgb[1], rgb[2], 1, null, [h, s, l]];
      }
    }];
    _round = Math.round;
    Color.prototype = {
      constructor: Color,
      highlight: function(step) {
        step = step || 10;
        return this.alter(step).toHex();
      },
      darken: function(step) {
        step = step || 10;
        return this.alter(-step).toHex();
      },
      alter: function(step) {
        var result = new Color();
        result.r = normalize(this.r + step);
        result.g = normalize(this.g + step);
        result.b = normalize(this.b + step);
        return result;
      },
      blend: function(blendColor, opacity) {
        var other = blendColor instanceof Color ? blendColor : new Color(blendColor);
        var result = new Color();
        result.r = normalize(_round(this.r * (1 - opacity) + other.r * opacity));
        result.g = normalize(_round(this.g * (1 - opacity) + other.g * opacity));
        result.b = normalize(_round(this.b * (1 - opacity) + other.b * opacity));
        return result;
      },
      toHex: function() {
        return toHexFromRgb(this.r, this.g, this.b);
      },
      getPureColor: function() {
        var rgb = hsvToRgb(this.hsv.h, 100, 100);
        return new Color("rgb(" + rgb.join(",") + ")");
      },
      isValidHex: function(hex) {
        return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(hex);
      },
      isValidRGB: function(r, g, b) {
        if (!isIntegerBetweenMinAndMax(r) || !isIntegerBetweenMinAndMax(g) || !isIntegerBetweenMinAndMax(b)) {
          return false;
        }
        return true;
      },
      isValidAlpha: function(a) {
        if (isNaN(a) || a < 0 || a > 1 || "number" !== typeof a) {
          return false;
        }
        return true;
      },
      colorIsInvalid: false,
      fromHSL: function(hsl) {
        var color = new Color();
        var rgb = hslToRgb(hsl.h, hsl.s, hsl.l);
        color.r = rgb[0];
        color.g = rgb[1];
        color.b = rgb[2];
        return color;
      }
    };
  }
});

// node_modules/devextreme/esm/core/utils/svg.js
var window3;
var init_svg = __esm({
  "node_modules/devextreme/esm/core/utils/svg.js"() {
    init_dom_adapter();
    init_window();
    init_renderer();
    window3 = getWindow();
  }
});

// node_modules/devextreme/esm/exporter/image_creator.js
var window4, _math, PI, _min, _abs, _sqrt, _pow, _atan2, _cos, _sin, _number, parseAttributes;
var init_image_creator = __esm({
  "node_modules/devextreme/esm/exporter/image_creator.js"() {
    init_renderer();
    init_color();
    init_type();
    init_svg();
    init_iterator();
    init_extend();
    init_dom_adapter();
    init_dom();
    init_window();
    init_inflector();
    init_deferred();
    window4 = getWindow();
    _math = Math;
    PI = _math.PI;
    _min = _math.min;
    _abs = _math.abs;
    _sqrt = _math.sqrt;
    _pow = _math.pow;
    _atan2 = _math.atan2;
    _cos = _math.cos;
    _sin = _math.sin;
    _number = Number;
    parseAttributes = function(attributes) {
      var newAttributes = {};
      var attr;
      each(attributes, function(index, item) {
        attr = item.textContent;
        if (isFinite(attr)) {
          attr = _number(attr);
        }
        newAttributes[item.name.toLowerCase()] = attr;
      });
      return newAttributes;
    };
  }
});

// node_modules/devextreme/esm/exporter/svg_creator.js
var window5;
var init_svg_creator = __esm({
  "node_modules/devextreme/esm/exporter/svg_creator.js"() {
    init_renderer();
    init_ajax();
    init_window();
    init_type();
    init_iterator();
    init_svg();
    init_deferred();
    window5 = getWindow();
  }
});

// node_modules/devextreme/esm/exporter/pdf_creator.js
var window6;
var init_pdf_creator = __esm({
  "node_modules/devextreme/esm/exporter/pdf_creator.js"() {
    init_version();
    init_window();
    init_image_creator();
    init_type();
    init_extend();
    window6 = getWindow();
  }
});

// node_modules/devextreme/esm/exporter.js
function _export(data, options, getData5) {
  if (!data) {
    return new Deferred().resolve();
  }
  var exportingAction = options.exportingAction;
  var exportedAction = options.exportedAction;
  var fileSavingAction = options.fileSavingAction;
  var eventArgs = {
    fileName: options.fileName,
    format: options.format,
    cancel: false
  };
  isFunction(exportingAction) && exportingAction(eventArgs);
  if (!eventArgs.cancel) {
    return getData5(data, options).then((blob) => {
      isFunction(exportedAction) && exportedAction();
      if (isFunction(fileSavingAction)) {
        eventArgs.data = blob;
        fileSavingAction(eventArgs);
      }
      if (!eventArgs.cancel) {
        fileSaver.saveAs(eventArgs.fileName, options.format, blob, options.proxyUrl, options.forceProxy);
      }
    });
  }
  return new Deferred().resolve();
}
var excel;
var init_exporter = __esm({
  "node_modules/devextreme/esm/exporter.js"() {
    init_file_saver();
    init_excel_creator();
    init_image_creator();
    init_svg_creator();
    init_type();
    init_deferred();
    init_excel_format_converter();
    init_pdf_creator();
    excel = {
      creator: ExcelCreator,
      getData,
      formatConverter: excel_format_converter_default
    };
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.export.js
var DATAGRID_EXPORT_MENU_CLASS, DATAGRID_EXPORT_BUTTON_CLASS, DATAGRID_EXPORT_ICON, DATAGRID_EXPORT_EXCEL_ICON, DATAGRID_EXPORT_SELECTED_ICON, DATAGRID_EXPORT_EXCEL_BUTTON_ICON, TOOLBAR_ITEM_AUTO_HIDE_CLASS, TOOLBAR_HIDDEN_BUTTON_CLASS, BUTTON_CLASS, DataProvider, ExportController;
var init_ui_data_grid_export = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.export.js"() {
    init_renderer();
    init_class();
    init_type();
    init_extend();
    init_position();
    init_array();
    init_ui_data_grid_core();
    init_ui_grid_core_export_mixin();
    init_exporter();
    init_message();
    init_button();
    init_list();
    init_context_menu();
    init_deferred();
    DATAGRID_EXPORT_MENU_CLASS = "dx-datagrid-export-menu";
    DATAGRID_EXPORT_BUTTON_CLASS = "dx-datagrid-export-button";
    DATAGRID_EXPORT_ICON = "export-to";
    DATAGRID_EXPORT_EXCEL_ICON = "xlsxfile";
    DATAGRID_EXPORT_SELECTED_ICON = "exportselected";
    DATAGRID_EXPORT_EXCEL_BUTTON_ICON = "export-excel-button";
    TOOLBAR_ITEM_AUTO_HIDE_CLASS = "dx-toolbar-item-auto-hide";
    TOOLBAR_HIDDEN_BUTTON_CLASS = "dx-toolbar-hidden-button";
    BUTTON_CLASS = "dx-button";
    DataProvider = class_default.inherit({
      ctor: function(exportController, initialColumnWidthsByColumnIndex, selectedRowsOnly) {
        this._exportController = exportController;
        this._initialColumnWidthsByColumnIndex = initialColumnWidthsByColumnIndex;
        this._selectedRowsOnly = selectedRowsOnly;
      },
      _getGroupValue: function(item) {
        var {
          key,
          data,
          rowType,
          groupIndex,
          summaryCells
        } = item;
        var groupColumn = this._options.groupColumns[groupIndex];
        var value = ui_data_grid_core_default.getDisplayValue(groupColumn, groupColumn.deserializeValue ? groupColumn.deserializeValue(key[groupIndex]) : key[groupIndex], data, rowType);
        var result = groupColumn.caption + ": " + ui_data_grid_core_default.formatValue(value, groupColumn);
        if (summaryCells && summaryCells[0] && summaryCells[0].length) {
          result += " " + ui_data_grid_core_default.getGroupRowSummaryText(summaryCells[0], this._options.summaryTexts);
        }
        return result;
      },
      _correctCellIndex: function(cellIndex) {
        return cellIndex;
      },
      _initOptions: function() {
        var exportController = this._exportController;
        var groupColumns = exportController._columnsController.getGroupColumns();
        var excelWrapTextEnabled = exportController.option("export.excelWrapTextEnabled");
        this._options = {
          columns: exportController._getColumns(this._initialColumnWidthsByColumnIndex),
          groupColumns,
          items: this._selectedRowsOnly || exportController._selectionOnly ? exportController._getSelectedItems() : exportController._getAllItems(),
          getVisibleIndex: exportController._columnsController.getVisibleIndex.bind(exportController._columnsController),
          isHeadersVisible: exportController.option("showColumnHeaders"),
          summaryTexts: exportController.option("summary.texts"),
          customizeExportData: exportController.option("customizeExportData"),
          rtlEnabled: exportController.option("rtlEnabled"),
          wrapTextEnabled: isDefined(excelWrapTextEnabled) ? excelWrapTextEnabled : !!exportController.option("wordWrapEnabled"),
          customizeExcelCell: exportController.option("export.customizeExcelCell")
        };
      },
      hasCustomizeExcelCell: function() {
        return isDefined(this._options.customizeExcelCell);
      },
      customizeExcelCell: function(e, cellSourceData) {
        if (this._options.customizeExcelCell) {
          e.gridCell = cellSourceData;
          if (isDefined(this._exportController) && isDefined(this._exportController.component)) {
            e.component = this._exportController.component;
          }
          this._options.customizeExcelCell(e);
        }
      },
      getHeaderStyles: () => [{
        bold: true,
        alignment: "center",
        wrapText: true
      }, {
        bold: true,
        alignment: "left",
        wrapText: true
      }, {
        bold: true,
        alignment: "right",
        wrapText: true
      }],
      getGroupRowStyle() {
        return {
          bold: true,
          wrapText: false,
          alignment: getDefaultAlignment(this._options.rtlEnabled)
        };
      },
      getColumnStyles() {
        var wrapTextEnabled = this._options.wrapTextEnabled;
        var columnStyles = [];
        this.getColumns().forEach((column) => {
          columnStyles.push({
            alignment: column.alignment || "left",
            format: column.format,
            wrapText: wrapTextEnabled,
            dataType: column.dataType
          });
        });
        return columnStyles;
      },
      getStyles: function() {
        return [...this.getHeaderStyles(), ...this.getColumnStyles(), this.getGroupRowStyle()];
      },
      _getTotalCellStyleId: function(cellIndex) {
        var _this$getColumns$cell;
        var alignment = (null === (_this$getColumns$cell = this.getColumns()[cellIndex]) || void 0 === _this$getColumns$cell ? void 0 : _this$getColumns$cell.alignment) || "right";
        return this.getHeaderStyles().map((style) => style.alignment).indexOf(alignment);
      },
      getStyleId: function(rowIndex, cellIndex) {
        if (rowIndex < this.getHeaderRowCount()) {
          return 0;
        } else if (this.isTotalCell(rowIndex - this.getHeaderRowCount(), cellIndex)) {
          return this._getTotalCellStyleId(cellIndex);
        } else if (this.isGroupRow(rowIndex - this.getHeaderRowCount())) {
          return this.getHeaderStyles().length + this.getColumns().length;
        } else {
          return cellIndex + this.getHeaderStyles().length;
        }
      },
      getColumns: function(getColumnsByAllRows) {
        var {
          columns
        } = this._options;
        return getColumnsByAllRows ? columns : columns[columns.length - 1];
      },
      getColumnsWidths: function() {
        var columns = this.getColumns();
        return isDefined(columns) ? columns.map((c) => c.width) : void 0;
      },
      getRowsCount: function() {
        return this._options.items.length + this.getHeaderRowCount();
      },
      getHeaderRowCount: function() {
        if (this.isHeadersVisible()) {
          return this._options.columns.length - 1;
        }
        return 0;
      },
      isGroupRow: function(rowIndex) {
        return rowIndex < this._options.items.length && "group" === this._options.items[rowIndex].rowType;
      },
      getGroupLevel: function(rowIndex) {
        var item = this._options.items[rowIndex - this.getHeaderRowCount()];
        var groupIndex = item && item.groupIndex;
        if (item && "totalFooter" === item.rowType) {
          return 0;
        }
        return isDefined(groupIndex) ? groupIndex : this._options.groupColumns.length;
      },
      getCellType: function(rowIndex, cellIndex) {
        var columns = this.getColumns();
        if (rowIndex < this.getHeaderRowCount()) {
          return "string";
        } else {
          rowIndex -= this.getHeaderRowCount();
        }
        if (cellIndex < columns.length) {
          var item = this._options.items.length && this._options.items[rowIndex];
          var column = columns[cellIndex];
          if (item && "data" === item.rowType) {
            if (isFinite(item.values[this._correctCellIndex(cellIndex)]) && !isDefined(column.customizeText)) {
              return isDefined(column.lookup) ? column.lookup.dataType : column.dataType;
            }
          }
          return "string";
        }
      },
      ready: function() {
        var that = this;
        that._initOptions();
        var options = that._options;
        return when(options.items).done(function(items) {
          options.customizeExportData && options.customizeExportData(that.getColumns(that.getHeaderRowCount() > 1), items);
          options.items = items;
        }).fail(function() {
          options.items = [];
        });
      },
      _convertFromGridGroupSummaryItems: function(gridGroupSummaryItems) {
        if (isDefined(gridGroupSummaryItems) && gridGroupSummaryItems.length > 0) {
          return gridGroupSummaryItems.map(function(item) {
            return {
              value: item.value,
              name: item.name
            };
          });
        }
      },
      getCellData: function(rowIndex, cellIndex, isExcelJS) {
        var value;
        var column;
        var result = {
          cellSourceData: {},
          value
        };
        var columns = this.getColumns();
        var correctedCellIndex = this._correctCellIndex(cellIndex);
        if (rowIndex < this.getHeaderRowCount()) {
          var columnsRow = this.getColumns(true)[rowIndex];
          column = columnsRow[cellIndex];
          result.cellSourceData.rowType = "header";
          result.cellSourceData.column = column && column.gridColumn;
          result.value = column && column.caption;
        } else {
          rowIndex -= this.getHeaderRowCount();
          var item = this._options.items.length && this._options.items[rowIndex];
          if (item) {
            var itemValues = item.values;
            result.cellSourceData.rowType = item.rowType;
            result.cellSourceData.column = columns[cellIndex] && columns[cellIndex].gridColumn;
            switch (item.rowType) {
              case "groupFooter":
              case "totalFooter":
                if (correctedCellIndex < itemValues.length) {
                  value = itemValues[correctedCellIndex];
                  if (isDefined(value)) {
                    result.cellSourceData.value = value.value;
                    result.cellSourceData.totalSummaryItemName = value.name;
                    result.value = ui_data_grid_core_default.getSummaryText(value, this._options.summaryTexts);
                  } else {
                    result.cellSourceData.value = void 0;
                  }
                }
                break;
              case "group":
                result.cellSourceData.groupIndex = item.groupIndex;
                if (cellIndex < 1) {
                  result.cellSourceData.column = this._options.groupColumns[item.groupIndex];
                  result.cellSourceData.value = item.key[item.groupIndex];
                  result.cellSourceData.groupSummaryItems = this._convertFromGridGroupSummaryItems(item.summaryCells[0]);
                  result.value = this._getGroupValue(item);
                } else {
                  var summaryItems = item.values[correctedCellIndex];
                  if (Array.isArray(summaryItems)) {
                    result.cellSourceData.groupSummaryItems = this._convertFromGridGroupSummaryItems(summaryItems);
                    value = "";
                    for (var i = 0; i < summaryItems.length; i++) {
                      value += (i > 0 ? isExcelJS ? "\n" : " \n " : "") + ui_data_grid_core_default.getSummaryText(summaryItems[i], this._options.summaryTexts);
                    }
                    result.value = value;
                  } else {
                    result.cellSourceData.value = void 0;
                  }
                }
                break;
              default:
                column = columns[cellIndex];
                if (column) {
                  var _value = itemValues[correctedCellIndex];
                  var displayValue = ui_data_grid_core_default.getDisplayValue(column, _value, item.data, item.rowType);
                  if (!isFinite(displayValue) || isDefined(column.customizeText)) {
                    if (isExcelJS && isDefined(column.customizeText) && column.customizeText === this._exportController._columnsController.getCustomizeTextByDataType("boolean")) {
                      result.value = displayValue;
                    } else {
                      result.value = ui_data_grid_core_default.formatValue(displayValue, column);
                    }
                  } else {
                    result.value = displayValue;
                  }
                  result.cellSourceData.value = _value;
                }
                result.cellSourceData.data = item.data;
            }
          }
        }
        return result;
      },
      isHeadersVisible: function() {
        return this._options.isHeadersVisible;
      },
      isTotalCell: function(rowIndex, cellIndex) {
        var items = this._options.items;
        var item = items[rowIndex];
        var correctCellIndex = this._correctCellIndex(cellIndex);
        var isSummaryAlignByColumn = item.summaryCells && item.summaryCells[correctCellIndex] && item.summaryCells[correctCellIndex].length > 0 && item.summaryCells[correctCellIndex][0].alignByColumn;
        return item && "groupFooter" === item.rowType || "totalFooter" === item.rowType || isSummaryAlignByColumn;
      },
      getCellMerging: function(rowIndex, cellIndex) {
        var columns = this._options.columns;
        var column = columns[rowIndex] && columns[rowIndex][cellIndex];
        return column ? {
          colspan: (column.exportColspan || 1) - 1,
          rowspan: (column.rowspan || 1) - 1
        } : {
          colspan: 0,
          rowspan: 0
        };
      },
      getFrozenArea: function() {
        return {
          x: 0,
          y: this.getHeaderRowCount()
        };
      }
    });
    ExportController = ui_data_grid_core_default.ViewController.inherit({}).include(ui_grid_core_export_mixin_default).inherit({
      _getEmptyCell: function() {
        return {
          caption: "",
          colspan: 1,
          rowspan: 1
        };
      },
      _updateColumnWidth: function(column, width) {
        column.width = width;
      },
      _getColumns: function(initialColumnWidthsByColumnIndex) {
        var result = [];
        var i;
        var columns;
        var columnsController = this._columnsController;
        var rowCount = columnsController.getRowCount();
        for (i = 0; i <= rowCount; i++) {
          var currentHeaderRow = [];
          columns = columnsController.getVisibleColumns(i, true);
          var columnWidthsByColumnIndex = void 0;
          if (i === rowCount) {
            if (this._updateLockCount) {
              columnWidthsByColumnIndex = initialColumnWidthsByColumnIndex;
            } else {
              var columnWidths = this._getColumnWidths(this._headersView, this._rowsView);
              if (columnWidths && columnWidths.length) {
                columnWidthsByColumnIndex = {};
                for (var _i = 0; _i < columns.length; _i++) {
                  columnWidthsByColumnIndex[columns[_i].index] = columnWidths[_i];
                }
              }
            }
          }
          for (var j = 0; j < columns.length; j++) {
            var column = extend({}, columns[j], {
              dataType: "datetime" === columns[j].dataType ? "date" : columns[j].dataType,
              gridColumn: columns[j]
            });
            if (this._needColumnExporting(column)) {
              var currentColspan = this._calculateExportColspan(column);
              if (isDefined(currentColspan)) {
                column.exportColspan = currentColspan;
              }
              if (columnWidthsByColumnIndex) {
                this._updateColumnWidth(column, columnWidthsByColumnIndex[column.index]);
              }
              currentHeaderRow.push(column);
            }
          }
          result.push(currentHeaderRow);
        }
        columns = result[rowCount];
        result = this._prepareItems(result.slice(0, -1));
        result.push(columns);
        return result;
      },
      _calculateExportColspan: function(column) {
        if (!column.isBand) {
          return;
        }
        var childColumns = this._columnsController.getChildrenByBandColumn(column.index, true);
        if (!isDefined(childColumns)) {
          return;
        }
        return childColumns.reduce((result, childColumn) => {
          if (this._needColumnExporting(childColumn)) {
            return result + (this._calculateExportColspan(childColumn) || 1);
          } else {
            return result;
          }
        }, 0);
      },
      _needColumnExporting: function(column) {
        return !column.command && (column.allowExporting || void 0 === column.allowExporting);
      },
      _getFooterSummaryItems: function(summaryCells, isTotal) {
        var result = [];
        var estimatedItemsCount = 1;
        var i = 0;
        do {
          var values = [];
          for (var j = 0; j < summaryCells.length; j++) {
            var summaryCell = summaryCells[j];
            var itemsLength = summaryCell.length;
            if (estimatedItemsCount < itemsLength) {
              estimatedItemsCount = itemsLength;
            }
            values.push(summaryCell[i]);
          }
          result.push({
            values,
            rowType: isTotal ? "totalFooter" : "groupFooter"
          });
        } while (i++ < estimatedItemsCount - 1);
        return result;
      },
      _hasSummaryGroupFooters: function() {
        var groupItems = this.option("summary.groupItems");
        if (isDefined(groupItems)) {
          for (var i = 0; i < groupItems.length; i++) {
            if (groupItems[i].showInGroupFooter) {
              return true;
            }
          }
        }
        return false;
      },
      _getItemsWithSummaryGroupFooters: function(sourceItems) {
        var result = [];
        var beforeGroupFooterItems = [];
        var groupFooterItems = [];
        for (var i = 0; i < sourceItems.length; i++) {
          var item = sourceItems[i];
          if ("groupFooter" === item.rowType) {
            groupFooterItems = this._getFooterSummaryItems(item.summaryCells);
            result = result.concat(beforeGroupFooterItems, groupFooterItems);
            beforeGroupFooterItems = [];
          } else {
            beforeGroupFooterItems.push(item);
          }
        }
        return result.length ? result : beforeGroupFooterItems;
      },
      _updateGroupValuesWithSummaryByColumn: function(sourceItems) {
        var summaryValues = [];
        for (var i = 0; i < sourceItems.length; i++) {
          var item = sourceItems[i];
          var summaryCells = item.summaryCells;
          if ("group" === item.rowType && summaryCells && summaryCells.length > 1) {
            var groupColumnCount = item.values.length;
            for (var j = 1; j < summaryCells.length; j++) {
              for (var k = 0; k < summaryCells[j].length; k++) {
                var summaryItem = summaryCells[j][k];
                if (summaryItem && summaryItem.alignByColumn) {
                  if (!Array.isArray(summaryValues[j - groupColumnCount])) {
                    summaryValues[j - groupColumnCount] = [];
                  }
                  summaryValues[j - groupColumnCount].push(summaryItem);
                }
              }
            }
            if (summaryValues.length > 0) {
              merge(item.values, summaryValues);
              summaryValues = [];
            }
          }
        }
      },
      _processUnExportedItems: function(items) {
        var columns = this._columnsController.getVisibleColumns(null, true);
        var groupColumns = this._columnsController.getGroupColumns();
        var values;
        var summaryCells;
        for (var i = 0; i < items.length; i++) {
          var item = items[i];
          var isDetailExpandColumn = false;
          values = [];
          summaryCells = [];
          for (var j = 0; j < columns.length; j++) {
            var column = columns[j];
            isDetailExpandColumn = isDetailExpandColumn || "detailExpand" === column.type;
            if (this._needColumnExporting(column)) {
              if (item.values) {
                if ("group" === item.rowType && !values.length) {
                  values.push(item.key[item.groupIndex]);
                } else {
                  values.push(item.values[j]);
                }
              }
              if (item.summaryCells) {
                if ("group" === item.rowType && !summaryCells.length) {
                  var index = j - groupColumns.length + item.groupIndex;
                  summaryCells.push(item.summaryCells[isDetailExpandColumn ? index - 1 : index]);
                } else {
                  summaryCells.push(item.summaryCells[j]);
                }
              }
            }
          }
          if (values.length) {
            item.values = values;
          }
          if (summaryCells.length) {
            item.summaryCells = summaryCells;
          }
        }
      },
      _getAllItems: function(data) {
        var that = this;
        var d = new Deferred();
        var dataController = this.getController("data");
        var footerItems = dataController.footerItems();
        var totalItem = footerItems.length && footerItems[0];
        var summaryTotalItems = that.option("summary.totalItems");
        var summaryCells;
        when(data).done(function(data2) {
          dataController.loadAll(data2).done(function(sourceItems, totalAggregates) {
            that._updateGroupValuesWithSummaryByColumn(sourceItems);
            if (that._hasSummaryGroupFooters()) {
              sourceItems = that._getItemsWithSummaryGroupFooters(sourceItems);
            }
            summaryCells = totalItem && totalItem.summaryCells;
            if (isDefined(totalAggregates) && summaryTotalItems) {
              summaryCells = that._getSummaryCells(summaryTotalItems, totalAggregates);
            }
            var summaryItems = totalItem && that._getFooterSummaryItems(summaryCells, true);
            if (summaryItems) {
              sourceItems = sourceItems.concat(summaryItems);
            }
            that._processUnExportedItems(sourceItems);
            d.resolve(sourceItems);
          }).fail(d.reject);
        }).fail(d.reject);
        return d;
      },
      _getSummaryCells: function(summaryTotalItems, totalAggregates) {
        var dataController = this.getController("data");
        var columnsController = dataController._columnsController;
        return dataController._calculateSummaryCells(summaryTotalItems, totalAggregates, columnsController.getVisibleColumns(null, true), function(summaryItem, column) {
          return dataController._isDataColumn(column) ? column.index : -1;
        });
      },
      _getSelectedItems: function() {
        var selectionController = this.getController("selection");
        var selectedRowData = selectionController.getSelectedRowsData();
        return this._getAllItems(selectedRowData);
      },
      _getColumnWidths: function(headersView, rowsView) {
        return headersView && headersView.isVisible() ? headersView.getColumnWidths() : rowsView.getColumnWidths();
      },
      init: function() {
        this._columnsController = this.getController("columns");
        this._rowsView = this.getView("rowsView");
        this._headersView = this.getView("columnHeadersView");
        this.createAction("onExporting", {
          excludeValidators: ["disabled", "readOnly"]
        });
        this.createAction("onExported", {
          excludeValidators: ["disabled", "readOnly"]
        });
        this.createAction("onFileSaving", {
          excludeValidators: ["disabled", "readOnly"]
        });
      },
      callbackNames: function() {
        return ["selectionOnlyChanged"];
      },
      getExportFormat: function() {
        return ["EXCEL"];
      },
      getDataProvider: function(selectedRowsOnly) {
        var columnWidths = this._getColumnWidths(this._headersView, this._rowsView);
        var initialColumnWidthsByColumnIndex;
        if (columnWidths && columnWidths.length) {
          initialColumnWidthsByColumnIndex = {};
          var columnsLastRowVisibleColumns = this._columnsController.getVisibleColumns(this._columnsController.getRowCount(), true);
          for (var i = 0; i < columnsLastRowVisibleColumns.length; i++) {
            initialColumnWidthsByColumnIndex[columnsLastRowVisibleColumns[i].index] = columnWidths[i];
          }
        }
        return new DataProvider(this, initialColumnWidthsByColumnIndex, selectedRowsOnly);
      },
      exportToExcel: function(selectionOnly) {
        this._selectionOnly = selectionOnly;
        _export(this.component.getDataProvider(), {
          fileName: this.option("export.fileName"),
          proxyUrl: this.option("export.proxyUrl"),
          format: "EXCEL",
          autoFilterEnabled: !!this.option("export.excelFilterEnabled"),
          rtlEnabled: this.option("rtlEnabled"),
          ignoreErrors: this.option("export.ignoreExcelErrors"),
          exportingAction: this.getAction("onExporting"),
          exportedAction: this.getAction("onExported"),
          fileSavingAction: this.getAction("onFileSaving")
        }, excel.getData);
      },
      publicMethods: function() {
        return ["getDataProvider", "getExportFormat", "exportToExcel"];
      },
      selectionOnly: function(value) {
        if (isDefined(value)) {
          this._isSelectedRows = value;
          this.selectionOnlyChanged.fire();
        } else {
          return this._isSelectedRows;
        }
      }
    });
    ui_data_grid_core_default.registerModule("export", {
      defaultOptions: function() {
        return {
          export: {
            enabled: false,
            fileName: "DataGrid",
            excelFilterEnabled: false,
            excelWrapTextEnabled: void 0,
            proxyUrl: void 0,
            allowExportSelectedData: false,
            ignoreExcelErrors: true,
            texts: {
              exportTo: message_default.format("dxDataGrid-exportTo"),
              exportAll: message_default.format("dxDataGrid-exportAll"),
              exportSelectedRows: message_default.format("dxDataGrid-exportSelectedRows")
            }
          }
        };
      },
      controllers: {
        export: ExportController
      },
      extenders: {
        controllers: {
          editing: {
            callbackNames: function() {
              var callbackList = this.callBase();
              return isDefined(callbackList) ? callbackList.push("editingChanged") : ["editingChanged"];
            },
            _updateEditButtons: function() {
              this.callBase();
              this.editingChanged.fire(this.hasChanges());
            }
          }
        },
        views: {
          headerPanel: {
            _getToolbarItems: function() {
              var items = this.callBase();
              return this._appendExportItems(items);
            },
            _appendExportItems: function(items) {
              var that = this;
              var exportOptions = that.option("export");
              if (exportOptions.enabled) {
                var exportItems = [];
                if (exportOptions.allowExportSelectedData) {
                  exportItems.push({
                    template: function(data, index, container) {
                      var $container = renderer_default(container);
                      that._renderButton(data, $container);
                      that._renderExportMenu($container);
                    },
                    menuItemTemplate: function(data, index, container) {
                      that._renderList(data, renderer_default(container));
                    },
                    name: "exportButton",
                    allowExportSelected: true,
                    location: "after",
                    locateInMenu: "auto",
                    sortIndex: 30
                  });
                } else {
                  exportItems.push({
                    template: function(data, index, container) {
                      that._renderButton(data, renderer_default(container));
                    },
                    menuItemTemplate: function(data, index, container) {
                      that._renderButton(data, renderer_default(container), true);
                    },
                    name: "exportButton",
                    location: "after",
                    locateInMenu: "auto",
                    sortIndex: 30
                  });
                }
                items = items.concat(exportItems);
                that._correctItemsPosition(items);
              }
              return items;
            },
            _renderButton: function(data, $container, withText) {
              var buttonOptions = this._getButtonOptions(data.allowExportSelected);
              var $buttonContainer = this._getButtonContainer().addClass(DATAGRID_EXPORT_BUTTON_CLASS).appendTo($container);
              if (withText) {
                var wrapperNode = renderer_default("<div>").addClass(TOOLBAR_ITEM_AUTO_HIDE_CLASS);
                $container.wrapInner(wrapperNode).parent().addClass("dx-toolbar-menu-action dx-toolbar-menu-button " + TOOLBAR_HIDDEN_BUTTON_CLASS);
                buttonOptions.text = buttonOptions.hint;
              }
              this._createComponent($buttonContainer, button_default, buttonOptions);
            },
            _renderList: function(data, $container) {
              var that = this;
              var texts = that.option("export.texts");
              var items = [{
                template: function(data2, index, container) {
                  that._renderFakeButton(data2, renderer_default(container), DATAGRID_EXPORT_EXCEL_ICON);
                },
                text: texts.exportAll
              }, {
                template: function(data2, index, container) {
                  that._renderFakeButton(data2, renderer_default(container), DATAGRID_EXPORT_SELECTED_ICON);
                },
                text: texts.exportSelectedRows,
                exportSelected: true
              }];
              that._createComponent($container, list_default, {
                items,
                onItemClick: function(e) {
                  that._exportController.exportToExcel(e.itemData.exportSelected);
                },
                scrollingEnabled: false
              });
            },
            _renderFakeButton: function(data, $container, iconName) {
              var $icon = renderer_default("<div>").addClass("dx-icon dx-icon-" + iconName);
              var $text = renderer_default("<span>").addClass("dx-button-text").text(data.text);
              var $content = renderer_default("<div>").addClass("dx-button-content").append($icon).append($text);
              var $button = renderer_default("<div>").addClass(BUTTON_CLASS + " dx-button-has-text dx-button-has-icon dx-datagrid-toolbar-button").append($content);
              var $toolbarItem = renderer_default("<div>").addClass(TOOLBAR_ITEM_AUTO_HIDE_CLASS).append($button);
              $container.append($toolbarItem).parent().addClass("dx-toolbar-menu-custom " + TOOLBAR_HIDDEN_BUTTON_CLASS);
            },
            _correctItemsPosition: function(items) {
              items.sort(function(itemA, itemB) {
                return itemA.sortIndex - itemB.sortIndex;
              });
            },
            _renderExportMenu: function($buttonContainer) {
              var that = this;
              var $button = $buttonContainer.find("." + BUTTON_CLASS);
              var texts = that.option("export.texts");
              var menuItems = [{
                text: texts.exportAll,
                icon: DATAGRID_EXPORT_EXCEL_ICON
              }, {
                text: texts.exportSelectedRows,
                exportSelected: true,
                icon: DATAGRID_EXPORT_SELECTED_ICON
              }];
              var $menuContainer = renderer_default("<div>").appendTo($buttonContainer);
              that._contextMenu = that._createComponent($menuContainer, context_menu_default, {
                showEvent: "dxclick",
                items: menuItems,
                cssClass: DATAGRID_EXPORT_MENU_CLASS,
                onItemClick: function(e) {
                  that._exportController.exportToExcel(e.itemData.exportSelected);
                },
                target: $button,
                position: {
                  at: "left bottom",
                  my: "left top",
                  offset: "0 3",
                  collision: "fit",
                  boundary: that._$parent,
                  boundaryOffset: "1 1"
                }
              });
            },
            _isExportButtonVisible: function() {
              return this.option("export.enabled");
            },
            _getButtonOptions: function(allowExportSelected) {
              var that = this;
              var texts = that.option("export.texts");
              var options;
              if (allowExportSelected) {
                options = {
                  hint: texts.exportTo,
                  icon: DATAGRID_EXPORT_ICON
                };
              } else {
                options = {
                  hint: texts.exportAll,
                  icon: DATAGRID_EXPORT_EXCEL_BUTTON_ICON,
                  onClick: function() {
                    that._exportController.exportToExcel();
                  }
                };
              }
              return options;
            },
            optionChanged: function(args) {
              this.callBase(args);
              if ("export" === args.name) {
                args.handled = true;
                this._invalidate();
              }
            },
            init: function() {
              var that = this;
              this.callBase();
              this._exportController = this.getController("export");
              this._editingController = this.getController("editing");
              this._editingController.editingChanged.add(function(hasChanges) {
                that.setToolbarItemDisabled("exportButton", hasChanges);
              });
            },
            isVisible: function() {
              return this.callBase() || this._isExportButtonVisible();
            }
          }
        }
      }
    });
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.focus.js
var MAX_SAFE_INTEGER;
var init_ui_data_grid_focus = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.focus.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_focus();
    init_deferred();
    init_type();
    init_common();
    init_ui_data_grid_utils();
    init_data();
    init_extend();
    MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
    ui_data_grid_core_default.registerModule("focus", extend(true, {}, focusModule, {
      extenders: {
        controllers: {
          data: {
            changeRowExpand: function(path, isRowClick) {
              if (this.option("focusedRowEnabled") && Array.isArray(path) && this.isRowExpanded(path)) {
                var keyboardNavigation = this.getController("keyboardNavigation");
                if ((!isRowClick || !keyboardNavigation.isKeyboardEnabled()) && this._isFocusedRowInsideGroup(path)) {
                  this.option("focusedRowKey", path);
                }
              }
              return this.callBase.apply(this, arguments);
            },
            _isFocusedRowInsideGroup: function(path) {
              var columnsController = this.getController("columns");
              var focusedRowKey = this.option("focusedRowKey");
              var rowIndex = this.getRowIndexByKey(focusedRowKey);
              var focusedRow = rowIndex >= 0 && this.getVisibleRows()[rowIndex];
              var groups = columnsController.getGroupDataSourceParameters(true);
              if (focusedRow) {
                for (var i = 0; i < path.length; ++i) {
                  var getter = compileGetter(groups[i] && groups[i].selector);
                  if (getter(focusedRow.data) !== path[i]) {
                    return false;
                  }
                }
              }
              return true;
            },
            _getGroupPath: function(groupItem, groupCount) {
              var groupPath = [];
              var items = [groupItem];
              while (items && items[0] && groupCount) {
                var item = items[0];
                if (void 0 !== item.key) {
                  groupPath.push(item.key);
                }
                items = item.items;
                groupCount--;
              }
              return groupPath;
            },
            _expandGroupByPath: function(that, groupPath, level) {
              var d = new Deferred();
              level++;
              that.expandRow(groupPath.slice(0, level)).done(function() {
                if (level === groupPath.length) {
                  d.resolve();
                } else {
                  that._expandGroupByPath(that, groupPath, level).done(d.resolve).fail(d.reject);
                }
              }).fail(d.reject);
              return d.promise();
            },
            _calculateGlobalRowIndexByGroupedData: function(key) {
              var that = this;
              var dataSource = that._dataSource;
              var filter = that._generateFilterByKey(key);
              var deferred = new Deferred();
              var isGroupKey = Array.isArray(key);
              var group = dataSource.group();
              if (isGroupKey) {
                return deferred.resolve(-1).promise();
              }
              if (!dataSource._grouping._updatePagingOptions) {
                that._calculateGlobalRowIndexByFlatData(key, null, true).done(deferred.resolve).fail(deferred.reject);
                return deferred;
              }
              dataSource.load({
                filter: that._concatWithCombinedFilter(filter),
                group
              }).done(function(data) {
                if (!data || 0 === data.length || !isDefined(data[0].key) || -1 === data[0].key) {
                  return deferred.resolve(-1).promise();
                }
                var groupPath = that._getGroupPath(data[0], group.length);
                that._expandGroupByPath(that, groupPath, 0).done(function() {
                  that._calculateExpandedRowGlobalIndex(deferred, key, groupPath, group);
                }).fail(deferred.reject);
              }).fail(deferred.reject);
              return deferred.promise();
            },
            _calculateExpandedRowGlobalIndex: function(deferred, key, groupPath, group) {
              var groupFilter = createGroupFilter(groupPath, {
                group
              });
              var dataSource = this._dataSource;
              var scrollingMode = this.option("scrolling.mode");
              var isVirtualScrolling = "virtual" === scrollingMode || "infinite" === scrollingMode;
              var pageSize = dataSource.pageSize();
              var groupOffset;
              dataSource._grouping._updatePagingOptions({
                skip: 0,
                take: MAX_SAFE_INTEGER
              }, function(groupInfo, totalOffset) {
                if (equalByValue(groupInfo.path, groupPath)) {
                  groupOffset = totalOffset;
                }
              });
              this._calculateGlobalRowIndexByFlatData(key, groupFilter).done(function(dataOffset) {
                var count;
                var groupContinuationCount;
                if (dataOffset < 0) {
                  deferred.resolve(-1);
                  return;
                }
                var currentPageOffset = groupOffset % pageSize || pageSize;
                count = currentPageOffset + dataOffset - groupPath.length;
                if (isVirtualScrolling) {
                  groupContinuationCount = 0;
                } else {
                  groupContinuationCount = Math.floor(count / (pageSize - groupPath.length)) * groupPath.length;
                }
                count = groupOffset + dataOffset + groupContinuationCount;
                deferred.resolve(count);
              }).fail(deferred.reject);
            }
          }
        }
      }
    }));
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.row_dragging.js
var init_ui_data_grid_row_dragging = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.row_dragging.js"() {
    init_ui_data_grid_core();
    init_ui_grid_core_row_dragging();
    ui_data_grid_core_default.registerModule("rowDragging", rowDraggingModule);
  }
});

// node_modules/devextreme/esm/ui/data_grid/ui.data_grid.js
var ui_data_grid_default;
var init_ui_data_grid = __esm({
  "node_modules/devextreme/esm/ui/data_grid/ui.data_grid.js"() {
    init_ui_data_grid_base();
    init_ui_data_grid_state_storing();
    init_ui_data_grid_selection();
    init_ui_data_grid_column_chooser();
    init_ui_data_grid_grouping();
    init_ui_data_grid_master_detail();
    init_ui_data_grid_editing();
    init_ui_data_grid_editing_row_based();
    init_ui_data_grid_editing_form_based();
    init_ui_data_grid_editing_cell_based();
    init_ui_data_grid_validating();
    init_ui_data_grid_virtual_scrolling();
    init_ui_data_grid_filter_row();
    init_ui_data_grid_header_filter();
    init_ui_data_grid_filter_sync();
    init_ui_data_grid_filter_builder();
    init_ui_data_grid_filter_panel();
    init_ui_data_grid_search();
    init_ui_data_grid_pager();
    init_ui_data_grid_columns_resizing_reordering();
    init_ui_data_grid_keyboard_navigation();
    init_ui_data_grid_summary();
    init_ui_data_grid_column_fixing();
    init_ui_data_grid_adaptivity();
    init_ui_data_grid_virtual_columns();
    init_ui_data_grid_export();
    init_ui_data_grid_focus();
    init_ui_data_grid_row_dragging();
    ui_data_grid_default = ui_data_grid_base_default;
  }
});

// node_modules/devextreme/esm/ui/data_grid.js
var data_grid_exports = {};
__export(data_grid_exports, {
  default: () => data_grid_default
});
var data_grid_default;
var init_data_grid = __esm({
  "node_modules/devextreme/esm/ui/data_grid.js"() {
    init_ui_data_grid();
    data_grid_default = ui_data_grid_default;
  }
});

// node_modules/devextreme-vue/data-grid.js
var require_data_grid = __commonJS({
  "node_modules/devextreme-vue/data-grid.js"(exports) {
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DxMy = exports.DxMasterDetail = exports.DxLookup = exports.DxLoadPanel = exports.DxLabel = exports.DxKeyboardNavigation = exports.DxHide = exports.DxHeaderFilter = exports.DxGroupPanel = exports.DxGroupOperationDescriptions = exports.DxGroupItem = exports.DxGroupingTexts = exports.DxGrouping = exports.DxFormItem = exports.DxFormat = exports.DxForm = exports.DxFilterRow = exports.DxFilterPanelTexts = exports.DxFilterPanel = exports.DxFilterOperationDescriptions = exports.DxFilterBuilderPopup = exports.DxFilterBuilder = exports.DxFieldLookup = exports.DxField = exports.DxExportTexts = exports.DxExport = exports.DxEmailRule = exports.DxEditingTexts = exports.DxEditing = exports.DxDataGridHeaderFilterTexts = exports.DxDataGridHeaderFilter = exports.DxCustomRule = exports.DxCustomOperation = exports.DxCursorOffset = exports.DxCompareRule = exports.DxColumnLookup = exports.DxColumnHeaderFilter = exports.DxColumnFixingTexts = exports.DxColumnFixing = exports.DxColumnChooser = exports.DxColumn = exports.DxCollision = exports.DxColCountByScreen = exports.DxChange = exports.DxButton = exports.DxBoundaryOffset = exports.DxAt = exports.DxAsyncRule = exports.DxAnimation = exports.DxDataGrid = void 0;
    exports.DxValueFormat = exports.DxValidationRule = exports.DxTotalItem = exports.DxToolbarItem = exports.DxTexts = exports.DxSummaryTexts = exports.DxSummary = exports.DxStringLengthRule = exports.DxStateStoring = exports.DxSorting = exports.DxSortByGroupSummaryInfo = exports.DxShow = exports.DxSelection = exports.DxSearchPanel = exports.DxScrolling = exports.DxRowDragging = exports.DxRequiredRule = exports.DxRemoteOperations = exports.DxRangeRule = exports.DxPosition = exports.DxPopup = exports.DxPatternRule = exports.DxPaging = exports.DxPager = exports.DxOperationDescriptions = exports.DxOffset = exports.DxNumericRule = void 0;
    var data_grid_1 = __importDefault((init_data_grid(), __toCommonJS(data_grid_exports)));
    var index_1 = require_core();
    var index_2 = require_core();
    var DxDataGrid = index_1.createComponent({
      props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        allowColumnReordering: Boolean,
        allowColumnResizing: Boolean,
        autoNavigateToFocusedRow: Boolean,
        cacheEnabled: Boolean,
        cellHintEnabled: Boolean,
        columnAutoWidth: Boolean,
        columnChooser: Object,
        columnFixing: Object,
        columnHidingEnabled: Boolean,
        columnMinWidth: Number,
        columnResizingMode: String,
        columns: Array,
        columnWidth: [Number, String],
        customizeColumns: Function,
        customizeExportData: Function,
        dataSource: [Array, Object, String],
        dateSerializationFormat: String,
        disabled: Boolean,
        editing: Object,
        elementAttr: {},
        errorRowEnabled: Boolean,
        export: Object,
        filterBuilder: Object,
        filterBuilderPopup: Object,
        filterPanel: Object,
        filterRow: Object,
        filterSyncEnabled: [Boolean, String],
        filterValue: [Array, Function, String],
        focusedColumnIndex: Number,
        focusedRowEnabled: Boolean,
        focusedRowIndex: Number,
        focusedRowKey: {},
        focusStateEnabled: Boolean,
        grouping: Object,
        groupPanel: Object,
        headerFilter: Object,
        height: [Function, Number, String],
        highlightChanges: Boolean,
        hint: String,
        hoverStateEnabled: Boolean,
        keyboardNavigation: Object,
        keyExpr: [Array, String],
        loadPanel: Object,
        masterDetail: Object,
        noDataText: String,
        onAdaptiveDetailRowPreparing: Function,
        onCellClick: Function,
        onCellDblClick: Function,
        onCellHoverChanged: Function,
        onCellPrepared: Function,
        onContentReady: Function,
        onContextMenuPreparing: Function,
        onDataErrorOccurred: Function,
        onDisposing: Function,
        onEditCanceled: Function,
        onEditCanceling: Function,
        onEditingStart: Function,
        onEditorPrepared: Function,
        onEditorPreparing: Function,
        onExported: Function,
        onExporting: Function,
        onFileSaving: Function,
        onFocusedCellChanged: Function,
        onFocusedCellChanging: Function,
        onFocusedRowChanged: Function,
        onFocusedRowChanging: Function,
        onInitialized: Function,
        onInitNewRow: Function,
        onKeyDown: Function,
        onOptionChanged: Function,
        onRowClick: Function,
        onRowCollapsed: Function,
        onRowCollapsing: Function,
        onRowDblClick: Function,
        onRowExpanded: Function,
        onRowExpanding: Function,
        onRowInserted: Function,
        onRowInserting: Function,
        onRowPrepared: Function,
        onRowRemoved: Function,
        onRowRemoving: Function,
        onRowUpdated: Function,
        onRowUpdating: Function,
        onRowValidating: Function,
        onSaved: Function,
        onSaving: Function,
        onSelectionChanged: Function,
        onToolbarPreparing: Function,
        pager: Object,
        paging: Object,
        remoteOperations: [Boolean, Object, String],
        renderAsync: Boolean,
        repaintChangesOnly: Boolean,
        rowAlternationEnabled: Boolean,
        rowDragging: Object,
        rowTemplate: {},
        rtlEnabled: Boolean,
        scrolling: Object,
        searchPanel: Object,
        selectedRowKeys: Array,
        selection: Object,
        selectionFilter: [Array, Function, String],
        showBorders: Boolean,
        showColumnHeaders: Boolean,
        showColumnLines: Boolean,
        showRowLines: Boolean,
        sortByGroupSummaryInfo: Array,
        sorting: Object,
        stateStoring: Object,
        summary: Object,
        tabIndex: Number,
        twoWayBindingEnabled: Boolean,
        visible: Boolean,
        width: [Function, Number, String],
        wordWrapEnabled: Boolean
      },
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:allowColumnReordering": null,
        "update:allowColumnResizing": null,
        "update:autoNavigateToFocusedRow": null,
        "update:cacheEnabled": null,
        "update:cellHintEnabled": null,
        "update:columnAutoWidth": null,
        "update:columnChooser": null,
        "update:columnFixing": null,
        "update:columnHidingEnabled": null,
        "update:columnMinWidth": null,
        "update:columnResizingMode": null,
        "update:columns": null,
        "update:columnWidth": null,
        "update:customizeColumns": null,
        "update:customizeExportData": null,
        "update:dataSource": null,
        "update:dateSerializationFormat": null,
        "update:disabled": null,
        "update:editing": null,
        "update:elementAttr": null,
        "update:errorRowEnabled": null,
        "update:export": null,
        "update:filterBuilder": null,
        "update:filterBuilderPopup": null,
        "update:filterPanel": null,
        "update:filterRow": null,
        "update:filterSyncEnabled": null,
        "update:filterValue": null,
        "update:focusedColumnIndex": null,
        "update:focusedRowEnabled": null,
        "update:focusedRowIndex": null,
        "update:focusedRowKey": null,
        "update:focusStateEnabled": null,
        "update:grouping": null,
        "update:groupPanel": null,
        "update:headerFilter": null,
        "update:height": null,
        "update:highlightChanges": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:keyboardNavigation": null,
        "update:keyExpr": null,
        "update:loadPanel": null,
        "update:masterDetail": null,
        "update:noDataText": null,
        "update:onAdaptiveDetailRowPreparing": null,
        "update:onCellClick": null,
        "update:onCellDblClick": null,
        "update:onCellHoverChanged": null,
        "update:onCellPrepared": null,
        "update:onContentReady": null,
        "update:onContextMenuPreparing": null,
        "update:onDataErrorOccurred": null,
        "update:onDisposing": null,
        "update:onEditCanceled": null,
        "update:onEditCanceling": null,
        "update:onEditingStart": null,
        "update:onEditorPrepared": null,
        "update:onEditorPreparing": null,
        "update:onExported": null,
        "update:onExporting": null,
        "update:onFileSaving": null,
        "update:onFocusedCellChanged": null,
        "update:onFocusedCellChanging": null,
        "update:onFocusedRowChanged": null,
        "update:onFocusedRowChanging": null,
        "update:onInitialized": null,
        "update:onInitNewRow": null,
        "update:onKeyDown": null,
        "update:onOptionChanged": null,
        "update:onRowClick": null,
        "update:onRowCollapsed": null,
        "update:onRowCollapsing": null,
        "update:onRowDblClick": null,
        "update:onRowExpanded": null,
        "update:onRowExpanding": null,
        "update:onRowInserted": null,
        "update:onRowInserting": null,
        "update:onRowPrepared": null,
        "update:onRowRemoved": null,
        "update:onRowRemoving": null,
        "update:onRowUpdated": null,
        "update:onRowUpdating": null,
        "update:onRowValidating": null,
        "update:onSaved": null,
        "update:onSaving": null,
        "update:onSelectionChanged": null,
        "update:onToolbarPreparing": null,
        "update:pager": null,
        "update:paging": null,
        "update:remoteOperations": null,
        "update:renderAsync": null,
        "update:repaintChangesOnly": null,
        "update:rowAlternationEnabled": null,
        "update:rowDragging": null,
        "update:rowTemplate": null,
        "update:rtlEnabled": null,
        "update:scrolling": null,
        "update:searchPanel": null,
        "update:selectedRowKeys": null,
        "update:selection": null,
        "update:selectionFilter": null,
        "update:showBorders": null,
        "update:showColumnHeaders": null,
        "update:showColumnLines": null,
        "update:showRowLines": null,
        "update:sortByGroupSummaryInfo": null,
        "update:sorting": null,
        "update:stateStoring": null,
        "update:summary": null,
        "update:tabIndex": null,
        "update:twoWayBindingEnabled": null,
        "update:visible": null,
        "update:width": null,
        "update:wordWrapEnabled": null
      },
      computed: {
        instance: function() {
          return this.$_instance;
        }
      },
      beforeCreate: function() {
        this.$_WidgetClass = data_grid_1.default;
        this.$_hasAsyncTemplate = true;
        this.$_expectedChildren = {
          column: { isCollectionItem: true, optionName: "columns" },
          columnChooser: { isCollectionItem: false, optionName: "columnChooser" },
          columnFixing: { isCollectionItem: false, optionName: "columnFixing" },
          dataGridHeaderFilter: { isCollectionItem: false, optionName: "headerFilter" },
          editing: { isCollectionItem: false, optionName: "editing" },
          export: { isCollectionItem: false, optionName: "export" },
          filterBuilder: { isCollectionItem: false, optionName: "filterBuilder" },
          filterBuilderPopup: { isCollectionItem: false, optionName: "filterBuilderPopup" },
          filterPanel: { isCollectionItem: false, optionName: "filterPanel" },
          filterRow: { isCollectionItem: false, optionName: "filterRow" },
          grouping: { isCollectionItem: false, optionName: "grouping" },
          groupPanel: { isCollectionItem: false, optionName: "groupPanel" },
          headerFilter: { isCollectionItem: false, optionName: "headerFilter" },
          keyboardNavigation: { isCollectionItem: false, optionName: "keyboardNavigation" },
          loadPanel: { isCollectionItem: false, optionName: "loadPanel" },
          masterDetail: { isCollectionItem: false, optionName: "masterDetail" },
          pager: { isCollectionItem: false, optionName: "pager" },
          paging: { isCollectionItem: false, optionName: "paging" },
          remoteOperations: { isCollectionItem: false, optionName: "remoteOperations" },
          rowDragging: { isCollectionItem: false, optionName: "rowDragging" },
          scrolling: { isCollectionItem: false, optionName: "scrolling" },
          searchPanel: { isCollectionItem: false, optionName: "searchPanel" },
          selection: { isCollectionItem: false, optionName: "selection" },
          sortByGroupSummaryInfo: { isCollectionItem: true, optionName: "sortByGroupSummaryInfo" },
          sorting: { isCollectionItem: false, optionName: "sorting" },
          stateStoring: { isCollectionItem: false, optionName: "stateStoring" },
          summary: { isCollectionItem: false, optionName: "summary" }
        };
      }
    });
    exports.DxDataGrid = DxDataGrid;
    var DxAnimation = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:hide": null,
        "update:show": null
      },
      props: {
        hide: Object,
        show: Object
      }
    });
    exports.DxAnimation = DxAnimation;
    DxAnimation.$_optionName = "animation";
    DxAnimation.$_expectedChildren = {
      hide: { isCollectionItem: false, optionName: "hide" },
      show: { isCollectionItem: false, optionName: "show" }
    };
    var DxAsyncRule = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:reevaluate": null,
        "update:type": null,
        "update:validationCallback": null
      },
      props: {
        ignoreEmptyValue: Boolean,
        message: String,
        reevaluate: Boolean,
        type: String,
        validationCallback: Function
      }
    });
    exports.DxAsyncRule = DxAsyncRule;
    DxAsyncRule.$_optionName = "validationRules";
    DxAsyncRule.$_isCollectionItem = true;
    DxAsyncRule.$_predefinedProps = {
      type: "async"
    };
    var DxAt = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null
      },
      props: {
        x: String,
        y: String
      }
    });
    exports.DxAt = DxAt;
    DxAt.$_optionName = "at";
    var DxBoundaryOffset = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null
      },
      props: {
        x: Number,
        y: Number
      }
    });
    exports.DxBoundaryOffset = DxBoundaryOffset;
    DxBoundaryOffset.$_optionName = "boundaryOffset";
    var DxButton = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:cssClass": null,
        "update:hint": null,
        "update:icon": null,
        "update:name": null,
        "update:onClick": null,
        "update:template": null,
        "update:text": null,
        "update:visible": null
      },
      props: {
        cssClass: String,
        hint: String,
        icon: String,
        name: String,
        onClick: Function,
        template: {},
        text: String,
        visible: [Boolean, Function]
      }
    });
    exports.DxButton = DxButton;
    DxButton.$_optionName = "buttons";
    DxButton.$_isCollectionItem = true;
    var DxChange = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:data": null,
        "update:index": null,
        "update:pageIndex": null,
        "update:type": null
      },
      props: {
        data: Object,
        index: Number,
        pageIndex: Number,
        type: String
      }
    });
    exports.DxChange = DxChange;
    DxChange.$_optionName = "changes";
    DxChange.$_isCollectionItem = true;
    var DxColCountByScreen = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:lg": null,
        "update:md": null,
        "update:sm": null,
        "update:xs": null
      },
      props: {
        lg: Number,
        md: Number,
        sm: Number,
        xs: Number
      }
    });
    exports.DxColCountByScreen = DxColCountByScreen;
    DxColCountByScreen.$_optionName = "colCountByScreen";
    var DxCollision = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null
      },
      props: {
        x: String,
        y: String
      }
    });
    exports.DxCollision = DxCollision;
    DxCollision.$_optionName = "collision";
    var DxColumn = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignment": null,
        "update:allowEditing": null,
        "update:allowExporting": null,
        "update:allowFiltering": null,
        "update:allowFixing": null,
        "update:allowGrouping": null,
        "update:allowHeaderFiltering": null,
        "update:allowHiding": null,
        "update:allowReordering": null,
        "update:allowResizing": null,
        "update:allowSearch": null,
        "update:allowSorting": null,
        "update:autoExpandGroup": null,
        "update:buttons": null,
        "update:calculateCellValue": null,
        "update:calculateDisplayValue": null,
        "update:calculateFilterExpression": null,
        "update:calculateGroupValue": null,
        "update:calculateSortValue": null,
        "update:caption": null,
        "update:cellTemplate": null,
        "update:columns": null,
        "update:cssClass": null,
        "update:customizeText": null,
        "update:dataField": null,
        "update:dataType": null,
        "update:editCellTemplate": null,
        "update:editorOptions": null,
        "update:encodeHtml": null,
        "update:falseText": null,
        "update:filterOperations": null,
        "update:filterType": null,
        "update:filterValue": null,
        "update:filterValues": null,
        "update:fixed": null,
        "update:fixedPosition": null,
        "update:format": null,
        "update:formItem": null,
        "update:groupCellTemplate": null,
        "update:grouped": null,
        "update:groupIndex": null,
        "update:headerCellTemplate": null,
        "update:headerFilter": null,
        "update:hidingPriority": null,
        "update:isBand": null,
        "update:lookup": null,
        "update:minWidth": null,
        "update:name": null,
        "update:ownerBand": null,
        "update:renderAsync": null,
        "update:resized": null,
        "update:selectedFilterOperation": null,
        "update:setCellValue": null,
        "update:showEditorAlways": null,
        "update:showInColumnChooser": null,
        "update:showWhenGrouped": null,
        "update:sortIndex": null,
        "update:sortingMethod": null,
        "update:sortOrder": null,
        "update:trueText": null,
        "update:type": null,
        "update:validationRules": null,
        "update:visible": null,
        "update:visibleIndex": null,
        "update:width": null
      },
      props: {
        alignment: String,
        allowEditing: Boolean,
        allowExporting: Boolean,
        allowFiltering: Boolean,
        allowFixing: Boolean,
        allowGrouping: Boolean,
        allowHeaderFiltering: Boolean,
        allowHiding: Boolean,
        allowReordering: Boolean,
        allowResizing: Boolean,
        allowSearch: Boolean,
        allowSorting: Boolean,
        autoExpandGroup: Boolean,
        buttons: Array,
        calculateCellValue: Function,
        calculateDisplayValue: [Function, String],
        calculateFilterExpression: Function,
        calculateGroupValue: [Function, String],
        calculateSortValue: [Function, String],
        caption: String,
        cellTemplate: {},
        columns: Array,
        cssClass: String,
        customizeText: Function,
        dataField: String,
        dataType: String,
        editCellTemplate: {},
        editorOptions: {},
        encodeHtml: Boolean,
        falseText: String,
        filterOperations: Array,
        filterType: String,
        filterValue: {},
        filterValues: Array,
        fixed: Boolean,
        fixedPosition: String,
        format: [Object, Function, String],
        formItem: Object,
        groupCellTemplate: {},
        grouped: Boolean,
        groupIndex: Number,
        headerCellTemplate: {},
        headerFilter: Object,
        hidingPriority: Number,
        isBand: Boolean,
        lookup: Object,
        minWidth: Number,
        name: String,
        ownerBand: Number,
        renderAsync: Boolean,
        resized: Function,
        selectedFilterOperation: String,
        setCellValue: Function,
        showEditorAlways: Boolean,
        showInColumnChooser: Boolean,
        showWhenGrouped: Boolean,
        sortIndex: Number,
        sortingMethod: Function,
        sortOrder: String,
        trueText: String,
        type: String,
        validationRules: Array,
        visible: Boolean,
        visibleIndex: Number,
        width: [Number, String]
      }
    });
    exports.DxColumn = DxColumn;
    DxColumn.$_optionName = "columns";
    DxColumn.$_isCollectionItem = true;
    DxColumn.$_expectedChildren = {
      AsyncRule: { isCollectionItem: true, optionName: "validationRules" },
      button: { isCollectionItem: true, optionName: "buttons" },
      columnHeaderFilter: { isCollectionItem: false, optionName: "headerFilter" },
      columnLookup: { isCollectionItem: false, optionName: "lookup" },
      CompareRule: { isCollectionItem: true, optionName: "validationRules" },
      CustomRule: { isCollectionItem: true, optionName: "validationRules" },
      EmailRule: { isCollectionItem: true, optionName: "validationRules" },
      format: { isCollectionItem: false, optionName: "format" },
      formItem: { isCollectionItem: false, optionName: "formItem" },
      headerFilter: { isCollectionItem: false, optionName: "headerFilter" },
      lookup: { isCollectionItem: false, optionName: "lookup" },
      NumericRule: { isCollectionItem: true, optionName: "validationRules" },
      PatternRule: { isCollectionItem: true, optionName: "validationRules" },
      RangeRule: { isCollectionItem: true, optionName: "validationRules" },
      RequiredRule: { isCollectionItem: true, optionName: "validationRules" },
      StringLengthRule: { isCollectionItem: true, optionName: "validationRules" },
      validationRule: { isCollectionItem: true, optionName: "validationRules" }
    };
    var DxColumnChooser = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSearch": null,
        "update:emptyPanelText": null,
        "update:enabled": null,
        "update:height": null,
        "update:mode": null,
        "update:searchTimeout": null,
        "update:title": null,
        "update:width": null
      },
      props: {
        allowSearch: Boolean,
        emptyPanelText: String,
        enabled: Boolean,
        height: Number,
        mode: String,
        searchTimeout: Number,
        title: String,
        width: Number
      }
    });
    exports.DxColumnChooser = DxColumnChooser;
    DxColumnChooser.$_optionName = "columnChooser";
    var DxColumnFixing = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:enabled": null,
        "update:texts": null
      },
      props: {
        enabled: Boolean,
        texts: Object
      }
    });
    exports.DxColumnFixing = DxColumnFixing;
    DxColumnFixing.$_optionName = "columnFixing";
    DxColumnFixing.$_expectedChildren = {
      columnFixingTexts: { isCollectionItem: false, optionName: "texts" },
      texts: { isCollectionItem: false, optionName: "texts" }
    };
    var DxColumnFixingTexts = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:fix": null,
        "update:leftPosition": null,
        "update:rightPosition": null,
        "update:unfix": null
      },
      props: {
        fix: String,
        leftPosition: String,
        rightPosition: String,
        unfix: String
      }
    });
    exports.DxColumnFixingTexts = DxColumnFixingTexts;
    DxColumnFixingTexts.$_optionName = "texts";
    var DxColumnHeaderFilter = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSearch": null,
        "update:dataSource": null,
        "update:groupInterval": null,
        "update:height": null,
        "update:searchMode": null,
        "update:width": null
      },
      props: {
        allowSearch: Boolean,
        dataSource: [Array, Object, Function],
        groupInterval: [Number, String],
        height: Number,
        searchMode: String,
        width: Number
      }
    });
    exports.DxColumnHeaderFilter = DxColumnHeaderFilter;
    DxColumnHeaderFilter.$_optionName = "headerFilter";
    var DxColumnLookup = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowClearing": null,
        "update:calculateCellValue": null,
        "update:dataSource": null,
        "update:displayExpr": null,
        "update:valueExpr": null
      },
      props: {
        allowClearing: Boolean,
        calculateCellValue: Function,
        dataSource: [Array, Object, Function],
        displayExpr: [Function, String],
        valueExpr: String
      }
    });
    exports.DxColumnLookup = DxColumnLookup;
    DxColumnLookup.$_optionName = "lookup";
    var DxCompareRule = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:comparisonTarget": null,
        "update:comparisonType": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:type": null
      },
      props: {
        comparisonTarget: Function,
        comparisonType: String,
        ignoreEmptyValue: Boolean,
        message: String,
        type: String
      }
    });
    exports.DxCompareRule = DxCompareRule;
    DxCompareRule.$_optionName = "validationRules";
    DxCompareRule.$_isCollectionItem = true;
    DxCompareRule.$_predefinedProps = {
      type: "compare"
    };
    var DxCursorOffset = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null
      },
      props: {
        x: Number,
        y: Number
      }
    });
    exports.DxCursorOffset = DxCursorOffset;
    DxCursorOffset.$_optionName = "cursorOffset";
    var DxCustomOperation = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:calculateFilterExpression": null,
        "update:caption": null,
        "update:customizeText": null,
        "update:dataTypes": null,
        "update:editorTemplate": null,
        "update:hasValue": null,
        "update:icon": null,
        "update:name": null
      },
      props: {
        calculateFilterExpression: Function,
        caption: String,
        customizeText: Function,
        dataTypes: Array,
        editorTemplate: {},
        hasValue: Boolean,
        icon: String,
        name: String
      }
    });
    exports.DxCustomOperation = DxCustomOperation;
    DxCustomOperation.$_optionName = "customOperations";
    DxCustomOperation.$_isCollectionItem = true;
    var DxCustomRule = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:reevaluate": null,
        "update:type": null,
        "update:validationCallback": null
      },
      props: {
        ignoreEmptyValue: Boolean,
        message: String,
        reevaluate: Boolean,
        type: String,
        validationCallback: Function
      }
    });
    exports.DxCustomRule = DxCustomRule;
    DxCustomRule.$_optionName = "validationRules";
    DxCustomRule.$_isCollectionItem = true;
    DxCustomRule.$_predefinedProps = {
      type: "custom"
    };
    var DxDataGridHeaderFilter = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSearch": null,
        "update:height": null,
        "update:searchTimeout": null,
        "update:texts": null,
        "update:visible": null,
        "update:width": null
      },
      props: {
        allowSearch: Boolean,
        height: Number,
        searchTimeout: Number,
        texts: Object,
        visible: Boolean,
        width: Number
      }
    });
    exports.DxDataGridHeaderFilter = DxDataGridHeaderFilter;
    DxDataGridHeaderFilter.$_optionName = "headerFilter";
    DxDataGridHeaderFilter.$_expectedChildren = {
      dataGridHeaderFilterTexts: { isCollectionItem: false, optionName: "texts" },
      texts: { isCollectionItem: false, optionName: "texts" }
    };
    var DxDataGridHeaderFilterTexts = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:cancel": null,
        "update:emptyValue": null,
        "update:ok": null
      },
      props: {
        cancel: String,
        emptyValue: String,
        ok: String
      }
    });
    exports.DxDataGridHeaderFilterTexts = DxDataGridHeaderFilterTexts;
    DxDataGridHeaderFilterTexts.$_optionName = "texts";
    var DxEditing = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowAdding": null,
        "update:allowDeleting": null,
        "update:allowUpdating": null,
        "update:changes": null,
        "update:confirmDelete": null,
        "update:editColumnName": null,
        "update:editRowKey": null,
        "update:form": null,
        "update:mode": null,
        "update:popup": null,
        "update:refreshMode": null,
        "update:selectTextOnEditStart": null,
        "update:startEditAction": null,
        "update:texts": null,
        "update:useIcons": null
      },
      props: {
        allowAdding: Boolean,
        allowDeleting: [Boolean, Function],
        allowUpdating: [Boolean, Function],
        changes: Array,
        confirmDelete: Boolean,
        editColumnName: String,
        editRowKey: {},
        form: Object,
        mode: String,
        popup: Object,
        refreshMode: String,
        selectTextOnEditStart: Boolean,
        startEditAction: String,
        texts: {},
        useIcons: Boolean
      }
    });
    exports.DxEditing = DxEditing;
    DxEditing.$_optionName = "editing";
    DxEditing.$_expectedChildren = {
      change: { isCollectionItem: true, optionName: "changes" },
      editingTexts: { isCollectionItem: false, optionName: "texts" },
      form: { isCollectionItem: false, optionName: "form" },
      popup: { isCollectionItem: false, optionName: "popup" },
      texts: { isCollectionItem: false, optionName: "texts" }
    };
    var DxEditingTexts = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:addRow": null,
        "update:cancelAllChanges": null,
        "update:cancelRowChanges": null,
        "update:confirmDeleteMessage": null,
        "update:confirmDeleteTitle": null,
        "update:deleteRow": null,
        "update:editRow": null,
        "update:saveAllChanges": null,
        "update:saveRowChanges": null,
        "update:undeleteRow": null,
        "update:validationCancelChanges": null
      },
      props: {
        addRow: String,
        cancelAllChanges: String,
        cancelRowChanges: String,
        confirmDeleteMessage: String,
        confirmDeleteTitle: String,
        deleteRow: String,
        editRow: String,
        saveAllChanges: String,
        saveRowChanges: String,
        undeleteRow: String,
        validationCancelChanges: String
      }
    });
    exports.DxEditingTexts = DxEditingTexts;
    DxEditingTexts.$_optionName = "texts";
    var DxEmailRule = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:type": null
      },
      props: {
        ignoreEmptyValue: Boolean,
        message: String,
        type: String
      }
    });
    exports.DxEmailRule = DxEmailRule;
    DxEmailRule.$_optionName = "validationRules";
    DxEmailRule.$_isCollectionItem = true;
    DxEmailRule.$_predefinedProps = {
      type: "email"
    };
    var DxExport = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowExportSelectedData": null,
        "update:customizeExcelCell": null,
        "update:enabled": null,
        "update:excelFilterEnabled": null,
        "update:excelWrapTextEnabled": null,
        "update:fileName": null,
        "update:ignoreExcelErrors": null,
        "update:proxyUrl": null,
        "update:texts": null
      },
      props: {
        allowExportSelectedData: Boolean,
        customizeExcelCell: Function,
        enabled: Boolean,
        excelFilterEnabled: Boolean,
        excelWrapTextEnabled: Boolean,
        fileName: String,
        ignoreExcelErrors: Boolean,
        proxyUrl: String,
        texts: Object
      }
    });
    exports.DxExport = DxExport;
    DxExport.$_optionName = "export";
    DxExport.$_expectedChildren = {
      exportTexts: { isCollectionItem: false, optionName: "texts" },
      texts: { isCollectionItem: false, optionName: "texts" }
    };
    var DxExportTexts = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:exportAll": null,
        "update:exportSelectedRows": null,
        "update:exportTo": null
      },
      props: {
        exportAll: String,
        exportSelectedRows: String,
        exportTo: String
      }
    });
    exports.DxExportTexts = DxExportTexts;
    DxExportTexts.$_optionName = "texts";
    var DxField = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:calculateFilterExpression": null,
        "update:caption": null,
        "update:customizeText": null,
        "update:dataField": null,
        "update:dataType": null,
        "update:defaultFilterOperation": null,
        "update:editorOptions": null,
        "update:editorTemplate": null,
        "update:falseText": null,
        "update:filterOperations": null,
        "update:format": null,
        "update:lookup": null,
        "update:name": null,
        "update:trueText": null
      },
      props: {
        calculateFilterExpression: Function,
        caption: String,
        customizeText: Function,
        dataField: String,
        dataType: String,
        defaultFilterOperation: String,
        editorOptions: {},
        editorTemplate: {},
        falseText: String,
        filterOperations: Array,
        format: [Object, Function, String],
        lookup: Object,
        name: String,
        trueText: String
      }
    });
    exports.DxField = DxField;
    DxField.$_optionName = "fields";
    DxField.$_isCollectionItem = true;
    DxField.$_expectedChildren = {
      fieldLookup: { isCollectionItem: false, optionName: "lookup" },
      format: { isCollectionItem: false, optionName: "format" },
      lookup: { isCollectionItem: false, optionName: "lookup" }
    };
    var DxFieldLookup = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowClearing": null,
        "update:dataSource": null,
        "update:displayExpr": null,
        "update:valueExpr": null
      },
      props: {
        allowClearing: Boolean,
        dataSource: [Array, Object],
        displayExpr: [Function, String],
        valueExpr: [Function, String]
      }
    });
    exports.DxFieldLookup = DxFieldLookup;
    DxFieldLookup.$_optionName = "lookup";
    var DxFilterBuilder = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:allowHierarchicalFields": null,
        "update:bindingOptions": null,
        "update:customOperations": null,
        "update:disabled": null,
        "update:elementAttr": null,
        "update:fields": null,
        "update:filterOperationDescriptions": null,
        "update:focusStateEnabled": null,
        "update:groupOperationDescriptions": null,
        "update:groupOperations": null,
        "update:height": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:maxGroupLevel": null,
        "update:onContentReady": null,
        "update:onDisposing": null,
        "update:onEditorPrepared": null,
        "update:onEditorPreparing": null,
        "update:onFocusIn": null,
        "update:onFocusOut": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:onValueChanged": null,
        "update:rtlEnabled": null,
        "update:tabIndex": null,
        "update:value": null,
        "update:visible": null,
        "update:width": null
      },
      props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        allowHierarchicalFields: Boolean,
        bindingOptions: {},
        customOperations: Array,
        disabled: Boolean,
        elementAttr: {},
        fields: Array,
        filterOperationDescriptions: Object,
        focusStateEnabled: Boolean,
        groupOperationDescriptions: Object,
        groupOperations: Array,
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        maxGroupLevel: Number,
        onContentReady: Function,
        onDisposing: Function,
        onEditorPrepared: Function,
        onEditorPreparing: Function,
        onFocusIn: Function,
        onFocusOut: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        onValueChanged: Function,
        rtlEnabled: Boolean,
        tabIndex: Number,
        value: [Array, Function, String],
        visible: Boolean,
        width: [Function, Number, String]
      }
    });
    exports.DxFilterBuilder = DxFilterBuilder;
    DxFilterBuilder.$_optionName = "filterBuilder";
    DxFilterBuilder.$_expectedChildren = {
      customOperation: { isCollectionItem: true, optionName: "customOperations" },
      field: { isCollectionItem: true, optionName: "fields" },
      filterOperationDescriptions: { isCollectionItem: false, optionName: "filterOperationDescriptions" },
      groupOperationDescriptions: { isCollectionItem: false, optionName: "groupOperationDescriptions" }
    };
    var DxFilterBuilderPopup = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:animation": null,
        "update:bindingOptions": null,
        "update:closeOnOutsideClick": null,
        "update:container": null,
        "update:contentTemplate": null,
        "update:deferRendering": null,
        "update:disabled": null,
        "update:dragEnabled": null,
        "update:elementAttr": null,
        "update:focusStateEnabled": null,
        "update:fullScreen": null,
        "update:height": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:maxHeight": null,
        "update:maxWidth": null,
        "update:minHeight": null,
        "update:minWidth": null,
        "update:onContentReady": null,
        "update:onDisposing": null,
        "update:onFocusIn": null,
        "update:onFocusOut": null,
        "update:onHidden": null,
        "update:onHiding": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:onResize": null,
        "update:onResizeEnd": null,
        "update:onResizeStart": null,
        "update:onShowing": null,
        "update:onShown": null,
        "update:onTitleRendered": null,
        "update:position": null,
        "update:resizeEnabled": null,
        "update:rtlEnabled": null,
        "update:shading": null,
        "update:shadingColor": null,
        "update:showCloseButton": null,
        "update:showTitle": null,
        "update:tabIndex": null,
        "update:title": null,
        "update:titleTemplate": null,
        "update:toolbarItems": null,
        "update:visible": null,
        "update:width": null
      },
      props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        animation: Object,
        bindingOptions: {},
        closeOnOutsideClick: [Boolean, Function],
        container: {},
        contentTemplate: {},
        deferRendering: Boolean,
        disabled: Boolean,
        dragEnabled: Boolean,
        elementAttr: {},
        focusStateEnabled: Boolean,
        fullScreen: Boolean,
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        maxHeight: [Function, Number, String],
        maxWidth: [Function, Number, String],
        minHeight: [Function, Number, String],
        minWidth: [Function, Number, String],
        onContentReady: Function,
        onDisposing: Function,
        onFocusIn: Function,
        onFocusOut: Function,
        onHidden: Function,
        onHiding: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        onResize: Function,
        onResizeEnd: Function,
        onResizeStart: Function,
        onShowing: Function,
        onShown: Function,
        onTitleRendered: Function,
        position: [Function, Object, String],
        resizeEnabled: Boolean,
        rtlEnabled: Boolean,
        shading: Boolean,
        shadingColor: String,
        showCloseButton: Boolean,
        showTitle: Boolean,
        tabIndex: Number,
        title: String,
        titleTemplate: {},
        toolbarItems: Array,
        visible: Boolean,
        width: [Function, Number, String]
      }
    });
    exports.DxFilterBuilderPopup = DxFilterBuilderPopup;
    DxFilterBuilderPopup.$_optionName = "filterBuilderPopup";
    var DxFilterOperationDescriptions = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:between": null,
        "update:contains": null,
        "update:endsWith": null,
        "update:equal": null,
        "update:greaterThan": null,
        "update:greaterThanOrEqual": null,
        "update:isBlank": null,
        "update:isNotBlank": null,
        "update:lessThan": null,
        "update:lessThanOrEqual": null,
        "update:notContains": null,
        "update:notEqual": null,
        "update:startsWith": null
      },
      props: {
        between: String,
        contains: String,
        endsWith: String,
        equal: String,
        greaterThan: String,
        greaterThanOrEqual: String,
        isBlank: String,
        isNotBlank: String,
        lessThan: String,
        lessThanOrEqual: String,
        notContains: String,
        notEqual: String,
        startsWith: String
      }
    });
    exports.DxFilterOperationDescriptions = DxFilterOperationDescriptions;
    DxFilterOperationDescriptions.$_optionName = "filterOperationDescriptions";
    var DxFilterPanel = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:customizeText": null,
        "update:filterEnabled": null,
        "update:texts": null,
        "update:visible": null
      },
      props: {
        customizeText: Function,
        filterEnabled: Boolean,
        texts: Object,
        visible: Boolean
      }
    });
    exports.DxFilterPanel = DxFilterPanel;
    DxFilterPanel.$_optionName = "filterPanel";
    DxFilterPanel.$_expectedChildren = {
      filterPanelTexts: { isCollectionItem: false, optionName: "texts" },
      texts: { isCollectionItem: false, optionName: "texts" }
    };
    var DxFilterPanelTexts = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:clearFilter": null,
        "update:createFilter": null,
        "update:filterEnabledHint": null
      },
      props: {
        clearFilter: String,
        createFilter: String,
        filterEnabledHint: String
      }
    });
    exports.DxFilterPanelTexts = DxFilterPanelTexts;
    DxFilterPanelTexts.$_optionName = "texts";
    var DxFilterRow = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:applyFilter": null,
        "update:applyFilterText": null,
        "update:betweenEndText": null,
        "update:betweenStartText": null,
        "update:operationDescriptions": null,
        "update:resetOperationText": null,
        "update:showAllText": null,
        "update:showOperationChooser": null,
        "update:visible": null
      },
      props: {
        applyFilter: String,
        applyFilterText: String,
        betweenEndText: String,
        betweenStartText: String,
        operationDescriptions: Object,
        resetOperationText: String,
        showAllText: String,
        showOperationChooser: Boolean,
        visible: Boolean
      }
    });
    exports.DxFilterRow = DxFilterRow;
    DxFilterRow.$_optionName = "filterRow";
    DxFilterRow.$_expectedChildren = {
      operationDescriptions: { isCollectionItem: false, optionName: "operationDescriptions" }
    };
    var DxForm = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:alignItemLabels": null,
        "update:alignItemLabelsInAllGroups": null,
        "update:bindingOptions": null,
        "update:colCount": null,
        "update:colCountByScreen": null,
        "update:customizeItem": null,
        "update:disabled": null,
        "update:elementAttr": null,
        "update:focusStateEnabled": null,
        "update:formData": null,
        "update:height": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:items": null,
        "update:labelLocation": null,
        "update:minColWidth": null,
        "update:onContentReady": null,
        "update:onDisposing": null,
        "update:onEditorEnterKey": null,
        "update:onFieldDataChanged": null,
        "update:onFocusIn": null,
        "update:onFocusOut": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:optionalMark": null,
        "update:readOnly": null,
        "update:requiredMark": null,
        "update:requiredMessage": null,
        "update:rtlEnabled": null,
        "update:screenByWidth": null,
        "update:scrollingEnabled": null,
        "update:showColonAfterLabel": null,
        "update:showOptionalMark": null,
        "update:showRequiredMark": null,
        "update:showValidationSummary": null,
        "update:tabIndex": null,
        "update:validationGroup": null,
        "update:visible": null,
        "update:width": null
      },
      props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        alignItemLabels: Boolean,
        alignItemLabelsInAllGroups: Boolean,
        bindingOptions: {},
        colCount: [Number, String],
        colCountByScreen: Object,
        customizeItem: Function,
        disabled: Boolean,
        elementAttr: {},
        focusStateEnabled: Boolean,
        formData: {},
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        items: Array,
        labelLocation: String,
        minColWidth: Number,
        onContentReady: Function,
        onDisposing: Function,
        onEditorEnterKey: Function,
        onFieldDataChanged: Function,
        onFocusIn: Function,
        onFocusOut: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        optionalMark: String,
        readOnly: Boolean,
        requiredMark: String,
        requiredMessage: String,
        rtlEnabled: Boolean,
        screenByWidth: Function,
        scrollingEnabled: Boolean,
        showColonAfterLabel: Boolean,
        showOptionalMark: Boolean,
        showRequiredMark: Boolean,
        showValidationSummary: Boolean,
        tabIndex: Number,
        validationGroup: String,
        visible: Boolean,
        width: [Function, Number, String]
      }
    });
    exports.DxForm = DxForm;
    DxForm.$_optionName = "form";
    DxForm.$_expectedChildren = {
      colCountByScreen: { isCollectionItem: false, optionName: "colCountByScreen" }
    };
    var DxFormat = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:currency": null,
        "update:formatter": null,
        "update:parser": null,
        "update:precision": null,
        "update:type": null
      },
      props: {
        currency: String,
        formatter: Function,
        parser: Function,
        precision: Number,
        type: String
      }
    });
    exports.DxFormat = DxFormat;
    DxFormat.$_optionName = "format";
    var DxFormItem = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:colSpan": null,
        "update:cssClass": null,
        "update:dataField": null,
        "update:editorOptions": null,
        "update:editorType": null,
        "update:helpText": null,
        "update:isRequired": null,
        "update:itemType": null,
        "update:label": null,
        "update:name": null,
        "update:template": null,
        "update:validationRules": null,
        "update:visible": null,
        "update:visibleIndex": null
      },
      props: {
        colSpan: Number,
        cssClass: String,
        dataField: String,
        editorOptions: {},
        editorType: String,
        helpText: String,
        isRequired: Boolean,
        itemType: String,
        label: Object,
        name: String,
        template: {},
        validationRules: Array,
        visible: Boolean,
        visibleIndex: Number
      }
    });
    exports.DxFormItem = DxFormItem;
    DxFormItem.$_optionName = "formItem";
    DxFormItem.$_expectedChildren = {
      AsyncRule: { isCollectionItem: true, optionName: "validationRules" },
      CompareRule: { isCollectionItem: true, optionName: "validationRules" },
      CustomRule: { isCollectionItem: true, optionName: "validationRules" },
      EmailRule: { isCollectionItem: true, optionName: "validationRules" },
      label: { isCollectionItem: false, optionName: "label" },
      NumericRule: { isCollectionItem: true, optionName: "validationRules" },
      PatternRule: { isCollectionItem: true, optionName: "validationRules" },
      RangeRule: { isCollectionItem: true, optionName: "validationRules" },
      RequiredRule: { isCollectionItem: true, optionName: "validationRules" },
      StringLengthRule: { isCollectionItem: true, optionName: "validationRules" },
      validationRule: { isCollectionItem: true, optionName: "validationRules" }
    };
    var DxGrouping = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowCollapsing": null,
        "update:autoExpandAll": null,
        "update:contextMenuEnabled": null,
        "update:expandMode": null,
        "update:texts": null
      },
      props: {
        allowCollapsing: Boolean,
        autoExpandAll: Boolean,
        contextMenuEnabled: Boolean,
        expandMode: String,
        texts: Object
      }
    });
    exports.DxGrouping = DxGrouping;
    DxGrouping.$_optionName = "grouping";
    DxGrouping.$_expectedChildren = {
      groupingTexts: { isCollectionItem: false, optionName: "texts" },
      texts: { isCollectionItem: false, optionName: "texts" }
    };
    var DxGroupingTexts = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:groupByThisColumn": null,
        "update:groupContinuedMessage": null,
        "update:groupContinuesMessage": null,
        "update:ungroup": null,
        "update:ungroupAll": null
      },
      props: {
        groupByThisColumn: String,
        groupContinuedMessage: String,
        groupContinuesMessage: String,
        ungroup: String,
        ungroupAll: String
      }
    });
    exports.DxGroupingTexts = DxGroupingTexts;
    DxGroupingTexts.$_optionName = "texts";
    var DxGroupItem = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignByColumn": null,
        "update:column": null,
        "update:customizeText": null,
        "update:displayFormat": null,
        "update:name": null,
        "update:showInColumn": null,
        "update:showInGroupFooter": null,
        "update:skipEmptyValues": null,
        "update:summaryType": null,
        "update:valueFormat": null
      },
      props: {
        alignByColumn: Boolean,
        column: String,
        customizeText: Function,
        displayFormat: String,
        name: String,
        showInColumn: String,
        showInGroupFooter: Boolean,
        skipEmptyValues: Boolean,
        summaryType: String,
        valueFormat: [Object, Function, String]
      }
    });
    exports.DxGroupItem = DxGroupItem;
    DxGroupItem.$_optionName = "groupItems";
    DxGroupItem.$_isCollectionItem = true;
    DxGroupItem.$_expectedChildren = {
      valueFormat: { isCollectionItem: false, optionName: "valueFormat" }
    };
    var DxGroupOperationDescriptions = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:and": null,
        "update:notAnd": null,
        "update:notOr": null,
        "update:or": null
      },
      props: {
        and: String,
        notAnd: String,
        notOr: String,
        or: String
      }
    });
    exports.DxGroupOperationDescriptions = DxGroupOperationDescriptions;
    DxGroupOperationDescriptions.$_optionName = "groupOperationDescriptions";
    var DxGroupPanel = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowColumnDragging": null,
        "update:emptyPanelText": null,
        "update:visible": null
      },
      props: {
        allowColumnDragging: Boolean,
        emptyPanelText: String,
        visible: [Boolean, String]
      }
    });
    exports.DxGroupPanel = DxGroupPanel;
    DxGroupPanel.$_optionName = "groupPanel";
    var DxHeaderFilter = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSearch": null,
        "update:dataSource": null,
        "update:groupInterval": null,
        "update:height": null,
        "update:searchMode": null,
        "update:searchTimeout": null,
        "update:texts": null,
        "update:visible": null,
        "update:width": null
      },
      props: {
        allowSearch: Boolean,
        dataSource: [Array, Object, Function],
        groupInterval: [Number, String],
        height: Number,
        searchMode: String,
        searchTimeout: Number,
        texts: Object,
        visible: Boolean,
        width: Number
      }
    });
    exports.DxHeaderFilter = DxHeaderFilter;
    DxHeaderFilter.$_optionName = "headerFilter";
    var DxHide = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:complete": null,
        "update:delay": null,
        "update:direction": null,
        "update:duration": null,
        "update:easing": null,
        "update:from": null,
        "update:staggerDelay": null,
        "update:start": null,
        "update:to": null,
        "update:type": null
      },
      props: {
        complete: Function,
        delay: Number,
        direction: String,
        duration: Number,
        easing: String,
        from: {},
        staggerDelay: Number,
        start: Function,
        to: {},
        type: String
      }
    });
    exports.DxHide = DxHide;
    DxHide.$_optionName = "hide";
    var DxKeyboardNavigation = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:editOnKeyPress": null,
        "update:enabled": null,
        "update:enterKeyAction": null,
        "update:enterKeyDirection": null
      },
      props: {
        editOnKeyPress: Boolean,
        enabled: Boolean,
        enterKeyAction: String,
        enterKeyDirection: String
      }
    });
    exports.DxKeyboardNavigation = DxKeyboardNavigation;
    DxKeyboardNavigation.$_optionName = "keyboardNavigation";
    var DxLabel = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignment": null,
        "update:location": null,
        "update:showColon": null,
        "update:text": null,
        "update:visible": null
      },
      props: {
        alignment: String,
        location: String,
        showColon: Boolean,
        text: String,
        visible: Boolean
      }
    });
    exports.DxLabel = DxLabel;
    DxLabel.$_optionName = "label";
    var DxLoadPanel = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:enabled": null,
        "update:height": null,
        "update:indicatorSrc": null,
        "update:shading": null,
        "update:shadingColor": null,
        "update:showIndicator": null,
        "update:showPane": null,
        "update:text": null,
        "update:width": null
      },
      props: {
        enabled: [Boolean, String],
        height: Number,
        indicatorSrc: String,
        shading: Boolean,
        shadingColor: String,
        showIndicator: Boolean,
        showPane: Boolean,
        text: String,
        width: Number
      }
    });
    exports.DxLoadPanel = DxLoadPanel;
    DxLoadPanel.$_optionName = "loadPanel";
    var DxLookup = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowClearing": null,
        "update:calculateCellValue": null,
        "update:dataSource": null,
        "update:displayExpr": null,
        "update:valueExpr": null
      },
      props: {
        allowClearing: Boolean,
        calculateCellValue: Function,
        dataSource: [Array, Object, Function],
        displayExpr: [Function, String],
        valueExpr: String
      }
    });
    exports.DxLookup = DxLookup;
    DxLookup.$_optionName = "lookup";
    var DxMasterDetail = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:autoExpandAll": null,
        "update:enabled": null,
        "update:template": null
      },
      props: {
        autoExpandAll: Boolean,
        enabled: Boolean,
        template: {}
      }
    });
    exports.DxMasterDetail = DxMasterDetail;
    DxMasterDetail.$_optionName = "masterDetail";
    var DxMy = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null
      },
      props: {
        x: String,
        y: String
      }
    });
    exports.DxMy = DxMy;
    DxMy.$_optionName = "my";
    var DxNumericRule = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:type": null
      },
      props: {
        ignoreEmptyValue: Boolean,
        message: String,
        type: String
      }
    });
    exports.DxNumericRule = DxNumericRule;
    DxNumericRule.$_optionName = "validationRules";
    DxNumericRule.$_isCollectionItem = true;
    DxNumericRule.$_predefinedProps = {
      type: "numeric"
    };
    var DxOffset = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null
      },
      props: {
        x: Number,
        y: Number
      }
    });
    exports.DxOffset = DxOffset;
    DxOffset.$_optionName = "offset";
    var DxOperationDescriptions = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:between": null,
        "update:contains": null,
        "update:endsWith": null,
        "update:equal": null,
        "update:greaterThan": null,
        "update:greaterThanOrEqual": null,
        "update:lessThan": null,
        "update:lessThanOrEqual": null,
        "update:notContains": null,
        "update:notEqual": null,
        "update:startsWith": null
      },
      props: {
        between: String,
        contains: String,
        endsWith: String,
        equal: String,
        greaterThan: String,
        greaterThanOrEqual: String,
        lessThan: String,
        lessThanOrEqual: String,
        notContains: String,
        notEqual: String,
        startsWith: String
      }
    });
    exports.DxOperationDescriptions = DxOperationDescriptions;
    DxOperationDescriptions.$_optionName = "operationDescriptions";
    var DxPager = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowedPageSizes": null,
        "update:displayMode": null,
        "update:infoText": null,
        "update:showInfo": null,
        "update:showNavigationButtons": null,
        "update:showPageSizeSelector": null,
        "update:visible": null
      },
      props: {
        allowedPageSizes: [Array, String],
        displayMode: String,
        infoText: String,
        showInfo: Boolean,
        showNavigationButtons: Boolean,
        showPageSizeSelector: Boolean,
        visible: [Boolean, String]
      }
    });
    exports.DxPager = DxPager;
    DxPager.$_optionName = "pager";
    var DxPaging = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:enabled": null,
        "update:pageIndex": null,
        "update:pageSize": null
      },
      props: {
        enabled: Boolean,
        pageIndex: Number,
        pageSize: Number
      }
    });
    exports.DxPaging = DxPaging;
    DxPaging.$_optionName = "paging";
    var DxPatternRule = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:message": null,
        "update:pattern": null,
        "update:type": null
      },
      props: {
        ignoreEmptyValue: Boolean,
        message: String,
        pattern: {},
        type: String
      }
    });
    exports.DxPatternRule = DxPatternRule;
    DxPatternRule.$_optionName = "validationRules";
    DxPatternRule.$_isCollectionItem = true;
    DxPatternRule.$_predefinedProps = {
      type: "pattern"
    };
    var DxPopup = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:animation": null,
        "update:bindingOptions": null,
        "update:closeOnOutsideClick": null,
        "update:container": null,
        "update:contentTemplate": null,
        "update:deferRendering": null,
        "update:disabled": null,
        "update:dragEnabled": null,
        "update:elementAttr": null,
        "update:focusStateEnabled": null,
        "update:fullScreen": null,
        "update:height": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:maxHeight": null,
        "update:maxWidth": null,
        "update:minHeight": null,
        "update:minWidth": null,
        "update:onContentReady": null,
        "update:onDisposing": null,
        "update:onFocusIn": null,
        "update:onFocusOut": null,
        "update:onHidden": null,
        "update:onHiding": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:onResize": null,
        "update:onResizeEnd": null,
        "update:onResizeStart": null,
        "update:onShowing": null,
        "update:onShown": null,
        "update:onTitleRendered": null,
        "update:position": null,
        "update:resizeEnabled": null,
        "update:rtlEnabled": null,
        "update:shading": null,
        "update:shadingColor": null,
        "update:showCloseButton": null,
        "update:showTitle": null,
        "update:tabIndex": null,
        "update:title": null,
        "update:titleTemplate": null,
        "update:toolbarItems": null,
        "update:visible": null,
        "update:width": null
      },
      props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        animation: Object,
        bindingOptions: {},
        closeOnOutsideClick: [Boolean, Function],
        container: {},
        contentTemplate: {},
        deferRendering: Boolean,
        disabled: Boolean,
        dragEnabled: Boolean,
        elementAttr: {},
        focusStateEnabled: Boolean,
        fullScreen: Boolean,
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        maxHeight: [Function, Number, String],
        maxWidth: [Function, Number, String],
        minHeight: [Function, Number, String],
        minWidth: [Function, Number, String],
        onContentReady: Function,
        onDisposing: Function,
        onFocusIn: Function,
        onFocusOut: Function,
        onHidden: Function,
        onHiding: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        onResize: Function,
        onResizeEnd: Function,
        onResizeStart: Function,
        onShowing: Function,
        onShown: Function,
        onTitleRendered: Function,
        position: [Function, Object, String],
        resizeEnabled: Boolean,
        rtlEnabled: Boolean,
        shading: Boolean,
        shadingColor: String,
        showCloseButton: Boolean,
        showTitle: Boolean,
        tabIndex: Number,
        title: String,
        titleTemplate: {},
        toolbarItems: Array,
        visible: Boolean,
        width: [Function, Number, String]
      }
    });
    exports.DxPopup = DxPopup;
    DxPopup.$_optionName = "popup";
    DxPopup.$_expectedChildren = {
      animation: { isCollectionItem: false, optionName: "animation" },
      position: { isCollectionItem: false, optionName: "position" },
      toolbarItem: { isCollectionItem: true, optionName: "toolbarItems" }
    };
    var DxPosition = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:at": null,
        "update:boundary": null,
        "update:boundaryOffset": null,
        "update:collision": null,
        "update:my": null,
        "update:of": null,
        "update:offset": null
      },
      props: {
        at: [Object, String],
        boundary: {},
        boundaryOffset: [Object, String],
        collision: [Object, String],
        my: [Object, String],
        of: {},
        offset: [Object, String]
      }
    });
    exports.DxPosition = DxPosition;
    DxPosition.$_optionName = "position";
    DxPosition.$_expectedChildren = {
      at: { isCollectionItem: false, optionName: "at" },
      boundaryOffset: { isCollectionItem: false, optionName: "boundaryOffset" },
      collision: { isCollectionItem: false, optionName: "collision" },
      my: { isCollectionItem: false, optionName: "my" },
      offset: { isCollectionItem: false, optionName: "offset" }
    };
    var DxRangeRule = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:max": null,
        "update:message": null,
        "update:min": null,
        "update:reevaluate": null,
        "update:type": null
      },
      props: {
        ignoreEmptyValue: Boolean,
        max: {},
        message: String,
        min: {},
        reevaluate: Boolean,
        type: String
      }
    });
    exports.DxRangeRule = DxRangeRule;
    DxRangeRule.$_optionName = "validationRules";
    DxRangeRule.$_isCollectionItem = true;
    DxRangeRule.$_predefinedProps = {
      type: "range"
    };
    var DxRemoteOperations = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:filtering": null,
        "update:grouping": null,
        "update:groupPaging": null,
        "update:paging": null,
        "update:sorting": null,
        "update:summary": null
      },
      props: {
        filtering: Boolean,
        grouping: Boolean,
        groupPaging: Boolean,
        paging: Boolean,
        sorting: Boolean,
        summary: Boolean
      }
    });
    exports.DxRemoteOperations = DxRemoteOperations;
    DxRemoteOperations.$_optionName = "remoteOperations";
    var DxRequiredRule = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:message": null,
        "update:trim": null,
        "update:type": null
      },
      props: {
        message: String,
        trim: Boolean,
        type: String
      }
    });
    exports.DxRequiredRule = DxRequiredRule;
    DxRequiredRule.$_optionName = "validationRules";
    DxRequiredRule.$_isCollectionItem = true;
    DxRequiredRule.$_predefinedProps = {
      type: "required"
    };
    var DxRowDragging = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowDropInsideItem": null,
        "update:allowReordering": null,
        "update:autoScroll": null,
        "update:boundary": null,
        "update:container": null,
        "update:cursorOffset": null,
        "update:data": null,
        "update:dragDirection": null,
        "update:dragTemplate": null,
        "update:dropFeedbackMode": null,
        "update:filter": null,
        "update:group": null,
        "update:handle": null,
        "update:onAdd": null,
        "update:onDragChange": null,
        "update:onDragEnd": null,
        "update:onDragMove": null,
        "update:onDragStart": null,
        "update:onRemove": null,
        "update:onReorder": null,
        "update:scrollSensitivity": null,
        "update:scrollSpeed": null,
        "update:showDragIcons": null
      },
      props: {
        allowDropInsideItem: Boolean,
        allowReordering: Boolean,
        autoScroll: Boolean,
        boundary: {},
        container: {},
        cursorOffset: [Object, String],
        data: {},
        dragDirection: String,
        dragTemplate: {},
        dropFeedbackMode: String,
        filter: String,
        group: String,
        handle: String,
        onAdd: Function,
        onDragChange: Function,
        onDragEnd: Function,
        onDragMove: Function,
        onDragStart: Function,
        onRemove: Function,
        onReorder: Function,
        scrollSensitivity: Number,
        scrollSpeed: Number,
        showDragIcons: Boolean
      }
    });
    exports.DxRowDragging = DxRowDragging;
    DxRowDragging.$_optionName = "rowDragging";
    DxRowDragging.$_expectedChildren = {
      cursorOffset: { isCollectionItem: false, optionName: "cursorOffset" }
    };
    var DxScrolling = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:columnRenderingMode": null,
        "update:mode": null,
        "update:preloadEnabled": null,
        "update:rowRenderingMode": null,
        "update:scrollByContent": null,
        "update:scrollByThumb": null,
        "update:showScrollbar": null,
        "update:useNative": null
      },
      props: {
        columnRenderingMode: String,
        mode: String,
        preloadEnabled: Boolean,
        rowRenderingMode: String,
        scrollByContent: Boolean,
        scrollByThumb: Boolean,
        showScrollbar: String,
        useNative: [Boolean, String]
      }
    });
    exports.DxScrolling = DxScrolling;
    DxScrolling.$_optionName = "scrolling";
    var DxSearchPanel = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:highlightCaseSensitive": null,
        "update:highlightSearchText": null,
        "update:placeholder": null,
        "update:searchVisibleColumnsOnly": null,
        "update:text": null,
        "update:visible": null,
        "update:width": null
      },
      props: {
        highlightCaseSensitive: Boolean,
        highlightSearchText: Boolean,
        placeholder: String,
        searchVisibleColumnsOnly: Boolean,
        text: String,
        visible: Boolean,
        width: Number
      }
    });
    exports.DxSearchPanel = DxSearchPanel;
    DxSearchPanel.$_optionName = "searchPanel";
    var DxSelection = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSelectAll": null,
        "update:deferred": null,
        "update:maxFilterLengthInRequest": null,
        "update:mode": null,
        "update:selectAllMode": null,
        "update:showCheckBoxesMode": null
      },
      props: {
        allowSelectAll: Boolean,
        deferred: Boolean,
        maxFilterLengthInRequest: Number,
        mode: String,
        selectAllMode: String,
        showCheckBoxesMode: String
      }
    });
    exports.DxSelection = DxSelection;
    DxSelection.$_optionName = "selection";
    var DxShow = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:complete": null,
        "update:delay": null,
        "update:direction": null,
        "update:duration": null,
        "update:easing": null,
        "update:from": null,
        "update:staggerDelay": null,
        "update:start": null,
        "update:to": null,
        "update:type": null
      },
      props: {
        complete: Function,
        delay: Number,
        direction: String,
        duration: Number,
        easing: String,
        from: {},
        staggerDelay: Number,
        start: Function,
        to: {},
        type: String
      }
    });
    exports.DxShow = DxShow;
    DxShow.$_optionName = "show";
    var DxSortByGroupSummaryInfo = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:groupColumn": null,
        "update:sortOrder": null,
        "update:summaryItem": null
      },
      props: {
        groupColumn: String,
        sortOrder: String,
        summaryItem: [Number, String]
      }
    });
    exports.DxSortByGroupSummaryInfo = DxSortByGroupSummaryInfo;
    DxSortByGroupSummaryInfo.$_optionName = "sortByGroupSummaryInfo";
    DxSortByGroupSummaryInfo.$_isCollectionItem = true;
    var DxSorting = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ascendingText": null,
        "update:clearText": null,
        "update:descendingText": null,
        "update:mode": null,
        "update:showSortIndexes": null
      },
      props: {
        ascendingText: String,
        clearText: String,
        descendingText: String,
        mode: String,
        showSortIndexes: Boolean
      }
    });
    exports.DxSorting = DxSorting;
    DxSorting.$_optionName = "sorting";
    var DxStateStoring = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:customLoad": null,
        "update:customSave": null,
        "update:enabled": null,
        "update:savingTimeout": null,
        "update:storageKey": null,
        "update:type": null
      },
      props: {
        customLoad: Function,
        customSave: Function,
        enabled: Boolean,
        savingTimeout: Number,
        storageKey: String,
        type: String
      }
    });
    exports.DxStateStoring = DxStateStoring;
    DxStateStoring.$_optionName = "stateStoring";
    var DxStringLengthRule = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:ignoreEmptyValue": null,
        "update:max": null,
        "update:message": null,
        "update:min": null,
        "update:trim": null,
        "update:type": null
      },
      props: {
        ignoreEmptyValue: Boolean,
        max: Number,
        message: String,
        min: Number,
        trim: Boolean,
        type: String
      }
    });
    exports.DxStringLengthRule = DxStringLengthRule;
    DxStringLengthRule.$_optionName = "validationRules";
    DxStringLengthRule.$_isCollectionItem = true;
    DxStringLengthRule.$_predefinedProps = {
      type: "stringLength"
    };
    var DxSummary = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:calculateCustomSummary": null,
        "update:groupItems": null,
        "update:recalculateWhileEditing": null,
        "update:skipEmptyValues": null,
        "update:texts": null,
        "update:totalItems": null
      },
      props: {
        calculateCustomSummary: Function,
        groupItems: Array,
        recalculateWhileEditing: Boolean,
        skipEmptyValues: Boolean,
        texts: Object,
        totalItems: Array
      }
    });
    exports.DxSummary = DxSummary;
    DxSummary.$_optionName = "summary";
    DxSummary.$_expectedChildren = {
      groupItem: { isCollectionItem: true, optionName: "groupItems" },
      summaryTexts: { isCollectionItem: false, optionName: "texts" },
      texts: { isCollectionItem: false, optionName: "texts" },
      totalItem: { isCollectionItem: true, optionName: "totalItems" }
    };
    var DxSummaryTexts = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:avg": null,
        "update:avgOtherColumn": null,
        "update:count": null,
        "update:max": null,
        "update:maxOtherColumn": null,
        "update:min": null,
        "update:minOtherColumn": null,
        "update:sum": null,
        "update:sumOtherColumn": null
      },
      props: {
        avg: String,
        avgOtherColumn: String,
        count: String,
        max: String,
        maxOtherColumn: String,
        min: String,
        minOtherColumn: String,
        sum: String,
        sumOtherColumn: String
      }
    });
    exports.DxSummaryTexts = DxSummaryTexts;
    DxSummaryTexts.$_optionName = "texts";
    var DxTexts = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:addRow": null,
        "update:avg": null,
        "update:avgOtherColumn": null,
        "update:cancel": null,
        "update:cancelAllChanges": null,
        "update:cancelRowChanges": null,
        "update:clearFilter": null,
        "update:confirmDeleteMessage": null,
        "update:confirmDeleteTitle": null,
        "update:count": null,
        "update:createFilter": null,
        "update:deleteRow": null,
        "update:editRow": null,
        "update:emptyValue": null,
        "update:exportAll": null,
        "update:exportSelectedRows": null,
        "update:exportTo": null,
        "update:filterEnabledHint": null,
        "update:fix": null,
        "update:groupByThisColumn": null,
        "update:groupContinuedMessage": null,
        "update:groupContinuesMessage": null,
        "update:leftPosition": null,
        "update:max": null,
        "update:maxOtherColumn": null,
        "update:min": null,
        "update:minOtherColumn": null,
        "update:ok": null,
        "update:rightPosition": null,
        "update:saveAllChanges": null,
        "update:saveRowChanges": null,
        "update:sum": null,
        "update:sumOtherColumn": null,
        "update:undeleteRow": null,
        "update:unfix": null,
        "update:ungroup": null,
        "update:ungroupAll": null,
        "update:validationCancelChanges": null
      },
      props: {
        addRow: String,
        avg: String,
        avgOtherColumn: String,
        cancel: String,
        cancelAllChanges: String,
        cancelRowChanges: String,
        clearFilter: String,
        confirmDeleteMessage: String,
        confirmDeleteTitle: String,
        count: String,
        createFilter: String,
        deleteRow: String,
        editRow: String,
        emptyValue: String,
        exportAll: String,
        exportSelectedRows: String,
        exportTo: String,
        filterEnabledHint: String,
        fix: String,
        groupByThisColumn: String,
        groupContinuedMessage: String,
        groupContinuesMessage: String,
        leftPosition: String,
        max: String,
        maxOtherColumn: String,
        min: String,
        minOtherColumn: String,
        ok: String,
        rightPosition: String,
        saveAllChanges: String,
        saveRowChanges: String,
        sum: String,
        sumOtherColumn: String,
        undeleteRow: String,
        unfix: String,
        ungroup: String,
        ungroupAll: String,
        validationCancelChanges: String
      }
    });
    exports.DxTexts = DxTexts;
    DxTexts.$_optionName = "texts";
    var DxToolbarItem = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:disabled": null,
        "update:html": null,
        "update:location": null,
        "update:options": null,
        "update:template": null,
        "update:text": null,
        "update:toolbar": null,
        "update:visible": null,
        "update:widget": null
      },
      props: {
        disabled: Boolean,
        html: String,
        location: String,
        options: {},
        template: {},
        text: String,
        toolbar: String,
        visible: Boolean,
        widget: String
      }
    });
    exports.DxToolbarItem = DxToolbarItem;
    DxToolbarItem.$_optionName = "toolbarItems";
    DxToolbarItem.$_isCollectionItem = true;
    var DxTotalItem = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignment": null,
        "update:column": null,
        "update:cssClass": null,
        "update:customizeText": null,
        "update:displayFormat": null,
        "update:name": null,
        "update:showInColumn": null,
        "update:skipEmptyValues": null,
        "update:summaryType": null,
        "update:valueFormat": null
      },
      props: {
        alignment: String,
        column: String,
        cssClass: String,
        customizeText: Function,
        displayFormat: String,
        name: String,
        showInColumn: String,
        skipEmptyValues: Boolean,
        summaryType: String,
        valueFormat: [Object, Function, String]
      }
    });
    exports.DxTotalItem = DxTotalItem;
    DxTotalItem.$_optionName = "totalItems";
    DxTotalItem.$_isCollectionItem = true;
    DxTotalItem.$_expectedChildren = {
      valueFormat: { isCollectionItem: false, optionName: "valueFormat" }
    };
    var DxValidationRule = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:comparisonTarget": null,
        "update:comparisonType": null,
        "update:ignoreEmptyValue": null,
        "update:max": null,
        "update:message": null,
        "update:min": null,
        "update:pattern": null,
        "update:reevaluate": null,
        "update:trim": null,
        "update:type": null,
        "update:validationCallback": null
      },
      props: {
        comparisonTarget: Function,
        comparisonType: String,
        ignoreEmptyValue: Boolean,
        max: {},
        message: String,
        min: {},
        pattern: {},
        reevaluate: Boolean,
        trim: Boolean,
        type: String,
        validationCallback: Function
      }
    });
    exports.DxValidationRule = DxValidationRule;
    DxValidationRule.$_optionName = "validationRules";
    DxValidationRule.$_isCollectionItem = true;
    DxValidationRule.$_predefinedProps = {
      type: "required"
    };
    var DxValueFormat = index_2.createConfigurationComponent({
      emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:currency": null,
        "update:formatter": null,
        "update:parser": null,
        "update:precision": null,
        "update:type": null
      },
      props: {
        currency: String,
        formatter: Function,
        parser: Function,
        precision: Number,
        type: String
      }
    });
    exports.DxValueFormat = DxValueFormat;
    DxValueFormat.$_optionName = "valueFormat";
    exports.default = DxDataGrid;
  }
});
export default require_data_grid();
/*! Bundled license information:

jszip/dist/jszip.min.js:
  (*!
  
  JSZip v3.10.1 - A JavaScript class for generating and reading zip files
  <http://stuartk.com/jszip>
  
  (c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>
  Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/main/LICENSE.markdown.
  
  JSZip uses the library pako released under the MIT license :
  https://github.com/nodeca/pako/blob/main/LICENSE
  *)

devextreme-vue/data-grid.js:
  (*!
   * devextreme-vue
   * Version: 21.1.12
   * Build date: Fri Apr 07 2023
   *
   * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
   *
   * This software may be modified and distributed under the terms
   * of the MIT license. See the LICENSE file in the root of the project for details.
   *
   * https://github.com/DevExpress/devextreme-vue
   *)
*/
//# sourceMappingURL=devextreme-vue_data-grid.js.map

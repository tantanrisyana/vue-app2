/*!
 * devextreme-vue
 * Version: 21.1.12
 * Build date: Fri Apr 07 2023
 *
 * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DxAnimation = exports.DxDeferRendering = void 0;
var defer_rendering_1 = __importDefault(require("devextreme/ui/defer_rendering"));
var index_1 = require("./core/index");
var index_2 = require("./core/index");
var DxDeferRendering = index_1.createComponent({
    props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        animation: Object,
        disabled: Boolean,
        elementAttr: {},
        focusStateEnabled: Boolean,
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        onContentReady: Function,
        onDisposing: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        onRendered: Function,
        onShown: Function,
        renderWhen: {},
        rtlEnabled: Boolean,
        showLoadIndicator: Boolean,
        staggerItemSelector: String,
        tabIndex: Number,
        visible: Boolean,
        width: [Function, Number, String]
    },
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:animation": null,
        "update:disabled": null,
        "update:elementAttr": null,
        "update:focusStateEnabled": null,
        "update:height": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:onContentReady": null,
        "update:onDisposing": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:onRendered": null,
        "update:onShown": null,
        "update:renderWhen": null,
        "update:rtlEnabled": null,
        "update:showLoadIndicator": null,
        "update:staggerItemSelector": null,
        "update:tabIndex": null,
        "update:visible": null,
        "update:width": null,
    },
    computed: {
        instance: function () {
            return this.$_instance;
        }
    },
    beforeCreate: function () {
        this.$_WidgetClass = defer_rendering_1.default;
        this.$_hasAsyncTemplate = true;
        this.$_expectedChildren = {
            animation: { isCollectionItem: false, optionName: "animation" }
        };
    }
});
exports.DxDeferRendering = DxDeferRendering;
var DxAnimation = index_2.createConfigurationComponent({
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:complete": null,
        "update:delay": null,
        "update:direction": null,
        "update:duration": null,
        "update:easing": null,
        "update:from": null,
        "update:staggerDelay": null,
        "update:start": null,
        "update:to": null,
        "update:type": null,
    },
    props: {
        complete: Function,
        delay: Number,
        direction: String,
        duration: Number,
        easing: String,
        from: {},
        staggerDelay: Number,
        start: Function,
        to: {},
        type: String
    }
});
exports.DxAnimation = DxAnimation;
DxAnimation.$_optionName = "animation";
exports.default = DxDeferRendering;
